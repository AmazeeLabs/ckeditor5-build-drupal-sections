{"version":3,"sources":["webpack://SectionsEditor/webpack/universalModuleDefinition","webpack://SectionsEditor/webpack/bootstrap","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-html/lib/modify-template.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-html/lib/shady-render.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-element/lib/updating-element.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-element/lib/decorators.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-element/lib/css-tag.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-element/lit-element.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/log.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/editor/operations.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/style-loader/lib/addStyles.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-html/lib/template.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_root.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-html/lib/parts.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-html/lib/part.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-html/lib/default-template-processor.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-html/lit-html.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-html/lib/dom.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-html/lib/template-result.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-html/lib/template-factory.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-html/lib/directive.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-html/lib/render.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_nodeUtil.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/node_modules/lit-html/lib/template-instance.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isBuffer.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_freeGlobal.js","webpack://SectionsEditor/(webpack)/buildin/global.js","webpack://SectionsEditor/(webpack)/buildin/harmony-module.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/diffelement/diffelement.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-heading/theme/heading.css?f805","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/theme/link.css?9613","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/stubFalse.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_cloneBuffer.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-undo/theme/icons/undo.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-undo/theme/icons/redo.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/bold.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/italic.svg","webpack://SectionsEditor/../ckeditor5-core/theme/icons/quote.svg","webpack://SectionsEditor/../ckeditor5-ui/theme/icons/dropdown-arrow.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-list/theme/icons/numberedlist.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-list/theme/icons/bulletedlist.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-widget/theme/icons/drag-handler.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/theme/icons/table.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/theme/icons/table-column.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/theme/icons/table-row.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/theme/icons/table-merge-cell.svg","webpack://SectionsEditor/../ckeditor5-template/theme/icons/configure.svg","webpack://SectionsEditor/../ckeditor5-core/theme/icons/check.svg","webpack://SectionsEditor/../ckeditor5-core/theme/icons/cancel.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/theme/icons/unlink.svg","webpack://SectionsEditor/../ckeditor5-core/theme/icons/pencil.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/theme/icons/link.svg","webpack://SectionsEditor/../ckeditor5-drupal-media/theme/icons/search.svg","webpack://SectionsEditor/../ckeditor5-drupal-media/theme/icons/upload.svg","webpack://SectionsEditor/../ckeditor5-core/theme/icons/pilcrow.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/placeholder/placeholder.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/placeholder/icons/close.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/placeholder/icons/carousel.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/placeholder/icons/formatted-text.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/placeholder/icons/image.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/placeholder/icons/misc.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/placeholder/icons/text.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/placeholder/icons/text-media.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/placeholder/icons/video.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/diffelement/diffelement.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/container/icons/up.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/container/icons/down.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/container/icons/delete.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/container/container-item.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/gallery/gallery.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/gallery/icons/leftArrow.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/gallery/icons/rightArrow.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/gallery/icons/trash.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/tabs/tabs.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/tabs/modal.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/tabs/icons/pencil.svg","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/text_conflict/text_conflict.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/text_conflict/text_conflict_option/text_conflict_option.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/media_conflict/media_conflict_option/media_conflict_option.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/media_conflict/media_conflict.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/version.js","webpack://SectionsEditor/../ckeditor5-ui/theme/globals/globals.css?2a10","webpack://SectionsEditor/../ckeditor5-ui/theme/globals/globals.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/style-loader/lib/urls.js","webpack://SectionsEditor/../ckeditor5-ui/theme/components/panel/balloonpanel.css?f536","webpack://SectionsEditor/../ckeditor5-ui/theme/components/panel/balloonpanel.css","webpack://SectionsEditor/../ckeditor5-ui/theme/components/toolbar/toolbar.css?458a","webpack://SectionsEditor/../ckeditor5-ui/theme/components/toolbar/toolbar.css","webpack://SectionsEditor/../ckeditor5-ui/theme/components/editorui/editorui.css?c0e2","webpack://SectionsEditor/../ckeditor5-ui/theme/components/editorui/editorui.css","webpack://SectionsEditor/../ckeditor5-ui/theme/components/icon/icon.css?1f58","webpack://SectionsEditor/../ckeditor5-ui/theme/components/icon/icon.css","webpack://SectionsEditor/../ckeditor5-ui/theme/components/tooltip/tooltip.css?50c2","webpack://SectionsEditor/../ckeditor5-ui/theme/components/tooltip/tooltip.css","webpack://SectionsEditor/../ckeditor5-ui/theme/components/button/button.css?fd56","webpack://SectionsEditor/../ckeditor5-ui/theme/components/button/button.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-block-quote/theme/blockquote.css?44fb","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-block-quote/theme/blockquote.css","webpack://SectionsEditor/../ckeditor5-ui/theme/components/dropdown/dropdown.css?66c2","webpack://SectionsEditor/../ckeditor5-ui/theme/components/dropdown/dropdown.css","webpack://SectionsEditor/../ckeditor5-ui/theme/components/list/list.css?5b4a","webpack://SectionsEditor/../ckeditor5-ui/theme/components/list/list.css","webpack://SectionsEditor/../ckeditor5-ui/theme/components/button/switchbutton.css?c2cd","webpack://SectionsEditor/../ckeditor5-ui/theme/components/button/switchbutton.css","webpack://SectionsEditor/../ckeditor5-ui/theme/components/dropdown/toolbardropdown.css?4b0e","webpack://SectionsEditor/../ckeditor5-ui/theme/components/dropdown/toolbardropdown.css","webpack://SectionsEditor/../ckeditor5-ui/theme/components/dropdown/listdropdown.css?3210","webpack://SectionsEditor/../ckeditor5-ui/theme/components/dropdown/listdropdown.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-heading/theme/heading.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/theme/tableediting.css?c796","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/theme/tableediting.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/theme/inserttable.css?bfb5","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/theme/inserttable.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-widget/theme/widget.css?d3ac","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-widget/theme/widget.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/theme/table.css?c0a4","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/theme/table.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/theme/placeholder.css?31e1","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/theme/placeholder.css","webpack://SectionsEditor/../ckeditor5-ui/theme/components/inputtext/inputtext.css?44b4","webpack://SectionsEditor/../ckeditor5-ui/theme/components/inputtext/inputtext.css","webpack://SectionsEditor/../ckeditor5-template/theme/css/textlimit.css?26b0","webpack://SectionsEditor/../ckeditor5-template/theme/css/textlimit.css","webpack://SectionsEditor/../ckeditor5-template/theme/css/hoveredwidget.css?df9d","webpack://SectionsEditor/../ckeditor5-template/theme/css/hoveredwidget.css","webpack://SectionsEditor/../ckeditor5-template/theme/css/gallery.css?04f5","webpack://SectionsEditor/../ckeditor5-template/theme/css/gallery.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/theme/link.css","webpack://SectionsEditor/../ckeditor5-ui/theme/components/label/label.css?7646","webpack://SectionsEditor/../ckeditor5-ui/theme/components/label/label.css","webpack://SectionsEditor/../ckeditor5-ui/theme/components/labeledinput/labeledinput.css?ec21","webpack://SectionsEditor/../ckeditor5-ui/theme/components/labeledinput/labeledinput.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/theme/linkform.css?2199","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/theme/linkform.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/theme/linkactions.css?25d9","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/theme/linkactions.css","webpack://SectionsEditor/../ckeditor5-ui/theme/components/toolbar/blocktoolbar.css?34a6","webpack://SectionsEditor/../ckeditor5-ui/theme/components/toolbar/blocktoolbar.css","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/container/container.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/spy.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/eventinfo.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/uid.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/priorities.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isObject.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_Symbol.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_getRawTag.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_objectToString.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseGetTag.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isFunction.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_coreJsData.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_isMasked.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_toSource.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseIsNative.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_getValue.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_getNative.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_defineProperty.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseAssignValue.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/eq.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_assignValue.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_copyObject.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/identity.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_apply.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_overRest.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/constant.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseSetToString.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_shortOut.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_setToString.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseRest.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isLength.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isArrayLike.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_isIndex.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_isIterateeCall.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_createAssigner.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseTimes.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isObjectLike.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseIsArguments.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isArguments.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isArray.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseIsTypedArray.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseUnary.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isTypedArray.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_arrayLikeKeys.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_isPrototype.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_nativeKeysIn.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseKeysIn.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/keysIn.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/assignIn.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/mix.js","webpack://SectionsEditor/../ckeditor5-core/src/plugin.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_overArg.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_getPrototype.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isPlainObject.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/config.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/comparearrays.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_listCacheClear.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_assocIndexOf.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_listCacheDelete.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_listCacheGet.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_listCacheHas.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_listCacheSet.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_ListCache.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_stackClear.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_stackDelete.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_stackGet.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_stackHas.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_Map.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_nativeCreate.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_hashClear.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_hashDelete.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_hashGet.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_hashHas.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_hashSet.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_Hash.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_mapCacheClear.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_isKeyable.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_getMapData.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_mapCacheDelete.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_mapCacheGet.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_mapCacheHas.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_mapCacheSet.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_MapCache.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_stackSet.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_Stack.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_arrayEach.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_nativeKeys.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseKeys.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/keys.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseAssign.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseAssignIn.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_copyArray.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_arrayFilter.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/stubArray.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_getSymbols.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_copySymbols.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_arrayPush.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_getSymbolsIn.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_copySymbolsIn.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseGetAllKeys.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_getAllKeys.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_getAllKeysIn.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_DataView.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_Promise.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_Set.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_WeakMap.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_getTag.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_initCloneArray.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_Uint8Array.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_cloneArrayBuffer.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_cloneDataView.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_cloneRegExp.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_cloneSymbol.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_cloneTypedArray.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_initCloneByTag.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseCreate.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_initCloneObject.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseIsMap.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isMap.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseIsSet.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isSet.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseClone.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/clone.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/node.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/text.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/textproxy.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/objecttomap.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/matcher.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/element.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/containerelement.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/editableelement.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/rooteditableelement.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/treewalker.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/position.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/range.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/count.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/selection.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/documentselection.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/collection.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/document.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/attributeelement.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/emptyelement.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/env.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/uielement.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/documentfragment.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/downcastwriter.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/istext.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/filler.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/diff.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/insertat.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/remove.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/isnode.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/fastdiff.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/renderer.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/indexof.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/getancestors.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isElement.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/domconverter.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/getcommonancestor.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/iswindow.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/observer.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_setCacheAdd.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_setCacheHas.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_SetCache.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_arraySome.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_cacheHas.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_equalArrays.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_mapToArray.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_setToArray.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_equalByTag.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_equalObjects.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseIsEqualDeep.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/_baseIsEqual.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isEqualWith.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mutationobserver.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventdata.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/keyobserver.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/now.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isSymbol.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/toNumber.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/debounce.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/fakeselectionobserver.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/selectionobserver.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/focusobserver.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/compositionobserver.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/isrange.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/getborderwidths.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/scroll.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/view.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/tomap.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/node.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/text.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/textproxy.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/element.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/treewalker.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/last.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/position.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/range.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/conversion/mapper.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/conversion/modelconsumable.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcastdispatcher.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/liverange.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/documentselection.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/cloneDeep.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcast-converters.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/controller/editingcontroller.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcast-selection-converters.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcast-selection-converters.js","webpack://SectionsEditor/../ckeditor5-core/src/plugincollection.js","webpack://SectionsEditor/../ckeditor5-core/src/commandcollection.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/translation-service.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/locale.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/conversion/viewconsumable.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/schema.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcastdispatcher.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcast-converters.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/controller/datacontroller.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversion.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/batch.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/documentfragment.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/utils.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/isEqual.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/attributeoperation.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/detachoperation.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/moveoperation.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/markeroperation.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/renameoperation.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/rootattributeoperation.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/mergeoperation.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/rootelement.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/writer.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/differ.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/history.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/unicode.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/document.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/markercollection.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/liveposition.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/insertcontent.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/deletecontent.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/modifyselection.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/getselectedcontent.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/selection-post-fixer.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/model.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js","webpack://SectionsEditor/../ckeditor5-core/src/editingkeystrokehandler.js","webpack://SectionsEditor/../ckeditor5-core/src/editor/editor.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/basichtmlwriter.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js","webpack://SectionsEditor/../ckeditor5-ui/src/viewcollection.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/lodash-es/cloneDeepWith.js","webpack://SectionsEditor/../ckeditor5-ui/src/template.js","webpack://SectionsEditor/../ckeditor5-ui/src/view.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/position.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/getpositionedancestor.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/tounit.js","webpack://SectionsEditor/../ckeditor5-ui/src/panel/balloon/balloonpanelview.js","webpack://SectionsEditor/../ckeditor5-ui/src/panel/balloon/contextualballoon.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/focustracker.js","webpack://SectionsEditor/../ckeditor5-ui/src/focuscycler.js","webpack://SectionsEditor/../ckeditor5-ui/src/toolbar/toolbarseparatorview.js","webpack://SectionsEditor/../ckeditor5-ui/src/toolbar/toolbarview.js","webpack://SectionsEditor/../ckeditor5-ui/src/bindings/preventdefault.js","webpack://SectionsEditor/../ckeditor5-ui/src/toolbar/balloon/balloontoolbar.js","webpack://SectionsEditor/../ckeditor5-ui/src/toolbar/normalizetoolbarconfig.js","webpack://SectionsEditor/../ckeditor5-ui/src/componentfactory.js","webpack://SectionsEditor/../ckeditor5-core/src/editor/editorui.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-editor-balloon/src/ballooneditorui.js","webpack://SectionsEditor/../ckeditor5-ui/src/toolbar/enabletoolbarkeyboardfocus.js","webpack://SectionsEditor/../ckeditor5-ui/src/editorui/editoruiview.js","webpack://SectionsEditor/../ckeditor5-ui/src/editableui/editableuiview.js","webpack://SectionsEditor/../ckeditor5-ui/src/editableui/inline/inlineeditableuiview.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-editor-balloon/src/ballooneditoruiview.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/setdatainelement.js","webpack://SectionsEditor/../ckeditor5-core/src/editor/utils/elementapimixin.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-editor-balloon/src/ballooneditor.js","webpack://SectionsEditor/../ckeditor5-core/src/editor/utils/attachtoform.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/dom/getdatafromelement.js","webpack://SectionsEditor/../ckeditor5-core/src/editor/utils/dataapimixin.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-clipboard/src/datatransfer.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-clipboard/src/clipboardobserver.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-clipboard/src/utils/viewtoplaintext.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-clipboard/src/clipboard.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-clipboard/src/utils/normalizeclipboarddata.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-clipboard/src/utils/plaintexttohtml.js","webpack://SectionsEditor/../ckeditor5-core/src/command.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-enter/src/entercommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-enter/src/enterobserver.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-enter/src/enter.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-enter/src/shiftentercommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-enter/src/shiftenter.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-typing/src/utils/changebuffer.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-typing/src/inputcommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-typing/src/utils/injectunsafekeystrokeshandling.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-typing/src/utils/utils.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/difftochanges.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-typing/src/utils/injecttypingmutationshandling.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-typing/src/input.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-typing/src/deletecommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-typing/src/deleteobserver.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-typing/src/utils/injectandroidbackspacemutationshandling.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-typing/src/delete.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-typing/src/typing.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/nooperation.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/model/operation/transform.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-undo/src/basecommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-undo/src/undocommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-undo/src/redocommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-undo/src/undoediting.js","webpack://SectionsEditor/../ckeditor5-ui/src/icon/iconview.js","webpack://SectionsEditor/../ckeditor5-ui/src/tooltip/tooltipview.js","webpack://SectionsEditor/../ckeditor5-ui/src/button/buttonview.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-undo/src/undoui.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-undo/src/undo.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-autoformat/src/blockautoformatediting.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-autoformat/src/inlineautoformatediting.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-basic-styles/src/attributecommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-basic-styles/src/bold/boldediting.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-basic-styles/src/bold/boldui.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-basic-styles/src/italic/italicediting.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-basic-styles/src/italic/italicui.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-utils/src/first.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-block-quote/src/blockquotecommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-block-quote/src/blockquoteediting.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-block-quote/src/blockquoteui.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-paragraph/src/paragraphcommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-paragraph/src/paragraph.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-heading/src/headingcommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-heading/src/headingediting.js","webpack://SectionsEditor/../ckeditor5-ui/src/model.js","webpack://SectionsEditor/../ckeditor5-ui/src/dropdown/dropdownpanelview.js","webpack://SectionsEditor/../ckeditor5-ui/src/dropdown/dropdownview.js","webpack://SectionsEditor/../ckeditor5-ui/src/dropdown/button/dropdownbuttonview.js","webpack://SectionsEditor/../ckeditor5-ui/src/list/listview.js","webpack://SectionsEditor/../ckeditor5-ui/src/list/listitemview.js","webpack://SectionsEditor/../ckeditor5-ui/src/list/listseparatorview.js","webpack://SectionsEditor/../ckeditor5-ui/src/button/switchbuttonview.js","webpack://SectionsEditor/../ckeditor5-ui/src/bindings/clickoutsidehandler.js","webpack://SectionsEditor/../ckeditor5-ui/src/dropdown/utils.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-heading/src/headingui.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-heading/src/utils.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-list/src/listcommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-list/src/indentcommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-list/src/utils.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-list/src/converters.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-list/src/listediting.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-list/src/listui.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/commands/utils.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/converters/upcasttable.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-widget/src/highlightstack.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-widget/src/utils.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/utils.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/converters/downcast.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/tableutils.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/commands/inserttablecommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/commands/insertrowcommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/commands/insertcolumncommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/commands/splitcellcommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/commands/mergecellcommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/commands/removerowcommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/commands/removecolumncommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/commands/setheaderrowcommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/commands/setheadercolumncommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/converters/table-layout-post-fixer.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-content-post-fixer.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/converters/tablecell-post-fixer.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/tableediting.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/ui/inserttableview.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/tableui.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-widget/src/widget.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-widget/src/widgettoolbarrepository.js","webpack://SectionsEditor/../ckeditor5-template/src/utils/elementinfo.js","webpack://SectionsEditor/../ckeditor5-template/src/commands/inserttemplatecommand.js","webpack://SectionsEditor/../ckeditor5-template/src/utils/conversion.js","webpack://SectionsEditor/../ckeditor5-template/src/utils/integrity.js","webpack://SectionsEditor/../ckeditor5-template/src/commands/templatecommandbase.js","webpack://SectionsEditor/../ckeditor5-template/src/commands/removetemplatecommand.js","webpack://SectionsEditor/../ckeditor5-template/src/templateediting.js","webpack://SectionsEditor/../ckeditor5-template/src/mastertemplate.js","webpack://SectionsEditor/../ckeditor5-template/src/ui/templateui.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/placeholder.js","webpack://SectionsEditor/../ckeditor5-template/src/elements/textelement.js","webpack://SectionsEditor/../ckeditor5-template/src/elements/placeholderelement.js","webpack://SectionsEditor/../ckeditor5-template/src/elements/containerelement.js","webpack://SectionsEditor/../ckeditor5-ui/src/inputtext/inputtextview.js","webpack://SectionsEditor/../ckeditor5-template/src/commands/templateattributecommand.js","webpack://SectionsEditor/../ckeditor5-template/src/ui/views/templatebuttonview.js","webpack://SectionsEditor/../ckeditor5-template/src/ui/templateattributeui.js","webpack://SectionsEditor/../ckeditor5-template/src/templateid.js","webpack://SectionsEditor/../ckeditor5-template/src/ui/views/textlimittooltipview.js","webpack://SectionsEditor/../ckeditor5-template/src/textlimit.js","webpack://SectionsEditor/../ckeditor5-template/src/hoveredwidget.js","webpack://SectionsEditor/../ckeditor5-template/src/elements/galleryelement.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/src/findlinkrange.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/src/linkcommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/src/unlinkcommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/src/utils.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/utils/bindtwostepcarettoattribute.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/src/linkediting.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-engine/src/view/observer/clickobserver.js","webpack://SectionsEditor/../ckeditor5-ui/src/label/labelview.js","webpack://SectionsEditor/../ckeditor5-ui/src/labeledinput/labeledinputview.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/src/ui/linkformview.js","webpack://SectionsEditor/../ckeditor5-ui/src/bindings/submithandler.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/src/ui/linkactionsview.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/src/linkui.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-link/src/link.js","webpack://SectionsEditor/../ckeditor5-drupal-linkit/src/linkitcommand.js","webpack://SectionsEditor/../ckeditor5-drupal-linkit/src/unlinklinkitcommand.js","webpack://SectionsEditor/../ckeditor5-drupal-linkit/src/utils.js","webpack://SectionsEditor/../ckeditor5-drupal-linkit/src/linkitediting.js","webpack://SectionsEditor/../ckeditor5-drupal-linkit/src/linkitui.js","webpack://SectionsEditor/../ckeditor5-drupal-media/src/drupalmediaediting.js","webpack://SectionsEditor/../ckeditor5-drupal-media/src/drupalmediaselectcommand.js","webpack://SectionsEditor/../ckeditor5-drupal-media/src/drupalmediaui.js","webpack://SectionsEditor/../ckeditor5-ui/src/toolbar/block/blockbuttonview.js","webpack://SectionsEditor/../ckeditor5-drupal-linkit/src/elements/buttonelement.js","webpack://SectionsEditor/../ckeditor5-template/src/observer/remotecontrolobserver.js","webpack://SectionsEditor/../ckeditor5-template/src/commands/remotecontrolcommand.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/placeholder/placeholder.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/gallery/gallery.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/tabs/tabs.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/text_conflict/text_conflict.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/text_conflict/text_conflict_option/text_conflict_option.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/media_conflict/media_conflict_option/media_conflict_option.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@amazee/editor-components/components/media_conflict/media_conflict.js","webpack://SectionsEditor/./src/ckeditor.js","webpack://SectionsEditor/../ckeditor5-template/src/remotecontrol.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-essentials/src/essentials.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-autoformat/src/autoformat.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-basic-styles/src/bold.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-basic-styles/src/italic.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-block-quote/src/blockquote.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-heading/src/heading.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-list/src/list.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/table.js","webpack://SectionsEditor//home/monya/www/ckeditor5-update/node_modules/@ckeditor/ckeditor5-table/src/tabletoolbar.js","webpack://SectionsEditor/../ckeditor5-ui/src/toolbar/block/blocktoolbar.js","webpack://SectionsEditor/../ckeditor5-template/src/template.js","webpack://SectionsEditor/../ckeditor5-drupal-linkit/src/linkit.js","webpack://SectionsEditor/../ckeditor5-drupal-media/src/drupalmedia.js","webpack://SectionsEditor/../ckeditor5-template/src/validation.js","webpack://SectionsEditor/../ckeditor5-template/src/elements/tabselement.js","webpack://SectionsEditor/../ckeditor5-template/src/mergeediting.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","CKEditorError","attachLinkToDocumentation","DOCUMENTATION_URL","Error","[object Object]","message","data","JSON","stringify","super","this","error","matchedErrorName","match","walkerNodeFilter","removeNodesFromTemplate","template","nodesToRemove","element","content","parts","walker","document","createTreeWalker","partIndex","nextActiveIndexInTemplateParts","part","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","nextNode","node","currentNode","previousSibling","has","push","undefined","index","forEach","parentNode","removeChild","countNodes","count","nodeType","startIndex","length","lib_template","getTemplateCacheKey","type","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","createElement","style","textContent","templates","template_factory","keyString","Array","from","removeStylesFromLitTemplates","refNode","appendChild","insertCount","walkerIndex","insertBefore","insertNodeIntoTemplate","firstChild","nativeShadow","querySelector","cloneNode","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","Map","_reflectingProperties","initialize","observedAttributes","finalize","attributes","_classProperties","v","attr","_attributeNameForProperty","_attributeToPropertyMap","set","superProperties","getPrototypeOf","k","options","_ensureClassProperties","noAccessor","oldValue","requestUpdate","configurable","finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","toLowerCase","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","removeAttribute","setAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","previousUpdatePromise","res","_hasConnected","result","performUpdate","then","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","update","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","customElement","tagName","classOrDescriptor","clazz","customElements","legacyCustomElement","descriptor","kind","elements","standardCustomElement","_query","target","selector","legacyQuery","proto","standardQuery","placement","queryFn","protoOrDescriptor","renderRoot","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","css","strings","values","reduce","acc","idx","textFromCSSResult","lit_element_LitElement","lit_html","flattenStyles","flat","Infinity","arrayFlat","isArray","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","render","eventContext","container","hasRendered","needsScoping","template_result","firstScopeRender","renderContainer","createDocumentFragment","assign","templateFactory","cacheKey","templateCache","stringsArray","WeakMap","join","getTemplateElement","shadyTemplateFactory","delete","template_instance","dom","host","_ckeditorerror__WEBPACK_IMPORTED_MODULE_0__","log","eventType","batch","insert","move","replace","remove","swap","createEvent","detail","CustomEvent","operations","operation","parent","position","reference","source","stylesInDom","isOldIE","fn","memo","apply","arguments","memoize","all","atob","getElement","styleTarget","HTMLIFrameElement","contentDocument","head","e","singleton","singletonCounter","stylesInsertedAtTop","fixUrls","addStylesToDom","item","domStyle","id","refs","j","addStyle","listToStyles","list","newStyles","base","media","sourceMap","insertStyleElement","insertInto","lastStyleElementInsertedAtTop","insertAt","nextSibling","before","removeStyleElement","indexOf","splice","createStyleElement","attrs","nonce","nc","getNonce","addAttrs","el","keys","obj","transform","default","styleIndex","applyToSingletonTag","URL","createObjectURL","revokeObjectURL","Blob","btoa","link","rel","createLinkElement","autoFixUrls","convertToAbsoluteUrls","unescape","encodeURIComponent","blob","oldSrc","href","createTextNode","newObj","DEBUG","newList","mayRemove","replaceText","textStore","replacement","filter","cssNode","childNodes","marker","nodeMarker","boundAttributeSuffix","Template","isTemplatePartActive","createMarker","lastAttributeNameRegex","Math","random","slice","markerRegex","RegExp","_prepareTemplate","lastPartIndex","hasAttributes","stringForPart","exec","attributeLookupName","getAttribute","split","lastIndex","createComment","_freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__","freeSelf","self","Function","AttributeCommitter","NodePart","BooleanAttributePart","PropertyCommitter","EventPart","_directive_js__WEBPACK_IMPORTED_MODULE_0__","_dom_js__WEBPACK_IMPORTED_MODULE_1__","_part_js__WEBPACK_IMPORTED_MODULE_2__","_template_instance_js__WEBPACK_IMPORTED_MODULE_3__","_template_result_js__WEBPACK_IMPORTED_MODULE_4__","_template_js__WEBPACK_IMPORTED_MODULE_5__","isPrimitive","dirty","_createPart","AttributePart","text","iterator","_getValue","comitter","committer","directive","commit","_pendingValue","startNode","endNode","ref","_insert","_commitText","_commitTemplateResult","Node","_commitNode","_commitIterable","clear","instance","processor","fragment","_clone","itemParts","itemPart","appendIntoPart","insertAfterPart","setValue","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","eventName","_boundHandleEvent","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","_options","getOptions","event","noChange","nothing","defaultTemplateProcessor","prefix","html","svg","isCEPolyfill","reparentNodes","removeNodes","polyfillWrapFlushCallback","start","end","TemplateResult","SVGTemplateResult","_dom_js__WEBPACK_IMPORTED_MODULE_0__","_template_js__WEBPACK_IMPORTED_MODULE_1__","endIndex","substr","innerHTML","getHTML","svgElement","templateCaches","_template_js__WEBPACK_IMPORTED_MODULE_0__","isDirective","directives","_parts_js__WEBPACK_IMPORTED_MODULE_1__","_template_factory_js__WEBPACK_IMPORTED_MODULE_2__","appendInto","freeExports","freeModule","freeProcess","process","nodeUtil","types","require","binding","TemplateInstance","_parts","importNode","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","_root_js__WEBPACK_IMPORTED_MODULE_0__","_stubFalse_js__WEBPACK_IMPORTED_MODULE_1__","Buffer","isBuffer","global","freeGlobal","g","originalModule","webpackPolyfill","children","hmr","locals","allocUnsafe","buffer","isDeep","copy","DiffElement","lit_element__WEBPACK_IMPORTED_MODULE_0__","_editor_operations__WEBPACK_IMPORTED_MODULE_1__","_diffelement_css__WEBPACK_IMPORTED_MODULE_2__","_diffelement_css__WEBPACK_IMPORTED_MODULE_2___default","added","removed","dispatchEvent","a","handleAccept","handleDecline","_log__WEBPACK_IMPORTED_MODULE_0__","ckeditor5_package_json__WEBPACK_IMPORTED_MODULE_1__","windowOrGlobal","CKEDITOR_VERSION","collidingVersion","version","location","baseUrl","protocol","currentDir","pathname","fullMatch","origUrl","newUrl","unquotedOrigUrl","trim","$1","test","_diffelement_diffelement__WEBPACK_IMPORTED_MODULE_1__","_editor_operations__WEBPACK_IMPORTED_MODULE_2__","_icons_up_svg__WEBPACK_IMPORTED_MODULE_3__","_icons_up_svg__WEBPACK_IMPORTED_MODULE_3___default","_icons_down_svg__WEBPACK_IMPORTED_MODULE_4__","_icons_down_svg__WEBPACK_IMPORTED_MODULE_4___default","_icons_delete_svg__WEBPACK_IMPORTED_MODULE_5__","_icons_delete_svg__WEBPACK_IMPORTED_MODULE_5___default","_container_item_css__WEBPACK_IMPORTED_MODULE_6__","_container_item_css__WEBPACK_IMPORTED_MODULE_6___default","ContainerItem","inContainer","containerIndex","containerItems","containerSections","isHovered","stopImmediatePropagation","stopPropagation","preventDefault","containerUpdate","containerFirst","containerLast","upButton","upHandler","downButton","downHandler","insertHandler","removeHandler","diff","scrollY","parentElement","offsetTop","scrollTo","offsetHeight","sections","observer","MutationObserver","processChildren","observe","childList","subtree","child","appendHandler","src_spy","spy","called","eventinfo_EventInfo","path","stop","off","uid_uid","uuid","floor","toString","substring","src_priorities","priority","normal","highest","high","low","lowest","_listeningTo","_emitterId","emittermixin","callback","listenTo","args","stopListening","emitter","emitterInfo","eventCallbacks","emitters","_getEmitterId","_setEmitterId","emitterId","callbacks","events","getEvents","childEventName","newEventNodes","childEvents","lastIndexOf","createEventNamespace","lists","getCallbacksListsForNamespace","callbackDefinition","removeCallback","pop","eventOrInfo","eventInfo","getCallbacksForEvent","_events","callbackArgs","_delegations","destinations","passAllDestinations","fireDelegatedEvents","return","to","nameOrFunction","eventNode","callbacksLists","childCallbacksLists","concat","fireArgs","delegatedInfo","fire","lodash_es_isObject","_Symbol","_root","objectProto","_getRawTag_hasOwnProperty","nativeObjectToString","symToStringTag","_getRawTag","isOwn","tag","unmasked","_objectToString_nativeObjectToString","_objectToString","nullTag","undefinedTag","_baseGetTag_symToStringTag","_baseGetTag","asyncTag","funcTag","genTag","proxyTag","lodash_es_isFunction","_coreJsData","maskSrcKey","uid","IE_PROTO","_isMasked","func","funcToString","_toSource","reIsHostCtor","_baseIsNative_funcProto","_baseIsNative_objectProto","_baseIsNative_funcToString","_baseIsNative_hasOwnProperty","reIsNative","_baseIsNative","_getNative","_defineProperty","_baseAssignValue","writable","lodash_es_eq","other","_assignValue_hasOwnProperty","_assignValue","objValue","_copyObject","customizer","isNew","newValue","lodash_es_identity","_apply","thisArg","nativeMax","max","_overRest","array","otherArgs","lodash_es_constant","_baseSetToString","string","HOT_COUNT","HOT_SPAN","nativeNow","Date","now","_setToString","lastCalled","stamp","remaining","_shortOut","_baseRest","MAX_SAFE_INTEGER","lodash_es_isLength","lodash_es_isArrayLike","_isIndex_MAX_SAFE_INTEGER","reIsUint","_isIndex","_isIterateeCall","_createAssigner","assigner","sources","guard","_baseTimes","iteratee","lodash_es_isObjectLike","argsTag","_baseIsArguments","isArguments_objectProto","isArguments_hasOwnProperty","propertyIsEnumerable","lodash_es_isArguments","lodash_es_isArray","typedArrayTags","_baseIsTypedArray","_baseUnary","nodeIsTypedArray","_nodeUtil","isTypedArray","lodash_es_isTypedArray","_arrayLikeKeys_hasOwnProperty","_arrayLikeKeys","inherited","isArr","isArg","isBuff","isType","skipIndexes","_isPrototype_objectProto","_isPrototype","Ctor","_nativeKeysIn","_baseKeysIn_hasOwnProperty","_baseKeysIn","isProto","lodash_es_keysIn","lodash_es_assignIn","observablePropertiesSymbol","boundObservablesSymbol","boundPropertiesSymbol","ObservableMixin","initObservable","ckeditorerror","bindProperties","isStringArray","boundProperties","propertyName","bindings","bindTo","toMany","bindToMany","_observable","_bindProperties","_to","_bindings","unbindProperties","boundObservables","toObservable","toProperty","toProperties","toPropertyBindings","boundObservable","methodName","originalMethod","on","evt","observablemixin","observable","parsedArgs","parsed","lastObservable","parseBindToArgs","bindingsKeys","numberOfBindings","toBindings","updateBoundObservableProperty","attachBindToListeners","chain","toPropertyName","bindingsToObservable","updateBoundObservables","updateBindToBound","observables","observableAndAttributePairs","getBindingTargets","arr","every","propertyValue","mix","baseClass","mixins","mixin","sourceDescriptor","getOwnPropertyDescriptor","Plugin","editor","_overArg","arg","_getPrototype","isPlainObject_objectTag","isPlainObject_funcProto","isPlainObject_objectProto","isPlainObject_funcToString","isPlainObject_hasOwnProperty","objectCtorString","lodash_es_isPlainObject","config_Config","configurations","defaultConfigurations","_config","_setObjectToTarget","_setToTarget","_getFromSource","isDefine","configuration","compareArrays","b","minLen","min","_listCacheClear","__data__","_assocIndexOf","_listCacheDelete","_listCacheGet","_listCacheHas","_listCacheSet","ListCache","entries","entry","_ListCache","_stackClear","_stackDelete","_stackGet","_stackHas","_Map","_nativeCreate","_hashClear","_hashDelete","HASH_UNDEFINED","_hashGet_hasOwnProperty","_hashGet","_hashHas_hasOwnProperty","_hashHas","_hashSet_HASH_UNDEFINED","_hashSet","Hash","_Hash","_mapCacheClear","hash","_isKeyable","_getMapData","_mapCacheDelete","_mapCacheGet","_mapCacheHas","_mapCacheSet","MapCache","_MapCache","LARGE_ARRAY_SIZE","_stackSet","pairs","Stack","_Stack","_arrayEach","_nativeKeys","_baseKeys_hasOwnProperty","_baseKeys","lodash_es_keys","_baseAssign","_baseAssignIn","_copyArray","_arrayFilter","predicate","resIndex","lodash_es_stubArray","_getSymbols_propertyIsEnumerable","nativeGetSymbols","_getSymbols","symbol","_copySymbols","_arrayPush","offset","_getSymbolsIn","_copySymbolsIn","_baseGetAllKeys","keysFunc","symbolsFunc","_getAllKeys","_getAllKeysIn","_DataView","_Promise","_Set","_WeakMap","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","getTag","ArrayBuffer","ctorString","_getTag","_initCloneArray_hasOwnProperty","_initCloneArray","input","_Uint8Array","Uint8Array","_cloneArrayBuffer","arrayBuffer","byteLength","_cloneDataView","dataView","byteOffset","reFlags","_cloneRegExp","regexp","symbolProto","symbolValueOf","valueOf","_cloneSymbol","_cloneTypedArray","typedArray","_initCloneByTag_boolTag","_initCloneByTag_dateTag","_initCloneByTag_mapTag","_initCloneByTag_numberTag","_initCloneByTag_regexpTag","_initCloneByTag_setTag","_initCloneByTag_stringTag","symbolTag","_initCloneByTag_arrayBufferTag","_initCloneByTag_dataViewTag","_initCloneByTag_float32Tag","_initCloneByTag_float64Tag","_initCloneByTag_int8Tag","_initCloneByTag_int16Tag","_initCloneByTag_int32Tag","_initCloneByTag_uint8Tag","_initCloneByTag_uint8ClampedTag","_initCloneByTag_uint16Tag","_initCloneByTag_uint32Tag","_initCloneByTag","objectCreate","_baseCreate","_initCloneObject","_baseIsMap_mapTag","_baseIsMap","nodeIsMap","isMap","lodash_es_isMap","_baseIsSet_setTag","_baseIsSet","nodeIsSet","isSet","lodash_es_isSet","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","_baseClone_argsTag","_baseClone_funcTag","_baseClone_genTag","_baseClone_objectTag","cloneableTags","_baseClone","baseClone","bitmask","stack","isFlat","isFull","isFunc","_cloneBuffer","stacked","subValue","keysIn","clone_CLONE_SYMBOLS_FLAG","lodash_es_clone","node_Node","pos","getChildIndex","getChild","includeSelf","parentFirst","ancestors","ancestorsA","getAncestors","ancestorsB","thisPath","getPath","nodePath","isBefore","_removeChildren","_fireChange","json","text_Text","_textData","is","_data","otherNode","textproxy_TextProxy","textNode","offsetInText","offsetSize","isPartial","objectToMap","isIterable","Matcher","pattern","_patterns","classes","singleElement","isElementMatching","results","matchName","patterns","hasAttribute","matchAttributes","getClassNames","hasClass","matchClasses","hasStyle","getStyle","matchStyles","element_Element","_attrs","parseAttributes","_children","_insertChild","_classes","classString","parseClasses","parseInlineStyles","_customProperties","childCount","isEmpty","styleString","otherElement","className","matcher","sort","deep","childrenClone","getChildren","cloned","getFillerOffset","items","nodes","normalize","_remove","howMany","stylesMap","stylesString","quoteType","propertyNameStart","propertyValueStart","charAt","char","classesSet","classesString","classArray","containerelement_ContainerElement","lastChild","documentSymbol","editableelement_EditableElement","getCustomProperty","_document","_setCustomProperty","isFocused","selection","editableElement","rootNameSymbol","rooteditableelement_RootEditableElement","rootName","_name","treewalker_TreeWalker","boundaries","startPosition","direction","position_Position","_createAt","singleCharacters","shallow","ignoreElementEnd","_boundaryStartParent","_boundaryEndParent","skip","done","prevPosition","next","_next","_previous","clone","previousPosition","isAtEnd","_createAfter","_formatReturnValue","charactersCount","textLength","textProxy","isAtStart","_createBefore","startOffset","nextPosition","isEqual","nodeAfter","nodeBefore","endOffset","editable","shift","shifted","treeWalker","otherPosition","compareWith","otherPath","itemOrPosition","range_Range","isCollapsed","getLastMatchingPosition","enlargeTrimSkip","isAfter","nodeAfterStart","nodeBeforeEnd","otherRange","loose","containsStart","containsPosition","containsEnd","ranges","isIntersecting","commonRangeStart","commonRangeEnd","getCommonAncestor","startElement","endElement","getShiftedBy","_createFromParentsAndOffsets","_createFromPositionAndShift","count_count","_","selection_Selection","selectable","placeOrOffset","_ranges","_lastRangeBackward","_isFake","_fakeSelectionLabel","setTo","isFake","fakeSelectionLabel","anchor","range","focus","rangeCount","isBackward","first","last","firstRange","getFirstRange","lastRange","getLastRange","otherSelection","thisRange","found","numOfRangesA","getRanges","rangeA","getTrimmed","rangeB","_setRanges","_setFakeOptions","documentselection_DocumentSelection","fake","label","backward","_createIn","_createOn","newFocus","_addRange","newRanges","isLastBackward","_pushRange","storedRange","addedRange","intersectingRange","_selection","delegate","getFirstPosition","getLastPosition","getSelectedElement","isSimilar","setFocus","collection_Collection","_items","_itemMap","_idProperty","idProperty","_bindToExternalToInternalMap","_bindToInternalToExternalMap","_skippedIndexesFromExternal","itemId","idOrIndex","idOrItem","subject","itemDoesNotExist","externalItem","ctx","find","_bindToCollection","externalCollection","as","Class","_setUpBindToBinding","using","callbackOrProperty","addItem","isExternalBoundToThis","externalItemBound","finalIndex","skipped","getIndex","document_Document","roots","_postFixers","postFixer","writer","wasFixed","DEFAULT_PRIORITY","attributeelement_AttributeElement","attributeelement_getFillerOffset","_priority","_id","_clonesGroup","nonUiChildrenCount","emptyelement_EmptyElement","emptyelement_getFillerOffset","userAgent","navigator","src_env","isMac","isEdge","isGecko","macGlyphsToModifiers","⌘","⇧","⌥","modifiersToMacGlyphs","ctrl","alt","keyCodes","arrowleft","arrowup","arrowright","arrowdown","backspace","enter","space","esc","tab","cmd","code","letter","fromCharCode","generateKnownKeyCodes","getCode","keyCode","altKey","ctrlKey","shiftKey","parseKeystroke","keystroke","splitKeystrokeText","sum","uielement_UIElement","uielement_getFillerOffset","domDocument","toDomElement","domElement","getAttributeKeys","injectUiElementHandling","view","domConverter","domSelection","domTarget","ownerDocument","defaultView","getSelection","domSelectionCollapsed","getRangeAt","collapsed","domParent","focusNode","domOffset","focusOffset","viewPosition","domPositionToView","jumpedOverAnyUiElement","nextViewPosition","newDomPosition","viewPositionToDom","collapse","extend","jumpOverUiElement","documentfragment_DocumentFragment","documentfragment_normalize","downcastwriter_DowncastWriter","_cloneGroups","_setTo","_setFocus","attributeElement","renderFunction","uiElement","_setAttribute","_removeAttribute","_addClass","_removeClass","_setStyle","_removeStyle","_removeCustomProperty","positionOrRange","_breakAttributes","_breakAttributesRange","newElement","sourceRange","targetPosition","positionOffset","positionParent","_removeFromClonedElementsGroup","mergeAttributes","mergeTextNodes","_appendChild","prev","newPosition","validateNodesToInsert","validNodesToInsert","some","validNode","getParentContainer","insertionPosition","_addToClonedElementsGroup","endPosition","rangeOrItem","validateRangeContainer","breakStart","breakEnd","parentContainer","mergePosition","getWalker","current","rangeToRemove","ancestor","countBefore","_hasNonUiChildren","_wrapPosition","viewSelection","setSelection","_wrapRange","_unwrapAttributeElement","newRange","_unwrapChildren","newName","viewElement","getAttributes","groupName","wrapPositions","isText","isAttribute","isUI","shouldABeOutsideB","newAttribute","_wrapChildren","offsetChange","unwrapPositions","unwrapped","rangeSpansOnAllChildren","_wrapAttributeElement","unwrappedRange","movePositionToTextNode","breakTextNode","fakePosition","createAttributeElement","POSITIVE_INFINITY","wrapRange","wrap","wrapper","toWrap","canBeJoined","getStyleNames","setStyle","addClass","toUnwrap","removeClass","removeStyle","forceSplitText","rangeStart","rangeEnd","isContainerOrFragment","offsetAfter","clonedNode","nodesToMove","group","getIdentity","textToMove","t1","t2","nodeBeforeLength","startContainer","endContainer","istext_isText","BR_FILLER","fillerBr","dataset","ckeFiller","NBSP_FILLER","INLINE_FILLER_LENGTH","INLINE_FILLER","startsWithFiller","domNode","isInlineFiller","domText","getDataWithoutFiller","templateBlockFillers","isBlockFiller","blockFiller","templateBlockFiller","isEqualNode","jumpOverInlineFiller","diff_diff","cmp","_delete","tmp","delta","es","fp","snake","y1","y2","dir","y","x","insertat_insertAt","nodeToInsert","remove_remove","isNode","fastDiff","oldText","newText","changeIndexes","firstIndex","lastIndexOld","lastIndexNew","changeIndexesToChanges","findFirstDifferenceIndex","oldTextReversed","cutAndReverse","newTextReversed","findChangeBoundaryIndexes","reverse","renderer_Renderer","domDocuments","markedAttributes","markedChildren","markedTexts","_inlineFiller","_fakeSelectionContainer","mapViewToDom","inlineFillerPosition","_updateChildrenMappings","_isSelectionInInlineFiller","_removeInlineFiller","_getInlineFillerPosition","_needsInlineFillerAtSelection","_updateAttrs","_updateChildren","_updateText","fillerDomPosition","addInlineFiller","_updateSelection","_updateFocus","actualDomChildren","expectedDomChildren","viewChildrenToDom","withChildren","_diffNodeLists","actions","_findReplaceActions","counter","equal","action","insertIndex","deleteIndex","viewChild","_updateElementMappings","unbindDomElement","bindElements","firstPos","selectionPosition","domFillerNode","selectionParent","selectionOffset","findAncestor","isEditable","viewText","findCorrespondingDomText","newDomText","viewToDom","actualText","expectedText","filler","insertData","deleteData","domAttrKeys","viewAttrKeys","nodesToUnbind","_markDescendantTextToSync","domToView","actualDomChild","expectedDomChild","actualDom","expectedDom","newActions","actualSlice","expectedSlice","areSimilar","viewNode","_removeDomSelection","_removeFakeSelection","domRoot","_updateFakeSelection","_updateDomSelection","top","left","width","domRange","createRange","removeAllRanges","selectNodeContents","addRange","bindFakeSelection","_domSelectionNeedsUpdate","ELEMENT_NODE","childAtOffset","fixGeckoSelectionAfterBr","isDomSelectionCorrect","oldViewSelection","domSelectionToView","doc","activeDomElement","activeElement","mapDomToView","domParentOrArray","nodeAfterFiller","fillerNode","node1","node2","DOCUMENT_NODE","lodash_es_isElement","domconverter_DomConverter","preElements","blockElements","_domToViewMapping","_viewToDomMapping","_fakeSelectionMapping","viewDocumentSelection","domFragment","viewFragment","textData","_processDataFromViewText","bindDocumentFragments","fillerPositionOffset","childView","viewRange","domStart","domEnd","setStart","setEnd","viewParent","domBefore","domAfter","getParentUIElement","_processDataFromDomText","isComment","isDocumentFragment","viewName","keepOriginalCase","domChildrenToView","domChild","fakeSelectionToView","isDomSelectionBackward","viewRanges","domRangeToView","viewStart","viewEnd","findCorrespondingViewText","viewBefore","domElementOrDocumentFragment","isElement","documentFragmentOrElement","viewEditable","domEditable","scrollX","scrollPositions","forEachDomNodeAncestor","scrollLeft","scrollTop","DOCUMENT_FRAGMENT_NODE","COMMENT_NODE","anchorNode","anchorOffset","detach","_isDomSelectionPositionCorrect","includes","prevNode","_getTouchingViewTextNode","_nodeEndsWithSpace","_hasDomParentOfType","_getTouchingInlineDomNode","shouldLeftTrim","_checkShouldLeftTrimDomText","shouldRightTrim","_checkShouldRightTrimDomText","Text","getNext","topmostParent","NodeFilter","SHOW_TEXT","SHOW_ELEMENT","acceptNode","FILTER_ACCEPT","FILTER_SKIP","touchingNode","lca","nodeA","nodeB","boundaryParent","parents","isWindow","stringifiedObject","dom_emittermixin","rest","proxy","_getProxyEmitter","emittermixin_ProxyEmitter","attach","listeningEmitter","listenedToEmitterId","_getEmitterListenedTo","getNodeUID","_domNode","_domListeners","domListener","_createDomListener","useCapture","removeListener","domEvt","Observer","isEnabled","disable","_setCacheAdd_HASH_UNDEFINED","_setCacheAdd","_setCacheHas","SetCache","_SetCache","_arraySome","_cacheHas","cache","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","_equalArrays","equalFunc","arrLength","othLength","seen","arrValue","othValue","compared","othIndex","_mapToArray","_setToArray","_equalByTag_COMPARE_PARTIAL_FLAG","_equalByTag_COMPARE_UNORDERED_FLAG","_equalByTag_boolTag","_equalByTag_dateTag","_equalByTag_errorTag","_equalByTag_mapTag","_equalByTag_numberTag","_equalByTag_regexpTag","_equalByTag_setTag","_equalByTag_stringTag","_equalByTag_symbolTag","_equalByTag_arrayBufferTag","_equalByTag_dataViewTag","_equalByTag_symbolProto","_equalByTag_symbolValueOf","_equalByTag","convert","_equalObjects_COMPARE_PARTIAL_FLAG","_equalObjects_hasOwnProperty","_equalObjects","objProps","objLength","skipCtor","objCtor","othCtor","_baseIsEqualDeep_COMPARE_PARTIAL_FLAG","_baseIsEqualDeep_argsTag","_baseIsEqualDeep_arrayTag","_baseIsEqualDeep_objectTag","_baseIsEqualDeep_hasOwnProperty","_baseIsEqualDeep","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","_baseIsEqual","baseIsEqual","lodash_es_isEqualWith","mutationobserver_MutationObserver","characterData","characterDataOldValue","renderer","_renderer","_domElements","_mutationObserver","_onMutations","takeRecords","enable","disconnect","destroy","domMutations","mutatedTexts","mutatedElements","mutation","_isBogusBrMutation","viewMutations","mutatedText","markToSync","viewChildren","newViewChildren","sameNodes","oldChildren","newChildren","viewSelectionAnchor","viewSelectionFocus","child1","child2","addedNode","removedNodes","addedNodes","domeventdata_DomEventData","domEvent","additionalData","domeventobserver_DomEventObserver","domEventType","onDomEvent","keyobserver_KeyObserver","metaKey","lodash_es_now","isSymbol_symbolTag","lodash_es_isSymbol","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","lodash_es_toNumber","isBinary","FUNC_ERROR_TEXT","debounce_nativeMax","nativeMin","lodash_es_debounce","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","cancel","clearTimeout","flush","fakeselectionobserver_FakeSelectionObserver","_fireSelectionChangeDoneDebounced","_isArrowKeyCode","_handleSelectionMove","newSelection","oldSelection","selectionobserver_SelectionObserver","mutationObserver","getObserver","_documents","WeakSet","_clearInfiniteLoopInterval","setInterval","_clearInfiniteLoop","_loopbackCounter","_handleSelectionChange","clearInterval","isReadOnly","newViewSelection","focusobserver_FocusObserver","_renderTimeoutId","selectedEditable","compositionobserver_CompositionObserver","isComposing","isRange","getBorderWidths","getComputedStyle","borderTopWidth","right","borderRightWidth","bottom","borderBottomWidth","borderLeftWidth","rectProperties","rect_Rect","isSourceRange","_source","sourceNode","body","contains","copyRectProperties","getDomRangeRects","getBoundingClientRect","innerWidth","innerHeight","height","anotherRect","rect","getIntersection","getArea","visibleRect","isBody","commonAncestorContainer","parentRect","intersectionRect","intersectRect","scrollBarWidth","scrollBarHeight","documentElement","clientWidth","clientHeight","borderWidths","offsetWidth","moveBy","rects","clientRects","getClientRects","elementOrRange","scrollViewportToShowTarget","viewportOffset","targetWindow","getWindow","currentWindow","currentFrame","firstAncestorToScroll","scrollAncestorsToShowRect","getParentElement","getRectRelativeToWindow","targetRect","scrollWindowToShowRect","frameElement","targetShiftedDownRect","targetShiftedUpRect","viewportRect","excludeScrollbarsAndBorders","isAbove","isBelow","isLeftOf","isRightOf","getRect","parentWindow","firstRect","secondRect","relativeWindow","frame","frameRect","scrollAncestorsToShowTarget","view_View","domRoots","_observers","_ongoingChange","_renderingInProgress","_postFixersInProgress","_renderingDisabled","_writer","addObserver","injectQuirksHandling","_render","viewRoot","getRoot","viewRangeToDom","callbackResult","_callPostFixers","change","disableObservers","enableObservers","toMap","model_node_Node","getChildStartOffset","model_text_Text","toJSON","model_textproxy_TextProxy","nodelist_NodeList","_nodes","_insertNodes","maxOffset","getNodeIndex","getNodeStartOffset","totalOffset","nodeList","indexStart","model_element_Element","getNode","offsetToIndex","relativePath","element_normalize","_removeNodes","fromJSON","model_treewalker_TreeWalker","model_position_Position","stickiness","_visitedParent","prevVisitedParent","formatReturnValue","offsetInTextNode","lodash_es_last","newOffset","diffAt","leftParent","getParentPath","_getTransformedByInsertOperation","_getTransformedByMoveOperation","_getTransformedBySplitOperation","_getTransformedByMergeOperation","_getTransformedByInsertion","_getTransformedByMove","sourcePosition","movedRange","_getCombined","splitPosition","moveTargetPosition","graveyardPosition","_getTransformedByDeletion","deletionPosition","deletePosition","transformed","insertPosition","combined","graveyard","model_range_Range","getCommonPath","posParent","getTransformedByOperation","containsRange","spread","newPos","moveRange","differenceSet","getDifference","difference","common","transformedCommon","newStart","newEnd","refIndex","mapper_Mapper","_modelToViewMapping","_viewToModelMapping","_viewToModelLengthCallbacks","_markerNameToElements","viewContainer","modelPosition","_findPositionIn","viewBlock","modelParent","modelOffset","_toModelOffset","modelElement","toModelElement","toViewElement","toModelPosition","modelRange","toViewPosition","mapper","isPhantom","boundElements","getElementsWithSameId","viewElementName","lengthCallback","viewOffset","getModelLength","len","expectedOffset","lastLength","_moveViewPositionToTextNode","modelconsumable_ModelConsumable","_consumable","_textProxyRegistry","_normalizeConsumableType","_getSymbolForTextProxy","itemConsumables","startMap","endMap","_addSymbolForTextProxy","downcastdispatcher_DowncastDispatcher","conversionApi","dispatcher","differ","getMarkersToRemove","convertMarkerRemove","getChanges","convertInsert","convertRemove","convertAttribute","attributeKey","attributeOldValue","attributeNewValue","getMarkersToAdd","convertMarkerAdd","consumable","_createInsertConsumable","_testAndFire","_clearConversionApi","_createConsumableForRange","markers","markersAtSelection","getMarkersAtPosition","_createSelectionConsumable","markerRange","getRange","shouldMarkerChangeBeConverted","markerName","getItems","containsItem","model_selection_Selection","anyNewRange","oldRange","_removeAllRanges","directChange","_popRange","attributeKeys","visited","startBlock","getParentBlock","isUnvisitedBlockContainer","endBlock","isTouching","limitStartPosition","limitEndPosition","_checkRange","model","schema","isBlock","block","liverange_LiveRange","isDocumentOperation","_createFromRanges","boundariesChanged","contentChanged","doesOperationChangeRangeContent","toRange","storePrefix","model_documentselection_DocumentSelection","documentselection_LiveSelection","hasOwnRange","isGravityOverridden","getSelectedBlocks","containsEntireContent","_getStoredAttributes","overrideGravity","restoreGravity","startsWith","_model","_attributePriority","_fixGraveyardRangesData","_hasChangedRange","_overriddenGravityRegister","_validateSelectionRange","_updateAttributes","changeParent","isNoLongerEmpty","enqueueChange","storedAttributes","clearAttributesStoredInElement","liveRange","_fixGraveyardSelection","_getDefaultRange","optionsOrPlaceOrOffset","_refreshAttributes","overrideUid","_prepareRange","fromRange","clearAll","newAttributes","_getSurroundingAttributes","oldAttributes","_setAttributesTo","changed","newKey","oldKey","getAttrsIfCharacter","isObject","removedRangeStart","positionCandidate","selectionRange","getNearestSelectionRange","cloneDeep_CLONE_DEEP_FLAG","cloneDeep_CLONE_SYMBOLS_FLAG","lodash_es_cloneDeep","downcastElementToElement","config","_normalizeToElementConfig","insertElement","converterPriority","downcastAttributeToElement","modelValue","elementCreator","_getFromAttributeCreator","oldViewElement","newViewElement","consume","viewWriter","toViewRange","unwrap","downcastAttributeToAttribute","_normalizeToAttributeConfig","attributeCreator","oldAttribute","changeAttribute","viewElementType","modelData","viewElementDefinition","createContainerElement","createUIElement","_createViewElementFromDefinition","modelAttributeValue","editingcontroller_EditingController","downcastDispatcher","convertChanges","convertSelection","modelSelection","toModelRange","convertSelectionChange","createText","modelEnd","createRangeIn","unbindViewElement","brokenPosition","breakAttributes","plugincollection_PluginCollection","availablePlugins","_editor","_availablePlugins","_plugins","PluginConstructor","pluginName","plugins","removePlugins","that","loading","loaded","pluginConstructors","mapToAvailableConstructors","removePluginConstructors","missingPlugins","pluginNameOrConstructor","getPluginConstructor","getMissingPluginNames","errorMsg","reject","loadPlugin","requires","RequiredPluginConstructorOrName","RequiredPluginConstructor","plugin","requiredBy","_add","instantiatePlugin","catch","err","PluginConstructorOrName","promises","pluginInstance","plugin1","plugin2","commandcollection_CommandCollection","_commands","commandName","command","execute","commands","translate","language","translationKey","numberOfLanguages","CKEDITOR_TRANSLATIONS","hasTranslation","locale_Locale","_t","str","translatedString","ViewConsumable","_consumables","consumables","elementConsumables","viewconsumable_ViewElementConsumables","revert","consumablesFromElement","createFrom","_canConsumeName","_test","_consume","_revert","consumableName","schema_Schema","_sourceDefinitions","decorate","SchemaContext","getDefinition","itemName","definition","_clearCache","_compiledDefinitions","_compile","getDefinitions","def","isLimit","context","_checkContextMatch","attributeName","allowAttributes","positionOrBaseElement","elementToMerge","checkMerge","checkChild","childDef","retValue","selectionOrRangeOrPosition","rangeCommonAncestor","checkAttribute","getMinimalFlatRanges","convertToMinimalFlatRanges","_getValidRangesForRange","backwardWalker","forwardWalker","forward","step","combineWalkers","removeDisallowedAttributes","compiledDefinitions","sourceRules","itemNames","compileBaseItemRule","compileAllowContentOf","compileAllowWhere","compileAllowAttributesOf","compileInheritPropertiesFrom","cleanUpAllowIn","cleanUpAllowAttributes","contextItemIndex","contextItem","getItem","allowIn","parentRule","mapContextItem","query","getNames","endsWith","sourceItemRules","itemRule","allowContentOf","allowWhere","allowAttributesOf","inheritTypesFrom","sourceItemRule","typeNames","copyTypes","copyProperty","inheritFrom","inheritAllFrom","makeInheritAllWork","allowContentOfItemName","getAllowedChildren","allowedItem","allowWhereItemName","allowedIn","allowAttributeOfItem","inheritAttributes","inheritPropertiesOfItem","existingItems","itemToCheck","getValues","ctxItem","upcastdispatcher_UpcastDispatcher","_removeIfEmpty","_modelCursor","convertItem","_convertItem","convertChildren","_convertChildren","splitToAllowedParent","_splitToAllowedParent","viewItem","contextDefinition","append","createContextTree","store","documentFragment","_removeEmptyElements","modelItem","markerElements","markerElement","currentPosition","createPositionBefore","extractMarkersFromModelFragment","modelCursor","nextModelCursor","allowedParent","findAllowedParent","splitResult","getPositions","cursorParent","upcastElementToElement","_getModelElement","childrenResult","createPositionAt","createPositionAfter","_prepareToElementConverter","elementName","_getViewElementNameFromConfig","upcastElementToAttribute","_normalizeModelAttributeConfig","_prepareToAttributeConverter","upcastAttributeToAttribute","viewKey","normalized","keyName","_normalizeViewAttributeKeyValueConfig","viewAttributeKeyToCopy","defaultModelValue","modelKey","_onlyViewNameIsDefined","modelAttribute","_setAttributeOn","datacontroller_DataController","dataProcessor","upcastDispatcher","modelElementOrFragment","viewDocumentFragment","toView","toData","clearBindings","elementRange","intersection","_getMarkersRelativeToElement","modelRoot","removeSelectionAttribute","toModel","viewElementOrFragment","conversion_Conversion","_dispatchersGroups","dispatchers","_getDispatchers","conversionHelper","_addToDispatchers","for","_getAllUpcastDefinitions","_getUpcastDefinition","upcastAlso","upcastAlsoItem","Batch","baseVersion","op","Operation","__className","model_documentfragment_DocumentFragment","model_documentfragment_normalize","_normalizeNodes","_splitNodeAtPosition","_mergeNodesAtIndex","_move","_haveSameAttributes","mergedNode","offsetDiff","firstPart","secondPart","iteratorA","iteratorB","lodash_es_isEqual","attributeoperation_AttributeOperation","detachoperation_DetachOperation","moveoperation_MoveOperation","newTargetPosition","getMovedRangeStart","sourceElement","targetElement","sourceOffset","targetOffset","insertoperation_InsertOperation","shouldReceiveAttributes","gyPosition","originalNodes","markeroperation_MarkerOperation","affectsData","_markers","renameoperation_RenameOperation","oldName","rootattributeoperation_RootAttributeOperation","mergeoperation_MergeOperation","splitoperation_SplitOperation","mergedElement","getInsertionPosition","splitElement","rootelement_RootElement","_doc","writer_Writer","_assertWriterUsedCorrectly","isSameTree","addOperation","applyOperation","rangeRootPosition","addMarker","usingOperation","itemOrRange","setAttributeOnRange","setAttributeOnItem","val","removeAttributesFromItem","applyRemoveOperation","_merge","_mergeDetached","createPositionFromPath","createRangeOn","createSelection","merge","renameOperation","limitElement","firstSplitElement","firstCopyElement","elementOrString","applyMarkerOperation","_set","markerOrName","currentMarker","hasUsingOperationDefined","affectsDataDefined","currentRange","updatedRange","managedUsingOperations","keyOrObjectOrIterable","_setSelectionAttribute","keyOrIterableOfKeys","_removeSelectionAttribute","_overrideGravity","_restoreGravity","storeKey","_getStoreAttributeKey","_currentWriter","valueBefore","valueAfter","lastSplitPosition","previousValue","rootA","rootB","differ_Differ","markerCollection","_markerCollection","_changesInElement","_elementSnapshots","_changedMarkers","_changeCount","_cachedChanges","_cachedChangesWithGraveyard","_isInInsertedElement","_markInsert","_markAttribute","sourceParentInserted","targetParentInserted","_markRemove","getMarkersIntersectingRange","bufferMarkerChange","graveyardParent","mergedIntoElement","buffered","includeChangesInGraveyard","diffSet","changes","snapshotChildren","elementChildren","_getChildrenSnapshot","_generateActionsFromChanges","_getInsertDiff","_getRemoveDiff","elementAttributes","snapshotAttributes","_getAttributesDiff","changeCount","prevDiff","thisDiff","isConsecutiveTextRemove","isConsecutiveTextAdd","isConsecutiveAttributeChange","_changesInGraveyardFilter","changeItem","_markChange","_removeAllNestedChanges","_makeSnapshot","_getChangesForElement","_handleChange","inc","nodesToHandle","incEnd","oldEnd","intersectionLength","howManyAfter","attributePart","diffs","snapshot","oldChildrenLength","oldChildrenHandled","repeat","posInGy","rangeInGy","History","_operations","_undoPairs","_undoneOperations","undoneOperation","undoingOperation","isInsideSurrogatePair","character","isHighSurrogateHalf","isLowSurrogateHalf","isInsideCombinedSymbol","isCombiningMark","graveyardName","model_document_Document","history","createRoot","bufferOperation","hasSelectionChanged","hasDataChanges","reset","defaultRoot","_getDefaultRoot","validateTextNodePosition","rangeBoundary","markercollection_MarkerCollection","markercollection_Marker","oldMarker","_attachLiveRange","_managedUsingOperations","_affectsData","_destroyMarker","_detachLiveRange","_liveRange","stopDelegating","liveposition_LivePosition","oldPosition","toPosition","insertcontent_Insertion","canMergeWith","_filterAttributesOf","parentContext","_handleNode","isFirst","isLast","nodeToSelect","_handleObject","_checkAndSplitToAllowedPosition","_mergeSiblingsOf","_handleDisallowedNode","_tryAutoparagraphing","handleNodes","livePos","fromPosition","mergeLeft","_canMergeLeft","mergeRight","_canMergeRight","mergePosLeft","mergePosRight","livePosition","paragraph","_getAllowedIn","tempPos","deleteContent","doNotResetEntireContent","getLimitElement","shouldEntireContentBeReplacedWithParagraph","insertParagraph","replaceEntireContentWithParagraph","selRange","startPos","endPos","leaveUnmerged","mergeBranches","startParent","endParent","leftPos","rightPos","rangeToCheck","checkCanBeMerged","parentToRemove","isTextAllowed","isParagraphAllowed","shouldAutoparagraph","wordBoundaryCharacters","modifySelection","isForward","unit","searchEnd","getSearchRange","tryExtendingTo","setSelectionFocus","isAtWordBoundary","isAtNodeBoundary","boundaryChar","getCorrectWordBreakPosition","getCorrectPosition","offsetToCheck","removeRangeContent","parentsToCheck","itemRange","parentToCheck","removeRange","injectSelectionPostFixer","registerPostFixer","correctedRange","tryFixingRange","fixedRanges","selectionStart","selectionEnd","selectionPostFixer","originalPosition","nearestSelectionRange","fixedPosition","tryFixingCollapsedRange","isTextAllowedOnStart","isTextAllowedOnEnd","startLimitElement","endLimitElement","startIsOnBlock","endIsOnBlock","checkSelectionOnNonLimitElements","fixedStart","fixedEnd","isStartInLimit","isEndInLimit","expandSelectionOnIsLimitNode","tryFixingNonCollapsedRage","expandToDirection","model_Model","_pendingChanges","_validate","register","_runPendingChanges","batchOrType","_execute","insertion","nodesToInsert","getSelectionRange","insertContent","frag","commonPath","commonParent","getNodeByPath","flatSubtreeRange","appendText","leftExcessRange","getSelectedContent","rangeOrElement","ret","currentBatch","callbackReturnValue","keystrokehandler_KeystrokeHandler","_listener","keyEvtData","editingkeystrokehandler_EditingKeystrokeHandler","evtData","editor_Editor","builtinPlugins","defaultConfig","locale","state","editing","conversion","keystrokes","extraPlugins","load","loadPlugins","loadedPlugins","initPlugins","method","promise","readyPromise","BasicHtmlWriter","implementation","createHTMLDocument","htmldataprocessor_HtmlDataProcessor","_domParser","DOMParser","_domConverter","_htmlWriter","getHtml","_toDom","parseFromString","viewcollection_ViewCollection","isRendered","_parentElement","elementOrDocFragment","viewcollection_isStringArray","dest","evtName","cloneDeepWith_CLONE_DEEP_FLAG","cloneDeepWith_CLONE_SYMBOLS_FLAG","lodash_es_cloneDeepWith","xhtmlNs","template_Template","template_normalize","template_clone","_isRendered","_revertData","_renderNode","intoFragment","isApplying","revertData","_revertTemplateFromNode","search","isView","isTemplate","eventNameOrFunctionOrAttribute","TemplateToBinding","eventNameOrFunction","if","valueIfTrue","TemplateIfBinding","extendTemplate","extendObjectValueArray","eventListeners","childIndex","isInvalid","_renderText","_renderElement","createElementNS","_renderAttributes","_renderElementChildren","_setUpListeners","hasTemplateBinding","_bindToObservable","updater","getTextUpdater","attrName","domAttrValue","attrNs","valueToBind","shouldExtend","getAttributeUpdater","_renderStyleAttribute","isFalsy","arrayValueReducer","setAttributeNS","styleName","styleValue","getStyleUpdater","isViewCollection","setParent","childRevertData","revertBindings","schemaItem","domEvtName","domSelector","activateDomEventListener","syncValueSchemaValue","templateBinding","activateAttributeListener","revertBinding","TemplateBinding","matches","getValue","getValueSchemaValue","removeAttributeNS","normalizePlainTextDefinition","normalizeTextDefinition","listeners","arrayify","normalizeListeners","normalizeAttributes","cur","ext","src_view_View","_viewCollections","_unboundChildren","createCollection","collection","bindTemplate","_bindTemplate","registerChild","getViews","getOptimalPosition","positions","limiter","fitInViewport","positionedElementAncestor","getPositionedAncestor","elementRect","bestPosition","limiterRect","getVisible","bestPositionRect","bestPositionName","maxLimiterIntersectArea","maxViewportIntersectArea","elementRectArea","positionName","positionRect","getPosition","limiterIntersectArea","viewportIntersectArea","limiterViewportIntersectRect","getIntersectionArea","setBestPosition","getBestPosition","getAbsoluteRectCoordinates","ancestorPosition","ancestorBorderWidths","moveTo","toUnit","toPx","defaultLimiterElement","balloonpanelview_BalloonPanelView","setTemplate","class","isVisible","show","defaultPositions","positionOptions","southArrowNorth","southArrowNorthWest","southArrowNorthEast","northArrowSouth","northArrowSouthWest","northArrowSouthEast","_getOptimalPosition","unpin","_pinWhenIsVisibleCallback","_startPinning","_stopPinning","hide","attachTo","getDomElement","limiterElement","scrollTarget","isWithinScrollTarget","isLimiterWithinScrollTarget","getNorthTop","balloonRect","arrowVerticalOffset","getSouthTop","arrowHorizontalOffset","northWestArrowSouth","northWestArrowSouthWest","northWestArrowSouthEast","northEastArrowSouth","northEastArrowSouthEast","northEastArrowSouthWest","southWestArrowNorth","southWestArrowNorthWest","southWestArrowNorthEast","southEastArrowNorth","southEastArrowNorthEast","southEastArrowNorthWest","contextualballoon_ContextualBalloon","positionLimiter","_stack","ui","focusTracker","visibleView","hasView","_show","pin","_getBalloonPosition","balloonClassName","focustracker_FocusTracker","focusedElement","_elements","_nextEventLoopTimeout","_focus","_blur","FocusCycler","keystrokeHandler","focusables","isFocusable","_getFocusableItem","previous","viewIndex","focused","collectionLength","display","toolbarseparatorview_ToolbarSeparatorView","toolbarview_ToolbarView","_focusCycler","focusPrevious","focusNext","mousedown","focusFirst","focusLast","balloontoolbar_BalloonToolbar","toolbarView","_createToolbarView","_balloon","_fireSelectionChangeDebounced","isToolbarVisible","normalizeToolbarConfig","componentFactory","fillFromConfig","updatePosition","_getBalloonPositionData","viewDocument","rangeRects","getBalloonPositions","componentfactory_ComponentFactory","_components","originalName","getNormalized","editorui_EditorUI","ballooneditorui_BalloonEditorUI","balloonToolbar","editingRoot","attachDomRoot","origin","originKeystrokeHandler","originFocusTracker","toolbar","beforeFocus","afterBlur","enableToolbarKeyboardFocus","editoruiview_EditorUIView","_renderBodyCollection","_bodyCollectionContainer","bodyElement","editableuiview_EditableUIView","contenteditable","externalElement","inlineeditableuiview_InlineEditableUIView","role","aria-label","ballooneditoruiview_BalloonEditorUIView","setDataInElement","HTMLTextAreaElement","elementapimixin","ballooneditor_BalloonEditor","sourceElementOrData","updateSourceElement","form","originalSubmit","onSubmit","submit","attachToForm","getData","init","initialData","getDataFromElement","DataTransfer","nativeDataTransfer","files","getAsFile","getFiles","_native","setData","clipboardobserver_ClipboardObserver","handleInput","targetRanges","dropRange","dataTransfer","clipboardData","domDoc","clientX","clientY","caretRangeFromPoint","rangeParent","rangeOffset","getDropViewRange","smallPaddingElements","clipboard_Clipboard","modelDocument","onCopyCut","_htmlDataProcessor","spaces","normalizeClipboardData","plainTextToHtml","scrollToTheSelection","dataController","modelFragment","viewToPlainText","childText","Command","refresh","forceDisable","entercommand_EnterCommand","isSelectionEmpty","splitBlock","isContainedWithinOneElement","enterBlock","splitPos","enterobserver_EnterObserver","isSoft","enter_Enter","shiftentercommand_ShiftEnterCommand","insertBreak","softBreakAction","anchorPos","isInsideLimitElement","breakLineElement","shiftenter_ShiftEnter","createEmptyElement","ChangeBuffer","limit","isLocked","_changeCallback","_batch","_reset","_selectionChangeCallback","createBatch","ignoreLock","inputcommand_InputCommand","undoStepSize","_buffer","textInsertions","resultRange","isCollapsedRange","lock","insertText","unlock","injectUnsafeKeystrokesHandling","latestCompositionSelection","inputCommand","deleteSelectionContent","isSelectionUnchanged","keyData","safeKeycodes","isSafeKeystroke","handleKeydown","isFlatSelection","containerChildrenMutated","mutations","getSingleTextNodeChange","output","lastOperation","pushLast","isContinuationOf","expected","diffToChanges","compareChildNodes","oldChild","newChild","injecttypingmutationshandling_MutationHandler","_handleContainerChildrenMutations","_handleTextMutation","_handleTextNodeInsertion","mutationsCommonAncestor","commonAncestor","getMutationsContainer","domMutationCommonAncestor","freshDomConverter","modelFromCurrentDom","currentModel","modelFromDomChildren","currentModelChildren","lastDomChild","lastCurrentChild","isSafeForTextMutation","diffResult","firstChangeAt","insertions","deletions","calculateChanges","modelSelectionRange","viewPos","modelPos","insertedText","lastChangeAt","input_Input","handle","injectTypingMutationsHandling","deletecommand_DeleteCommand","_shouldEntireContentBeReplacedWithParagraph","sequence","_replaceEntireContentWithParagraph","limitElementFirstChild","deleteobserver_DeleteObserver","hasWordModifier","injectAndroidBackspaceMutationsHandling","selectionChangeToleranceMs","previousSelection","currentSelection","latestSelectionChangeMs","childrenBefore","childrenAfter","hasOnlyContainers","hasDelete","hasInsert","containsContainersRemoval","handleContainerRemovalMutations","delete_Delete","typing_Typing","nooperation_NoOperation","transformations","setTransformation","OperationA","OperationB","transformationFunction","aGroup","noUpdateTransformation","transform_transform","getTransformation","aIsStrong","aWasUndone","bWasUndone","abRelation","baRelation","transformSets","operationsA","operationsB","nextTransformIndex","nextBaseVersionA","nextBaseVersionB","originalOperationsACount","originalOperationsBCount","contextFactory","transform_ContextFactory","useRelations","setOriginalOperations","opA","indexB","opB","newOpsA","getContext","newOpsB","updateRelation","newOpA","padWithNoOps","brokenOperationsACount","brokenOperationsBCount","updateBaseVersions","_history","_useRelations","_originalOperations","_relations","takeFrom","originalOperation","_setRelation","_wasUndone","_getRelation","originalOp","wasUndone","isUndoneOperation","origB","undoneB","getUndoneOperation","origA","relationsA","relation","_getComplementaryAttributeOperations","insertOperation","insertValue","_moveTargetIntoMovedRange","_makeMoveOperationsFromRanges","hasSameParentAs","moveOp","_breakRangeByMoveOperation","aToGraveyard","bToGraveyard","removedRange","mergeInside","mergeSplittingElement","getReversed","aCompB","shouldSpread","rightRange","movesGraveyardElement","gyMoveSource","splitNodesMoveSource","gyMoveTarget","gyMove","targetPositionPath","splitNodesMoveTarget","splitNodesMove","splitPath","additionalSplit","rangeToMove","newParentPosition","newTargetPath","howManyRemoved","aInGraveyard","bInGraveyard","newPositionPath","basecommand_BaseCommand","_createdBatches","docSelection","selectionRanges","transformSelectionRange","batchToUndo","undoingBatch","operationsToUndo","operationToUndo","nextBaseVersion","historyOperations","getOperations","reversedOperations","setOperationAsUndone","getTransformedByOperations","undocommand_UndoCommand","batchIndex","findIndex","_undo","_restoreSelection","redocommand_RedoCommand","redoingBatch","undoediting_UndoEditing","_batchRegistry","_undoCommand","_redoCommand","addBatch","clearStack","undoneBatch","iconview_IconView","viewBox","_updateXMLContent","_colorFillPaths","fillColor","fill","tooltipview_TooltipView","buttonview_ButtonView","ariaLabelUid","tooltipView","_createTooltipView","labelView","_createLabelView","iconView","_getTooltipString","tabindex","aria-labelledby","aria-disabled","aria-pressed","click","icon","tooltip","getEnvKeystrokeText","undoui_UndoUI","_addButton","undo_default","redo_default","Icon","undo_Undo","BlockAutoformatEditing","callbackOrCommand","InlineAutoformatEditing","testRegexpOrCallback","attributeOrCallback","regExp","testCallback","formatCallback","format","1","leftDel","2","3","rightDel","delStart","delEnd","validRanges","getText","testOutput","rangesToFormat","testOutputToRanges","rangesToRemove","getValidRanges","arrays","attributecommand_AttributeCommand","_getValueFromFirstAllowedNode","checkAttributeInSelection","forceValue","setSelectionAttribute","BOLD","boldediting_BoldEditing","attributeToElement","font-weight","boldui_BOLD","boldui_BoldUI","bold_default","ITALIC","italicediting_ItalicEditing","font-style","italicui_ITALIC","italicui_ItalicUI","italic_default","first_first","iterable","iteratorItem","blockquotecommand_BlockQuoteCommand","_checkEnabled","blocks","_removeQuote","findQuote","blocksToQuote","checkCanBeQuoted","_applyQuote","firstBlock","getRangesOfBlockGroups","groupRange","positionBefore","positionAfter","quotesToMerge","quote","currentQuote","nextQuote","elementOrPosition","nextBlock","isBQAllowed","isBlockAllowedInBQ","blockquoteediting_BlockQuoteEditing","addChildCheck","elementToElement","blockquoteui_BlockQuoteUI","buttonView","quote_default","paragraphcommand_ParagraphCommand","checkCanBecomeParagraph","rename","paragraph_Paragraph","paragraphLikeElements","isParagraphable","wrapInParagraph","_autoparagraphEmptyRoots","getRootNames","createContext","headingcommand_HeadingCommand","modelElements","heading","checkCanBecomeHeading","defaultModelElement","headingediting_HeadingEditing","title","option","_addDefaultH1Conversion","enterCommand","src_model_Model","dropdownpanelview_DropdownPanelView","selectstart","dropdownview_DropdownView","panelView","isOpen","panelPosition","defaultPanelPositions","southEast","southWest","northEast","northWest","closeDropdown","buttonRect","panelRect","dropdownbuttonview_DropdownButtonView","arrowView","_createArrowView","aria-haspopup","dropdown_arrow_default","listview_ListView","listitemview_ListItemView","listseparatorview_ListSeparatorView","switchbuttonview_SwitchButtonView","toggleSwitchView","_createToggleView","clickOutsideHandler","activator","contextElements","contextElement","createDropdown","ButtonClass","dropdownView","closeDropdownOnBlur","closeDropdownOnExecute","focusDropdownContentsOnArrows","addDefaultBehavior","addListToDropdown","listView","listItemView","headingui_HeadingUI","localizedTitles","Paragraph","Heading 1","Heading 2","Heading 3","getLocalizedOptions","defaultTitle","dropdownTooltip","titles","itemDefinitions","headingCommand","paragraphCommand","withText","commandValue","isOn","areEnabled","para","whichModel","listcommand_ListCommand","checkCanBecomeListItem","turnOff","currentIndent","indent","newIndent","listIndent","lowestIndent","_fixType","setAttributes","listType","listItem","startingItem","indentcommand_IndentCommand","indentDirection","_indentBy","itemsToChange","lastItem","getListItemFillerOffset","hasOnlyLists","modelViewInsertion","injectViewList","createViewListItemElement","viewList","generateLiInUl","modelViewRemove","breakContainer","viewListPrev","mergeViewLists","hoistNestedLists","modelViewChangeType","listName","modelViewChangeIndent","modelViewSplitOnInsert","removeStart","removeEnd","previousList","mergePos","modelViewMergeAfter","viewItemPrev","viewItemNext","viewModelConverter","conversionStore","listItemModel","lastListItem","convertedChild","viewToModelListItemChildrenConverter","cleanList","cleanListItem","foundList","firstNode","modelToViewPosition","topmostViewList","modelIndentPasteFixer","refItem","indentChange","getSiblingListItem","sameIndent","smallerIndent","itemIndent","firstList","secondList","mergeContainers","injectedItem","injectedList","prevItem","positionAfterUiElements","prevView","breakPosition","nextViewList","lastSubChild","modelChild","nextIndent","modelRemoveStartPosition","viewRemoveStartPosition","viewRemovedItem","prevModelItem","foo","prevIndent","prevViewList","listediting_ListEditing","itemToListHead","applied","_addListToFix","listHead","_fixListIndents","_fixListTypes","maxIndent","fixBy","typesStack","modelChangePostFixer","registerViewToModelLength","getViewListItemLength","modelNode","modelLength","viewToModelPosition","firstPosition","getCommandExecuter","listui_ListUI","numberedlist_default","bulletedlist_default","parentName","updateNumericAttribute","defaultValue","createEmptyTableCell","tableCell","upcastTable","viewTable","rows","headingRows","headingColumns","tableMeta","headRows","bodyRows","firstTheadElement","tableChild","trs","tr","headingCols","scanRowForHeadingColumns","scanTable","table","row","upcastTableCell","viewTableCell","th","TableWalker","startRow","endRow","includeSpanned","column","_skipRows","_row","_column","_cell","_spannedCells","_isOverEndRow","_isSpanned","currentColumn","outValue","_formatOutValue","_shouldSkipRow","_shouldSkipColumn","cell","colspan","rowspan","_recordSpans","cellIndex","rowIsBelowStartRow","rowIsMarkedAsSkipped","isCurrentColumn","isPreviousThatOverlapsColumn","columnToUpdate","_markSpannedCell","rowToUpdate","HighlightStack","oldTop","_insertDescriptor","newTop","compareDescriptors","oldDescriptor","newDescriptor","_removeDescriptor","shouldABeBeforeB","classesToString","widgetSymbol","labelSymbol","WIDGET_CLASS_NAME","WIDGET_SELECTED_CLASS_NAME","isWidget","toWidget","setCustomProperty","utils_getFillerOffset","labelOrCreator","setLabel","hasSelectionHandler","selectionHandler","drag_handler_default","addSelectionHandler","setHighlightHandling","normalizeToArray","utils_getLabel","labelCreator","toWidgetEditable","findOptimalInsertionPosition","selectedElement","tableSymbol","isTableWidget","isTableWidgetSelected","isTableContentSelected","parentTable","downcastInsertTable","asWidget","figureElement","tableElement","tableWidget","toTableWidget","tableWalker","tableAttributes","tableWalkerValue","tableSection","getOrCreateTableSection","getSectionName","trElement","getOrCreateTr","createViewTableCellElement","downcastInsertRow","tableRow","getViewTable","downcastInsertCell","rowIndex","downcastTableHeadingRowsChange","oldRows","newRows","rowsToMove","isBetween","moveViewRowsToTableSection","renameViewTableCell","removeTableSectionIfEmpty","renameViewTableCellIfRequired","lower","upper","downcastTableHeadingColumnsChange","oldColumns","newColumns","lastColumnToCheck","desiredCellElementName","viewCell","renamedCell","createEditableElement","getCellElementName","cellElementName","cellElement","isSingleParagraph","innerParagraph","paragraphInsertPosition","containerName","fakeParagraph","sectionName","viewTableSection","getExistingTableSectionElement","tableChildElement","createTableSection","viewTableRow","viewFigure","tableutils_TableUtils","columns","createEmptyRows","at","rowsToInsert","getColumns","tableIterator","cellsToInsert","columnsToInsert","tableColumns","createCells","skipRow","numberOfCells","newCellsSpan","updatedSpan","breakSpanEvenly","newCellsAttributes","tableMap","splitCellColumn","cellsToUpdate","splitCellRow","cellColumn","rowspanToSet","tableCellToInsert","cells","span","inserttablecommand_InsertTableCommand","validParent","getInsertTableParent","tableUtils","createTable","insertrowcommand_InsertRowCommand","order","tableParent","insertRows","insertcolumncommand_InsertColumnCommand","getCellLocation","insertColumns","splitcellcommand_SplitCellCommand","isHorizontally","splitCellHorizontally","splitCellVertically","mergecellcommand_MergeCellCommand","isHorizontal","cellToMerge","_getMergeableCell","isMergeNext","cellToExpand","cellToRemove","removedTableCellRow","mergecellcommand_isEmpty","mergeTableCells","spanAttribute","cellSpan","cellToMergeSpan","removedRowIndex","overlapsRemovedRow","removeEmptyRow","horizontalCell","cellOnLeft","cellOnRight","leftCellColumn","rightCellColumn","leftCellSpan","getHorizontalCell","currentCellRowSpan","rowOfCellToMerge","mergeColumn","cellToMergeData","getVerticalCell","removerowcommand_RemoveRowCommand","currentRow","cellsToMove","targetRow","previousCell","cellToMove","removecolumncommand_RemoveColumnCommand","removedColumn","setheaderrowcommand_SetHeaderRowCommand","isInTable","_isInHeading","currentHeadingRows","selectionRow","headingRowsToSet","cellsToSplit","getOverlappingCells","splitHorizontally","newRowspan","spanToSet","columnIndex","setheadercolumncommand_SetHeaderColumnCommand","currentHeadingColumns","selectionColumn","headingColumnsToSet","injectTableLayoutPostFixer","analyzedTables","isTableAttributeEntry","fixTableCellsRowspan","fixTableRowsSizes","tableLayoutPostFixer","cellsToTrim","maxRows","isInHeader","rowLimit","findCellsToTrim","rowsLengths","lengths","getRowsLengths","tableSize","maxColumns","isAttributeType","injectTableCellContentPostFixer","fixTableCellContent","fixTable","fixTableRow","tableCellContentsPostFixer","injectTableCellPostFixer","elementsToCheck","elementsWithChangedAttributes","isSpanOrP","isTdOrTh","changedChildren","childrenToCheck","getElementsToCheck","ensureProperElementName","updateRangesInViewSelection","tableCellPostFixer","currentViewElement","modelParagraph","expectedViewElementName","isOnlyChild","getExpectedElementName","renamedViewElement","tableediting_TableEditing","childDefinition","attributeToAttribute","_handleTabOnSelectedTable","_getTabHandler","domEventData","currentRowIndex","currentCellIndex","isFirstCellInRow","isLastCellInRow","isLastRow","cellToFocus","nextRow","previousRow","inserttableview_InsertTableView","boxView","inserttableview_TableSizeGridBoxView","_highlightGridBoxes","mouseover","tableui_TableUI","table_default","insertTableView","bindIsOn","_prepareDropdown","table_column_default","table_row_default","table_merge_cell_default","addListOption","mouseobserver_MouseObserver","selectAllKeystrokeCode","widget_Widget","_previouslySelected","_clearPreviouslySelectedWidgets","lastMarked","isChild","_onMousedown","_onKeydown","_handleDelete","isInsideNestedEditable","_setSelectionOverElement","wasHandled","isArrowKeyCode","isSelectAllKeyCode","_handleEnterKey","_selectAllNestedEditableContent","_selectAllContent","_handleArrowKeys","objectElement","_getObjectElementNextToSelection","previousNode","nodeToRemove","objectElement2","isBackwards","documentSelection","widgetParent","probe","widget","widgettoolbarrepository_WidgetToolbarRepository","isWidgetSelected","_toolbars","_updateToolbarsVisibility","toolbarId","visibleWhen","_showToolbar","_hideToolbar","_isToolbarVisible","balloon","getBalloonPositionData","repositionContextualBalloon","editingView","getParentWidget","ElementInfo","_node","_parent","_label","_icon","addChild","_attributes","_configuration","classAttribute","_conversions","conversions","_contains","isTemplateRoot","inserttemplatecommand_InsertTemplateCommand","getInsertTemplateParent","templateElement","insertAtSelection","downcastTemplateElement","getModelAttributes","getViewAttributes","postfixTemplateElement","childSeats","childOptions","conflictSuffix","templatecommandbase_TemplateCommandBase","_currentElement","updateCurrentlySelectedElement","isApplicable","currentTemplateLabel","getElementInfo","currentElement","findSelectedTemplateElement","info","matchElement","_currentElementInfo","removetemplatecommand_RemoveTemplateCommand","templateediting_TemplateEditing","_typeMap","_postfixers","registerElement","_postfixElement","upcastTemplateElement","_elementTypes","modelWriter","templateManager","parentTemplate","postfixer","_findMatchingTemplateElement","mastertemplate_MasterTemplate","masterTemplate","_ensureMasterTemplate","appendElement","templateui_TemplateUI","documentPlaceholders","attachPlaceholder","placeholderText","checkFunction","placeholders","updateSinglePlaceholder","updateAllPlaceholders","isEmptyish","textelement_containerElements","isContainerElement","multiline","textelement_TextElement","textElements","getElementsByType","plain","addAttributeCheck","placeholderelement_PlaceholderElement","placeholderElements","elements_containerelement_ContainerElement","containerElements","containerElement","inputtextview_InputTextView","placeholder","readonly","aria-invalid","aria-describedby","select","templateattributecommand_TemplateAttributeCommand","templatebuttonview_toPx","templatebuttonview_TemplateButtonView","templateattributeui_TemplateAttributeUI","templateAttributes","templateAttribute","componentName","factories","dropdown","_createDropdownView","textfield","_createTextfieldView","multiselect","_createMultiselectView","custom","factoryMethod","toolbarPanels","toolbarPointers","findElementInfo","configurableAttributes","pointer","components","panel","_createPanelView","_hidePanels","configureButton","configure_default","_updateButtonDisplay","dropdownItems","itemModel","inputView","getLabel","decodeKeys","encodedKeys","valueIsSelected","optionKey","selections","_hidePanel","buttonPosition","templateid_TemplateId","_tick","tick","session","postfixIds","charCodeAt","textlimittooltipview_toPx","textlimittooltipview_TextLimitTooltipView","textlimit_TextLimit","_updateTooltipDisplay","characters","innerText","classList","isExceeded","tooltipPosition","hoveredwidget_HoveredWidget","galleryelement_GalleryElement","galleryElements","galleryElement","section","findLinkRange","_findBound","lookBack","lastNode","linkcommand_LinkCommand","linkRange","unlinkcommand_UnlinkCommand","rangesToUnlink","linkElementSymbol","ATTRIBUTE_WHITESPACES","SAFE_URL","linkElement","ensureSafeUrl","url","isSafeUrl","bindTwoStepCaretToAttribute","twoStepCaretHandler","TwoStepCaretHandler","arrowRightPressed","arrowLeftPressed","isMovementHandled","handleForwardMovement","handleBackwardMovement","_modelSelection","_overrideUid","_isNextGravityRestorationSkipped","_isGravityOverridden","isAtBoundary","_hasSelectionAttribute","isBetweenDifferentValues","_preventCaretMovement","isAtStartBoundary","isAtEndBoundary","_setSelectionAttributeFromTheNodeBefore","isStepAfterTheAttributeBoundary","_skipNextAutomaticGravityRestoration","overrideSelectionGravity","restoreSelectionGravity","isAttrBefore","isAttrAfter","HIGHLIGHT_CLASS","linkediting_LinkEditing","_setupLinkHighlight","highlightedLinks","removeHighlight","clickobserver_ClickObserver","labelview_LabelView","labeledinputview_LabeledInputView","InputView","inputUid","statusUid","_createInputView","statusView","_createStatusView","errorText","infoText","ariaDesribedById","linkformview_LinkFormView","urlInputView","_createUrlInput","saveButtonView","_createButton","check_default","cancelButtonView","cancel_default","_focusables","submitHandler","labeledInput","button","linkactionsview_LinkActionsView","previewButtonView","_createPreviewButton","unlinkButtonView","unlink_default","editButtonView","pencil_default","linkKeystroke","linkui_LinkUI","actionsView","_createActionsView","formView","_createFormView","_createToolbarLinkButton","_enableUserBalloonInteractions","linkCommand","unlinkCommand","_addFormView","_hideUI","_removeFormView","_showUI","icons_link_default","_getSelectedLinkElement","_areActionsVisible","_isUIVisible","_areActionsInPanel","_isFormInPanel","_addActionsView","_startUpdatingUI","_isUIInPanel","prevSelectedLink","prevSelectionParent","getSelectionParent","selectedLink","targetLink","findLinkElementAncestor","startLink","endLink","isLinkElement","link_Link","linkitcommand_LinkitCommand","unlinklinkitcommand_UnlinkLinkitCommand","linkitElementSymbol","createLinkAttributeElement","linkitediting_LinkitEditing","_linkSelector","linkitui_LinkitUI","linkitAttrs","filterClass","parentFilter","parentCard","filteredData","newData","outerHTML","editorData","drupalmediaediting_DrupalMediaEditing","_mediaRenderer","drupalmediaselectcommand_DrupalMediaSelectCommand","_mediaSelector","drupalmediaui_DrupalMediaUI","search_default","upload_default","blockbuttonview_toPx","blockbuttonview_BlockButtonView","buttonelement_LinkSelectObserver","remotecontrolobserver_RemoteControlObserver","editor_operations","remotecontrolcommand_RemoteControlCommand","dispatchOperation","batchOperations","moveElement","replaceElement","removeElement","referenceElement","icons","close","close_default","formatted_text","formatted_text_default","carousel","carousel_default","image","image_default","misc","misc_default","text_default","text_media","text_media_default","video","video_default","placeholder_icon","svgIcon","lit_element","placeholder_Placeholder","closed","isExpanded","labelOpen","labelExpand","availableSections","placeholder_placeholder_default","clickOpenHandler","getSections","clickSectionHandler","clickCloseHandler","clickExpandHandler","sectionId","currentGallery","shadowRoot","setGalleryItem","gallery_gallery_default","moveItem","leftArrow_default","rightArrow_default","deleteItem","trash_default","currentTab","modalIsOpen","modal","processItems","titleAttribute","tabTitle","defaultTab","setTabsItem","renderModal","closeModal","updateItem","tabs_default","openModal","icons_pencil_default","data-default-tab","data-tab-title","inputText","isDefault","currentDefault","currentIndex","currentTitle","mutationsList","visible","Event","response","checked","modal_default","handleSwitch","deleteTab","saveModal","text_conflict_TextConflict","resolved","isResolving","selectOptionHandler","text_conflict_default","clickResolvingHandler","text_conflict_option_TextConflictOption","text_conflict_option_default","optionSelected","labels","empty","media_conflict_option_MediaConflictOption","media_conflict_option_default","media_conflict_MediaConflict","touchStart","touchStartHandler","touchEndHandler","eventHandler","media_conflict_default","totalOffsetX","offsetLeft","offsetParent","pageX","touches","getElementsByTagName","ckeditor_SectionsEditor","_addListAutoformats","_addBasicStylesAutoformats","_addHeadingAutoformats","_addBlockQuoteAutoformats","level","widgetToolbarRepository","tableContentToolbarItems","deprecatedTableContentToolbarItems","tableToolbarItems","_createButtonView","_updateButton","pilcrow_default","_showPanel","_hideButton","modelTarget","_attachButtonToElement","wasVisible","focusEditable","contentStyles","editableRect","contentPaddingTop","paddingTop","contentLineHeight","lineHeight","fontSize","contentRect","validation","elementContent","regex","_showTooltip","_hideTooltip","highlight","tabsElements","tabsElement","matchingTextElement","textElement","gallery","tabs","data-layout","drupalMediaSelector","drupalMediaRenderer","drupalLinkSelector","existingValues","contentToolbar","blockToolbar"],"mappings":";;;;+xBAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oCClFAjC,EAAAQ,EAAA0B,EAAA,sBAAAC,IAAAnC,EAAAQ,EAAA0B,EAAA,sBAAAE,IAYO,MAAAC,EACP,6FAYeF,UAAAG,MAafC,YAAAC,EAAAC,GACAD,EAAAJ,EAAAI,GAEAC,IACAD,GAAA,IAAAE,KAAAC,UAAAF,IAGAG,MAAAJ,GAKAK,KAAApC,KAAA,gBAOAoC,KAAAJ,OASAF,uBAAAO,GACA,OAAAA,aAAAX,GAUO,SAAAC,EAAAI,GACP,MAAAO,EAAAP,EAAAQ,MAAA,aAEA,OAAAD,EAIAP,iBAAiCH,WAA6BU,EAAA,OAH9DP,4DChEA,MAAAS,EAAA,IAiBO,SAAAC,EAAAC,EAAAC,GACP,MAAWC,SAAAC,QAAWA,GAAUC,SAASJ,EACzCK,EAAAC,SAAAC,iBAAAJ,EAAAL,EAAA,SACA,IAAAU,EAAAC,EAAAL,GACAM,EAAAN,EAAAI,GACAG,GAAA,EACAC,EAAA,EACA,MAAAC,KACA,IAAAC,EAAA,KACA,KAAAT,EAAAU,YAAA,CACAJ,IACA,MAAAK,EAAAX,EAAAY,YAiBA,IAfAD,EAAAE,kBAAAJ,IACAA,EAAA,MAGAb,EAAAkB,IAAAH,KACAH,EAAAO,KAAAJ,GAEA,OAAAF,IACAA,EAAAE,IAIA,OAAAF,GACAF,SAEAS,IAAAX,KAAAY,QAAAX,GAGAD,EAAAY,MAAA,OAAAR,GAAA,EAAAJ,EAAAY,MAAAV,EAGAF,EAAAN,EADAI,EAAAC,EAAAL,EAAAI,IAIAK,EAAAU,QAAA/C,KAAAgD,WAAAC,YAAAjD,IAEA,MAAAkD,EAAAV,IACA,IAAAW,EAAA,KAAAX,EAAAY,SAAA,IACA,MAAAvB,EAAAC,SAAAC,iBAAAS,EAAAlB,EAAA,SACA,KAAAO,EAAAU,YACAY,IAEA,OAAAA,GAEAlB,EAAA,CAAAL,EAAAyB,GAAA,KACA,QAAA9E,EAAA8E,EAAA,EAAgC9E,EAAAqD,EAAA0B,OAAkB/E,IAAA,CAClD,MAAA2D,EAAAN,EAAArD,GACA,GAAYU,OAAAsE,EAAA,EAAAtE,CAAoBiD,GAChC,OAAA3D,EAGA,8CCvDA,MAAAiF,EAAA,CAAAC,EAAAC,OAAoDD,MAASC,IAC7D,IAAAC,GAAA,OACA,IAAAxF,OAAAyF,SACAD,GAAA,OAEA,IAAAxF,OAAAyF,SAAAC,qBACAC,QAAAC,KAAA,2IAGAJ,GAAA,GAMA,MA2BAK,GAAA,cAoBAC,EAAA,IAAAC,IAeAC,EAAA,CAAAC,EAAA5C,EAAAkC,KACAO,EAAAI,IAAAX,GAEA,MAAAY,EAAAF,EAAAG,iBAAA,SAEA,OAAAD,EAAAhB,OAKA,YADAnF,OAAAyF,SAAAO,sBAAA3C,EAAAE,QAAAgC,GAGA,MAAAc,EAAA1C,SAAA2C,cAAA,SAMA,QAAAlG,EAAA,EAAmBA,EAAA+F,EAAAhB,OAAmB/E,IAAA,CACtC,MAAAmG,EAAAJ,EAAA/F,GACAmG,EAAA1B,WAAAC,YAAAyB,GACAF,EAAAG,aAAAD,EAAAC,YAWA,GA/DA,CAAAjB,IACAM,EAAAjB,QAAAU,IACA,MAAAmB,EAA0BC,EAAA,EAAczF,IAAAoE,EAAAC,EAAAC,SACxCb,IAAA+B,GACAA,EAAAE,UAAA/B,QAAAvB,IACA,MAAuBE,SAAAC,QAAWA,IAAYH,EAE9C8C,EAAA,IAAAJ,IACAa,MAAAC,KAAArD,EAAA4C,iBAAA,UAAAxB,QAAAzC,IACAgE,EAAAD,IAAA/D,KAEgBiB,EAAuBC,EAAA8C,QA4CvCW,CAAAvB,GDvCO,SAAAlC,EAAAgB,EAAA0C,EAAA,MACP,MAAWxD,SAAAC,QAAWA,GAAUC,SAASJ,EAGzC,UAAA0D,QAAArC,IAAAqC,EAEA,YADAvD,EAAAwD,YAAA3C,GAGA,MAAAX,EAAAC,SAAAC,iBAAAJ,EAAAL,EAAA,SACA,IAAAU,EAAAC,EAAAL,GACAwD,EAAA,EACAC,GAAA,EACA,KAAAxD,EAAAU,YAOA,IANA8C,IACAxD,EAAAY,cACAyC,IACAE,EAAAlC,EAAAV,GACA0C,EAAAlC,WAAAsC,aAAA9C,EAAA0C,KAEA,IAAAlD,GAAAJ,EAAAI,GAAAc,QAAAuC,GAAA,CAEA,GAAAD,EAAA,GACA,UAAApD,GACAJ,EAAAI,GAAAc,OAAAsC,EACApD,EAAAC,EAAAL,EAAAI,GAEA,OAEAA,EAAAC,EAAAL,EAAAI,ICcIuD,CAAsB/D,EAAAgD,EAAAhD,EAAAE,QAAAC,QAAA6D,YAI1BrH,OAAAyF,SAAAO,sBAAA3C,EAAAE,QAAAgC,GACAvF,OAAAyF,SAAA6B,aAAA,CAGA,MAAAf,EAAAlD,EAAAE,QAAAC,QAAA+D,cAAA,SACAtB,EAAAkB,aAAAZ,EAAAiB,WAAA,GAAAvB,EAAAoB,gBAEA,CAOAhE,EAAAE,QAAAC,QAAA2D,aAAAd,EAAAhD,EAAAE,QAAAC,QAAA6D,YACA,MAAAI,EAAA,IAAA1B,IACA0B,EAAAvB,IAAAG,GACQjD,EAAuBC,EAAAoE,KC3I/BzH,OAAA0H,0BACA,EAAAC,EAAAC,IAAAD,GACO,MAAAE,GACPpF,YAAApB,EAAAiE,GACA,OAAAA,GACA,KAAAwC,QACA,OAAAzG,EAAA,QACA,KAAAP,OACA,KAAA8F,MAGA,aAAAvF,IAAAuB,KAAAC,UAAAxB,GAEA,OAAAA,GAEAoB,cAAApB,EAAAiE,GACA,OAAAA,GACA,KAAAwC,QACA,cAAAzG,EACA,KAAA0G,OACA,cAAA1G,EAAA,KAAA0G,OAAA1G,GACA,KAAAP,OACA,KAAA8F,MACA,OAAAhE,KAAAoF,MAAA3G,GAEA,OAAAA,IAOO4G,EAAA,CAAA5G,EAAA6G,IAEPA,IAAA7G,IAAA6G,MAAA7G,MAEA8G,GACAC,WAAA,EACA9C,KAAA+C,OACAC,UAAAT,EACAU,SAAA,EACAC,WAAAP,GAEAQ,EAAAC,QAAAC,SAAA,GACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GACAC,EAAA,SAMOC,UAAAC,YACPzG,cACAK,QACAC,KAAAoG,aAAA,EACApG,KAAAqG,yBAAA1E,EACA3B,KAAAsG,eAAAZ,EACA1F,KAAAuG,2BAAA5E,EAKA3B,KAAAwG,mBAAA,IAAAC,IAIAzG,KAAA0G,2BAAA/E,EACA3B,KAAA2G,aAMAC,gCAEA5G,KAAA6G,WACA,MAAAC,KAUA,OAPA9G,KAAA+G,iBAAAlF,QAAA,CAAAmF,EAAA7H,KACA,MAAA8H,EAAAjH,KAAAkH,0BAAA/H,EAAA6H,QACArF,IAAAsF,IACAjH,KAAAmH,wBAAAC,IAAAH,EAAA9H,GACA2H,EAAApF,KAAAuF,MAGAH,EAQApH,gCAEA,IAAAM,KAAAd,eAAAyF,0BAAA,mBAAA3E,OAAA,CACAA,KAAA+G,iBAAA,IAAAN,IAEA,MAAAY,EAAAtJ,OAAAuJ,eAAAtH,MAAA+G,sBACApF,IAAA0F,GACAA,EAAAxF,QAAA,CAAAmF,EAAAO,IAAAvH,KAAA+G,iBAAAK,IAAAG,EAAAP,KAWAtH,sBAAA9B,EAAA4J,EAAApC,GAWA,GAPApF,KAAAyH,yBACAzH,KAAA+G,iBAAAK,IAAAxJ,EAAA4J,GAMAA,EAAAE,YAAA1H,KAAAf,UAAAC,eAAAtB,GACA,OAEA,MAAAgB,EAAA,iBAAAhB,EAAAQ,cAA+DR,IAC/DG,OAAAC,eAAAgC,KAAAf,UAAArB,GAEA8B,MAEA,OAAAM,KAAApB,IAEAc,IAAApB,GAEA,MAAAqJ,EAAA3H,KAAApC,GAEAoC,KAAApB,GAAAN,EACA0B,KAAA4H,cAAAhK,EAAA+J,IAEAE,cAAA,EACA5J,YAAA,IAQAyB,kBACA,GAAAM,KAAAd,eAAAyF,0BAAA,YAAA3E,QACAA,KAAA8H,UACA,OAGA,MAAAC,EAAAhK,OAAAuJ,eAAAtH,MAYA,GAXA,mBAAA+H,EAAAlB,UACAkB,EAAAlB,WAEA7G,KAAA8H,WAAA,EACA9H,KAAAyH,yBAEAzH,KAAAmH,wBAAA,IAAAV,IAKAzG,KAAAd,eAAAyF,0BAAA,aAAA3E,OAAA,CACA,MAAAgI,EAAAhI,KAAAiI,WAEAC,MACAnK,OAAAoK,oBAAAH,MACA,mBAAAjK,OAAAqK,sBACArK,OAAAqK,sBAAAJ,OAIA,UAAA7I,KAAA+I,EAIAlI,KAAAqI,eAAAlJ,EAAA6I,EAAA7I,KAQAO,iCAAA9B,EAAA4J,GACA,MAAAnC,EAAAmC,EAAAnC,UACA,WAAAA,OACA1D,EACA,iBAAA0D,EACAA,EACA,iBAAAzH,IAAA0K,mBAAA3G,EAQAjC,wBAAApB,EAAA6G,EAAAM,EAAAP,GACA,OAAAO,EAAAnH,EAAA6G,GAQAzF,mCAAApB,EAAAkJ,GACA,MAAAjF,EAAAiF,EAAAjF,KACAgD,EAAAiC,EAAAjC,WAAAT,EACAyD,EAAA,mBAAAhD,MAAAgD,cACA,OAAAA,IAAAjK,EAAAiE,GAAAjE,EAUAoB,iCAAApB,EAAAkJ,GACA,QAAA7F,IAAA6F,EAAAhC,QACA,OAEA,MAAAjD,EAAAiF,EAAAjF,KACAgD,EAAAiC,EAAAjC,UAGA,OAFAA,KAAAiD,aACA1D,EAAA0D,aACAlK,EAAAiE,GAMA7C,aACAM,KAAAyI,0BAcA/I,0BAGAM,KAAA0I,YACA3B,iBAAAlF,QAAA,CAAA8G,EAAAxJ,KACA,GAAAa,KAAAd,eAAAC,GAAA,CACA,MAAAb,EAAA0B,KAAAb,UACAa,KAAAb,GACAa,KAAAqG,sBACArG,KAAAqG,oBAAA,IAAAI,KAEAzG,KAAAqG,oBAAAe,IAAAjI,EAAAb,MAOAoB,2BAIAM,KAAAqG,oBAAAxE,QAAA,CAAAmF,EAAA7H,IAAAa,KAAAb,GAAA6H,GACAhH,KAAAqG,yBAAA1E,EAEAjC,oBACAM,KAAAoG,aAAApG,KAAAoG,aAAAH,EAKAjG,KAAAuG,uBACAvG,KAAAuG,wBACAvG,KAAAuG,2BAAA5E,GAGA3B,KAAA4H,gBAQAlI,wBAKAA,yBAAA9B,EAAAuH,EAAA7G,GACA6G,IAAA7G,GACA0B,KAAA4I,qBAAAhL,EAAAU,GAGAoB,qBAAA9B,EAAAU,EAAAkJ,EAAApC,GACA,MAAAyD,EAAA7I,KAAA0I,YACAzB,EAAA4B,EAAA3B,0BAAAtJ,EAAA4J,GACA,QAAA7F,IAAAsF,EAAA,CACA,MAAA6B,EAAAD,EAAAE,0BAAAzK,EAAAkJ,GAEA,QAAA7F,IAAAmH,EACA,OAUA9I,KAAAoG,aAAApG,KAAAoG,aAAAL,EACA,MAAA+C,EACA9I,KAAAgJ,gBAAA/B,GAGAjH,KAAAiJ,aAAAhC,EAAA6B,GAGA9I,KAAAoG,aAAApG,KAAAoG,cAAAL,GAGArG,qBAAA9B,EAAAU,GAGA,GAAA0B,KAAAoG,aAAAL,EACA,OAEA,MAAA8C,EAAA7I,KAAA0I,YACAQ,EAAAL,EAAA1B,wBAAAjJ,IAAAN,GACA,QAAA+D,IAAAuH,EAAA,CACA,MAAA1B,EAAAqB,EAAA9B,iBAAA7I,IAAAgL,IAAA9D,EAEApF,KAAAoG,aAAApG,KAAAoG,aAAAJ,EACAhG,KAAAkJ,GAEAL,EAAAM,4BAAA7K,EAAAkJ,GAEAxH,KAAAoG,aAAApG,KAAAoG,cAAAJ,GAgBAtG,cAAA9B,EAAA+J,GACA,IAAAyB,GAAA,EAEA,QAAAzH,IAAA/D,IAAAoC,KAAAwG,mBAAA/E,IAAA7D,GAAA,CACA,MAAAiL,EAAA7I,KAAA0I,YACAlB,EAAAqB,EAAA9B,iBAAA7I,IAAAN,IAAAwH,EACAyD,EAAAQ,iBAAArJ,KAAApC,GAAA+J,EAAAH,EAAA/B,aAEAzF,KAAAwG,mBAAAY,IAAAxJ,EAAA+J,IAEA,IAAAH,EAAAhC,SACAxF,KAAAoG,aAAAJ,SACArE,IAAA3B,KAAA0G,wBACA1G,KAAA0G,sBAAA,IAAAD,KAEAzG,KAAA0G,sBAAAU,IAAAxJ,EAAA4J,KAKA4B,GAAA,EAMA,OAHApJ,KAAAsJ,qBAAAF,GACApJ,KAAAuJ,iBAEAvJ,KAAAwJ,eAKA9J,uBAGA,IAAAkG,EADA5F,KAAAoG,aAAApG,KAAAoG,aAAAN,EAEA,MAAA2D,EAAAzJ,KAAAsG,eACAtG,KAAAsG,eAAA,IAAAX,QAAA+D,GAAA9D,EAAA8D,SAGAD,EAEAzJ,KAAA2J,qBACA,IAAAhE,QAAA+D,GAAA1J,KAAAuG,sBAAAmD,GAGA,MAAAE,EAAA5J,KAAA6J,gBAGA,MAAAD,GACA,mBAAAA,EAAAE,YACAF,EAEAhE,GAAA5F,KAAAsJ,qBAEAK,oBACA,OAAA3J,KAAAoG,aAAAH,EAEAqD,0BACA,OAAAtJ,KAAAoG,aAAAN,EAEAiE,iBACA,OAAA/J,KAAAoG,aAAAP,EAeAnG,gBAKA,GAHAM,KAAAqG,qBACArG,KAAAgK,2BAEAhK,KAAAiK,aAAAjK,KAAAwG,oBAAA,CACA,MAAA0D,EAAAlK,KAAAwG,mBACAxG,KAAAmK,OAAAD,GACAlK,KAAAoK,eACApK,KAAAoG,aAAAP,IACA7F,KAAAoG,aAAApG,KAAAoG,aAAAP,EACA7F,KAAAqK,aAAAH,IAEAlK,KAAAsK,QAAAJ,QAGAlK,KAAAoK,eAGA1K,eACAM,KAAAwG,mBAAA,IAAAC,IACAzG,KAAAoG,aAAApG,KAAAoG,cAAAN,EAcA0D,qBACA,OAAAxJ,KAAAsG,eASA5G,aAAA8G,GACA,SAUA9G,OAAA8G,QACA7E,IAAA3B,KAAA0G,uBACA1G,KAAA0G,sBAAA6D,KAAA,IAGAvK,KAAA0G,sBAAA7E,QAAA,CAAAmF,EAAAO,IAAAvH,KAAAwK,qBAAAjD,EAAAvH,KAAAuH,GAAAP,IACAhH,KAAA0G,2BAAA/E,GAYAjC,QAAA8G,IAWA9G,aAAA8G,KAMAN,EAAA4B,WAAA,ECjiBA,MA0BO2C,EAAAC,GAAAC,GAAA,mBAAAA,EA1BP,EAAAD,EAAAE,KACA3N,OAAA4N,eAAA9N,OAAA2N,EAAAE,GAOAA,GAmBAE,CAAAJ,EAAAC,GAjBA,EAAAD,EAAAK,KACA,MAAAC,KAAWA,EAAAC,YAAiBF,EAC5B,OACAC,OACAC,WAEAvL,SAAAkL,GACA3N,OAAA4N,eAAA9N,OAAA2N,EAAAE,MAWAM,CAAAR,EAAAC,GA8DOQ,EAAA,CAAAC,EAAAC,IAAAD,EAAA5G,cAAA6G,IAKAF,EAAA,CAAAC,EAAAC,IAAAD,EAAA/H,iBAAAgI,IALA,MAMPC,EAAA,CAAAP,EAAAQ,EAAA3N,KACAG,OAAAC,eAAAuN,EAAA3N,EAAAmN,IAEAS,EAAA,CAAAT,EAAAvK,MACAwK,KAAA,SACAS,UAAA,YACA7M,IAAA4B,EAAA5B,IACAmM,eAUA,SAAAI,EAAAO,GACA,OAAAL,GAAA,CAAAM,EAEA/N,KACA,MAAAmN,GACArL,MACA,OAAAgM,EAAA1L,KAAA4L,WAAAP,IAEApN,YAAA,EACA4J,cAAA,GAEA,YAAAlG,IAAA/D,EACA0N,EAAAP,EAAAY,EAAA/N,GACA4N,EAAAT,EAAAY,IAGA,MCpIOE,EAAA,uBAAAC,SAAA7M,WACP,YAAA8M,cAAA9M,UACA+M,EAAA5N,eACO6N,EACPvM,YAAAwM,EAAAC,GACA,GAAAA,IAAAH,EACA,UAAAvM,MAAA,qEAEAO,KAAAkM,UAIAE,iBAYA,YAXAzK,IAAA3B,KAAAqM,cAGAR,GACA7L,KAAAqM,YAAA,IAAAN,cACA/L,KAAAqM,YAAAC,YAAAtM,KAAAkM,UAGAlM,KAAAqM,YAAA,MAGArM,KAAAqM,YAEA3M,WACA,OAAAM,KAAAkM,SAUO,MAkBAK,EAAA,CAAAC,KAAAC,KACP,MAAAP,EAAAO,EAAAC,OAAA,CAAAC,EAAA3F,EAAA4F,IAAAD,EAhBA,CAAArO,IACA,GAAAA,aAAA2N,EACA,OAAA3N,EAAA4N,QAGA,UAAAzM,yEAA2FnB,uGAW3FuO,CAAA7F,GAAAwF,EAAAI,EAAA,GAAAJ,EAAA,IACA,WAAAP,EAAAC,EAAAF,ICnEA7O,EAAAQ,EAAA0B,EAAA,sBAAAyN,IAAA3P,EAAAQ,EAAA0B,EAAA,sBAAAoL,IAAAtN,EAAAQ,EAAA0B,EAAA,sBAAA0N,EAAA,IAAA5P,EAAAQ,EAAA0B,EAAA,sBAAA0N,EAAA,IAAA5P,EAAAQ,EAAA0B,EAAA,sBAAAkN,KAwBAtP,OAAA,qBAAAA,OAAA,wBACAyE,KAAA,SAmBA,MAAAsL,EAAA5J,KAAA6J,KAAA7J,EAAA6J,KAAAC,KAbA,SAAAC,EAAA/J,EAAAwG,MACA,QAAAvM,EAAA,EAAA+E,EAAAgB,EAAAhB,OAA2C/E,EAAA+E,EAAY/E,IAAA,CACvD,MAAAiB,EAAA8E,EAAA/F,GACAwG,MAAAuJ,QAAA9O,GACA6O,EAAA7O,EAAAsL,GAGAA,EAAAlI,KAAApD,GAGA,OAAAsL,EAGAuD,CAAA/J,SACa0J,UAAmB5G,EAEhCxG,kBACAK,MAAA8G,WAGA7G,KAAAqN,QACArN,KAAAd,eAAAyF,0BAAA,SAAA3E,OACAA,KAAAsN,mBACAtN,KAAAqN,YAGA3N,0BAOA,MAAA6N,EAAAvN,KAAAoD,OACAA,KACA,GAAAS,MAAAuJ,QAAAG,GAAA,CACAP,EAAAO,GAMAC,YAAA,CAAApG,EAAAhI,KACAgI,EAAAjE,IAAA/D,GAEAgI,GACa,IAAApE,KAEbnB,QAAAmF,GAAA5D,EAAAqK,QAAAzG,SAEAuG,GACAnK,EAAA1B,KAAA6L,GAEA,OAAAnK,EAOA1D,aACAK,MAAA4G,aACA3G,KAAA4L,WAAA5L,KAAA0N,mBAIAzQ,OAAA0Q,YAAA3N,KAAA4L,sBAAA3O,OAAA0Q,YACA3N,KAAA4N,cAUAlO,mBACA,OAAAM,KAAA6N,cAAkCrP,KAAA,SAWlCkB,cACA,MAAA0D,EAAApD,KAAA0I,YAAA2E,QACA,IAAAjK,EAAAhB,cAQAT,IAAA1E,OAAAyF,UAAAzF,OAAAyF,SAAA6B,aAGiBsH,EACjB7L,KAAA4L,WAAAkC,mBACA1K,EAAA2K,IAAA3O,KAAAgN,YAKApM,KAAAgO,8BAAA,EATA/Q,OAAAyF,SAAAuL,YAAAC,sBAAA9K,EAAA2K,IAAA3O,KAAA8M,SAAAlM,KAAAmO,YAYAzO,oBACAK,MAAAqO,oBAGApO,KAAA+J,iBAAApI,IAAA1E,OAAAyF,UACAzF,OAAAyF,SAAA2L,aAAArO,MASAN,OAAAwK,GACAnK,MAAAoK,OAAAD,GACA,MAAAoE,EAAAtO,KAAAuO,SACAD,aAAsCvB,EAAA,GACtC/M,KAAA0I,YACA6F,OAAAD,EAAAtO,KAAA4L,YAA0DpJ,UAAAxC,KAAAmO,UAAAK,aAAAxO,OAK1DA,KAAAgO,+BACAhO,KAAAgO,8BAAA,EACAhO,KAAA0I,YAAA2E,QAAAxL,QAAAzC,IACA,MAAAoE,EAAA5C,SAAA2C,cAAA,SACAC,EAAAC,YAAArE,EAAA8M,QACAlM,KAAA4L,WAAA3H,YAAAT,MASA9D,WAOAoN,EAAUhF,WAAA,EASVgF,EAAUyB,OJoBS,EAAA3E,EAAA6E,EAAAjH,KACnB,MAAAhF,EAAAgF,EAAAhF,UACAkM,EAAwBH,EAAA,EAAK9M,IAAAgN,GAC7BE,EAAAF,aAAAd,YACAlL,GAAAmH,aAAuDgF,EAAA,EAEvDC,EAAAF,IAAA5L,EAAAtB,IAAAe,GAGAsM,EAAAD,EAAAjO,SAAAmO,yBAAAN,EAWA,GAVI1Q,OAAAwQ,EAAA,EAAAxQ,CAAS6L,EAAAkF,EAAA/Q,OAAAiR,QAAyCC,gBAnLtD,CAAAzM,GAAAoH,IACA,MAAAsF,EAAA5M,EAAAsH,EAAArH,KAAAC,GACA,IAAA2M,EAAwBxL,EAAA,EAAczF,IAAAgR,QACtCvN,IAAAwN,IACAA,GACAC,aAAA,IAAAC,QACAzL,UAAA,IAAA6C,KAEQ9C,EAAA,EAAcyD,IAAA8H,EAAAC,IAEtB,IAAA7O,EAAA6O,EAAAC,aAAAlR,IAAA0L,EAAA4C,SACA,QAAA7K,IAAArB,EACA,OAAAA,EAEA,MAAA1B,EAAAgL,EAAA4C,QAAA8C,KAAoCjN,EAAA,GAEpC,QAAAV,KADArB,EAAA6O,EAAAvL,UAAA1F,IAAAU,IACA,CACA,MAAA4B,EAAAoJ,EAAA2F,qBACA9M,GACAxF,OAAAyF,SAAAC,mBAAAnC,EAAAgC,GAEAlC,EAAA,IAAuB+B,EAAA,EAAQuH,EAAApJ,GAC/B2O,EAAAvL,UAAAwD,IAAAxI,EAAA0B,GAGA,OADA6O,EAAAC,aAAAhI,IAAAwC,EAAA4C,QAAAlM,GACAA,GA0JsDkP,CAAAhN,IAAmDgF,IAUzGqH,EAAA,CACA,MAAA7N,EAAqBuN,EAAA,EAAKrQ,IAAA4Q,GAClBP,EAAA,EAAKkB,OAAAX,GACb9N,EAAA1C,iBAAkCoR,EAAA,GAClCzM,EAAA6L,EAAA9N,EAAA1C,MAAAgC,SAAAkC,GAEQzE,OAAA4R,EAAA,EAAA5R,CAAW0Q,IAAAnK,YACnBmK,EAAAxK,YAAA6K,GACQP,EAAA,EAAKnH,IAAAqH,EAAAzN,IAQb0N,GAAAC,GACA1R,OAAAyF,SAAA2L,aAAAI,EAAAmB,sCK9PA,IAAAC,EAAA1S,EAAA,GA6CA,MAAA2S,GAWApQ,MAAAC,EAAAC,GACAgD,QAAA3C,MAAiBlC,OAAA8R,EAAA,EAAA9R,CAAyB4B,GAAAC,IAa1CF,KAAAC,EAAAC,GACAgD,QAAAC,KAAgB9E,OAAA8R,EAAA,EAAA9R,CAAyB4B,GAAAC,KAI1BP,EAAA,kCC3EflC,EAAAQ,EAAA0B,EAAA,sBAAA0Q,IAAA5S,EAAAQ,EAAA0B,EAAA,sBAAA2Q,IAAA7S,EAAAQ,EAAA0B,EAAA,sBAAA4Q,IAAA9S,EAAAQ,EAAA0B,EAAA,sBAAA6Q,IAAA/S,EAAAQ,EAAA0B,EAAA,sBAAA8Q,IAAAhT,EAAAQ,EAAA0B,EAAA,sBAAA+Q,IAAAjT,EAAAQ,EAAA0B,EAAA,sBAAAyH,IAAA3J,EAAAQ,EAAA0B,EAAA,sBAAA2J,IAAA7L,EAAAQ,EAAA0B,EAAA,sBAAAgR,IAAO,MAAAN,EAAA,oBAEP,SAAAO,EAAAC,GACA,WAAAC,YAAAT,GAAqCQ,WAG9B,MAAAP,EAAAS,GACPH,GACAI,UAAA,QACAD,eAGOR,EAAA,CACPzP,EACAmQ,EACAC,EACAC,EAAA,KACA/J,OAEAwJ,GACAI,UAAA,SACAlQ,UACAmQ,SACAC,WACAC,YACA/J,eAGOoJ,EAAA,CAAAS,EAAAC,EAAAxF,EAAAyF,IACPP,GACAI,UAAA,OACAC,SACAC,WACAxF,SACAyF,cAGOV,EAAA,CAAA3P,EAAA4K,IACPkF,GACAI,UAAA,UACAlQ,UACA4K,WAGOgF,EAAAhF,GACPkF,GACAI,UAAA,SACAtF,WAGOtE,EAAA,CAAAsE,EAAAnE,IACPqJ,GACAI,UAAA,aACAtF,SACAnE,SAGO+B,EAAA,CAAAoC,EAAAxM,IACP0R,GACAI,UAAA,kBACAtF,SACAxM,QAGOyR,EAAA,CAAAS,EAAA1F,IACPkF,GACAI,UAAA,OACAI,SACA1F,4BC/DA,IAAA2F,KAWAC,EATA,SAAAC,GACA,IAAAC,EAEA,kBAEA,YADA,IAAAA,MAAAD,EAAAE,MAAAnR,KAAAoR,YACAF,GAIAG,CAAA,WAMA,OAAApU,QAAA2D,mBAAA0Q,MAAArU,OAAAsU,OAUAC,EAAA,SAAAP,GACA,IAAAC,KAEA,gBAAA9F,EAAAuF,GAMA,sBAAAvF,EACA,OAAAA,IAEA,YAAA8F,EAAA9F,GAAA,CACA,IAAAqG,EApBA,SAAArG,EAAAuF,GACA,OAAAA,EACAA,EAAAnM,cAAA4G,GAEAxK,SAAA4D,cAAA4G,IAgBA5N,KAAAwC,KAAAoL,EAAAuF,GAEA,GAAA1T,OAAAyU,mBAAAD,aAAAxU,OAAAyU,kBACA,IAGAD,IAAAE,gBAAAC,KACK,MAAAC,GACLJ,EAAA,KAGAP,EAAA9F,GAAAqG,EAEA,OAAAP,EAAA9F,IA1BA,GA8BA0G,EAAA,KACAC,EAAA,EACAC,KAEAC,EAAc9U,EAAQ,IAqDtB,SAAA+U,EAAA9O,EAAAoE,GACA,QAAAnK,EAAA,EAAgBA,EAAA+F,EAAAhB,OAAmB/E,IAAA,CACnC,IAAA8U,EAAA/O,EAAA/F,GACA+U,EAAArB,EAAAoB,EAAAE,IAEA,GAAAD,EAAA,CACAA,EAAAE,OAEA,QAAAC,EAAA,EAAiBA,EAAAH,EAAA1R,MAAA0B,OAA2BmQ,IAC5CH,EAAA1R,MAAA6R,GAAAJ,EAAAzR,MAAA6R,IAGA,KAAQA,EAAAJ,EAAAzR,MAAA0B,OAAuBmQ,IAC/BH,EAAA1R,MAAAgB,KAAA8Q,EAAAL,EAAAzR,MAAA6R,GAAA/K,QAEG,CACH,IAAA9G,KAEA,IAAA6R,EAAA,EAAiBA,EAAAJ,EAAAzR,MAAA0B,OAAuBmQ,IACxC7R,EAAAgB,KAAA8Q,EAAAL,EAAAzR,MAAA6R,GAAA/K,IAGAuJ,EAAAoB,EAAAE,KAA2BA,GAAAF,EAAAE,GAAAC,KAAA,EAAA5R,WAK3B,SAAA+R,EAAAC,EAAAlL,GAIA,IAHA,IAAApE,KACAuP,KAEAtV,EAAA,EAAgBA,EAAAqV,EAAAtQ,OAAiB/E,IAAA,CACjC,IAAA8U,EAAAO,EAAArV,GACAgV,EAAA7K,EAAAoL,KAAAT,EAAA,GAAA3K,EAAAoL,KAAAT,EAAA,GAIAnR,GAAcuL,IAHd4F,EAAA,GAGcU,MAFdV,EAAA,GAEcW,UADdX,EAAA,IAGAQ,EAAAN,GACAM,EAAAN,GAAA3R,MAAAgB,KAAAV,GADAoC,EAAA1B,KAAAiR,EAAAN,IAAkDA,KAAA3R,OAAAM,KAIlD,OAAAoC,EAGA,SAAA2P,EAAAvL,EAAAhE,GACA,IAAA4H,EAAAoG,EAAAhK,EAAAwL,YAEA,IAAA5H,EACA,UAAA3L,MAAA,+GAGA,IAAAwT,EAAAjB,IAAA5P,OAAA,GAEA,WAAAoF,EAAA0L,SACAD,EAEGA,EAAAE,YACH/H,EAAAhH,aAAAZ,EAAAyP,EAAAE,aAEA/H,EAAAnH,YAAAT,GAJA4H,EAAAhH,aAAAZ,EAAA4H,EAAA9G,YAMA0N,EAAAtQ,KAAA8B,QACE,cAAAgE,EAAA0L,SACF9H,EAAAnH,YAAAT,OACE,qBAAAgE,EAAA0L,WAAA1L,EAAA0L,SAAAE,OAIF,UAAA3T,MAAA,8LAHA,IAAA0T,EAAA3B,EAAAhK,EAAA0L,SAAAE,OAAAhI,GACAA,EAAAhH,aAAAZ,EAAA2P,IAMA,SAAAE,EAAA7P,GACA,UAAAA,EAAA1B,WAAA,SACA0B,EAAA1B,WAAAC,YAAAyB,GAEA,IAAAoJ,EAAAoF,EAAAsB,QAAA9P,GACAoJ,GAAA,GACAoF,EAAAuB,OAAA3G,EAAA,GAIA,SAAA4G,EAAAhM,GACA,IAAAhE,EAAA5C,SAAA2C,cAAA,SAMA,QAJA5B,IAAA6F,EAAAiM,MAAAlR,OACAiF,EAAAiM,MAAAlR,KAAA,iBAGAZ,IAAA6F,EAAAiM,MAAAC,MAAA,CACA,IAAAA,EAgCA,WACK,EAIL,OAAQvW,EAAAwW,GArCRC,GACAF,IACAlM,EAAAiM,MAAAC,SAOA,OAHAG,EAAArQ,EAAAgE,EAAAiM,OACAV,EAAAvL,EAAAhE,GAEAA,EAiBA,SAAAqQ,EAAAC,EAAAL,GACA1V,OAAAgW,KAAAN,GAAA5R,QAAA,SAAAjD,GACAkV,EAAA7K,aAAArK,EAAA6U,EAAA7U,MAYA,SAAA4T,EAAAwB,EAAAxM,GACA,IAAAhE,EAAA2G,EAAAiG,EAAAxG,EAGA,GAAApC,EAAAyM,WAAAD,EAAAzH,IAAA,CAKA,KAJA3C,EAAA,mBAAApC,EAAAyM,UACAzM,EAAAyM,UAAAD,EAAAzH,KACA/E,EAAAyM,UAAAC,QAAAF,EAAAzH,MASA,oBAJAyH,EAAAzH,IAAA3C,EAUA,GAAApC,EAAAsK,UAAA,CACA,IAAAqC,EAAApC,IAEAvO,EAAAsO,MAAA0B,EAAAhM,IAEA2C,EAAAiK,EAAAvV,KAAA,KAAA2E,EAAA2Q,GAAA,GACA/D,EAAAgE,EAAAvV,KAAA,KAAA2E,EAAA2Q,GAAA,QAGAH,EAAAlB,WACA,mBAAAuB,KACA,mBAAAA,IAAAC,iBACA,mBAAAD,IAAAE,iBACA,mBAAAC,MACA,mBAAAC,MAEAjR,EAlEA,SAAAgE,GACA,IAAAkN,EAAA9T,SAAA2C,cAAA,QAUA,YARA5B,IAAA6F,EAAAiM,MAAAlR,OACAiF,EAAAiM,MAAAlR,KAAA,YAEAiF,EAAAiM,MAAAkB,IAAA,aAEAd,EAAAa,EAAAlN,EAAAiM,OACAV,EAAAvL,EAAAkN,GAEAA,EAuDAE,CAAApN,GACA2C,EAiFA,SAAAuK,EAAAlN,EAAAwM,GACA,IAAAzH,EAAAyH,EAAAzH,IACAuG,EAAAkB,EAAAlB,UAQA+B,OAAAlT,IAAA6F,EAAAsN,uBAAAhC,GAEAtL,EAAAsN,uBAAAD,KACAtI,EAAA0F,EAAA1F,IAGAuG,IAEAvG,GAAA,uDAAuDkI,KAAAM,SAAAC,mBAAAnV,KAAAC,UAAAgT,MAAA,OAGvD,IAAAmC,EAAA,IAAAT,MAAAjI,IAA6BhK,KAAA,aAE7B2S,EAAAR,EAAAS,KAEAT,EAAAS,KAAAd,IAAAC,gBAAAW,GAEAC,GAAAb,IAAAE,gBAAAW,IA5GArW,KAAA,KAAA2E,EAAAgE,GACA4I,EAAA,WACAiD,EAAA7P,GAEAA,EAAA2R,MAAAd,IAAAE,gBAAA/Q,EAAA2R,SAGA3R,EAAAgQ,EAAAhM,GACA2C,EAsDA,SAAA3G,EAAAwQ,GACA,IAAAzH,EAAAyH,EAAAzH,IACAsG,EAAAmB,EAAAnB,MAEAA,GACArP,EAAAyF,aAAA,QAAA4J,GAGA,GAAArP,EAAA4I,WACA5I,EAAA4I,WAAAF,QAAAK,MACE,CACF,KAAA/I,EAAAc,YACAd,EAAAzB,YAAAyB,EAAAc,YAGAd,EAAAS,YAAArD,SAAAwU,eAAA7I,MArEA1N,KAAA,KAAA2E,GACA4M,EAAA,WACAiD,EAAA7P,KAMA,OAFA2G,EAAA6J,GAEA,SAAAqB,GACA,GAAAA,EAAA,CACA,GACAA,EAAA9I,MAAAyH,EAAAzH,KACA8I,EAAAxC,QAAAmB,EAAAnB,OACAwC,EAAAvC,YAAAkB,EAAAlB,UAEA,OAGA3I,EAAA6J,EAAAqB,QAEAjF,KA1PAtT,EAAAD,QAAA,SAAA6V,EAAAlL,GACA,uBAAA8N,cACA,iBAAA1U,SAAA,UAAAnB,MAAA,iEAGA+H,SAEAiM,MAAA,iBAAAjM,EAAAiM,MAAAjM,EAAAiM,SAIAjM,EAAAsK,WAAA,kBAAAtK,EAAAsK,YAAAtK,EAAAsK,UAAAd,KAGAxJ,EAAAwL,aAAAxL,EAAAwL,WAAA,QAGAxL,EAAA0L,WAAA1L,EAAA0L,SAAA,UAEA,IAAA9P,EAAAqP,EAAAC,EAAAlL,GAIA,OAFA0K,EAAA9O,EAAAoE,GAEA,SAAA+N,GAGA,IAFA,IAAAC,KAEAnY,EAAA,EAAiBA,EAAA+F,EAAAhB,OAAmB/E,IAAA,CACpC,IAAA8U,EAAA/O,EAAA/F,IACA+U,EAAArB,EAAAoB,EAAAE,KAEAC,OACAkD,EAAA9T,KAAA0Q,GAGAmD,GAEArD,EADAO,EAAA8C,EAAA/N,GACAA,GAGA,IAAAnK,EAAA,EAAiBA,EAAAmY,EAAApT,OAAsB/E,IAAA,CACvC,IAAA+U,EAEA,QAFAA,EAAAoD,EAAAnY,IAEAiV,KAAA,CACA,QAAAC,EAAA,EAAmBA,EAAAH,EAAA1R,MAAA0B,OAA2BmQ,IAAAH,EAAA1R,MAAA6R,YAE9CxB,EAAAqB,EAAAC,QAkNA,IAAAoD,EAAA,WACA,IAAAC,KAEA,gBAAA9T,EAAA+T,GAGA,OAFAD,EAAA9T,GAAA+T,EAEAD,EAAAE,OAAA7Q,SAAAuK,KAAA,OANA,GAUA,SAAA8E,EAAA5Q,EAAA5B,EAAAwO,EAAA4D,GACA,IAAAzH,EAAA6D,EAAA,GAAA4D,EAAAzH,IAEA,GAAA/I,EAAA4I,WACA5I,EAAA4I,WAAAF,QAAAuJ,EAAA7T,EAAA2K,OACE,CACF,IAAAsJ,EAAAjV,SAAAwU,eAAA7I,GACAuJ,EAAAtS,EAAAsS,WAEAA,EAAAlU,IAAA4B,EAAAzB,YAAA+T,EAAAlU,IAEAkU,EAAA1T,OACAoB,EAAAY,aAAAyR,EAAAC,EAAAlU,IAEA4B,EAAAS,YAAA4R,oCC3VA1Y,EAAAQ,EAAA0B,EAAA,sBAAA0W,IAAA5Y,EAAAQ,EAAA0B,EAAA,sBAAA2W,IAAA7Y,EAAAQ,EAAA0B,EAAA,sBAAA4W,IAAA9Y,EAAAQ,EAAA0B,EAAA,sBAAA6W,IAAA/Y,EAAAQ,EAAA0B,EAAA,sBAAA8W,IAAAhZ,EAAAQ,EAAA0B,EAAA,sBAAA+W,IAAAjZ,EAAAQ,EAAA0B,EAAA,sBAAAgX,IAiBO,MAAAN,WAAwBzQ,OAAAgR,KAAAC,UAAAC,MAAA,OAKxBR,YAA0BD,UAC1BU,EAAA,IAAAC,UAAkCX,KAAUC,KAI5CC,EAAA,cAIAC,EACPxW,YAAAkK,EAAApJ,GACAR,KAAAU,SACAV,KAAAQ,UACA,IAAAoB,GAAA,EACAd,EAAA,EACA,MAAAP,KACAoW,EAAArW,IACA,MAAAG,EAAAH,EAAAG,QAGAE,EAAAC,SAAAC,iBAAAJ,EAAA,IAA2G,SAI3G,IAAAmW,EAAA,EACA,KAAAjW,EAAAU,YAAA,CACAO,IACA,MAAAN,EAAAX,EAAAY,YACA,OAAAD,EAAAY,SAAA,CACA,GAAAZ,EAAAuV,gBAAA,CACA,MAAA/P,EAAAxF,EAAAwF,WAMA,IAAA7E,EAAA,EACA,QAAA5E,EAAA,EAAuCA,EAAAyJ,EAAA1E,OAAuB/E,IAC9DyJ,EAAAzJ,GAAAiB,MAAAgV,QAAAyC,IAAA,GACA9T,IAGA,KAAAA,KAAA,IAGA,MAAA6U,EAAAlN,EAAA4C,QAAA1L,GAEAlD,EAAAyY,EAAAU,KAAAD,GAAA,GAMAE,EAAApZ,EAAA0K,cAAA2N,EAEAzJ,EADAlL,EAAA2V,aAAAD,GACAE,MAAAT,GACAzW,KAAAU,MAAAgB,MAA6Ca,KAAA,YAAAX,QAAAhE,OAAA4O,YAC7ClL,EAAA0H,gBAAAgO,GACAlW,GAAA0L,EAAApK,OAAA,GAGA,aAAAd,EAAAoJ,SACAiM,EAAArV,QAGA,OAAAA,EAAAY,SAAA,CACA,MAAAtC,EAAA0B,EAAA1B,KACA,GAAAA,EAAA0T,QAAAyC,IAAA,GACA,MAAApF,EAAArP,EAAAQ,WACA0K,EAAA5M,EAAAsX,MAAAT,GACAU,EAAA3K,EAAApK,OAAA,EAGA,QAAA/E,EAAA,EAAuCA,EAAA8Z,EAAe9Z,IACtDsT,EAAAvM,aAAA,KAAAoI,EAAAnP,GAAA+Y,IACAxV,SAAAwU,eAAA5I,EAAAnP,IAAAiE,GACAtB,KAAAU,MAAAgB,MAA6Ca,KAAA,OAAAX,YAI7C,KAAA4K,EAAA2K,IACAxG,EAAAvM,aAAAgS,IAAA9U,GACAf,EAAAmB,KAAAJ,IAGAA,EAAA1B,KAAA4M,EAAA2K,GAGArW,GAAAqW,QAGA,OAAA7V,EAAAY,SACA,GAAAZ,EAAA1B,OAAAmW,EAAA,CACA,MAAApF,EAAArP,EAAAQ,WAKA,OAAAR,EAAAE,iBAAAI,IAAAgV,IACAhV,IACA+O,EAAAvM,aAAAgS,IAAA9U,IAEAsV,EAAAhV,EACA5B,KAAAU,MAAAgB,MAAyCa,KAAA,OAAAX,UAGzC,OAAAN,EAAA6R,YACA7R,EAAA1B,KAAA,IAGAW,EAAAmB,KAAAJ,GACAM,KAEAd,QAEA,CACA,IAAAzD,GAAA,EACA,MACA,KADAA,EAAAiE,EAAA1B,KAAA0T,QAAAyC,EAAA1Y,EAAA,KAMA2C,KAAAU,MAAAgB,MAA6Ca,KAAA,OAAAX,OAAA,OAM7C+U,EAAAnW,GAEA,UAAA1B,KAAAyB,EACAzB,EAAAgD,WAAAC,YAAAjD,IAIO,MAAAqX,EAAAnV,IAAA,IAAAA,EAAAY,MAGAwU,EAAA,IAAAxV,SAAAwW,cAAA,IA0BAf,EAAA,2LC3LP,IAAAgB,EAAAla,EAAA,IAGAma,EAAA,iBAAAC,iBAAAxZ,iBAAAwZ,KAGA5a,EAAW0a,EAAA,GAAUC,GAAAE,SAAA,cAAAA,GAENnY,EAAA,kCCRflC,EAAAQ,EAAA0B,EAAA,sBAAAoY,IAAAta,EAAAQ,EAAA0B,EAAA,sBAAAqY,IAAAva,EAAAQ,EAAA0B,EAAA,sBAAAsY,IAAAxa,EAAAQ,EAAA0B,EAAA,sBAAAuY,IAAAza,EAAAQ,EAAA0B,EAAA,sBAAAwY,IAAA,IAAAC,EAAA3a,EAAA,IAAA4a,EAAA5a,EAAA,IAAA6a,EAAA7a,EAAA,GAAA8a,EAAA9a,EAAA,IAAA+a,EAAA/a,EAAA,IAAAgb,EAAAhb,EAAA,GAsBO,MAAAib,EAAA9Z,GACP,OAAAA,KACA,iBAAAA,GAAA,mBAAAA,SAMOmZ,EACP/X,YAAAc,EAAA5C,EAAA4O,GACAxM,KAAAqY,OAAA,EACArY,KAAAQ,UACAR,KAAApC,OACAoC,KAAAwM,UACAxM,KAAAU,SACA,QAAArD,EAAA,EAAuBA,EAAAmP,EAAApK,OAAA,EAAwB/E,IAC/C2C,KAAAU,MAAArD,GAAA2C,KAAAsY,cAMA5Y,cACA,WAAA6Y,EAAAvY,MAEAN,YACA,MAAA8M,EAAAxM,KAAAwM,QACAlP,EAAAkP,EAAApK,OAAA,EACA,IAAAoW,EAAA,GACA,QAAAnb,EAAA,EAAuBA,EAAAC,EAAOD,IAAA,CAC9Bmb,GAAAhM,EAAAnP,GACA,MAAA2D,EAAAhB,KAAAU,MAAArD,GACA,QAAAsE,IAAAX,EAAA,CACA,MAAAgG,EAAAhG,EAAA1C,MACA,SAAA0I,IACAnD,MAAAuJ,QAAApG,IAEA,iBAAAA,KAAA5I,OAAAqa,WACA,UAAAla,KAAAyI,EACAwR,GAAA,iBAAAja,IAAA+G,OAAA/G,QAIAia,GAAA,iBAAAxR,IAAA1B,OAAA0B,IAKA,OADAwR,GAAAhM,EAAAlP,GAGAoC,SACAM,KAAAqY,QACArY,KAAAqY,OAAA,EACArY,KAAAQ,QAAAyI,aAAAjJ,KAAApC,KAAAoC,KAAA0Y,qBAIOH,EACP7Y,YAAAiZ,GACA3Y,KAAA1B,WAAAqD,EACA3B,KAAA4Y,UAAAD,EAEAjZ,SAAApB,GACAA,IAAsB0Z,EAAA,GAAQI,EAAA9Z,QAAA0B,KAAA1B,QAC9B0B,KAAA1B,QAIiBP,OAAA+Z,EAAA,EAAA/Z,CAAWO,KAC5B0B,KAAA4Y,UAAAP,OAAA,IAIA3Y,SACA,KAAe3B,OAAA+Z,EAAA,EAAA/Z,CAAWiC,KAAA1B,QAAA,CAC1B,MAAAua,EAAA7Y,KAAA1B,MACA0B,KAAA1B,MAAyB0Z,EAAA,EACzBa,EAAA7Y,MAEAA,KAAA1B,QAA2B0Z,EAAA,GAG3BhY,KAAA4Y,UAAAE,gBAGOpB,EACPhY,YAAA8H,GACAxH,KAAA1B,WAAAqD,EACA3B,KAAA+Y,mBAAApX,EACA3B,KAAAwH,UAOA9H,WAAA+O,GACAzO,KAAAgZ,UAAAvK,EAAAxK,YAA+ClG,OAAAoa,EAAA,EAAApa,IAC/CiC,KAAAiZ,QAAAxK,EAAAxK,YAA6ClG,OAAAoa,EAAA,EAAApa,IAS7C2B,gBAAAwZ,GACAlZ,KAAAgZ,UAAAE,EACAlZ,KAAAiZ,QAAAC,EAAA/F,YAOAzT,eAAAsB,GACAA,EAAAmY,QAAAnZ,KAAAgZ,UAAsCjb,OAAAoa,EAAA,EAAApa,IACtCiD,EAAAmY,QAAAnZ,KAAAiZ,QAAoClb,OAAAoa,EAAA,EAAApa,IAOpC2B,gBAAAwZ,GACAA,EAAAC,QAAAnZ,KAAAgZ,UAAqCjb,OAAAoa,EAAA,EAAApa,IACrCiC,KAAAiZ,QAAAC,EAAAD,QACAC,EAAAD,QAAAjZ,KAAAgZ,UAEAtZ,SAAApB,GACA0B,KAAA+Y,cAAAza,EAEAoB,SACA,KAAe3B,OAAA+Z,EAAA,EAAA/Z,CAAWiC,KAAA+Y,gBAAA,CAC1B,MAAAF,EAAA7Y,KAAA+Y,cACA/Y,KAAA+Y,cAAiCf,EAAA,EACjCa,EAAA7Y,MAEA,MAAA1B,EAAA0B,KAAA+Y,cACAza,IAAsB0Z,EAAA,IAGtBI,EAAA9Z,GACAA,IAAA0B,KAAA1B,OACA0B,KAAAoZ,YAAA9a,GAGAA,aAAkC4Z,EAAA,EAClClY,KAAAqZ,sBAAA/a,GAEAA,aAAAgb,KACAtZ,KAAAuZ,YAAAjb,GAEAuF,MAAAuJ,QAAA9O,IAEAA,EAAAF,OAAAqa,UACAzY,KAAAwZ,gBAAAlb,GAEAA,IAA2B0Z,EAAA,GAC3BhY,KAAA1B,MAAyB0Z,EAAA,EACzBhY,KAAAyZ,SAIAzZ,KAAAoZ,YAAA9a,IAGAoB,QAAA4B,GACAtB,KAAAiZ,QAAAnX,WAAAsC,aAAA9C,EAAAtB,KAAAiZ,SAEAvZ,YAAApB,GACA0B,KAAA1B,YAGA0B,KAAAyZ,QACAzZ,KAAAmZ,QAAA7a,GACA0B,KAAA1B,SAEAoB,YAAApB,GACA,MAAAgD,EAAAtB,KAAAgZ,UAAA7F,YACA7U,EAAA,MAAAA,EAAA,GAAAA,EACAgD,IAAAtB,KAAAiZ,QAAAzX,iBACA,IAAAF,EAAAY,SAIAZ,EAAA1B,KAAAtB,EAGA0B,KAAAuZ,YAAA3Y,SAAAwU,eAAA,iBAAA9W,IAAAgH,OAAAhH,KAEA0B,KAAA1B,QAEAoB,sBAAApB,GACA,MAAAgC,EAAAN,KAAAwH,QAAAyH,gBAAA3Q,GACA,GAAA0B,KAAA1B,iBAAkC2Z,EAAA,GAClCjY,KAAA1B,MAAAgC,aACAN,KAAA1B,MAAA6L,OAAA7L,EAAAmO,YAEA,CAKA,MAAAiN,EAAA,IAAiCzB,EAAA,EAAgB3X,EAAAhC,EAAAqb,UAAA3Z,KAAAwH,SACjDoS,EAAAF,EAAAG,SACAH,EAAAvP,OAAA7L,EAAAmO,QACAzM,KAAAuZ,YAAAK,GACA5Z,KAAA1B,MAAAob,GAGAha,gBAAApB,GAUAuF,MAAAuJ,QAAApN,KAAA1B,SACA0B,KAAA1B,SACA0B,KAAAyZ,SAIA,MAAAK,EAAA9Z,KAAA1B,MACA,IACAyb,EADAjZ,EAAA,EAEA,UAAAqR,KAAA7T,OAIAqD,KAFAoY,EAAAD,EAAAhZ,MAGAiZ,EAAA,IAAArC,EAAA1X,KAAAwH,SACAsS,EAAApY,KAAAqY,GACA,IAAAjZ,EACAiZ,EAAAC,eAAAha,MAGA+Z,EAAAE,gBAAAH,EAAAhZ,EAAA,KAGAiZ,EAAAG,SAAA/H,GACA4H,EAAAjB,SACAhY,IAEAA,EAAAgZ,EAAA1X,SAEA0X,EAAA1X,OAAAtB,EACAd,KAAAyZ,MAAAM,KAAAd,UAGAvZ,MAAAsZ,EAAAhZ,KAAAgZ,WACQjb,OAAAga,EAAA,EAAAha,CAAWiC,KAAAgZ,UAAAlX,WAAAkX,EAAA7F,YAAAnT,KAAAiZ,gBAUZtB,EACPjY,YAAAc,EAAA5C,EAAA4O,GAGA,GAFAxM,KAAA1B,WAAAqD,EACA3B,KAAA+Y,mBAAApX,EACA,IAAA6K,EAAApK,QAAA,KAAAoK,EAAA,SAAAA,EAAA,GACA,UAAA/M,MAAA,2DAEAO,KAAAQ,UACAR,KAAApC,OACAoC,KAAAwM,UAEA9M,SAAApB,GACA0B,KAAA+Y,cAAAza,EAEAoB,SACA,KAAe3B,OAAA+Z,EAAA,EAAA/Z,CAAWiC,KAAA+Y,gBAAA,CAC1B,MAAAF,EAAA7Y,KAAA+Y,cACA/Y,KAAA+Y,cAAiCf,EAAA,EACjCa,EAAA7Y,MAEA,GAAAA,KAAA+Y,gBAAmCf,EAAA,EACnC,OAEA,MAAA1Z,IAAA0B,KAAA+Y,cACA/Y,KAAA1B,YACAA,EACA0B,KAAAQ,QAAAyI,aAAAjJ,KAAApC,KAAA,IAGAoC,KAAAQ,QAAAwI,gBAAAhJ,KAAApC,OAGAoC,KAAA1B,QACA0B,KAAA+Y,cAA6Bf,EAAA,SAYtBJ,UAAAH,EACP/X,YAAAc,EAAA5C,EAAA4O,GACAzM,MAAAS,EAAA5C,EAAA4O,GACAxM,KAAAma,OACA,IAAA3N,EAAApK,QAAA,KAAAoK,EAAA,SAAAA,EAAA,GAEA9M,cACA,WAAA0a,EAAApa,MAEAN,YACA,OAAAM,KAAAma,OACAna,KAAAU,MAAA,GAAApC,MAEAyB,MAAA2Y,YAEAhZ,SACAM,KAAAqY,QACArY,KAAAqY,OAAA,EAEArY,KAAAQ,QAAAR,KAAApC,MAAAoC,KAAA0Y,oBAIO0B,UAAA7B,GAMP,IAAA8B,GAAA,EACA,IACA,MAAA7S,GACA8S,cAEA,OADAD,GAAA,GACA,IAIApd,OAAAsd,iBAAA,OAAA/S,KAEAvK,OAAAud,oBAAA,OAAAhT,KAEA,MAAAiT,UAEO5C,EACPnY,YAAAc,EAAAka,EAAAlM,GACAxO,KAAA1B,WAAAqD,EACA3B,KAAA+Y,mBAAApX,EACA3B,KAAAQ,UACAR,KAAA0a,YACA1a,KAAAwO,eACAxO,KAAA2a,kBAAA,CAAA9I,GAAA7R,KAAA4a,YAAA/I,IAEAnS,SAAApB,GACA0B,KAAA+Y,cAAAza,EAEAoB,SACA,KAAe3B,OAAA+Z,EAAA,EAAA/Z,CAAWiC,KAAA+Y,gBAAA,CAC1B,MAAAF,EAAA7Y,KAAA+Y,cACA/Y,KAAA+Y,cAAiCf,EAAA,EACjCa,EAAA7Y,MAEA,GAAAA,KAAA+Y,gBAAmCf,EAAA,EACnC,OAEA,MAAA6C,EAAA7a,KAAA+Y,cACA+B,EAAA9a,KAAA1B,MACAyc,EAAA,MAAAF,GACA,MAAAC,IACAD,EAAAP,UAAAQ,EAAAR,SACAO,EAAAG,OAAAF,EAAAE,MACAH,EAAAI,UAAAH,EAAAG,SACAC,EAAA,MAAAL,IAAA,MAAAC,GAAAC,GACAA,GACA/a,KAAAQ,QAAAga,oBAAAxa,KAAA0a,UAAA1a,KAAA2a,kBAAA3a,KAAAmb,UAEAD,IACAlb,KAAAmb,SAAAC,EAAAP,GACA7a,KAAAQ,QAAA+Z,iBAAAva,KAAA0a,UAAA1a,KAAA2a,kBAAA3a,KAAAmb,WAEAnb,KAAA1B,MAAAuc,EACA7a,KAAA+Y,cAA6Bf,EAAA,EAE7BtY,YAAA2b,GACA,mBAAArb,KAAA1B,MACA0B,KAAA1B,MAAAd,KAAAwC,KAAAwO,cAAAxO,KAAAQ,QAAA6a,GAGArb,KAAA1B,MAAAsc,YAAAS,IAOA,MAAAD,EAAAtd,OACAuc,GACSC,QAAAxc,EAAAwc,QAAAW,QAAAnd,EAAAmd,QAAAD,KAAAld,EAAAkd,MACTld,EAAAwc,uCC/aAnd,EAAAQ,EAAA0B,EAAA,sBAAAic,IAAAne,EAAAQ,EAAA0B,EAAA,sBAAAkc,IAiBO,MAAAD,KAIAC,8CC6BA,MAAAC,EAAA,UAvBP9b,2BAAAc,EAAA5C,EAAA4O,EAAAhF,GACA,MAAAiU,EAAA7d,EAAA,GACA,YAAA6d,EACA,IAAiC/a,EAAA,EAAiBF,EAAA5C,EAAA4Y,MAAA,GAAAhK,GAClD9L,MAEA,MAAA+a,GACA,IAAwB/a,EAAA,EAASF,EAAA5C,EAAA4Y,MAAA,GAAAhP,EAAAgH,eAEjC,MAAAiN,GACA,IAAwB/a,EAAA,EAAoBF,EAAA5C,EAAA4Y,MAAA,GAAAhK,IAE5C,IAA6B9L,EAAA,EAAkBF,EAAA5C,EAAA4O,GAC/C9L,MAMAhB,qBAAA8H,GACA,WAAmB9G,EAAA,EAAQ8G,6DC/C3BrK,EAAAQ,EAAA0B,EAAA,sBAAAqc,IAAAve,EAAAQ,EAAA0B,EAAA,sBAAAsc,IAAAxe,EAAAQ,EAAA0B,EAAA,sBAAAkP,EAAA,IAAApR,EAAAQ,EAAA0B,EAAA,sBAAAuP,EAAA,KA8CA3R,OAAA,kBAAAA,OAAA,qBAAAyE,KAAA,SAKO,MAAAga,EAAA,CAAAlP,KAAAC,IAAA,IAAyCmC,EAAA,EAAcpC,EAAAC,EAAA,OAA0B+O,GAKjFG,EAAA,CAAAnP,KAAAC,IAAA,IAAwCmC,EAAA,EAAiBpC,EAAAC,EAAA,MAAyB+O,iCCxDzFre,EAAAQ,EAAA0B,EAAA,sBAAAuc,IAAAze,EAAAQ,EAAA0B,EAAA,sBAAAwc,IAAA1e,EAAAQ,EAAA0B,EAAA,sBAAAyc,IAgBO,MAAAF,OAAAja,IAAA1E,OAAA4N,qBAEPlJ,IADA1E,OAAA4N,eAAAkR,0BAQOF,EAAA,CAAApN,EAAAuN,EAAAC,EAAA,KAAA7I,EAAA,QACP,IAAA9R,EAAA0a,EACA,KAAA1a,IAAA2a,GAAA,CACA,MAAAnd,EAAAwC,EAAA6R,YACA1E,EAAArK,aAAA9C,EAAA8R,GACA9R,EAAAxC,IAOOgd,EAAA,CAAArN,EAAAuK,EAAAC,EAAA,QACP,IAAA3X,EAAA0X,EACA,KAAA1X,IAAA2X,GAAA,CACA,MAAAna,EAAAwC,EAAA6R,YACA1E,EAAA1M,YAAAT,GACAA,EAAAxC,kCC1CA3B,EAAAQ,EAAA0B,EAAA,sBAAA6c,IAAA/e,EAAAQ,EAAA0B,EAAA,sBAAA8c,IAAA,IAAAC,EAAAjf,EAAA,IAAAkf,EAAAlf,EAAA,SAsBO+e,EACPxc,YAAA8M,EAAAC,EAAAlK,EAAAoX,GACA3Z,KAAAwM,UACAxM,KAAAyM,SACAzM,KAAAuC,OACAvC,KAAA2Z,YAKAja,UACA,MAAA4c,EAAAtc,KAAAwM,QAAApK,OAAA,EACA,IAAAsZ,EAAA,GACA,QAAAre,EAAA,EAAuBA,EAAAif,EAAcjf,IAAA,CACrC,MAAA+B,EAAAY,KAAAwM,QAAAnP,GAUA8C,EAA0Bkc,EAAA,EAAsBtF,KAAA3X,GAKhDsc,GAJAvb,EAIAf,EAAAmd,OAAA,EAAApc,EAAAyB,OAAAzB,EAAA,GAAAA,EAAA,GACoBkc,EAAA,EAAoBlc,EAAA,GAAckc,EAAA,EAKtDjd,EAA4Bid,EAAA,EAG5B,OAAAX,EAAA1b,KAAAwM,QAAA8P,GAEA5c,qBACA,MAAAY,EAAAM,SAAA2C,cAAA,YAEA,OADAjD,EAAAkc,UAAAxc,KAAAyc,UACAnc,SAUO6b,UAAAD,EACPxc,UACA,cAAuBK,MAAA0c,kBAEvB/c,qBACA,MAAAY,EAAAP,MAAAwP,qBACA9O,EAAAH,EAAAG,QACAic,EAAAjc,EAAA6D,WAGA,OAFA7D,EAAAsB,YAAA2a,GACQ3e,OAAAqe,EAAA,EAAAre,CAAa0C,EAAAic,EAAApY,YACrBhE,kCCrFAnD,EAAAQ,EAAA0B,EAAA,sBAAA4P,IAAA9R,EAAAQ,EAAA0B,EAAA,sBAAAsd,IAAA,IAAAC,EAAAzf,EAAA,GAkBO,SAAA8R,EAAArF,GACP,IAAAuF,EAAAwN,EAAAze,IAAA0L,EAAArH,WACAZ,IAAAwN,IACAA,GACAC,aAAA,IAAAC,QACAzL,UAAA,IAAA6C,KAEAkW,EAAAvV,IAAAwC,EAAArH,KAAA4M,IAEA,IAAA7O,EAAA6O,EAAAC,aAAAlR,IAAA0L,EAAA4C,SACA,QAAA7K,IAAArB,EACA,OAAAA,EAIA,MAAA1B,EAAAgL,EAAA4C,QAAA8C,KAAoCsN,EAAA,GAWpC,YARAjb,KADArB,EAAA6O,EAAAvL,UAAA1F,IAAAU,MAGA0B,EAAA,IAAuBsc,EAAA,EAAQhT,IAAA2F,sBAE/BJ,EAAAvL,UAAAwD,IAAAxI,EAAA0B,IAGA6O,EAAAC,aAAAhI,IAAAwC,EAAA4C,QAAAlM,GACAA,EAEO,MAAAqc,EAAA,IAAAlW,kCC9CPtJ,EAAAQ,EAAA0B,EAAA,sBAAAwd,IAaA,MAAAC,EAAA,IAAAzN,QA2BOwN,EAAA/e,GACP,mBAAAA,GAAAgf,EAAArb,IAAA3D,iCCzCAX,EAAAQ,EAAA0B,EAAA,sBAAAqB,IAAAvD,EAAAQ,EAAA0B,EAAA,sBAAAkP,IAAA,IAAA6N,EAAAjf,EAAA,IAAA4f,EAAA5f,EAAA,GAAA6f,EAAA7f,EAAA,IAmBO,MAAAuD,EAAA,IAAA2O,QAgBAd,EAAA,CAAA3E,EAAA6E,EAAAjH,KACP,IAAAxG,EAAAN,EAAAxC,IAAAuQ,QACA9M,IAAAX,IACQjD,OAAAqe,EAAA,EAAAre,CAAW0Q,IAAAnK,YACnB5D,EAAA0G,IAAAqH,EAAAzN,EAAA,IAAwC+b,EAAA,EAAQhf,OAAAiR,QAAiBC,gBAAA+N,EAAA,GAAiBxV,KAClFxG,EAAAic,WAAAxO,IAEAzN,EAAAkZ,SAAAtQ,GACA5I,EAAA8X,yCC3CA,SAAAhc,GAAA,IAAAua,EAAAla,EAAA,IAGA+f,EAAA,iBAAArgB,2BAAAqF,UAAArF,QAGAsgB,EAAAD,GAAA,iBAAApgB,SAAAoF,UAAApF,EAMAsgB,EAHAD,KAAAtgB,UAAAqgB,GAGmC7F,EAAA,EAAUgG,QAG7CC,EAAA,WACA,IAEA,IAAAC,EAAAJ,KAAAK,SAAAL,EAAAK,QAAA,QAAAD,MAEA,OAAAA,GAKAH,KAAAK,SAAAL,EAAAK,QAAA,QACG,MAAA5L,KAXH,GAcexS,EAAA,wDC7BflC,EAAAQ,EAAA0B,EAAA,sBAAAqe,IAAA,IAAAtB,EAAAjf,EAAA,IAAAkf,EAAAlf,EAAA,SAsBOugB,EACPhe,YAAAY,EAAAqZ,EAAAnS,GACAxH,KAAA2d,UACA3d,KAAAM,WACAN,KAAA2Z,YACA3Z,KAAAwH,UAEA9H,OAAA+M,GACA,IAAApP,EAAA,EACA,UAAA2D,KAAAhB,KAAA2d,YACAhc,IAAAX,GACAA,EAAAkZ,SAAAzN,EAAApP,IAEAA,IAEA,UAAA2D,KAAAhB,KAAA2d,YACAhc,IAAAX,GACAA,EAAA8X,SAIApZ,SAMA,MAAAka,EAAyBwC,EAAA,EACzBpc,KAAAM,SAAAE,QAAAC,QAAAgE,WAAA,GACA7D,SAAAgd,WAAA5d,KAAAM,SAAAE,QAAAC,SAAA,GACAC,EAAAV,KAAAM,SAAAI,MACA,IAAAI,EAAA,EACAG,EAAA,EACA,MAAA4c,EAAAjE,IAGA,MAAAjZ,EAAAC,SAAAC,iBAAA+Y,EAAA,IAA4G,SAC5G,IAAAtY,EAAAX,EAAAU,WAEA,KAAAP,EAAAJ,EAAA0B,QAAA,OAAAd,GAAA,CACA,MAAAN,EAAAN,EAAAI,GAOA,GAAqB/C,OAAAse,EAAA,EAAAte,CAAoBiD,GAIzC,GAAAC,IAAAD,EAAAY,MAAA,CACA,YAAAZ,EAAAuB,KAAA,CACA,MAAAvB,EAAAhB,KAAA2Z,UAAAmE,qBAAA9d,KAAAwH,SACAxG,EAAA+c,gBAAAzc,EAAAE,iBACAxB,KAAA2d,OAAAjc,KAAAV,QAGAhB,KAAA2d,OAAAjc,QAAA1B,KAAA2Z,UAAAqE,2BAAA1c,EAAAN,EAAApD,KAAAoD,EAAAwL,QAAAxM,KAAAwH,UAEA1G,SAGAG,IACA,aAAAK,EAAA2c,UACAJ,EAAAvc,EAAAb,SAEAa,EAAAX,EAAAU,gBAnBArB,KAAA2d,OAAAjc,UAAAC,GACAb,MA2BA,OALA+c,EAAAjE,GACYwC,EAAA,IACZxb,SAAAsd,UAAAtE,GACA/O,eAAAsT,QAAAvE,IAEAA,mCClGA,SAAA9c,GAAA,IAAAshB,EAAAjhB,EAAA,GAAAkhB,EAAAlhB,EAAA,IAIA+f,EAAA,iBAAArgB,2BAAAqF,UAAArF,QAGAsgB,EAAAD,GAAA,iBAAApgB,SAAAoF,UAAApF,EAMAwhB,EAHAnB,KAAAtgB,UAAAqgB,EAG6BkB,EAAA,EAAIE,YAAA3c,EAsBjC4c,GAnBAD,IAAAC,cAAA5c,IAmBiC0c,EAAA,EAElBhf,EAAA,yDCrCf,SAAAmf,GACA,IAAAC,EAAA,iBAAAD,QAAAzgB,iBAAAygB,EAEenf,EAAA,sCCHf,IAAAqf,EAGAA,EAAA,WACA,OAAA1e,KADA,GAIA,IAEA0e,KAAA,IAAAlH,SAAA,iBACC,MAAA3F,GAED,iBAAA5U,SAAAyhB,EAAAzhB,QAOAH,EAAAD,QAAA6hB,iBCnBA5hB,EAAAD,QAAA,SAAA8hB,GACA,IAAAA,EAAAC,gBAAA,CACA,IAAA9hB,EAAAiB,OAAAY,OAAAggB,GAEA7hB,EAAA+hB,WAAA/hB,EAAA+hB,aACA9gB,OAAAC,eAAAlB,EAAA,UACAmB,YAAA,EACAC,IAAA,WACA,OAAApB,EAAAQ,KAGAS,OAAAC,eAAAlB,EAAA,MACAmB,YAAA,EACAC,IAAA,WACA,OAAApB,EAAAO,KAGAU,OAAAC,eAAAlB,EAAA,WACAmB,YAAA,IAEAnB,EAAA8hB,gBAAA,EAEA,OAAA9hB,sDCtBAA,EAAAD,QAAA,iyCCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAiDsD,EAAA+G,GAE9D/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,yBChBA,IAAAte,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAiDsD,EAAA+G,GAE9D/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,sCCAe1f,EAAA,EAJf,WACA,yCCdA,SAAAvC,GAAA,IAAAshB,EAAAjhB,EAAA,GAGA+f,EAAA,iBAAArgB,2BAAAqF,UAAArF,QAGAsgB,EAAAD,GAAA,iBAAApgB,SAAAoF,UAAApF,EAMAwhB,EAHAnB,KAAAtgB,UAAAqgB,EAG6BkB,EAAA,EAAIE,YAAA3c,EACjCqd,EAAAV,IAAAU,iBAAArd,EAqBetC,EAAA,EAXf,SAAA4f,EAAAC,GACA,GAAAA,EACA,OAAAD,EAAAzI,QAEA,IAAApU,EAAA6c,EAAA7c,OACAwH,EAAAoV,IAAA5c,GAAA,IAAA6c,EAAAvW,YAAAtG,GAGA,OADA6c,EAAAE,KAAAvV,GACAA,wCC/BA9M,EAAAD,QAAA,4VCAAC,EAAAD,QAAA,6VCAAC,EAAAD,QAAA,qvBCAAC,EAAAD,QAAA,ycCAAC,EAAAD,QAAA,kaCAAC,EAAAD,QAAA,iOCAAC,EAAAD,QAAA,4aCAAC,EAAAD,QAAA,+cCAAC,EAAAD,QAAA,2bCAAC,EAAAD,QAAA,6UCAAC,EAAAD,QAAA,+ZCAAC,EAAAD,QAAA,4ZCAAC,EAAAD,QAAA,+ZCAAC,EAAAD,QAAA,gRCAAC,EAAAD,QAAA,6PCAAC,EAAAD,QAAA,uSCAAC,EAAAD,QAAA,+0BCAAC,EAAAD,QAAA,igBCAAC,EAAAD,QAAA,+nBCAAC,EAAAD,QAAA,wcCAAC,EAAAD,QAAA,oKCAAC,EAAAD,QAAA,8MCAAC,EAAAD,QAAA,s5FCAAC,EAAAD,QAAA,4VCAAC,EAAAD,QAAA,+aCAAC,EAAAD,QAAA,6zCCAAC,EAAAD,QAAA,ymBCAAC,EAAAD,QAAA,20FCAAC,EAAAD,QAAA,6lBCAAC,EAAAD,QAAA,q+BCAAC,EAAAD,QAAA,unBCAAM,EAAAQ,EAAA0B,EAAA,sBAAA+f,IAAA,IAAAC,EAAAliB,EAAA,GAAAmiB,EAAAniB,EAAA,GAAAoiB,EAAApiB,EAAA,IAAAqiB,EAAAriB,EAAA2B,EAAAygB,SAIeH,UAA0BC,EAAA,EACzCpX,wBACA,OACAwX,OAAcld,KAAAwC,SACd2a,SAAgBnd,KAAAwC,UAIhBrF,cACAK,QACAC,KAAAyf,OAAA,EACAzf,KAAA0f,SAAA,EAGAhgB,oBACAK,MAAAqO,oBAGA1O,eACAM,KAAAyf,MACAzf,KAAA2f,cAAyBL,EAAA,EAA0Btf,KAAA,UAEnDA,KAAA2f,cAAyBL,EAAA,EAAiBtf,OAI1CN,gBACAM,KAAA0f,QACA1f,KAAA2f,cAAyBL,EAAA,EAA0Btf,KAAA,YAEnDA,KAAA2f,cAAyBL,EAAA,EAAiBtf,OAI1CN,OAAAmf,GACA,OAAA7e,KAAAyf,OAAAzf,KAAA0f,QACaL,EAAA;;YAEDG,EAAAI;;8BAEkB5f,KAAAyf,MAAA;YAClBZ;;;8CAGkC7e,KAAA6f,aAAAhhB,KAAAmB;;;+CAGCA,KAAA8f,cAAAjhB,KAAAmB;;;;;;QAQ/C6e,GAIAO,EAAAhc,OAAqBrF,OAAAshB,EAAA,EAAAthB,EAAKyhB,EAAAI,mBC/D1B9iB,EAAAD,QAAA,yTCAAC,EAAAD,QAAA,2WCAAC,EAAAD,QAAA,+ZCAAC,EAAAD,QAAA,+zBCAAC,EAAAD,QAAA,s6JCAAC,EAAAD,QAAA,iKCAAC,EAAAD,QAAA,iKCAAC,EAAAD,QAAA,wMCAAC,EAAAD,QAAA,q2ECAAC,EAAAD,QAAA,05GCAAC,EAAAD,QAAA,8OCAAC,EAAAD,QAAA,6nBCAAC,EAAAD,QAAA,klBCAAC,EAAAD,QAAA,8YCAAC,EAAAD,QAAA,izBCAA,SAAA2hB,GAAA,IAAAuB,EAAA5iB,EAAA,GAAA6iB,EAAA7iB,EAAA,IAcA,MAAA8iB,EAAA,iBAAAhjB,cAAAuhB,EAEAyB,EAAAC,iBAkCCH,EAAA,EAAG9f,MAAA,0FACJkgB,iBAAAF,EAAAC,iBACEE,QAAAJ,EAAA,IAGFC,EAAAC,iBAAmCF,EAAA,sCCtDnC,IAAAvf,EAActD,EAAQ,IAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAiEsD,EAAA+G,GAE9E/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,izKCcAC,EAAAD,QAAA,SAAA0P,GAEA,IAAA8T,EAAA,oBAAApjB,eAAAojB,SAEA,IAAAA,EACA,UAAA5gB,MAAA,oCAIA,IAAA8M,GAAA,iBAAAA,EACA,OAAAA,EAGA,IAAA+T,EAAAD,EAAAE,SAAA,KAAAF,EAAAzQ,KACA4Q,EAAAF,EAAAD,EAAAI,SAAAtQ,QAAA,iBA2DA,OA/BA5D,EAAA4D,QAAA,+DAAAuQ,EAAAC,GAEA,IAWAC,EAXAC,EAAAF,EACAG,OACA3Q,QAAA,oBAAArS,EAAAijB,GAAwC,OAAAA,IACxC5Q,QAAA,oBAAArS,EAAAijB,GAAwC,OAAAA,IAGxC,0DAAAC,KAAAH,GACAH,GAQAE,EAFA,IAAAC,EAAAvN,QAAA,MAEAuN,EACG,IAAAA,EAAAvN,QAAA,KAEHgN,EAAAO,EAGAL,EAAAK,EAAA1Q,QAAA,YAIA,OAAAtQ,KAAAC,UAAA8gB,GAAA,yBClFA,IAAAngB,EAActD,EAAQ,IAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,khICCA,IAAA4D,EAActD,EAAQ,IAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,soCCCA,IAAA4D,EAActD,EAAQ,IAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,m6BCCA,IAAA4D,EAActD,EAAQ,IAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,wVCCA,IAAA4D,EAActD,EAAQ,IAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,w/DCCA,IAAA4D,EAActD,EAAQ,IAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,gpJCCA,IAAA4D,EAActD,EAAQ,IAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAiDsD,EAAA+G,GAE9D/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,6JCCA,IAAA4D,EAActD,EAAQ,IAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,opECCA,IAAA4D,EAActD,EAAQ,IAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,2pDCCA,IAAA4D,EAActD,EAAQ,IAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,kyDCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,yNCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,6jCCAAC,EAAAD,QAAA,mWCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAiDsD,EAAA+G,GAE9D/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,6XCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAiDsD,EAAA+G,GAE9D/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,oqCCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAiDsD,EAAA+G,GAE9D/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,87HCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAiDsD,EAAA+G,GAE9D/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,yUCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAiDsD,EAAA+G,GAE9D/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,2OCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,8zCCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAiEsD,EAAA+G,GAE9E/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,8tBCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAiEsD,EAAA+G,GAE9E/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,4ICCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAiEsD,EAAA+G,GAE9E/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,wZCAAC,EAAAD,QAAA,8FCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,4GCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,mPCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAiDsD,EAAA+G,GAE9D/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,o/BCCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAiDsD,EAAA+G,GAE9D/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,kqECCA,IAAA4D,EAActD,EAAQ,KAEtB,iBAAAsD,QAA4C3D,EAAAO,EAASoD,EAAA,MAOrD,IAAA+G,GAAesK,WAAA,EAAAgN,KAAA,EAEf7K,eAPAA,EAQAjB,gBAAArR,GAEaxE,EAAQ,EAARA,CAAoEsD,EAAA+G,GAEjF/G,EAAAse,SAAAjiB,EAAAD,QAAA4D,EAAAse,uBCjBAjiB,EAAAD,QAAA,+UCAA,SAAA2hB,GAAA,IAAAa,EAAAliB,EAAA,GAAA8jB,EAAA9jB,EAAA,IAAA+jB,EAAA/jB,EAAA,GAAAgkB,EAAAhkB,EAAA,IAAAikB,EAAAjkB,EAAA2B,EAAAqiB,GAAAE,EAAAlkB,EAAA,IAAAmkB,EAAAnkB,EAAA2B,EAAAuiB,GAAAE,EAAApkB,EAAA,IAAAqkB,EAAArkB,EAAA2B,EAAAyiB,GAAAE,EAAAtkB,EAAA,IAAAukB,EAAAvkB,EAAA2B,EAAA2iB,SAQAE,UAA4BV,EAAA,EAC5BhZ,wBACA,OACA2Z,aAAoBrf,KAAAwC,SACpB8c,gBAAuBtf,KAAAyC,QACvB8c,gBAAuBvf,KAAAyC,QACvB+c,mBAA0Bxf,KAAA+C,QAC1B0c,WAAkBzf,KAAAwC,UAIlBrF,cACAK,QACAC,KAAA4hB,aAAA,EACA5hB,KAAA6hB,eAAA,EACA7hB,KAAA8hB,eAAA,EACA9hB,KAAA+hB,mBAAA,EACA/hB,KAAAua,iBAAA,kBAAAc,IACAA,EAAA4G,2BACA5G,EAAA6G,kBACA7G,EAAA8G,iBACAniB,KAAAoiB,gBAAA/G,KAGArb,KAAAua,iBAAA,YAAAc,IACArb,KAAAgiB,WAAA,EACA3G,EAAA4G,2BACA5G,EAAA6G,kBACA7G,EAAA8G,mBAGAniB,KAAAua,iBAAA,WAAAc,IACArb,KAAAgiB,WAAA,IAIAK,qBACA,WAAAriB,KAAA6hB,eAGAS,oBACA,OAAAtiB,KAAA6hB,iBAAA7hB,KAAA8hB,eAAA,EAGApiB,iBACA6Q,QAAAqR,YAAaA,EAAAG,oBAAAF,iBAAAC,oBAEb9hB,KAAA4hB,cACA5hB,KAAA+hB,oBACA/hB,KAAA6hB,iBACA7hB,KAAA8hB,iBAGApiB,SACA,MAAA6iB,EAAqBlD,EAAA;;mBAEFrf,KAAAqiB,eAAA;kBACD,IAAAriB,KAAAwiB;;UAERzkB,OAAAshB,EAAA,EAAAthB,EAAKqjB,EAAAxB;;MAIf6C,EAAuBpD,EAAA;;mBAEJrf,KAAAsiB,cAAA;kBACD,IAAAtiB,KAAA0iB;;UAER3kB,OAAAshB,EAAA,EAAAthB,EAAKujB,EAAA1B;;MAIf,OAAWP,EAAA;oBACSrf,KAAAgiB,UAAA;UACVhiB,KAAA4hB,YACEvC,EAAA;;;sCAG0BhE,GAAArb,KAAA2iB,cAAAtH;4BACVrb,KAAA+hB;;gBAEZ/hB,KAAAyf,OAAAzf,KAAA0f,QAChB,KACkBL,EAAA;;wBAEMkD,KAAYE;;;kCAGF,IAAAziB,KAAA4iB;;0BAER7kB,OAAAshB,EAAA,EAAAthB,EAAKyjB,EAAA5B;;;;cAK/B;sBACsB5f,KAAA4hB,YAAA;YACV7hB,MAAAwO,OACA8Q,EAAA;;;;;MASZ3f,YACA,IAAAM,KAAAqiB,eAAA,CACA,MAAAQ,EACArE,EAAAvhB,OAAA6lB,QACA9iB,KAAA+iB,cAAAlE,SAAA7e,KAAA6hB,eAAA,GAAAmB,UACAhjB,KAAAgjB,UACA/lB,OAAAgmB,SAAA,EAAAJ,GACA7iB,KAAA2f,cACQuB,EAAA,EACRlhB,KAAA+iB,cACA,SACA/iB,KAAA6hB,eACA7hB,KAAA6hB,eAAA,KAMAniB,cACA,IAAAM,KAAAsiB,cAAA,CACA,MAAAO,EACArE,EAAAvhB,OAAA6lB,SACA9iB,KAAA6hB,eAAA7hB,KAAA8hB,eAAA,EACA9hB,KAAA+iB,cAAAlE,SAAA7e,KAAA6hB,eAAA,GAAAmB,UACAhjB,KAAA+iB,cAAAlE,SAAA7e,KAAA6hB,eAAA,GAAAmB,UACAhjB,KAAA+iB,cAAAlE,SAAA7e,KAAA6hB,eAAA,GAAAqB,cACAjmB,OAAAgmB,SAAA,EAAAJ,GACA7iB,KAAA2f,cACQuB,EAAA,EACRlhB,KAAA+iB,cACA,QACA/iB,KAAA6hB,eACA7hB,KAAA6hB,eAAA,KAMAniB,gBACAM,KAAA2f,cAAuBuB,EAAA,EAAiBlhB,OAGxCN,cAAA2b,GACArb,KAAA2f,cACMuB,EAAA,EACN7F,EAAA9K,OAAA/P,QACAR,KAAA+iB,cACA,SACA/iB,KAAA6hB,kBAMAF,EAAAve,OAAuBrF,OAAAshB,EAAA,EAAAthB,EAAK2jB,EAAA9B,IAwD5B7hB,OAAAshB,EAAA,EAAAthB,CAAa,eAAbA,eAtDuCshB,EAAA,EACvCpX,wBACA,OACAkb,UAAiB5gB,KAAA+C,SAIjB5F,cACAK,QACAC,KAAAojB,SAAA,KACApjB,KAAAojB,SAAA,IAAAC,iBAAA,IAAArjB,KAAAsjB,mBACAtjB,KAAAojB,SAAAG,QAAAvjB,MACA8G,YAAA,EACA0c,WAAA,EACAC,SAAA,IAIA/jB,eACAM,KAAAsjB,kBAGA5jB,kBACAmE,MAAAC,KAAA9D,KAAA6e,UAAAhd,QAAA,CAAA6hB,EAAA9hB,KACA8hB,EAAA/D,cACA,IAAAnP,YAAA,mBACAD,QACAqR,aAAA,EACAG,kBAAA/hB,KAAAmjB,SACAtB,eAAAjgB,EACAkgB,eAAA9hB,KAAA6e,SAAAzc,aAOA1C,SACA,OAAW2f,EAAA;;;8BAGmBrf,KAAA2jB;;oBAEV3jB,KAAAmjB;;;MAMpBzjB,cAAA2b,GACArb,KAAA2f,cAAuBuB,EAAA,EAAiB7F,EAAA9K,OAAA/P,QAAAR,KAAA,WAKxCjC,OAAAshB,EAAA,EAAAthB,CAAa,oBAAbA,CAAa4jB,2DC1ME,IAAAiC,EANf,WACA,gBAAAC,IACAA,EAAAC,QAAA,UCLqBC,EAKrBrkB,YAAAoR,EAAAlT,GAOAoC,KAAA8Q,SAQA9Q,KAAApC,OAQAoC,KAAAgkB,QASAhkB,KAAAikB,KAAcL,IAOd5jB,KAAAkkB,IAAaN,KC5CE,SAASO,IACxB,IAAAC,EAAA,IAEA,QAAA/mB,EAAA,EAAiBA,EAAA,EAAOA,IACxB+mB,GAAA9N,KAAA+N,MAAA,SAAA/N,KAAAC,WAAA+N,SAAA,IAAAC,UAAA,GAGA,OAAAH,ECqBe,IAAAI,GAff9kB,IAAA+kB,GACA,uBAAAA,EACAzkB,KAAAykB,IAAAzkB,KAAA0kB,OAEAD,GAIAE,QAAA,IACAC,KAAA,IACAF,OAAA,EACAG,KAAA,IACAC,QAAA,KC3BA,MAAAC,EAAA3mB,OAAA,eACA4mB,EAAA5mB,OAAA,aAoQe,IAAA6mB,GAxPfvlB,GAAA2b,EAAA6J,EAAA1d,MACAxH,KAAAmlB,SAAAnlB,KAAAqb,EAAA6J,EAAA1d,IAMA9H,KAAA2b,EAAA6J,EAAA1d,GAUAxH,KAAAmlB,SAAAnlB,KAAAqb,EATA,SAAAA,KAAA+J,GAEA/J,EAAA6I,MAGAgB,EAAA1nB,KAAAwC,KAAAqb,KAAA+J,IAIA5d,IAMA9H,IAAA2b,EAAA6J,GACAllB,KAAAqlB,cAAArlB,KAAAqb,EAAA6J,IAMAxlB,SAAA4lB,EAAAjK,EAAA6J,EAAA1d,MACA,IAAA+d,EAAAC,EAgBAxlB,KAAA+kB,KACA/kB,KAAA+kB,OAGA,MAAAU,EAAAzlB,KAAA+kB,GAEAW,EAAAJ,IACAK,EAAAL,GAGA,MAAAM,EAAAF,EAAAJ,IAEAC,EAAAE,EAAAG,MACAL,EAAAE,EAAAG,IACAN,UACAO,gBAIAL,EAAAD,EAAAM,UAAAxK,MACAmK,EAAAD,EAAAM,UAAAxK,OAGAmK,EAAA9jB,KAAAwjB,GAiYA,SAAApU,EAAA4J,GACA,MAAAoL,EAAAC,EAAAjV,GAGA,GAAAgV,EAAApL,GAEA,OASA,IAAA9c,EAAA8c,EAEAsL,EAAA,KAGA,MAAAC,KAKA,UAAAroB,IACAkoB,EAAAloB,IAQAkoB,EAAAloB,IA5CAioB,aACAK,gBA6CAD,EAAAvkB,KAAAokB,EAAAloB,IAGAooB,GACAF,EAAAloB,GAAAsoB,YAAAxkB,KAAAskB,GAGAA,EAAApoB,EAEAA,IAAA2e,OAAA,EAAA3e,EAAAuoB,YAAA,MAGA,QAAAvoB,EAAA,CAKA,UAAA0D,KAAA2kB,EACA3kB,EAAAukB,UAAAC,EAAAloB,GAAAioB,UAAArP,QAIAsP,EAAAloB,GAAAsoB,YAAAxkB,KAAAskB,IAxbAI,CAAAd,EAAAjK,GACA,MAAAgL,EAAAC,EAAAhB,EAAAjK,GACAoJ,EAAmBD,EAAUtmB,IAAAsJ,EAAAid,UAE7B8B,GACArB,WACAT,YAIA,UAAAoB,KAAAQ,EAAA,CAEA,IAAA5G,GAAA,EAEA,QAAApiB,EAAA,EAAmBA,EAAAwoB,EAAAzjB,OAAsB/E,IACzC,GAAAwoB,EAAAxoB,GAAAonB,WAAA,CACAoB,EAAAtS,OAAAlW,EAAA,EAAAkpB,GACA9G,GAAA,EAEA,MAKAA,GACAoG,EAAAnkB,KAAA6kB,KAQA7mB,cAAA4lB,EAAAjK,EAAA6J,GACA,MAAAO,EAAAzlB,KAAA+kB,GACA,IAAAa,EAAAN,GAAAI,EAAAJ,GACA,MAAAC,EAAAE,GAAAG,GAAAH,EAAAG,GACAJ,EAAAD,GAAAlK,GAAAkK,EAAAM,UAAAxK,GAGA,MAAAoK,GAAAH,IAAAC,GAAAlK,IAAAmK,GAKA,GAAAN,EACAsB,EAAAlB,EAAAjK,EAAA6J,QAGA,GAAAM,EAAA,CACA,KAAAN,EAAAM,EAAAiB,OACAD,EAAAlB,EAAAjK,EAAA6J,UAGAK,EAAAM,UAAAxK,QAGA,GAAAkK,EAAA,CACA,IAAAlK,KAAAkK,EAAAM,UACA7lB,KAAAqlB,cAAAC,EAAAjK,UAEAoK,EAAAG,OAGA,CACA,IAAAA,KAAAH,EACAzlB,KAAAqlB,cAAAI,EAAAG,GAAAN,gBAEAtlB,KAAA+kB,KAOArlB,KAAAgnB,KAAAtB,GACA,MAAAuB,EAAAD,aAA2C3C,EAAS2C,EAAA,IAAqB3C,EAAS/jB,KAAA0mB,GAClFrL,EAAAsL,EAAA/oB,KACA,IAAAioB,EAsYA,SAAAe,EAAA9V,EAAA4J,GACA,IAAAW,EAEA,IAAAvK,EAAA+V,WAAAxL,EAAAvK,EAAA+V,QAAAnM,MAAAW,EAAAwK,UAAAzjB,OAGA,OAAAsY,EAAApH,QAAA,QAEAsT,EAAA9V,EAAA4J,EAAA6B,OAAA,EAAA7B,EAAAyL,YAAA,OAGA,KAIA,OAAA9K,EAAAwK,UArZAe,CAAA5mB,KAAAqb,GAMA,GAHAsL,EAAA3C,KAAAtiB,KAAA1B,MAGA6lB,EAAA,CAEA,MAAAiB,GAAAH,KAAAvB,GAOAS,EAAAhiB,MAAAC,KAAA+hB,GAEA,QAAAxoB,EAAA,EAAmBA,EAAAwoB,EAAAzjB,SACnByjB,EAAAxoB,GAAA6nB,SAAA/T,MAAAnR,KAAA8mB,GAGAH,EAAAzC,IAAAJ,gBAEA6C,EAAAzC,IAAAJ,OAEA0C,EAAAxmB,KAAAqb,EAAAwK,EAAAxoB,GAAA6nB,YAIAyB,EAAA1C,KAAAH,QAZyCzmB,MAmBzC,GAAA2C,KAAA+mB,aAAA,CACA,MAAAC,EAAAhnB,KAAA+mB,aAAA7oB,IAAAmd,GACA4L,EAAAjnB,KAAA+mB,aAAA7oB,IAAA,KAEA8oB,GACAE,EAAAF,EAAAL,EAAAvB,GAGA6B,GACAC,EAAAD,EAAAN,EAAAvB,GAIA,OAAAuB,EAAAQ,QAMAznB,YAAAomB,GACA,OACAsB,GAAA,CAAA9B,EAAA+B,KACArnB,KAAA+mB,eACA/mB,KAAA+mB,aAAA,IAAAtgB,KAGA,UAAAiU,KAAAoL,EAAA,CACA,MAAAkB,EAAAhnB,KAAA+mB,aAAA7oB,IAAAwc,GAEAsM,EAGAA,EAAA5f,IAAAke,EAAA+B,GAFArnB,KAAA+mB,aAAA3f,IAAAsT,EAAA,IAAAjU,MAAA6e,EAAA+B,UAYA3nB,eAAA2b,EAAAiK,GACA,GAAAtlB,KAAA+mB,aAIA,GAAA1L,EAEG,GAAAiK,EAEA,CACH,MAAA0B,EAAAhnB,KAAA+mB,aAAA7oB,IAAAmd,GAEA2L,GACAA,EAAAvX,OAAA6V,QALAtlB,KAAA+mB,aAAAtX,OAAA4L,QAFArb,KAAA+mB,aAAAtN,UAkLO,SAAAkM,EAAAL,EAAAjT,GACPiT,EAAAN,KACAM,EAAAN,GAAA3S,GAAgC8R,KAUzB,SAAAuB,EAAAJ,GACP,OAAAA,EAAAN,GAMA,SAAAe,EAAAjV,GAOA,OANAA,EAAA+V,SACA9oB,OAAAC,eAAA8S,EAAA,WACAxS,WAIAwS,EAAA+V,QAiFA,SAAAP,EAAAxV,EAAA4J,GACA,MAAA4M,EAAAvB,EAAAjV,GAAA4J,GAEA,IAAA4M,EACA,SAGA,IAAAC,GAAAD,EAAAzB,WAEA,QAAAxoB,EAAA,EAAiBA,EAAAiqB,EAAApB,YAAA9jB,OAAkC/E,IAAA,CACnD,MAAAmqB,EAAAlB,EAAAxV,EAAAwW,EAAApB,YAAA7oB,IAEAkqB,IAAAE,OAAAD,GAGA,OAAAD,EA8BA,SAAAL,EAAAF,EAAAL,EAAAe,GACA,QAAApC,EAAA1nB,KAAAopB,EAAA,CACAppB,EAEG,mBAAAA,IACHA,IAAA+oB,EAAA/oB,OAFAA,EAAA+oB,EAAA/oB,KAKA,MAAA+pB,EAAA,IAA4B5D,EAAS4C,EAAA7V,OAAAlT,GAErC+pB,EAAA3D,SAAA2C,EAAA3C,MAEAsB,EAAAsC,KAAAD,KAAAD,IASA,SAAAlB,EAAAlB,EAAAjK,EAAA6J,GACA,MAAAmB,EAAAC,EAAAhB,EAAAjK,GAEA,UAAAwK,KAAAQ,EACA,QAAAhpB,EAAA,EAAkBA,EAAAwoB,EAAAzjB,OAAsB/E,IACxCwoB,EAAAxoB,GAAA6nB,cAEAW,EAAAtS,OAAAlW,EAAA,GACAA,gBC9kBe,IAAAwqB,EALf,SAAAvpB,GACA,IAAAiE,SAAAjE,EACA,aAAAA,IAAA,UAAAiE,GAAA,YAAAA,WCtBeulB,EAFFC,EAAA,EAAI3pB,OCAjB4pB,EAAAjqB,OAAAkB,UAGIgpB,EAAcD,EAAA9oB,eAOlBgpB,EAAAF,EAAA1D,SAGA6D,EAAqBL,EAASA,EAAMzpB,iBAAAsD,EA6BrB,IAAAymB,EApBf,SAAA9pB,GACA,IAAA+pB,EAAcJ,EAAczqB,KAAAc,EAAA6pB,GAC5BG,EAAAhqB,EAAA6pB,GAEA,IACA7pB,EAAA6pB,QAAAxmB,EACA,IAAA4mB,GAAA,EACG,MAAA1W,IAEH,IAAAjI,EAAAse,EAAA1qB,KAAAc,GAQA,OAPAiqB,IACAF,EACA/pB,EAAA6pB,GAAAG,SAEAhqB,EAAA6pB,IAGAve,GClCI4e,EAPWzqB,OAAAkB,UAOuBqlB,SAavB,IAAAmE,EAJf,SAAAnqB,GACA,OAASkqB,EAAoBhrB,KAAAc,ICb7BoqB,EAAA,gBACAC,EAAA,qBAGIC,EAAiBd,EAASA,EAAMzpB,iBAAAsD,EAkBrB,IAAAknB,EATf,SAAAvqB,GACA,aAAAA,OACAqD,IAAArD,EAAAqqB,EAAAD,EAEUE,GAAkBA,KAAc7qB,OAAAO,GACpC8pB,EAAS9pB,GACTmqB,EAAcnqB,ICpBpBwqB,EAAA,yBACAC,EAAA,oBACAC,EAAA,6BACAC,EAAA,iBA6Be,IAAAC,EAVf,SAAA5qB,GACA,IAAOupB,EAAQvpB,GACf,SAIA,IAAAgqB,EAAYO,EAAUvqB,GACtB,OAAAgqB,GAAAS,GAAAT,GAAAU,GAAAV,GAAAQ,GAAAR,GAAAW,GC5BeE,EAFEpB,EAAA,EAAI,sBCArBqB,EAAA,WACA,IAAAC,EAAA,SAAAtS,KAA0BoS,GAAcA,EAAUpV,MAASoV,EAAUpV,KAAAuV,UAAA,IACrE,OAAAD,EAAA,iBAAAA,EAAA,GAFA,GAgBe,IAAAE,EAJf,SAAAC,GACA,QAAAJ,QAAAI,GCZAC,EAHAjS,SAAAvY,UAGAqlB,SAqBe,IAAAoF,EAZf,SAAAF,GACA,SAAAA,EAAA,CACA,IACA,OAAAC,EAAAjsB,KAAAgsB,GACK,MAAA3X,IACL,IACA,OAAA2X,EAAA,GACK,MAAA3X,KAEL,UCVA8X,EAAA,8BAGIC,EAASpS,SAAAvY,UACT4qB,EAAW9rB,OAAAkB,UAGX6qB,EAAeF,EAAStF,SAGxByF,EAAiBF,EAAW3qB,eAGhC8qB,EAAAtT,OAAA,IACEoT,EAAYtsB,KAAMusB,GAAc5Z,QAjBlC,sBAiBkC,QAClCA,QAAA,uEAmBe,IAAA8Z,EARf,SAAA3rB,GACA,SAAOupB,EAAQvpB,IAAWirB,EAAQjrB,MAGlB4qB,EAAU5qB,GAAA0rB,EAAAL,GAC1B3I,KAAsB0I,EAAQprB,KC/Bf,IAAAoa,EAJf,SAAA3Z,EAAAH,GACA,aAAAG,OAAA4C,EAAA5C,EAAAH,ICOe,IAAAsrB,EALf,SAAAnrB,EAAAH,GACA,IAAAN,EAAcoa,EAAQ3Z,EAAAH,GACtB,OAASqrB,EAAY3rB,UAAAqD,GCHNwoB,EARf,WACA,IACA,IAAAX,EAAeU,EAASnsB,OAAA,kBAExB,OADAyrB,KAAW,OACXA,EACG,MAAA3X,KALH,GCsBe,IAAAuY,EAbf,SAAArrB,EAAAH,EAAAN,GACA,aAAAM,GAA4BurB,EACxBA,EAAcprB,EAAAH,GAClBiJ,cAAA,EACA5J,YAAA,EACAK,QACA+rB,UAAA,IAGAtrB,EAAAH,GAAAN,GCgBe,IAAAgsB,EAJf,SAAAhsB,EAAAisB,GACA,OAAAjsB,IAAAisB,GAAAjsB,MAAAisB,MC1BIC,EAHWzsB,OAAAkB,UAGiBC,eAoBjB,IAAAurB,GARf,SAAA1rB,EAAAH,EAAAN,GACA,IAAAosB,EAAA3rB,EAAAH,GACQ4rB,EAAchtB,KAAAuB,EAAAH,IAAsB0rB,EAAEI,EAAApsB,UAC9CqD,IAAArD,GAAAM,KAAAG,IACIqrB,EAAerrB,EAAAH,EAAAN,ICgBJ,IAAAqsB,GA1Bf,SAAA7Z,EAAA9I,EAAAjJ,EAAA6rB,GACA,IAAAC,GAAA9rB,EACAA,UAKA,IAHA,IAAA6C,GAAA,EACAQ,EAAA4F,EAAA5F,SAEAR,EAAAQ,GAAA,CACA,IAAAxD,EAAAoJ,EAAApG,GAEAkpB,EAAAF,EACAA,EAAA7rB,EAAAH,GAAAkS,EAAAlS,KAAAG,EAAA+R,QACAnP,OAEAA,IAAAmpB,IACAA,EAAAha,EAAAlS,IAEAisB,EACMT,EAAerrB,EAAAH,EAAAksB,GAEfL,GAAW1rB,EAAAH,EAAAksB,GAGjB,OAAA/rB,GChBe,IAAAgsB,GAJf,SAAAzsB,GACA,OAAAA,GCGe,IAAA0sB,GAVf,SAAAxB,EAAAyB,EAAA7F,GACA,OAAAA,EAAAhjB,QACA,cAAAonB,EAAAhsB,KAAAytB,GACA,cAAAzB,EAAAhsB,KAAAytB,EAAA7F,EAAA,IACA,cAAAoE,EAAAhsB,KAAAytB,EAAA7F,EAAA,GAAAA,EAAA,IACA,cAAAoE,EAAAhsB,KAAAytB,EAAA7F,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEA,OAAAoE,EAAArY,MAAA8Z,EAAA7F,ICdA8F,GAAA5U,KAAA6U,IAgCe,IAAAC,GArBf,SAAA5B,EAAAxN,EAAA/H,GAEA,OADA+H,EAAAkP,QAAAvpB,IAAAqa,EAAAwN,EAAApnB,OAAA,EAAA4Z,EAAA,GACA,WAMA,IALA,IAAAoJ,EAAAhU,UACAxP,GAAA,EACAQ,EAAA8oB,GAAA9F,EAAAhjB,OAAA4Z,EAAA,GACAqP,EAAAxnB,MAAAzB,KAEAR,EAAAQ,GACAipB,EAAAzpB,GAAAwjB,EAAApJ,EAAApa,GAEAA,GAAA,EAEA,IADA,IAAA0pB,EAAAznB,MAAAmY,EAAA,KACApa,EAAAoa,GACAsP,EAAA1pB,GAAAwjB,EAAAxjB,GAGA,OADA0pB,EAAAtP,GAAA/H,EAAAoX,GACWL,GAAKxB,EAAAxpB,KAAAsrB,KCND,IAAAC,GANf,SAAAjtB,GACA,kBACA,OAAAA,ICAektB,GATQrB,EAAyB,SAAAX,EAAAiC,GAChD,OAAStB,EAAcX,EAAA,YACvB3hB,cAAA,EACA5J,YAAA,EACAK,MAAaitB,GAAQE,GACrBpB,UAAA,KALwCU,GCXxCW,GAAA,IACAC,GAAA,GAGAC,GAAAC,KAAAC,IA+Be,ICvBAC,GDGf,SAAAvC,GACA,IAAAvnB,EAAA,EACA+pB,EAAA,EAEA,kBACA,IAAAC,EAAAL,KACAM,EAAAP,IAAAM,EAAAD,GAGA,GADAA,EAAAC,EACAC,EAAA,GACA,KAAAjqB,GAAAypB,GACA,OAAAta,UAAA,QAGAnP,EAAA,EAEA,OAAAunB,EAAArY,WAAAxP,EAAAyP,YCrBkB+a,CAASX,ICKZ,IAAAY,GAJf,SAAA5C,EAAAxN,GACA,OAAS+P,GAAYX,GAAQ5B,EAAAxN,EAAc+O,IAAQvB,EAAA,KCZnD6C,GAAA,iBAiCe,IAAAC,GALf,SAAAhuB,GACA,uBAAAA,GACAA,GAAA,GAAAA,EAAA,MAAAA,GAAA+tB,ICCe,IAAAE,GAJf,SAAAjuB,GACA,aAAAA,GAA0BguB,GAAQhuB,EAAA8D,UAAmB8mB,EAAU5qB,IC5B3DkuB,GAAgB,iBAGpBC,GAAA,mBAoBe,IAAAC,GAVf,SAAApuB,EAAA8D,GACA,IAAAG,SAAAjE,EAGA,SAFA8D,EAAA,MAAAA,EAA4BoqB,GAAgBpqB,KAG5C,UAAAG,GACA,UAAAA,GAAAkqB,GAAAzL,KAAA1iB,KACAA,GAAA,GAAAA,EAAA,MAAAA,EAAA8D,GCQe,IAAAuqB,GAdf,SAAAruB,EAAAsD,EAAA7C,GACA,IAAO8oB,EAAQ9oB,GACf,SAEA,IAAAwD,SAAAX,EACA,mBAAAW,EACWgqB,GAAWxtB,IAAY2tB,GAAO9qB,EAAA7C,EAAAqD,QACzC,UAAAG,GAAAX,KAAA7C,IAEWurB,EAAEvrB,EAAA6C,GAAAtD,ICYE,IAAAsuB,GA1Bf,SAAAC,GACA,OAAST,GAAQ,SAAArtB,EAAA+tB,GACjB,IAAAlrB,GAAA,EACAQ,EAAA0qB,EAAA1qB,OACAwoB,EAAAxoB,EAAA,EAAA0qB,EAAA1qB,EAAA,QAAAT,EACAorB,EAAA3qB,EAAA,EAAA0qB,EAAA,QAAAnrB,EAWA,IATAipB,EAAAiC,EAAAzqB,OAAA,sBAAAwoB,GACAxoB,IAAAwoB,QACAjpB,EAEAorB,GAAiBJ,GAAcG,EAAA,GAAAA,EAAA,GAAAC,KAC/BnC,EAAAxoB,EAAA,OAAAT,EAAAipB,EACAxoB,EAAA,GAEArD,EAAAhB,OAAAgB,KACA6C,EAAAQ,GAAA,CACA,IAAA0O,EAAAgc,EAAAlrB,GACAkP,GACA+b,EAAA9tB,EAAA+R,EAAAlP,EAAAgpB,GAGA,OAAA7rB,KCbe,IAAAiuB,GAVf,SAAAluB,EAAAmuB,GAIA,IAHA,IAAArrB,GAAA,EACAgI,EAAA/F,MAAA/E,KAEA8C,EAAA9C,GACA8K,EAAAhI,GAAAqrB,EAAArrB,GAEA,OAAAgI,GCYe,IAAAsjB,GAJf,SAAA5uB,GACA,aAAAA,GAAA,iBAAAA,GCrBA6uB,GAAA,qBAae,IAAAC,GAJf,SAAA9uB,GACA,OAAS4uB,GAAY5uB,IAAWuqB,EAAUvqB,IAAA6uB,ICVtCE,GAAWtvB,OAAAkB,UAGXquB,GAAiBD,GAAWnuB,eAGhCquB,GAA2BF,GAAWE,qBAyBvBC,GALGJ,GAAe,WAAa,OAAAhc,UAAb,IAAuCgc,GAAe,SAAA9uB,GACvF,OAAS4uB,GAAY5uB,IAAWgvB,GAAc9vB,KAAAc,EAAA,YAC9CivB,GAAA/vB,KAAAc,EAAA,WCPemvB,GAFf5pB,MAAAuJ,iBCSAsgB,MACAA,GAZA,yBAYAA,GAXA,yBAYAA,GAXA,sBAWAA,GAVA,uBAWAA,GAVA,uBAUAA,GATA,uBAUAA,GATA,8BASAA,GARA,wBASAA,GARA,yBAQA,EACAA,GAjCW,sBAiCWA,GAhCtB,kBAiCAA,GApBA,wBAoBAA,GAhCA,oBAiCAA,GApBA,qBAoBAA,GAhCA,iBAiCAA,GAhCA,kBAgCAA,GA/BW,qBAgCXA,GA/BA,gBA+BAA,GA9BA,mBA+BAA,GA9BA,mBA8BAA,GA7BA,mBA8BAA,GA7BA,gBA6BAA,GA5BA,mBA6BAA,GA5BA,qBA4BA,EAce,IAAAC,GALf,SAAArvB,GACA,OAAS4uB,GAAY5uB,IACjBguB,GAAQhuB,EAAA8D,WAAAsrB,GAAmC7E,EAAUvqB,KC3C1C,IAAAsvB,GANf,SAAApE,GACA,gBAAAlrB,GACA,OAAAkrB,EAAAlrB,cCJAuvB,GAAuBC,GAAA,GAAYA,GAAA,EAAQC,aAqB5BC,GAFfH,GAAsCD,GAASC,IAAqBF,GCbhEM,GAHWlwB,OAAAkB,UAGiBC,eAqCjB,IAAAgvB,GA3Bf,SAAA5vB,EAAA6vB,GACA,IAAAC,EAAcX,GAAOnvB,GACrB+vB,GAAAD,GAAwBZ,GAAWlvB,GACnCgwB,GAAAF,IAAAC,GAAmCtwB,OAAAwgB,GAAA,EAAAxgB,CAAQO,GAC3CiwB,GAAAH,IAAAC,IAAAC,GAA8CN,GAAY1vB,GAC1DkwB,EAAAJ,GAAAC,GAAAC,GAAAC,EACA3kB,EAAA4kB,EAA6BxB,GAAS1uB,EAAA8D,OAAAkD,WACtClD,EAAAwH,EAAAxH,OAEA,QAAAxD,KAAAN,GACA6vB,IAAsBF,GAAczwB,KAAAc,EAAAM,IACpC4vB,IAEA,UAAA5vB,GAEA0vB,IAAA,UAAA1vB,GAAA,UAAAA,IAEA2vB,IAAA,UAAA3vB,GAAA,cAAAA,GAAA,cAAAA,IAEW8tB,GAAO9tB,EAAAwD,KAElBwH,EAAAlI,KAAA9C,GAGA,OAAAgL,GC5CI6kB,GAAW1wB,OAAAkB,UAgBA,IAAAyvB,GAPf,SAAApwB,GACA,IAAAqwB,EAAArwB,KAAAoK,YAGA,OAAApK,KAFA,mBAAAqwB,KAAA1vB,WAA+DwvB,KCOhD,IAAAG,GAVf,SAAA7vB,GACA,IAAA6K,KACA,SAAA7K,EACA,QAAAH,KAAAb,OAAAgB,GACA6K,EAAAlI,KAAA9C,GAGA,OAAAgL,GCRIilB,GAHW9wB,OAAAkB,UAGiBC,eAwBjB,IAAA4vB,GAff,SAAA/vB,GACA,IAAO8oB,EAAQ9oB,GACf,OAAW6vB,GAAY7vB,GAEvB,IAAAgwB,EAAgBL,GAAW3vB,GAC3B6K,KAEA,QAAAhL,KAAAG,GACA,eAAAH,IAAAmwB,GAA+CF,GAAcrxB,KAAAuB,EAAAH,KAC7DgL,EAAAlI,KAAA9C,GAGA,OAAAgL,GCEe,IAAAolB,GAJf,SAAejwB,GACf,OAASwtB,GAAWxtB,GAAWmvB,GAAanvB,GAAA,GAAiB+vB,GAAU/vB,ICWxDkwB,GAJArC,GAAc,SAAA7tB,EAAA+R,GAC3B6Z,GAAU7Z,EAASke,GAAMle,GAAA/R,KCvB3B,MAAAmwB,GAAA9wB,OAAA,wBACA+wB,GAAA/wB,OAAA,oBACAgxB,GAAAhxB,OAAA,mBAeAixB,IAIA3vB,IAAA9B,EAAAU,GAEA,GAAOupB,EAAQjqB,GAKf,YAJAG,OAAAgW,KAAAnW,GAAAiE,QAAA7C,IACAgB,KAAAoH,IAAApI,EAAApB,EAAAoB,KACIgB,MAKJsvB,GAAAtvB,MAEA,MAAAiI,EAAAjI,KAAAkvB,IAEA,GAAAtxB,KAAAoC,OAAAiI,EAAAxG,IAAA7D,GAgBA,UAAa2xB,EAAA,EAAa,yEAG1BxxB,OAAAC,eAAAgC,KAAApC,GACAK,YAAA,EACA4J,cAAA,EAEA3J,IAAA,IACA+J,EAAA/J,IAAAN,GAGA8B,IAAApB,GACA,MAAAqJ,EAAAM,EAAA/J,IAAAN,GAKA,IAAAktB,EAAA9qB,KAAA4nB,KAAA,OAAAhqB,IAAAU,EAAAqJ,QAEAhG,IAAAmpB,IACAA,EAAAxsB,GAKAqJ,IAAAmjB,GAAA7iB,EAAAxG,IAAA7D,KACAqK,EAAAb,IAAAxJ,EAAAktB,GACA9qB,KAAA4nB,KAAA,UAAAhqB,IAAAktB,EAAAnjB,OAKA3H,KAAApC,GAAAU,GAMAoB,QAAA8vB,GACA,IAAAA,EAAAptB,SAAAqtB,GAAAD,GAMA,UAAaD,EAAA,EAAa,qEAG1B,OAAAvsB,IAAAwsB,GAAAjlB,OAAAilB,EAAAptB,OAMA,UAAamtB,EAAA,EAAa,oEAG1BD,GAAAtvB,MAEA,MAAA0vB,EAAA1vB,KAAAovB,IAEAI,EAAA3tB,QAAA8tB,IACA,GAAAD,EAAAjuB,IAAAkuB,GAMA,UAAcJ,EAAA,EAAa,2EAI3B,MAAAK,EAAA,IAAAnpB,IAsBA,OAhBA+oB,EAAA3tB,QAAA+d,IACA,MAAAnC,GAAoBze,SAAA4gB,EAAAwH,OAEpBsI,EAAAtoB,IAAAwY,EAAAnC,GACAmS,EAAAxoB,IAAAwY,EAAAnC,MAaA2J,GAAAyI,GACAC,OAAAC,GAEAC,YAAAhwB,KACAiwB,gBAAAT,EACAU,OACAC,UAAAP,IAOAlwB,UAAA0wB,GAEA,KAAAlB,MAAAlvB,MACA,OAGA,MAAA0vB,EAAA1vB,KAAAovB,IACAiB,EAAArwB,KAAAmvB,IAEA,GAAAiB,EAAAhuB,OAAA,CACA,IAAAqtB,GAAAW,GAMA,UAAcb,EAAA,EAAa,mEAG3Ba,EAAAvuB,QAAA8tB,IACA,MAAAlS,EAAAiS,EAAAxxB,IAAAyxB,GAGA,IAAAlS,EACA,OAGA,IAAA6S,EAAAC,EAAAC,EAAAC,EAEAhT,EAAA2J,GAAAvlB,QAAAulB,IAEAkJ,EAAAlJ,EAAA,GACAmJ,EAAAnJ,EAAA,GACAoJ,EAAAH,EAAAnyB,IAAAoyB,IACAG,EAAAD,EAAAD,IAEA9gB,OAAAgO,GAEAgT,EAAAlmB,aACAimB,EAAAD,GAGAxyB,OAAAgW,KAAAyc,GAAApuB,SACAiuB,EAAA5gB,OAAA6gB,GACAtwB,KAAAqlB,cAAAiL,EAAA,aAIAZ,EAAAjgB,OAAAkgB,UAGAU,EAAAxuB,QAAA,CAAA+tB,EAAAc,KACA1wB,KAAAqlB,cAAAqL,EAAA,YAGAL,EAAA5W,QACAiW,EAAAjW,SAOA/Z,SAAAixB,GACA,MAAAC,EAAA5wB,KAAA2wB,GAEA,IAAAC,EAQA,UAAarB,EAAA,EACb,mFACKxwB,OAAAiB,KAAA2wB,eAIL3wB,KAAA6wB,GAAAF,EAAA,CAAAG,EAAA1L,KACA0L,EAAA3J,OAAAyJ,EAAAzf,MAAAnR,KAAAolB,KAGAplB,KAAA2wB,GAAA,YAAAvL,GACA,OAAAplB,KAAA4nB,KAAA+I,EAAAvL,MAKA6J,GAAMI,GAAmBpK,GAEV,IAAA8L,GAAA,GAMf,SAAAzB,GAAA0B,GAEA9B,MAAA8B,IAQAjzB,OAAAC,eAAAgzB,EAAA9B,IACA5wB,MAAA,IAAAmI,MAgDA1I,OAAAC,eAAAgzB,EAAA7B,IACA7wB,MAAA,IAAAmI,MA+BA1I,OAAAC,eAAAgzB,EAAA5B,IACA9wB,MAAA,IAAAmI,OAQA,SAAAopB,MAAAzK,GACA,MAAA6L,EA4HA,YAAA7L,GAEA,IAAAA,EAAAhjB,OAMA,UAAYmtB,EAAA,EAAa,sEAGzB,MAAA2B,GAAiB9J,OACjB,IAAA+J,EAEA,mBAAA/L,IAAAhjB,OAAA,KACA8uB,EAAAhM,SAAAE,EAAAqB,OAcA,OAXArB,EAAAvjB,QAAA+d,IACA,oBAAAA,EACAuR,EAAAlpB,WAAAvG,KAAAke,OACG,qBAAAA,EAIH,UAAa2P,EAAA,EAAa,sEAH1B4B,GAAqBH,WAAApR,EAAA3X,eACrBipB,EAAA9J,GAAA1lB,KAAAyvB,MAMAD,EAzJAE,IAAAhM,GACAiM,EAAAxtB,MAAAC,KAAA9D,KAAAmwB,UAAApc,QACAud,EAAAD,EAAAjvB,OAGA,IAAA6uB,EAAA/L,UAAA+L,EAAA7J,GAAAhlB,OAAA,EAMA,UAAYmtB,EAAA,EAAa,6FAIzB,GAAA+B,EAAA,GAAAL,EAAA/L,SAMA,UAAYqK,EAAA,EAAa,yGAGzB0B,EAAA7J,GAAAvlB,QAAAulB,IAEA,GAAAA,EAAAnf,WAAA7F,QAAAglB,EAAAnf,WAAA7F,SAAAkvB,EAMA,UAAa/B,EAAA,EAAa,8EAK1BnI,EAAAnf,WAAA7F,SACAglB,EAAAnf,WAAAjI,KAAAiwB,mBAIAjwB,KAAAkwB,IAAAe,EAAA7J,GAGA6J,EAAA/L,WACAllB,KAAAmwB,UAAAjyB,IAAAmzB,EAAA,IAAAnM,SAAA+L,EAAA/L,UA+NA,SAAA8L,EAAAO,GACAA,EAAA1vB,QAAAulB,IACA,MAAAiJ,EAAAW,EAAA7B,IACA,IAAAS,EAIAS,EAAAnyB,IAAAkpB,EAAA4J,aACAA,EAAA7L,SAAAiC,EAAA4J,WAAA,UAAAF,EAAAnB,MACAC,EAAAS,EAAAnyB,IAAAkpB,EAAA4J,YAAArB,KAKAC,EAAA/tB,QAAA4b,IACA+T,GAAAR,EAAAvT,EAAAze,gBA3OAyyB,CAAAzxB,KAAAgwB,YAAAhwB,KAAAkwB,KAwKA,SAAAwB,GACA,IAAAnB,EAEAmB,EAAAvB,UAAAtuB,QAAA,CAAA4b,EAAAkS,KAIA+B,EAAAxB,IAAAruB,QAAAulB,IACAmJ,EAAAnJ,EAAAnf,WAAAwV,EAAAyH,SAAA,EAAAwM,EAAAzB,gBAAA3c,QAAAqc,IAEAlS,EAAA2J,GAAA1lB,MAAA0lB,EAAA4J,WAAAT,IAjEA,SAAAS,EAAAvT,EAAA6S,EAAAqB,GACA,MAAAtB,EAAAW,EAAA7B,IACAyC,EAAAvB,EAAAnyB,IAAAoyB,GACAV,EAAAgC,MAEAhC,EAAA+B,KACA/B,EAAA+B,GAAA,IAAA3uB,KAIA4sB,EAAA+B,GAAAxuB,IAAAsa,GAEAmU,GACAvB,EAAAjpB,IAAAkpB,EAAAV,GAqDAiC,CAAAH,EAAA1B,YAAAvS,EAAA2J,EAAA4J,WAAAT,OAhLAuB,CAAA9xB,MAGAA,KAAAiwB,gBAAApuB,QAAA8tB,IACA6B,GAAAxxB,KAAAgwB,YAAAL,KAUA,SAAAI,GAAAgC,EAAA1sB,EAAA6f,GACA,GAAAllB,KAAAmwB,UAAA5lB,KAAA,EAMA,UAAYglB,EAAA,EAAa,2FAGzBvvB,KAAAonB,MAcA,SAAA2K,EAAA1sB,GACA,MAAA2sB,EAAAD,EAAAhkB,IAAAijB,MAAA3rB,IAGA,OAAAxB,MAAA5E,UAAAwoB,OAAAtW,SAAA6gB,GAhBAC,CAAAF,EAAA1sB,GAEA6f,GAsBA,SAAAuK,GAAAyC,GACA,OAAAA,EAAAC,MAAAvS,GAAA,iBAAAA,GAwIA,SAAA4R,GAAAR,EAAArB,GACA,MACAlS,EADAuT,EAAA5B,IACAlxB,IAAAyxB,GACA,IAAAyC,EAQAA,EADA3U,EAAAyH,SACAzH,EAAAyH,SAAA/T,MAAA6f,EAAAvT,EAAA2J,GAAArZ,IAAAqZ,KAAA,GAAAA,EAAA,OAEAgL,EAAA3U,EAAA2J,GAAA,IACA,GAAAgL,EAAA,IAGApB,EAAA9xB,eAAAywB,GACAqB,EAAArB,GAAAyC,EAEApB,EAAA5pB,IAAAuoB,EAAAyC,GCtlBe,SAAAC,GAAAC,KAAAC,GACfA,EAAA1wB,QAAA2wB,IACAz0B,OAAAoK,oBAAAqqB,GAAA/K,OAAA1pB,OAAAqK,sBAAAoqB,IACA3wB,QAAAjD,IACA,GAAAA,KAAA0zB,EAAArzB,UACA,OAGA,MAAAwzB,EAAA10B,OAAA20B,yBAAAF,EAAA5zB,GACA6zB,EAAAx0B,YAAA,EAEAF,OAAAC,eAAAs0B,EAAArzB,UAAAL,EAAA6zB,aCzBeE,GAIfjzB,YAAAkzB,GAiBA5yB,KAAA4yB,SAMAlzB,UACAM,KAAAqlB,iBAIAgN,GAAGM,GAAU5B,ICpCE,IAAA8B,GANf,SAAArJ,EAAAvV,GACA,gBAAA6e,GACA,OAAAtJ,EAAAvV,EAAA6e,MCLeC,GAFIF,GAAO90B,OAAAuJ,eAAAvJ,QCEtBi1B,GAAS,kBAGTC,GAASzb,SAAAvY,UACTi0B,GAAWn1B,OAAAkB,UAGXk0B,GAAeF,GAAS3O,SAGxB8O,GAAiBF,GAAWh0B,eAGhCm0B,GAAuBF,GAAY31B,KAAAO,QA2CpB,IAAAu1B,GAbf,SAAAh1B,GACA,IAAO4uB,GAAY5uB,IAAWuqB,EAAUvqB,IAAW00B,GACnD,SAEA,IAAAznB,EAAcwnB,GAAYz0B,GAC1B,UAAAiN,EACA,SAEA,IAAAojB,EAAayE,GAAc51B,KAAA+N,EAAA,gBAAAA,EAAA7C,YAC3B,yBAAAimB,mBACIwE,GAAY31B,KAAAmxB,IAAA0E,UC5CKE,GAOrB7zB,YAAA8zB,EAAAC,GAOAzzB,KAAA0zB,WAGAD,GACAzzB,KAAAjD,OAAA02B,GAIAD,GACAxzB,KAAA2zB,mBAAA3zB,KAAA0zB,QAAAF,GAyCA9zB,IAAA9B,EAAAU,GACA0B,KAAA4zB,aAAA5zB,KAAA0zB,QAAA91B,EAAAU,GAcAoB,OAAA9B,EAAAU,GAGA0B,KAAA4zB,aAAA5zB,KAAA0zB,QAAA91B,EAAAU,GAFA,GAiBAoB,IAAA9B,GACA,OAAAoC,KAAA6zB,eAAA7zB,KAAA0zB,QAAA91B,GAaA8B,aAAA0L,EAAAxN,EAAAU,EAAAw1B,GAAA,GAEA,GAAOR,GAAa11B,GAGpB,YAFAoC,KAAA2zB,mBAAAvoB,EAAAxN,EAAAk2B,GAMA,MAAApzB,EAAA9C,EAAAsZ,MAAA,KAGAtZ,EAAA8C,EAAA+lB,MAGA,UAAAzlB,KAAAN,EAES4yB,GAAaloB,EAAApK,MACtBoK,EAAApK,OAIAoK,IAAApK,GAIA,GAAOsyB,GAAah1B,GAWpB,OATSg1B,GAAaloB,EAAAxN,MACtBwN,EAAAxN,OAGAwN,IAAAxN,QAGAoC,KAAA2zB,mBAAAvoB,EAAA9M,EAAAw1B,GAMAA,QAAA,IAAA1oB,EAAAxN,KAIAwN,EAAAxN,GAAAU,GAWAoB,eAAAoR,EAAAlT,GAEA,MAAA8C,EAAA9C,EAAAsZ,MAAA,KAGAtZ,EAAA8C,EAAA+lB,MAGA,UAAAzlB,KAAAN,EAAA,CACA,IAAS4yB,GAAaxiB,EAAA9P,IAAA,CACtB8P,EAAA,KACA,MAIAA,IAAA9P,GAIA,OAAA8P,IAAAlT,QAAA+D,EAWAjC,mBAAA0L,EAAA2oB,EAAAD,GACA/1B,OAAAgW,KAAAggB,GAAAlyB,QAAAjD,IACAoB,KAAA4zB,aAAAxoB,EAAAxM,EAAAm1B,EAAAn1B,GAAAk1B,MC5Le,SAAAE,GAAApU,EAAAqU,GACf,MAAAC,EAAA5d,KAAA6d,IAAAvU,EAAAxd,OAAA6xB,EAAA7xB,QAEA,QAAA/E,EAAA,EAAiBA,EAAA62B,EAAY72B,IAC7B,GAAAuiB,EAAAviB,IAAA42B,EAAA52B,GAEA,OAAAA,EAKA,OAAAuiB,EAAAxd,QAAA6xB,EAAA7xB,OAEA,OACEwd,EAAAxd,OAAA6xB,EAAA7xB,OAEF,SAGA,YChCe,IAAAgyB,GALf,WACAp0B,KAAAq0B,YACAr0B,KAAAuK,KAAA,GCWe,IAAA+pB,GAVf,SAAAjJ,EAAAzsB,GAEA,IADA,IAAAwD,EAAAipB,EAAAjpB,OACAA,KACA,GAAQkoB,EAAEe,EAAAjpB,GAAA,GAAAxD,GACV,OAAAwD,EAGA,UCXAmR,GAHA1P,MAAA5E,UAGAsU,OA4Be,IAAAghB,GAjBf,SAAA31B,GACA,IAAAgB,EAAAI,KAAAq0B,SACAzyB,EAAc0yB,GAAY10B,EAAAhB,GAE1B,QAAAgD,EAAA,IAIAA,GADAhC,EAAAwC,OAAA,EAEAxC,EAAA6mB,MAEAlT,GAAA/V,KAAAoC,EAAAgC,EAAA,KAEA5B,KAAAuK,KACA,KCbe,IAAAiqB,GAPf,SAAA51B,GACA,IAAAgB,EAAAI,KAAAq0B,SACAzyB,EAAc0yB,GAAY10B,EAAAhB,GAE1B,OAAAgD,EAAA,OAAAD,EAAA/B,EAAAgC,GAAA,ICAe,IAAA6yB,GAJf,SAAA71B,GACA,OAAS01B,GAAYt0B,KAAAq0B,SAAAz1B,IAAA,GCaN,IAAA81B,GAbf,SAAA91B,EAAAN,GACA,IAAAsB,EAAAI,KAAAq0B,SACAzyB,EAAc0yB,GAAY10B,EAAAhB,GAQ1B,OANAgD,EAAA,KACA5B,KAAAuK,KACA3K,EAAA8B,MAAA9C,EAAAN,KAEAsB,EAAAgC,GAAA,GAAAtD,EAEA0B,MCTA,SAAA20B,GAAAC,GACA,IAAAhzB,GAAA,EACAQ,EAAA,MAAAwyB,EAAA,EAAAA,EAAAxyB,OAGA,IADApC,KAAAyZ,UACA7X,EAAAQ,GAAA,CACA,IAAAyyB,EAAAD,EAAAhzB,GACA5B,KAAAoH,IAAAytB,EAAA,GAAAA,EAAA,KAKAF,GAAA11B,UAAAwa,MAA4B2a,GAC5BO,GAAA11B,UAAA,OAAgCs1B,GAChCI,GAAA11B,UAAAf,IAA0Bs2B,GAC1BG,GAAA11B,UAAAwC,IAA0BgzB,GAC1BE,GAAA11B,UAAAmI,IAA0BstB,GAEX,IAAAI,GAAA,GCjBA,IAAAC,GALf,WACA/0B,KAAAq0B,SAAA,IAAsBS,GACtB90B,KAAAuK,KAAA,GCMe,IAAAyqB,GARf,SAAAp2B,GACA,IAAAgB,EAAAI,KAAAq0B,SACAzqB,EAAAhK,EAAA,OAAAhB,GAGA,OADAoB,KAAAuK,KAAA3K,EAAA2K,KACAX,GCDe,IAAAqrB,GAJf,SAAAr2B,GACA,OAAAoB,KAAAq0B,SAAAn2B,IAAAU,ICGe,IAAAs2B,GAJf,SAAAt2B,GACA,OAAAoB,KAAAq0B,SAAA5yB,IAAA7C,ICJeu2B,GAFLjL,EAAUnC,EAAA,EAAI,OCCTqN,GAFIlL,EAASnsB,OAAA,UCWb,IAAAs3B,GALf,WACAr1B,KAAAq0B,SAAkBe,GAAeA,GAAY,SAC7Cp1B,KAAAuK,KAAA,GCKe,IAAA+qB,GANf,SAAA12B,GACA,IAAAgL,EAAA5J,KAAAyB,IAAA7C,WAAAoB,KAAAq0B,SAAAz1B,GAEA,OADAoB,KAAAuK,MAAAX,EAAA,IACAA,GCVA2rB,GAAA,4BAMIC,GAHWz3B,OAAAkB,UAGiBC,eAoBjB,IAAAu2B,GATf,SAAA72B,GACA,IAAAgB,EAAAI,KAAAq0B,SACA,GAAMe,GAAY,CAClB,IAAAxrB,EAAAhK,EAAAhB,GACA,OAAAgL,IAAA2rB,QAAA5zB,EAAAiI,EAEA,OAAS4rB,GAAch4B,KAAAoC,EAAAhB,GAAAgB,EAAAhB,QAAA+C,GCpBnB+zB,GAHW33B,OAAAkB,UAGiBC,eAgBjB,IAAAy2B,GALf,SAAA/2B,GACA,IAAAgB,EAAAI,KAAAq0B,SACA,OAASe,QAAYzzB,IAAA/B,EAAAhB,GAA+B82B,GAAcl4B,KAAAoC,EAAAhB,IChB9Dg3B,GAAc,4BAmBH,IAAAC,GAPf,SAAAj3B,EAAAN,GACA,IAAAsB,EAAAI,KAAAq0B,SAGA,OAFAr0B,KAAAuK,MAAAvK,KAAAyB,IAAA7C,GAAA,IACAgB,EAAAhB,GAAew2B,SAAYzzB,IAAArD,EAA2Bs3B,GAAct3B,EACpE0B,MCNA,SAAA81B,GAAAlB,GACA,IAAAhzB,GAAA,EACAQ,EAAA,MAAAwyB,EAAA,EAAAA,EAAAxyB,OAGA,IADApC,KAAAyZ,UACA7X,EAAAQ,GAAA,CACA,IAAAyyB,EAAAD,EAAAhzB,GACA5B,KAAAoH,IAAAytB,EAAA,GAAAA,EAAA,KAKAiB,GAAA72B,UAAAwa,MAAuB4b,GACvBS,GAAA72B,UAAA,OAA2Bq2B,GAC3BQ,GAAA72B,UAAAf,IAAqBu3B,GACrBK,GAAA72B,UAAAwC,IAAqBk0B,GACrBG,GAAA72B,UAAAmI,IAAqByuB,GAEN,IAAAE,GAAA,GCXA,IAAAC,GATf,WACAh2B,KAAAuK,KAAA,EACAvK,KAAAq0B,UACA4B,KAAA,IAAgBF,GAChBhoB,IAAA,IAAgBonB,IAAOL,IACvBrJ,OAAA,IAAkBsK,KCFH,IAAAG,GAPf,SAAA53B,GACA,IAAAiE,SAAAjE,EACA,gBAAAiE,GAAA,UAAAA,GAAA,UAAAA,GAAA,WAAAA,EACA,cAAAjE,EACA,OAAAA,GCMe,IAAA63B,GAPf,SAAApoB,EAAAnP,GACA,IAAAgB,EAAAmO,EAAAsmB,SACA,OAAS6B,GAASt3B,GAClBgB,EAAA,iBAAAhB,EAAA,iBACAgB,EAAAmO,KCGe,IAAAqoB,GANf,SAAAx3B,GACA,IAAAgL,EAAeusB,GAAUn2B,KAAApB,GAAA,OAAAA,GAEzB,OADAoB,KAAAuK,MAAAX,EAAA,IACAA,GCCe,IAAAysB,GAJf,SAAAz3B,GACA,OAASu3B,GAAUn2B,KAAApB,GAAAV,IAAAU,ICGJ,IAAA03B,GAJf,SAAA13B,GACA,OAASu3B,GAAUn2B,KAAApB,GAAA6C,IAAA7C,ICSJ,IAAA23B,GATf,SAAA33B,EAAAN,GACA,IAAAsB,EAAau2B,GAAUn2B,KAAApB,GACvB2L,EAAA3K,EAAA2K,KAIA,OAFA3K,EAAAwH,IAAAxI,EAAAN,GACA0B,KAAAuK,MAAA3K,EAAA2K,QAAA,IACAvK,MCLA,SAAAw2B,GAAA5B,GACA,IAAAhzB,GAAA,EACAQ,EAAA,MAAAwyB,EAAA,EAAAA,EAAAxyB,OAGA,IADApC,KAAAyZ,UACA7X,EAAAQ,GAAA,CACA,IAAAyyB,EAAAD,EAAAhzB,GACA5B,KAAAoH,IAAAytB,EAAA,GAAAA,EAAA,KAKA2B,GAAAv3B,UAAAwa,MAA2Buc,GAC3BQ,GAAAv3B,UAAA,OAA+Bm3B,GAC/BI,GAAAv3B,UAAAf,IAAyBm4B,GACzBG,GAAAv3B,UAAAwC,IAAyB60B,GACzBE,GAAAv3B,UAAAmI,IAAyBmvB,GAEV,IAAAE,GAAA,GC1BfC,GAAA,IA4Be,IAAAC,GAhBf,SAAA/3B,EAAAN,GACA,IAAAsB,EAAAI,KAAAq0B,SACA,GAAAz0B,aAAsBk1B,GAAS,CAC/B,IAAA8B,EAAAh3B,EAAAy0B,SACA,IAASc,IAAGyB,EAAAx0B,OAAAs0B,GAAA,EAGZ,OAFAE,EAAAl1B,MAAA9C,EAAAN,IACA0B,KAAAuK,OAAA3K,EAAA2K,KACAvK,KAEAJ,EAAAI,KAAAq0B,SAAA,IAA+BoC,GAAQG,GAIvC,OAFAh3B,EAAAwH,IAAAxI,EAAAN,GACA0B,KAAAuK,KAAA3K,EAAA2K,KACAvK,MChBA,SAAA62B,GAAAjC,GACA,IAAAh1B,EAAAI,KAAAq0B,SAAA,IAAiCS,GAASF,GAC1C50B,KAAAuK,KAAA3K,EAAA2K,KAIAssB,GAAA53B,UAAAwa,MAAwBsb,GACxB8B,GAAA53B,UAAA,OAA4B+1B,GAC5B6B,GAAA53B,UAAAf,IAAsB+2B,GACtB4B,GAAA53B,UAAAwC,IAAsByzB,GACtB2B,GAAA53B,UAAAmI,IAAsBuvB,GAEP,IAAAG,GAAA,GCLA,IAAAC,GAZf,SAAA1L,EAAA4B,GAIA,IAHA,IAAArrB,GAAA,EACAQ,EAAA,MAAAipB,EAAA,EAAAA,EAAAjpB,SAEAR,EAAAQ,IACA,IAAA6qB,EAAA5B,EAAAzpB,KAAAypB,KAIA,OAAAA,GCbe2L,GAFEnE,GAAO90B,OAAAgW,KAAAhW,QCIpBk5B,GAHWl5B,OAAAkB,UAGiBC,eAsBjB,IAAAg4B,GAbf,SAAAn4B,GACA,IAAO2vB,GAAW3vB,GAClB,OAAWi4B,GAAUj4B,GAErB,IAAA6K,KACA,QAAAhL,KAAAb,OAAAgB,GACQk4B,GAAcz5B,KAAAuB,EAAAH,IAAA,eAAAA,GACtBgL,EAAAlI,KAAA9C,GAGA,OAAAgL,GCUe,IAAAutB,GAJf,SAAap4B,GACb,OAASwtB,GAAWxtB,GAAWmvB,GAAanvB,GAAWm4B,GAAQn4B,ICjBhD,IAAAq4B,GAJf,SAAAr4B,EAAA+R,GACA,OAAA/R,GAAmB4rB,GAAU7Z,EAASqmB,GAAIrmB,GAAA/R,ICG3B,IAAAs4B,GAJf,SAAAt4B,EAAA+R,GACA,OAAA/R,GAAmB4rB,GAAU7Z,EAASke,GAAMle,GAAA/R,aCM7B,IAAAu4B,GAXf,SAAAxmB,EAAAua,GACA,IAAAzpB,GAAA,EACAQ,EAAA0O,EAAA1O,OAGA,IADAipB,MAAAxnB,MAAAzB,MACAR,EAAAQ,GACAipB,EAAAzpB,GAAAkP,EAAAlP,GAEA,OAAAypB,GCQe,IAAAkM,GAff,SAAAlM,EAAAmM,GAMA,IALA,IAAA51B,GAAA,EACAQ,EAAA,MAAAipB,EAAA,EAAAA,EAAAjpB,OACAq1B,EAAA,EACA7tB,OAEAhI,EAAAQ,GAAA,CACA,IAAA9D,EAAA+sB,EAAAzpB,GACA41B,EAAAl5B,EAAAsD,EAAAypB,KACAzhB,EAAA6tB,KAAAn5B,GAGA,OAAAsL,GCCe,IAAA8tB,GAJf,WACA,UCZIC,GAHW55B,OAAAkB,UAGuBsuB,qBAGtCqK,GAAA75B,OAAAqK,sBAmBeyvB,GAVfD,GAA8C,SAAA74B,GAC9C,aAAAA,MAGAA,EAAAhB,OAAAgB,GACSw4B,GAAWK,GAAA74B,GAAA,SAAA+4B,GACpB,OAAWH,GAAoBn6B,KAAAuB,EAAA+4B,OANMJ,GCJtB,IAAAK,GAJf,SAAAjnB,EAAA/R,GACA,OAAS4rB,GAAU7Z,EAAS+mB,GAAU/mB,GAAA/R,ICOvB,IAAAi5B,GAXf,SAAA3M,EAAA5e,GAKA,IAJA,IAAA7K,GAAA,EACAQ,EAAAqK,EAAArK,OACA61B,EAAA5M,EAAAjpB,SAEAR,EAAAQ,GACAipB,EAAA4M,EAAAr2B,GAAA6K,EAAA7K,GAEA,OAAAypB,GCQe6M,GAlBKn6B,OAAAqK,sBAS4B,SAAArJ,GAEhD,IADA,IAAA6K,KACA7K,GACIi5B,GAASpuB,EAASiuB,GAAU94B,IAChCA,EAAag0B,GAAYh0B,GAEzB,OAAA6K,GANuC8tB,GCAxB,IAAAS,GAJf,SAAArnB,EAAA/R,GACA,OAAS4rB,GAAU7Z,EAASonB,GAAYpnB,GAAA/R,ICOzB,IAAAq5B,GALf,SAAAr5B,EAAAs5B,EAAAC,GACA,IAAA1uB,EAAAyuB,EAAAt5B,GACA,OAAS0uB,GAAO1uB,GAAA6K,EAAoBouB,GAASpuB,EAAA0uB,EAAAv5B,KCD9B,IAAAw5B,GAJf,SAAAx5B,GACA,OAASq5B,GAAcr5B,EAASo4B,GAAMU,KCIvB,IAAAW,GAJf,SAAAz5B,GACA,OAASq5B,GAAcr5B,EAASiwB,GAAQkJ,KCPzBO,GAFAvO,EAAUnC,EAAA,EAAI,YCEd2Q,GAFDxO,EAAUnC,EAAA,EAAI,WCEb4Q,GAFLzO,EAAUnC,EAAA,EAAI,OCET6Q,GAFD1O,EAAUnC,EAAA,EAAI,WCc5B8Q,GAAyBnP,EAAS+O,IAClCK,GAAoBpP,EAASyL,IAC7B4D,GAAwBrP,EAASgP,IACjCM,GAAoBtP,EAASiP,IAC7BM,GAAwBvP,EAASkP,IASjCM,GAAarQ,GAGR4P,IAnBU,qBAmBFS,GAAA,IAAeT,GAAQ,IAAAU,YAAA,MAC/BhE,IA1BK,gBA0BF+D,GAAA,IAAe/D,KAClBuD,IAzBL,oBAyBYQ,GAAWR,GAAO9yB,YACzB+yB,IAzBK,gBAyBFO,GAAA,IAAeP,KAClBC,IAzBS,oBAyBFM,GAAA,IAAeN,OAC3BM,GAAA,SAAA56B,GACA,IAAAsL,EAAiBif,EAAUvqB,GAC3BqwB,EA/Ba,mBA+Bb/kB,EAAkCtL,EAAAoK,iBAAA/G,EAClCy3B,EAAAzK,EAA4BjF,EAAQiF,GAAA,GAEpC,GAAAyK,EACA,OAAAA,GACA,KAAAP,GAAA,MA/Be,oBAgCf,KAAAC,GAAA,MAtCU,eAuCV,KAAAC,GAAA,MArCA,mBAsCA,KAAAC,GAAA,MArCU,eAsCV,KAAAC,GAAA,MArCc,mBAwCd,OAAArvB,IAIe,IAAAyvB,GAAA,GCrDXC,GAHWv7B,OAAAkB,UAGiBC,eAqBjB,IAAAq6B,GAZf,SAAAlO,GACA,IAAAjpB,EAAAipB,EAAAjpB,OACAwH,EAAA,IAAAyhB,EAAA3iB,YAAAtG,GAOA,OAJAA,GAAA,iBAAAipB,EAAA,IAA+CiO,GAAc97B,KAAA6tB,EAAA,WAC7DzhB,EAAAhI,MAAAypB,EAAAzpB,MACAgI,EAAA4vB,MAAAnO,EAAAmO,OAEA5vB,GCjBe6vB,GAFE1R,EAAA,EAAI2R,WCYN,IAAAC,GANf,SAAAC,GACA,IAAAhwB,EAAA,IAAAgwB,EAAAlxB,YAAAkxB,EAAAC,YAEA,OADA,IAAMJ,GAAU7vB,GAAAxC,IAAA,IAAiBqyB,GAAUG,IAC3ChwB,GCGe,IAAAkwB,GALf,SAAAC,EAAA7a,GACA,IAAAD,EAAAC,EAAwBya,GAAgBI,EAAA9a,QAAA8a,EAAA9a,OACxC,WAAA8a,EAAArxB,YAAAuW,EAAA8a,EAAAC,WAAAD,EAAAF,aCXAI,GAAA,OAee,IAAAC,GANf,SAAAC,GACA,IAAAvwB,EAAA,IAAAuwB,EAAAzxB,YAAAyxB,EAAArpB,OAAAmpB,GAAAljB,KAAAojB,IAEA,OADAvwB,EAAAuN,UAAAgjB,EAAAhjB,UACAvN,GCVAwwB,GAAkBtS,EAASA,EAAM7oB,eAAA0C,EACjC04B,GAAAD,MAAAE,aAAA34B,EAae,IAAA44B,GAJf,SAAAzC,GACA,OAAAuC,GAAAt8B,OAAAs8B,GAAA78B,KAAAs6B,QCCe,IAAA0C,GALf,SAAAC,EAAAvb,GACA,IAAAD,EAAAC,EAAwBya,GAAgBc,EAAAxb,QAAAwb,EAAAxb,OACxC,WAAAwb,EAAA/xB,YAAAuW,EAAAwb,EAAAT,WAAAS,EAAAr4B,SCLIs4B,GAAO,mBACPC,GAAO,gBACPC,GAAM,eACNC,GAAS,kBACTC,GAAS,kBACTC,GAAM,eACNC,GAAS,kBACbC,GAAA,kBAEIC,GAAc,uBACdC,GAAW,oBACXC,GAAU,wBACVC,GAAU,wBACVC,GAAO,qBACPC,GAAQ,sBACRC,GAAQ,sBACRC,GAAQ,sBACRC,GAAe,6BACfC,GAAS,uBACTC,GAAS,uBAkDE,IAAAC,GApCf,SAAA98B,EAAAupB,EAAApJ,GACA,IAAAyP,EAAA5vB,EAAA2J,YACA,OAAA4f,GACA,KAAS4S,GACT,OAAavB,GAAgB56B,GAE7B,KAAS27B,GACT,KAASC,GACT,WAAAhM,GAAA5vB,GAEA,KAASo8B,GACT,OAAarB,GAAa/6B,EAAAmgB,GAE1B,KAASkc,GAAU,KAAOC,GAC1B,KAASC,GAAO,KAAOC,GAAQ,KAAOC,GACtC,KAASC,GAAQ,KAAOC,GAAe,KAAOC,GAAS,KAAOC,GAC9D,OAAapB,GAAez7B,EAAAmgB,GAE5B,KAAS0b,GACT,WAAAjM,EAEA,KAASkM,GACT,KAASG,GACT,WAAArM,EAAA5vB,GAEA,KAAS+7B,GACT,OAAaZ,GAAWn7B,GAExB,KAASg8B,GACT,WAAApM,EAEA,KAAAsM,GACA,OAAaV,GAAWx7B,KCrExB+8B,GAAA/9B,OAAAY,OA0Beo9B,GAhBf,WACA,SAAAh9B,KACA,gBAAAwM,GACA,IAASsc,EAAQtc,GACjB,SAEA,GAAAuwB,GACA,OAAAA,GAAAvwB,GAEAxM,EAAAE,UAAAsM,EACA,IAAA3B,EAAA,IAAA7K,EAEA,OADAA,EAAAE,eAAA0C,EACAiI,GAZA,GCIe,IAAAoyB,GANf,SAAAj9B,GACA,yBAAAA,EAAA2J,aAAsDgmB,GAAW3vB,MAC3Dg9B,GAAWhJ,GAAYh0B,KCTzBk9B,GAAM,eAaK,IAAAC,GAJf,SAAA59B,GACA,OAAS4uB,GAAY5uB,IAAW+6B,GAAM/6B,IAAW29B,ICTjDE,GAAgBrO,GAAA,GAAYA,GAAA,EAAQsO,MAqBrBC,GAFfF,GAAwBvO,GAASuO,IAAcD,GCpB3CI,GAAM,eAaK,IAAAC,GAJf,SAAAj+B,GACA,OAAS4uB,GAAY5uB,IAAW+6B,GAAM/6B,IAAWg+B,ICTjDE,GAAgB1O,GAAA,GAAYA,GAAA,EAAQ2O,MAqBrBC,GAFfF,GAAwB5O,GAAS4O,IAAcD,GCD/CI,GAAA,EACAC,GAAA,EACAC,GAAA,EAGIC,GAAO,qBAKPC,GAAO,oBACPC,GAAM,6BAGNC,GAAS,kBAoBbC,MACAA,GAAcJ,IAAOI,GA7BT,kBA8BZA,GAfkB,wBAeUA,GAdb,qBAefA,GA9BW,oBA8BUA,GA7BV,iBA8BXA,GAfc,yBAeUA,GAdV,yBAedA,GAdW,sBAcUA,GAbT,uBAcZA,GAbY,uBAaUA,GA5BZ,gBA6BVA,GA5Ba,mBA4BUA,GAAkBD,IACzCC,GA3Ba,mBA2BUA,GA1Bb,gBA2BVA,GA1Ba,mBA0BUA,GAzBV,mBA0BbA,GAhBY,uBAgBUA,GAfH,8BAgBnBA,GAfa,wBAeUA,GAdV,yBAcqC,EAClDA,GArCY,kBAqCUA,GAAkBH,IACxCG,GA5Bc,qBA4BU,EAoGT,IAAAC,GAlFf,SAAAC,EAAA9+B,EAAA++B,EAAAzS,EAAAhsB,EAAAG,EAAAu+B,GACA,IAAA1zB,EACAsV,EAAAme,EAAAV,GACAY,EAAAF,EAAAT,GACAY,EAAAH,EAAAR,GAKA,GAHAjS,IACAhhB,EAAA7K,EAAA6rB,EAAAtsB,EAAAM,EAAAG,EAAAu+B,GAAA1S,EAAAtsB,SAEAqD,IAAAiI,EACA,OAAAA,EAEA,IAAOie,EAAQvpB,GACf,OAAAA,EAEA,IAAA8vB,EAAcX,GAAOnvB,GACrB,GAAA8vB,GAEA,GADAxkB,EAAa2vB,GAAcj7B,IAC3B4gB,EACA,OAAaoY,GAASh5B,EAAAsL,OAEnB,CACH,IAAA0e,EAAc+Q,GAAM/6B,GACpBm/B,EAAAnV,GAAwByU,IAAOzU,GAAW0U,GAE1C,GAAQj/B,OAAAwgB,GAAA,EAAAxgB,CAAQO,GAChB,OAAaP,OAAA2/B,GAAA,EAAA3/B,CAAWO,EAAA4gB,GAExB,GAAAoJ,GAAe2U,IAAS3U,GAAWwU,IAAOW,IAAA1+B,GAE1C,GADA6K,EAAA2zB,GAAAE,KAAyCzB,GAAe19B,IACxD4gB,EACA,OAAAqe,EACYpF,GAAa75B,EAAQ+4B,GAAYztB,EAAAtL,IACjCy5B,GAAWz5B,EAAQ84B,GAAUxtB,EAAAtL,QAEpC,CACL,IAAA4+B,GAAA5U,GACA,OAAAvpB,EAAAT,KAEAsL,EAAeiyB,GAAcv9B,EAAAgqB,EAAApJ,IAI7Boe,MAAA,IAAwBxG,IACxB,IAAA6G,EAAAL,EAAAp/B,IAAAI,GACA,GAAAq/B,EACA,OAAAA,EAIA,GAFAL,EAAAl2B,IAAA9I,EAAAsL,GAEM8yB,GAAKp+B,GAKX,OAJAA,EAAAuD,QAAA,SAAA+7B,GACAh0B,EAAAzG,IAAAi6B,EAAAQ,EAAAP,EAAAzS,EAAAgT,EAAAt/B,EAAAg/B,MAGA1zB,EAGA,GAAMyyB,GAAK/9B,GAKX,OAJAA,EAAAuD,QAAA,SAAA+7B,EAAAh/B,GACAgL,EAAAxC,IAAAxI,EAAAw+B,EAAAQ,EAAAP,EAAAzS,EAAAhsB,EAAAN,EAAAg/B,MAGA1zB,EAGA,IAAAyuB,EAAAmF,EACAD,EAAgB/E,GAAeD,GAC/BgF,EAAAM,OAAyB1G,GAEzBnvB,EAAAomB,OAAAzsB,EAAA02B,EAAA/5B,GASA,OAREy4B,GAAS/uB,GAAA1J,EAAA,SAAAs/B,EAAAh/B,GACXoJ,IAEA41B,EAAAt/B,EADAM,EAAAg/B,IAIInT,GAAW7gB,EAAAhL,EAAAw+B,EAAAQ,EAAAP,EAAAzS,EAAAhsB,EAAAN,EAAAg/B,MAEf1zB,GCpKIk0B,GAAkB,EAgCP,IAAAC,GAJf,SAAcz/B,GACd,OAAS6+B,GAAS7+B,EAAQw/B,WCRLE,GAIrBt+B,cAOAM,KAAA2Q,OAAA,KAYA/O,YACA,IAAAq8B,EAEA,IAAAj+B,KAAA2Q,OACA,YAIA,QAAAstB,EAAAj+B,KAAA2Q,OAAAutB,cAAAl+B,OAMA,UAAauvB,EAAA,EAAa,gFAG1B,OAAA0O,EASA9qB,kBACA,MAAAvR,EAAA5B,KAAA4B,MAEA,cAAAA,GAAA5B,KAAA2Q,OAAAwtB,SAAAv8B,EAAA,SASAJ,sBACA,MAAAI,EAAA5B,KAAA4B,MAEA,cAAAA,GAAA5B,KAAA2Q,OAAAwtB,SAAAv8B,EAAA,SASAjF,WACA,IAAAA,EAAAqD,KAEA,KAAArD,EAAAgU,QACAhU,IAAAgU,OAGA,OAAAhU,EAUAiE,eAEA,OAAAZ,KAAA2Q,kBAA8BqtB,GAC9Bh+B,KAAA2Q,OAAA/P,SAEA,KAmBAlB,UACA,MAAAskB,KACA,IAAA1iB,EAAAtB,KAEA,KAAAsB,EAAAqP,QACAqT,EAAAvW,QAAAnM,EAAAM,OACAN,IAAAqP,OAGA,OAAAqT,EAYAtkB,aAAA8H,GAA0B42B,aAAA,EAAAC,aAAA,IAC1B,MAAAC,KACA,IAAA3tB,EAAAnJ,EAAA42B,YAAAp+B,UAAA2Q,OAEA,KAAAA,GACA2tB,EAAA92B,EAAA62B,YAAA,kBAAA1tB,GACAA,WAGA,OAAA2tB,EAaA5+B,kBAAA4B,EAAAkG,MACA,MAAA+2B,EAAAv+B,KAAAw+B,aAAAh3B,GACAi3B,EAAAn9B,EAAAk9B,aAAAh3B,GAEA,IAAAnK,EAAA,EAEA,KAAAkhC,EAAAlhC,IAAAohC,EAAAphC,IAAAkhC,EAAAlhC,IACAA,IAGA,WAAAA,EAAA,KAAAkhC,EAAAlhC,EAAA,GAUAqC,SAAA4B,GAEA,GAAAtB,MAAAsB,EACA,SAIA,GAAAtB,KAAArD,OAAA2E,EAAA3E,KACA,SAGA,MAAA+hC,EAAA1+B,KAAA2+B,UACAC,EAAAt9B,EAAAq9B,UAEA/0B,EAAiBoqB,GAAa0K,EAAAE,GAE9B,OAAAh1B,GACA,aACA,SAEA,gBACA,SAEA,QACA,OAAA80B,EAAA90B,GAAAg1B,EAAAh1B,IAWAlK,QAAA4B,GAEA,OAAAtB,MAAAsB,IAKAtB,KAAArD,OAAA2E,EAAA3E,OAKAqD,KAAA6+B,SAAAv9B,IAQA5B,UACAM,KAAA2Q,OAAAmuB,gBAAA9+B,KAAA4B,OASAlC,YAAA6C,EAAAjB,GACAtB,KAAA4nB,KAAA,UAAArlB,EAAAjB,GAEAtB,KAAA2Q,QACA3Q,KAAA2Q,OAAAouB,YAAAx8B,EAAAjB,GASA5B,SACA,MAAAs/B,EAAejB,GAAK/9B,MAKpB,cAFAg/B,EAAAruB,OAEAquB,EAsBAt/B,GAAA6C,GACA,cAAAA,GAkDA8vB,GAAK2L,GAAM/Y,SChVUga,WAAajB,GAOlCt+B,YAAAE,GACAG,QAUAC,KAAAk/B,UAAAt/B,EAMAF,GAAA6C,GACA,cAAAA,GAAAxC,MAAAo/B,GAAA58B,GASA3C,WACA,OAAAI,KAAAk/B,UAiBAE,YACA,OAAAp/B,KAAAJ,KAUAw/B,UAAAx/B,GACAI,KAAA++B,YAAA,OAAA/+B,MAEAA,KAAAk/B,UAAAt/B,EAUAF,UAAA2/B,GACA,OAAAA,aAA+BJ,KAI/Bj/B,OAAAq/B,GAAAr/B,KAAAJ,OAAAy/B,EAAAz/B,MASAF,SACA,WAAau/B,GAAIj/B,KAAAJ,aClFI0/B,GAWrB5/B,YAAA6/B,EAAAC,EAAAp9B,GASA,GAFApC,KAAAu/B,WAEAC,EAAA,GAAAA,EAAAD,EAAA3/B,KAAAwC,OAMA,UAAamtB,EAAA,EAAa,6EAG1B,GAAAntB,EAAA,GAAAo9B,EAAAp9B,EAAAm9B,EAAA3/B,KAAAwC,OAMA,UAAamtB,EAAA,EAAa,iEAS1BvvB,KAAAJ,KAAA2/B,EAAA3/B,KAAA2kB,UAAAib,IAAAp9B,GAQApC,KAAAw/B,eASAC,iBACA,OAAAz/B,KAAAJ,KAAAwC,OAcAs9B,gBACA,OAAA1/B,KAAAJ,KAAAwC,SAAApC,KAAAu/B,SAAA3/B,KAAAwC,OASAuO,aACA,OAAA3Q,KAAAu/B,SAAA5uB,OASAhU,WACA,OAAAqD,KAAAu/B,SAAA5iC,KAUAiE,eACA,OAAAZ,KAAAu/B,SAAA3+B,SAWAlB,GAAA6C,GACA,mBAAAA,EAYA7C,aAAA8H,GAA0B42B,aAAA,EAAAC,aAAA,IAC1B,MAAAC,KACA,IAAA3tB,EAAAnJ,EAAA42B,YAAAp+B,KAAAu/B,SAAAv/B,KAAA2Q,OAEA,YAAAA,GACA2tB,EAAA92B,EAAA62B,YAAA,kBAAA1tB,GACAA,WAGA,OAAA2tB,GC1Je,SAAAqB,GAAA3rB,GACf,MAAAjG,EAAA,IAAAtH,IAEA,UAAA7H,KAAAoV,EACAjG,EAAA3G,IAAAxI,EAAAoV,EAAApV,IAGA,OAAAmP,ECVe,SAAA6xB,GAAAthC,GACf,SAAAA,MAAAF,OAAAqa,iBCHeonB,GAOfngC,eAAAogC,GAKA9/B,KAAA+/B,aAEA//B,KAAAmD,OAAA28B,GAwCApgC,OAAAogC,GACA,QAAA3tB,KAAA2tB,GAEA,iBAAA3tB,gBAAAuE,UACAvE,GAAYvU,KAAAuU,IAIZA,EAAA6tB,UAAA,iBAAA7tB,EAAA6tB,SAAA7tB,EAAA6tB,mBAAAtpB,UACAvE,EAAA6tB,SAAA7tB,EAAA6tB,UAGAhgC,KAAA+/B,UAAAr+B,KAAAyQ,GAiCAzS,SAAAc,GACA,UAAAy/B,KAAAz/B,EACA,UAAAs/B,KAAA9/B,KAAA+/B,UAAA,CACA,MAAA5/B,EAAA+/B,GAAAD,EAAAH,GAEA,GAAA3/B,EACA,OACAK,QAAAy/B,EACAH,UACA3/B,SAMA,YAaAT,YAAAc,GACA,MAAA2/B,KAEA,UAAAF,KAAAz/B,EACA,UAAAs/B,KAAA9/B,KAAA+/B,UAAA,CACA,MAAA5/B,EAAA+/B,GAAAD,EAAAH,GAEA3/B,GACAggC,EAAAz+B,MACAlB,QAAAy/B,EACAH,UACA3/B,UAMA,OAAAggC,EAAA/9B,OAAA,EAAA+9B,EAAA,KASAzgC,iBACA,OAAAM,KAAA+/B,UAAA39B,OACA,YAGA,MAAA09B,EAAA9/B,KAAA+/B,UAAA,GACAniC,EAAAkiC,EAAAliC,KAEA,yBAAAkiC,IAAAliC,gBAAA8Y,OAAA,KAAA9Y,GAUA,SAAAsiC,GAAA1/B,EAAAs/B,GAEA,sBAAAA,EACA,OAAAA,EAAAt/B,GAGA,MAAAL,KAEA,OAAA2/B,EAAAliC,OACAuC,EAAAvC,KA0CA,SAAAkiC,EAAAliC,GAEA,GAAAkiC,aAAAppB,OACA,OAAAopB,EAAA9e,KAAApjB,GAGA,OAAAkiC,IAAAliC,EAhDAwiC,CAAAN,EAAAliC,KAAA4C,EAAA5C,OAEAuC,EAAAvC,MACA,KAKAkiC,EAAAh5B,aACA3G,EAAA2G,WAgDA,SAAAu5B,EAAA7/B,GACA,MAAAL,KAEA,UAAAvC,KAAAyiC,EAAA,CACA,MAAAP,EAAAO,EAAAziC,GAEA,IAAA4C,EAAA8/B,aAAA1iC,GAiBA,YAjBA,CACA,MAAAyH,EAAA7E,EAAAyW,aAAArZ,GAEA,QAAAkiC,EACA3/B,EAAAuB,KAAA9D,QACI,GAAAkiC,aAAAppB,OAAA,CACJ,IAAAopB,EAAA9e,KAAA3b,GAGA,YAFAlF,EAAAuB,KAAA9D,OAII,IAAAyH,IAAAy6B,EAGJ,YAFA3/B,EAAAuB,KAAA9D,KASA,OAAAuC,EA3EAogC,CAAAT,EAAAh5B,WAAAtG,IAEAL,EAAA2G,YACA,OAKAg5B,EAAAE,UACA7/B,EAAA6/B,QA0EA,SAAAK,EAAA7/B,GACA,MAAAL,KAEA,UAAA2/B,KAAAO,EACA,GAAAP,aAAAppB,OAAA,CACA,MAAAspB,EAAAx/B,EAAAggC,gBAEA,UAAA5iC,KAAAoiC,EACAF,EAAA9e,KAAApjB,IACAuC,EAAAuB,KAAA9D,GAIA,OAAAuC,EAAAiC,OACA,gBAEG,KAAA5B,EAAAigC,SAAAX,GAGH,YAFA3/B,EAAAuB,KAAAo+B,GAMA,OAAA3/B,EAjGAugC,CAAAZ,EAAAE,QAAAx/B,IAEAL,EAAA6/B,cAMAF,EAAA18B,SACAjD,EAAAiD,OAiGA,SAAAi9B,EAAA7/B,GACA,MAAAL,KAEA,UAAAvC,KAAAyiC,EAAA,CACA,MAAAP,EAAAO,EAAAziC,GAEA,IAAA4C,EAAAmgC,SAAA/iC,GAeA,YAfA,CACA,MAAA4F,EAAAhD,EAAAogC,SAAAhjC,GAEA,GAAAkiC,aAAAppB,OAAA,CACA,IAAAopB,EAAA9e,KAAAxd,GAGA,YAFArD,EAAAuB,KAAA9D,OAII,IAAA4F,IAAAs8B,EAGJ,YAFA3/B,EAAAuB,KAAA9D,KASA,OAAAuC,EA1HA0gC,CAAAf,EAAA18B,OAAA5C,IAEAL,EAAAiD,UAKAjD,SCzLqB2gC,WAAgB9C,GAgBrCt+B,YAAA9B,EAAA6V,EAAAoL,GAuCA,GAtCA9e,QAQAC,KAAApC,OAQAoC,KAAA+gC,OAsrBA,SAAAttB,GAEAA,EADM6f,GAAa7f,GACTksB,GAAWlsB,GAErB,IAAAhN,IAAAgN,GAGA,UAAA7U,EAAAN,KAAAmV,EACA,OAAAnV,EACAmV,EAAAhE,OAAA7Q,GACG,iBAAAN,GACHmV,EAAArM,IAAAxI,EAAA0G,OAAAhH,IAIA,OAAAmV,EArsBAutB,CAAAvtB,GAQAzT,KAAAihC,aAEApiB,GACA7e,KAAAkhC,aAAA,EAAAriB,GASA7e,KAAAmhC,SAAA,IAAAn+B,IAEAhD,KAAA+gC,OAAAt/B,IAAA,UAEA,MAAA2/B,EAAAphC,KAAA+gC,OAAA7iC,IAAA,SACAmjC,GAAArhC,KAAAmhC,SAAAC,GACAphC,KAAA+gC,OAAAtxB,OAAA,SASAzP,KAAAqN,QAAA,IAAA5G,IAEAzG,KAAA+gC,OAAAt/B,IAAA,WAEA6/B,GAAAthC,KAAAqN,QAAArN,KAAA+gC,OAAA7iC,IAAA,UACA8B,KAAA+gC,OAAAtxB,OAAA,UAUAzP,KAAAuhC,kBAAA,IAAA96B,IASA+6B,iBACA,OAAAxhC,KAAAihC,UAAA7+B,OASAq/B,cACA,WAAAzhC,KAAAihC,UAAA7+B,OAYA1C,GAAA6C,EAAA3E,EAAA,MACA,OAAAA,EAGA,WAAA2E,GAAA3E,GAAAoC,KAAApC,KAFA,WAAA2E,MAAAvC,KAAApC,MAAAmC,MAAAo/B,GAAA58B,GAYA7C,SAAAkC,GACA,OAAA5B,KAAAihC,UAAAr/B,GASAlC,cAAA4B,GACA,OAAAtB,KAAAihC,UAAA3tB,QAAAhS,GAQA5B,cACA,OAAAM,KAAAihC,UAAA7iC,OAAAqa,YAQA/Y,oBACAM,KAAAmhC,SAAA52B,KAAA,SACA,SAGAvK,KAAAqN,QAAA9C,KAAA,SACA,SAKA,UAAA3L,KAAAoB,KAAA+gC,OAAAhtB,aACAnV,EAYAc,uBACAM,KAAA+gC,OAAAnM,UAEA50B,KAAAmhC,SAAA52B,KAAA,UACA,QAAAvK,KAAAiX,aAAA,WAGAjX,KAAAqN,QAAA9C,KAAA,UACA,QAAAvK,KAAAiX,aAAA,WAUAvX,aAAAd,GACA,YAAAA,EACA,OAAAoB,KAAAmhC,SAAA52B,KAAA,MACAvK,KAAAmhC,UAAA7xB,KAAA,UAGA,EAGA,YAAA1Q,EAcA,OAAAoB,KAAA+gC,OAAA7iC,IAAAU,GAbA,GAAAoB,KAAAqN,QAAA9C,KAAA,GACA,IAAAm3B,EAAA,GAEA,UAAA1iC,EAAAV,KAAA0B,KAAAqN,QACAq0B,MAAuB1iC,KAAcV,KAGrC,OAAAojC,GAeAhiC,aAAAd,GACA,eAAAA,EACAoB,KAAAmhC,SAAA52B,KAAA,EAGA,SAAA3L,EACAoB,KAAAqN,QAAA9C,KAAA,EAGAvK,KAAA+gC,OAAAt/B,IAAA7C,GAWAc,UAAAiiC,GACA,KAAAA,aAAkCb,IAClC,SAIA,GAAA9gC,OAAA2hC,EACA,SAIA,GAAA3hC,KAAApC,MAAA+jC,EAAA/jC,KACA,SAIA,GAAAoC,KAAA+gC,OAAAx2B,OAAAo3B,EAAAZ,OAAAx2B,MAAAvK,KAAAmhC,SAAA52B,OAAAo3B,EAAAR,SAAA52B,MACAvK,KAAAqN,QAAA9C,OAAAo3B,EAAAt0B,QAAA9C,KACA,SAIA,UAAA3L,EAAAN,KAAA0B,KAAA+gC,OACA,IAAAY,EAAAZ,OAAAt/B,IAAA7C,IAAA+iC,EAAAZ,OAAA7iC,IAAAU,KAAAN,EACA,SAKA,UAAAsjC,KAAA5hC,KAAAmhC,SACA,IAAAQ,EAAAR,SAAA1/B,IAAAmgC,GACA,SAKA,UAAA5iC,EAAAV,KAAA0B,KAAAqN,QACA,IAAAs0B,EAAAt0B,QAAA5L,IAAAzC,IAAA2iC,EAAAt0B,QAAAnP,IAAAc,KAAAV,EACA,SAIA,SAYAoB,YAAAkiC,GACA,UAAAhkC,KAAAgkC,EACA,IAAA5hC,KAAAmhC,SAAA1/B,IAAA7D,GACA,SAIA,SAQA8B,gBACA,OAAAM,KAAAmhC,SAAAptB,OAUArU,SAAAV,GACA,OAAAgB,KAAAqN,QAAAnP,IAAAc,GAQAU,gBACA,OAAAM,KAAAqN,QAAA0G,OAYArU,YAAAV,GACA,UAAApB,KAAAoB,EACA,IAAAgB,KAAAqN,QAAA5L,IAAA7D,GACA,SAIA,SAYA8B,gBAAA2gC,GACA,MAAAwB,EAAA,IAAsBhC,MAAOQ,GAC7B,IAAA1vB,EAAA3Q,KAAA2Q,OAEA,KAAAA,GAAA,CACA,GAAAkxB,EAAA1hC,MAAAwQ,GACA,OAAAA,EAGAA,WAGA,YASAjR,kBAAAd,GACA,OAAAoB,KAAAuhC,kBAAArjC,IAAAU,GASAc,6BACAM,KAAAuhC,kBAAA3M,UA0BAl1B,cACA,MAAAsgC,EAAAn8B,MAAAC,KAAA9D,KAAAmhC,UAAAW,OAAAxyB,KAAA,KACAlM,EAAAS,MAAAC,KAAA9D,KAAAqN,SAAAU,IAAA1Q,MAAyDA,EAAA,MAAYA,EAAA,MAASykC,OAAAxyB,KAAA,KAC9ExI,EAAAjD,MAAAC,KAAA9D,KAAA+gC,QAAAhzB,IAAA1Q,MAA4DA,EAAA,OAAaA,EAAA,OAASykC,OAAAxyB,KAAA,KAElF,OAAAtP,KAAApC,MACA,IAAAoiC,EAAA,cAAqCA,OACrC,IAAA58B,EAAA,cAAoCA,OACpC,IAAA0D,EAAA,OAAiCA,KAWjCpH,OAAAqiC,GAAA,GACA,MAAAC,KAEA,GAAAD,EACA,UAAAre,KAAA1jB,KAAAiiC,cACAD,EAAAtgC,KAAAgiB,EAAA7J,OAAAkoB,IAKA,MAAAG,EAAA,IAAAliC,KAAA0I,YAAA1I,KAAApC,KAAAoC,KAAA+gC,OAAAiB,GAeA,OAXAE,EAAAf,SAAA,IAAAn+B,IAAAhD,KAAAmhC,UACAe,EAAA70B,QAAA,IAAA5G,IAAAzG,KAAAqN,SAGA60B,EAAAX,kBAAA,IAAA96B,IAAAzG,KAAAuhC,mBAKAW,EAAAC,gBAAAniC,KAAAmiC,gBAEAD,EAaAxiC,aAAA0iC,GACA,OAAApiC,KAAAkhC,aAAAlhC,KAAAwhC,WAAAY,GAcA1iC,aAAAkC,EAAAwgC,GACApiC,KAAA++B,YAAA,WAAA/+B,MACA,IAAAiC,EAAA,EAEA,MAAAogC,EA0UA,SAAAA,GAEA,oBAAAA,EACA,WAAepD,GAAIoD,IAGZzC,GAAUyC,KACjBA,OAIA,OAAAx+B,MAAAC,KAAAu+B,GACAt0B,IAAAzM,GACA,iBAAAA,EACA,IAAe29B,GAAI39B,GAGnBA,aAAwBg+B,GACxB,IAAeL,GAAI39B,EAAA1B,MAGnB0B,GA/VAghC,CAAAF,GAEA,UAAA9gC,KAAA+gC,EAEA,OAAA/gC,EAAAqP,QACArP,EAAAihC,UAGAjhC,EAAAqP,OAAA3Q,KAEAA,KAAAihC,UAAA1tB,OAAA3R,EAAA,EAAAN,GACAM,IACAK,IAGA,OAAAA,EAaAvC,gBAAAkC,EAAA4gC,EAAA,GACAxiC,KAAA++B,YAAA,WAAA/+B,MAEA,QAAA3C,EAAAuE,EAAsBvE,EAAAuE,EAAA4gC,EAAqBnlC,IAC3C2C,KAAAihC,UAAA5jC,GAAAsT,OAAA,KAGA,OAAA3Q,KAAAihC,UAAA1tB,OAAA3R,EAAA4gC,GAYA9iC,cAAAd,EAAAN,GACAA,EAAAgH,OAAAhH,GAEA0B,KAAA++B,YAAA,aAAA/+B,MAEA,SAAApB,EACAyiC,GAAArhC,KAAAmhC,SAAA7iC,GACG,SAAAM,EACH0iC,GAAAthC,KAAAqN,QAAA/O,GAEA0B,KAAA+gC,OAAA35B,IAAAxI,EAAAN,GAaAoB,iBAAAd,GAIA,OAHAoB,KAAA++B,YAAA,aAAA/+B,MAGA,SAAApB,EACAoB,KAAAmhC,SAAA52B,KAAA,IACAvK,KAAAmhC,SAAA1nB,SAEA,GAOA,SAAA7a,EACAoB,KAAAqN,QAAA9C,KAAA,IACAvK,KAAAqN,QAAAoM,SAEA,GAOAzZ,KAAA+gC,OAAAtxB,OAAA7Q,GAcAc,UAAAkiC,GACA5hC,KAAA++B,YAAA,aAAA/+B,OAEA4hC,EAAA/9B,MAAAuJ,QAAAw0B,UACA//B,QAAAjE,GAAAoC,KAAAmhC,SAAAh+B,IAAAvF,IAcA8B,aAAAkiC,GACA5hC,KAAA++B,YAAA,aAAA/+B,OAEA4hC,EAAA/9B,MAAAuJ,QAAAw0B,UACA//B,QAAAjE,GAAAoC,KAAAmhC,SAAA1xB,OAAA7R,IAkBA8B,UAAAV,EAAAV,GAGA,GAFA0B,KAAA++B,YAAA,aAAA/+B,MAEOszB,GAAat0B,GAAA,CACpB,MAAA+U,EAAAhW,OAAAgW,KAAA/U,GAEA,UAAAJ,KAAAmV,EACA/T,KAAAqN,QAAAjG,IAAAxI,EAAAI,EAAAJ,SAGAoB,KAAAqN,QAAAjG,IAAApI,EAAAV,GAeAoB,aAAAV,GACAgB,KAAA++B,YAAA,aAAA/+B,OAEAhB,EAAA6E,MAAAuJ,QAAApO,UACA6C,QAAAjE,GAAAoC,KAAAqN,QAAAoC,OAAA7R,IAYA8B,mBAAAd,EAAAN,GACA0B,KAAAuhC,kBAAAn6B,IAAAxI,EAAAN,GAWAoB,sBAAAd,GACA,OAAAoB,KAAAuhC,kBAAA9xB,OAAA7Q,IAwCA,SAAA0iC,GAAAmB,EAAAC,GAEA,IAAAC,EAAA,KACAC,EAAA,EACAC,EAAA,EACAlT,EAAA,KAKA,GAHA8S,EAAAhpB,QAGA,KAAAipB,EAAA,CAKA,KAAAA,EAAAI,OAAAJ,EAAAtgC,OAAA,KACAsgC,GAAA,KAIA,QAAArlC,EAAA,EAAiBA,EAAAqlC,EAAAtgC,OAAyB/E,IAAA,CAC1C,MAAA0lC,EAAAL,EAAAI,OAAAzlC,GAEA,UAAAslC,EAEA,OAAAI,GACA,QAGApT,IAGAA,EAAA+S,EAAAnmB,OAAAqmB,EAAAvlC,EAAAulC,GAEAC,EAAAxlC,EAAA,GAGA,MAEA,QACA,QAEAslC,EAAAI,EAEA,MAEA,QAAW,CAGX,MAAA3Q,EAAAsQ,EAAAnmB,OAAAsmB,EAAAxlC,EAAAwlC,GAEAlT,GAEA8S,EAAAr7B,IAAAuoB,EAAA7O,OAAAsR,EAAAtR,QAGA6O,EAAA,KAGAiT,EAAAvlC,EAAA,EAEA,YAGG0lC,IAAAJ,IAEHA,EAAA,QAUA,SAAAtB,GAAA2B,EAAAC,GACA,MAAAC,EAAAD,EAAA/rB,MAAA,OACA8rB,EAAAvpB,QACAypB,EAAArhC,QAAAjE,GAAAolC,EAAA7/B,IAAAvF,UCv0BqBulC,WAAyBrC,GAQ9CphC,YAAA9B,EAAA6V,EAAAoL,GACA9e,MAAAnC,EAAA6V,EAAAoL,GAQA7e,KAAAmiC,mBAMAziC,GAAA6C,EAAA3E,EAAA,MACA,OAAAA,EAGA,oBAAA2E,GAAA3E,GAAAoC,KAAApC,MAAAmC,MAAAo/B,GAAA58B,EAAA3E,GAFA,oBAAA2E,GAAAxC,MAAAo/B,GAAA58B,IAYO,SAAA4/B,KACP,MAAAtjB,MAAA7e,KAAAiiC,eACAmB,EAAAvkB,EAAA7e,KAAAwhC,WAAA,GAGA,GAAA4B,KAAAjE,GAAA,gBACA,OAAAn/B,KAAAwhC,WAGA,UAAA9d,KAAA7E,EAEA,IAAA6E,EAAAyb,GAAA,aACA,YAKA,OAAAn/B,KAAAwhC,WCxEA,MAAA6B,GAAAjlC,OAAA,kBAcqBklC,WAAwBH,GAO7CzjC,YAAA9B,EAAA6V,EAAAoL,GACA9e,MAAAnC,EAAA6V,EAAAoL,GAQA7e,KAAAoH,IAAA,iBAYApH,KAAAoH,IAAA,gBAeA1H,GAAA6C,EAAA3E,EAAA,MACA,OAAAA,EAGA,mBAAA2E,GAAA3E,GAAAoC,KAAApC,MAAAmC,MAAAo/B,GAAA58B,EAAA3E,GAFA,mBAAA2E,GAAAxC,MAAAo/B,GAAA58B,GAYA3B,eACA,OAAAZ,KAAAujC,kBAAAF,IASAG,cAAA5iC,GACA,GAAAZ,KAAAujC,kBAAAF,IAMA,UAAa9T,EAAA,EAAa,4EAG1BvvB,KAAAyjC,mBAAAJ,GAAAziC,GAEAZ,KAAAnB,KAAA,cAAAuoB,GAAAxmB,GAEAZ,KAAAnB,KAAA,aAAAuoB,GACAxmB,EACA,YACA8iC,MAAA9iC,EAAA+iC,UAAAC,iBAAA5jC,MAIAA,KAAAmlB,SAAAvkB,EAAA+iC,UAAA,cACA3jC,KAAA0jC,UAAA9iC,EAAA8iC,WAAA9iC,EAAA+iC,UAAAC,iBAAA5jC,QAKAqyB,GAAKiR,GAAiBvS,IC/GtB,MAAA8S,GAAAzlC,OAAA,kBASqB0lC,WAA4BR,GAMjD5jC,YAAA9B,GACAmC,MAAAnC,GASAoC,KAAA+jC,SAAA,OAMArkC,GAAA6C,EAAA3E,EAAA,MACA,OAAAA,EAGA,eAAA2E,GAAA3E,GAAAoC,KAAApC,MAAAmC,MAAAo/B,GAAA58B,EAAA3E,GAFA,eAAA2E,GAAAxC,MAAAo/B,GAAA58B,GAMAwhC,eACA,OAAA/jC,KAAAujC,kBAAAM,IAGAE,gBACA/jC,KAAAyjC,mBAAAI,GAAAE,GAYAC,UAAApmC,GACAoC,KAAApC,cClDqBqmC,GAmBrBvkC,YAAA8H,MACA,IAAAA,EAAA08B,aAAA18B,EAAA28B,cAMA,UAAa5U,EAAA,EAAa,mGAG1B,GAAA/nB,EAAA48B,WAAA,WAAA58B,EAAA48B,WAAA,YAAA58B,EAAA48B,UACA,UAAa7U,EAAA,EACb,wFACK6U,UAAA58B,EAAA48B,YAeLpkC,KAAAkkC,WAAA18B,EAAA08B,YAAA,KASA18B,EAAA28B,cACAnkC,KAAA4Q,SAAmByzB,GAAQC,UAAA98B,EAAA28B,eAE3BnkC,KAAA4Q,SAAmByzB,GAAQC,UAAA98B,EAAA08B,WAAA,YAAA18B,EAAA48B,UAAA,gBAS3BpkC,KAAAokC,UAAA58B,EAAA48B,WAAA,UASApkC,KAAAukC,mBAAA/8B,EAAA+8B,iBASAvkC,KAAAwkC,UAAAh9B,EAAAg9B,QAUAxkC,KAAAykC,mBAAAj9B,EAAAi9B,iBAQAzkC,KAAA0kC,qBAAA1kC,KAAAkkC,WAAAlkC,KAAAkkC,WAAAloB,MAAArL,OAAA,KAQA3Q,KAAA2kC,mBAAA3kC,KAAAkkC,WAAAlkC,KAAAkkC,WAAAjoB,IAAAtL,OAAA,KAQAjR,CAAAtB,OAAAqa,YACA,OAAAzY,KAeAN,KAAAklC,GACA,IAAAC,EAAAvmC,EAAAwmC,EAEA,GACAA,EAAA9kC,KAAA4Q,WAEMi0B,OAAAvmC,SAAc0B,KAAA+kC,eACjBF,GAAAD,EAAAtmC,IAEHumC,IACA7kC,KAAA4Q,SAAAk0B,GAUAplC,OACA,iBAAAM,KAAAokC,UACApkC,KAAAglC,QAEAhlC,KAAAilC,YAYAvlC,QACA,IAAAkR,EAAA5Q,KAAA4Q,SAAAs0B,QACA,MAAAC,EAAAnlC,KAAA4Q,SACAD,EAAAC,EAAAD,OAGA,UAAAA,UAAAC,EAAAqnB,SAAAtnB,EAAA6wB,WACA,OAAWqD,MAAA,GAIX,GAAAl0B,IAAA3Q,KAAA2kC,oBAAA/zB,EAAAqnB,QAAAj4B,KAAAkkC,WAAAjoB,IAAAgc,OACA,OAAW4M,MAAA,GAIX,IAAAvjC,EAGA,GAAAqP,aAAyBsuB,GAAI,CAC7B,GAAAruB,EAAAw0B,QAIA,OAFAplC,KAAA4Q,SAAoByzB,GAAQgB,aAAA10B,GAE5B3Q,KAAAglC,QAGA1jC,EAAAqP,EAAA/Q,KAAAgR,EAAAqnB,aAEA32B,EAAAqP,EAAAwtB,SAAAvtB,EAAAqnB,QAGA,GAAA32B,aAAuBw/B,GASvB,OARA9gC,KAAAwkC,QAGA5zB,EAAAqnB,SAFArnB,EAAA,IAAmByzB,GAAQ/iC,EAAA,GAK3BtB,KAAA4Q,WAEA5Q,KAAAslC,mBAAA,eAAAhkC,EAAA6jC,EAAAv0B,EAAA,GACG,GAAAtP,aAA2B29B,GAAI,CAClC,GAAAj/B,KAAAukC,iBAIA,OAHA3zB,EAAA,IAAmByzB,GAAQ/iC,EAAA,GAC3BtB,KAAA4Q,WAEA5Q,KAAAglC,QACI,CACJ,IACA7yB,EADAozB,EAAAjkC,EAAA1B,KAAAwC,OAgBA,OAZAd,GAAAtB,KAAA2kC,oBACAY,EAAAvlC,KAAAkkC,WAAAjoB,IAAAgc,OACA9lB,EAAA,IAAgBmtB,GAASh+B,EAAA,EAAAikC,GACzB30B,EAAgByzB,GAAQgB,aAAAlzB,KAExBA,EAAA,IAAgBmtB,GAASh+B,EAAA,EAAAA,EAAA1B,KAAAwC,QAEzBwO,EAAAqnB,UAGAj4B,KAAA4Q,WAEA5Q,KAAAslC,mBAAA,OAAAnzB,EAAAgzB,EAAAv0B,EAAA20B,IAEG,oBAAAjkC,EAAA,CACH,IAAAkkC,EAEA,GAAAxlC,KAAAukC,iBACAiB,EAAA,MACI,CAIJA,GAFA70B,IAAA3Q,KAAA2kC,mBAAA3kC,KAAAkkC,WAAAjoB,IAAAgc,OAAAtnB,EAAA/Q,KAAAwC,QAEAwO,EAAAqnB,OAGA,MAAAwN,EAAA,IAAyBnG,GAAS3uB,EAAAC,EAAAqnB,OAAAuN,GAKlC,OAHA50B,EAAAqnB,QAAAuN,EACAxlC,KAAA4Q,WAEA5Q,KAAAslC,mBAAA,OAAAG,EAAAN,EAAAv0B,EAAA40B,GAMA,OAHA50B,EAAcyzB,GAAQgB,aAAA10B,GACtB3Q,KAAA4Q,WAEA5Q,KAAAykC,iBACAzkC,KAAAglC,QAEAhlC,KAAAslC,mBAAA,aAAA30B,EAAAw0B,EAAAv0B,GAaAlR,YACA,IAAAkR,EAAA5Q,KAAA4Q,SAAAs0B,QACA,MAAAC,EAAAnlC,KAAA4Q,SACAD,EAAAC,EAAAD,OAGA,UAAAA,UAAA,IAAAC,EAAAqnB,OACA,OAAW4M,MAAA,GAIX,GAAAl0B,GAAA3Q,KAAA0kC,sBAAA9zB,EAAAqnB,QAAAj4B,KAAAkkC,WAAAloB,MAAAic,OACA,OAAW4M,MAAA,GAIX,IAAAvjC,EAGA,GAAAqP,aAAyBsuB,GAAI,CAC7B,GAAAruB,EAAA80B,UAIA,OAFA1lC,KAAA4Q,SAAoByzB,GAAQsB,cAAAh1B,GAE5B3Q,KAAAilC,YAGA3jC,EAAAqP,EAAA/Q,KAAAgR,EAAAqnB,OAAA,QAEA32B,EAAAqP,EAAAwtB,SAAAvtB,EAAAqnB,OAAA,GAGA,GAAA32B,aAAuBw/B,GACvB,OAAA9gC,KAAAwkC,SAUA5zB,EAAAqnB,SACAj4B,KAAA4Q,WAEA5Q,KAAAslC,mBAAA,eAAAhkC,EAAA6jC,EAAAv0B,EAAA,KAZAA,EAAA,IAAmByzB,GAAQ/iC,IAAAkgC,YAC3BxhC,KAAA4Q,WAEA5Q,KAAAykC,iBACAzkC,KAAAilC,YAEAjlC,KAAAslC,mBAAA,aAAAhkC,EAAA6jC,EAAAv0B,IAQG,GAAAtP,aAA2B29B,GAAI,CAClC,GAAAj/B,KAAAukC,iBAIA,OAHA3zB,EAAA,IAAmByzB,GAAQ/iC,IAAA1B,KAAAwC,QAC3BpC,KAAA4Q,WAEA5Q,KAAAilC,YACI,CACJ,IACA9yB,EADAozB,EAAAjkC,EAAA1B,KAAAwC,OAIA,GAAAd,GAAAtB,KAAA0kC,qBAAA,CACA,MAAAzM,EAAAj4B,KAAAkkC,WAAAloB,MAAAic,OAGAsN,GADApzB,EAAA,IAAgBmtB,GAASh+B,EAAA22B,EAAA32B,EAAA1B,KAAAwC,OAAA61B,IACzBr4B,KAAAwC,OACAwO,EAAgByzB,GAAQsB,cAAAxzB,QAExBA,EAAA,IAAgBmtB,GAASh+B,EAAA,EAAAA,EAAA1B,KAAAwC,QAEzBwO,EAAAqnB,SAKA,OAFAj4B,KAAA4Q,WAEA5Q,KAAAslC,mBAAA,OAAAnzB,EAAAgzB,EAAAv0B,EAAA20B,IAEG,oBAAAjkC,EAAA,CACH,IAAAkkC,EAEA,GAAAxlC,KAAAukC,iBAMAiB,EAAA,MANA,CAEA,MAAAI,EAAAj1B,IAAA3Q,KAAA0kC,qBAAA1kC,KAAAkkC,WAAAloB,MAAAic,OAAA,EAEAuN,EAAA50B,EAAAqnB,OAAA2N,EAKAh1B,EAAAqnB,QAAAuN,EAEA,MAAAC,EAAA,IAAyBnG,GAAS3uB,EAAAC,EAAAqnB,OAAAuN,GAIlC,OAFAxlC,KAAA4Q,WAEA5Q,KAAAslC,mBAAA,OAAAG,EAAAN,EAAAv0B,EAAA40B,GAMA,OAHA50B,EAAcyzB,GAAQsB,cAAAh1B,GACtB3Q,KAAA4Q,WAEA5Q,KAAAslC,mBAAA,eAAA30B,EAAAw0B,EAAAv0B,EAAA,GAeAlR,mBAAA6C,EAAA4P,EAAAgzB,EAAAU,EAAAzjC,GA6BA,OAxBA+P,aAAuBmtB,KAEvBntB,EAAAqtB,aAAArtB,EAAAvS,KAAAwC,QAAA+P,EAAAotB,SAAA3/B,KAAAwC,SACA,WAAApC,KAAAokC,WAAApkC,KAAAkkC,YAAAlkC,KAAAkkC,WAAAjoB,IAAA6pB,QAAA9lC,KAAA4Q,UAKAu0B,EAAwBd,GAAQgB,aAAAlzB,EAAAotB,WAJhCsG,EAAoBxB,GAAQgB,aAAAlzB,EAAAotB,UAE5Bv/B,KAAA4Q,SAAAi1B,IAOA,IAAA1zB,EAAAqtB,eACA,YAAAx/B,KAAAokC,WAAApkC,KAAAkkC,YAAAlkC,KAAAkkC,WAAAloB,MAAA8pB,QAAA9lC,KAAA4Q,UAKAu0B,EAAwBd,GAAQsB,cAAAxzB,EAAAotB,WAJhCsG,EAAoBxB,GAAQsB,cAAAxzB,EAAAotB,UAE5Bv/B,KAAA4Q,SAAAi1B,MAQAhB,MAAA,EACAvmC,OACAiE,OACA4P,OACAgzB,mBACAU,eACAzjC,kBCtaqBiiC,GAOrB3kC,YAAAiR,EAAAsnB,GAQAj4B,KAAA2Q,SAQA3Q,KAAAi4B,SAUA8N,gBACA,OAAA/lC,KAAA2Q,OAAAwuB,GAAA,QACA,KAGAn/B,KAAA2Q,OAAAwtB,SAAAn+B,KAAAi4B,SAAA,KAUA+N,iBACA,OAAAhmC,KAAA2Q,OAAAwuB,GAAA,QACA,KAGAn/B,KAAA2Q,OAAAwtB,SAAAn+B,KAAAi4B,OAAA,SASAyN,gBACA,WAAA1lC,KAAAi4B,OASAmN,cACA,MAAAa,EAAAjmC,KAAA2Q,OAAAwuB,GAAA,QAAAn/B,KAAA2Q,OAAA/Q,KAAAwC,OAAApC,KAAA2Q,OAAA6wB,WAEA,OAAAxhC,KAAAi4B,SAAAgO,EASAtpC,WACA,OAAAqD,KAAA2Q,OAAAhU,KASAinC,sBACA,IAAAsC,EAAAlmC,KAAA2Q,OAEA,OAAAu1B,aAAiC5C,KAAe,CAChD,IAAA4C,EAAAv1B,OAGA,YAFAu1B,IAAAv1B,OAMA,OAAAu1B,EASAxmC,aAAAymC,GACA,MAAAC,EAAkB/B,GAAQC,UAAAtkC,MAE1Bi4B,EAAAmO,EAAAnO,OAAAkO,EAGA,OAFAC,EAAAnO,SAAA,IAAAA,EAEAmO,EAmBA1mC,wBAAAklC,EAAAp9B,MACAA,EAAA28B,cAAAnkC,KAEA,MAAAqmC,EAAA,IAAyBpC,GAAUz8B,GAGnC,OAFA6+B,EAAAzB,QAEAyB,EAAAz1B,SAQAlR,eACA,OAAAM,KAAA2Q,OAAAwuB,GAAA,qBACAn/B,KAAA2Q,QAEA3Q,KAAA2Q,OAAA6tB,cAAqCJ,aAAA,IAWrC1+B,kBAAAkR,GACA,MAAA2tB,EAAAv+B,KAAAw+B,eACAC,EAAA7tB,EAAA4tB,eAEA,IAAAnhC,EAAA,EAEA,KAAAkhC,EAAAlhC,IAAAohC,EAAAphC,IAAAkhC,EAAAlhC,IACAA,IAGA,WAAAA,EAAA,KAAAkhC,EAAAlhC,EAAA,GASAqC,QAAA4mC,GACA,OAAAtmC,KAAA2Q,QAAA21B,EAAA31B,QAAA3Q,KAAAi4B,QAAAqO,EAAArO,OAaAv4B,SAAA4mC,GACA,gBAAAtmC,KAAAumC,YAAAD,GAaA5mC,QAAA4mC,GACA,eAAAtmC,KAAAumC,YAAAD,GAUA5mC,YAAA4mC,GACA,GAAAtmC,KAAArD,OAAA2pC,EAAA3pC,KACA,kBAGA,GAAAqD,KAAA8lC,QAAAQ,GACA,aAIA,MAAA5H,EAAA1+B,KAAA2Q,OAAAwuB,GAAA,QAAAn/B,KAAA2Q,OAAAguB,aACA6H,EAAAF,EAAA31B,OAAAwuB,GAAA,QAAAmH,EAAA31B,OAAAguB,aAGAD,EAAAh9B,KAAA1B,KAAAi4B,QACAuO,EAAA9kC,KAAA4kC,EAAArO,QAGA,MAAAruB,EAAiBoqB,GAAa0K,EAAA8H,GAE9B,OAAA58B,GACA,aACA,eAEA,gBACA,cAEA,QACA,OAAA80B,EAAA90B,GAAA48B,EAAA58B,GAAA,kBAaAlK,UAAA8H,MAGA,OAFAA,EAAA28B,cAAAnkC,KAEA,IAAaikC,GAAUz8B,GAGvB9H,QACA,WAAa2kC,GAAQrkC,KAAA2Q,OAAA3Q,KAAAi4B,QAqBrBv4B,iBAAA+mC,EAAAxO,GACA,GAAAwO,aAAiCpC,GACjC,WAAArkC,KAAAymC,EAAA91B,OAAA81B,EAAAxO,QACG,CACH,MAAA32B,EAAAmlC,EAEA,UAAAxO,EACAA,EAAA32B,EAAA69B,GAAA,QAAA79B,EAAA1B,KAAAwC,OAAAd,EAAAkgC,eACI,cAAAvJ,EACJ,OAAAj4B,KAAA2lC,cAAArkC,GACI,YAAA22B,EACJ,OAAAj4B,KAAAqlC,aAAA/jC,GACI,OAAA22B,MAOJ,UAAc1I,EAAA,EACd,+HAIA,WAAc8U,GAAQ/iC,EAAA22B,IAWtBv4B,oBAAAyS,GAEA,GAAAA,EAAAgtB,GAAA,aACA,WAAckF,GAAQlyB,EAAAotB,SAAAptB,EAAAqtB,aAAArtB,EAAAvS,KAAAwC,QAGtB,IAAA+P,EAAAxB,OAOA,UAAa4e,EAAA,EAAa,mEAAsE5yB,KAAAwV,IAGhG,WAAakyB,GAAQlyB,EAAAxB,OAAAwB,EAAAvQ,MAAA,GAUrBlC,qBAAAyS,GAEA,GAAAA,EAAAgtB,GAAA,aACA,WAAckF,GAAQlyB,EAAAotB,SAAAptB,EAAAqtB,cAGtB,IAAArtB,EAAAxB,OAOA,UAAa4e,EAAA,EAAa,qEAAwE5yB,KAAAwV,IAGlG,WAAakyB,GAAQlyB,EAAAxB,OAAAwB,EAAAvQ,cCvXA8kC,GASrBhnC,YAAAsc,EAAAC,EAAA,MAOAjc,KAAAgc,QAAAkpB,QAQAllC,KAAAic,QAAAipB,QAAAlpB,EAAAkpB,QAgBAxlC,EAAAtB,OAAAqa,kBACA,IAAawrB,IAAaC,WAAAlkC,KAAAykC,kBAAA,IAQ1BkC,kBACA,OAAA3mC,KAAAgc,MAAA8pB,QAAA9lC,KAAAic,KASAshB,aACA,OAAAv9B,KAAAgc,MAAArL,SAAA3Q,KAAAic,IAAAtL,OAQAhU,WACA,OAAAqD,KAAAgc,MAAArf,KAoBA+C,cACA,IAAAsc,EAAAhc,KAAAgc,MAAA4qB,wBAAAC,IAAoEzC,UAAA,aACpEnoB,EAAAjc,KAAAic,IAAA2qB,wBAAAC,IAWA,OARA7qB,EAAArL,OAAAwuB,GAAA,SAAAnjB,EAAA0pB,YACA1pB,EAAWqoB,GAAQsB,cAAA3pB,EAAArL,SAGnBsL,EAAAtL,OAAAwuB,GAAA,SAAAljB,EAAAmpB,UACAnpB,EAASooB,GAAQgB,aAAAppB,EAAAtL,SAGjB,IAAa+1B,GAAK1qB,EAAAC,GAoBlBvc,aACA,IAAAsc,EAAAhc,KAAAgc,MAAA4qB,wBAAAC,IAEA,GAAA7qB,EAAA8qB,QAAA9mC,KAAAic,MAAAD,EAAA8pB,QAAA9lC,KAAAic,KACA,WAAcyqB,GAAK1qB,KAGnB,IAAAC,EAAAjc,KAAAic,IAAA2qB,wBAAAC,IAAgEzC,UAAA,aAChE,MAAA2C,EAAA/qB,EAAA+pB,UACAiB,EAAA/qB,EAAA+pB,WAWA,OARAe,KAAA5H,GAAA,UACAnjB,EAAA,IAAeqoB,GAAQ0C,EAAA,IAGvBC,KAAA7H,GAAA,UACAljB,EAAA,IAAaooB,GAAQ2C,IAAApnC,KAAAwC,SAGrB,IAAaskC,GAAK1qB,EAAAC,GASlBvc,QAAAunC,GACA,OAAAjnC,MAAAinC,GAAAjnC,KAAAgc,MAAA8pB,QAAAmB,EAAAjrB,QAAAhc,KAAAic,IAAA6pB,QAAAmB,EAAAhrB,KAUAvc,iBAAAkR,GACA,OAAAA,EAAAk2B,QAAA9mC,KAAAgc,QAAApL,EAAAiuB,SAAA7+B,KAAAic,KAaAvc,cAAAunC,EAAAC,GAAA,GACAD,EAAAN,cACAO,GAAA,GAGA,MAAAC,EAAAnnC,KAAAonC,iBAAAH,EAAAjrB,QAAAkrB,GAAAlnC,KAAAgc,MAAA8pB,QAAAmB,EAAAjrB,OACAqrB,EAAArnC,KAAAonC,iBAAAH,EAAAhrB,MAAAirB,GAAAlnC,KAAAic,IAAA6pB,QAAAmB,EAAAhrB,KAEA,OAAAkrB,GAAAE,EAkCA3nC,cAAAunC,GACA,MAAAK,KAqBA,OAnBAtnC,KAAAunC,eAAAN,IAGAjnC,KAAAonC,iBAAAH,EAAAjrB,QAGAsrB,EAAA5lC,KAAA,IAAqBglC,GAAK1mC,KAAAgc,MAAAirB,EAAAjrB,QAG1Bhc,KAAAonC,iBAAAH,EAAAhrB,MAGAqrB,EAAA5lC,KAAA,IAAqBglC,GAAKO,EAAAhrB,IAAAjc,KAAAic,OAI1BqrB,EAAA5lC,KAAA1B,KAAAklC,SAGAoC,EAwBA5nC,gBAAAunC,GACA,GAAAjnC,KAAAunC,eAAAN,GAAA,CAGA,IAAAO,EAAAxnC,KAAAgc,MACAyrB,EAAAznC,KAAAic,IAcA,OAZAjc,KAAAonC,iBAAAH,EAAAjrB,SAGAwrB,EAAAP,EAAAjrB,OAGAhc,KAAAonC,iBAAAH,EAAAhrB,OAGAwrB,EAAAR,EAAAhrB,KAGA,IAAcyqB,GAAKc,EAAAC,GAInB,YAaA/nC,UAAA8H,MAGA,OAFAA,EAAA08B,WAAAlkC,KAEA,IAAaikC,GAAUz8B,GASvB9H,oBACA,OAAAM,KAAAgc,MAAA0rB,kBAAA1nC,KAAAic,KAQAvc,QACA,WAAagnC,GAAK1mC,KAAAgc,MAAAhc,KAAAic,KAiBlBvc,UAAA8H,MACAA,EAAA08B,WAAAlkC,KACAwH,EAAAi9B,kBAAA,EAEA,MAAA4B,EAAA,IAAyBpC,GAAUz8B,GAEnC,UAAAlJ,KAAA+nC,QACA/nC,EAAA6T,KAiBAzS,cAAA8H,MACAA,EAAA08B,WAAAlkC,KAEA,MAAAqmC,EAAA,IAAyBpC,GAAUz8B,SAEnC6+B,EAAAz1B,SAEA,UAAAtS,KAAA+nC,QACA/nC,EAAAunC,aAUAnmC,eAAAunC,GACA,OAAAjnC,KAAAgc,MAAA6iB,SAAAoI,EAAAhrB,MAAAjc,KAAAic,IAAA6qB,QAAAG,EAAAjrB,OAeAtc,oCAAAioC,EAAA/B,EAAAgC,EAAA3B,GACA,WAAAjmC,KACA,IAAOqkC,GAAQsD,EAAA/B,GACf,IAAOvB,GAAQuD,EAAA3B,IAafvmC,mCAAAkR,EAAAu1B,GACA,MAAAnqB,EAAApL,EACAqL,EAAArL,EAAAi3B,aAAA1B,GAEA,OAAAA,EAAA,MAAAnmC,KAAAgc,EAAAC,GAAA,IAAAjc,KAAAic,EAAAD,GAWAtc,iBAAAc,GACA,OAAAR,KAAA8nC,6BAAAtnC,EAAA,EAAAA,IAAAghC,YAUA9hC,iBAAAyS,GACA,MAAA5H,EAAA4H,EAAAgtB,GAAA,aAAAhtB,EAAAstB,WAAA,EAEA,OAAAz/B,KAAA+nC,4BAA2C1D,GAAQsB,cAAAxzB,GAAA5H,IAKnD,SAAAs8B,GAAAvoC,GACA,SAAAA,EAAA6T,KAAAgtB,GAAA,sBAAA7gC,EAAA6T,KAAAgtB,GAAA,cCpce,SAAS6I,GAAKvvB,GAC7B,IAAAxW,EAAA,EAEA,UAAAgmC,KAAAxvB,EACAxW,IAGA,OAAAA,QCQqBimC,GAmErBxoC,YAAAyoC,EAAA,KAAAC,EAAA5gC,GAOAxH,KAAAqoC,WAQAroC,KAAAsoC,oBAAA,EAQAtoC,KAAAuoC,SAAA,EAQAvoC,KAAAwoC,oBAAA,GAEAxoC,KAAAyoC,MAAAN,EAAAC,EAAA5gC,GASAkhC,aACA,OAAA1oC,KAAAuoC,QASAI,yBACA,OAAA3oC,KAAAwoC,oBAYAI,aACA,IAAA5oC,KAAAqoC,QAAAjmC,OACA,YAEA,MAAAymC,EAAA7oC,KAAAqoC,QAAAroC,KAAAqoC,QAAAjmC,OAAA,GAGA,OAFApC,KAAAsoC,mBAAAO,EAAA5sB,IAAA4sB,EAAA7sB,OAEAkpB,QASA4D,YACA,IAAA9oC,KAAAqoC,QAAAjmC,OACA,YAEA,MAAAymC,EAAA7oC,KAAAqoC,QAAAroC,KAAAqoC,QAAAjmC,OAAA,GAGA,OAFApC,KAAAsoC,mBAAAO,EAAA7sB,MAAA6sB,EAAA5sB,KAEAipB,QASAyB,kBACA,WAAA3mC,KAAA+oC,YAAA/oC,KAAAqoC,QAAA,GAAA1B,YAQAoC,iBACA,OAAA/oC,KAAAqoC,QAAAjmC,OAQA4mC,iBACA,OAAAhpC,KAAA2mC,aAAA3mC,KAAAsoC,mBASA1E,sBACA,OAAA5jC,KAAA4oC,OACA5oC,KAAA4oC,OAAAhF,gBAGA,KAQAlkC,aACA,UAAAmpC,KAAA7oC,KAAAqoC,cACAQ,EAAA3D,QAYAxlC,gBACA,IAAAupC,EAAA,KAEA,UAAAJ,KAAA7oC,KAAAqoC,QACAY,IAAAJ,EAAA7sB,MAAA6iB,SAAAoK,EAAAjtB,SACAitB,EAAAJ,GAIA,OAAAI,IAAA/D,QAAA,KAUAxlC,eACA,IAAAwpC,EAAA,KAEA,UAAAL,KAAA7oC,KAAAqoC,QACAa,IAAAL,EAAA5sB,IAAA6qB,QAAAoC,EAAAjtB,OACAitB,EAAAL,GAIA,OAAAK,IAAAhE,QAAA,KAUAxlC,mBACA,MAAAypC,EAAAnpC,KAAAopC,gBAEA,OAAAD,IAAAntB,MAAAkpB,QAAA,KAUAxlC,kBACA,MAAA2pC,EAAArpC,KAAAspC,eAEA,OAAAD,IAAAptB,IAAAipB,QAAA,KAWAxlC,QAAA6pC,GACA,GAAAvpC,KAAA0oC,QAAAa,EAAAb,OACA,SAGA,GAAA1oC,KAAA0oC,QAAA1oC,KAAA2oC,oBAAAY,EAAAZ,mBACA,SAGA,GAAA3oC,KAAA+oC,YAAAQ,EAAAR,WACA,SACG,OAAA/oC,KAAA+oC,WACH,SAGA,IAAA/oC,KAAA4oC,OAAA9C,QAAAyD,EAAAX,UAAA5oC,KAAA8oC,MAAAhD,QAAAyD,EAAAT,OACA,SAGA,UAAAU,KAAAxpC,KAAAqoC,QAAA,CACA,IAAAoB,GAAA,EAEA,UAAAxC,KAAAsC,EAAAlB,QACA,GAAAmB,EAAA1D,QAAAmB,GAAA,CACAwC,GAAA,EACA,MAIA,IAAAA,EACA,SAIA,SAYA/pC,UAAA6pC,GACA,GAAAvpC,KAAAgpC,YAAAO,EAAAP,WACA,SAGA,MAAAU,EAAuB1B,GAAKhoC,KAAA2pC,aAI5B,GAAAD,GAHuB1B,GAAKuB,EAAAI,aAI5B,SAIA,MAAAD,EACA,SAIA,QAAAE,KAAA5pC,KAAA2pC,YAAA,CACAC,IAAAC,aAEA,IAAAJ,GAAA,EAEA,QAAAK,KAAAP,EAAAI,YAGA,GAFAG,IAAAD,aAEAD,EAAA5tB,MAAA8pB,QAAAgE,EAAA9tB,QAAA4tB,EAAA3tB,IAAA6pB,QAAAgE,EAAA7tB,KAAA,CACAwtB,GAAA,EACA,MAKA,IAAAA,EACA,SAKA,SAUA/pC,qBACA,OAAAM,KAAA+oC,WACA,YAGA,MAAAF,EAAA7oC,KAAAopC,gBACArC,EAAA8B,EAAA7sB,MAAA+pB,UACAiB,EAAA6B,EAAA5sB,IAAA+pB,WAEA,OAAAe,aAAqCjG,IAAOiG,GAAAC,EAAAD,EAAA,KAqE5CrnC,MAAAyoC,EAAAC,EAAA5gC,GACA,UAAA2gC,EACAnoC,KAAA+pC,eACA/pC,KAAAgqC,gBAAA5B,QACG,GAAAD,aAAiCD,IAASC,aAA0B8B,GACvEjqC,KAAA+pC,WAAA5B,EAAAwB,YAAAxB,EAAAa,YACAhpC,KAAAgqC,iBAA0BE,KAAA/B,EAAAO,OAAAyB,MAAAhC,EAAAQ,0BACvB,GAAAR,aAAiCzB,GACpC1mC,KAAA+pC,YAAA5B,GAAAC,KAAAgC,UACApqC,KAAAgqC,gBAAA5B,QACG,GAAAD,aAAiC9D,GACpCrkC,KAAA+pC,YAAA,IAA0BrD,GAAKyB,KAC/BnoC,KAAAgqC,gBAAA5B,QACG,GAAAD,aAAiCnK,GAAI,CACxC,MAAAoM,IAAA5iC,OAAA4iC,SACA,IAAAvB,EAEA,QAAAlnC,IAAAymC,EAMA,UAAc7Y,EAAA,EACd,qIAIAsZ,EADI,MAAAT,EACQ1B,GAAK2D,UAAAlC,GACb,MAAAC,EACQ1B,GAAK4D,UAAAnC,GAEjB,IAAgBzB,GAAOrC,GAAQC,UAAA6D,EAAAC,IAG/BpoC,KAAA+pC,YAAAlB,GAAAuB,GACApqC,KAAAgqC,gBAAAxiC,OACG,KAAWo4B,GAAUuI,GAWxB,UAAa5Y,EAAA,EAAa,6EAR1BvvB,KAAA+pC,WAAA5B,EAAAC,KAAAgC,UACApqC,KAAAgqC,gBAAA5B,GAUApoC,KAAA4nB,KAAA,UAcAloB,SAAA+mC,EAAAxO,GACA,UAAAj4B,KAAA4oC,OAMA,UAAarZ,EAAA,EACb,sGAIA,MAAAgb,EAAmBlG,GAAQC,UAAAmC,EAAAxO,GAE3B,WAAAsS,EAAAhE,YAAAvmC,KAAA8oC,OACA,OAGA,MAAAF,EAAA5oC,KAAA4oC,OAEA5oC,KAAAqoC,QAAA5hB,MAEA,UAAA8jB,EAAAhE,YAAAqC,GACA5oC,KAAAwqC,UAAA,IAAuB9D,GAAK6D,EAAA3B,IAAA,GAE5B5oC,KAAAwqC,UAAA,IAAuB9D,GAAKkC,EAAA2B,IAG5BvqC,KAAA4nB,KAAA,UAaAloB,WAAA+qC,EAAAC,GAAA,GAGAD,EAAA5mC,MAAAC,KAAA2mC,GAEAzqC,KAAAqoC,WAEA,UAAAQ,KAAA4B,EACAzqC,KAAAwqC,UAAA3B,GAGA7oC,KAAAsoC,qBAAAoC,EAgBAhrC,gBAAA8H,MACAxH,KAAAuoC,UAAA/gC,EAAA0iC,KACAlqC,KAAAwoC,oBAAAhhC,EAAA0iC,MAAA1iC,EAAA2iC,OAAA,GAoBAzqC,UAAAmpC,EAAAG,GAAA,GACA,KAAAH,aAA2BnC,IAM3B,UAAanX,EAAA,EACb,8GAKAvvB,KAAA2qC,WAAA9B,GACA7oC,KAAAsoC,qBAAAU,EAYAtpC,WAAAmpC,GACA,UAAA+B,KAAA5qC,KAAAqoC,QACA,GAAAQ,EAAAtB,eAAAqD,GAQA,UAAcrb,EAAA,EACd,6GACMsb,WAAAhC,EAAAiC,kBAAAF,IAKN5qC,KAAAqoC,QAAA3mC,KAAA,IAAyBglC,GAAKmC,EAAA7sB,MAAA6sB,EAAA5sB,OAU9BoW,GAAK6V,GAAWjjB,SCnqBKglB,GA2DrBvqC,YAAAyoC,EAAA,KAAAC,EAAA5gC,GAOAxH,KAAA+qC,WAAA,IAAwB7C,GAGxBloC,KAAA+qC,WAAAC,SAAA,UAAA5jB,GAAApnB,MAGAA,KAAA+qC,WAAAtC,MAAAN,EAAAC,EAAA5gC,GASAkhC,aACA,OAAA1oC,KAAA+qC,WAAArC,OASAC,yBACA,OAAA3oC,KAAA+qC,WAAApC,mBAYAC,aACA,OAAA5oC,KAAA+qC,WAAAnC,OASAE,YACA,OAAA9oC,KAAA+qC,WAAAjC,MASAnC,kBACA,OAAA3mC,KAAA+qC,WAAApE,YAQAoC,iBACA,OAAA/oC,KAAA+qC,WAAAhC,WAQAC,iBACA,OAAAhpC,KAAA+qC,WAAA/B,WASApF,sBACA,OAAA5jC,KAAA+qC,WAAAnH,gBAQAyE,cACA,OAAAroC,KAAA+qC,WAAA1C,QAQA3oC,mBACAM,KAAA+qC,WAAApB,YAWAjqC,gBACA,OAAAM,KAAA+qC,WAAA3B,gBAUA1pC,eACA,OAAAM,KAAA+qC,WAAAzB,eAUA5pC,mBACA,OAAAM,KAAA+qC,WAAAE,mBAUAvrC,kBACA,OAAAM,KAAA+qC,WAAAG,kBAUAxrC,qBACA,OAAAM,KAAA+qC,WAAAI,qBAWAzrC,QAAA6pC,GACA,OAAAvpC,KAAA+qC,WAAAjF,QAAAyD,GAYA7pC,UAAA6pC,GACA,OAAAvpC,KAAA+qC,WAAAK,UAAA7B,GAkEA7pC,OAAAyoC,EAAAC,EAAA5gC,GACAxH,KAAA+qC,WAAAtC,MAAAN,EAAAC,EAAA5gC,GAeA9H,UAAA+mC,EAAAxO,GACAj4B,KAAA+qC,WAAAM,SAAA5E,EAAAxO,IAUA5F,GAAK4X,GAAmBhlB,SCtVHqmB,GAOrB5rC,YAAA8H,MAOAxH,KAAAurC,UAQAvrC,KAAAwrC,SAAA,IAAA/kC,IAQAzG,KAAAyrC,YAAAjkC,EAAAkkC,YAAA,KAYA1rC,KAAA2rC,6BAAA,IAAAt8B,QAYArP,KAAA4rC,6BAAA,IAAAv8B,QAQArP,KAAA6rC,+BAgBAzpC,aACA,OAAApC,KAAAurC,OAAAnpC,OAQA6mC,YACA,OAAAjpC,KAAAurC,OAAA,SAQArC,WACA,OAAAlpC,KAAAurC,OAAAvrC,KAAAoC,OAAA,SAcA1C,IAAAyS,EAAAvQ,GACA,IAAAkqC,EACA,MAAAJ,EAAA1rC,KAAAyrC,YAEA,GAAAC,KAAAv5B,EAAA,CAGA,oBAFA25B,EAAA35B,EAAAu5B,IAQA,UAAcnc,EAAA,EAAa,6BAG3B,GAAAvvB,KAAA9B,IAAA4tC,GAMA,UAAcvc,EAAA,EAAa,2CAG3Bpd,EAAAu5B,GAAAI,EAAiC3nB,IAIjC,QAAAxiB,IAAAC,EACAA,EAAA5B,KAAAurC,OAAAnpC,YACG,GAAAR,EAAA5B,KAAAurC,OAAAnpC,QAAAR,EAAA,EAMH,UAAa2tB,EAAA,EAAa,qCAS1B,OANAvvB,KAAAurC,OAAAh4B,OAAA3R,EAAA,EAAAuQ,GAEAnS,KAAAwrC,SAAApkC,IAAA0kC,EAAA35B,GAEAnS,KAAA4nB,KAAA,MAAAzV,EAAAvQ,GAEA5B,KASAN,IAAAqsC,GACA,IAAA55B,EAEA,oBAAA45B,EACA55B,EAAAnS,KAAAwrC,SAAAttC,IAAA6tC,OACG,qBAAAA,EAQH,UAAaxc,EAAA,EAAa,0DAP1Bpd,EAAAnS,KAAAurC,OAAAQ,GAUA,OAAA55B,GAAA,KAUAzS,SAAAssC,GACA,IAAA75B,EAQA,OALAA,EADA,iBAAA65B,EACAhsC,KAAAwrC,SAAAttC,IAAA8tC,GAEAA,EAGAhsC,KAAAurC,OAAAj4B,QAAAnB,GAUAzS,OAAAusC,GACA,IAAArqC,EAAAyQ,EAAAF,EACA+5B,GAAA,EACA,MAAAR,EAAA1rC,KAAAyrC,YAyBA,GAvBA,iBAAAQ,GACA55B,EAAA45B,EAEAC,IADA/5B,EAAAnS,KAAAwrC,SAAAttC,IAAAmU,IAGAF,IACAvQ,EAAA5B,KAAAurC,OAAAj4B,QAAAnB,KAEG,iBAAA85B,GACHrqC,EAAAqqC,EAEAC,IADA/5B,EAAAnS,KAAAurC,OAAA3pC,IAGAuQ,IACAE,EAAAF,EAAAu5B,MAIAr5B,GADAF,EAAA85B,GACAP,GAEAQ,GAAA,IADAtqC,EAAA5B,KAAAurC,OAAAj4B,QAAAnB,MACAnS,KAAAwrC,SAAAttC,IAAAmU,IAGA65B,EAMA,UAAa3c,EAAA,EAAa,0CAG1BvvB,KAAAurC,OAAAh4B,OAAA3R,EAAA,GACA5B,KAAAwrC,SAAA/7B,OAAA4C,GAEA,MAAA85B,EAAAnsC,KAAA4rC,6BAAA1tC,IAAAiU,GAMA,OALAnS,KAAA4rC,6BAAAn8B,OAAA0C,GACAnS,KAAA2rC,6BAAAl8B,OAAA08B,GAEAnsC,KAAA4nB,KAAA,SAAAzV,EAAAvQ,GAEAuQ,EAYAzS,IAAAwlB,EAAAknB,GACA,OAAApsC,KAAAurC,OAAAx9B,IAAAmX,EAAAknB,GAYA1sC,KAAAwlB,EAAAknB,GACA,OAAApsC,KAAAurC,OAAAc,KAAAnnB,EAAAknB,GAYA1sC,OAAAwlB,EAAAknB,GACA,OAAApsC,KAAAurC,OAAA31B,OAAAsP,EAAAknB,GAOA1sC,QAMA,IALAM,KAAAssC,oBACAtsC,KAAAqlB,cAAArlB,KAAAssC,mBACAtsC,KAAAssC,kBAAA,MAGAtsC,KAAAoC,QACApC,KAAAoQ,OAAA,GAsGA1Q,OAAA6sC,GACA,GAAAvsC,KAAAssC,kBAMA,UAAa/c,EAAA,EAAa,6EAK1B,OAFAvvB,KAAAssC,kBAAAC,GASAC,GAAAC,IACAzsC,KAAA0sC,oBAAAv6B,GAAA,IAAAs6B,EAAAt6B,KAWAw6B,MAAAC,IACA,mBAAAA,EACA5sC,KAAA0sC,oBAAAv6B,GAAAy6B,EAAAz6B,IAEAnS,KAAA0sC,oBAAAv6B,KAAAy6B,MAYAltC,oBAAA9C,GACA,MAAA2vC,EAAAvsC,KAAAssC,kBAKAO,EAAA,CAAA/b,EAAAqb,EAAAvqC,KACA,MAAAkrC,EAAAP,EAAAD,mBAAAtsC,KACA+sC,EAAAR,EAAAX,6BAAA1tC,IAAAiuC,GAMA,GAAAW,GAAAC,EACA/sC,KAAA2rC,6BAAAvkC,IAAA+kC,EAAAY,GACA/sC,KAAA4rC,6BAAAxkC,IAAA2lC,EAAAZ,OACI,CACJ,MAAAh6B,EAAAvV,EAAAuvC,GAGA,IAAAh6B,EAGA,YAFAnS,KAAA6rC,4BAAAnqC,KAAAE,GAOA,IAAAorC,EAAAprC,EAmBA,UAAAqrC,KAAAjtC,KAAA6rC,4BACAjqC,EAAAqrC,GACAD,IAiBA,UAAAC,KAAAV,EAAAV,4BACAmB,GAAAC,GACAD,IAIAhtC,KAAA2rC,6BAAAvkC,IAAA+kC,EAAAh6B,GACAnS,KAAA4rC,6BAAAxkC,IAAA+K,EAAAg6B,GACAnsC,KAAAmD,IAAAgP,EAAA66B,GAIA,QAAA3vC,EAAA,EAAoBA,EAAAkvC,EAAAV,4BAAAzpC,OAA2D/E,IAC/E2vC,GAAAT,EAAAV,4BAAAxuC,IACAkvC,EAAAV,4BAAAxuC,OAOA,UAAA8uC,KAAAI,EACAM,EAAA,EAAAV,EAAAI,EAAAW,SAAAf,IAIAnsC,KAAAmlB,SAAAonB,EAAA,MAAAM,GAGA7sC,KAAAmlB,SAAAonB,EAAA,UAAAzb,EAAAqb,EAAAvqC,KACA,MAAAuQ,EAAAnS,KAAA2rC,6BAAAztC,IAAAiuC,GAEAh6B,GACAnS,KAAAoQ,OAAA+B,GAKAnS,KAAA6rC,4BAAA7rC,KAAA6rC,4BAAAn/B,OAAA,CAAA9C,EAAAqjC,KACArrC,EAAAqrC,GACArjC,EAAAlI,KAAAurC,EAAA,GAGArrC,EAAAqrC,GACArjC,EAAAlI,KAAAurC,GAGArjC,SAUAlK,CAAAtB,OAAAqa,YACA,OAAAzY,KAAAurC,OAAAntC,OAAAqa,aAmBA4Z,GAAKiZ,GAAYrmB,SCjmBIkoB,GAIrBztC,cAOAM,KAAA2jC,UAAA,IAAuBsG,GAavBjqC,KAAAotC,MAAA,IAAmB9B,IAAaI,WAAA,aAUhC1rC,KAAAoH,IAAA,iBAYApH,KAAAoH,IAAA,gBAYApH,KAAAoH,IAAA,kBAQApH,KAAAqtC,YAAA,IAAArqC,IAWAtD,QAAA9B,EAAA,QACA,OAAAoC,KAAAotC,MAAAlvC,IAAAN,GAqBA8B,kBAAA4tC,GACAttC,KAAAqtC,YAAAlqC,IAAAmqC,GASA5tC,gBAAA6tC,GACA,IAAAC,GAAA,EAEA,GACA,UAAAtoB,KAAAllB,KAAAqtC,YAGA,GAFAG,EAAAtoB,EAAAqoB,GAGA,YAGGC,IAYHnb,GAAK8a,GAAUpc,IC3If,MAAA0c,GAAA,SAeqBC,WAAyB5M,GAQ9CphC,YAAA9B,EAAA6V,EAAAoL,GACA9e,MAAAnC,EAAA6V,EAAAoL,GAQA7e,KAAAmiC,gBAAyBwL,GAQzB3tC,KAAA4tC,UAAAH,GASAztC,KAAA6tC,IAAA,KAWA7tC,KAAA8tC,aAAA,KASArpB,eACA,OAAAzkB,KAAA4tC,UAUAv7B,SACA,OAAArS,KAAA6tC,IAeAnuC,wBACA,UAAAM,KAAAqS,GAMA,UAAakd,EAAA,EACb,gIAKA,WAAAvsB,IAAAhD,KAAA8tC,cAMApuC,GAAA6C,EAAA3E,EAAA,MACA,OAAAA,EAGA,oBAAA2E,GAAA3E,GAAAoC,KAAApC,MAAAmC,MAAAo/B,GAAA58B,EAAA3E,GAFA,oBAAA2E,GAAAxC,MAAAo/B,GAAA58B,GA2BA7C,UAAAiiC,GAEA,cAAA3hC,KAAAqS,IAAA,OAAAsvB,EAAAtvB,GACArS,KAAAqS,KAAAsvB,EAAAtvB,GAGAtS,MAAAqrC,UAAAzJ,IAAA3hC,KAAAykB,UAAAkd,EAAAld,SAWA/kB,OAAAqiC,GACA,MAAAG,EAAAniC,MAAA8Z,OAAAkoB,GAQA,OALAG,EAAA0L,UAAA5tC,KAAA4tC,UAGA1L,EAAA2L,IAAA7tC,KAAA6tC,IAEA3L,GAcA,SAASyL,KAET,GAAAI,GAAA/tC,MACA,YAGA,IAAAQ,EAAAR,KAAA2Q,OAGA,KAAAnQ,KAAA2+B,GAAA,sBACA,GAAA4O,GAAAvtC,GAAA,EACA,YAGAA,IAAAmQ,OAGA,OAAAnQ,GAAAutC,GAAAvtC,GAAA,EACA,KAIAR,KAAAwhC,WAOA,SAAAuM,GAAAvtC,GACA,OAAAqD,MAAAC,KAAAtD,EAAAyhC,eAAArsB,OAAApV,MAAA2+B,GAAA,cAAA/8B,OAnCAsrC,GAAgBD,0BC3KKO,WAAqBlN,GAY1CphC,YAAA9B,EAAAkJ,EAAA+X,GACA9e,MAAAnC,EAAAkJ,EAAA+X,GAQA7e,KAAAmiC,gBAAyB8L,GAMzBvuC,GAAA6C,EAAA3E,EAAA,MACA,OAAAA,EAGA,gBAAA2E,GAAA3E,GAAAoC,KAAApC,MAAAmC,MAAAo/B,GAAA58B,EAAA3E,GAFA,gBAAA2E,GAAAxC,MAAAo/B,GAAA58B,GAaA7C,aAAAkC,EAAAygC,GACA,GAAAA,iBAAmCrE,IAAIn6B,MAAAC,KAAAu+B,GAAAjgC,OAAA,GAMvC,UAAamtB,EAAA,EAAa,mFAQ1B,SAAS0e,KACT,YCpEA,MAAAC,GAAAC,UAAAD,UAAA5lC,cAiCe,IAAA8lC,IAnBfC,MA2BO,SAAAH,GACP,OAAAA,EAAA56B,QAAA,gBA5BA+6B,CAAAH,IAQAI,OA6BO,SAAAJ,GACP,QAAAA,EAAA/tC,MAAA,oBA9BAmuC,CAAAJ,IAQAK,QA+BO,SAAAL,GACP,QAAAA,EAAA/tC,MAAA,cAhCAouC,CAAAL,KC3BA,MAAAM,IACAC,IAAA,OACAC,IAAA,QACAC,IAAA,OAGAC,IACAC,KAAA,IACA1I,MAAA,IACA2I,IAAA,KAeOC,GA0FP,WACA,MAAAA,GACAC,UAAA,GACAC,QAAA,GACAC,WAAA,GACAC,UAAA,GACAC,UAAA,EACA3/B,OAAA,GACA4/B,MAAA,GACAC,MAAA,GACAC,IAAA,GACAC,IAAA,EAIAX,KAAA,QAGAY,IAAA,QACAtJ,MAAA,QACA2I,IAAA,SAIA,QAAAY,EAAA,GAAqBA,GAAA,GAAYA,IAAA,CACjC,MAAAC,EAAArqC,OAAAsqC,aAAAF,GAEAX,EAAAY,EAAArnC,eAAAonC,EAIA,QAAAA,EAAA,GAAqBA,GAAA,GAAYA,IACjCX,EAAAW,EAAA,IAAAA,EAIA,QAAAA,EAAA,IAAsBA,GAAA,IAAaA,IACnCX,EAAA,KAAAW,EAAA,MAAAA,EAGA,OAAAX,EAlIOc,GAWA,SAAAC,GAAAlxC,GACP,IAAAmxC,EAEA,oBAAAnxC,GAGA,KAFAmxC,EAAAhB,GAAAnwC,EAAA0J,gBASA,UAAainB,EAAA,EAAa,2CAA8C3wB,aAGxEmxC,EAAAnxC,EAAAmxC,SACAnxC,EAAAoxC,OAAAjB,GAAAD,IAAA,IACAlwC,EAAAqxC,QAAAlB,GAAAF,KAAA,IACAjwC,EAAAsxC,SAAAnB,GAAA5I,MAAA,GAGA,OAAA4J,EAqBO,SAAAI,GAAAC,GAKP,MAJA,iBAAAA,IACAA,EAAAC,GAAAD,IAGAA,EACAriC,IAAAnP,GAAA,iBAAAA,EAAAkxC,GAAAlxC,MACA8N,OAAA,CAAA9N,EAAA0xC,MAAA1xC,EAAA,GAwEA,SAAAyxC,GAAAD,GACA,OAAAA,EAAAl5B,MAAA,kBC1IqBq5B,WAAkBzP,GAYvCphC,YAAA9B,EAAAkJ,EAAA+X,GACA9e,MAAAnC,EAAAkJ,EAAA+X,GAQA7e,KAAAmiC,gBAAyBqO,GAMzB9wC,GAAA6C,EAAA3E,EAAA,MACA,OAAAA,EAGA,aAAA2E,GAAA3E,GAAAoC,KAAApC,MAAAmC,MAAAo/B,GAAA58B,EAAA3E,GAFA,aAAA2E,GAAAxC,MAAAo/B,GAAA58B,GAWA7C,aAAAkC,EAAAygC,GACA,GAAAA,iBAAmCrE,IAAIn6B,MAAAC,KAAAu+B,GAAAjgC,OAAA,GAMvC,UAAamtB,EAAA,EAAa,4EAoB1B7vB,OAAA+wC,GACA,OAAAzwC,KAAA0wC,aAAAD,GAUA/wC,aAAA+wC,GACA,MAAAE,EAAAF,EAAAltC,cAAAvD,KAAApC,MAEA,UAAAgB,KAAAoB,KAAA4wC,mBACAD,EAAA1nC,aAAArK,EAAAoB,KAAAiX,aAAArY,IAGA,OAAA+xC,GAaO,SAAAE,GAAAC,GACPA,EAAAlwC,SAAAiwB,GAAA,WAAAC,EAAAlxB,KAaA,SAAAkxB,EAAAlxB,EAAAmxC,GACA,GAAAnxC,EAAAmwC,SAAsBhB,GAAQG,WAAA,CAC9B,MAAA8B,EAAApxC,EAAAqxC,UAAAC,cAAAC,YAAAC,eACAC,EAAA,GAAAL,EAAAjI,YAAAiI,EAAAM,WAAA,GAAAC,UAGA,GAAAF,GAAAzxC,EAAAswC,SAAA,CACA,MAAAsB,EAAAR,EAAAS,UACAC,EAAAV,EAAAW,YAEAC,EAAAb,EAAAc,kBAAAL,EAAAE,GAGA,UAAAE,EACA,OAIA,IAAAE,GAAA,EAEA,MAAAC,EAAAH,EAAAhL,wBAAAtoC,IACAA,EAAA6T,KAAAgtB,GAAA,eAEA2S,GAAA,MAIAxzC,EAAA6T,KAAAgtB,GAAA,eAAA7gC,EAAA6T,KAAAgtB,GAAA,uBAUA,GAAA2S,EAAA,CACA,MAAAE,EAAAjB,EAAAkB,kBAAAF,GAEAV,EAEAL,EAAAkB,SAAAF,EAAArhC,OAAAqhC,EAAA/Z,QAGA+Y,EAAAmB,OAAAH,EAAArhC,OAAAqhC,EAAA/Z,YA1DAma,CAAAthB,EAAAlxB,EAAAkxC,EAAAC,eAMA,SAASP,KACT,kBCtHqB6B,GAQrB3yC,YAAAmf,GAOA7e,KAAAihC,aAEApiB,GACA7e,KAAAkhC,aAAA,EAAAriB,GAWAnf,CAAAtB,OAAAqa,YACA,OAAAzY,KAAAihC,UAAA7iC,OAAAqa,YASA+oB,iBACA,OAAAxhC,KAAAihC,UAAA7+B,OASAq/B,cACA,WAAAzhC,KAAAwhC,WASA7kC,WACA,OAAAqD,KASA2Q,aACA,YAWAjR,GAAA6C,GACA,0BAAAA,EAUA7C,aAAA0iC,GACA,OAAApiC,KAAAkhC,aAAAlhC,KAAAwhC,WAAAY,GASA1iC,SAAAkC,GACA,OAAA5B,KAAAihC,UAAAr/B,GASAlC,cAAA4B,GACA,OAAAtB,KAAAihC,UAAA3tB,QAAAhS,GAQA5B,cACA,OAAAM,KAAAihC,UAAA7iC,OAAAqa,YAWA/Y,aAAAkC,EAAAwgC,GACApiC,KAAA++B,YAAA,WAAA/+B,MACA,IAAAiC,EAAA,EAEA,MAAAogC,EAsDA,SAAkBA,GAElB,oBAAAA,EACA,WAAepD,GAAIoD,IAGZzC,GAAUyC,KACjBA,OAIA,OAAAx+B,MAAAC,KAAAu+B,GACAt0B,IAAAzM,GACA,iBAAAA,EACA,IAAe29B,GAAI39B,GAGnBA,aAAwBg+B,GACxB,IAAeL,GAAI39B,EAAA1B,MAGnB0B,GA3EgBgxC,CAASlQ,GAEzB,UAAA9gC,KAAA+gC,EAEA,OAAA/gC,EAAAqP,QACArP,EAAAihC,UAGAjhC,EAAAqP,OAAA3Q,KAEAA,KAAAihC,UAAA1tB,OAAA3R,EAAA,EAAAN,GACAM,IACAK,IAGA,OAAAA,EAUAvC,gBAAAkC,EAAA4gC,EAAA,GACAxiC,KAAA++B,YAAA,WAAA/+B,MAEA,QAAA3C,EAAAuE,EAAsBvE,EAAAuE,EAAA4gC,EAAqBnlC,IAC3C2C,KAAAihC,UAAA5jC,GAAAsT,OAAA,KAGA,OAAA3Q,KAAAihC,UAAA1tB,OAAA3R,EAAA4gC,GAWA9iC,YAAA6C,EAAAjB,GACAtB,KAAA4nB,KAAA,UAAArlB,EAAAjB,IAIA+wB,GAAKggB,GAAkBptB,SCzKFstB,GACrB7yC,YAAAkB,GAKAZ,KAAAY,WASAZ,KAAAwyC,aAAA,IAAA/rC,IAuEA/G,aAAAyoC,EAAAC,EAAA5gC,GACAxH,KAAAY,SAAA+iC,UAAA8O,OAAAtK,EAAAC,EAAA5gC,GAaA9H,kBAAA+mC,EAAAxO,GACAj4B,KAAAY,SAAA+iC,UAAA+O,UAAAjM,EAAAxO,GAWAv4B,WAAAE,GACA,WAAaq/B,GAAIr/B,GAsBjBF,uBAAA9B,EAAAkJ,EAAAU,MACA,MAAAmrC,EAAA,IAA+BjF,GAAgB9vC,EAAAkJ,GAU/C,OARAU,EAAAid,WACAkuB,EAAA/E,UAAApmC,EAAAid,UAGAjd,EAAA6K,KACAsgC,EAAA9E,IAAArmC,EAAA6K,IAGAsgC,EAaAjzC,uBAAA9B,EAAAkJ,GACA,WAAaq8B,GAAgBvlC,EAAAkJ,GAa7BpH,sBAAA9B,EAAAkJ,GACA,MAAA88B,EAAA,IAA8BN,GAAe1lC,EAAAkJ,GAG7C,OAFA88B,EAAAJ,UAAAxjC,KAAAY,SAEAgjC,EAaAlkC,mBAAA9B,EAAAkJ,GACA,WAAaknC,GAAYpwC,EAAAkJ,GAuBzBpH,gBAAA9B,EAAAkJ,EAAA8rC,GACA,MAAAC,EAAA,IAAwBtC,GAAS3yC,EAAAkJ,GAMjC,OAJA8rC,IACAC,EAAAtkC,OAAAqkC,GAGAC,EAYAnzC,aAAAd,EAAAN,EAAAkC,GACAA,EAAAsyC,cAAAl0C,EAAAN,GAWAoB,gBAAAd,EAAA4B,GACAA,EAAAuyC,iBAAAn0C,GAYAc,SAAAkiC,EAAAphC,GACAA,EAAAwyC,UAAApR,GAYAliC,YAAAkiC,EAAAphC,GACAA,EAAAyyC,aAAArR,GAgBAliC,SAAAV,EAAAV,EAAAkC,GACO8yB,GAAat0B,SAAA2C,IAAAnB,IACpBA,EAAAlC,GAGAkC,EAAA0yC,UAAAl0C,EAAAV,GAYAoB,YAAAV,EAAAwB,GACAA,EAAA2yC,aAAAn0C,GAWAU,kBAAAd,EAAAN,EAAAkC,GACAA,EAAAijC,mBAAA7kC,EAAAN,GAUAoB,qBAAAd,EAAA4B,GACA,OAAAA,EAAA4yC,sBAAAx0C,GA0CAc,gBAAA2zC,GACA,OAAAA,aAAkChP,GAClCrkC,KAAAszC,iBAAAD,GAEArzC,KAAAuzC,sBAAAF,GA2BA3zC,eAAAkR,GACA,MAAApQ,EAAAoQ,EAAAD,OAEA,IAAAnQ,EAAA2+B,GAAA,oBAMA,UAAa5P,EAAA,EACb,yGAIA,IAAA/uB,EAAAmQ,OAMA,UAAa4e,EAAA,EAAa,yDAG1B,GAAA3e,EAAA80B,UACA,OAAUrB,GAAQsB,cAAAnlC,GACf,IAAAoQ,EAAAw0B,QAAA,CACH,MAAAoO,EAAAhzC,EAAAqZ,QAAA,GAEA7Z,KAAAiQ,OAAgBo0B,GAAQgB,aAAA7kC,GAAAgzC,GAExB,MAAAC,EAAA,IAA2B/M,GAAK91B,EAAYyzB,GAAQC,UAAA9jC,EAAA,QACpDkzC,EAAA,IAA8BrP,GAAQmP,EAAA,GAEtCxzC,KAAAkQ,KAAAujC,EAAAC,GAGA,OAASrP,GAAQgB,aAAA7kC,GA6BjBd,gBAAAkR,GACA,MAAA+iC,EAAA/iC,EAAAqnB,OACA2b,EAAAhjC,EAAAD,OAGA,GAAAijC,EAAAzU,GAAA,QACA,OAAAvuB,EAIA,GAAAgjC,EAAAzU,GAAA,yBAAAyU,EAAApS,WAAA,CACA,MAAA7wB,EAAAijC,EAAAjjC,OACAsnB,EAAA2b,EAAAhyC,MAKA,OAHAgyC,EAAArR,UACAviC,KAAA6zC,+BAAAD,GAEA5zC,KAAA8zC,gBAAA,IAAoCzP,GAAQ1zB,EAAAsnB,IAG5C,MAAA+N,EAAA4N,EAAAzV,SAAAwV,EAAA,GACA5N,EAAA6N,EAAAzV,SAAAwV,GAGA,IAAA3N,IAAAD,EACA,OAAAn1B,EAIA,GAAAo1B,EAAA7G,GAAA,SAAA4G,EAAA5G,GAAA,QACA,OAAA4U,GAAA/N,EAAAD,GAGA,GAAAC,EAAA7G,GAAA,qBAAA4G,EAAA5G,GAAA,qBAAA6G,EAAAoF,UAAArF,GAAA,CAEA,MAAA9jC,EAAA+jC,EAAAxE,WAQA,OAPAwE,EAAAgO,aAAAjO,EAAA9D,eAEA8D,EAAAxD,UACAviC,KAAA6zC,+BAAA9N,GAIA/lC,KAAA8zC,gBAAA,IAAoCzP,GAAQ2B,EAAA/jC,IAG5C,OAAA2O,EAqBAlR,gBAAAkR,GACA,MAAAqjC,EAAArjC,EAAAo1B,WACAjB,EAAAn0B,EAAAm1B,UAEA,KAAAkO,GAAAlP,GAAAkP,EAAA9U,GAAA,qBAAA4F,EAAA5F,GAAA,qBAMA,UAAa5P,EAAA,EAAa,4GAI1B,MAAA6T,EAAA6Q,EAAA9V,SAAA8V,EAAAzS,WAAA,GACA0S,EAAA9Q,aAA2CnE,GAAOoF,GAAQC,UAAAlB,EAAA,OAAiCiB,GAAQC,UAAA2P,EAAA,OAKnG,OAHAj0C,KAAAkQ,KAAaw2B,GAAK2D,UAAAtF,GAAoBV,GAAQC,UAAA2P,EAAA,QAC9Cj0C,KAAAoQ,OAAes2B,GAAK4D,UAAAvF,IAEpBmP,EAsBAx0C,OAAAkR,EAAAyxB,IAysCA,SAAA8R,EAAA9R,GACA,UAAA/gC,KAAA+gC,EAAA,CACA,IAAA+R,GAAAC,KAAAC,GAAAhzC,aAAAgzC,GASA,UAAa/kB,EAAA,EAAa,mCAG1BjuB,EAAA69B,GAAA,SACAgV,EAAA7yC,EAAA2gC,iBAptCAkS,CAHA9R,EAAUzC,GAAUyC,eAKpB,MAAA5zB,EAAA8lC,GAAA3jC,GAEA,IAAAnC,EAMA,UAAa8gB,EAAA,EAAa,0CAG1B,MAAAilB,EAAAx0C,KAAAszC,iBAAA1iC,GAAA,GACAxO,EAAAqM,EAAAyyB,aAAAsT,EAAAvc,OAAAoK,GAEA,UAAA/gC,KAAA+gC,EACAriC,KAAAy0C,0BAAAnzC,GAGA,MAAAozC,EAAAF,EAAA3M,aAAAzlC,GACA4Z,EAAAhc,KAAA8zC,gBAAAU,GAGA,OAAApyC,EACA,WAAcskC,GAAK1qB,KAChB,CAEHA,EAAA8pB,QAAA0O,IACAE,EAAAzc,SAGA,MAAAhc,EAAAjc,KAAA8zC,gBAAAY,GAEA,WAAchO,GAAK1qB,EAAAC,IAgBnBvc,OAAAi1C,GACA,MAAA9L,EAAA8L,aAAuCjO,GAAKiO,EAAiBjO,GAAK4D,UAAAqK,GAKlE,GAHAC,GAAA/L,GAGAA,EAAAlC,YACA,WAAc0L,GAId,MAASr2B,MAAA64B,EAAA54B,IAAA64B,GAAmC90C,KAAAuzC,sBAAA1K,GAAA,GAC5CkM,EAAAF,EAAAlkC,OAEA1O,EAAA6yC,EAAA7c,OAAA4c,EAAA5c,OAGAvY,EAAAq1B,EAAAjW,gBAAA+V,EAAA5c,OAAAh2B,GAEA,UAAAX,KAAAoe,EACA1f,KAAA6zC,+BAAAvyC,GAIA,MAAA0zC,EAAAh1C,KAAA8zC,gBAAAe,GAKA,OAJAhM,EAAA7sB,MAAAg5B,EACAnM,EAAA5sB,IAAA+4B,EAAA9P,QAGA,IAAamN,GAAgB3yB,GAa7BhgB,MAAAmpC,EAAAroC,GACAo0C,GAAA/L,GAIA,MAAAloC,EAAAkoC,EAAAoM,WACA7Q,UAAA,WACAK,kBAAA,IAIA,UAAAyQ,KAAAv0C,EAAA,CACA,MAAAwR,EAAA+iC,EAAA/iC,KACA,IAAAgjC,EAGA,GAAAhjC,EAAAgtB,GAAA,YAAA3+B,EAAA4qC,UAAAj5B,GAEAgjC,EAAoBzO,GAAK4D,UAAAn4B,QAErB,IAAA+iC,EAAArP,aAAAiB,QAAA+B,EAAA7sB,QAAA7J,EAAAgtB,GAAA,cAEJ,MAAApc,EAAA5Q,EAAAqsB,eAAA6N,KAAA+I,GACAA,EAAAjW,GAAA,YAAA3+B,EAAA4qC,UAAAgK,IAIAryB,IACAoyB,EAAqBzO,GAAK2D,UAAAtnB,IAK1BoyB,IAEAA,EAAAl5B,IAAA6qB,QAAA+B,EAAA5sB,OACAk5B,EAAAl5B,IAAA4sB,EAAA5sB,KAGAk5B,EAAAn5B,MAAA6iB,SAAAgK,EAAA7sB,SACAm5B,EAAAn5B,MAAA6sB,EAAA7sB,OAIAhc,KAAAoQ,OAAA+kC,KAiBAz1C,KAAA+zC,EAAAC,GACA,IAAArR,EAEA,GAAAqR,EAAA5M,QAAA2M,EAAAx3B,KAAA,CAGA,MAAAtL,GAFA+iC,EAAA1zC,KAAAszC,iBAAAI,GAAA,IAEA/iC,OACA0kC,EAAA1kC,EAAA6wB,WAEAiS,EAAAzzC,KAAAuzC,sBAAAE,GAAA,GAEApR,EAAAriC,KAAAoQ,OAAAqjC,GAEAC,EAAAzb,QAAAtnB,EAAA6wB,WAAA6T,OAEAhT,EAAAriC,KAAAoQ,OAAAqjC,GAGA,OAAAzzC,KAAAiQ,OAAAyjC,EAAArR,GAwBA3iC,KAAAmpC,EAAAxjC,GACA,KAAAA,aAA+BqoC,IAC/B,UAAane,EAAA,EAAa,sCAK1B,GAFAqlB,GAAA/L,GAEAA,EAAAlC,YAGG,CAEH,IAAA/1B,EAAAi4B,EAAA7sB,MAEApL,EAAAD,OAAAwuB,GAAA,aAm2BA,SAAAxuB,GACA,OAAA9M,MAAAC,KAAA6M,EAAAsxB,eAAAoS,KAAA3wB,MAAAyb,GAAA,cAp2BAmW,CAAA1kC,EAAAD,UACAC,IAAAg2B,wBAAAtoC,KAAA6T,KAAAgtB,GAAA,eAGAvuB,EAAA5Q,KAAAu1C,cAAA3kC,EAAAvL,GACA,MAAAmwC,EAAAx1C,KAAAY,SAAA+iC,UAOA,OAJA6R,EAAA7O,aAAA6O,EAAAvK,mBAAAnF,QAAA+C,EAAA7sB,QACAhc,KAAAy1C,aAAA7kC,GAGA,IAAc81B,GAAK91B,GAjBnB,OAAA5Q,KAAA01C,WAAA7M,EAAAxjC,GA+BA3F,OAAAmpC,EAAAxjC,GACA,KAAAA,aAA+BqoC,IAM/B,UAAane,EAAA,EAAa,wCAM1B,GAHAqlB,GAAA/L,GAGAA,EAAAlC,YACA,OAAAkC,EAIA,MAAS7sB,MAAA64B,EAAA54B,IAAA64B,GAAmC90C,KAAAuzC,sBAAA1K,GAAA,GAK5C,GAAAiM,EAAAhP,QAAA+O,EAAAhN,aAAA,KACA,MAAAvmC,EAAAuzC,EAAA9O,UAGA,IAAA1gC,EAAA+lC,UAAA9pC,iBAAwDosC,IAAgB1tC,KAAA21C,wBAAAtwC,EAAA/D,GAAA,CACxE,MAAA0a,EAAAhc,KAAA8zC,gBAAAe,GAEA74B,EAAA8pB,QAAA+O,IACAC,EAAA7c,SAGA,MAAAhc,EAAAjc,KAAA8zC,gBAAAgB,GAEA,WAAepO,GAAK1qB,EAAAC,IAIpB,MAAA84B,EAAAF,EAAAlkC,OAGAilC,EAAA51C,KAAA61C,gBAAAd,EAAAF,EAAA5c,OAAA6c,EAAA7c,OAAA5yB,GAGA2W,EAAAhc,KAAA8zC,gBAAA8B,EAAA55B,OAGAA,EAAA8pB,QAAA8P,EAAA55B,QACA45B,EAAA35B,IAAAgc,SAGA,MAAAhc,EAAAjc,KAAA8zC,gBAAA8B,EAAA35B,KAEA,WAAayqB,GAAK1qB,EAAAC,GAelBvc,OAAAo2C,EAAAC,GACA,MAAAvC,EAAA,IAAyBrQ,GAAgB2S,EAAAC,EAAAC,iBAMzC,OAJAh2C,KAAAiQ,OAAeo0B,GAAQgB,aAAA0Q,GAAAvC,GACvBxzC,KAAAkQ,KAAaw2B,GAAK2D,UAAA0L,GAA2B1R,GAAQC,UAAAkP,EAAA,IACrDxzC,KAAAoQ,OAAes2B,GAAK4D,UAAAyL,IAEpBvC,EAiBA9zC,yBAAAu2C,GACAj2C,KAAAwyC,aAAA/iC,OAAAwmC,GAoBAv2C,iBAAA+mC,EAAAxO,GACA,OAASoM,GAAQC,UAAAmC,EAAAxO,GASjBv4B,oBAAAyS,GACA,OAASkyB,GAAQgB,aAAAlzB,GASjBzS,qBAAAyS,GACA,OAASkyB,GAAQsB,cAAAxzB,GAYjBzS,YAAAsc,EAAAC,GACA,WAAayqB,GAAK1qB,EAAAC,GASlBvc,cAAAyS,GACA,OAASu0B,GAAK4D,UAAAn4B,GAUdzS,cAAAc,GACA,OAASkmC,GAAK2D,UAAA7pC,GAiEdd,gBAAAyoC,EAAAC,EAAA5gC,GACA,WAAa0gC,GAASC,EAAAC,EAAA5gC,GAatB9H,cAAAiR,EAAAi1B,EAAAK,EAAA5gC,GACA,IAAAhI,EAAAuoC,EACA,MAAAsQ,KAEA,KAAA74C,EAAA4oC,GAAA,CACA,MAAAviB,EAAA/S,EAAAwtB,SAAA9gC,GACA84C,EAAAzyB,EAAAyb,GAAA,QACAiX,EAAA1yB,EAAAyb,GAAA,oBACAsC,EAAA/d,EAAAyb,GAAA,gBACAkX,EAAA3yB,EAAAyb,GAAA,aAGA,GAAAgX,GAAA1U,GAAA4U,GAAAD,GAAAE,GAAAjxC,EAAAqe,GAAA,CAEA,MAAA6yB,EAAAlxC,EAAAwU,SAGA6J,EAAA6e,UACAgU,EAAAvC,aAAAtwB,GAEA/S,EAAAuwB,aAAA7jC,EAAAk5C,GACAv2C,KAAAy0C,0BAAA8B,GAEAL,EAAAx0C,KAAA,IAA4B2iC,GAAQ1zB,EAAAtT,SAGpC+4C,GACAp2C,KAAAw2C,cAAA9yB,EAAA,EAAAA,EAAA8d,WAAAn8B,GAGAhI,IAIA,IAAAo5C,EAAA,EAEA,UAAA7lC,KAAAslC,EAAA,CAIA,GAHAtlC,EAAAqnB,QAAAwe,EAGA7lC,EAAAqnB,QAAA2N,EACA,SAGA5lC,KAAA8zC,gBAAAljC,GAGAk1B,QAAAl1B,KACA6lC,IACAxQ,KAIA,OAASS,GAAKoB,6BAAAn3B,EAAAi1B,EAAAj1B,EAAAs1B,GAadvmC,gBAAAiR,EAAAi1B,EAAAK,EAAA5gC,GACA,IAAAhI,EAAAuoC,EACA,MAAA8Q,KAGA,KAAAr5C,EAAA4oC,GAAA,CACA,MAAAviB,EAAA/S,EAAAwtB,SAAA9gC,GAGA,GAAAqmB,EAAA0nB,UAAA/lC,GAAA,CACA,MAAAsxC,EAAAjzB,EAAAue,cACAhgC,EAAAyhB,EAAA8d,WAGA9d,EAAA6e,UACA5xB,EAAAuwB,aAAA7jC,EAAAs5C,GAEA32C,KAAA6zC,+BAAAnwB,GAGAgzB,EAAAh1C,KACA,IAAS2iC,GAAQ1zB,EAAAtT,GACjB,IAASgnC,GAAQ1zB,EAAAtT,EAAA4E,IAKjB5E,GAAA4E,EACAgkC,GAAAhkC,EAAA,OAGAyhB,EAAAyb,GAAA,qBACAn/B,KAAA61C,gBAAAnyB,EAAA,EAAAA,EAAA8d,WAAAn8B,GAGAhI,IAKA,IAAAo5C,EAAA,EAEA,UAAA7lC,KAAA8lC,EAAA,CAIA,GAHA9lC,EAAAqnB,QAAAwe,EAGA7lC,EAAAqnB,QAAA2N,GAAAh1B,EAAAqnB,QAAAgO,EACA,SAGAjmC,KAAA8zC,gBAAAljC,GAGAk1B,QAAAl1B,KACA6lC,IACAxQ,KAIA,OAASS,GAAKoB,6BAAAn3B,EAAAi1B,EAAAj1B,EAAAs1B,GAedvmC,WAAAmpC,EAAAxjC,GAEA,GA+jBA,SAAAwjC,GACA,OAAAA,EAAA7sB,MAAArL,QAAAk4B,EAAA5sB,IAAAtL,QAAAk4B,EAAA7sB,MAAArL,OAAAwuB,GAAA,qBACA,IAAA0J,EAAA7sB,MAAAic,QAAA4Q,EAAA5sB,IAAAgc,SAAA4Q,EAAA7sB,MAAArL,OAAA6wB,WAjkBAoV,CAAA/N,IAAA7oC,KAAA62C,sBAAAxxC,EAAAwjC,EAAA7sB,MAAArL,QAAA,CACA,MAAAA,EAAAk4B,EAAA7sB,MAAArL,OAEAsL,EAAAjc,KAAA8zC,gBAAqCzP,GAAQgB,aAAA10B,IAC7CqL,EAAAhc,KAAA8zC,gBAAuCzP,GAAQsB,cAAAh1B,IAE/C,WAAc+1B,GAAK1qB,EAAAC,GAInB,MAASD,MAAA64B,EAAA54B,IAAA64B,GAAmC90C,KAAAuzC,sBAAA1K,GAAA,GAG5C,GAAAiM,EAAAhP,QAAA+O,EAAAhN,aAAA,KACA,MAAAvmC,EAAAuzC,EAAA9O,UAEA,GAAAzkC,aAAwBosC,IAAgB1tC,KAAA62C,sBAAAxxC,EAAA/D,GAAA,CACxC,MAAA0a,EAAAhc,KAAA8zC,gBAAAe,GAEA74B,EAAA8pB,QAAA+O,IACAC,EAAA7c,SAGA,MAAAhc,EAAAjc,KAAA8zC,gBAAAgB,GAEA,WAAepO,GAAK1qB,EAAAC,IAIpB,MAAA84B,EAAAF,EAAAlkC,OAGAmmC,EAAA92C,KAAA61C,gBAAAd,EAAAF,EAAA5c,OAAA6c,EAAA7c,OAAA5yB,GAGAuwC,EAAA51C,KAAAw2C,cAAAzB,EAAA+B,EAAA96B,MAAAic,OAAA6e,EAAA76B,IAAAgc,OAAA5yB,GAGA2W,EAAAhc,KAAA8zC,gBAAA8B,EAAA55B,OAGAA,EAAA8pB,QAAA8P,EAAA55B,QACA45B,EAAA35B,IAAAgc,SAEA,MAAAhc,EAAAjc,KAAA8zC,gBAAA8B,EAAA35B,KAEA,WAAayqB,GAAK1qB,EAAAC,GAelBvc,cAAAkR,EAAAvL,GAEA,GAAAA,EAAA+lC,UAAAx6B,EAAAD,QACA,OAAAomC,GAAAnmC,EAAAs0B,SAIAt0B,EAAAD,OAAAwuB,GAAA,UACAvuB,EAAAomC,GAAApmC,IAIA,MAAAqmC,EAAAj3C,KAAAk3C,yBACAD,EAAArJ,UAAA5oC,OAAAmyC,kBACAF,EAAA7L,UAAA,SAGAx6B,EAAAD,OAAAuwB,aAAAtwB,EAAAqnB,OAAAgf,GAGA,MAAAG,EAAA,IAAwB1Q,GAAK91B,IAAAi3B,aAAA,IAG7B7nC,KAAAq3C,KAAAD,EAAA/xC,GAGA,MAAA6uC,EAAA,IAA0B7P,GAAQ4S,EAAAtmC,OAAAsmC,EAAAr1C,OAClCq1C,EAAA1U,UAGA,MAAAyD,EAAAkO,EAAAlO,WACAD,EAAAmO,EAAAnO,UAEA,OAAAC,aAA6B/G,IAAI8G,aAAyB9G,GAC1D8U,GAAA/N,EAAAD,GAIAgR,GAAA7C,GAaAx0C,sBAAA43C,EAAAC,GACA,IAAAC,GAAAF,EAAAC,GACA,SAIA,GAAAD,EAAA15C,OAAA25C,EAAA35C,MAAA05C,EAAA7yB,WAAA8yB,EAAA9yB,SACA,SAIA,UAAA7lB,KAAA04C,EAAA1G,mBAEA,aAAAhyC,GAAA,UAAAA,GAKA24C,EAAAjX,aAAA1hC,IAAA24C,EAAAtgC,aAAArY,KAAA04C,EAAArgC,aAAArY,GACA,SAKA,UAAAA,KAAA04C,EAAAG,gBACA,GAAAF,EAAA5W,SAAA/hC,IAAA24C,EAAA3W,SAAAhiC,KAAA04C,EAAA1W,SAAAhiC,GACA,SAKA,UAAAA,KAAA04C,EAAA1G,mBAEA,UAAAhyC,GAAA,UAAAA,IAKA24C,EAAAjX,aAAA1hC,IACAoB,KAAAiJ,aAAArK,EAAA04C,EAAArgC,aAAArY,GAAA24C,IAIA,UAAA34C,KAAA04C,EAAAG,gBACAF,EAAA5W,SAAA/hC,IACAoB,KAAA03C,SAAA94C,EAAA04C,EAAA1W,SAAAhiC,GAAA24C,GAIA,UAAA34C,KAAA04C,EAAA9W,gBACA+W,EAAA9W,SAAA7hC,IACAoB,KAAA23C,SAAA/4C,EAAA24C,GAIA,SAaA73C,wBAAA43C,EAAAM,GACA,IAAAJ,GAAAF,EAAAM,GACA,SAIA,GAAAN,EAAA15C,OAAAg6C,EAAAh6C,MAAA05C,EAAA7yB,WAAAmzB,EAAAnzB,SACA,SAIA,UAAA7lB,KAAA04C,EAAA1G,mBAEA,aAAAhyC,GAAA,UAAAA,KAKAg5C,EAAAtX,aAAA1hC,IAAAg5C,EAAA3gC,aAAArY,KAAA04C,EAAArgC,aAAArY,IACA,SAKA,IAAAg5C,EAAAnX,YAAA6W,EAAA9W,iBACA,SAIA,UAAA5hC,KAAA04C,EAAAG,gBAEA,IAAAG,EAAAjX,SAAA/hC,IAAAg5C,EAAAhX,SAAAhiC,KAAA04C,EAAA1W,SAAAhiC,GACA,SAKA,UAAAA,KAAA04C,EAAA1G,mBAEA,UAAAhyC,GAAA,UAAAA,GAIAoB,KAAAgJ,gBAAApK,EAAAg5C,GASA,OALA53C,KAAA63C,YAAAh0C,MAAAC,KAAAwzC,EAAA9W,iBAAAoX,GAGA53C,KAAA83C,YAAAj0C,MAAAC,KAAAwzC,EAAAG,iBAAAG,IAEA,EAYAl4C,sBAAAmpC,EAAAkP,GAAA,GACA,MAAAC,EAAAnP,EAAA7sB,MACAi8B,EAAApP,EAAA5sB,IAKA,GAHA24B,GAAA/L,GAGAA,EAAAlC,YAAA,CACA,MAAA/1B,EAAA5Q,KAAAszC,iBAAAzK,EAAA7sB,MAAA+7B,GAEA,WAAcrR,GAAK91B,KAGnB,MAAAkkC,EAAA90C,KAAAszC,iBAAA2E,EAAAF,GACA91C,EAAA6yC,EAAAnkC,OAAA6wB,WACAqT,EAAA70C,KAAAszC,iBAAA0E,EAAAD,GAKA,OAFAjD,EAAA7c,QAAA6c,EAAAnkC,OAAA6wB,WAAAv/B,EAEA,IAAaykC,GAAKmO,EAAAC,GAkBlBp1C,iBAAAkR,EAAAmnC,GAAA,GACA,MAAApE,EAAA/iC,EAAAqnB,OACA2b,EAAAhjC,EAAAD,OAGA,GAAAC,EAAAD,OAAAwuB,GAAA,gBAMA,UAAa5P,EAAA,EAAa,0CAI1B,GAAA3e,EAAAD,OAAAwuB,GAAA,aAMA,UAAa5P,EAAA,EAAa,uCAI1B,IAAAwoB,GAAAnE,EAAAzU,GAAA,SAAA+Y,GAAAtE,EAAAjjC,QACA,OAAAC,EAAAs0B,QAIA,GAAAgT,GAAAtE,GACA,OAAAhjC,EAAAs0B,QAIA,GAAA0O,EAAAzU,GAAA,QACA,OAAAn/B,KAAAszC,iBAAA0D,GAAApmC,GAAAmnC,GAQA,GAAApE,GALAC,EAAApS,WAKA,CACA,MAAA0S,EAAA,IAA2B7P,GAAQuP,EAAAjjC,OAAAijC,EAAAhyC,MAAA,GAEnC,OAAA5B,KAAAszC,iBAAAY,EAAA6D,GAKA,OAAApE,EAAA,CACA,MAAAO,EAAA,IAA2B7P,GAAQuP,EAAAjjC,OAAAijC,EAAAhyC,OAEnC,OAAA5B,KAAAszC,iBAAAY,EAAA6D,GAMA,CACA,MAAAI,EAAAvE,EAAAhyC,MAAA,EAGAw2C,EAAAxE,EAAA/5B,SAGA+5B,EAAAjjC,OAAAuwB,aAAAiX,EAAAC,GACAp4C,KAAAy0C,0BAAA2D,GAGA,MAAAn2C,EAAA2xC,EAAApS,WAAAmS,EACA0E,EAAAzE,EAAA9U,gBAAA6U,EAAA1xC,GAGAm2C,EAAApE,aAAAqE,GAGA,MAAAnE,EAAA,IAA2B7P,GAAQuP,EAAAjjC,OAAAwnC,GAEnC,OAAAn4C,KAAAszC,iBAAAY,EAAA6D,IAgBAr4C,0BAAAc,GAEA,IAAAA,EAAA7D,KAAAwiC,GAAA,eACA,OAKA,GAAA3+B,EAAA2+B,GAAA,WACA,UAAAzb,KAAAljB,EAAAyhC,cACAjiC,KAAAy0C,0BAAA/wB,GAIA,MAAArR,EAAA7R,EAAA6R,GAEA,IAAAA,EACA,OAGA,IAAAimC,EAAAt4C,KAAAwyC,aAAAt0C,IAAAmU,GAEAimC,IACAA,EAAA,IAAAt1C,IACAhD,KAAAwyC,aAAAprC,IAAAiL,EAAAimC,IAGAA,EAAAn1C,IAAA3C,GACAA,EAAAstC,aAAAwK,EAeA54C,+BAAAc,GAGA,GAAAA,EAAA2+B,GAAA,WACA,UAAAzb,KAAAljB,EAAAyhC,cACAjiC,KAAA6zC,+BAAAnwB,GAIA,MAAArR,EAAA7R,EAAA6R,GAEA,IAAAA,EACA,OAGA,MAAAimC,EAAAt4C,KAAAwyC,aAAAt0C,IAAAmU,GAEAimC,GAIAA,EAAA7oC,OAAAjP,IAwBA,SAAA+zC,GAAA3jC,GACA,IAAAD,EAAAC,EAAAD,OAEA,MAAAunC,GAAAvnC,IAAA,CACA,IAAAA,EACA,OAEAA,WAGA,OAAAA,EAWA,SAAA2lC,GAAA12B,EAAAqU,GACA,OAAArU,EAAA6E,SAAAwP,EAAAxP,YAEE7E,EAAA6E,SAAAwP,EAAAxP,WAKF7E,EAAA24B,cAAAtkB,EAAAskB,cAYA,SAAAxB,GAAAnmC,GACA,MAAAo1B,EAAAp1B,EAAAo1B,WAEA,GAAAA,KAAA7G,GAAA,QACA,WAAakF,GAAQ2B,IAAApmC,KAAAwC,QAGrB,MAAA2jC,EAAAn1B,EAAAm1B,UAEA,OAAAA,KAAA5G,GAAA,QACA,IAAakF,GAAQ0B,EAAA,GAGrBn1B,EAWA,SAAAomC,GAAApmC,GACA,GAAAA,EAAAqnB,QAAArnB,EAAAD,OAAA/Q,KAAAwC,OACA,WAAaiiC,GAAQzzB,EAAAD,cAAAC,EAAAD,OAAA/O,MAAA,GAGrB,OAAAgP,EAAAqnB,OACA,WAAaoM,GAAQzzB,EAAAD,cAAAC,EAAAD,OAAA/O,OAIrB,MAAA42C,EAAA5nC,EAAAD,OAAA/Q,KAAA4W,MAAA5F,EAAAqnB,QASA,OANArnB,EAAAD,OAAAyuB,MAAAxuB,EAAAD,OAAA/Q,KAAA4W,MAAA,EAAA5F,EAAAqnB,QAGArnB,EAAAD,cAAAuwB,aAAAtwB,EAAAD,OAAA/O,MAAA,MAAqEq9B,GAAIuZ,IAGzE,IAAYnU,GAAQzzB,EAAAD,cAAAC,EAAAD,OAAA/O,MAAA,GASpB,SAAAmyC,GAAA0E,EAAAC,GAEA,MAAAC,EAAAF,EAAA74C,KAAAwC,OAIA,OAHAq2C,EAAArZ,OAAAsZ,EAAA94C,KACA84C,EAAAnW,UAEA,IAAY8B,GAAQoU,EAAAE,GAiDpB,MAAAvE,IAA6BnV,GAAMyO,GAAkBvK,GAAkB6K,GAAcuC,IAMrF,SAAA2H,GAAA52C,GACA,OAAAA,MAAA69B,GAAA,qBAAA79B,EAAA69B,GAAA,qBAQA,SAAAyV,GAAA/L,GACA,MAAA+P,EAAArE,GAAA1L,EAAA7sB,OACA68B,EAAAtE,GAAA1L,EAAA5sB,KAEA,IAAA28B,IAAAC,GAAAD,IAAAC,EAQA,UAAYtpB,EAAA,EAAa,uCAWzB,SAAAioB,GAAA53B,EAAAqU,GACA,cAAArU,EAAAvN,IAAA,OAAA4hB,EAAA5hB,GC31De,SAASymC,GAAM9kC,GAC9B,uBAAAjW,OAAAkB,UAAAqlB,SAAA9mB,KAAAwW,GC6BO,MAAA+kC,GAAAtI,IACP,MAAAuI,EAAAvI,EAAAltC,cAAA,MAGA,OAFAy1C,EAAAC,QAAAC,WAAA,EAEAF,GAUOG,GAAA1I,KAAAr7B,eAAA,KAKAgkC,GAAA,EAKA,IAAAC,GAAA,GAEP,QAAAh8C,EAAA,EAAgBA,EAAA+7C,GAA0B/7C,IAC1Cg8C,IAAA,IAcO,SAAAC,GAAAC,GACP,OAAQT,GAAMS,MAAA35C,KAAA2c,OAAA,EAAA68B,MAAAC,GAYP,SAAAG,GAAAC,GACP,OAAAA,EAAA75C,KAAAwC,QAAAg3C,IAAAE,GAAAG,GAaO,SAAAC,GAAAD,GACP,OAAAH,GAAAG,GACAA,EAAA75C,KAAA4W,MAAA4iC,IAEAK,EAAA75C,KAKA,MAAA+5C,GAAA,IAAAtqC,QAYO,SAAAuqC,GAAAL,EAAAM,GACP,IAAAC,EAAAH,GAAAz7C,IAAA27C,GAOA,OALAC,IACAA,EAAAD,EAAA58C,OAAA2D,UACA+4C,GAAAvyC,IAAAyyC,EAAAC,IAGAP,EAAAQ,YAAAD,GAcA,SAAAE,GAAAlpB,EAAAlxB,GACA,GAAAA,EAAAmwC,SAAsBhB,GAAQC,UAAA,CAC9B,MAAAgC,EAAApxC,EAAAqxC,UAAAC,cAAAC,YAAAC,eAEA,MAAAJ,EAAAjI,YAAAiI,EAAAM,WAAA,GAAAC,UAAA,CACA,MAAAC,EAAAR,EAAAM,WAAA,GAAAsH,eACAlH,EAAAV,EAAAM,WAAA,GAAA1L,YAEA0T,GAAA9H,IAAAE,GAAA0H,IACApI,EAAAkB,SAAAV,EAAA,KC9Ie,SAASyI,GAAIr6B,EAAAqU,EAAAimB,GAO5B,IAAA/gC,EAAAghC,EAGA,GARAD,KAAA,SAAAt6B,EAAAqU,GACA,OAAArU,IAAAqU,GAOAA,EAAA7xB,OAAAwd,EAAAxd,OAAA,CACA,MAAAg4C,EAAAx6B,EAEAA,EAAAqU,EACAA,EAAAmmB,EAGAjhC,EAAA,SACAghC,EAAA,cAEAhhC,EAAA,SACAghC,EAAA,SAGA,MAAA18C,EAAAmiB,EAAAxd,OACAtD,EAAAm1B,EAAA7xB,OACAi4C,EAAAv7C,EAAArB,EAGA68C,KAEAC,KAEA,SAAAC,EAAAjzC,GAGA,MAAAkzC,QAAA94C,IAAA44C,EAAAhzC,EAAA,GAAAgzC,EAAAhzC,EAAA,SAEAmzC,OAAA/4C,IAAA44C,EAAAhzC,EAAA,GAAAgzC,EAAAhzC,EAAA,MAEAozC,EAAAF,EAAAC,GAAA,IAGAJ,EAAA/yC,EAAAozC,KACAL,EAAA/yC,GAAA+yC,EAAA/yC,EAAAozC,GAAAnkC,MAAA,IAIA8jC,EAAA/yC,KACA+yC,EAAA/yC,OAIA+yC,EAAA/yC,GAAA7F,KAAA+4C,EAAAC,EAAAvhC,EAAAghC,GAGA,IAAAS,EAAAtkC,KAAA6U,IAAAsvB,EAAAC,GACAG,EAAAD,EAAArzC,EAGA,KAAAszC,EAAAp9C,GAAAm9C,EAAA97C,GAAAo7C,EAAAt6B,EAAAi7B,GAAA5mB,EAAA2mB,KACAC,IACAD,IAEAN,EAAA/yC,GAAA7F,KAAA,SAGA,OAAAk5C,EAGA,IACArzC,EADApI,EAAA,EAIA,GAEA,IAAAoI,GAAApI,EAAeoI,EAAA8yC,EAAW9yC,IAC1BgzC,EAAAhzC,GAAAizC,EAAAjzC,GAIA,IAAAA,EAAA8yC,EAAAl7C,EAAsBoI,EAAA8yC,EAAW9yC,IACjCgzC,EAAAhzC,GAAAizC,EAAAjzC,GAKAgzC,EAAAF,GAAAG,EAAAH,GAEAl7C,UACEo7C,EAAAF,KAAAv7C,GAIF,OAAAw7C,EAAAD,GAAA7jC,MAAA,GCrGe,SAASskC,GAAQ/3B,EAAAnhB,EAAAm5C,GAChCh4B,EAAA3e,aAAA22C,EAAAh4B,EAAAjN,WAAAlU,IAAA,MCHe,SAASo5C,GAAM15C,GAC9B,MAAAqP,EAAArP,EAAAQ,WAEA6O,GACAA,EAAA5O,YAAAT,GCHe,SAAA25C,GAAAjnC,GACf,GAAAA,EAAA,CACA,GAAAA,EAAAm9B,YACA,OAAAn9B,eAAAm9B,YAAArlC,SACG,GAAAkI,EAAAk9B,eAAAl9B,EAAAk9B,cAAAC,YACH,OAAAn9B,eAAAk9B,cAAAC,YAAA73B,KAIA,SC0Be,SAAA4hC,GAAAC,EAAAC,GAEf,GAAAD,IAAAC,EACA,SAKA,OA8EA,SAAAA,EAAAC,GACA,MAAAzxC,MACA0xC,WAAQA,EAAAC,eAAAC,gBAAyCH,EAKjDG,EAAAF,EAAA,GACA1xC,EAAAlI,MACAE,MAAA05C,EACA/4C,KAAA,SACAkK,OAAA2uC,EAAA72B,UAAA+2B,EAAAE,GAAAtkC,MAAA,MAIAqkC,EAAAD,EAAA,GACA1xC,EAAAlI,MACAE,MAAA05C,GAAAE,EAAAF,GACA/4C,KAAA,SACAigC,QAAA+Y,EAAAD,IAIA,OAAA1xC,EArGA6xC,CAAAL,EAoBA,SAAAD,EAAAC,GAEA,MAAAE,EAAAI,GAAAP,EAAAC,GAGAO,EAAAC,GAAAT,EAAAG,GACAO,EAAAD,GAAAR,EAAAE,GAaAnkC,EAAAukC,GAAAC,EAAAE,GAGAN,EAAAJ,EAAA/4C,OAAA+U,EACAqkC,EAAAJ,EAAAh5C,OAAA+U,EAEA,OAASmkC,aAAAC,eAAAC,gBA/CTM,CAAAX,EAAAC,IAuDA,SAAAM,GAAAP,EAAAC,GACA,QAAA/9C,EAAA,EAAiBA,EAAAiZ,KAAA6U,IAAAgwB,EAAA/4C,OAAAg5C,EAAAh5C,QAAgD/E,IACjE,GAAA89C,EAAA99C,KAAA+9C,EAAA/9C,GACA,OAAAA,EAYA,SAAAu+C,GAAApjC,EAAAgqB,GACA,OAAAhqB,EAAA+L,UAAAie,GAAAtrB,MAAA,IAAA6kC,UAAAzsC,KAAA,UCxFqB0sC,GAOrBt8C,YAAAqxC,EAAApN,GAOA3jC,KAAAi8C,aAAA,IAAAj5C,IAQAhD,KAAA+wC,eAQA/wC,KAAAk8C,iBAAA,IAAAl5C,IAQAhD,KAAAm8C,eAAA,IAAAn5C,IAQAhD,KAAAo8C,YAAA,IAAAp5C,IAQAhD,KAAA2jC,YAQA3jC,KAAA0jC,WAAA,EAQA1jC,KAAAq8C,cAAA,KAQAr8C,KAAAs8C,wBAAA,KAeA58C,WAAA6C,EAAAjB,GACA,YAAAiB,EACAvC,KAAA+wC,aAAAwL,aAAAj7C,EAAAqP,SACA3Q,KAAAo8C,YAAAj5C,IAAA7B,OAEG,CAGH,IAAAtB,KAAA+wC,aAAAwL,aAAAj7C,GACA,OAGA,kBAAAiB,EACAvC,KAAAk8C,iBAAA/4C,IAAA7B,OACI,iBAAAiB,EAQJ,UAAcgtB,EAAA,EAAa,2EAP3BvvB,KAAAm8C,eAAAh5C,IAAA7B,KAuBA5B,SACA,IAAA88C,EAGA,UAAAh8C,KAAAR,KAAAm8C,eACAn8C,KAAAy8C,wBAAAj8C,GAMAR,KAAAq8C,gBAAAr8C,KAAA08C,8BACA18C,KAAA28C,sBAIA38C,KAAAq8C,cACAG,EAAAx8C,KAAA48C,2BAGA58C,KAAA68C,kCACAL,EAAAx8C,KAAA2jC,UAAAsH,mBAGAjrC,KAAAm8C,eAAAh5C,IAAAq5C,EAAA7rC,SAGA,UAAAnQ,KAAAR,KAAAk8C,iBACAl8C,KAAA88C,aAAAt8C,GAGA,UAAAA,KAAAR,KAAAm8C,eACAn8C,KAAA+8C,gBAAAv8C,GAAmCg8C,yBAGnC,UAAAl7C,KAAAtB,KAAAo8C,aACAp8C,KAAAm8C,eAAA16C,IAAAH,EAAAqP,SAAA3Q,KAAA+wC,aAAAwL,aAAAj7C,EAAAqP,SACA3Q,KAAAg9C,YAAA17C,GAA6Bk7C,yBAU7B,GAAAA,EAAA,CACA,MAAAS,EAAAj9C,KAAA+wC,aAAAkB,kBAAAuK,GACA/L,EAAAwM,EAAAtsC,OAAAugC,cAESoI,GAAgB2D,EAAAtsC,QAKzB3Q,KAAAq8C,cAAAY,EAAAtsC,OAHA3Q,KAAAq8C,cAAAa,GAAAzM,EAAAwM,EAAAtsC,OAAAssC,EAAAhlB,aAOAj4B,KAAAq8C,cAAA,KAGAr8C,KAAAm9C,mBACAn9C,KAAAo9C,eAEAp9C,KAAAo8C,YAAA3iC,QACAzZ,KAAAk8C,iBAAAziC,QACAzZ,KAAAm8C,eAAA1iC,QAaA/Z,wBAAAq2C,GACA,MAAApF,EAAA3wC,KAAA+wC,aAAAwL,aAAAxG,GAEA,IAAApF,EAEA,OAGA,MAAA0M,EAAAr9C,KAAA+wC,aAAAwL,aAAAxG,GAAAjgC,WACAwnC,EAAAz5C,MAAAC,KACA9D,KAAA+wC,aAAAwM,kBAAAxH,EAAApF,EAAAO,eAAgFsM,cAAA,KAEhF36B,EAAA7iB,KAAAy9C,eAAAJ,EAAAC,GACAI,EAAA19C,KAAA29C,oBAAA96B,EAAAw6B,EAAAC,GAEA,QAAAI,EAAApqC,QAAA,YACA,MAAAsqC,GAAoBC,MAAA,EAAA5tC,OAAA,EAAAR,OAAA,GAEpB,UAAAquC,KAAAJ,EACA,eAAAI,EAAA,CACA,MAAAC,EAAAH,EAAAC,MAAAD,EAAA3tC,OACA+tC,EAAAJ,EAAAC,MAAAD,EAAAnuC,OACAwuC,EAAAlI,EAAA5X,SAAA4f,GAKAE,MAAA9e,GAAA,cACAn/B,KAAAk+C,uBAAAD,EAAAZ,EAAAW,IAGKhD,GAAMsC,EAAAS,IACXH,EAAAC,aAEAD,EAAAE,MAaAp+C,uBAAAq2C,EAAApF,GAEA3wC,KAAA+wC,aAAAoN,iBAAAxN,GACA3wC,KAAA+wC,aAAAqN,aAAAzN,EAAAoF,GAGA/1C,KAAAm8C,eAAAh5C,IAAA4yC,GAWA/1C,KAAAk8C,iBAAA/4C,IAAA4yC,GAgBAr2C,2BACA,MAAA2+C,EAAAr+C,KAAA2jC,UAAAsH,mBAEA,OAAAoT,EAAA1tC,OAAAwuB,GAAA,QACUkF,GAAYsB,cAAA3lC,KAAA2jC,UAAAsH,mBAAAt6B,QAEtB0tC,EAYA3+C,6BACA,MAAAM,KAAA2jC,UAAAoF,aAAA/oC,KAAA2jC,UAAAgD,YACA,SAYA,MAAA2X,EAAAt+C,KAAA2jC,UAAAsH,mBACAr6B,EAAA5Q,KAAA+wC,aAAAkB,kBAAAqM,GAEA,SAAA1tC,GAAmBkoC,GAAMloC,EAAAD,SAAuB2oC,GAAgB1oC,EAAAD,SAYhEjR,sBACA,MAAA6+C,EAAAv+C,KAAAq8C,cAGA,IAAQ/C,GAAgBiF,GAOxB,UAAahvB,EAAA,EAAa,mEAGnBiqB,GAAc+E,GACrBA,EAAAz8C,WAAAC,YAAAw8C,GAEAA,EAAA3+C,KAAA2+C,EAAA3+C,KAAA2c,OAAmD68B,IAGnDp5C,KAAAq8C,cAAA,KASA38C,gCACA,MAAAM,KAAA2jC,UAAAoF,aAAA/oC,KAAA2jC,UAAAgD,YACA,SAGA,MAAA2X,EAAAt+C,KAAA2jC,UAAAsH,mBACAuT,EAAAF,EAAA3tC,OACA8tC,EAAAH,EAAArmB,OAGA,IAAAj4B,KAAA+wC,aAAAwL,aAAAiC,EAAA7hD,MACA,SAGA,IAAA6hD,EAAArf,GAAA,WACA,SAKA,IAsaA,SAAA3+B,GACA,YAAAA,EAAAyW,aAAA,mBACA,SAGA,MAAAtG,EAAAnQ,EAAAk+C,aAAAl+C,KAAA8/B,aAAA,oBAEA,OAAA3vB,GAAA,QAAAA,EAAAsG,aAAA,mBA7aA0nC,CAAAH,GACA,SAIA,GAAAC,IAAAD,EAAArc,kBACA,SAGA,MAAA6D,EAAAsY,EAAAtY,WACAD,EAAAuY,EAAAvY,UAEA,QAAAC,aAA6B/G,IAAQ8G,aAAyB9G,IAgB9Dv/B,YAAAk/C,EAAAp3C,GACA,MAAAiyC,EAAAz5C,KAAA+wC,aAAA8N,yBAAAD,GACAE,EAAA9+C,KAAA+wC,aAAAgO,UAAAH,EAAAnF,EAAAvI,eAEA8N,EAAAvF,EAAA75C,KACA,IAAAq/C,EAAAH,EAAAl/C,KAEA,MAAAs/C,EAAA13C,EAAAg1C,qBAMA,GAJA0C,KAAAvuC,QAAAiuC,EAAAjuC,QAAAuuC,EAAAjnB,QAAA2mB,EAAAh9C,QACAq9C,EAAkB5F,GAAa4F,GAG/BD,GAAAC,EAAA,CACA,MAAAvB,EAAmBxC,GAAQ8D,EAAAC,GAE3B,UAAAnB,KAAAJ,EACA,WAAAI,EAAAv7C,KACAk3C,EAAA0F,WAAArB,EAAAl8C,MAAAk8C,EAAArxC,OAAA6C,KAAA,KAEAmqC,EAAA2F,WAAAtB,EAAAl8C,MAAAk8C,EAAAtb,UAYA9iC,aAAAq2C,GACA,MAAApF,EAAA3wC,KAAA+wC,aAAAwL,aAAAxG,GAEA,IAAApF,EAKA,OAGA,MAAA0O,EAAAx7C,MAAAC,KAAA6sC,EAAA7pC,YAAAiH,IAAA9G,KAAArJ,MACA0hD,EAAAvJ,EAAAnF,mBAGA,UAAAhyC,KAAA0gD,EACA3O,EAAA1nC,aAAArK,EAAAm3C,EAAA9+B,aAAArY,IAIA,UAAAA,KAAAygD,EACAtJ,EAAAzV,aAAA1hC,IACA+xC,EAAA3nC,gBAAApK,GAcAc,gBAAAq2C,EAAAvuC,GACA,MAAAmpC,EAAA3wC,KAAA+wC,aAAAwL,aAAAxG,GAEA,IAAApF,EAGA,OAGA,MAAA6L,EAAAh1C,EAAAg1C,qBACAa,EAAAr9C,KAAA+wC,aAAAwL,aAAAxG,GAAAjgC,WACAwnC,EAAAz5C,MAAAC,KACA9D,KAAA+wC,aAAAwM,kBAAAxH,EAAApF,EAAAO,eAAgFryC,MAAA,EAAA29C,0BAMhFA,KAAA7rC,SAAAolC,GACAmH,GAAAvM,EAAAO,cAAAoM,EAAAd,EAAAvkB,QAGA,MAAApV,EAAA7iB,KAAAy9C,eAAAJ,EAAAC,GAEA,IAAAjgD,EAAA,EACA,MAAAkiD,EAAA,IAAAv8C,IAEA,UAAA86C,KAAAj7B,EACA,WAAAi7B,GACIhD,GAAQnK,EAAAtzC,EAAAigD,EAAAjgD,IACZA,KACI,WAAAygD,GACJyB,EAAAp8C,IAAAk6C,EAAAhgD,IACI29C,GAAMqC,EAAAhgD,MAGV2C,KAAAw/C,0BAAAx/C,KAAA+wC,aAAA0O,UAAAnC,EAAAjgD,KACAA,KAOA,UAAAiE,KAAAi+C,EACAj+C,EAAAQ,YACA9B,KAAA+wC,aAAAoN,iBAAA78C,GAaA5B,eAAA29C,EAAAC,GACA,OAASrD,GAAIoD,EAAAC,EA4Ub,SAAkBzD,EAAA6F,EAAAC,GAElB,GAAAD,IAAAC,EACA,SAGA,GAAW7G,GAAM4G,IAAsB5G,GAAM6G,GAC7C,OAAAD,EAAA9/C,OAAA+/C,EAAA//C,KAGA,GAAWg6C,GAAa8F,EAAA7F,IACtBD,GAAa+F,EAAA9F,GACf,SAIA,UA5VgEh7C,KAAA,KAAAmB,KAAA+wC,aAAA8I,cAkBhEn6C,oBAAAg+C,EAAAkC,EAAAC,GAEA,QAAAnC,EAAApqC,QAAA,gBAAAoqC,EAAApqC,QAAA,UACA,OAAAoqC,EAGA,IAAAoC,KACAC,KACAC,KAEA,MAAApC,GAAmBC,MAAA,EAAA5tC,OAAA,EAAAR,OAAA,GAEnB,UAAAquC,KAAAJ,EACA,WAAAI,EACAkC,EAAAt+C,KAAAm+C,EAAAjC,EAAAC,MAAAD,EAAA3tC,SACI,WAAA6tC,EACJiC,EAAAr+C,KAAAk+C,EAAAhC,EAAAC,MAAAD,EAAAnuC,WAEAqwC,IAAAr4B,OAAoCwyB,GAAI8F,EAAAC,EAAAC,IAAAlyC,IAAA8sC,GAAA,UAAAA,EAAA,UAAAA,KACxCn5C,KAAA,SAEAq+C,KACAC,MAEApC,EAAAE,KAGA,OAAAgC,EAAAr4B,OAA4BwyB,GAAI8F,EAAAC,EAAAC,IAAAlyC,IAAA8sC,GAAA,UAAAA,EAAA,UAAAA,IAWhCn7C,0BAAAwgD,GACA,GAAAA,EAIA,GAAAA,EAAA/gB,GAAA,QACAn/B,KAAAo8C,YAAAj5C,IAAA+8C,QACG,GAAAA,EAAA/gB,GAAA,WACH,UAAAzb,KAAAw8B,EAAAje,cACAjiC,KAAAw/C,0BAAA97B,GAUAhkB,mBAEA,OAAAM,KAAA2jC,UAAAoF,WAIA,OAHA/oC,KAAAmgD,2BACAngD,KAAAogD,uBAKA,MAAAC,EAAArgD,KAAA+wC,aAAAwL,aAAAv8C,KAAA2jC,UAAAC,iBAGA5jC,KAAA0jC,WAAA2c,IAKArgD,KAAA2jC,UAAA+E,OACA1oC,KAAAsgD,qBAAAD,IAEArgD,KAAAogD,uBACApgD,KAAAugD,oBAAAF,KAUA3gD,qBAAA2gD,GACA,MAAA5P,EAAA4P,EAAAnP,cACA,IAAAziC,EAAAzO,KAAAs8C,wBAGA7tC,IACAzO,KAAAs8C,wBAAA7tC,EAAAgiC,EAAAltC,cAAA,OAEAxF,OAAAiR,OAAAP,EAAAjL,OACAoN,SAAA,QACA4vC,IAAA,EACAC,KAAA,UAEAC,MAAA,SAIAjyC,EAAAxK,YAAAwsC,EAAAr7B,eAAA,OAIA3G,EAAAsU,eACAs9B,EAAAp8C,YAAAwK,GAIAA,EAAAnK,WAAA1E,KAAAI,KAAA2jC,UAAAgF,oBAAA,IAGA,MAAAqI,EAAAP,EAAAW,eACAuP,EAAAlQ,EAAAmQ,cAEA5P,EAAA6P,kBACAF,EAAAG,mBAAAryC,GACAuiC,EAAA+P,SAAAJ,GAGA3gD,KAAA+wC,aAAAiQ,kBAAAvyC,EAAAzO,KAAA2jC,WASAjkC,oBAAA2gD,GACA,MAAArP,EAAAqP,EAAAnP,cAAAC,YAAAC,eAGA,IAAApxC,KAAAihD,yBAAAjQ,GACA,OAQA,MAAApI,EAAA5oC,KAAA+wC,aAAAkB,kBAAAjyC,KAAA2jC,UAAAiF,QACAE,EAAA9oC,KAAA+wC,aAAAkB,kBAAAjyC,KAAA2jC,UAAAmF,OAIAuX,EAAAvX,QAEAkI,EAAAkB,SAAAtJ,EAAAj4B,OAAAi4B,EAAA3Q,QACA+Y,EAAAmB,OAAArJ,EAAAn4B,OAAAm4B,EAAA7Q,QAGOmW,GAAGG,SAsLV,SAAAzF,EAAAkI,GACA,MAAArgC,EAAAm4B,EAAAn4B,OAIA,GAAAA,EAAAzO,UAAAoX,KAAA4nC,cAAApY,EAAA7Q,QAAAtnB,EAAAmF,WAAA1T,OAAA,EACA,OAGA,MAAA++C,EAAAxwC,EAAAmF,WAAAgzB,EAAA7Q,QAIAkpB,GAAA,MAAAA,EAAAz2C,SACAsmC,EAAA+P,SAAA/P,EAAAM,WAAA,IAnMA8P,CAAAtY,EAAAkI,GAWAtxC,yBAAAsxC,GACA,IAAAhxC,KAAA+wC,aAAAsQ,sBAAArQ,GAEA,SAGA,MAAAsQ,EAAAtQ,GAAAhxC,KAAA+wC,aAAAwQ,mBAAAvQ,GAEA,QAAAsQ,IAAAthD,KAAA2jC,UAAAmC,QAAAwb,QAKAthD,KAAA2jC,UAAAgD,aAAA3mC,KAAA2jC,UAAAyH,UAAAkW,IAcA5hD,sBACA,UAAA8hD,KAAAxhD,KAAAi8C,aAAA,CAGA,GAFAuF,EAAApQ,eAEArI,WAAA,CACA,MAAA0Y,EAAAD,EAAAE,cACA3L,EAAA/1C,KAAA+wC,aAAA4Q,aAAAF,GAEAA,GAAA1L,GACAyL,EAAApQ,eAAAyP,oBAWAnhD,uBACA,MAAA+O,EAAAzO,KAAAs8C,wBAEA7tC,GACAA,EAAA2B,SASA1Q,eACA,GAAAM,KAAA0jC,UAAA,CACA,MAAAwC,EAAAlmC,KAAA2jC,UAAAC,gBAEAsC,GACAlmC,KAAA+wC,aAAAjI,MAAA5C,KAiCA,SAAAgX,GAAAzM,EAAAmR,EAAA3pB,GACA,MAAAniB,EAAA8rC,aAAA/9C,MAAA+9C,IAAA9rC,WACA+rC,EAAA/rC,EAAAmiB,GAEA,GAAM6gB,GAAM+I,GAGZ,OAFAA,EAAAjiD,KAAyBy5C,GAAawI,EAAAjiD,KAEtCiiD,EACE,CACF,MAAAC,EAAArR,EAAAr7B,eAAiDikC,IAQjD,OANAx1C,MAAAuJ,QAAAw0C,GACA9rC,EAAAvC,OAAA0kB,EAAA,EAAA6pB,GAEGhH,GAAQ8G,EAAA3pB,EAAA6pB,GAGXA,GAWA,SAAA7B,GAAA8B,EAAAC,GACA,OAAQ/G,GAAM8G,IAAa9G,GAAM+G,KAC9BlJ,GAAMiJ,KAAcjJ,GAAMkJ,IAC7BD,EAAAr3C,QAAApC,gBAAA05C,EAAAt3C,QAAApC,cA1DA+pB,GAAK2pB,GAAUjrB,ICjzBA,IAAAvS,IAACvhB,cAAA2D,mBCVD,SAAA0S,GAAAhS,GACf,IAAAM,EAAA,EAEA,KAAAN,EAAAE,iBACAF,IAAAE,gBACAI,IAGA,OAAAA,ECHe,SAAA48B,GAAAl9B,GACf,MAAA+gC,KAGA,KAAA/gC,KAAAY,UAAAoX,KAAA2oC,eACA5f,EAAA50B,QAAAnM,GACAA,IAAAQ,WAGA,OAAAugC,ECLe,IAAA6f,GAJf,SAAA5jD,GACA,OAAS4uB,GAAY5uB,IAAA,IAAAA,EAAA4D,WAAoCoxB,GAAah1B,UCgBjD6jD,GAOrBziD,YAAA8H,MAkBAxH,KAAA65C,YAAAryC,EAAAqyC,aAA4Cd,GAQ5C/4C,KAAAoiD,aAAA,OAQApiD,KAAAqiD,eAAA,yCAQAriD,KAAAsiD,kBAAA,IAAAjzC,QAQArP,KAAAuiD,kBAAA,IAAAlzC,QAQArP,KAAAwiD,sBAAA,IAAAnzC,QAWA3P,kBAAAixC,EAAA8R,GACAziD,KAAAwiD,sBAAAp7C,IAAAupC,EAAA,IAAkDzI,GAAaua,IAU/D/iD,oBAAAixC,GACA,OAAA3wC,KAAAwiD,sBAAAtkD,IAAAyyC,GAWAjxC,aAAAixC,EAAAoF,GACA/1C,KAAAsiD,kBAAAl7C,IAAAupC,EAAAoF,GACA/1C,KAAAuiD,kBAAAn7C,IAAA2uC,EAAApF,GASAjxC,iBAAAixC,GACA,MAAAoF,EAAA/1C,KAAAsiD,kBAAApkD,IAAAyyC,GAEA,GAAAoF,EAAA,CACA/1C,KAAAsiD,kBAAA7yC,OAAAkhC,GACA3wC,KAAAuiD,kBAAA9yC,OAAAsmC,GAGA,UAAAryB,KAAA7f,MAAAC,KAAA6sC,EAAA76B,YACA9V,KAAAm+C,iBAAAz6B,IAaAhkB,sBAAAgjD,EAAAC,GACA3iD,KAAAsiD,kBAAAl7C,IAAAs7C,EAAAC,GACA3iD,KAAAuiD,kBAAAn7C,IAAAu7C,EAAAD,GAeAhjD,UAAAwgD,EAAAzP,EAAAjpC,MACA,GAAA04C,EAAA/gB,GAAA,SACA,MAAAyjB,EAAA5iD,KAAA6iD,yBAAA3C,GAEA,OAAAzP,EAAAr7B,eAAAwtC,GACG,CACH,GAAA5iD,KAAAu8C,aAAA2D,GACA,OAAAlgD,KAAAu8C,aAAA2D,GAGA,IAAAvP,EAEA,GAAAuP,EAAA/gB,GAAA,oBAEAwR,EAAAF,EAAA1hC,yBAEAvH,EAAA3I,MACAmB,KAAA8iD,sBAAAnS,EAAAuP,OAEI,IAAAA,EAAA/gB,GAAA,aAQJ,OANAwR,EAAAuP,EAAA3xC,OAAAkiC,GAEAjpC,EAAA3I,MACAmB,KAAAo+C,aAAAzN,EAAAuP,GAGAvP,EAGAA,EAAAF,EAAAltC,cAAA28C,EAAAtiD,MAEA4J,EAAA3I,MACAmB,KAAAo+C,aAAAzN,EAAAuP,GAIA,UAAAthD,KAAAshD,EAAAtP,mBACAD,EAAA1nC,aAAArK,EAAAshD,EAAAjpC,aAAArY,IAIA,GAAA4I,EAAAg2C,mBAAA77C,IAAA6F,EAAAg2C,aACA,UAAA95B,KAAA1jB,KAAAu9C,kBAAA2C,EAAAzP,EAAAjpC,GACAmpC,EAAA1sC,YAAAyf,GAIA,OAAAitB,GAcAjxC,mBAAAq2C,EAAAtF,EAAAjpC,MACA,MAAAu7C,EAAAhN,EAAA5T,iBAAA4T,EAAA5T,kBACA,IAAAlK,EAAA,EAEA,UAAA+qB,KAAAjN,EAAA9T,cACA8gB,IAAA9qB,UACAj4B,KAAA65C,YAAApJ,UAGAzwC,KAAA++C,UAAAiE,EAAAvS,EAAAjpC,GAEAywB,IAGA8qB,IAAA9qB,UACAj4B,KAAA65C,YAAApJ,IAWA/wC,eAAAujD,GACA,MAAAC,EAAAljD,KAAAiyC,kBAAAgR,EAAAjnC,OACAmnC,EAAAnjD,KAAAiyC,kBAAAgR,EAAAhnC,KAEA0kC,EAAA//C,SAAAggD,cAIA,OAHAD,EAAAyC,SAAAF,EAAAvyC,OAAAuyC,EAAAjrB,QACA0oB,EAAA0C,OAAAF,EAAAxyC,OAAAwyC,EAAAlrB,QAEA0oB,EAcAjhD,kBAAAkyC,GACA,MAAA0R,EAAA1R,EAAAjhC,OAEA,GAAA2yC,EAAAnkB,GAAA,SACA,MAAAqS,EAAAxxC,KAAA6+C,yBAAAyE,GAEA,IAAA9R,EAEA,YAGA,IAAAvZ,EAAA2Z,EAAA3Z,OAMA,OAJQqhB,GAAgB9H,KACxBvZ,GAAcmhB,KAGHzoC,OAAA6gC,EAAAvZ,UACR,CAEH,IAAAuZ,EAAA+R,EAAAC,EAEA,OAAA5R,EAAA3Z,OAAA,CAGA,KAFAuZ,EAAAxxC,KAAAu8C,aAAA+G,IAIA,YAGAE,EAAAhS,EAAA17B,WAAA,OACI,CACJ,MAAAkwB,EAAA4L,EAAA5L,WAMA,KAJAud,EAAAvd,EAAA7G,GAAA,QACAn/B,KAAA6+C,yBAAA7Y,GACAhmC,KAAAu8C,aAAA3K,EAAA5L,aAIA,YAGAwL,EAAA+R,EAAAzhD,WACA0hD,EAAAD,EAAApwC,YAKA,GAAQ2lC,GAAM0K,IAAgBlK,GAAgBkK,GAC9C,OAAY7yC,OAAA6yC,EAAAvrB,OAA2BmhB,IAKvC,OAAWzoC,OAAA6gC,EAAAvZ,OAFXsrB,EAA8BjwC,GAAOiwC,GAAA,MAoBrC7jD,UAAA65C,EAAA/xC,MACA,GAAOoyC,GAAaL,EAAAv5C,KAAA65C,aACpB,YAIA,MAAAhH,EAAA7yC,KAAAyjD,mBAAAlK,EAAAv5C,KAAAsiD,mBAEA,GAAAzP,EACA,OAAAA,EAGA,GAAOiG,GAAMS,GAAA,CACb,GAAQC,GAAcD,GACtB,YACI,CACJ,MAAAqJ,EAAA5iD,KAAA0jD,wBAAAnK,GAEA,WAAAqJ,EAAA,SAAwC3jB,GAAQ2jB,IAE7C,GAAA5iD,KAAA2jD,UAAApK,GACH,YACG,CACH,GAAAv5C,KAAA2hD,aAAApI,GACA,OAAAv5C,KAAA2hD,aAAApI,GAGA,IAAAxD,EAEA,GAAA/1C,KAAA4jD,mBAAArK,GAEAxD,EAAA,IAAsB1D,GAEtB7qC,EAAA3I,MACAmB,KAAA8iD,sBAAAvJ,EAAAxD,OAEI,CAEJ,MAAA8N,EAAAr8C,EAAAs8C,iBAAAvK,EAAA7uC,QAAA6uC,EAAA7uC,QAAApC,cACAytC,EAAA,IAAsBjV,GAAW+iB,GAEjCr8C,EAAA3I,MACAmB,KAAAo+C,aAAA7E,EAAAxD,GAIA,MAAAtiC,EAAA8lC,EAAAzyC,WAEA,QAAAzJ,EAAAoW,EAAArR,OAAA,EAAmC/E,GAAA,EAAQA,IAC3C04C,EAAAjD,cAAAr/B,EAAApW,GAAAO,KAAA6V,EAAApW,GAAAiB,OAIA,GAAAkJ,EAAAg2C,mBAAA77C,IAAA6F,EAAAg2C,aACA,UAAA95B,KAAA1jB,KAAA+jD,kBAAAxK,EAAA/xC,GACAuuC,EAAA/B,aAAAtwB,GAIA,OAAAqyB,GAaAr2C,mBAAAixC,EAAAnpC,MACA,QAAAnK,EAAA,EAAkBA,EAAAszC,EAAA76B,WAAA1T,OAAkC/E,IAAA,CACpD,MAAA2mD,EAAArT,EAAA76B,WAAAzY,GACA4gD,EAAAj+C,KAAAy/C,UAAAuE,EAAAx8C,GAEA,OAAAy2C,UACAA,IAYAv+C,mBAAAsxC,GAGA,OAAAA,EAAAjI,WAAA,CACA,IAAAt6B,EAAAuiC,EAAAM,WAAA,GAAAsH,eAGQE,GAAMrqC,KACdA,IAAA3M,YAGA,MAAA0zC,EAAAx1C,KAAAikD,oBAAAx1C,GAEA,GAAA+mC,EACA,OAAAA,EAIA,MAAAxM,EAAAhpC,KAAAkkD,uBAAAlT,GAEAmT,KAEA,QAAA9mD,EAAA,EAAkBA,EAAA2zC,EAAAjI,WAA6B1rC,IAAA,CAE/C,MAAAsjD,EAAA3P,EAAAM,WAAAj0C,GACA4lD,EAAAjjD,KAAAokD,eAAAzD,GAEAsC,GACAkB,EAAAziD,KAAAuhD,GAIA,WAAa/a,GAAaic,GAAe/Z,SAAApB,IAUzCtpC,eAAAihD,GACA,MAAA0D,EAAArkD,KAAA6xC,kBAAA8O,EAAA/H,eAAA+H,EAAA/a,aACA0e,EAAAtkD,KAAA6xC,kBAAA8O,EAAA9H,aAAA8H,EAAA1a,WAEA,OAAAoe,GAAAC,EACA,IAAc5d,GAAS2d,EAAAC,GAGvB,KAkBA5kD,kBAAA8xC,EAAAE,GACA,GAAOkI,GAAapI,EAAAxxC,KAAA65C,aACpB,OAAA75C,KAAA6xC,kBAAAL,EAAA1vC,WAAwDwR,GAAOk+B,IAI/D,MAAAuE,EAAA/1C,KAAA2hD,aAAAnQ,GAEA,GAAAuE,KAAA5W,GAAA,aACA,OAAUkF,GAAYsB,cAAAoQ,GAGtB,GAAO+C,GAAMtH,GAAA,CACb,GAAQgI,GAAchI,GACtB,OAAAxxC,KAAA6xC,kBAAAL,EAAA1vC,WAAyDwR,GAAOk+B,IAGhE,MAAA8R,EAAAtjD,KAAAukD,0BAAA/S,GACA,IAAAvZ,EAAAyZ,EAEA,OAAA4R,GAIQhK,GAAgB9H,KAExBvZ,GADAA,GAAcmhB,IACd,IAAAnhB,GAGA,IAAcoM,GAAYif,EAAArrB,IAR1B,KAYA,OAAAyZ,EAAA,CACA,MAAA4R,EAAAtjD,KAAA2hD,aAAAnQ,GAEA,GAAA8R,EACA,WAAgBjf,GAAYif,EAAA,OAExB,CACJ,MAAAC,EAAA/R,EAAA17B,WAAA47B,EAAA,GACA8S,EAAuB1L,GAAMyK,GAC7BvjD,KAAAukD,0BAAAhB,GACAvjD,KAAA2hD,aAAA4B,GAGA,GAAAiB,KAAA7zC,OACA,WAAgB0zB,GAAYmgB,EAAA7zC,OAAA6zC,EAAA5iD,MAAA,GAI5B,YAeAlC,aAAA+kD,GACA,OAAAzkD,KAAAyjD,mBAAAgB,IAAAzkD,KAAAsiD,kBAAApkD,IAAAumD,GAuBA/kD,0BAAA+5C,GACA,GAAOD,GAAcC,GACrB,YAIA,MAAA5G,EAAA7yC,KAAAyjD,mBAAAhK,GAEA,GAAA5G,EACA,OAAAA,EAGA,MAAArxC,EAAAi4C,EAAAj4C,gBAGA,GAAAA,EAAA,CACA,IAAAxB,KAAA0kD,UAAAljD,GAEA,YAGA,MAAAu0C,EAAA/1C,KAAA2hD,aAAAngD,GAEA,GAAAu0C,EAAA,CAIA,OAHAA,EAAA5iC,uBAGgC8rB,GAChC8W,EAAA5iC,YAEA,UAKA,CACA,MAAA4iC,EAAA/1C,KAAA2hD,aAAAlI,EAAA33C,YAEA,GAAAi0C,EAAA,CACA,MAAAzxC,EAAAyxC,EAAA5X,SAAA,GAGA,OAAA75B,aAA+B26B,GAC/B36B,EAEA,MAKA,YAaA5E,aAAAilD,GACA,OAAA3kD,KAAAuiD,kBAAArkD,IAAAymD,GAkBAjlD,yBAAAk/C,GACA,MAAAp9C,EAAAo9C,EAAAp9C,gBAGA,OAAAA,GAAAxB,KAAAu8C,aAAA/6C,GACAxB,KAAAu8C,aAAA/6C,GAAA2R,aAIA3R,GAAAo9C,EAAAjuC,QAAA3Q,KAAAu8C,aAAAqC,EAAAjuC,QACA3Q,KAAAu8C,aAAAqC,EAAAjuC,QAAAmF,WAAA,GAGA,KAQApW,MAAAklD,GACA,MAAAC,EAAA7kD,KAAAu8C,aAAAqI,GAEA,GAAAC,KAAA3T,cAAAwQ,gBAAAmD,EAAA,CAEA,MAAAC,QAAUA,EAAAhiC,WAAsBtE,GAAMvhB,OACtC8nD,KAIAC,GAAAH,EAAAvjD,IACA,MAAA2jD,WAAWA,EAAAC,aAAwB5jD,EAEnCyjD,EAAArjD,MAAAujD,EAAAC,MAGAL,EAAA/b,QAMAkc,GAAAH,EAAAvjD,IACA,MAAA2jD,EAAAC,GAAAH,EAAA5e,QAEA7kC,EAAA2jD,aACA3jD,EAAA4jD,cAKG1mC,GAAMvhB,OAAAgmB,SAAA6hC,EAAAhiC,IAUTpjB,UAAA4B,GACA,OAAAA,KAAAY,UAAAoX,KAAA4nC,aASAxhD,mBAAA4B,GACA,OAAAA,KAAAY,UAAAoX,KAAA6rC,uBASAzlD,UAAA4B,GACA,OAAAA,KAAAY,UAAAoX,KAAA8rC,aASA1lD,uBAAAikC,GACA,GAAAA,EAAAgD,YACA,SAKA,MAAAkC,EAAAjoC,SAAAggD,cAEA/X,EAAAua,SAAAzf,EAAA0hB,WAAA1hB,EAAA2hB,cACAzc,EAAAwa,OAAA1f,EAAA8N,UAAA9N,EAAAgO,aAEA,MAAAvH,EAAAvB,EAAA0I,UAIA,OAFA1I,EAAA0c,SAEAnb,EAUA1qC,mBAAA65C,GACA,MAAAjb,EAAoBE,GAAY+a,GAKhC,IAFAjb,EAAA7X,MAEA6X,EAAAl8B,QAAA,CACA,MAAAm3C,EAAAjb,EAAA7X,MACAy5B,EAAAlgD,KAAAsiD,kBAAApkD,IAAAq7C,GAEA,GAAA2G,KAAA/gB,GAAA,aACA,OAAA+gB,EAIA,YAaAxgD,sBAAAsxC,GACA,OAAAhxC,KAAAwlD,+BAAAxU,EAAAqU,WAAArU,EAAAsU,eACAtlD,KAAAwlD,+BAAAxU,EAAAS,UAAAT,EAAAW,aAWAjyC,+BAAA8xC,EAAAvZ,GAEA,GAAO6gB,GAAMtH,IAAiB8H,GAAgB9H,IAAAvZ,EAA0BmhB,GAExE,SAGA,GAAAp5C,KAAA0kD,UAAAlT,IAAsC8H,GAAgB9H,EAAA17B,WAAAmiB,IAEtD,SAGA,MAAAqrB,EAAAtjD,KAAA2hD,aAAAnQ,GAIA,OAAA8R,MAAAnkB,GAAA,aAwBAz/B,yBAAA4B,GACA,IAAA1B,EAAA0B,EAAA1B,KAIA,GAAA0B,EAAAk9B,eAAA6V,KAAA1jC,GAAA3Q,KAAAoiD,YAAAqD,SAAA90C,EAAA/S,OACA,OAAAgC,EAKA,QAAAA,EAAAkjC,OAAA,IACA,MAAA4iB,EAAA1lD,KAAA2lD,yBAAArkD,GAAA,KACAokD,GAAA1lD,KAAA4lD,mBAAAF,KAEAA,IACA9lD,EAAA,IAAAA,EAAA2c,OAAA,IAKA,QAAA3c,EAAAkjC,OAAAljC,EAAAwC,OAAA,IACApC,KAAA2lD,yBAAArkD,GAAA,KAGA1B,IAAA2c,OAAA,EAAA3c,EAAAwC,OAAA,QAIA,OAAAxC,EAAAuQ,QAAA,QAA4B,MAU5BzQ,mBAAA4B,GACA,GAAAA,EAAAk9B,eAAA6V,KAAA1jC,GAAA3Q,KAAAoiD,YAAAqD,SAAA90C,EAAA/S,OACA,SAGA,MAAAgC,EAAAI,KAAA6iD,yBAAAvhD,GAEA,WAAA1B,EAAAkjC,OAAAljC,EAAAwC,OAAA,GAiBA1C,wBAAA4B,GACA,IAAA1B,EAAA0B,EAAA1B,KAEA,GAAAimD,GAAAvkD,EAAAtB,KAAAoiD,aACA,OAAU1I,GAAoBp4C,GAO9B1B,IAAAuQ,QAAA,iBAAqC,KAErC,MAAAu1C,EAAA1lD,KAAA8lD,0BAAAxkD,GAAA,GACAD,EAAArB,KAAA8lD,0BAAAxkD,GAAA,GAEAykD,EAAA/lD,KAAAgmD,4BAAAN,GACAO,EAAAjmD,KAAAkmD,6BAAA5kD,EAAAD,GA4CA,OAxCA0kD,IACAnmD,IAAAuQ,QAAA,UAIA81C,IACArmD,IAAAuQ,QAAA,UAeAvQ,GARAA,EAAS85C,GAAoB,IAAAyM,KAAAvmD,KAQ7BuQ,QAAA,iBAKA41C,IACAnmD,IAAAuQ,QAAA,gBAOO2oC,GAAMz3C,IAAA,KAAAA,EAAAzB,KAAAkjC,OAAA,KACbljC,IAAAuQ,QAAA,sBAKAvQ,EASAF,4BAAAgmD,GACA,OAAAA,MAIOxD,GAASwD,IAIhB,cAAA1kC,KAAA0kC,EAAA9lD,KAAAkjC,OAAA4iB,EAAA9lD,KAAAwC,OAAA,KAUA1C,6BAAA4B,EAAAD,GACA,OAAAA,IAIUi4C,GAAgBh4C,GAW1B5B,yBAAA4B,EAAA8kD,GACA,MAAA/f,EAAA,IAAyBpC,IACzBE,cAAAiiB,EAA4B/hB,GAAYgB,aAAA/jC,GAAwB+iC,GAAYsB,cAAArkC,GAC5E8iC,UAAAgiB,EAAA,uBAGA,UAAA9nD,KAAA+nC,EAAA,CAGA,GAAA/nC,EAAA6T,KAAAgtB,GAAA,oBACA,YAGA,GAAA7gC,EAAA6T,KAAAgtB,GAAA,MACA,YAGA,GAAA7gC,EAAA6T,KAAAgtB,GAAA,aACA,OAAA7gC,EAAA6T,KAIA,YAwBAzS,0BAAA4B,EAAA8kD,GACA,IAAA9kD,EAAAQ,WACA,YAGA,MAAAsiC,EAAAgiB,EAAA,0BACAxlD,EAAAU,EAAA4vC,cACAmV,EAAwB7nB,GAAYl9B,GAAA,GAEpC+kC,EAAAzlC,EAAAC,iBAAAwlD,EAAAC,WAAAC,UAAAD,WAAAE,cACAC,WAAAnlD,GACSw3C,GAAMx3C,GACfglD,WAAAI,cAGA,MAAAplD,EAAAoJ,QACA47C,WAAAI,cAGAJ,WAAAK,cAIAtgB,EAAA9kC,YAAAD,EAEA,MAAAslD,EAAAvgB,EAAAjC,KAEA,UAAAwiB,EAAA,CACA,MAAAC,EClmCe,SAAAC,EAAAC,GACf,MAAAxoB,EAAoBC,GAAYsoB,GAChCroB,EAAoBD,GAAYuoB,GAEhC,IAAA1pD,EAAA,EAGA,KAAAkhC,EAAAlhC,IAAAohC,EAAAphC,IAAAkhC,EAAAlhC,IACAA,IAGA,WAAAA,EAAA,KAAAkhC,EAAAlhC,EAAA,GDulCeqqC,CAAiBpmC,EAAAslD,GAKhC,GACAC,IACAhB,GAAAvkD,EAAAtB,KAAAqiD,cAAAwE,KACAhB,GAAAe,EAAA5mD,KAAAqiD,cAAAwE,GAGA,OAAAD,EAIA,aAWA,SAAAf,GAAAvkD,EAAAic,EAAAypC,GACA,IAAAC,EAAezoB,GAAYl9B,GAM3B,OAJA0lD,IACAC,IAAAzwC,MAAAywC,EAAA3zC,QAAA0zC,GAAA,IAGAC,EAAA5S,KAAA1jC,KAAAjG,SAAA6S,EAAAkoC,SAAA90C,EAAAjG,QAAApC,gBAQA,SAAA08C,GAAA1jD,EAAA4jB,GACA,KAAA5jB,MAAyBkd,GAAM5d,UAC/BskB,EAAA5jB,GACAA,IAAAQ,WEjpCe,SAAAolD,GAAAlzC,GACf,MAAAmzC,EAAAppD,OAAAkB,UAAAqlB,SAAAnT,MAAA6C,GAGA,yBAAAmzC,GAKA,mBAAAA,EC2Fe,IAAAC,GA9ESn4B,MAAYhK,GAepCvlB,SAAA4lB,KAAA+hC,GAGA,GAAOpM,GAAM31B,IAAe4hC,GAAQ5hC,GAAA,CACpC,MAAAgiC,EAAAtnD,KAAAunD,iBAAAjiC,IAAA,IAAyDkiC,GAAYliC,GAErEgiC,EAAAG,UAAAJ,GAEA/hC,EAAAgiC,EAIEriC,EAAYE,SAAA3nB,KAAAwC,KAAAslB,KAAA+hC,IAkBd3nD,cAAA4lB,EAAAjK,EAAA6J,GAEA,GAAO+1B,GAAM31B,IAAe4hC,GAAQ5hC,GAAA,CACpC,MAAAgiC,EAAAtnD,KAAAunD,iBAAAjiC,GAGA,IAAAgiC,EACA,OAGAhiC,EAAAgiC,EAIEriC,EAAYI,cAAA7nB,KAAAwC,KAAAslB,EAAAjK,EAAA6J,GAEdI,aAA0BkiC,IAC1BliC,EAAAigC,OAAAlqC,IAWA3b,iBAAA4B,GACA,OhKuTO,SAAAomD,EAAAC,GACP,OAAAD,EAAA3iC,IAAA2iC,EAAA3iC,GAAA4iC,GACAD,EAAA3iC,GAAA4iC,GAAAriC,QAGA,KgK5TSsiC,CAAqB5nD,KAAA6nD,GAAAvmD,aAoCxBkmD,GAKN9nD,YAAA4B,GAEEqkB,EAAa3lB,KAAA6nD,GAAAvmD,IAGftB,KAAA8nD,SAAAxmD,GAiGA,SAAAumD,GAAAvmD,GACA,OAAAA,EAAA,qBAAAA,EAAA,mBAAmE6iB,KA9FnE8K,GAAQu4B,GAAYvoD,UAAYgmB,GAqBhCvlB,OAAA2b,EAAA6J,EAAA1d,MAGA,GAAAxH,KAAA+nD,eAAA/nD,KAAA+nD,cAAA1sC,GACA,OAGA,MAAA2sC,EAAAhoD,KAAAioD,mBAAA5sC,IAAA7T,EAAA0gD,YAGAloD,KAAA8nD,SAAAvtC,iBAAAc,EAAA2sC,IAAAxgD,EAAA0gD,YAEAloD,KAAA+nD,gBACA/nD,KAAA+nD,kBAKA/nD,KAAA+nD,cAAA1sC,GAAA2sC,GASAtoD,OAAA2b,GACA,IAAAyK,GAMA9lB,KAAA+nD,cAAA1sC,KAAAyK,EAAA9lB,KAAA6mB,QAAAxL,KAAAyK,EAAAD,UAAAzjB,QACApC,KAAA+nD,cAAA1sC,GAAA8sC,kBAeAzoD,mBAAA2b,EAAA6sC,GACA,MAAAF,EAAAI,IACApoD,KAAA4nB,KAAAvM,EAAA+sC,IAWA,OALAJ,EAAAG,eAAA,MACAnoD,KAAA8nD,SAAAttC,oBAAAa,EAAA2sC,EAAAE,UACAloD,KAAA+nD,cAAA1sC,KAGA2sC,WCjOeK,GAMf3oD,YAAAoxC,GAOA9wC,KAAA8wC,OAQA9wC,KAAAY,SAAAkwC,EAAAlwC,SAQAZ,KAAAsoD,WAAA,EAaA5oD,SACAM,KAAAsoD,WAAA,EASA5oD,UACAM,KAAAsoD,WAAA,EAMA5oD,UACAM,KAAAuoD,UACAvoD,KAAAqlB,iBAYAgN,GAAGg2B,GAAYjB,IC5Ff,IAAIoB,GAAc,4BAiBH,IAAAC,GALf,SAAAnqD,GAEA,OADA0B,KAAAq0B,SAAAjtB,IAAA9I,EAA2BkqD,IAC3BxoD,MCFe,IAAA0oD,GAJf,SAAApqD,GACA,OAAA0B,KAAAq0B,SAAA5yB,IAAAnD,ICEA,SAAAqqD,GAAAl8C,GACA,IAAA7K,GAAA,EACAQ,EAAA,MAAAqK,EAAA,EAAAA,EAAArK,OAGA,IADApC,KAAAq0B,SAAA,IAAsBoC,KACtB70B,EAAAQ,GACApC,KAAAmD,IAAAsJ,EAAA7K,IAKA+mD,GAAA1pD,UAAAkE,IAAAwlD,GAAA1pD,UAAAyC,KAAmD+mD,GACnDE,GAAA1pD,UAAAwC,IAAyBinD,GAEV,IAAAE,GAAA,GCJA,IAAAC,GAZf,SAAAx9B,EAAAmM,GAIA,IAHA,IAAA51B,GAAA,EACAQ,EAAA,MAAAipB,EAAA,EAAAA,EAAAjpB,SAEAR,EAAAQ,GACA,GAAAo1B,EAAAnM,EAAAzpB,KAAAypB,GACA,SAGA,UCPe,IAAAy9B,GAJf,SAAAC,EAAAnqD,GACA,OAAAmqD,EAAAtnD,IAAA7C,ICJAoqD,GAAA,EACAC,GAAA,EA4Ee,IAAAC,GA7Df,SAAA79B,EAAAd,EAAA8S,EAAAzS,EAAAu+B,EAAA7rB,GACA,IAAAoC,EAAArC,EAAA2rB,GACAI,EAAA/9B,EAAAjpB,OACAinD,EAAA9+B,EAAAnoB,OAEA,GAAAgnD,GAAAC,KAAA3pB,GAAA2pB,EAAAD,GACA,SAGA,IAAAzrB,EAAAL,EAAAp/B,IAAAmtB,GACA,GAAAsS,GAAAL,EAAAp/B,IAAAqsB,GACA,OAAAoT,GAAApT,EAEA,IAAA3oB,GAAA,EACAgI,GAAA,EACA0/C,EAAAjsB,EAAA4rB,GAAA,IAAsDL,QAAQjnD,EAM9D,IAJA27B,EAAAl2B,IAAAikB,EAAAd,GACA+S,EAAAl2B,IAAAmjB,EAAAc,KAGAzpB,EAAAwnD,GAAA,CACA,IAAAG,EAAAl+B,EAAAzpB,GACA4nD,EAAAj/B,EAAA3oB,GAEA,GAAAgpB,EACA,IAAA6+B,EAAA/pB,EACA9U,EAAA4+B,EAAAD,EAAA3nD,EAAA2oB,EAAAc,EAAAiS,GACA1S,EAAA2+B,EAAAC,EAAA5nD,EAAAypB,EAAAd,EAAA+S,GAEA,QAAA37B,IAAA8nD,EAAA,CACA,GAAAA,EACA,SAEA7/C,GAAA,EACA,MAGA,GAAA0/C,GACA,IAAWT,GAASt+B,EAAA,SAAAi/B,EAAAE,GACpB,IAAiBZ,GAAQQ,EAAAI,KACzBH,IAAAC,GAAAL,EAAAI,EAAAC,EAAAnsB,EAAAzS,EAAA0S,IACA,OAAAgsB,EAAA5nD,KAAAgoD,KAEW,CACX9/C,GAAA,EACA,YAEK,GACL2/C,IAAAC,IACAL,EAAAI,EAAAC,EAAAnsB,EAAAzS,EAAA0S,GACA,CACA1zB,GAAA,EACA,OAKA,OAFA0zB,EAAA,OAAAjS,GACAiS,EAAA,OAAA/S,GACA3gB,GC9De,IAAA+/C,GAVf,SAAA57C,GACA,IAAAnM,GAAA,EACAgI,EAAA/F,MAAAkK,EAAAxD,MAKA,OAHAwD,EAAAlM,QAAA,SAAAvD,EAAAM,GACAgL,IAAAhI,IAAAhD,EAAAN,KAEAsL,GCGe,IAAAggD,GAVf,SAAAxiD,GACA,IAAAxF,GAAA,EACAgI,EAAA/F,MAAAuD,EAAAmD,MAKA,OAHAnD,EAAAvF,QAAA,SAAAvD,GACAsL,IAAAhI,GAAAtD,IAEAsL,GCNIigD,GAAoB,EACpBC,GAAsB,EAGtBC,GAAO,mBACPC,GAAO,gBACPC,GAAQ,iBACRC,GAAM,eACNC,GAAS,kBACTC,GAAS,kBACTC,GAAM,eACNC,GAAS,kBACTC,GAAS,kBAETC,GAAc,uBACdC,GAAW,oBAGXC,GAAc5iC,EAASA,EAAM7oB,eAAA0C,EAC7BgpD,GAAgBD,GAAcA,GAAWpwB,aAAA34B,EAoF9B,IAAAipD,GAjEf,SAAA7rD,EAAAwrB,EAAAjC,EAAA+U,EAAAzS,EAAAu+B,EAAA7rB,GACA,OAAAhV,GACA,KAASmiC,GACT,GAAA1rD,EAAA86B,YAAAtP,EAAAsP,YACA96B,EAAAi7B,YAAAzP,EAAAyP,WACA,SAEAj7B,IAAAkgB,OACAsL,IAAAtL,OAEA,KAASurC,GACT,QAAAzrD,EAAA86B,YAAAtP,EAAAsP,aACAsvB,EAAA,IAAyB1vB,GAAU16B,GAAA,IAAc06B,GAAUlP,KAK3D,KAASw/B,GACT,KAASC,GACT,KAASG,GAGT,OAAa7/B,GAAEvrB,GAAAwrB,GAEf,KAAS0/B,GACT,OAAAlrD,EAAAnB,MAAA2sB,EAAA3sB,MAAAmB,EAAAY,SAAA4qB,EAAA5qB,QAEA,KAASyqD,GACT,KAASE,GAIT,OAAAvrD,GAAAwrB,EAAA,GAEA,KAAS2/B,GACT,IAAAW,EAAoBlB,GAEpB,KAASU,GACT,IAAA3qB,EAAArC,EAAgCwsB,GAGhC,GAFAgB,MAA4BjB,IAE5B7qD,EAAAwL,MAAAggB,EAAAhgB,OAAAm1B,EACA,SAGA,IAAA/B,EAAAL,EAAAp/B,IAAAa,GACA,GAAA4+B,EACA,OAAAA,GAAApT,EAEA8S,GAAiBysB,GAGjBxsB,EAAAl2B,IAAArI,EAAAwrB,GACA,IAAA3gB,EAAmBs/C,GAAW2B,EAAA9rD,GAAA8rD,EAAAtgC,GAAA8S,EAAAzS,EAAAu+B,EAAA7rB,GAE9B,OADAA,EAAA,OAAAv+B,GACA6K,EAEA,KAAS2gD,GACT,GAAUI,GACV,OAAeA,GAAantD,KAAAuB,IAAiB4rD,GAAantD,KAAA+sB,GAG1D,UCzGIugC,GAAoB,EAMpBC,GAHWhtD,OAAAkB,UAGiBC,eA+EjB,IAAA8rD,GAhEf,SAAAjsD,EAAAwrB,EAAA8S,EAAAzS,EAAAu+B,EAAA7rB,GACA,IAAAoC,EAAArC,EAA4BytB,GAC5BG,EAAiB1yB,GAAUx5B,GAC3BmsD,EAAAD,EAAA7oD,OAIA,GAAA8oD,GAHiB3yB,GAAUhO,GAC3BnoB,SAEAs9B,EACA,SAGA,IADA,IAAA99B,EAAAspD,EACAtpD,KAAA,CACA,IAAAhD,EAAAqsD,EAAArpD,GACA,KAAA89B,EAAA9gC,KAAA2rB,EAAqCwgC,GAAcvtD,KAAA+sB,EAAA3rB,IACnD,SAIA,IAAA++B,EAAAL,EAAAp/B,IAAAa,GACA,GAAA4+B,GAAAL,EAAAp/B,IAAAqsB,GACA,OAAAoT,GAAApT,EAEA,IAAA3gB,GAAA,EACA0zB,EAAAl2B,IAAArI,EAAAwrB,GACA+S,EAAAl2B,IAAAmjB,EAAAxrB,GAGA,IADA,IAAAosD,EAAAzrB,IACA99B,EAAAspD,GAAA,CAEA,IAAAxgC,EAAA3rB,EADAH,EAAAqsD,EAAArpD,IAEA4nD,EAAAj/B,EAAA3rB,GAEA,GAAAgsB,EACA,IAAA6+B,EAAA/pB,EACA9U,EAAA4+B,EAAA9+B,EAAA9rB,EAAA2rB,EAAAxrB,EAAAu+B,GACA1S,EAAAF,EAAA8+B,EAAA5qD,EAAAG,EAAAwrB,EAAA+S,GAGA,UAAA37B,IAAA8nD,EACA/+B,IAAA8+B,GAAAL,EAAAz+B,EAAA8+B,EAAAnsB,EAAAzS,EAAA0S,GACAmsB,GACA,CACA7/C,GAAA,EACA,MAEAuhD,MAAA,eAAAvsD,GAEA,GAAAgL,IAAAuhD,EAAA,CACA,IAAAC,EAAArsD,EAAA2J,YACA2iD,EAAA9gC,EAAA7hB,YAGA0iD,GAAAC,GACA,gBAAAtsD,GAAA,gBAAAwrB,KACA,mBAAA6gC,mBACA,mBAAAC,qBACAzhD,GAAA,GAKA,OAFA0zB,EAAA,OAAAv+B,GACAu+B,EAAA,OAAA/S,GACA3gB,GC3EI0hD,GAAoB,EAGpBC,GAAO,qBACPC,GAAQ,iBACRC,GAAS,kBAMTC,GAHW3tD,OAAAkB,UAGiBC,eA6DjB,IAAAysD,GA7Cf,SAAA5sD,EAAAwrB,EAAA8S,EAAAzS,EAAAu+B,EAAA7rB,GACA,IAAAsuB,EAAiBn+B,GAAO1uB,GACxB8sD,EAAiBp+B,GAAOlD,GACxBuhC,EAAAF,EAA0BJ,GAAWnyB,GAAMt6B,GAC3CgtD,EAAAF,EAA0BL,GAAWnyB,GAAM9O,GAK3CyhC,GAHAF,KAAqBP,GAAUE,GAASK,IAGbL,GAC3BQ,GAHAF,KAAqBR,GAAUE,GAASM,IAGbN,GAC3BS,EAAAJ,GAAAC,EAEA,GAAAG,GAAmBnuD,OAAAwgB,GAAA,EAAAxgB,CAAQgB,GAAA,CAC3B,IAAShB,OAAAwgB,GAAA,EAAAxgB,CAAQwsB,GACjB,SAEAqhC,GAAA,EACAI,GAAA,EAEA,GAAAE,IAAAF,EAEA,OADA1uB,MAAA,IAA0BxG,IAC1B80B,GAAwB59B,GAAYjvB,GAC5BmqD,GAAWnqD,EAAAwrB,EAAA8S,EAAAzS,EAAAu+B,EAAA7rB,GACXstB,GAAU7rD,EAAAwrB,EAAAuhC,EAAAzuB,EAAAzS,EAAAu+B,EAAA7rB,GAElB,KAAAD,EAAkBiuB,IAAoB,CACtC,IAAAa,EAAAH,GAAmCN,GAAcluD,KAAAuB,EAAA,eACjDqtD,EAAAH,GAAmCP,GAAcluD,KAAA+sB,EAAA,eAEjD,GAAA4hC,GAAAC,EAAA,CACA,IAAAC,EAAAF,EAAAptD,EAAAT,QAAAS,EACAutD,EAAAF,EAAA7hC,EAAAjsB,QAAAisB,EAGA,OADA+S,MAAA,IAA4BxG,IAC5BqyB,EAAAkD,EAAAC,EAAAjvB,EAAAzS,EAAA0S,IAGA,QAAA4uB,IAGA5uB,MAAA,IAAwBxG,IACfk0B,GAAYjsD,EAAAwrB,EAAA8S,EAAAzS,EAAAu+B,EAAA7rB,KCpDN,IAAAivB,GAVf,SAAAC,EAAAluD,EAAAisB,EAAA8S,EAAAzS,EAAA0S,GACA,OAAAh/B,IAAAisB,IAGA,MAAAjsB,GAAA,MAAAisB,IAA0C2C,GAAY5uB,KAAY4uB,GAAY3C,GAC9EjsB,MAAAisB,KAESohC,GAAertD,EAAAisB,EAAA8S,EAAAzS,EAAA4hC,EAAAlvB,KCgBT,IAAAmvB,GANf,SAAAnuD,EAAAisB,EAAAK,GAEA,IAAAhhB,GADAghB,EAAA,mBAAAA,SAAAjpB,GACAipB,EAAAtsB,EAAAisB,QAAA5oB,EACA,YAAAA,IAAAiI,EAAgC2iD,GAAWjuD,EAAAisB,OAAA5oB,EAAAipB,KAAAhhB,SCLtB8iD,WAAyBrE,GAC9C3oD,YAAAoxC,GACA/wC,MAAA+wC,GAQA9wC,KAAA0zB,SACAlQ,WAAA,EACAmpC,eAAA,EACAC,uBAAA,EACAnpC,SAAA,GAQAzjB,KAAA+wC,aAAAD,EAAAC,aAOA/wC,KAAA6sD,SAAA/b,EAAAgc,UAQA9sD,KAAA+sD,gBAQA/sD,KAAAgtD,kBAAA,IAAA/vD,OAAAomB,iBAAArjB,KAAAitD,aAAApuD,KAAAmB,OAOAN,QACAM,KAAAitD,aAAAjtD,KAAAgtD,kBAAAE,eAMAxtD,QAAAixC,GACA3wC,KAAA+sD,aAAArrD,KAAAivC,GAEA3wC,KAAAsoD,WACAtoD,KAAAgtD,kBAAAzpC,QAAAotB,EAAA3wC,KAAA0zB,SAOAh0B,SACAK,MAAAotD,SAEA,UAAAxc,KAAA3wC,KAAA+sD,aACA/sD,KAAAgtD,kBAAAzpC,QAAAotB,EAAA3wC,KAAA0zB,SAOAh0B,UACAK,MAAAwoD,UAEAvoD,KAAAgtD,kBAAAI,aAMA1tD,UACAK,MAAAstD,UAEArtD,KAAAgtD,kBAAAI,aASA1tD,aAAA4tD,GAEA,OAAAA,EAAAlrD,OACA,OAGA,MAAA2uC,EAAA/wC,KAAA+wC,aAGAwc,EAAA,IAAA9mD,IACA+mD,EAAA,IAAAxqD,IAIA,UAAAyqD,KAAAH,EACA,iBAAAG,EAAAlrD,KAAA,CACA,MAAA/B,EAAAuwC,EAAA4Q,aAAA8L,EAAAriD,QAGA,GAAA5K,KAAA2+B,GAAA,aACA,SAGA3+B,IAAAR,KAAA0tD,mBAAAD,IACAD,EAAArqD,IAAA3C,GAMA,UAAAitD,KAAAH,EAAA,CACA,MAAA9sD,EAAAuwC,EAAA4Q,aAAA8L,EAAAriD,QAGA,KAAA5K,MAAA2+B,GAAA,eAIA,kBAAAsuB,EAAAlrD,KAAA,CACA,MAAAiW,EAAAu4B,EAAAwT,0BAAAkJ,EAAAriD,QAEAoN,IAAAg1C,EAAA/rD,IAAA+W,EAAA7H,QAGA48C,EAAAnmD,IAAAoR,GACAjW,KAAA,OACA44C,QAAA3iC,EAAA5Y,KACAw7C,QAAe1B,GAAoB+T,EAAAriD,QACnC9J,KAAAkX,KAMAA,GAAuB8gC,GAAgBmU,EAAAriD,SACvCoiD,EAAArqD,IAAA4tC,EAAA4Q,aAAA8L,EAAAriD,OAAAtJ,cASA,MAAA6rD,KAEA,UAAAC,KAAAL,EAAA9gD,SACAzM,KAAA6sD,SAAAgB,WAAA,OAAAD,EAAAtsD,MACAqsD,EAAAjsD,KAAAksD,GAGA,UAAA7X,KAAAyX,EAAA,CACA,MAAA7c,EAAAI,EAAAwL,aAAAxG,GACA+X,EAAAjqD,MAAAC,KAAAiyC,EAAA9T,eACA8rB,EAAAlqD,MAAAC,KAAAitC,EAAAgT,kBAAApT,GAAoF6M,cAAA,KAI3EiP,GAAWqB,EAAAC,EAAAC,KACpBhuD,KAAA6sD,SAAAgB,WAAA,WAAA9X,GAEA4X,EAAAjsD,MACAa,KAAA,WACA0rD,YAAAH,EACAI,YAAAH,EACAzsD,KAAAy0C,KAOA,MAAA/E,EAAAsc,EAAA,GAAAliD,OAAA8lC,cAAAE,eAEA,IAAAoE,EAAA,KAEA,GAAAxE,KAAAqU,WAAA,CAMA,MAAA8I,EAAApd,EAAAc,kBAAAb,EAAAqU,WAAArU,EAAAsU,cACA8I,EAAArd,EAAAc,kBAAAb,EAAAS,UAAAT,EAAAW,aAGAwc,GAAAC,IACA5Y,EAAA,IAAwBtN,GAAaimB,IACrC9iB,SAAA+iB,GAUA,SAAAJ,EAAAK,EAAAC,GAEA,IAAAzqD,MAAAuJ,QAAAihD,GAKA,OAAAA,IAAAC,MAIAD,EAAAlvB,GAAA,UAAAmvB,EAAAnvB,GAAA,UACAkvB,EAAAzuD,OAAA0uD,EAAA1uD,KAlBAI,KAAAY,SAAAgnB,KAAA,YAAA+lC,EAAAnY,GAIAx1C,KAAA8wC,KAAAviC,SA+BA7O,mBAAA+tD,GACA,IAAAc,EAAA,KASA,OANA,OAAAd,EAAAt6C,aAAA,IAAAs6C,EAAAe,aAAApsD,QAAA,GAAAqrD,EAAAgB,WAAArsD,SACAmsD,EAAAvuD,KAAA+wC,aAAA0O,UAAAgO,EAAAgB,WAAA,IACAjR,cAAA,KAIA+Q,KAAApvB,GAAA,uBCnRqBuvB,GAMrBhvD,YAAAoxC,EAAA6d,EAAAC,GAOA5uD,KAAA8wC,OAQA9wC,KAAAY,SAAAkwC,EAAAlwC,SAQAZ,KAAA2uD,WAQA3uD,KAAAixC,UAAA0d,EAAAvjD,OAEE6jB,GAAMjvB,KAAA4uD,GASRxjD,aACA,OAAApL,KAAA8wC,KAAAC,aAAA4Q,aAAA3hD,KAAAixC,WAMAvxC,iBACAM,KAAA2uD,SAAAxsC,iBAMAziB,kBACAM,KAAA2uD,SAAAzsC,yBC3CqB2sC,WAAyBxG,GAqB9C3oD,YAAAoxC,GACA/wC,MAAA+wC,GAQA9wC,KAAAkoD,YAAA,EAMAxoD,QAAAixC,IACA,iBAAA3wC,KAAA8uD,cAAA9uD,KAAA8uD,cAAA9uD,KAAA8uD,cAEAjtD,QAAAU,IACAvC,KAAAmlB,SAAAwrB,EAAApuC,EAAA,CAAAokB,EAAAgoC,KACA3uD,KAAAsoD,WACAtoD,KAAA+uD,WAAAJ,KAEOzG,WAAAloD,KAAAkoD,eAaPxoD,KAAAqQ,EAAA4+C,EAAAC,GACA5uD,KAAAsoD,WACAtoD,KAAAY,SAAAgnB,KAAA7X,EAAA,IAAsC2+C,GAAY1uD,KAAA8wC,KAAA6d,EAAAC,WC5E7BI,WAAoBH,GACzCnvD,YAAAoxC,GACA/wC,MAAA+wC,GAEA9wC,KAAA8uD,cAAA,mBAGApvD,WAAA0oD,GACApoD,KAAA4nB,KAAAwgC,EAAA7lD,KAAA6lD,GACArY,QAAAqY,EAAArY,QAEAC,OAAAoY,EAAApY,OACAC,QAAAmY,EAAAnY,SAAAmY,EAAA6G,QACA/e,SAAAkY,EAAAlY,SAEAE,gBACA,OAAWN,GAAO9vC,UCjBlB,IAIekvD,GAJf,WACA,OAASnnC,EAAA,EAAI8D,KAAAC,OCfTqjC,GAAS,kBAwBE,IAAAC,GALf,SAAA9wD,GACA,uBAAAA,GACK4uB,GAAY5uB,IAAWuqB,EAAUvqB,IAAW6wD,ICrBjDE,GAAA,IAGAC,GAAA,aAGAC,GAAA,qBAGAC,GAAA,aAGAC,GAAA,cAGAC,GAAAC,SA8Ce,IAAAC,GArBf,SAAAtxD,GACA,oBAAAA,EACA,OAAAA,EAEA,GAAM8wD,GAAQ9wD,GACd,OAAA+wD,GAEA,GAAMxnC,EAAQvpB,GAAA,CACd,IAAAisB,EAAA,mBAAAjsB,EAAAg8B,QAAAh8B,EAAAg8B,UAAAh8B,EACAA,EAAYupB,EAAQ0C,KAAA,GAAAA,EAEpB,oBAAAjsB,EACA,WAAAA,OAEAA,IAAA6R,QAAAm/C,GAAA,IACA,IAAAO,EAAAL,GAAAxuC,KAAA1iB,GACA,OAAAuxD,GAAAJ,GAAAzuC,KAAA1iB,GACAoxD,GAAApxD,EAAAkY,MAAA,GAAAq5C,EAAA,KACAN,GAAAvuC,KAAA1iB,GAAA+wD,IAAA/wD,GCzDAwxD,GAAA,sBAGIC,GAASz5C,KAAA6U,IACb6kC,GAAA15C,KAAA6d,IAoLe,IAAA87B,GA5Hf,SAAAzmC,EAAA0mC,EAAA1oD,GACA,IAAA2oD,EACAC,EACAC,EACAzmD,EACA0mD,EACAC,EACAC,EAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EAEA,sBAAAnnC,EACA,UAAAonC,UAAAd,IAUA,SAAAe,EAAAC,GACA,IAAA1rC,EAAA+qC,EACAllC,EAAAmlC,EAKA,OAHAD,EAAAC,OAAAzuD,EACA6uD,EAAAM,EACAlnD,EAAA4f,EAAArY,MAAA8Z,EAAA7F,GAuBA,SAAA2rC,EAAAD,GACA,IAAAE,EAAAF,EAAAP,EAMA,YAAA5uD,IAAA4uD,GAAAS,GAAAd,GACAc,EAAA,GAAAN,GANAI,EAAAN,GAMAH,EAGA,SAAAY,IACA,IAAAH,EAAe5B,KACf,GAAA6B,EAAAD,GACA,OAAAI,EAAAJ,GAGAR,EAAAa,WAAAF,EA3BA,SAAAH,GACA,IAEAM,EAAAlB,GAFAY,EAAAP,GAIA,OAAAG,EACAV,GAAAoB,EAAAf,GAJAS,EAAAN,IAKAY,EAoBAC,CAAAP,IAGA,SAAAI,EAAAJ,GAKA,OAJAR,OAAA3uD,EAIAgvD,GAAAR,EACAU,EAAAC,IAEAX,EAAAC,OAAAzuD,EACAiI,GAeA,SAAA0nD,IACA,IAAAR,EAAe5B,KACfqC,EAAAR,EAAAD,GAMA,GAJAX,EAAA/+C,UACAg/C,EAAApwD,KACAuwD,EAAAO,EAEAS,EAAA,CACA,QAAA5vD,IAAA2uD,EACA,OAzEA,SAAAQ,GAMA,OAJAN,EAAAM,EAEAR,EAAAa,WAAAF,EAAAf,GAEAO,EAAAI,EAAAC,GAAAlnD,EAmEA4nD,CAAAjB,GAEA,GAAAG,EAGA,OADAJ,EAAAa,WAAAF,EAAAf,GACAW,EAAAN,GAMA,YAHA5uD,IAAA2uD,IACAA,EAAAa,WAAAF,EAAAf,IAEAtmD,EAIA,OA1GAsmD,EAASN,GAAQM,IAAA,EACXroC,EAAQrgB,KACdipD,IAAAjpD,EAAAipD,QAEAJ,GADAK,EAAA,YAAAlpD,GACuBuoD,GAAUH,GAAQpoD,EAAA6oD,UAAA,EAAAH,GAAAG,EACzCM,EAAA,aAAAnpD,MAAAmpD,YAmGAW,EAAAG,OAnCA,gBACA9vD,IAAA2uD,GACAoB,aAAApB,GAEAE,EAAA,EACAL,EAAAI,EAAAH,EAAAE,OAAA3uD,GA+BA2vD,EAAAK,MA5BA,WACA,YAAAhwD,IAAA2uD,EAAA1mD,EAAAsnD,EAAyDhC,OA4BzDoC,SCnKqBM,WAA8BvJ,GAMnD3oD,YAAAoxC,GACA/wC,MAAA+wC,GASA9wC,KAAA6xD,kCAA2C5B,GAAQrwD,GAAAI,KAAAY,SAAAgnB,KAAA,sBAAAhoB,GAAA,KAMnDF,UACA,MAAAkB,EAAAZ,KAAAY,SAEAA,EAAAiwB,GAAA,WAAAlK,EAAA/mB,KACAgB,EAAA+iC,UAEA+E,QAmEA,SAAAqH,GACA,OAAAA,GAAmBhB,GAAQG,YAC3Ba,GAAahB,GAAQC,WACrBe,GAAahB,GAAQE,SACrBc,GAAahB,GAAQI,UAvErB2iB,CAAAlyD,EAAAmwC,UAAA/vC,KAAAsoD,YAEA1oD,EAAAuiB,iBAEAniB,KAAA+xD,qBAAAnyD,EAAAmwC,YAEMtrB,SAAA,WAMN/kB,UACAK,MAAAstD,UAEArtD,KAAA6xD,kCAAAJ,SAgBA/xD,qBAAAqwC,GACA,MAAApM,EAAA3jC,KAAAY,SAAA+iC,UACAquB,EAAA,IAA2B9pB,GAAavE,EAAAgG,aAA0BS,SAAAzG,EAAAqF,WAAAkB,MAAA,IAGlE6F,GAAkBhB,GAAQC,WAAAe,GAAyBhB,GAAQE,SAC3D+iB,EAAAvpB,MAAAupB,EAAA/mB,oBAIA8E,GAAkBhB,GAAQG,YAAAa,GAA0BhB,GAAQI,WAC5D6iB,EAAAvpB,MAAAupB,EAAA9mB,mBAGA,MAAAtrC,GACAqyD,aAAAtuB,EACAquB,eACAhhB,aAAA,MAIAhxC,KAAAY,SAAAgnB,KAAA,kBAAAhoB,GAMAI,KAAA6xD,kCAAAjyD,sBCjFqBsyD,WAA0B7J,GAC/C3oD,YAAAoxC,GACA/wC,MAAA+wC,GAWA9wC,KAAAmyD,iBAAArhB,EAAAshB,YAA4C1F,IAU5C1sD,KAAA2jC,UAAA3jC,KAAAY,SAAA+iC,UAUA3jC,KAAA+wC,aAAAD,EAAAC,aASA/wC,KAAAqyD,WAAA,IAAAC,QASAtyD,KAAA6xD,kCAA2C5B,GAAQrwD,GAAAI,KAAAY,SAAAgnB,KAAA,sBAAAhoB,GAAA,KAEnDI,KAAAuyD,2BAAAC,YAAA,IAAAxyD,KAAAyyD,qBAAA,KAQAzyD,KAAA0yD,iBAAA,EAMAhzD,QAAAixC,GACA,MAAAF,EAAAE,EAAAO,cAGAlxC,KAAAqyD,WAAA5wD,IAAAgvC,KAIAzwC,KAAAmlB,SAAAsrB,EAAA,uBACAzwC,KAAA2yD,uBAAAliB,KAGAzwC,KAAAqyD,WAAAlvD,IAAAstC,IAMA/wC,UACAK,MAAAstD,UAEAuF,cAAA5yD,KAAAuyD,4BACAvyD,KAAA6xD,kCAAAJ,SAWA/xD,uBAAA+wC,GAIA,IAAAzwC,KAAAsoD,YAAAtoD,KAAAY,SAAA8iC,YAAA1jC,KAAAY,SAAAiyD,WACA,OAIA7yD,KAAAmyD,iBAAAR,QAIA,MAAA3gB,EAAAP,EAAAU,YAAAC,eACA0hB,EAAA9yD,KAAA+wC,aAAAwQ,mBAAAvQ,GAEA,IAAAhxC,KAAA2jC,UAAAmC,QAAAgtB,KAAA9yD,KAAA+wC,aAAAsQ,sBAAArQ,GAOA,KAAAhxC,KAAA0yD,iBAAA,GASG5iD,GAAA,EAAGjN,KAAA,sGAKN,GAAA7C,KAAA2jC,UAAAyH,UAAA0nB,GAGA9yD,KAAA8wC,KAAAviC,aACG,CACH,MAAA3O,GACAqyD,aAAAjyD,KAAA2jC,UACAquB,aAAAc,EACA9hB,gBAIAhxC,KAAAY,SAAAgnB,KAAA,kBAAAhoB,GAMAI,KAAA6xD,kCAAAjyD,IASAF,qBACAM,KAAA0yD,iBAAA,SC1KqBK,WAAsBlE,GAC3CnvD,YAAAoxC,GACA/wC,MAAA+wC,GAEA9wC,KAAA8uD,cAAA,gBACA9uD,KAAAkoD,YAAA,EACA,MAAAtnD,EAAAZ,KAAAY,SAEAA,EAAAiwB,GAAA,aACAjwB,EAAA8iC,WAAA,EAOA1jC,KAAAgzD,iBAAA7B,WAAA,IAAArgB,EAAAviC,SAAA,MAGA3N,EAAAiwB,GAAA,QAAAC,EAAAlxB,KACA,MAAAqzD,EAAAryD,EAAA+iC,UAAAC,gBAEA,OAAAqvB,OAAArzD,EAAAwL,SACAxK,EAAA8iC,WAAA,EAGAoN,EAAAviC,YAYA7O,WAAAivD,GACA3uD,KAAA4nB,KAAA+mC,EAAApsD,KAAAosD,GAMAjvD,UACAM,KAAAgzD,kBACAtB,aAAA1xD,KAAAgzD,kBAGAjzD,MAAAstD,iBCrDqB6F,WAA4BrE,GACjDnvD,YAAAoxC,GACA/wC,MAAA+wC,GAEA9wC,KAAA8uD,cAAA,yDACA,MAAAluD,EAAAZ,KAAAY,SAEAA,EAAAiwB,GAAA,wBACAjwB,EAAAuyD,aAAA,IAGAvyD,EAAAiwB,GAAA,sBACAjwB,EAAAuyD,aAAA,IAIAzzD,WAAAivD,GACA3uD,KAAA4nB,KAAA+mC,EAAApsD,KAAAosD,ICtBe,SAAAyE,GAAAp/C,GACf,wBAAAjW,OAAAkB,UAAAqlB,SAAAnT,MAAA6C,GCAe,SAAAq/C,GAAA7yD,GAEf,MAAAgD,EAAAhD,EAAA0wC,cAAAC,YAAAmiB,iBAAA9yD,GAEA,OACAggD,IAAAmP,SAAAnsD,EAAA+vD,eAAA,IACAC,MAAA7D,SAAAnsD,EAAAiwD,iBAAA,IACAC,OAAA/D,SAAAnsD,EAAAmwD,kBAAA,IACAlT,KAAAkP,SAAAnsD,EAAAowD,gBAAA,KCRA,MAAAC,IAAA,sDAOqBC,GA4BrBp0D,YAAAoR,GACA,MAAAijD,EAAwBX,GAAOtiD,GAgB/B,GAPA/S,OAAAC,eAAAgC,KAAA,WAEA1B,MAAAwS,EAAAkjD,SAAAljD,EACAuZ,UAAA,EACApsB,YAAA,IAGOikD,GAASpxC,IAAAijD,EAAA,CAChB,MAAAE,EAAAF,EAAAjjD,EAAA8nC,eAAA9nC,EAEAmjD,EAAA/iB,eAAA+iB,EAAA/iB,cAAAgjB,KAAAC,SAAAF,IAaInkD,GAAA,EAAGjN,KACP,6FACMiO,WAKNsjD,GAAAp0D,KADA+zD,EAC8BD,GAAIO,iBAAAvjD,GAAA,GAElCA,EAAAwjD,8BAEG,GAAWpN,GAAQp2C,GAAA,CACtB,MAAAyjD,WAAUA,EAAAC,eAA0B1jD,EAEpCsjD,GAAAp0D,MACAwgD,IAAA,EACAgT,MAAAe,EACAb,OAAAc,EACA/T,KAAA,EACAC,MAAA6T,EACAE,OAAAD,SAGAJ,GAAAp0D,KAAA8Q,GAmDApR,QACA,WAAao0D,GAAI9zD,MAUjBN,OAAAm7C,EAAAD,GAMA,OALA56C,KAAAwgD,IAAA5F,EACA56C,KAAAwzD,MAAA3Y,EAAA76C,KAAA0gD,MACA1gD,KAAA0zD,OAAA9Y,EAAA56C,KAAAy0D,OACAz0D,KAAAygD,KAAA5F,EAEA76C,KAUAN,OAAAm7C,EAAAD,GAMA,OALA56C,KAAAwgD,KAAA5F,EACA56C,KAAAwzD,OAAA3Y,EACA76C,KAAAygD,MAAA5F,EACA76C,KAAA0zD,QAAA9Y,EAEA56C,KASAN,gBAAAg1D,GACA,MAAAC,GACAnU,IAAAlqC,KAAA6U,IAAAnrB,KAAAwgD,IAAAkU,EAAAlU,KACAgT,MAAAl9C,KAAA6d,IAAAn0B,KAAAwzD,MAAAkB,EAAAlB,OACAE,OAAAp9C,KAAA6d,IAAAn0B,KAAA0zD,OAAAgB,EAAAhB,QACAjT,KAAAnqC,KAAA6U,IAAAnrB,KAAAygD,KAAAiU,EAAAjU,OAMA,OAHAkU,EAAAjU,MAAAiU,EAAAnB,MAAAmB,EAAAlU,KACAkU,EAAAF,OAAAE,EAAAjB,OAAAiB,EAAAnU,IAEAmU,EAAAjU,MAAA,GAAAiU,EAAAF,OAAA,EACA,KAEA,IAAcX,GAAIa,GAUlBj1D,oBAAAg1D,GACA,MAAAC,EAAA30D,KAAA40D,gBAAAF,GAEA,OAAAC,EACAA,EAAAE,UAEA,EASAn1D,UACA,OAAAM,KAAA0gD,MAAA1gD,KAAAy0D,OAaA/0D,aACA,MAAAoR,EAAA9Q,KAAAg0D,QACA,IAAAc,EAAA90D,KAAAklC,QAGA,IAAA6vB,GAAAjkD,GAAA,CACA,IAAAH,EAAAG,EAAAhP,YAAAgP,EAAAkkD,wBAGA,KAAArkD,IAAAokD,GAAApkD,IAAA,CACA,MAAAskD,EAAA,IAA2BnB,GAAInjD,GAC/BukD,EAAAJ,EAAAF,gBAAAK,GAEA,IAAAC,EAOA,YANAA,EAAAL,UAAAC,EAAAD,YAEAC,EAAAI,GAOAvkD,IAAA7O,YAIA,OAAAgzD,EAWAp1D,QAAAg1D,GACA,UAAA9vD,KAAAivD,GACA,GAAA7zD,KAAA4E,KAAA8vD,EAAA9vD,GACA,SAIA,SASAlF,SAAAg1D,GACA,MAAAS,EAAAn1D,KAAA40D,gBAAAF,GAEA,SAAAS,MAAArvB,QAAA4uB,IAWAh1D,8BACA,MAAAoR,EAAA9Q,KAAAg0D,QACA,IAAAoB,EAAAC,EAEA,GAAOnO,GAAQp2C,GACfskD,EAAAtkD,EAAAyjD,WAAAzjD,EAAAlQ,SAAA00D,gBAAAC,YACAF,EAAAvkD,EAAA0jD,YAAA1jD,EAAAlQ,SAAA00D,gBAAAE,iBACG,CACH,MAAAC,EAAwBpC,GAAerzD,KAAAg0D,SAEvCoB,EAAAtkD,EAAA4kD,YAAA5kD,EAAAykD,YACAF,EAAAvkD,EAAAoS,aAAApS,EAAA0kD,aAEAx1D,KAAA21D,OAAAF,EAAAhV,KAAAgV,EAAAjV,KAUA,OANAxgD,KAAA0gD,OAAA0U,EACAp1D,KAAAwzD,OAAA4B,EAEAp1D,KAAAy0D,QAAAY,EACAr1D,KAAA0zD,QAAA2B,EAEAr1D,KASAN,wBAAAmpC,GACA,MAAA+sB,KAEAC,EAAAhyD,MAAAC,KAAA+kC,EAAAitB,kBAEA,GAAAD,EAAAzzD,OACA,UAAAuyD,KAAAkB,EACAD,EAAAl0D,KAAA,IAAoBoyD,GAAIa,QAOxB,CACA,IAAA/b,EAAA/P,EAAA+P,eAEQE,GAAMF,KACdA,IAAA92C,YAGA,MAAA6yD,EAAA,IAAoBb,GAAIlb,EAAA0b,yBACxBK,EAAAnB,MAAAmB,EAAAlU,KACAkU,EAAAjU,MAAA,EAEAkV,EAAAl0D,KAAAizD,GAGA,OAAAiB,GASA,SAAAxB,GAAAO,EAAA7jD,GACA,UAAA3R,KAAA00D,GACAc,EAAAx1D,GAAA2R,EAAA3R,GASA,SAAA41D,GAAAgB,GACA,QAAO7T,GAAS6T,IAIhBA,MAAA7kB,cAAAgjB,KC5XO,SAAA8B,IAAA5qD,OAAsCA,EAAA6qD,iBAAA,IAC7C,MAAAC,EAAAC,GAAA/qD,GACA,IAAAgrD,EAAAF,EACAG,EAAA,KAGA,KAAAD,GAAA,CACA,IAAAE,EAeAC,GANAD,EAAAE,GADAJ,GAAAF,EACA9qD,EAEAirD,GAIA,IAMAI,GAAArrD,EAAAgrD,IAKA,MAAAM,EAAAD,GAAArrD,EAAAgrD,GAIA,GAFAO,GAAAP,EAAAM,EAAAT,GAEAG,EAAAzlD,QAAAylD,GAYA,GAPAC,EAAAD,EAAAQ,aACAR,IAAAzlD,QAMA0lD,EACA,YAGAD,EAAA,MAmEA,SAAAO,GAAA15D,EAAA03D,EAAAsB,GACA,MAAAY,EAAAlC,EAAAzvB,QAAAywB,OAAA,EAAAM,GACAa,EAAAnC,EAAAzvB,QAAAywB,OAAA,GAAAM,GACAc,EAAA,IAA0BjD,GAAI72D,GAAA+5D,8BAI9B,KAFAF,EAAAD,GAEA1kC,MAAAwiC,GAAAoC,EAAA5C,SAAAQ,IAAA,CACA,IAAA7P,QAAOA,EAAAhiC,WAAmB7lB,EAE1Bg6D,GAAAH,EAAAC,GACAj0C,GAAAi0C,EAAAvW,IAAAmU,EAAAnU,IAAAyV,EACGiB,GAAAL,EAAAE,KACHj0C,GAAA6xC,EAAAjB,OAAAqD,EAAArD,OAAAuC,GAKAkB,GAAAxC,EAAAoC,GACAjS,GAAAiS,EAAAtW,KAAAkU,EAAAlU,KAAAwV,EACGmB,GAAAzC,EAAAoC,KACHjS,GAAA6P,EAAAnB,MAAAuD,EAAAvD,MAAAyC,GAGAh5D,EAAAgmB,SAAA6hC,EAAAhiC,IASA,SAAAyzC,GAAA5lD,EAAA0mD,GACA,MAAAC,EAAAnB,GAAAxlD,GACA,IAAAskD,EAAAyB,EAEA,KAAA/lD,GAAA2mD,EAAA12D,SAAAszD,MACAwC,EAAAW,KACApC,EAAA,IAAmBnB,GAAInjD,GAAAqmD,+BAEvB7C,SAAAuC,KACAO,GAAAP,EAAAzB,GACAtkD,EAAAu0C,WAAA+P,EAAAzU,IAAAkW,EAAAlW,IACI0W,GAAAR,EAAAzB,KACJtkD,EAAAu0C,WAAAwR,EAAAhD,OAAAuB,EAAAvB,QAGAyD,GAAAT,EAAAzB,GACAtkD,EAAAs0C,YAAAgQ,EAAAxU,KAAAiW,EAAAjW,KACI2W,GAAAV,EAAAzB,KACJtkD,EAAAs0C,YAAAyR,EAAAlD,MAAAyB,EAAAzB,QAIA7iD,IAAA7O,WASA,SAAAo1D,GAAAK,EAAAC,GACA,OAAAD,EAAA7D,OAAA8D,EAAA9D,OAQA,SAAAuD,GAAAM,EAAAC,GACA,OAAAD,EAAA/W,IAAAgX,EAAAhX,IAQA,SAAA2W,GAAAI,EAAAC,GACA,OAAAD,EAAA9W,KAAA+W,EAAA/W,KAQA,SAAA2W,GAAAG,EAAAC,GACA,OAAAD,EAAA/D,MAAAgE,EAAAhE,MAQA,SAAA2C,GAAAJ,GACA,OAAM3C,GAAO2C,GACbA,EAAAnd,eAAA1H,cAAAC,YAEA4kB,EAAA7kB,cAAAC,YASA,SAAAqlB,GAAAT,GACA,GAAM3C,GAAO2C,GAAA,CACb,IAAAplD,EAAAolD,EAAAf,wBAOA,OAJOlc,GAAMnoC,KACbA,IAAA7O,YAGA6O,EAEA,OAAAolD,EAAAj0D,WAWA,SAAA20D,GAAArrD,EAAAqsD,GACA,MAAAvB,EAAAC,GAAA/qD,GACAupD,EAAA,IAAkBb,GAAI1oD,GAEtB,GAAA8qD,IAAAuB,EACA,OAAA9C,EACE,CACF,IAAAyB,EAAAF,EAEA,KAAAE,GAAAqB,GAAA,CACA,MAAAC,EAAAtB,EAAAQ,aACAe,EAAA,IAAyB7D,GAAI4D,GAAAV,8BAE7BrC,EAAAgB,OAAAgC,EAAAlX,KAAAkX,EAAAnX,KAEA4V,IAAAzlD,QAIA,OAAAgkD,EAxMA52D,OAAAiR,WACAgnD,8BACA4B,4BAZO,SAAAxsD,GAGPmrD,GAFAC,GAAAprD,GAEA,IACA,IAAa0oD,GAAI1oD,aChCIysD,GACrBn4D,cAOAM,KAAAY,SAAA,IAAsBusC,GAUtBntC,KAAA+wC,aAAA,IAA0BoR,GAQ1BniD,KAAA8sD,UAAA,IAAuB9Q,GAAQh8C,KAAA+wC,aAAA/wC,KAAAY,SAAA+iC,WAC/B3jC,KAAA8sD,UAAAjuD,KAAA,aAAAuoB,GAAApnB,KAAAY,UAQAZ,KAAA83D,SAAA,IAAArxD,IAQAzG,KAAA+3D,WAAA,IAAAtxD,IAQAzG,KAAAg4D,gBAAA,EAQAh4D,KAAAi4D,sBAAA,EAQAj4D,KAAAk4D,uBAAA,EAQAl4D,KAAAm4D,oBAAA,EAQAn4D,KAAAo4D,QAAA,IAAqB7lB,GAAcvyC,KAAAY,UAGnCZ,KAAAq4D,YAAoB3L,IACpB1sD,KAAAq4D,YAAoBnG,IACpBlyD,KAAAq4D,YAAoBtF,IACpB/yD,KAAAq4D,YAAoBrJ,IACpBhvD,KAAAq4D,YAAoBzG,IACpB5xD,KAAAq4D,YAAoBnF,I7CFb,SAAApiB,GACPA,EAAAlwC,SAAAiwB,GAAA,UAAAmpB,I6CIEse,CAAoBt4D,MACpB6wC,GAAuB7wC,MAGzBA,KAAA6wB,GAAA,cACA7wB,KAAAu4D,UAGAv4D,KAAAY,SAAAgnB,KAAA,mBAeAloB,cAAA2gD,EAAAziD,EAAA,QACA,MAAA46D,EAAAx4D,KAAAY,SAAA63D,QAAA76D,GAGA46D,EAAAx0B,MAAAqc,EAAA31C,QAAApC,cAEAtI,KAAA83D,SAAA1wD,IAAAxJ,EAAAyiD,GACArgD,KAAA+wC,aAAAqN,aAAAiC,EAAAmY,GACAx4D,KAAA8sD,UAAAe,WAAA,WAAA2K,GACAx4D,KAAA8sD,UAAA7Q,aAAA94C,IAAAk9C,EAAAnP,eAEAsnB,EAAA3nC,GAAA,mBAAAC,EAAAxvB,IAAAtB,KAAA8sD,UAAAe,WAAA,WAAAvsD,IACAk3D,EAAA3nC,GAAA,qBAAAC,EAAAxvB,IAAAtB,KAAA8sD,UAAAe,WAAA,aAAAvsD,IACAk3D,EAAA3nC,GAAA,eAAAC,EAAAxvB,IAAAtB,KAAA8sD,UAAAe,WAAA,OAAAvsD,IAEA,UAAA8hB,KAAApjB,KAAA+3D,WAAAtrD,SACA2W,EAAAG,QAAA88B,EAAAziD,GAUA8B,WAAA9B,EAAA,QACA,OAAAoC,KAAA83D,SAAA55D,IAAAN,GAgBA8B,YAAA2oD,GACA,IAAAjlC,EAAApjB,KAAA+3D,WAAA75D,IAAAmqD,GAEA,GAAAjlC,EACA,OAAAA,EAGAA,EAAA,IAAAilC,EAAAroD,MAEAA,KAAA+3D,WAAA3wD,IAAAihD,EAAAjlC,GAEA,UAAAxlB,EAAA+yC,KAAA3wC,KAAA83D,SACA10C,EAAAG,QAAAotB,EAAA/yC,GAKA,OAFAwlB,EAAA+pC,SAEA/pC,EASA1jB,YAAA2oD,GACA,OAAAroD,KAAA+3D,WAAA75D,IAAAmqD,GAMA3oD,mBACA,UAAA0jB,KAAApjB,KAAA+3D,WAAAtrD,SACA2W,EAAAmlC,UAOA7oD,kBACA,UAAA0jB,KAAApjB,KAAA+3D,WAAAtrD,SACA2W,EAAA+pC,SAQAztD,uBACA,MAAAmpC,EAAA7oC,KAAAY,SAAA+iC,UAAAyF,gBAEAP,GACGmtB,IACH5qD,OAAApL,KAAA+wC,aAAA2nB,eAAA7vB,GACAotB,eAAA,KASAv2D,QACA,IAAAM,KAAAY,SAAA8iC,UAAA,CACA,MAAAwC,EAAAlmC,KAAAY,SAAA+iC,UAAAC,gBAEAsC,GACAlmC,KAAA+wC,aAAAjI,MAAA5C,GACAlmC,KAAAuO,UASIuB,GAAA,EAAGjN,KAAA,6EAiCPnD,OAAAwlB,GACA,GAAAllB,KAAAi4D,sBAAAj4D,KAAAk4D,sBAYA,UAAa3oC,EAAA,EACb,uOAOA,GAAAvvB,KAAAg4D,eACA,OAAA9yC,EAAAllB,KAAAo4D,SAKAp4D,KAAAg4D,gBAAA,EACA,MAAAW,EAAAzzC,EAAAllB,KAAAo4D,SAaA,OAZAp4D,KAAAg4D,gBAAA,EAIAh4D,KAAAm4D,qBACAn4D,KAAAk4D,uBAAA,EACAl4D,KAAAY,SAAAg4D,gBAAA54D,KAAAo4D,SACAp4D,KAAAk4D,uBAAA,EAEAl4D,KAAA4nB,KAAA,WAGA+wC,EAUAj5D,SACAM,KAAA64D,OAAA,QAMAn5D,UACA,UAAA0jB,KAAApjB,KAAA+3D,WAAAtrD,SACA2W,EAAAiqC,UAGArtD,KAAAqlB,gBAoBA3lB,iBAAA+mC,EAAAxO,GACA,OAASoM,GAAQC,UAAAmC,EAAAxO,GASjBv4B,oBAAAyS,GACA,OAASkyB,GAAQgB,aAAAlzB,GASjBzS,qBAAAyS,GACA,OAASkyB,GAAQsB,cAAAxzB,GAYjBzS,YAAAsc,EAAAC,GACA,WAAayqB,GAAK1qB,EAAAC,GASlBvc,cAAAyS,GACA,OAASu0B,GAAK4D,UAAAn4B,GAUdzS,cAAAc,GACA,OAASkmC,GAAK2D,UAAA7pC,GAiEdd,gBAAAyoC,EAAAC,EAAA5gC,GACA,WAAa0gC,GAASC,EAAAC,EAAA5gC,GAStB9H,UACAM,KAAAi4D,sBAAA,EACAj4D,KAAA84D,mBACA94D,KAAA8sD,UAAAv+C,SACAvO,KAAA+4D,kBACA/4D,KAAAi4D,sBAAA,GCrhBe,SAAAe,GAAAp5D,GACf,OAAM0zB,GAAa1zB,GACV+/B,GAAW//B,GAEpB,IAAA6G,IAAA7G,GDsiBAyyB,GAAKwlC,GAAM9mC,UEvhBUkoC,GASrBv5D,YAAA+T,GASAzT,KAAA2Q,OAAA,KAQA3Q,KAAA+gC,OAAgBi4B,GAAKvlD,GAYrB7R,YACA,IAAAq8B,EAEA,IAAAj+B,KAAA2Q,OACA,YAGA,WAAAstB,EAAAj+B,KAAA2Q,OAAAutB,cAAAl+B,OACA,UAAauvB,EAAA,EAAa,iFAG1B,OAAA0O,EAaA2H,kBACA,IAAA3H,EAEA,IAAAj+B,KAAA2Q,OACA,YAGA,WAAAstB,EAAAj+B,KAAA2Q,OAAAuoD,oBAAAl5D,OACA,UAAauvB,EAAA,EAAa,iFAG1B,OAAA0O,EAYAwB,iBACA,SAWAwG,gBACA,OAAAjmC,KAAA2Q,OAIA3Q,KAAA4lC,YAAA5lC,KAAAy/B,WAHA,KAYAtsB,kBACA,MAAAvR,EAAA5B,KAAA4B,MAEA,cAAAA,GAAA5B,KAAA2Q,OAAAwtB,SAAAv8B,EAAA,SASAJ,sBACA,MAAAI,EAAA5B,KAAA4B,MAEA,cAAAA,GAAA5B,KAAA2Q,OAAAwtB,SAAAv8B,EAAA,SAUAjF,WACA,IAAAA,EAAAqD,KAEA,KAAArD,EAAAgU,QACAhU,IAAAgU,OAGA,OAAAhU,EAUAiE,eAEA,OAAAZ,KAAArD,MAAAqD,KACA,KAIAA,KAAArD,KAAAiE,UAAA,KAmBAlB,UACA,MAAAskB,KACA,IAAA1iB,EAAAtB,KAEA,KAAAsB,EAAAqP,QACAqT,EAAAvW,QAAAnM,EAAAskC,aACAtkC,IAAAqP,OAGA,OAAAqT,EAYAtkB,aAAA8H,GAA0B42B,aAAA,EAAAC,aAAA,IAC1B,MAAAC,KACA,IAAA3tB,EAAAnJ,EAAA42B,YAAAp+B,UAAA2Q,OAEA,KAAAA,GACA2tB,EAAA92B,EAAA62B,YAAA,kBAAA1tB,GACAA,WAGA,OAAA2tB,EAaA5+B,kBAAA4B,EAAAkG,MACA,MAAA+2B,EAAAv+B,KAAAw+B,aAAAh3B,GACAi3B,EAAAn9B,EAAAk9B,aAAAh3B,GAEA,IAAAnK,EAAA,EAEA,KAAAkhC,EAAAlhC,IAAAohC,EAAAphC,IAAAkhC,EAAAlhC,IACAA,IAGA,WAAAA,EAAA,KAAAkhC,EAAAlhC,EAAA,GAUAqC,SAAA4B,GAEA,GAAAtB,MAAAsB,EACA,SAIA,GAAAtB,KAAArD,OAAA2E,EAAA3E,KACA,SAGA,MAAA+hC,EAAA1+B,KAAA2+B,UACAC,EAAAt9B,EAAAq9B,UAEA/0B,EAAiBoqB,GAAa0K,EAAAE,GAE9B,OAAAh1B,GACA,aACA,SAEA,gBACA,SAEA,QACA,OAAA80B,EAAA90B,GAAAg1B,EAAAh1B,IAWAlK,QAAA4B,GAEA,OAAAtB,MAAAsB,IAKAtB,KAAArD,OAAA2E,EAAA3E,OAKAqD,KAAA6+B,SAAAv9B,IASA5B,aAAAd,GACA,OAAAoB,KAAA+gC,OAAAt/B,IAAA7C,GASAc,aAAAd,GACA,OAAAoB,KAAA+gC,OAAA7iC,IAAAU,GAWAc,gBACA,OAAAM,KAAA+gC,OAAAnM,UAQAl1B,mBACA,OAAAM,KAAA+gC,OAAAhtB,OAQArU,SACA,MAAAs/B,KAYA,OARAh/B,KAAA+gC,OAAAx2B,OACAy0B,EAAAl4B,WAAAjD,MAAAC,KAAA9D,KAAA+gC,QAAAr0B,OAAA,CAAA9C,EAAA3C,KACA2C,EAAA3C,EAAA,IAAAA,EAAA,GAEA2C,QAIAo1B,EASAt/B,SACA,WAAau5D,GAAIj5D,KAAA+gC,QASjBrhC,UACAM,KAAA2Q,OAAAmuB,gBAAA9+B,KAAA4B,OAWAlC,cAAAd,EAAAN,GACA0B,KAAA+gC,OAAA35B,IAAAxI,EAAAN,GAUAoB,iBAAA+T,GACAzT,KAAA+gC,OAAgBi4B,GAAKvlD,GAWrB/T,iBAAAd,GACA,OAAAoB,KAAA+gC,OAAAtxB,OAAA7Q,GASAc,mBACAM,KAAA+gC,OAAAtnB,QAsBA/Z,GAAA6C,GACA,cAAAA,SCxcqB42D,WAAaF,GAWlCv5D,YAAAE,EAAA6T,GACA1T,MAAA0T,GAQAzT,KAAAo/B,MAAAx/B,GAAA,GAMA6/B,iBACA,OAAAz/B,KAAAJ,KAAAwC,OASAxC,WACA,OAAAI,KAAAo/B,MAMA1/B,GAAA6C,GACA,cAAAA,GAAAxC,MAAAo/B,GAAA58B,GAQA7C,SACA,MAAAs/B,EAAAj/B,MAAAq5D,SAIA,OAFAp6B,EAAAp/B,KAAAI,KAAAJ,KAEAo/B,EASAt/B,SACA,WAAay5D,GAAIn5D,KAAAJ,KAAAI,KAAAg2C,iBASjBt2C,gBAAAs/B,GACA,WAAam6B,GAAIn6B,EAAAp/B,KAAAo/B,EAAAl4B,mBC7DIuyD,GAWrB35D,YAAA6/B,EAAAC,EAAAp9B,GASA,GAFApC,KAAAu/B,WAEAC,EAAA,GAAAA,EAAAD,EAAAE,WAMA,UAAalQ,EAAA,EAAa,8EAG1B,GAAAntB,EAAA,GAAAo9B,EAAAp9B,EAAAm9B,EAAAE,WAMA,UAAalQ,EAAA,EAAa,kEAS1BvvB,KAAAJ,KAAA2/B,EAAA3/B,KAAA2kB,UAAAib,IAAAp9B,GAQApC,KAAAw/B,eAUAoG,kBACA,cAAA5lC,KAAAu/B,SAAAqG,YAAA5lC,KAAAu/B,SAAAqG,YAAA5lC,KAAAw/B,aAAA,KAUAC,iBACA,OAAAz/B,KAAAJ,KAAAwC,OAUA6jC,gBACA,cAAAjmC,KAAA4lC,YAAA5lC,KAAA4lC,YAAA5lC,KAAAy/B,WAAA,KAcAC,gBACA,OAAA1/B,KAAAy/B,aAAAz/B,KAAAu/B,SAAAE,WASA9uB,aACA,OAAA3Q,KAAAu/B,SAAA5uB,OASAhU,WACA,OAAAqD,KAAAu/B,SAAA5iC,KAUAiE,eACA,OAAAZ,KAAAu/B,SAAA3+B,SAWAlB,GAAA6C,GACA,mBAAAA,EASA7C,UACA,MAAAskB,EAAAhkB,KAAAu/B,SAAAZ,UAMA,OAJA3a,EAAA5hB,OAAA,IACA4hB,IAAA5hB,OAAA,IAAApC,KAAAw/B,cAGAxb,EAYAtkB,aAAA8H,GAA0B42B,aAAA,EAAAC,aAAA,IAC1B,MAAAC,KACA,IAAA3tB,EAAAnJ,EAAA42B,YAAAp+B,UAAA2Q,OAEA,KAAAA,GACA2tB,EAAA92B,EAAA62B,YAAA,kBAAA1tB,GACAA,WAGA,OAAA2tB,EASA5+B,aAAAd,GACA,OAAAoB,KAAAu/B,SAAAe,aAAA1hC,GASAc,aAAAd,GACA,OAAAoB,KAAAu/B,SAAAtoB,aAAArY,GAWAc,gBACA,OAAAM,KAAAu/B,SAAAyW,gBAQAt2C,mBACA,OAAAM,KAAAu/B,SAAAqR,0BCpPqB0oB,GAOrB55D,YAAA2iC,GAOAriC,KAAAu5D,UAEAl3B,GACAriC,KAAAw5D,aAAA,EAAAn3B,GAWA3iC,CAAAtB,OAAAqa,YACA,OAAAzY,KAAAu5D,OAAAn7D,OAAAqa,YASArW,aACA,OAAApC,KAAAu5D,OAAAn3D,OASAq3D,gBACA,OAAAz5D,KAAAu5D,OAAA7sD,OAAA,CAAA4jC,EAAAhvC,IAAAgvC,EAAAhvC,EAAAm+B,WAAA,GASA//B,QAAAkC,GACA,OAAA5B,KAAAu5D,OAAA33D,IAAA,KASAlC,aAAA4B,GACA,MAAAM,EAAA5B,KAAAu5D,OAAAjmD,QAAAhS,GAEA,UAAAM,EAAA,KAAAA,EAUAlC,mBAAA4B,GACA,MAAAM,EAAA5B,KAAA05D,aAAAp4D,GAEA,cAAAM,EAAA,KAAA5B,KAAAu5D,OAAA/iD,MAAA,EAAA5U,GAAA8K,OAAA,CAAA4jC,EAAAhvC,IAAAgvC,EAAAhvC,EAAAm+B,WAAA,GAYA//B,cAAAkC,GACA,GAAAA,GAAA5B,KAAAu5D,OAAAn3D,OACA,OAAApC,KAAAy5D,UAGA,MAAAn4D,EAAAtB,KAAAu5D,OAAA33D,GAEA,IAAAN,EAMA,UAAaiuB,EAAA,EAAa,qFAG1B,OAAAvvB,KAAA25D,mBAAAr4D,GAYA5B,cAAAu4B,GACA,IAAA2hC,EAAA,EAEA,UAAAt4D,KAAAtB,KAAAu5D,OAAA,CACA,GAAAthC,GAAA2hC,GAAA3hC,EAAA2hC,EAAAt4D,EAAAm+B,WACA,OAAAz/B,KAAA05D,aAAAp4D,GAGAs4D,GAAAt4D,EAAAm+B,WAGA,GAAAm6B,GAAA3hC,EAQA,UAAa1I,EAAA,EAAa,uFAC1B0I,SACA4hC,SAAA75D,OAIA,OAAAA,KAAAoC,OAUA1C,aAAAkC,EAAAygC,GAEA,UAAA/gC,KAAA+gC,EACA,KAAA/gC,aAA2B23D,IAM3B,UAAc1pC,EAAA,EAAa,iGAI3BvvB,KAAAu5D,OAAAhmD,OAAA3R,EAAA,KAAAygC,GAWA3iC,aAAAo6D,EAAAt3B,EAAA,GACA,OAAAxiC,KAAAu5D,OAAAhmD,OAAAumD,EAAAt3B,GASA9iC,SACA,OAAAM,KAAAu5D,OAAAxrD,IAAAzM,KAAA83D,iBC5LqBW,WAAgBd,GAarCv5D,YAAA9B,EAAA6V,EAAAoL,GACA9e,MAAA0T,GAQAzT,KAAApC,OAQAoC,KAAAihC,UAAA,IAAuBq4B,GAEvBz6C,GACA7e,KAAAkhC,aAAA,EAAAriB,GAUA2iB,iBACA,OAAAxhC,KAAAihC,UAAA7+B,OASAq3D,gBACA,OAAAz5D,KAAAihC,UAAAw4B,UASAh4B,cACA,WAAAzhC,KAAAwhC,WAsBA9hC,GAAA6C,EAAA3E,EAAA,MACA,OAAAA,EAGA,WAAA2E,GAAA3E,GAAAoC,KAAApC,KAFA,WAAA2E,MAAAvC,KAAApC,MAAAmC,MAAAo/B,GAAA58B,GAYA7C,SAAAkC,GACA,OAAA5B,KAAAihC,UAAA+4B,QAAAp4D,GAQAlC,cACA,OAAAM,KAAAihC,UAAA7iC,OAAAqa,YASA/Y,cAAA4B,GACA,OAAAtB,KAAAihC,UAAAy4B,aAAAp4D,GAWA5B,oBAAA4B,GACA,OAAAtB,KAAAihC,UAAA04B,mBAAAr4D,GAoBA5B,cAAAu4B,GACA,OAAAj4B,KAAAihC,UAAAg5B,cAAAhiC,GAcAv4B,cAAAw6D,GACA,IAAA54D,EAAAtB,KAEA,UAAA4B,KAAAs4D,EACA54D,IAAA68B,SAAA78B,EAAA24D,cAAAr4D,IAGA,OAAAN,EAQA5B,SACA,MAAAs/B,EAAAj/B,MAAAq5D,SAIA,GAFAp6B,EAAAphC,KAAAoC,KAAApC,KAEAoC,KAAAihC,UAAA7+B,OAAA,GACA48B,EAAAngB,YAEA,UAAAvd,KAAAtB,KAAAihC,UACAjC,EAAAngB,SAAAnd,KAAAJ,EAAA83D,UAIA,OAAAp6B,EAWAt/B,OAAAqiC,GAAA,GACA,MAAAljB,EAAAkjB,EAAAl+B,MAAAC,KAAA9D,KAAAihC,WAAAlzB,IAAAzM,KAAAuY,QAAA,SAEA,WAAakgD,GAAO/5D,KAAApC,KAAAoC,KAAAg2C,gBAAAn3B,GAUpBnf,aAAA2iC,GACAriC,KAAAkhC,aAAAlhC,KAAAwhC,WAAAa,GAYA3iC,aAAAkC,EAAAwgC,GACA,MAAAC,EAkEA,SAAkBA,GAElB,oBAAAA,EACA,WAAe82B,GAAI92B,IAGZzC,GAAUyC,KACjBA,OAIA,OAAAx+B,MAAAC,KAAAu+B,GACAt0B,IAAAzM,GACA,iBAAAA,EACA,IAAe63D,GAAI73D,GAGnBA,aAAwB+3D,GACxB,IAAeF,GAAI73D,EAAA1B,KAAA0B,EAAA00C,iBAGnB10C,GAvFgB64D,CAAS/3B,GAEzB,UAAA9gC,KAAA+gC,EAEA,OAAA/gC,EAAAqP,QACArP,EAAAihC,UAGAjhC,EAAAqP,OAAA3Q,KAGAA,KAAAihC,UAAAu4B,aAAA53D,EAAAygC,GAaA3iC,gBAAAkC,EAAA4gC,EAAA,GACA,MAAAH,EAAAriC,KAAAihC,UAAAm5B,aAAAx4D,EAAA4gC,GAEA,UAAAlhC,KAAA+gC,EACA/gC,EAAAqP,OAAA,KAGA,OAAA0xB,EAUA3iC,gBAAAs/B,GACA,IAAAngB,EAAA,KAEA,GAAAmgB,EAAAngB,SAAA,CACAA,KAEA,UAAA6E,KAAAsb,EAAAngB,SACA6E,EAAA9lB,KAEAihB,EAAAnd,KAAoBq4D,GAAOM,SAAA32C,IAG3B7E,EAAAnd,KAAoBy3D,GAAIkB,SAAA32C,IAKxB,WAAaq2C,GAAO/6B,EAAAphC,KAAAohC,EAAAl4B,WAAA+X,UCxSCy7C,GAmBrB56D,YAAA8H,MACA,IAAAA,EAAA08B,aAAA18B,EAAA28B,cAMA,UAAa5U,EAAA,EAAa,oGAG1B,MAAA6U,EAAA58B,EAAA48B,WAAA,UAEA,cAAAA,GAAA,YAAAA,EACA,UAAa7U,EAAA,EACb,yFACK6U,cAULpkC,KAAAokC,YAaApkC,KAAAkkC,WAAA18B,EAAA08B,YAAA,KAWA18B,EAAA28B,cACAnkC,KAAA4Q,SAAApJ,EAAA28B,cAAAe,QAEAllC,KAAA4Q,SAAmB2pD,GAAQj2B,UAAAtkC,KAAAkkC,WAAA,YAAAlkC,KAAAokC,UAAA,gBAI3BpkC,KAAA4Q,SAAA4pD,WAAA,SASAx6D,KAAAukC,mBAAA/8B,EAAA+8B,iBASAvkC,KAAAwkC,UAAAh9B,EAAAg9B,QAWAxkC,KAAAykC,mBAAAj9B,EAAAi9B,iBAQAzkC,KAAA0kC,qBAAA1kC,KAAAkkC,WAAAlkC,KAAAkkC,WAAAloB,MAAArL,OAAA,KAQA3Q,KAAA2kC,mBAAA3kC,KAAAkkC,WAAAlkC,KAAAkkC,WAAAjoB,IAAAtL,OAAA,KASA3Q,KAAAy6D,eAAAz6D,KAAA4Q,SAAAD,OAQAjR,CAAAtB,OAAAqa,YACA,OAAAzY,KAeAN,KAAAklC,GACA,IAAAC,EAAAvmC,EAAAwmC,EAAA41B,EAEA,GACA51B,EAAA9kC,KAAA4Q,SACA8pD,EAAA16D,KAAAy6D,iBAEM51B,OAAAvmC,SAAc0B,KAAA+kC,eACjBF,GAAAD,EAAAtmC,IAEHumC,IACA7kC,KAAA4Q,SAAAk0B,EACA9kC,KAAAy6D,eAAAC,GASAh7D,OACA,iBAAAM,KAAAokC,UACApkC,KAAAglC,QAEAhlC,KAAAilC,YAYAvlC,QACA,MAAAylC,EAAAnlC,KAAA4Q,SACAA,EAAA5Q,KAAA4Q,SAAAs0B,QACAv0B,EAAA3Q,KAAAy6D,eAGA,UAAA9pD,UAAAC,EAAAqnB,SAAAtnB,EAAA8oD,UACA,OAAW50B,MAAA,GAIX,GAAAl0B,IAAA3Q,KAAA2kC,oBAAA/zB,EAAAqnB,QAAAj4B,KAAAkkC,WAAAjoB,IAAAgc,OACA,OAAW4M,MAAA,GAGX,MAAAvjC,EAAAsP,EAAA2uB,SAAA3uB,EAAA2uB,SAAA3uB,EAAAm1B,UAEA,GAAAzkC,aAAuBy4D,GAWvB,OAVA/5D,KAAAwkC,QAKA5zB,EAAAqnB,UAHArnB,EAAAoT,KAAAtiB,KAAA,GACA1B,KAAAy6D,eAAAn5D,GAKAtB,KAAA4Q,WAEA+pD,GAAA,eAAAr5D,EAAA6jC,EAAAv0B,EAAA,GACG,GAAAtP,aAA2B63D,GAAI,CAClC,IAAA5zB,EAEA,GAAAvlC,KAAAukC,iBACAgB,EAAA,MACI,CACJ,IAAAtN,EAAA32B,EAAA2kC,UAEAjmC,KAAA2kC,oBAAAh0B,GAAA3Q,KAAAkkC,WAAAjoB,IAAAgc,WACAA,EAAAj4B,KAAAkkC,WAAAjoB,IAAAgc,QAGAsN,EAAAtN,EAAArnB,EAAAqnB,OAGA,MAAA2iC,EAAAhqD,EAAAqnB,OAAA32B,EAAAskC,YACAzzB,EAAA,IAAoBknD,GAAS/3D,EAAAs5D,EAAAr1B,GAK7B,OAHA30B,EAAAqnB,QAAAsN,EACAvlC,KAAA4Q,WAEA+pD,GAAA,OAAAxoD,EAAAgzB,EAAAv0B,EAAA20B,GAQA,OALA30B,EAAAoT,KAAAyC,MACA7V,EAAAqnB,SACAj4B,KAAA4Q,WACA5Q,KAAAy6D,eAAA9pD,SAEA3Q,KAAAykC,iBACAzkC,KAAAglC,QAEA21B,GAAA,aAAAhqD,EAAAw0B,EAAAv0B,GAaAlR,YACA,MAAAylC,EAAAnlC,KAAA4Q,SACAA,EAAA5Q,KAAA4Q,SAAAs0B,QACAv0B,EAAA3Q,KAAAy6D,eAGA,UAAA9pD,UAAA,IAAAC,EAAAqnB,OACA,OAAW4M,MAAA,GAIX,GAAAl0B,GAAA3Q,KAAA0kC,sBAAA9zB,EAAAqnB,QAAAj4B,KAAAkkC,WAAAloB,MAAAic,OACA,OAAW4M,MAAA,GAIX,MAAAvjC,EAAAsP,EAAA2uB,SAAA3uB,EAAA2uB,SAAA3uB,EAAAo1B,WAEA,GAAA1kC,aAAuBy4D,GAGvB,OAFAnpD,EAAAqnB,SAEAj4B,KAAAwkC,SAWAxkC,KAAA4Q,WAEA+pD,GAAA,eAAAr5D,EAAA6jC,EAAAv0B,EAAA,KAZAA,EAAAoT,KAAAtiB,KAAAJ,EAAAm4D,WACAz5D,KAAA4Q,WACA5Q,KAAAy6D,eAAAn5D,EAEAtB,KAAAykC,iBACAzkC,KAAAilC,YAEA01B,GAAA,aAAAr5D,EAAA6jC,EAAAv0B,IAOG,GAAAtP,aAA2B63D,GAAI,CAClC,IAAA5zB,EAEA,GAAAvlC,KAAAukC,iBACAgB,EAAA,MACI,CACJ,IAAAtN,EAAA32B,EAAAskC,YAEA5lC,KAAA0kC,sBAAA/zB,GAAA3Q,KAAAkkC,WAAAloB,MAAAic,WACAA,EAAAj4B,KAAAkkC,WAAAloB,MAAAic,QAGAsN,EAAA30B,EAAAqnB,SAGA,MAAA2iC,EAAAhqD,EAAAqnB,OAAA32B,EAAAskC,YACAzzB,EAAA,IAAoBknD,GAAS/3D,EAAAs5D,EAAAr1B,KAK7B,OAHA30B,EAAAqnB,QAAAsN,EACAvlC,KAAA4Q,WAEA+pD,GAAA,OAAAxoD,EAAAgzB,EAAAv0B,EAAA20B,GAOA,OAJA30B,EAAAoT,KAAAyC,MACAzmB,KAAA4Q,WACA5Q,KAAAy6D,eAAA9pD,SAEAgqD,GAAA,eAAAhqD,EAAAw0B,EAAAv0B,EAAA,IAKA,SAAA+pD,GAAAp4D,EAAA4P,EAAAgzB,EAAAU,EAAAzjC,GACA,OACAyiC,MAAA,EACAvmC,OACAiE,OACA4P,OACAgzB,mBACAU,eACAzjC,WCpVe,IAAAy4D,GALf,SAAaxvC,GACb,IAAAjpB,EAAA,MAAAipB,EAAA,EAAAA,EAAAjpB,OACA,OAAAA,EAAAipB,EAAAjpB,EAAA,QAAAT,SC0BqB44D,GASrB76D,YAAA/C,EAAAqnB,EAAAw2C,EAAA,UACA,IAAA79D,EAAAwiC,GAAA,aAAAxiC,EAAAwiC,GAAA,oBAQA,UAAa5P,EAAA,EAAa,uDAG1B,KAAAvL,aAAAngB,QAAA,IAAAmgB,EAAA5hB,OAOA,UAAamtB,EAAA,EAAa,yFAA4FvL,SAItHA,EAAArnB,EAAAgiC,UAAAlX,OAAAzD,GACArnB,SASAqD,KAAArD,OAgCAqD,KAAAgkB,OAOAhkB,KAAAw6D,aASAviC,aACA,OAAS4iC,GAAI76D,KAAAgkB,MAMbiU,WAAA6iC,GACA96D,KAAAgkB,KAAAhkB,KAAAgkB,KAAA5hB,OAAA,GAAA04D,EAeAnqD,aACA,IAAAA,EAAA3Q,KAAArD,KAEA,QAAAU,EAAA,EAAkBA,EAAA2C,KAAAgkB,KAAA5hB,OAAA,EAA0B/E,IAC5CsT,IAAAwtB,SAAAxtB,EAAAspD,cAAAj6D,KAAAgkB,KAAA3mB,KAGA,OAAAsT,EAWA/O,YACA,OAAA5B,KAAA2Q,OAAAspD,cAAAj6D,KAAAi4B,QAUAsH,eACA,MAAAj+B,EAAAtB,KAAA2Q,OAAAwtB,SAAAn+B,KAAA4B,OAEA,OAAAN,aAA2B63D,IAAI73D,EAAAskC,YAAA5lC,KAAAi4B,OAAA32B,EAAA,KAS/BykC,gBACA,cAAA/lC,KAAAu/B,SAAAv/B,KAAA2Q,OAAAwtB,SAAAn+B,KAAA4B,OAAA,KASAokC,iBACA,cAAAhmC,KAAAu/B,SAAAv/B,KAAA2Q,OAAAwtB,SAAAn+B,KAAA4B,MAAA,QASA8jC,gBACA,WAAA1lC,KAAAi4B,OASAmN,cACA,OAAAplC,KAAAi4B,QAAAj4B,KAAA2Q,OAAA8oD,UAWA/5D,YAAA4mC,GACA,GAAAtmC,KAAArD,MAAA2pC,EAAA3pC,KACA,kBAGA,MAAAiN,EAAiBoqB,GAAah0B,KAAAgkB,KAAAsiB,EAAAtiB,MAE9B,OAAApa,GACA,WACA,aAEA,aACA,eAEA,gBACA,cAEA,QACA,OAAA5J,KAAAgkB,KAAApa,GAAA08B,EAAAtiB,KAAApa,GAAA,kBAyBAlK,wBAAAklC,EAAAp9B,MACAA,EAAA28B,cAAAnkC,KAEA,MAAAqmC,EAAA,IAAyBi0B,GAAU9yD,GAGnC,OAFA6+B,EAAAzB,QAEAyB,EAAAz1B,SAWAlR,gBACA,OAAAM,KAAAgkB,KAAAxN,MAAA,MAQA9W,eACA,OAAAM,KAAA2Q,OAAAwuB,GAAA,qBACAn/B,KAAA2Q,QAEA3Q,KAAA2Q,OAAA6tB,cAAqCJ,aAAA,IAarC1+B,cAAAkR,GACA,GAAA5Q,KAAArD,MAAAiU,EAAAjU,KACA,SAIA,MAAAu9C,EAAclmB,GAAah0B,KAAAgkB,KAAApT,EAAAoT,MAE3B+2C,EAAA,iBAAA7gB,EAAA5jC,KAAA6d,IAAAn0B,KAAAgkB,KAAA5hB,OAAAwO,EAAAoT,KAAA5hB,QAAA83C,EAEA,OAAAl6C,KAAAgkB,KAAAxN,MAAA,EAAAukD,GAUAr7D,kBAAAkR,GACA,MAAA2tB,EAAAv+B,KAAAw+B,eACAC,EAAA7tB,EAAA4tB,eAEA,IAAAnhC,EAAA,EAEA,KAAAkhC,EAAAlhC,IAAAohC,EAAAphC,IAAAkhC,EAAAlhC,IACAA,IAGA,WAAAA,EAAA,KAAAkhC,EAAAlhC,EAAA,GAYAqC,aAAAymC,GACA,MAAAC,EAAApmC,KAAAklC,QAEAjN,EAAAmO,EAAAnO,OAAAkO,EAGA,OAFAC,EAAAnO,SAAA,IAAAA,EAEAmO,EAYA1mC,QAAA4mC,GACA,eAAAtmC,KAAAumC,YAAAD,GAoCA5mC,SAAA4mC,GACA,gBAAAtmC,KAAAumC,YAAAD,GAWA5mC,QAAA4mC,GACA,cAAAtmC,KAAAumC,YAAAD,GAWA5mC,WAAA4mC,GACA,IAAAma,EAAA,KACA+S,EAAA,KAGA,OAFAxzD,KAAAumC,YAAAD,IAGA,WACA,SAEA,aACAma,EAAW8Z,GAAQj2B,UAAAtkC,MACnBwzD,EAAY+G,GAAQj2B,UAAAgC,GACpB,MAEA,YACAma,EAAW8Z,GAAQj2B,UAAAgC,GACnBktB,EAAY+G,GAAQj2B,UAAAtkC,MACpB,MAEA,QACA,SAIA,IAAAg7D,EAAAva,EAAA9vC,OAEA,KAAA8vC,EAAAz8B,KAAA5hB,OAAAoxD,EAAAxvC,KAAA5hB,QAAA,CACA,GAAAq+C,EAAA3a,QAAA0tB,GACA,SAGA,GAAA/S,EAAAz8B,KAAA5hB,OAAAoxD,EAAAxvC,KAAA5hB,OAAA,CACA,GAAAq+C,EAAAxoB,SAAA+iC,EAAAvB,UACA,SAGAhZ,EAAAz8B,KAAAy8B,EAAAz8B,KAAAxN,MAAA,MACAwkD,IAAArqD,OACA8vC,EAAAxoB,aACI,CACJ,OAAAu7B,EAAAv7B,OACA,SAGAu7B,EAAAxvC,KAAAwvC,EAAAxvC,KAAAxN,MAAA,QAaA9W,gBAAAkR,GACA,GAAA5Q,KAAArD,OAAAiU,EAAAjU,KACA,SAMA,MAAsB,QAAbq3B,GAHTh0B,KAAAi7D,gBACArqD,EAAAqqD,iBAkBAv7D,0BAAAgR,GACA,IAAA9G,EAEA,OAAA8G,EAAAnO,MACA,aACAqH,EAAA5J,KAAAk7D,iCAAAxqD,GACA,MACA,WACA,aACA,eACA9G,EAAA5J,KAAAm7D,+BAAAzqD,GACA,MACA,YACA9G,EAAA5J,KAAAo7D,gCAAA1qD,GACA,MACA,YACA9G,EAAA5J,KAAAq7D,gCAAA3qD,GACA,MACA,QACA9G,EAAa2wD,GAAQj2B,UAAAtkC,MAIrB,OAAA4J,EAUAlK,iCAAAgR,GACA,OAAA1Q,KAAAs7D,2BAAA5qD,EAAAE,SAAAF,EAAA8xB,SAUA9iC,+BAAAgR,GACA,OAAA1Q,KAAAu7D,sBAAA7qD,EAAA8qD,eAAA9qD,EAAAgjC,eAAAhjC,EAAA8xB,SAUA9iC,gCAAAgR,GACA,MAAA+qD,EAAA/qD,EAAA+qD,WAKA,OAHAA,EAAAr0B,iBAAApnC,OACAy7D,EAAAz/C,MAAA8pB,QAAA9lC,OAAA,UAAAA,KAAAw6D,WAGAx6D,KAAA07D,aAAAhrD,EAAAirD,cAAAjrD,EAAAkrD,oBAEAlrD,EAAAmrD,kBACA77D,KAAAu7D,sBAAA7qD,EAAAmrD,kBAAAnrD,EAAA8jC,kBAAA,GAEAx0C,KAAAs7D,2BAAA5qD,EAAA8jC,kBAAA,GAYA90C,gCAAAgR,GACA,MAAA+qD,EAAA/qD,EAAA+qD,WAGA,IAAAx9B,EAeA,OAjBAw9B,EAAAr0B,iBAAApnC,OAAAy7D,EAAAz/C,MAAA8pB,QAAA9lC,OAKAi+B,EAAAj+B,KAAA07D,aAAAhrD,EAAA8qD,eAAA9qD,EAAAgjC,gBAEAhjC,EAAA8qD,eAAA38B,SAAAnuB,EAAAgjC,kBAEAzV,IAAA69B,0BAAAprD,EAAAqrD,iBAAA,KAGA99B,EADGj+B,KAAA8lC,QAAAp1B,EAAAqrD,kBACMxB,GAAQj2B,UAAA5zB,EAAAqrD,kBAEjB/7D,KAAAu7D,sBAAA7qD,EAAAqrD,iBAAArrD,EAAAmrD,kBAAA,GAGA59B,EAYAv+B,0BAAAs8D,EAAAx5B,GACA,MAAAy5B,EAAsB1B,GAAQj2B,UAAAtkC,MAG9B,GAAAA,KAAArD,MAAAq/D,EAAAr/D,KACA,OAAAs/D,EAGA,GAAoB,QAAbjoC,GAAagoC,EAAAf,gBAAAj7D,KAAAi7D,kBAEpB,GAAAe,EAAA/jC,OAAAj4B,KAAAi4B,OAAA,CAEA,GAAA+jC,EAAA/jC,OAAAuK,EAAAxiC,KAAAi4B,OAEA,YAGAgkC,EAAAhkC,QAAAuK,QAGG,GAAwB,UAAbxO,GAAagoC,EAAAf,gBAAAj7D,KAAAi7D,iBAAA,CAE3B,MAAA59D,EAAA2+D,EAAAh4C,KAAA5hB,OAAA,EAEA,GAAA45D,EAAA/jC,QAAAj4B,KAAAgkB,KAAA3mB,GAAA,CAEA,GAAA2+D,EAAA/jC,OAAAuK,EAAAxiC,KAAAgkB,KAAA3mB,GAGA,YAGA4+D,EAAAj4C,KAAA3mB,IAAAmlC,GAKA,OAAAy5B,EAWAv8D,2BAAAw8D,EAAA15B,GACA,MAAAy5B,EAAsB1B,GAAQj2B,UAAAtkC,MAG9B,GAAAA,KAAArD,MAAAu/D,EAAAv/D,KACA,OAAAs/D,EAGA,GAAoB,QAAbjoC,GAAakoC,EAAAjB,gBAAAj7D,KAAAi7D,kBAEpBiB,EAAAjkC,OAAAj4B,KAAAi4B,QAAAikC,EAAAjkC,QAAAj4B,KAAAi4B,QAAA,cAAAj4B,KAAAw6D,cAGAyB,EAAAhkC,QAAAuK,QAEG,GAAwB,UAAbxO,GAAakoC,EAAAjB,gBAAAj7D,KAAAi7D,iBAAA,CAE3B,MAAA59D,EAAA6+D,EAAAl4C,KAAA5hB,OAAA,EAEA85D,EAAAjkC,QAAAj4B,KAAAgkB,KAAA3mB,KAGA4+D,EAAAj4C,KAAA3mB,IAAAmlC,GAIA,OAAAy5B,EAYAv8D,sBAAA87D,EAAA9nB,EAAAlR,GAIA,GAFAkR,IAAAooB,0BAAAN,EAAAh5B,GAEAg5B,EAAA11B,QAAA4N,GAEA,OAAU6mB,GAAQj2B,UAAAtkC,MAIlB,MAAAi8D,EAAAj8D,KAAA87D,0BAAAN,EAAAh5B,GAMA,OAJA,OAAAy5B,GACAT,EAAA11B,QAAA9lC,OAAA,UAAAA,KAAAw6D,YACAgB,EAAA3zB,aAAArF,GAAAsD,QAAA9lC,OAAA,cAAAA,KAAAw6D,WAKAx6D,KAAA07D,aAAAF,EAAA9nB,GAKAuoB,EAAAX,2BAAA5nB,EAAAlR,GA+BA9iC,aAAAoR,EAAA1F,GACA,MAAA/N,EAAAyT,EAAAkT,KAAA5hB,OAAA,EAGA+5D,EAAmB5B,GAAQj2B,UAAAl5B,GAY3B,OAXA+wD,EAAA3B,WAAAx6D,KAAAw6D,WAKA2B,EAAAlkC,OAAAkkC,EAAAlkC,OAAAj4B,KAAAgkB,KAAA3mB,GAAAyT,EAAAmnB,OAIAkkC,EAAAn4C,KAAAm4C,EAAAn4C,KAAAyD,OAAAznB,KAAAgkB,KAAAxN,MAAAnZ,EAAA,IAEA8+D,EAMAz8D,SACA,OACA/C,KAAAqD,KAAArD,KAAAy8D,SACAp1C,KAAAngB,MAAAC,KAAA9D,KAAAgkB,MACAw2C,WAAAx6D,KAAAw6D,YASA96D,QACA,WAAAM,KAAA0I,YAAA1I,KAAArD,KAAAqD,KAAAgkB,KAAAhkB,KAAAw6D,YAqBA96D,iBAAA+mC,EAAAxO,GACA,GAAAwO,aAAiC8zB,GACjC,WAAcA,GAAQ9zB,EAAA9pC,KAAA8pC,EAAAziB,KAAAyiB,EAAA+zB,YACnB,CACH,MAAAl5D,EAAAmlC,EAEA,UAAAxO,EACAA,EAAA32B,EAAAm4D,cACI,cAAAxhC,EACJ,OAAAj4B,KAAA2lC,cAAArkC,GACI,YAAA22B,EACJ,OAAAj4B,KAAAqlC,aAAA/jC,GACI,OAAA22B,MAOJ,UAAc1I,EAAA,EACd,kIAIA,IAAAjuB,EAAA69B,GAAA,aAAA79B,EAAA69B,GAAA,oBAMA,UAAc5P,EAAA,EAAa,+FAG3B,MAAAvL,EAAA1iB,EAAAq9B,UAIA,OAFA3a,EAAAtiB,KAAAu2B,GAEA,IAAAj4B,KAAAsB,EAAA3E,KAAAqnB,IAWAtkB,oBAAAyS,GACA,IAAAA,EAAAxB,OAOA,UAAa4e,EAAA,EAAa,qEAAwE5yB,KAAAwV,IAGlG,OAAAnS,KAAAskC,UAAAnyB,EAAAxB,OAAAwB,EAAA8zB,WAUAvmC,qBAAAyS,GACA,IAAAA,EAAAxB,OAOA,UAAa4e,EAAA,EAAa,uEAA0E5yB,KAAAwV,IAGpG,OAAAnS,KAAAskC,UAAAnyB,EAAAxB,OAAAwB,EAAAyzB,aAUAlmC,gBAAAs/B,EAAAwiB,GACA,kBAAAxiB,EAAAriC,KAAA,CACA,MAAAshC,EAAA,IAAmBs8B,GAAQ/Y,EAAA4a,UAAAp9B,EAAAhb,MAG3B,OAFAia,EAAAu8B,WAAAx7B,EAAAw7B,WAEAv8B,EAGA,IAAAujB,EAAAiX,QAAAz5B,EAAAriC,MAOA,UAAa4yB,EAAA,EACb,kHACKwU,SAAA/E,EAAAriC,OAIL,MAAAshC,EAAA,IAAkBs8B,GAAQ/Y,EAAAiX,QAAAz5B,EAAAriC,MAAAqiC,EAAAhb,MAG1B,OAFAia,EAAAu8B,WAAAx7B,EAAAw7B,WAEAv8B,SC75BqBo+B,GAOrB38D,YAAAsc,EAAAC,EAAA,MAOAjc,KAAAgc,MAAeu+C,GAAQj2B,UAAAtoB,GAQvBhc,KAAAic,MAAmBs+C,GAAQj2B,UAAAroB,GAAoBs+C,GAAQj2B,UAAAtoB,GAIvDhc,KAAAgc,MAAAw+C,WAAAx6D,KAAA2mC,YAAA,kBACA3mC,KAAAic,IAAAu+C,WAAAx6D,KAAA2mC,YAAA,sBAiBAjnC,EAAAtB,OAAAqa,kBACA,IAAa6hD,IAAap2B,WAAAlkC,KAAAykC,kBAAA,IAS1BkC,kBACA,OAAA3mC,KAAAgc,MAAA8pB,QAAA9lC,KAAAic,KASAshB,aAIA,MAAsB,QAAbvJ,GAHTh0B,KAAAgc,MAAAi/C,gBACAj7D,KAAAic,IAAAg/C,iBAUAt+D,WACA,OAAAqD,KAAAgc,MAAArf,KAUA+C,iBAAAkR,GACA,OAAAA,EAAAk2B,QAAA9mC,KAAAgc,QAAApL,EAAAiuB,SAAA7+B,KAAAic,KAYAvc,cAAAunC,EAAAC,GAAA,GACAD,EAAAN,cACAO,GAAA,GAGA,MAAAC,EAAAnnC,KAAAonC,iBAAAH,EAAAjrB,QAAAkrB,GAAAlnC,KAAAgc,MAAA8pB,QAAAmB,EAAAjrB,OACAqrB,EAAArnC,KAAAonC,iBAAAH,EAAAhrB,MAAAirB,GAAAlnC,KAAAic,IAAA6pB,QAAAmB,EAAAhrB,KAEA,OAAAkrB,GAAAE,EAQA3nC,aAAAyS,GACA,MAAA8rB,EAAcs8B,GAAQ50B,cAAAxzB,GAEtB,OAAAnS,KAAAonC,iBAAAnJ,IAAAj+B,KAAAgc,MAAA8pB,QAAA7H,GASAv+B,QAAAunC,GACA,OAAAjnC,KAAAgc,MAAA8pB,QAAAmB,EAAAjrB,QAAAhc,KAAAic,IAAA6pB,QAAAmB,EAAAhrB,KASAvc,eAAAunC,GACA,OAAAjnC,KAAAgc,MAAA6iB,SAAAoI,EAAAhrB,MAAAjc,KAAAic,IAAA6qB,QAAAG,EAAAjrB,OA4BAtc,cAAAunC,GACA,MAAAK,KAqBA,OAnBAtnC,KAAAunC,eAAAN,IAGAjnC,KAAAonC,iBAAAH,EAAAjrB,QAGAsrB,EAAA5lC,KAAA,IAAqB26D,GAAKr8D,KAAAgc,MAAAirB,EAAAjrB,QAG1Bhc,KAAAonC,iBAAAH,EAAAhrB,MAGAqrB,EAAA5lC,KAAA,IAAqB26D,GAAKp1B,EAAAhrB,IAAAjc,KAAAic,OAI1BqrB,EAAA5lC,KAAA,IAAoB26D,GAAKr8D,KAAAgc,MAAAhc,KAAAic,MAGzBqrB,EAsBA5nC,gBAAAunC,GACA,GAAAjnC,KAAAunC,eAAAN,GAAA,CAGA,IAAAO,EAAAxnC,KAAAgc,MACAyrB,EAAAznC,KAAAic,IAcA,OAZAjc,KAAAonC,iBAAAH,EAAAjrB,SAGAwrB,EAAAP,EAAAjrB,OAGAhc,KAAAonC,iBAAAH,EAAAhrB,OAGAwrB,EAAAR,EAAAhrB,KAGA,IAAcogD,GAAK70B,EAAAC,GAInB,YA0CA/nC,uBACA,MAAA4nC,KACAyzB,EAAA/6D,KAAAgc,MAAAsgD,cAAAt8D,KAAAic,KAAA7Z,OAEA67B,EAAcs8B,GAAQj2B,UAAAtkC,KAAAgc,OACtB,IAAAugD,EAAAt+B,EAAAttB,OAGA,KAAAstB,EAAAja,KAAA5hB,OAAA24D,EAAA,IACA,MAAAv4B,EAAA+5B,EAAA9C,UAAAx7B,EAAAhG,OAEA,IAAAuK,GACA8E,EAAA5lC,KAAA,IAAqB26D,GAAKp+B,IAAA4J,aAAArF,KAG1BvE,EAAAja,KAAAia,EAAAja,KAAAxN,MAAA,MACAynB,EAAAhG,SACAskC,IAAA5rD,OAIA,KAAAstB,EAAAja,KAAA5hB,QAAApC,KAAAic,IAAA+H,KAAA5hB,QAAA,CACA,MAAA61B,EAAAj4B,KAAAic,IAAA+H,KAAAia,EAAAja,KAAA5hB,OAAA,GACAogC,EAAAvK,EAAAgG,EAAAhG,OAEA,IAAAuK,GACA8E,EAAA5lC,KAAA,IAAqB26D,GAAKp+B,IAAA4J,aAAArF,KAG1BvE,EAAAhG,SACAgG,EAAAja,KAAAtiB,KAAA,GAGA,OAAA4lC,EAYA5nC,UAAA8H,MAGA,OAFAA,EAAA08B,WAAAlkC,KAEA,IAAas6D,GAAU9yD,GAkBvB9H,UAAA8H,MACAA,EAAA08B,WAAAlkC,KACAwH,EAAAi9B,kBAAA,EAEA,MAAA4B,EAAA,IAAyBi0B,GAAU9yD,GAEnC,UAAAlJ,KAAA+nC,QACA/nC,EAAA6T,KAiBAzS,cAAA8H,MACAA,EAAA08B,WAAAlkC,KAEA,MAAAqmC,EAAA,IAAyBi0B,GAAU9yD,SAEnC6+B,EAAAz1B,SAEA,UAAAtS,KAAA+nC,QACA/nC,EAAAunC,aAcAnmC,0BAAAgR,GACA,OAAAA,EAAAnO,MACA,aACA,OAAAvC,KAAAk7D,iCAAAxqD,GACA,WACA,aACA,eACA,OAAA1Q,KAAAm7D,+BAAAzqD,GACA,YACA,OAAA1Q,KAAAo7D,gCAAA1qD,IACA,YACA,OAAA1Q,KAAAq7D,gCAAA3qD,IAGA,WAAe2rD,GAAKr8D,KAAAgc,MAAAhc,KAAAic,MAUpBvc,2BAAA+Q,GACA,MAAA62B,GAAA,IAAuB+0B,GAAKr8D,KAAAgc,MAAAhc,KAAAic,MAE5B,UAAAvL,KAAAD,EACA,QAAApT,EAAA,EAAmBA,EAAAiqC,EAAAllC,OAAmB/E,IAAA,CACtC,MAAAuM,EAAA09B,EAAAjqC,GAAAm/D,0BAAA9rD,GAEA42B,EAAA/zB,OAAAlW,EAAA,KAAAuM,GACAvM,GAAAuM,EAAAxH,OAAA,EAQA,QAAA/E,EAAA,EAAkBA,EAAAiqC,EAAAllC,OAAmB/E,IAAA,CACrC,MAAAwrC,EAAAvB,EAAAjqC,GAEA,QAAAkV,EAAAlV,EAAA,EAAuBkV,EAAA+0B,EAAAllC,OAAmBmQ,IAAA,CAC1C,MAAAwyB,EAAAuC,EAAA/0B,IAEAs2B,EAAA4zB,cAAA13B,MAAA03B,cAAA5zB,MAAA/C,QAAAf,KACAuC,EAAA/zB,OAAAhB,EAAA,IAKA,OAAA+0B,EASA5nC,oBACA,OAAAM,KAAAgc,MAAA0rB,kBAAA1nC,KAAAic,KAQAvc,SACA,OACAsc,MAAAhc,KAAAgc,MAAAo9C,SACAn9C,IAAAjc,KAAAic,IAAAm9C,UASA15D,QACA,WAAAM,KAAA0I,YAAA1I,KAAAgc,MAAAhc,KAAAic,KAYAvc,iCAAAgR,EAAAgsD,GAAA,GACA,OAAA18D,KAAAs7D,2BAAA5qD,EAAAE,SAAAF,EAAA8xB,QAAAk6B,GAYAh9D,+BAAAgR,EAAAgsD,GAAA,GACA,MAAAlB,EAAA9qD,EAAA8qD,eACAh5B,EAAA9xB,EAAA8xB,QACAkR,EAAAhjC,EAAAgjC,eAEA,OAAA1zC,KAAAu7D,sBAAAC,EAAA9nB,EAAAlR,EAAAk6B,GAYAh9D,gCAAAgR,GACA,MAAAsL,EAAAhc,KAAAgc,MAAAo/C,gCAAA1qD,GACA,IAAAuL,EAAAjc,KAAAic,IAAAm/C,gCAAA1qD,GAaA,OAXA1Q,KAAAic,IAAA6pB,QAAAp1B,EAAA8jC,qBACAv4B,EAAAjc,KAAAic,IAAA4rB,aAAA,IAIA7rB,EAAArf,MAAAsf,EAAAtf,OAGAsf,EAAAjc,KAAAic,IAAA4rB,cAAA,IAGA,IAAaw0B,GAAKrgD,EAAAC,GAYlBvc,gCAAAgR,GACA,IAAAsL,EAAAhc,KAAAgc,MAAAq/C,gCAAA3qD,GACAuL,EAAAjc,KAAAic,IAAAo/C,gCAAA3qD,GASA,OAPAsL,EAAArf,MAAAsf,EAAAtf,OAIAsf,EAAAjc,KAAAic,IAAA4rB,cAAA,IAGA7rB,EAAA8qB,QAAA7qB,IA2BAvL,EAAA8qD,eAAA38B,SAAAnuB,EAAAgjC,iBAEA13B,EAAYu+C,GAAQj2B,UAAAroB,IACpBgc,OAAA,GAEAvnB,EAAAqrD,iBAAAj2B,QAAA9pB,KAEAC,EAAAvL,EAAAqrD,kBAIA//C,EAAAtL,EAAAgjC,gBAGA,IAAc2oB,GAAKrgD,EAAAC,IAGnB,IAAaogD,GAAKrgD,EAAAC,GAiClBvc,2BAAAw8D,EAAA15B,EAAAk6B,GAAA,GACA,GAAAA,GAAA18D,KAAAonC,iBAAA80B,GAKA,OACA,IAAQG,GAAKr8D,KAAAgc,MAAAkgD,GACb,IAAQG,GACRH,EAAAr0B,aAAArF,GACAxiC,KAAAic,IAAAq/C,2BAAAY,EAAA15B,KAGG,CACH,MAAAqG,EAAA,IAAqBwzB,GAAKr8D,KAAAgc,MAAAhc,KAAAic,KAK1B,OAHA4sB,EAAA7sB,MAAA6sB,EAAA7sB,MAAAs/C,2BAAAY,EAAA15B,GACAqG,EAAA5sB,IAAA4sB,EAAA5sB,IAAAq/C,2BAAAY,EAAA15B,IAEAqG,IAeAnpC,sBAAA87D,EAAA9nB,EAAAlR,EAAAk6B,GAAA,GAEA,GAAA18D,KAAA2mC,YAAA,CACA,MAAAg2B,EAAA38D,KAAAgc,MAAAu/C,sBAAAC,EAAA9nB,EAAAlR,GAEA,WAAgB65B,GAAKM,IAerB,MAAAC,EAAoBP,GAAKt0B,4BAAAyzB,EAAAh5B,GACzB05B,EAAAxoB,EAAAooB,0BAAAN,EAAAh5B,GAEA,GAAAxiC,KAAAonC,iBAAAsM,KAAAgpB,IACAE,EAAAx1B,iBAAApnC,KAAAgc,QAAA4gD,EAAAx1B,iBAAApnC,KAAAic,MAAA,CACA,MAAAD,EAAAhc,KAAAgc,MAAAu/C,sBAAAC,EAAA9nB,EAAAlR,GACAvmB,EAAAjc,KAAAic,IAAAs/C,sBAAAC,EAAA9nB,EAAAlR,GAEA,WAAiB65B,GAAKrgD,EAAAC,IAKtB,IAAArS,EAEA,MAAAizD,EAAA78D,KAAA88D,cAAAF,GACA,IAAAG,EAAA,KAEA,MAAAC,EAAAh9D,KAAA40D,gBAAAgI,GAsBA,GApBA,GAAAC,EAAAz6D,OAEA26D,EAAA,IAAoBV,GACpBQ,EAAA,GAAA7gD,MAAA8/C,0BAAAN,EAAAh5B,GACAq6B,EAAA,GAAA5gD,IAAA6/C,0BAAAN,EAAAh5B,IAEG,GAAAq6B,EAAAz6D,SAEH26D,EAAA,IAAoBV,GACpBr8D,KAAAgc,MACAhc,KAAAic,IAAA6/C,0BAAAN,EAAAh5B,KAKA54B,EADAmzD,EACAA,EAAAzB,2BAAAY,EAAA15B,EAAA,OAAAw6B,GAAAN,MAKAM,EAAA,CACA,MAAAC,EAAA,IAAiCZ,GACjCW,EAAAhhD,MAAA0/C,aAAAkB,EAAA5gD,MAAAkgD,GACAc,EAAA/gD,IAAAy/C,aAAAkB,EAAA5gD,MAAAkgD,IAGA,GAAAtyD,EAAAxH,OACAwH,EAAA2J,OAAA,IAAA0pD,GAEArzD,EAAAlI,KAAAu7D,GAIA,OAAArzD,EAeAlK,0BAAAs8D,EAAAx5B,GACA,IAAA06B,EAAAl9D,KAAAgc,MAAA8/C,0BAAAE,EAAAx5B,GACA26B,EAAAn9D,KAAAic,IAAA6/C,0BAAAE,EAAAx5B,GAEA,aAAA06B,GAAA,MAAAC,EACA,MAGA,MAAAD,IACAA,EAAAlB,GAGA,MAAAmB,IACAA,EAAAnB,GAGA,IAAaK,GAAKa,EAAAC,IAYlBz9D,mCAAAkR,EAAAu1B,GACA,MAAAnqB,EAAApL,EACAqL,EAAArL,EAAAi3B,aAAA1B,GAEA,OAAAA,EAAA,MAAAnmC,KAAAgc,EAAAC,GAAA,IAAAjc,KAAAic,EAAAD,GAWAtc,iBAAAc,GACA,WAAAR,KAAmBu6D,GAAQj2B,UAAA9jC,EAAA,GAA0B+5D,GAAQj2B,UAAA9jC,IAAAi5D,YAU7D/5D,iBAAAyS,GACA,OAAAnS,KAAA+nC,4BAA2CwyB,GAAQ50B,cAAAxzB,KAAAstB,YAkBnD//B,yBAAA4nC,GACA,OAAAA,EAAAllC,OAOA,UAAamtB,EAAA,EAAa,8EACvB,MAAA+X,EAAAllC,OACH,OAAAklC,EAAA,GAAApC,QAMA,MAAAhsB,EAAAouB,EAAA,GAGAA,EAAAxF,KAAA,CAAAliB,EAAAqU,IACArU,EAAA5D,MAAA8qB,QAAA7S,EAAAjY,OAAA,MAIA,MAAAohD,EAAA91B,EAAAh0B,QAAA4F,GAKAtP,EAAA,IAAA5J,KAAAkZ,EAAA8C,MAAA9C,EAAA+C,KAIA,GAAAmhD,EAAA,EACA,QAAA//D,EAAA+/D,EAAA,EACA91B,EAAAjqC,GAAA4e,IAAA6pB,QAAAl8B,EAAAoS,OADoC3e,IAEpCuM,EAAAoS,MAAoBu+C,GAAQj2B,UAAAgD,EAAAjqC,GAAA2e,OAU5B,QAAA3e,EAAA+/D,EAAA,EAA6B//D,EAAAiqC,EAAAllC,QAC7BklC,EAAAjqC,GAAA2e,MAAA8pB,QAAAl8B,EAAAqS,KADgD5e,IAEhDuM,EAAAqS,IAAiBs+C,GAAQj2B,UAAAgD,EAAAjqC,GAAA4e,KAOzB,OAAArS,EAUAlK,gBAAAs/B,EAAAwiB,GACA,WAAAxhD,KAAmBu6D,GAAQF,SAAAr7B,EAAAhjB,MAAAwlC,GAA8B+Y,GAAQF,SAAAr7B,EAAA/iB,IAAAulC,WC72B5C6b,GAIrB39D,cAOAM,KAAAs9D,oBAAA,IAAAjuD,QAQArP,KAAAu9D,oBAAA,IAAAluD,QASArP,KAAAw9D,4BAAA,IAAA/2D,IAWAzG,KAAAy9D,sBAAA,IAAAh3D,IAGAzG,KAAA6wB,GAAA,uBAAAC,EAAAlxB,KACA,GAAAA,EAAAgyC,aACA,OAGA,MAAA8rB,EAAA19D,KAAAs9D,oBAAAp/D,IAAA0B,EAAA+9D,cAAAhtD,QAEA/Q,EAAAgyC,aAAA5xC,KAAA49D,gBAAAF,EAAA99D,EAAA+9D,cAAA1lC,UACMxT,SAAA,QAGNzkB,KAAA6wB,GAAA,uBAAAC,EAAAlxB,KACA,GAAAA,EAAA+9D,cACA,OAGA,IAAAE,EAAAj+D,EAAAgyC,aAAAjhC,OACAmtD,EAAA99D,KAAAu9D,oBAAAr/D,IAAA2/D,GAEA,MAAAC,GACAD,IAAAltD,OACAmtD,EAAA99D,KAAAu9D,oBAAAr/D,IAAA2/D,GAGA,MAAAE,EAAA/9D,KAAAg+D,eAAAp+D,EAAAgyC,aAAAjhC,OAAA/Q,EAAAgyC,aAAA3Z,OAAA4lC,GAEAj+D,EAAA+9D,cAAwBpD,GAAaj2B,UAAAw5B,EAAAC,KAC/Bt5C,SAAA,QAYN/kB,aAAAu+D,EAAAloB,GACA/1C,KAAAs9D,oBAAAl2D,IAAA62D,EAAAloB,GACA/1C,KAAAu9D,oBAAAn2D,IAAA2uC,EAAAkoB,GAcAv+D,kBAAAq2C,GACA,MAAAkoB,EAAAj+D,KAAAk+D,eAAAnoB,GAEA/1C,KAAAu9D,oBAAA9tD,OAAAsmC,GAEA/1C,KAAAs9D,oBAAAp/D,IAAA+/D,IAAAloB,GACA/1C,KAAAs9D,oBAAA7tD,OAAAwuD,GAeAv+D,mBAAAu+D,GACA,MAAAloB,EAAA/1C,KAAAm+D,cAAAF,GAEAj+D,KAAAs9D,oBAAA7tD,OAAAwuD,GAEAj+D,KAAAu9D,oBAAAr/D,IAAA63C,IAAAkoB,GACAj+D,KAAAu9D,oBAAA9tD,OAAAsmC,GAWAr2C,oBAAAc,EAAA5C,GACA,MAAAqN,EAAAjL,KAAAy9D,sBAAAv/D,IAAAN,IAAA,IAAAoF,IAEAiI,EAAA9H,IAAA3C,GAEAR,KAAAy9D,sBAAAr2D,IAAAxJ,EAAAqN,GAQAvL,6BAAA9B,GACAoC,KAAAy9D,sBAAAhuD,OAAA7R,GAMA8B,gBACAM,KAAAs9D,oBAAA,IAAAjuD,QACArP,KAAAu9D,oBAAA,IAAAluD,QACArP,KAAAy9D,sBAAA,IAAAh3D,IAWA/G,eAAAq2C,GACA,OAAA/1C,KAAAu9D,oBAAAr/D,IAAA63C,GASAr2C,cAAAu+D,GACA,OAAAj+D,KAAAs9D,oBAAAp/D,IAAA+/D,GASAv+D,aAAAujD,GACA,WAAaoZ,GAAUr8D,KAAAo+D,gBAAAnb,EAAAjnC,OAAAhc,KAAAo+D,gBAAAnb,EAAAhnC,MASvBvc,YAAA2+D,GACA,WAAa33B,GAAS1mC,KAAAs+D,eAAAD,EAAAriD,OAAAhc,KAAAs+D,eAAAD,EAAApiD,MAUtBvc,gBAAAkyC,GACA,MAAAhyC,GACAgyC,eACA2sB,OAAAv+D,MAKA,OAFAA,KAAA4nB,KAAA,sBAAAhoB,GAEAA,EAAA+9D,cAaAj+D,eAAAi+D,EAAAn2D,GAA2Cg3D,WAAA,IAC3C,MAAA5+D,GACA+9D,gBACAY,OAAAv+D,KACAw+D,UAAAh3D,EAAAg3D,WAKA,OAFAx+D,KAAA4nB,KAAA,sBAAAhoB,GAEAA,EAAAgyC,aAUAlyC,qBAAA9B,GACA,MAAA6gE,EAAAz+D,KAAAy9D,sBAAAv/D,IAAAN,GAEA,IAAA6gE,EACA,YAGA,MAAAxzD,EAAA,IAAAjI,IAEA,UAAAxC,KAAAi+D,EACA,GAAAj+D,EAAA2+B,GAAA,oBACA,UAAA+F,KAAA1kC,EAAAk+D,wBACAzzD,EAAA9H,IAAA+hC,QAGAj6B,EAAA9H,IAAA3C,GAIA,OAAAyK,EAgCAvL,0BAAAi/D,EAAAC,GACA5+D,KAAAw9D,4BAAAp2D,IAAAu3D,EAAAC,GAqBAl/D,eAAA4jD,EAAAub,EAAAhB,GACA,GAAAA,GAAAva,EAAA,CAKA,OAHAtjD,KAAAg+D,eAAA1a,EAAA3yC,OAAA2yC,EAAA1hD,MAAAi8D,GACA79D,KAAAg+D,eAAA1a,EAAAub,EAAAvb,GAQA,GAAAA,EAAAnkB,GAAA,QACA,OAAA0/B,EAIA,IAAAd,EAAA,EAEA,QAAA1gE,EAAA,EAAkBA,EAAAwhE,EAAgBxhE,IAClC0gE,GAAA/9D,KAAA8+D,eAAAxb,EAAAnlB,SAAA9gC,IAGA,OAAA0gE,EAyBAr+D,eAAAwgD,GACA,GAAAlgD,KAAAw9D,4BAAAt/D,IAAAgiD,EAAAtiD,MAAA,CAGA,OAFAoC,KAAAw9D,4BAAAt/D,IAAAgiD,EAAAtiD,KAEAsnB,CAAAg7B,GACG,GAAAlgD,KAAAu9D,oBAAA97D,IAAAy+C,GACH,SACG,GAAAA,EAAA/gB,GAAA,QACH,OAAA+gB,EAAAtgD,KAAAwC,OACG,GAAA89C,EAAA/gB,GAAA,aACH,SACG,CACH,IAAA4/B,EAAA,EAEA,UAAAr7C,KAAAw8B,EAAAje,cACA88B,GAAA/+D,KAAA8+D,eAAAp7C,GAGA,OAAAq7C,GA6BAr/D,gBAAA4jD,EAAA0b,GAEA,IAAA9e,EAEA+e,EAAA,EAEAlB,EAAA,EACAc,EAAA,EAGA,GAAAvb,EAAAnkB,GAAA,QACA,WAAckF,GAAYif,EAAA0b,GAM1B,KAAAjB,EAAAiB,GACA9e,EAAAoD,EAAAnlB,SAAA0gC,GAEAd,GADAkB,EAAAj/D,KAAA8+D,eAAA5e,GAEA2e,IAIA,OAAAd,GAAAiB,EACAh/D,KAAAk/D,4BAAA,IAAgD76B,GAAYif,EAAAub,IAM5D7+D,KAAA49D,gBAAA1d,EAAA8e,GAAAjB,EAAAkB,IAgBAv/D,4BAAAkyC,GAGA,MAAA5L,EAAA4L,EAAA5L,WACAD,EAAA6L,EAAA7L,UAEA,OAAAC,aAA6B/G,GAC7B,IAAcoF,GAAY2B,IAAApmC,KAAAwC,QACvB2jC,aAAgC9G,GACnC,IAAcoF,GAAY0B,EAAA,GAI1B6L,GAwGAvf,GAAKgrC,GAAQp4C,SCjhBQk6C,GAIrBz/D,cAOAM,KAAAo/D,YAAA,IAAA34D,IAaAzG,KAAAq/D,mBAAA,IAAA54D,IAiBA/G,IAAAyS,EAAA5P,GACAA,EAAA+8D,GAAA/8D,GAEA4P,aAAuBknD,KACvBlnD,EAAAnS,KAAAu/D,uBAAAptD,IAGAnS,KAAAo/D,YAAA39D,IAAA0Q,IACAnS,KAAAo/D,YAAAh4D,IAAA+K,EAAA,IAAA1L,KAGAzG,KAAAo/D,YAAAlhE,IAAAiU,GAAA/K,IAAA7E,GAAA,GAkBA7C,QAAAyS,EAAA5P,GAOA,OANAA,EAAA+8D,GAAA/8D,GAEA4P,aAAuBknD,KACvBlnD,EAAAnS,KAAAu/D,uBAAAptD,MAGAnS,KAAAghB,KAAA7O,EAAA5P,KACAvC,KAAAo/D,YAAAlhE,IAAAiU,GAAA/K,IAAA7E,GAAA,IAEA,GAsBA7C,KAAAyS,EAAA5P,GACAA,EAAA+8D,GAAA/8D,GAEA4P,aAAuBknD,KACvBlnD,EAAAnS,KAAAu/D,uBAAAptD,IAGA,MAAAqtD,EAAAx/D,KAAAo/D,YAAAlhE,IAAAiU,GAEA,QAAAxQ,IAAA69D,EACA,YAGA,MAAAlhE,EAAAkhE,EAAAthE,IAAAqE,GAEA,YAAAZ,IAAArD,EACA,KAGAA,EAkBAoB,OAAAyS,EAAA5P,GACAA,EAAA+8D,GAAA/8D,GAEA4P,aAAuBknD,KACvBlnD,EAAAnS,KAAAu/D,uBAAAptD,IAGA,MAAA6O,EAAAhhB,KAAAghB,KAAA7O,EAAA5P,GAEA,WAAAye,GACAhhB,KAAAo/D,YAAAlhE,IAAAiU,GAAA/K,IAAA7E,GAAA,IAEA,IACG,IAAAye,GAIH,KAaAthB,uBAAA+lC,GACA,IAAA3N,EAAA,KAEA,MAAA2nC,EAAAz/D,KAAAq/D,mBAAAnhE,IAAAunC,EAAAG,aAEA,GAAA65B,EAAA,CACA,MAAAC,EAAAD,EAAAvhE,IAAAunC,EAAAQ,WAEAy5B,IACA5nC,EAAA4nC,EAAAxhE,IAAAunC,EAAA90B,SAQA,OAJAmnB,IACAA,EAAA93B,KAAA2/D,uBAAAl6B,EAAAG,YAAAH,EAAAQ,UAAAR,EAAA90B,SAGAmnB,EAcAp4B,uBAAAsc,EAAAC,EAAAtL,GACA,MAAAmnB,EAAA15B,OAAA,mBACA,IAAAqhE,EAAAC,EAkBA,OAhBAD,EAAAz/D,KAAAq/D,mBAAAnhE,IAAA8d,MAGAyjD,EAAA,IAAAh5D,IACAzG,KAAAq/D,mBAAAj4D,IAAA4U,EAAAyjD,KAGAC,EAAAD,EAAAvhE,IAAA+d,MAGAyjD,EAAA,IAAAj5D,IACAg5D,EAAAr4D,IAAA6U,EAAAyjD,IAGAA,EAAAt4D,IAAAuJ,EAAAmnB,GAEAA,GAUA,SAAAwnC,GAAA/8D,GACA,MAAA7B,EAAA6B,EAAA2U,MAAA,KAEA,OAAAxW,EAAA0B,OAAA,EAAA1B,EAAA,OAAAA,EAAA,GAAAA,EAAA,SC3NqBk/D,GAMrBlgE,YAAAmgE,MAMA7/D,KAAA6/D,cAAuB5wC,IAAS6wC,WAAA9/D,MAAmB6/D,GASnDngE,eAAAqgE,EAAAxyB,GAEA,UAAAsrB,KAAAkH,EAAAC,qBACAhgE,KAAAigE,oBAAApH,EAAAj7D,KAAAi7D,EAAAhwB,MAAA0E,GAIA,UAAA1Y,KAAAkrC,EAAAG,aACA,UAAArrC,EAAAtyB,KACAvC,KAAAmgE,cAAwB9D,GAAKt0B,4BAAAlT,EAAAjkB,SAAAikB,EAAAzyB,QAAAmrC,GACzB,UAAA1Y,EAAAtyB,KACJvC,KAAAogE,cAAAvrC,EAAAjkB,SAAAikB,EAAAzyB,OAAAyyB,EAAAj3B,KAAA2vC,GAGAvtC,KAAAqgE,iBAAAxrC,EAAAgU,MAAAhU,EAAAyrC,aAAAzrC,EAAA0rC,kBAAA1rC,EAAA2rC,kBAAAjzB,GAKA,UAAAsrB,KAAAkH,EAAAU,kBACAzgE,KAAA0gE,iBAAA7H,EAAAj7D,KAAAi7D,EAAAhwB,MAAA0E,GAeA7tC,cAAAmpC,EAAA0E,GACAvtC,KAAA6/D,cAAAtyB,SAGAvtC,KAAA6/D,cAAAc,WAAA3gE,KAAA4gE,wBAAA/3B,GAGA,UAAAvqC,KAAAuqC,EAAA,CACA,MAAA12B,EAAA7T,EAAA6T,KAEAvS,GACAuS,OACA02B,MAHqBwzB,GAAKt0B,4BAAAzpC,EAAA6mC,iBAAA7mC,EAAA8D,SAM1BpC,KAAA6gE,aAAA,SAAAjhE,GAKA,UAAAhB,KAAAuT,EAAAy+B,mBACAhxC,EAAA0gE,aAAA1hE,EACAgB,EAAA2gE,kBAAA,KACA3gE,EAAA4gE,kBAAAruD,EAAA8E,aAAArY,GAEAoB,KAAA6gE,0BAAoCjiE,IAAMgB,GAI1CI,KAAA8gE,sBAWAphE,cAAAkR,EAAAxO,EAAAxE,EAAA2vC,GACAvtC,KAAA6/D,cAAAtyB,SAEAvtC,KAAA4nB,KAAA,UAAAhqB,GAAgCgT,WAAAxO,UAAmBpC,KAAA6/D,eAEnD7/D,KAAA8gE,sBAeAphE,iBAAAmpC,EAAAjqC,EAAA+I,EAAAmjB,EAAAyiB,GACAvtC,KAAA6/D,cAAAtyB,SAGAvtC,KAAA6/D,cAAAc,WAAA3gE,KAAA+gE,0BAAAl4B,eAAsFjqC,KAGtF,UAAAN,KAAAuqC,EAAA,CACA,MAEAjpC,GACAuS,KAHA7T,EAAA6T,KAIA02B,MAHqBwzB,GAAKt0B,4BAAAzpC,EAAA6mC,iBAAA7mC,EAAA8D,QAI1Bk+D,aAAA1hE,EACA2hE,kBAAA54D,EACA64D,kBAAA11C,GAGA9qB,KAAA6gE,0BAAmCjiE,IAAMgB,GAGzCI,KAAA8gE,sBAeAphE,iBAAAikC,EAAAq9B,EAAAzzB,GACA,MAAA0zB,EAAAp9D,MAAAC,KAAAk9D,EAAAE,qBAAAv9B,EAAAsH,qBAOA,GALAjrC,KAAA6/D,cAAAtyB,SACAvtC,KAAA6/D,cAAAc,WAAA3gE,KAAAmhE,2BAAAx9B,EAAAs9B,GAEAjhE,KAAA4nB,KAAA,aAA2B+b,aAAY3jC,KAAA6/D,eAEvCl8B,EAAAgD,YAAA,CAIA,UAAA5wB,KAAAkrD,EAAA,CACA,MAAAG,EAAArrD,EAAAsrD,WAEA,IAAAC,GAAA39B,EAAAsH,mBAAAl1B,EAAA/V,KAAA6/D,cAAAtB,QACA,SAGA,MAAA3+D,GACAuS,KAAAwxB,EACA49B,WAAAxrD,EAAAnY,KACAwjE,eAGAphE,KAAA6/D,cAAAc,WAAA3/C,KAAA2iB,EAAA,aAAA5tB,EAAAnY,OACAoC,KAAA4nB,KAAA,aAAA7R,EAAAnY,KAAAgC,EAAAI,KAAA6/D,eAIA,UAAAjhE,KAAA+kC,EAAAiN,mBAAA,CACA,MAAAhxC,GACAuS,KAAAwxB,EACAkF,MAAAlF,EAAAyF,gBACAk3B,aAAA1hE,EACA2hE,kBAAA,KACAC,kBAAA78B,EAAA1sB,aAAArY,IAIAoB,KAAA6/D,cAAAc,WAAA3/C,KAAA2iB,EAAA,aAAA/jC,EAAA0gE,eACAtgE,KAAA4nB,KAAA,aAAAhoB,EAAA0gE,aAAA1gE,EAAAI,KAAA6/D,eAIA7/D,KAAA8gE,uBAYAphE,iBAAA6hE,EAAAH,EAAA7zB,GAEA,IAAA6zB,EAAAzkE,KAAAiE,UAAA,cAAAwgE,EAAAzkE,KAAAonC,SACA,OAGA/jC,KAAA6/D,cAAAtyB,SAGA,MAAA7yB,EAAA,aAAA6mD,EAGA,GAAAH,EAAAz6B,YAAA,CACA,MAAAg6B,EAAA,IAA0BxB,GAO1B,OANAwB,EAAAx9D,IAAAi+D,EAAA1mD,GAEA1a,KAAA6/D,cAAAc,kBAEA3gE,KAAA4nB,KAAAlN,GAA0B6mD,aAAAH,eAA0BphE,KAAA6/D,eAMpD7/D,KAAA6/D,cAAAc,WAAA3gE,KAAA+gE,0BAAAK,EAAA1mD,GAGA,UAAAvI,KAAAivD,EAAAI,WAAA,CAEA,IAAAxhE,KAAA6/D,cAAAc,WAAA3/C,KAAA7O,EAAAuI,GACA,SAGA,MAAA9a,GAAiBuS,OAAA02B,MAAcwzB,GAAK/xB,UAAAn4B,GAAAovD,aAAAH,eAEpCphE,KAAA4nB,KAAAlN,EAAA9a,EAAAI,KAAA6/D,eAGA7/D,KAAA8gE,sBAWAphE,oBAAA6hE,EAAAH,EAAA7zB,GAEA6zB,EAAAzkE,KAAAiE,UAAA,cAAAwgE,EAAAzkE,KAAAonC,WAIA/jC,KAAA6/D,cAAAtyB,SAEAvtC,KAAA4nB,KAAA,gBAAA25C,GAA4CA,aAAAH,eAA0BphE,KAAA6/D,eAEtE7/D,KAAA8gE,uBAWAphE,wBAAAmpC,GACA,MAAA83B,EAAA,IAAyBxB,GAEzB,UAAA7gE,KAAAuqC,EAAA,CACA,MAAA12B,EAAA7T,EAAA6T,KAEAwuD,EAAAx9D,IAAAgP,EAAA,UAEA,UAAAvT,KAAAuT,EAAAy+B,mBACA+vB,EAAAx9D,IAAAgP,EAAA,aAAAvT,GAIA,OAAA+hE,EAWAjhE,0BAAAmpC,EAAAtmC,GACA,MAAAo+D,EAAA,IAAyBxB,GAEzB,UAAAhtD,KAAA02B,EAAA24B,WACAb,EAAAx9D,IAAAgP,EAAA5P,GAGA,OAAAo+D,EAWAjhE,2BAAAikC,EAAAq9B,GACA,MAAAL,EAAA,IAAyBxB,GAEzBwB,EAAAx9D,IAAAwgC,EAAA,aAEA,UAAA5tB,KAAAirD,EACAL,EAAAx9D,IAAAwgC,EAAA,aAAA5tB,EAAAnY,MAGA,UAAAgB,KAAA+kC,EAAAiN,mBACA+vB,EAAAx9D,IAAAwgC,EAAA,aAAA/kC,GAGA,OAAA+hE,EAYAjhE,aAAA6C,EAAA3C,GACA,IAAAI,KAAA6/D,cAAAc,WAAA3/C,KAAAphB,EAAAuS,KAAA5P,GAEA,OAGA,MAAA3E,EAAAgC,EAAAuS,KAAAvU,MAAA,QAEAoC,KAAA4nB,KAAArlB,EAAA,IAAA3E,EAAAgC,EAAAI,KAAA6/D,eAQAngE,6BACAM,KAAA6/D,cAAAtyB,cACAvtC,KAAA6/D,cAAAc,YAkIA,SAAAW,GAAA3D,EAAA5nD,EAAAwoD,GACA,MAAA11B,EAAA9yB,EAAAsrD,WACA/iC,EAAAz6B,MAAAC,KAAA65D,EAAAn/B,gBAYA,OAXAF,EAAA6H,QACA7H,EAAAyd,WAEAzd,EAAA+V,KAAA7zC,IACA,GAAAqoC,EAAA44B,aAAAjhE,GAAA,CAGA,QAFA+9D,EAAAJ,cAAA39D,GAEA+iC,kBAAA,mBAnBAlR,GAAKutC,GAAoB36C,SCjjBJy8C,GA2DrBhiE,YAAAyoC,EAAAC,EAAA5gC,GAOAxH,KAAAsoC,oBAAA,EAQAtoC,KAAAqoC,WAQAroC,KAAA+gC,OAAA,IAAAt6B,IAEA0hC,GACAnoC,KAAAyoC,MAAAN,EAAAC,EAAA5gC,GAqBAohC,aACA,GAAA5oC,KAAAqoC,QAAAjmC,OAAA,GACA,MAAAymC,EAAA7oC,KAAAqoC,QAAAroC,KAAAqoC,QAAAjmC,OAAA,GAEA,OAAApC,KAAAsoC,mBAAAO,EAAA5sB,IAAA4sB,EAAA7sB,MAGA,YAaA8sB,YACA,GAAA9oC,KAAAqoC,QAAAjmC,OAAA,GACA,MAAAymC,EAAA7oC,KAAAqoC,QAAAroC,KAAAqoC,QAAAjmC,OAAA,GAEA,OAAApC,KAAAsoC,mBAAAO,EAAA7sB,MAAA6sB,EAAA5sB,IAGA,YAUA0qB,kBAGA,WAFA3mC,KAAAqoC,QAAAjmC,QAGApC,KAAAqoC,QAAA,GAAA1B,YAYAoC,iBACA,OAAA/oC,KAAAqoC,QAAAjmC,OASA4mC,iBACA,OAAAhpC,KAAA2mC,aAAA3mC,KAAAsoC,mBAWA5oC,QAAA6pC,GACA,GAAAvpC,KAAA+oC,YAAAQ,EAAAR,WACA,SACG,OAAA/oC,KAAA+oC,WACH,SAGA,IAAA/oC,KAAA4oC,OAAA9C,QAAAyD,EAAAX,UAAA5oC,KAAA8oC,MAAAhD,QAAAyD,EAAAT,OACA,SAGA,UAAAU,KAAAxpC,KAAAqoC,QAAA,CACA,IAAAoB,GAAA,EAEA,UAAAxC,KAAAsC,EAAAlB,QACA,GAAAmB,EAAA1D,QAAAmB,GAAA,CACAwC,GAAA,EACA,MAIA,IAAAA,EACA,SAIA,SAQA/pC,aACA,UAAAmpC,KAAA7oC,KAAAqoC,cACA,IAAag0B,GAAKxzB,EAAA7sB,MAAA6sB,EAAA5sB,KAclBvc,gBACA,IAAAupC,EAAA,KAEA,UAAAJ,KAAA7oC,KAAAqoC,QACAY,IAAAJ,EAAA7sB,MAAA6iB,SAAAoK,EAAAjtB,SACAitB,EAAAJ,GAIA,OAAAI,EAAA,IAAqBozB,GAAKpzB,EAAAjtB,MAAAitB,EAAAhtB,KAAA,KAa1Bvc,eACA,IAAAwpC,EAAA,KAEA,UAAAL,KAAA7oC,KAAAqoC,QACAa,IAAAL,EAAA5sB,IAAA6qB,QAAAoC,EAAAjtB,OACAitB,EAAAL,GAIA,OAAAK,EAAA,IAAoBmzB,GAAKnzB,EAAAltB,MAAAktB,EAAAjtB,KAAA,KAYzBvc,mBACA,MAAAupC,EAAAjpC,KAAAopC,gBAEA,OAAAH,IAAAjtB,MAAAkpB,QAAA,KAYAxlC,kBACA,MAAA2pC,EAAArpC,KAAAspC,eAEA,OAAAD,IAAAptB,IAAAipB,QAAA,KA0DAxlC,MAAAyoC,EAAAC,EAAA5gC,GACA,UAAA2gC,EACAnoC,KAAA+pC,oBACG,GAAA5B,aAAiCu5B,GACpC1hE,KAAA+pC,WAAA5B,EAAAwB,YAAAxB,EAAAa,iBACG,GAAAb,GAAA,mBAAAA,EAAAwB,UAGH3pC,KAAA+pC,WAAA5B,EAAAwB,YAAAxB,EAAAa,iBACG,GAAAb,aAAiCk0B,GACpCr8D,KAAA+pC,YAAA5B,KAAAC,OAAAgC,eACG,GAAAjC,aAAiCoyB,GACpCv6D,KAAA+pC,YAAA,IAA0BsyB,GAAKl0B,UAC5B,GAAAA,aAAiC8wB,GAAI,CACxC,MAAA7uB,IAAA5iC,OAAA4iC,SACA,IAAAvB,EAEA,SAAAT,EACAS,EAAYwzB,GAAKhyB,UAAAlC,QACb,SAAAC,EACJS,EAAYwzB,GAAK/xB,UAAAnC,OACb,SAAAxmC,IAAAymC,EAQJ,UAAc7Y,EAAA,EACd,sIARAsZ,EAAA,IAAgBwzB,GAAO9B,GAAQj2B,UAAA6D,EAAAC,IAY/BpoC,KAAA+pC,YAAAlB,GAAAuB,OACG,KAAWxK,GAAUuI,GASxB,UAAa5Y,EAAA,EAAa,8EAP1BvvB,KAAA+pC,WAAA5B,EAAAC,OAAAgC,WAsBA1qC,WAAA+qC,EAAAC,GAAA,GAIA,MAAAi3B,GAHAl3B,EAAA5mC,MAAAC,KAAA2mC,IAGA4J,KAAAuB,IACA,KAAAA,aAA+BymB,IAY/B,UAAc9sC,EAAA,EACd,kHAKA,OAAAvvB,KAAAqoC,QAAAlW,MAAAyvC,IACAA,EAAA97B,QAAA8P,MAKA,GAAAnL,EAAAroC,SAAApC,KAAAqoC,QAAAjmC,QAAAu/D,EAAA,CAIA3hE,KAAA6hE,mBAEA,UAAAh5B,KAAA4B,EACAzqC,KAAA2qC,WAAA9B,GAGA7oC,KAAAsoC,qBAAAoC,EAEA1qC,KAAA4nB,KAAA,gBAA8Bk6C,cAAA,KAc9BpiE,SAAA+mC,EAAAxO,GACA,UAAAj4B,KAAA4oC,OAMA,UAAarZ,EAAA,EACb,uGAIA,MAAAgb,EAAmBgwB,GAAQj2B,UAAAmC,EAAAxO,GAE3B,WAAAsS,EAAAhE,YAAAvmC,KAAA8oC,OACA,OAGA,MAAAF,EAAA5oC,KAAA4oC,OAEA5oC,KAAAqoC,QAAAjmC,QACApC,KAAA+hE,YAGA,UAAAx3B,EAAAhE,YAAAqC,IACA5oC,KAAA2qC,WAAA,IAAwB0xB,GAAK9xB,EAAA3B,IAC7B5oC,KAAAsoC,oBAAA,IAEAtoC,KAAA2qC,WAAA,IAAwB0xB,GAAKzzB,EAAA2B,IAC7BvqC,KAAAsoC,oBAAA,GAGAtoC,KAAA4nB,KAAA,gBAA8Bk6C,cAAA,IAS9BpiE,aAAAd,GACA,OAAAoB,KAAA+gC,OAAA7iC,IAAAU,GAWAc,gBACA,OAAAM,KAAA+gC,OAAAnM,UAQAl1B,mBACA,OAAAM,KAAA+gC,OAAAhtB,OASArU,aAAAd,GACA,OAAAoB,KAAA+gC,OAAAt/B,IAAA7C,GAYAc,gBAAAd,GACAoB,KAAAsgC,aAAA1hC,KACAoB,KAAA+gC,OAAAtxB,OAAA7Q,GAEAoB,KAAA4nB,KAAA,oBAAmCo6C,eAAApjE,GAAAkjE,cAAA,KAcnCpiE,aAAAd,EAAAN,GACA0B,KAAAiX,aAAArY,KAAAN,IACA0B,KAAA+gC,OAAA35B,IAAAxI,EAAAN,GAEA0B,KAAA4nB,KAAA,oBAAmCo6C,eAAApjE,GAAAkjE,cAAA,KAWnCpiE,qBACA,OAAAM,KAAA+oC,WACA,YAGA,MAAAF,EAAA7oC,KAAAopC,gBACArC,EAAA8B,EAAA7sB,MAAA+pB,UACAiB,EAAA6B,EAAA5sB,IAAA+pB,WAEA,OAAAe,aAAqCgzB,IAAOhzB,GAAAC,EAAAD,EAAA,KA+B5CrnC,qBACA,MAAAuiE,EAAA,IAAA3P,QAEA,UAAAzpB,KAAA7oC,KAAA2pC,YAAA,CACA,MAAAu4B,EAAAC,GAAAt5B,EAAA7sB,MAAAimD,GAEAC,UACAA,GAGA,UAAA5jE,KAAAuqC,EAAAoM,YACA,cAAA32C,EAAAiE,MAAA6/D,GAAA9jE,EAAA6T,KAAA8vD,WACA3jE,EAAA6T,MAIA,MAAAkwD,EAAAF,GAAAt5B,EAAA5sB,IAAAgmD,GAGAI,IAAAx5B,EAAA5sB,IAAAqmD,WAA2C/H,GAAQj2B,UAAA+9B,EAAA,YACnDA,IAgBA3iE,sBAAAc,EAAAR,KAAA4oC,OAAAjsC,MACA,MAAA4lE,EAA6BhI,GAAQj2B,UAAA9jC,EAAA,GACrCgiE,EAA2BjI,GAAQj2B,UAAA9jC,EAAA,OAEnC,OAAA+hE,EAAAD,WAAAtiE,KAAAirC,qBACAu3B,EAAAF,WAAAtiE,KAAAkrC,mBAUAxrC,WAAAmpC,GACA7oC,KAAAyiE,YAAA55B,GACA7oC,KAAAqoC,QAAA3mC,KAAA,IAAyB26D,GAAKxzB,EAAA7sB,MAAA6sB,EAAA5sB,MAS9Bvc,YAAAmpC,GACA,QAAAxrC,EAAA,EAAkBA,EAAA2C,KAAAqoC,QAAAjmC,OAAyB/E,IAC3C,GAAAwrC,EAAAtB,eAAAvnC,KAAAqoC,QAAAhrC,IAQA,UAAckyB,EAAA,EACd,gHACMsb,WAAAhC,EAAAiC,kBAAA9qC,KAAAqoC,QAAAhrC,KAYNqC,mBACA,KAAAM,KAAAqoC,QAAAjmC,OAAA,GACApC,KAAA+hE,YASAriE,YACAM,KAAAqoC,QAAA5hB,OAmCA,SAAA27C,GAAA5hE,EAAAyhE,GACA,OAAAA,EAAAxgE,IAAAjB,KAIAyhE,EAAA9+D,IAAA3C,GAEAA,EAAAI,SAAA8hE,MAAAC,OAAAC,QAAApiE,MAAAmQ,QAKA,SAAAwxD,GAAAvxD,EAAAqxD,GACA,MAAA3jC,EAAA1tB,EAAAD,OAAA6tB,cAAkDH,aAAA,EAAAD,aAAA,IAClDykC,EAAAvkC,EAAA+N,KAAA7rC,GAAA4hE,GAAA5hE,EAAAyhE,IAMA,OAFA3jC,EAAAz8B,QAAArB,GAAAyhE,EAAA9+D,IAAA3C,IAEAqiE,EAxBAxwC,GAAKqvC,GAAWz8C,SCrvBK69C,WAAkBzG,GAMvC38D,YAAAsc,EAAAC,GACAlc,MAAAic,EAAAC,GA0FA,WACAjc,KAAAmlB,SACAnlB,KAAArD,KAAAiE,SAAA8hE,MACA,iBACA,CAAArnD,EAAA+J,KACA,MAAA1U,EAAA0U,EAAA,GAEA1U,EAAAqyD,qBAcA,SAAkBryD,GAElB,MAAA42B,EAAAtnC,KAAAw8D,0BAAA9rD,GACA9G,EAAgByyD,GAAK2G,kBAAA17B,GAErB27B,GAAAr5D,EAAAk8B,QAAA9lC,MACAkjE,EAmCA,SAAAr6B,EAAAn4B,GACA,OAAAA,EAAAnO,MACA,aACA,OAAAsmC,EAAAzB,iBAAA12B,EAAAE,UACA,WACA,aACA,eACA,YACA,OAAAi4B,EAAAzB,iBAAA12B,EAAA8qD,iBACA3yB,EAAA7sB,MAAA8pB,QAAAp1B,EAAA8qD,iBACA3yB,EAAAzB,iBAAA12B,EAAAgjC,gBACA,YACA,OAAA7K,EAAAzB,iBAAA12B,EAAAirD,gBAAA9yB,EAAAzB,iBAAA12B,EAAA8jC,mBAGA,SAlDA2uB,CAAAnjE,KAAA0Q,GAEA,IAAAqrD,EAAA,KAEA,GAAAkH,EAAA,CAGA,cAAAr5D,EAAAjN,KAAAonC,WAGAg4B,EADA,UAAArrD,EAAAnO,KACAmO,EAAA8qD,eAGA9qD,EAAAqrD,kBAIA,MAAA6F,EAAA5hE,KAAAojE,UAEApjE,KAAAgc,MAAApS,EAAAoS,MACAhc,KAAAic,IAAArS,EAAAqS,IAEAjc,KAAA4nB,KAAA,eAAAg6C,GAAwC7F,0BACtCmH,GAEFljE,KAAA4nB,KAAA,iBAAA5nB,KAAAojE,WAAgDrH,sBAzCpCv+D,KAAAwC,KAAA0Q,KAET+T,SAAA,SArGHjnB,KAAAwC,MAQAN,SACAM,KAAAqlB,gBAQA3lB,UACA,WAAa28D,GAAKr8D,KAAAgc,MAAAhc,KAAAic,KASlBvc,iBAAAmpC,GACA,WAAai6B,GAASj6B,EAAA7sB,MAAA6sB,EAAA5sB,MA4ItBoW,GAAKywC,GAAW79C,GCjLhB,MAAAo+C,GAAA,mBA4BqBC,GAMrB5jE,YAAA8hD,GAMAxhD,KAAA+qC,WAAA,IAAwBw4B,GAAa/hB,GAErCxhD,KAAA+qC,WAAAC,SAAA,gBAAA5jB,GAAApnB,MACAA,KAAA+qC,WAAAC,SAAA,oBAAA5jB,GAAApnB,MAUA2mC,kBACA,OAAA3mC,KAAA+qC,WAAApE,YAeAiC,aACA,OAAA5oC,KAAA+qC,WAAAnC,OAYAE,YACA,OAAA9oC,KAAA+qC,WAAAjC,MASAC,iBACA,OAAA/oC,KAAA+qC,WAAAhC,WAUAy6B,kBACA,OAAAxjE,KAAA+qC,WAAAy4B,YAUAx6B,iBACA,OAAAhpC,KAAA+qC,WAAA/B,WAWAy6B,0BACA,OAAAzjE,KAAA+qC,WAAA04B,oBAQAp7B,cACA,OAAAroC,KAAA+qC,WAAA1C,QAQA3oC,YACA,OAAAM,KAAA+qC,WAAApB,YAYAjqC,mBACA,OAAAM,KAAA+qC,WAAAE,mBAYAvrC,kBACA,OAAAM,KAAA+qC,WAAAG,kBAaAxrC,gBACA,OAAAM,KAAA+qC,WAAA3B,gBAaA1pC,eACA,OAAAM,KAAA+qC,WAAAzB,eA+BA5pC,oBACA,OAAAM,KAAA+qC,WAAA24B,oBAUAhkE,qBACA,OAAAM,KAAA+qC,WAAAI,qBAcAzrC,sBAAAc,GACA,OAAAR,KAAA+qC,WAAA44B,sBAAAnjE,GAMAd,UACAM,KAAA+qC,WAAAsiB,UAQA3tD,mBACA,OAAAM,KAAA+qC,WAAA6F,mBAWAlxC,gBACA,OAAAM,KAAA+qC,WAAAiL,gBASAt2C,aAAAd,GACA,OAAAoB,KAAA+qC,WAAA9zB,aAAArY,GASAc,aAAAd,GACA,OAAAoB,KAAA+qC,WAAAzK,aAAA1hC,GAgBAc,UAAA+mC,EAAAxO,GACAj4B,KAAA+qC,WAAAM,SAAA5E,EAAAxO,GAmBAv4B,OAAAyoC,EAAAC,EAAA5gC,GACAxH,KAAA+qC,WAAAtC,MAAAN,EAAAC,EAAA5gC,GAYA9H,cAAAd,EAAAN,GACA0B,KAAA+qC,WAAA9hC,aAAArK,EAAAN,GAaAoB,iBAAAd,GACAoB,KAAA+qC,WAAA/hC,gBAAApK,GASAc,uBACA,OAAAM,KAAA+qC,WAAA64B,uBAiBAlkE,mBACA,OAAAM,KAAA+qC,WAAA84B,kBAcAnkE,gBAAA2pB,GACArpB,KAAA+qC,WAAA+4B,eAAAz6C,GAUA3pB,6BAAAd,GACA,OAAAykE,GAAAzkE,EAUAc,4BAAAd,GACA,OAAAA,EAAAmlE,WAAAV,KAIAhxC,GAAKixC,GAAmBr+C,SA2ClBs+C,WAAsB7B,GAG5BhiE,YAAA8hD,GACAzhD,QAMAC,KAAAgkE,OAAAxiB,EAAAkhB,MAMA1iE,KAAAwjC,UAAAge,EAUAxhD,KAAAikE,mBAAA,IAAAx9D,IAKAzG,KAAAkkE,2BAKAlkE,KAAAmkE,kBAAA,EAQAnkE,KAAAokE,2BAAA,IAAAphE,IAGAhD,KAAA6wB,GAAA,oBACA,UAAAgY,KAAA7oC,KAAA2pC,YACA,IAAA3pC,KAAAwjC,UAAA6gC,wBAAAx7B,GAQA,UAAetZ,EAAA,EACf,0GACOsZ,YAMP7oC,KAAAmlB,SAAAnlB,KAAAwjC,UAAA,UAAA1S,EAAA9gB,KAEAhQ,KAAAskE,mBAAA,GAyeA,SAAA5B,EAAA1yD,GACA,MAAA+vD,EAAA2C,EAAA9hE,SAAAm/D,OAEA,UAAAlrC,KAAAkrC,EAAAG,aAAA,CACA,aAAArrC,EAAAtyB,KACA,SAGA,MAAAgiE,EAAA1vC,EAAAjkB,SAAAD,OACA6zD,EAAA3vC,EAAAzyB,SAAAmiE,EAAA9K,UAEA+K,GACA9B,EAAA+B,cAAAz0D,EAAAu9B,IACA,MAAAm3B,EAAA7gE,MAAAC,KAAAygE,EAAA3zB,oBACAh7B,OAAAhX,KAAAmlE,WAAAV,KAEA,UAAAzkE,KAAA8lE,EACAn3B,EAAAvkC,gBAAApK,EAAA2lE,MAvfAI,CAAA3kE,KAAAgkE,OAAAh0D,KAGAhQ,KAAAmlB,SAAAnlB,KAAAgkE,OAAA,sBACA,KAAAhkE,KAAAkkE,wBAAA9hE,QAAA,CACA,MAAAwiE,UAAWA,EAAApJ,kBAA4Bx7D,KAAAkkE,wBAAA/9B,QAEvCnmC,KAAA6kE,uBAAAD,EAAApJ,GAGAx7D,KAAAmkE,mBACAnkE,KAAAmkE,kBAAA,EAEAnkE,KAAA4nB,KAAA,gBAAgCk6C,cAAA,OAE1Br9C,SAAA,WAGNkiB,kBAGA,WAFA3mC,KAAAqoC,QAAAjmC,OAEApC,KAAAwjC,UAAAshC,mBAAAn+B,YAAA5mC,MAAA4mC,YAGAiC,aACA,OAAA7oC,MAAA6oC,QAAA5oC,KAAAwjC,UAAAshC,mBAAA9oD,MAGA8sB,YACA,OAAA/oC,MAAA+oC,OAAA9oC,KAAAwjC,UAAAshC,mBAAA7oD,IAGA8sB,iBACA,OAAA/oC,KAAAqoC,QAAAjmC,OAAApC,KAAAqoC,QAAAjmC,OAAA,EAQAohE,kBACA,OAAAxjE,KAAAqoC,QAAAjmC,OAAA,EAQAqhE,0BACA,QAAAzjE,KAAAokE,2BAAA75D,KAIA7K,UACA,QAAArC,EAAA,EAAkBA,EAAA2C,KAAAqoC,QAAAjmC,OAAyB/E,IAC3C2C,KAAAqoC,QAAAhrC,GAAAkoD,SAGAvlD,KAAAqlB,gBAGA3lB,aACAM,KAAAqoC,QAAAjmC,aACArC,MAAA4pC,kBAEA3pC,KAAAwjC,UAAAshC,mBAIAplE,gBACA,OAAAK,MAAAqpC,iBAAAppC,KAAAwjC,UAAAshC,mBAGAplE,eACA,OAAAK,MAAAupC,gBAAAtpC,KAAAwjC,UAAAshC,mBAGAplE,MAAAyoC,EAAA48B,EAAAv9D,GACAzH,MAAA0oC,MAAAN,EAAA48B,EAAAv9D,GACAxH,KAAAglE,qBAGAtlE,SAAA+mC,EAAAxO,GACAl4B,MAAAsrC,SAAA5E,EAAAxO,GACAj4B,KAAAglE,qBAGAtlE,aAAAd,EAAAN,GACA,GAAA0B,KAAA8yC,cAAAl0C,EAAAN,GAAA,CAEA,MAAA0jE,GAAApjE,GACAoB,KAAA4nB,KAAA,oBAAmCo6C,gBAAAF,cAAA,KAInCpiE,gBAAAd,GACA,GAAAoB,KAAA+yC,iBAAAn0C,GAAA,CAEA,MAAAojE,GAAApjE,GACAoB,KAAA4nB,KAAA,oBAAmCo6C,gBAAAF,cAAA,KAInCpiE,kBACA,MAAAulE,EAAsB9gD,IAUtB,OANAnkB,KAAAokE,2BAAAjhE,IAAA8hE,GAEA,IAAAjlE,KAAAokE,2BAAA75D,MACAvK,KAAAglE,qBAGAC,EAGAvlE,eAAA2pB,GACA,IAAArpB,KAAAokE,2BAAA3iE,IAAA4nB,GAQA,UAAakG,EAAA,EACb,6GACKlG,QAILrpB,KAAAokE,2BAAA30D,OAAA4Z,GAGArpB,KAAAyjE,qBACAzjE,KAAAglE,qBAKAtlE,qBACAM,KAAAskE,mBAAA,GAGA5kE,YACAM,KAAAqoC,QAAA5hB,MAAA8+B,SAGA7lD,WAAAmpC,GACA,MAAA+7B,EAAA5kE,KAAAklE,cAAAr8B,GAGA+7B,GACA5kE,KAAAqoC,QAAA3mC,KAAAkjE,GAUAllE,cAAAmpC,GAGA,GAFA7oC,KAAAyiE,YAAA55B,GAEAA,EAAAlsC,MAAAqD,KAAAwjC,UAAA44B,UAQA,YAFGtsD,GAAA,EAAGjN,KAAA,4GAKN,MAAA+hE,EAAoB9B,GAASqC,UAAAt8B,GAc7B,OAZA+7B,EAAA/zC,GAAA,gBAAAC,EAAA8wC,EAAAhiE,KACAI,KAAAmkE,kBAAA,EAGAS,EAAAjoE,MAAAqD,KAAAwjC,UAAA44B,WACAp8D,KAAAkkE,wBAAAxiE,MACAkjE,YACApJ,eAAA57D,EAAAm8D,qBAKA6I,EAQAllE,kBAAA0lE,GACA,MAAAC,EAAwBrM,GAAKh5D,KAAAslE,6BAC7BC,EAAwBvM,GAAKh5D,KAAAg2C,iBAE7B,GAAAovB,EAEAplE,KAAAikE,mBAAA,IAAAx9D,IACAzG,KAAA+gC,OAAA,IAAAt6B,SAGA,UAAA7H,EAAA6lB,KAAAzkB,KAAAikE,mBACA,OAAAx/C,IACAzkB,KAAA+gC,OAAAtxB,OAAA7Q,GACAoB,KAAAikE,mBAAAx0D,OAAA7Q,IAKAoB,KAAAwlE,iBAAAH,GAGA,MAAAI,KAIA,UAAAC,EAAA56C,KAAA9qB,KAAAg2C,gBACAuvB,EAAA9jE,IAAAikE,IAAAH,EAAArnE,IAAAwnE,KAAA56C,GACA26C,EAAA/jE,KAAAgkE,GAKA,UAAAC,KAAAJ,EACAvlE,KAAAsgC,aAAAqlC,IACAF,EAAA/jE,KAAAikE,GAKAF,EAAArjE,OAAA,GACApC,KAAA4nB,KAAA,oBAAmCo6C,cAAAyD,EAAA3D,cAAA,IAanCpiE,cAAAd,EAAAN,EAAAwjE,GAAA,GACA,MAAAr9C,EAAAq9C,EAAA,eAEA,cAAAr9C,GAAA,UAAAzkB,KAAAikE,mBAAA/lE,IAAAU,MAKAmB,MAAAkX,aAAArY,KAGAN,IAIA0B,KAAA+gC,OAAA35B,IAAAxI,EAAAN,GAGA0B,KAAAikE,mBAAA78D,IAAAxI,EAAA6lB,IAEA,IAeA/kB,iBAAAd,EAAAkjE,GAAA,GACA,MAAAr9C,EAAAq9C,EAAA,eAEA,cAAAr9C,GAAA,UAAAzkB,KAAAikE,mBAAA/lE,IAAAU,MAMAoB,KAAAikE,mBAAA78D,IAAAxI,EAAA6lB,KAGA1kB,MAAAugC,aAAA1hC,KAIAoB,KAAA+gC,OAAAtxB,OAAA7Q,IAEA,IASAc,iBAAA+T,GACA,MAAAgyD,EAAA,IAAAziE,IAEA,UAAA2iE,EAAAh+D,KAAA3H,KAAAg2C,gBAEAviC,EAAAvV,IAAAynE,KAAAh+D,GAKA3H,KAAA+yC,iBAAA4yB,GAAA,GAGA,UAAA/mE,EAAAN,KAAAmV,EAAA,CAEAzT,KAAA8yC,cAAAl0C,EAAAN,GAAA,IAGAmnE,EAAAtiE,IAAAvE,GAIA,OAAA6mE,EAOA/lE,wBACA,MAAA8+C,EAAAx+C,KAAAirC,mBAAAt6B,OAEA,GAAA3Q,KAAA2mC,aAAA6X,EAAA/c,QACA,UAAA7iC,KAAA4/C,EAAA5N,mBACA,GAAAhyC,EAAAmlE,WAAAV,IAAA,OACAzkE,EAAA2d,OAAA8mD,GAAAjhE,QAEAo8C,EAAAvnC,aAAArY,KAYAc,4BACA,MAAAkR,EAAA5Q,KAAAirC,mBACA03B,EAAA3iE,KAAAgkE,OAAArB,OAEA,IAAAlvD,EAAA,KAEA,GAAAzT,KAAA2mC,YAiBG,CAGH,MAAAX,EAAAp1B,EAAA2uB,SAAA3uB,EAAA2uB,SAAA3uB,EAAAo1B,WACAD,EAAAn1B,EAAA2uB,SAAA3uB,EAAA2uB,SAAA3uB,EAAAm1B,UAeA,GAZA/lC,KAAAyjE,sBAEAhwD,EAAAmyD,GAAA5/B,IAIAvyB,IACAA,EAAAmyD,GAAA7/B,KAKA/lC,KAAAyjE,sBAAAhwD,EAAA,CACA,IAAAnS,EAAA0kC,EAEA,KAAA1kC,IAAAmS,GAEAA,EAAAmyD,GADAtkE,IAAAE,iBAMA,IAAAiS,EAAA,CACA,IAAAnS,EAAAykC,EAEA,KAAAzkC,IAAAmS,GAEAA,EAAAmyD,GADAtkE,IAAA6R,aAMAM,IACAA,EAAAzT,KAAA4jE,4BAzDA,CAEA,MAAA/6B,EAAA7oC,KAAAopC,gBAGA,UAAA9qC,KAAAuqC,EAAA,CAEA,GAAAvqC,EAAA6T,KAAAgtB,GAAA,YAAAwjC,EAAAkD,SAAAvnE,EAAA6T,MACA,MAKA,QAAA7T,EAAAiE,MAAA,OAAAkR,IACAA,EAAAnV,EAAA6T,KAAA6jC,kBA+CA,OAAAviC,EAQA/T,uBAAAklE,EAAAkB,GAGA,MAAAC,EAAAD,EAAA5gC,QAGA8gC,EAAAhmE,KAAAgkE,OAAArB,OAAAsD,yBAAAF,GAIAnkE,EAAA5B,KAAAqoC,QAAA/0B,QAAAsxD,GAKA,GAJA5kE,KAAAqoC,QAAA90B,OAAA3R,EAAA,GACAgjE,EAAArf,SAGAygB,EAAA,CAEA,MAAApwB,EAAA51C,KAAAklE,cAAAc,GAGAhmE,KAAAqoC,QAAA90B,OAAA3R,EAAA,EAAAg0C,KAYA,SAAAgwB,GAAAtkE,GACA,OAAAA,aAAsB+3D,IAAS/3D,aAAoB63D,GACnD73D,EAAA00C,gBAGA,KCvhCA,IAAIkwB,GAAe,EACfC,GAAkB,EAwBP,IAAAC,GAJf,SAAA9nE,GACA,OAAS6+B,GAAS7+B,EAAQ4nE,GAAkBC,KC4BrC,SAAAE,GAAAC,GAKP,OAJAA,EAAUF,GAASE,IAEnBx1B,KAAAy1B,GAAAD,EAAAx1B,KAAA,aAEAgvB,IACAA,EAAAjvC,GAAA,UAAAy1C,EAAA5D,MAAA8D,GAAAF,EAAAx1B,OAA0ErsB,SAAA6hD,EAAAG,mBAAA,YAyEnE,SAAAC,GAAAJ,GAIP,IAAA5rD,EAAA,eAHA4rD,EAAUF,GAASE,IAEnB5D,MAAA9jE,IAAA0nE,EAAA5D,MAAA9jE,IAAA0nE,EAAA5D,OAOA,GAJA4D,EAAA5D,MAAA9kE,OACA8c,GAAA,IAAA4rD,EAAA5D,MAAA9kE,MAGA0oE,EAAA5D,MAAAj2D,OACA,UAAAk6D,KAAAL,EAAA5D,MAAAj2D,OACA65D,EAAAx1B,KAAA61B,GAAAJ,GAAAD,EAAAx1B,KAAA61B,GAAA,kBAGAL,EAAAx1B,KAAAy1B,GAAAD,EAAAx1B,KAAA,aAGA,MAAA81B,EAAAC,GAAAP,GAEA,OAAAxG,IACAA,EAAAjvC,GAAAnW,EAwoBO,SAAAksD,GACP,OAAA91C,EAAAlxB,EAAAigE,KAGA,MAAAiH,EAAAF,EAAAhnE,EAAA2gE,kBAAAV,EAAAtyB,QAGAw5B,EAAAH,EAAAhnE,EAAA4gE,kBAAAX,EAAAtyB,QAEA,IAAAu5B,IAAAC,EACA,OAGA,IAAAlH,EAAAc,WAAAqG,QAAApnE,EAAAuS,KAAA2e,EAAAlzB,MACA,OAGA,MAAAqpE,EAAApH,EAAAtyB,OACAiI,EAAAyxB,EAAArmE,SAAA+iC,UAEA,GAAA/jC,EAAAuS,gBAA4BuvD,IAAc9hE,EAAAuS,gBAAyBmxD,GAEnE2D,EAAA5vB,KAAA7B,EAAApM,gBAAA29B,OACG,CAEH,IAAA9jB,EAAA4c,EAAAtB,OAAA2I,YAAAtnE,EAAAipC,OAGA,OAAAjpC,EAAA2gE,mBAAAuG,IACA7jB,EAAAgkB,EAAAE,OAAAlkB,EAAA6jB,IAGA,OAAAlnE,EAAA4gE,mBAAAuG,GACAE,EAAA5vB,KAAA4L,EAAA8jB,KAzqBA1vB,CAAAuvB,IAAqDniD,SAAA6hD,EAAAG,mBAAA,YA0D9C,SAAAW,GAAAd,GAIP,IAAA5rD,EAAA,eAHA4rD,EAAUF,GAASE,IAEnB5D,MAAA9jE,IAAA0nE,EAAA5D,MAAA9jE,IAAA0nE,EAAA5D,OAOA,GAJA4D,EAAA5D,MAAA9kE,OACA8c,GAAA,IAAA4rD,EAAA5D,MAAA9kE,MAGA0oE,EAAA5D,MAAAj2D,OACA,UAAAk6D,KAAAL,EAAA5D,MAAAj2D,OACA65D,EAAAx1B,KAAA61B,GAAAU,GAAAf,EAAAx1B,KAAA61B,SAGAL,EAAAx1B,KAAAu2B,GAAAf,EAAAx1B,MAGA,MAAA81B,EAAAC,GAAAP,GAEA,OAAAxG,IACAA,EAAAjvC,GAAAnW,EAsbO,SAAA4sD,GAGP,OAFAA,KAAA,EAAAhpE,EAAAsB,MAAgEtB,QAAAM,IAAAgB,EAAA0gE,gBAEhE,CAAAxvC,EAAAlxB,EAAAigE,KACA,MAAA0H,EAAAD,EAAA1nE,EAAA2gE,kBAAA3gE,GACA22C,EAAA+wB,EAAA1nE,EAAA4gE,kBAAA5gE,GAEA,IAAA2nE,IAAAhxB,EACA,OAGA,IAAAspB,EAAAc,WAAAqG,QAAApnE,EAAAuS,KAAA2e,EAAAlzB,MACA,OAGA,MAAAm4C,EAAA8pB,EAAAtB,OAAAJ,cAAAv+D,EAAAuS,MACA80D,EAAApH,EAAAtyB,OAIA,GAAAwI,EAAA,CA0CA,UAAAn2C,EAAA2gE,mBAAAgH,EACA,YAAAA,EAAA3oE,IAAA,CACA,MAAAohC,EAAAn8B,MAAAuJ,QAAAm6D,EAAAjpE,OAAAipE,EAAAjpE,OAAAipE,EAAAjpE,OAEA,UAAAsjC,KAAA5B,EACAinC,EAAApvB,YAAAjW,EAAAmU,QAEI,YAAAwxB,EAAA3oE,IAAA,CACJ,MAAAmV,EAAAhW,OAAAgW,KAAAwzD,EAAAjpE,OAEA,UAAAM,KAAAmV,EACAkzD,EAAAnvB,YAAAl5C,EAAAm3C,QAGAkxB,EAAAj+D,gBAAAu+D,EAAA3oE,IAAAm3C,GAKA,UAAAn2C,EAAA4gE,mBAAAjqB,EACA,YAAAA,EAAA33C,IAAA,CACA,MAAAohC,EAAAn8B,MAAAuJ,QAAAmpC,EAAAj4C,OAAAi4C,EAAAj4C,OAAAi4C,EAAAj4C,OAEA,UAAAsjC,KAAA5B,EACAinC,EAAAtvB,SAAA/V,EAAAmU,QAEI,YAAAQ,EAAA33C,IAAA,CACJ,MAAAmV,EAAAhW,OAAAgW,KAAAwiC,EAAAj4C,OAEA,UAAAM,KAAAmV,EACAkzD,EAAAvvB,SAAA94C,EAAA23C,EAAAj4C,MAAAM,GAAAm3C,QAGAkxB,EAAAh+D,aAAAstC,EAAA33C,IAAA23C,EAAAj4C,MAAAy3C,QAxCGjmC,GAAA,EAAGjN,KAAA,8HA7eN2kE,CAAAZ,IAAgEniD,SAAA6hD,EAAAG,mBAAA,YA4HhE,SAAAF,GAAAz1B,EAAA22B,GACA,yBAAA32B,EAEAA,EAGA,CAAA42B,EAAAT,KASA,SAAAU,EAAAV,EAAAQ,GACA,iBAAAE,IAEAA,GAA2B/pE,KAAA+pE,IAG3B,IAAAnnE,EACA,MAAAsG,EAAA/I,OAAAiR,UAAqC24D,EAAA7gE,YAErC,gBAAA2gE,EACAjnE,EAAAymE,EAAAW,uBAAAD,EAAA/pE,KAAAkJ,QACE,gBAAA2gE,EAAA,CACF,MAAAjgE,GACAid,SAAAkjD,EAAAljD,UAA+CipB,GAAoBD,kBAGnEjtC,EAAAymE,EAAA/vB,uBAAAywB,EAAA/pE,KAAAkJ,EAAAU,QAGAhH,EAAAymE,EAAAY,gBAAAF,EAAA/pE,KAAAkJ,GAGA,GAAA6gE,EAAAvkE,OAAA,CACA,MAAA2Q,EAAAhW,OAAAgW,KAAA4zD,EAAAvkE,QAEA,UAAAxE,KAAAmV,EACAkzD,EAAAvvB,SAAA94C,EAAA+oE,EAAAvkE,OAAAxE,GAAA4B,GAIA,GAAAmnE,EAAA3nC,QAAA,CACA,MAAAA,EAAA2nC,EAAA3nC,QAEA,oBAAAA,EACAinC,EAAAtvB,SAAA3X,EAAAx/B,QAEA,UAAAohC,KAAA5B,EACAinC,EAAAtvB,SAAA/V,EAAAphC,GAKA,OAAAA,GAnDAsnE,CAAAh3B,EAAAm2B,EAAAQ,GAsDA,SAAAZ,GAAAP,GACA,OAAAA,EAAA5D,MAAAj2D,OACA,CAAAs7D,EAAAd,KACA,MAAAn2B,EAAAw1B,EAAAx1B,KAAAi3B,GAEA,OAAAj3B,EACAA,EAAAi3B,EAAAd,GAGA,MAGAX,EAAAx1B,KAQA,SAAAu2B,GAAAv2B,GACA,uBAAAA,EACAi3B,KAAmCnpE,IAAAkyC,EAAAxyC,MAAAypE,IACjC,iBAAAj3B,EAEFA,EAAAxyC,MACA,IAAAwyC,EAIAi3B,KAAoCnpE,IAAAkyC,EAAAlyC,IAAAN,MAAAypE,IAIpCj3B,EA6BO,SAAA01B,GAAAI,GACP,OAAA91C,EAAAlxB,EAAAigE,KACA,MAAA9pB,EAAA6wB,EAAAhnE,EAAAuS,KAAA0tD,EAAAtyB,QAEA,IAAAwI,EACA,OAGA,IAAA8pB,EAAAc,WAAAqG,QAAApnE,EAAAuS,KAAA,UACA,OAGA,MAAAy/B,EAAAiuB,EAAAtB,OAAAD,eAAA1+D,EAAAipC,MAAA7sB,OAEA6jD,EAAAtB,OAAAngB,aAAAx+C,EAAAuS,KAAA4jC,GACA8pB,EAAAtyB,OAAAt9B,OAAA2hC,EAAAmE,UCndqBiyB,GAMrBtoE,YAAAgjE,GAOA1iE,KAAA0iE,QAQA1iE,KAAA8wC,KAAA,IAAkB+mB,GAQlB73D,KAAAu+D,OAAA,IAAoBlB,GAQpBr9D,KAAAioE,mBAAA,IAAgCrI,IAChCrB,OAAAv+D,KAAAu+D,SAGA,MAAA/c,EAAAxhD,KAAA0iE,MAAA9hE,SACA+iC,EAAA6d,EAAA7d,UACAq9B,EAAAhhE,KAAA0iE,MAAA1B,QAOAhhE,KAAAmlB,SAAAnlB,KAAA0iE,MAAA,sBACA1iE,KAAA8wC,KAAAqnB,oBAAA,IACM1zC,SAAA,YAENzkB,KAAAmlB,SAAAnlB,KAAA0iE,MAAA,qBACA1iE,KAAA8wC,KAAAqnB,oBAAA,EACAn4D,KAAA8wC,KAAAviC,WACMkW,SAAA,WAKNzkB,KAAAmlB,SAAAq8B,EAAA,cACAxhD,KAAA8wC,KAAA+nB,OAAAtrB,IACAvtC,KAAAioE,mBAAAC,eAAA1mB,EAAAue,OAAAxyB,GACAvtC,KAAAioE,mBAAAE,iBAAAxkC,EAAAq9B,EAAAzzB,OAEM9oB,SAAA,QAGNzkB,KAAAmlB,SAAAnlB,KAAA8wC,KAAAlwC,SAAA,kBCrEO,SAAA8hE,EAAAnE,GACP,OAAAztC,EAAAlxB,KACA,MAAA41C,EAAA51C,EAAAoyD,aACAoW,EAAA,IAA6B1G,GAE7Bp6B,KAEA,UAAA2b,KAAAzN,EAAA7L,YACArC,EAAA5lC,KAAA68D,EAAA8J,aAAAplB,IAGAmlB,EAAA3/B,MAAAnB,GAAiC8C,SAAAoL,EAAAxM,aAEjCo/B,EAAAtiC,QAAA48B,EAAA9hE,SAAA+iC,YACA++B,EAAA7J,OAAAtrB,IACAA,EAAAkI,aAAA2yB,MDsDwDE,CAAsBtoE,KAAA0iE,MAAA1iE,KAAAu+D,SAG9Ev+D,KAAAioE,mBAAAp3C,GAAA,eDyZA,CAAAC,EAAAlxB,EAAAigE,KACA,IAAAA,EAAAc,WAAAqG,QAAApnE,EAAAuS,KAAA,UACA,OAGA,MAAA80D,EAAApH,EAAAtyB,OACAqE,EAAAiuB,EAAAtB,OAAAD,eAAA1+D,EAAAipC,MAAA7sB,OACA4iC,EAAAqoB,EAAAsB,WAAA3oE,EAAAuS,KAAAvS,MAEAqnE,EAAAh3D,OAAA2hC,EAAAgN,KCla6Dn6B,SAAA,WAC7DzkB,KAAAioE,mBAAAp3C,GAAA,SD6aA,CAAAC,EAAAlxB,EAAAigE,KAEA,MAAAxb,EAAAwb,EAAAtB,OAAAD,eAAA1+D,EAAAgR,UAEA43D,EAAA5oE,EAAAgR,SAAAi3B,aAAAjoC,EAAAwC,QACAkiD,EAAAub,EAAAtB,OAAAD,eAAAkK,GAAkEhK,WAAA,IAElEvb,EAAA4c,EAAAtyB,OAAAqT,YAAAyD,EAAAC,GAGA5kC,EAAAmgD,EAAAtyB,OAAAn9B,OAAA6yC,EAAApZ,cAIA,UAAAnmB,KAAAm8C,EAAAtyB,OAAAk7B,cAAA/oD,GAAA8hD,WACA3B,EAAAtB,OAAAmK,kBAAAhlD,KC5bmDe,SAAA,QAGnDzkB,KAAAioE,mBAAAp3C,GAAA,YESA,CAAAC,EAAAlxB,EAAAigE,KACA,MAAAoH,EAAApH,EAAAtyB,OACAiI,EAAAyxB,EAAArmE,SAAA+iC,UAEA,UAAAkF,KAAA2M,EAAA7L,YAEAd,EAAAlC,aAEAkC,EAAA5sB,IAAAtL,OAAA/P,UACAi/D,EAAAtyB,OAAAuG,gBAAAjL,EAAA7sB,OAIAirD,EAAAxxB,aAAA,QFtB+DhxB,SAAA,QAC/DzkB,KAAAioE,mBAAAp3C,GAAA,YElFA,CAAAC,EAAAlxB,EAAAigE,KACA,MAAAl8B,EAAA/jC,EAAA+jC,UAEA,GAAAA,EAAAgD,YACA,OAGA,IAAAk5B,EAAAc,WAAAqG,QAAArjC,EAAA,aACA,OAGA,MAAAwgB,KAEA,UAAAtb,KAAAlF,EAAAgG,YAAA,CACA,MAAAsZ,EAAA4c,EAAAtB,OAAA2I,YAAAr+B,GACAsb,EAAAziD,KAAAuhD,GAGA4c,EAAAtyB,OAAAkI,aAAA0O,GAAkD/Z,SAAAzG,EAAAqF,eFgEmBvkB,SAAA,QACrEzkB,KAAAioE,mBAAAp3C,GAAA,YEtCA,CAAAC,EAAAlxB,EAAAigE,KACA,MAAAl8B,EAAA/jC,EAAA+jC,UAEA,IAAAA,EAAAgD,YACA,OAGA,IAAAk5B,EAAAc,WAAAqG,QAAArjC,EAAA,aACA,OAGA,MAAAsjC,EAAApH,EAAAtyB,OACAowB,EAAAh6B,EAAAsH,mBACA2G,EAAAiuB,EAAAtB,OAAAD,eAAAX,GACAgL,EAAA1B,EAAA2B,gBAAAh3B,GAEAq1B,EAAAxxB,aAAAkzB,KFsByElkD,SAAA,QAKzEzkB,KAAA8wC,KAAAlwC,SAAAwsC,MAAAvd,OAAA7vB,KAAA0iE,MAAA9hE,SAAAwsC,OAAAT,MAAAhwC,IAEA,iBAAAA,EAAAonC,SACA,YAGA,MAAAy0B,EAAA,IAAwB10B,GAAmBnnC,EAAAiB,MAM3C,OAJA46D,EAAAz0B,SAAApnC,EAAAonC,SACAy0B,EAAAh1B,UAAAxjC,KAAA8wC,KAAAlwC,SACAZ,KAAAu+D,OAAAngB,aAAAzhD,EAAA67D,GAEAA,IAQA94D,UACAM,KAAA8wC,KAAAuc,UACArtD,KAAAqlB,iBAIAgN,GAAK21C,GAAmBj3C,UG1HH83C,GAWrBnpE,YAAAkzB,EAAAk2C,MAKA9oE,KAAA+oE,QAAAn2C,EAQA5yB,KAAAgpE,kBAAA,IAAAviE,IAMAzG,KAAAipE,SAAA,IAAAxiE,IAEA,UAAAyiE,KAAAJ,EACA9oE,KAAAgpE,kBAAA5hE,IAAA8hE,KAEAA,EAAAC,YACAnpE,KAAAgpE,kBAAA5hE,IAAA8hE,EAAAC,WAAAD,GAYAxpE,EAAAtB,OAAAqa,YACA,UAAAoc,KAAA70B,KAAAipE,SACA,mBAAAp0C,EAAA,WACAA,GAWAn1B,IAAAd,GACA,OAAAoB,KAAAipE,SAAA/qE,IAAAU,GAeAc,KAAA0pE,EAAAC,MACA,MAAAC,EAAAtpE,KACA4yB,EAAA5yB,KAAA+oE,QACAQ,EAAA,IAAAvmE,IACAwmE,KAEAC,EAAAC,EAAAN,GACAO,EAAAD,EAAAL,GACAO,EAoHA,SAAAR,GACA,MAAAQ,KAEA,UAAAC,KAAAT,EACAU,EAAAD,IACAD,EAAAloE,KAAAmoE,GAIA,OAAAD,EAAAxnE,OAAAwnE,EAAA,KA7HAG,CAAAX,GAEA,GAAAQ,EAAA,CAsBA,MAAAI,EAAA,6FAKA,OAFGl6D,GAAA,EAAG7P,MAAA+pE,GAAmBZ,QAAAQ,IAEzBjkE,QAAAskE,OAAA,IAA8B16C,EAAA,EAAay6C,GAAaZ,QAAAQ,KAGxD,OAAAjkE,QAAA2L,IAAAm4D,EAAA17D,IAAAm8D,IACApgE,KAAA,IAAA0/D,GAEA,SAAAU,EAAAhB,GACA,IAAAS,EAAAlkB,SAAAyjB,KAKAI,EAAAprE,IAAAgrE,KAAAK,EAAA9nE,IAAAynE,GAIA,OA4BA,SAAAA,GACA,WAAAvjE,QAAAC,IACA2jE,EAAApmE,IAAA+lE,GAEAA,EAAAiB,UACAjB,EAAAiB,SAAAtoE,QAAAuoE,IACA,MAAAC,EAAAP,EAAAM,GAEA,GAAAf,EAAA5jB,SAAA4kB,GAQA,UAAiB96C,EAAA,EACjB,2HAES+6C,OAAAD,EAAAE,WAAArB,IAITgB,EAAAG,KAIA,MAAAC,EAAA,IAAApB,EAAAt2C,GACA02C,EAAAkB,KAAAtB,EAAAoB,GACAd,EAAA9nE,KAAA4oE,GAEA1kE,MA3DA6kE,CAAAvB,GACAwB,MAAAC,IAuBA,MAFK76D,GAAA,EAAG7P,MAAA,kEAA2EqqE,OAAApB,IAEnFyB,IAuCA,SAAAb,EAAAc,GACA,yBAAAA,EACAA,EAGAtB,EAAAN,kBAAA9qE,IAAA0sE,GAeA,SAAAlB,EAAAN,GACA,OAAAA,EACAr7D,IAAA87D,GAAAC,EAAAD,IACAj0D,OAAAszD,SASAxpE,UACA,MAAAmrE,EAAAhnE,MAAAC,KAAA9D,MACA+N,IAAA,GAAA+8D,QACAl1D,OAAAk1D,GAAA,mBAAAA,EAAAzd,SACAt/C,IAAA+8D,KAAAzd,WAEA,OAAA1nD,QAAA2L,IAAAu5D,GAUAnrE,KAAAwpE,EAAAoB,GACAtqE,KAAAipE,SAAA7hE,IAAA8hE,EAAAoB,GAEA,MAAAnB,EAAAD,EAAAC,WAEAA,IAIAnpE,KAAAipE,SAAAxnE,IAAA0nE,GA+BGr5D,GAAA,EAAGjN,KACN,sFACKsmE,aAAA4B,QAAA/qE,KAAAipE,SAAA/qE,IAAAirE,GAAAzgE,YAAAsiE,QAAA9B,IAGLlpE,KAAAipE,SAAA7hE,IAAA+hE,EAAAmB,WChSqBW,GAIrBvrE,cAOAM,KAAAkrE,UAAA,IAAAzkE,IASA/G,IAAAyrE,EAAAC,GACAprE,KAAAkrE,UAAA9jE,IAAA+jE,EAAAC,GASA1rE,IAAAyrE,GACA,OAAAnrE,KAAAkrE,UAAAhtE,IAAAitE,GASAzrE,QAAAyrE,KAAA/lD,GACA,MAAAgmD,EAAAprE,KAAA9B,IAAAitE,GAEA,IAAAC,EAOA,UAAa77C,EAAA,EAAa,gEAAmE47C,gBAG7FC,EAAAC,WAAAjmD,GAQA1lB,eACAM,KAAAkrE,UAAAn3D,OAQArU,kBACAM,KAAAkrE,UAAAz+D,SAUA/M,CAAAtB,OAAAqa,YACA,OAAAzY,KAAAkrE,UAAA9sE,OAAAqa,YAMA/Y,UACA,UAAA0rE,KAAAprE,KAAAsrE,WACAF,EAAA/d,WCtCO,SAAAke,GAAAC,EAAAC,GACP,MAAAC,EAoCA3tE,OAAAgW,KAAA9W,OAAA0uE,uBAAAvpE,OA5BA,OANA,IAAAspE,IAGAF,EAAAztE,OAAAgW,KAAA9W,OAAA0uE,uBAAA,IAGA,IAAAD,GAoBA,SAAAF,EAAAC,GACA,OACAD,KAAAvuE,OAAA0uE,uBACAF,KAAAxuE,OAAA0uE,sBAAAH,GAvBAI,CAAAJ,EAAAC,GAIAxuE,OAAA0uE,sBAAAH,GAGAC,GAAAt7D,QAAA,4BANAs7D,EAAAt7D,QAAA,4BAhEAlT,OAAA0uE,wBACA1uE,OAAA0uE,gCCCqBE,GAMrBnsE,YAAA8rE,GAOAxrE,KAAAwrE,YAAA,KAqBAxrE,KAAAzB,EAAA,KAAA6mB,IAAAplB,KAAA8rE,MAAA1mD,IAQA1lB,GAAAqsE,EAAAt/D,GACA,IAAAu/D,EAAyBT,GAASvrE,KAAAwrE,SAAAO,GAQlC,OANAt/D,IACAu/D,IAAA77D,QAAA,WAAAhQ,EAAAyB,IACAA,EAAA6K,EAAArK,OAAAqK,EAAA7K,GAAAzB,IAIA6rE,SC9BeC,GAIfvsE,cAUAM,KAAAksE,aAAA,IAAAzlE,IA6BA/G,IAAAc,EAAA2rE,GACA,IAAAC,EAGA5rE,EAAA2+B,GAAA,SAAA3+B,EAAA2+B,GAAA,oBACAn/B,KAAAksE,aAAA9kE,IAAA5G,GAAA,IAMAR,KAAAksE,aAAAzqE,IAAAjB,GAIA4rE,EAAApsE,KAAAksE,aAAAhuE,IAAAsC,IAHA4rE,EAAA,IAA4BC,GAC5BrsE,KAAAksE,aAAA9kE,IAAA5G,EAAA4rE,IAKAA,EAAAjpE,IAAAgpE,IAgCAzsE,KAAAc,EAAA2rE,GACA,MAAAC,EAAApsE,KAAAksE,aAAAhuE,IAAAsC,GAEA,YAAAmB,IAAAyqE,EACA,KAIA5rE,EAAA2+B,GAAA,SAAA3+B,EAAA2+B,GAAA,oBACAitC,EAIAA,EAAAprD,KAAAmrD,GA+BAzsE,QAAAc,EAAA2rE,GACA,QAAAnsE,KAAAghB,KAAAxgB,EAAA2rE,KACA3rE,EAAA2+B,GAAA,SAAA3+B,EAAA2+B,GAAA,oBAEAn/B,KAAAksE,aAAA9kE,IAAA5G,GAAA,GAGAR,KAAAksE,aAAAhuE,IAAAsC,GAAAwmE,QAAAmF,IAGA,GAkCAzsE,OAAAc,EAAA2rE,GACA,MAAAC,EAAApsE,KAAAksE,aAAAhuE,IAAAsC,QAEAmB,IAAAyqE,IACA5rE,EAAA2+B,GAAA,SAAA3+B,EAAA2+B,GAAA,oBAEAn/B,KAAAksE,aAAA9kE,IAAA5G,GAAA,GAGA4rE,EAAAE,OAAAH,IAaAzsE,8BAAAc,GACA,MAAA2rE,GACAvuE,MAAA,EACAkJ,cACAk5B,WACA58B,WAGA0D,EAAAtG,EAAAowC,mBAEA,UAAAvrC,KAAAyB,EAEA,SAAAzB,GAAA,SAAAA,GAIA8mE,EAAArlE,WAAApF,KAAA2D,GAGA,MAAA26B,EAAAx/B,EAAAggC,gBAEA,UAAAoB,KAAA5B,EACAmsC,EAAAnsC,QAAAt+B,KAAAkgC,GAGA,MAAAx+B,EAAA5C,EAAAi3C,gBAEA,UAAAj0C,KAAAJ,EACA+oE,EAAA/oE,OAAA1B,KAAA8B,GAGA,OAAA2oE,EAcAzsE,kBAAAoE,EAAA4V,GAKA,GAJAA,IACAA,EAAA,IAAAuyD,IAGAnoE,EAAAq7B,GAAA,QAGA,OAFAzlB,EAAAvW,IAAAW,GAEA4V,EAIA5V,EAAAq7B,GAAA,YACAzlB,EAAAvW,IAAAW,EAAAmoE,GAAAM,uBAAAzoE,IAGAA,EAAAq7B,GAAA,qBACAzlB,EAAAvW,IAAAW,GAGA,UAAA4f,KAAA5f,EAAAm+B,cACAvoB,EAAAuyD,GAAAO,WAAA9oD,EAAAhK,GAGA,OAAAA,SAUM2yD,GAIN3sE,cAOAM,KAAAysE,gBAAA,KAQAzsE,KAAAksE,cACAplE,WAAA,IAAAL,IACArD,OAAA,IAAAqD,IACAu5B,QAAA,IAAAv5B,KAyBA/G,IAAAysE,GACAA,EAAAvuE,OACAoC,KAAAysE,iBAAA,GAGA,UAAAlqE,KAAAvC,KAAAksE,aACA3pE,KAAA4pE,GACAnsE,KAAAwqE,KAAAjoE,EAAA4pE,EAAA5pE,IAyBA7C,KAAAysE,GAEA,GAAAA,EAAAvuE,OAAAoC,KAAAysE,gBACA,OAAAzsE,KAAAysE,gBAGA,UAAAlqE,KAAAvC,KAAAksE,aACA,GAAA3pE,KAAA4pE,EAAA,CACA,MAAA7tE,EAAA0B,KAAA0sE,MAAAnqE,EAAA4pE,EAAA5pE,IAEA,QAAAjE,EACA,OAAAA,EAMA,SAqBAoB,QAAAysE,GACAA,EAAAvuE,OACAoC,KAAAysE,iBAAA,GAGA,UAAAlqE,KAAAvC,KAAAksE,aACA3pE,KAAA4pE,GACAnsE,KAAA2sE,SAAApqE,EAAA4pE,EAAA5pE,IAsBA7C,OAAAysE,GACAA,EAAAvuE,OACAoC,KAAAysE,iBAAA,GAGA,UAAAlqE,KAAAvC,KAAAksE,aACA3pE,KAAA4pE,GACAnsE,KAAA4sE,QAAArqE,EAAA4pE,EAAA5pE,IAeA7C,KAAA6C,EAAA4P,GACA,MAAAiwB,EAAgB3U,GAAOtb,SACvBg6D,EAAAnsE,KAAAksE,aAAA3pE,GAEA,UAAA3E,KAAAwkC,EAAA,CACA,kBAAA7/B,IAAA,UAAA3E,GAAA,UAAAA,GAeA,UAAc2xB,EAAA,EAAa,sFAG3B48C,EAAA/kE,IAAAxJ,GAAA,IAaA8B,MAAA6C,EAAA4P,GACA,MAAAiwB,EAAgB3U,GAAOtb,SACvBg6D,EAAAnsE,KAAAksE,aAAA3pE,GAEA,UAAA3E,KAAAwkC,EACA,kBAAA7/B,GAAA,UAAA3E,GAAA,UAAAA,EASI,CACJ,MAAAU,EAAA6tE,EAAAjuE,IAAAN,GAEA,QAAA+D,IAAArD,EACA,YAGA,IAAAA,EACA,aAjBA,CACA,MAAAuuE,EAAA,SAAAjvE,EAAA,mBAGAU,EAAA0B,KAAA0sE,MAAAG,MAAA7sE,KAAAksE,aAAAW,GAAA94D,SAEA,QAAAzV,EACA,OAAAA,EAeA,SAUAoB,SAAA6C,EAAA4P,GACA,MAAAiwB,EAAgB3U,GAAOtb,SACvBg6D,EAAAnsE,KAAAksE,aAAA3pE,GAEA,UAAA3E,KAAAwkC,EACA,kBAAA7/B,GAAA,UAAA3E,GAAA,UAAAA,EAMAuuE,EAAA/kE,IAAAxJ,GAAA,OANA,CACA,MAAAivE,EAAA,SAAAjvE,EAAA,mBAGAoC,KAAA2sE,SAAAE,MAAA7sE,KAAAksE,aAAAW,GAAA94D,UAcArU,QAAA6C,EAAA4P,GACA,MAAAiwB,EAAgB3U,GAAOtb,SACvBg6D,EAAAnsE,KAAAksE,aAAA3pE,GAEA,UAAA3E,KAAAwkC,EACA,kBAAA7/B,GAAA,UAAA3E,GAAA,UAAAA,EAKI,EAGJ,IAFAuuE,EAAAjuE,IAAAN,IAGAuuE,EAAA/kE,IAAAxJ,GAAA,OATA,CACA,MAAAivE,EAAA,SAAAjvE,EAAA,mBAGAoC,KAAA4sE,QAAAC,MAAA7sE,KAAAksE,aAAAW,GAAA94D,iBC5iBqB+4D,GAIrBptE,cACAM,KAAA+sE,sBAEA/sE,KAAAgtE,SAAA,cACAhtE,KAAAgtE,SAAA,kBAEAhtE,KAAA6wB,GAAA,kBAAAC,EAAA1L,KACAA,EAAA,OAAA6nD,GAAA7nD,EAAA,MACMX,SAAA,YAENzkB,KAAA6wB,GAAA,cAAAC,EAAA1L,KACAA,EAAA,OAAA6nD,GAAA7nD,EAAA,IACAA,EAAA,GAAAplB,KAAAktE,cAAA9nD,EAAA,MACMX,SAAA,YAaN/kB,SAAAytE,EAAAC,GACA,GAAAptE,KAAA+sE,mBAAAI,GAEA,UAAa59C,EAAA,EAAa,8FAC1B49C,aAIAntE,KAAA+sE,mBAAAI,IACApvE,OAAAiR,UAAoBo+D,IAGpBptE,KAAAqtE,cA2BA3tE,OAAAytE,EAAAC,GACA,IAAAptE,KAAA+sE,mBAAAI,GAEA,UAAa59C,EAAA,EAAa,0FAC1B49C,aAIAntE,KAAA+sE,mBAAAI,GAAAzrE,KAAA3D,OAAAiR,UAA6Do+D,IAE7DptE,KAAAqtE,cAQA3tE,iBAKA,OAJAM,KAAAstE,sBACAttE,KAAAutE,WAGAvtE,KAAAstE,qBASA5tE,cAAAyS,GACA,IAAAg7D,EAYA,OATAA,EADA,iBAAAh7D,EACAA,EACGA,EAAAgtB,KAAAhtB,EAAAgtB,GAAA,SAAAhtB,EAAAgtB,GAAA,cACH,QAIAhtB,EAAAvU,KAGAoC,KAAAwtE,iBAAAL,GAYAztE,aAAAyS,GACA,QAAAnS,KAAAktE,cAAA/6D,GAeAzS,QAAAyS,GACA,MAAAs7D,EAAAztE,KAAAktE,cAAA/6D,GAEA,SAAAs7D,MAAA7K,SAeAljE,QAAAyS,GACA,MAAAs7D,EAAAztE,KAAAktE,cAAA/6D,GAEA,QAAAs7D,MAIAA,EAAAC,UAAAD,EAAA5H,UAeAnmE,SAAAyS,GACA,MAAAs7D,EAAAztE,KAAAktE,cAAA/6D,GAEA,SAAAs7D,MAAA5H,UAsBAnmE,WAAAiuE,EAAAF,GAEA,QAAAA,GAIAztE,KAAA4tE,mBAAAH,EAAAE,GAkBAjuE,eAAAiuE,EAAAE,GACA,MAAAJ,EAAAztE,KAAAktE,cAAAS,EAAAzkC,MAEA,QAAAukC,GAIAA,EAAAK,gBAAAroB,SAAAooB,GAmBAnuE,WAAAquE,EAAAC,EAAA,MACA,GAAAD,aAAwCxT,GAAQ,CAChD,MAAAv0B,EAAA+nC,EAAA/nC,WACAD,EAAAgoC,EAAAhoC,UAEA,KAAAC,aAAiC+zB,IAMjC,UAAcxqC,EAAA,EAAa,gGAG3B,KAAAwW,aAAgCg0B,IAMhC,UAAcxqC,EAAA,EAAa,8FAG3B,OAAAvvB,KAAAiuE,WAAAjoC,EAAAD,GAGA,UAAAriB,KAAAsqD,EAAA/rC,cACA,IAAAjiC,KAAAkuE,WAAAH,EAAArqD,GACA,SAIA,SA0CAhkB,cAAAwlB,GACAllB,KAAA6wB,GAAA,cAAAC,GAAAsb,EAAA+hC,MAIA,IAAAA,EACA,OAGA,MAAAC,EAAAlpD,EAAAknB,EAAA+hC,GAEA,kBAAAC,IACAt9C,EAAA7M,OACA6M,EAAA3J,OAAAinD,KAEM3pD,SAAA,SA0CN/kB,kBAAAwlB,GACAllB,KAAA6wB,GAAA,kBAAAC,GAAAsb,EAAAyhC,MACA,MAAAO,EAAAlpD,EAAAknB,EAAAyhC,GAEA,kBAAAO,IACAt9C,EAAA7M,OACA6M,EAAA3J,OAAAinD,KAEM3pD,SAAA,SAaN/kB,gBAAA2uE,GACA,IAAA7tE,EAEA,GAAA6tE,aAA6C9T,GAC7C/5D,EAAA6tE,EAAA19D,WACG,CAMHnQ,GALA6tE,aAAwDhS,IACxDgS,GACAxqE,MAAAC,KAAAuqE,EAAA1kC,cAIAj9B,OAAA,CAAAlM,EAAAqoC,KACA,MAAAylC,EAAAzlC,EAAAnB,oBAEA,OAAAlnC,EAIAA,EAAAknC,kBAAA4mC,GAA6DlwC,aAAA,IAH7DkwC,GAIK,MAGL,MAAAtuE,KAAA0tE,QAAAltE,IACAA,EAAAmQ,QACAnQ,IAAAmQ,OAMA,OAAAnQ,EAeAd,0BAAAikC,EAAAt+B,GACA,GAAAs+B,EAAAgD,YAAA,CACA,MACAgnC,MADAhqC,EAAAsH,mBAEAzM,eACA,IAAQ26B,GAAI,GAAAx1B,EAAAqS,kBAIZ,OAAAh2C,KAAAuuE,eAAAZ,EAAAtoE,GACG,CACH,MAAAiiC,EAAA3D,EAAAgG,YAGA,UAAAd,KAAAvB,EACA,UAAAhpC,KAAAuqC,EACA,GAAA7oC,KAAAuuE,eAAAjwE,EAAA6T,KAAA9M,GAEA,SAOA,SAUA3F,gBAAA4nC,EAAAjiC,GACAiiC,EAy6BA,UAAAA,GACA,UAAAuB,KAAAvB,QACAuB,EAAA2lC,uBA36BAC,CAAAnnC,GAEA,UAAAuB,KAAAvB,QACAtnC,KAAA0uE,wBAAA7lC,EAAAxjC,GAeA3F,yBAAAmpC,EAAAxjC,GACA,IAAA2W,EAAA6sB,EAAA7sB,MACAC,EAAA4sB,EAAA7sB,MAEA,UAAA7J,KAAA02B,EAAA24B,UAAuCh9B,SAAA,IACvCryB,EAAAgtB,GAAA,mBACAn/B,KAAA0uE,wBAAyCrS,GAAKhyB,UAAAl4B,GAAA9M,IAG9CrF,KAAAuuE,eAAAp8D,EAAA9M,KACA2W,EAAA8pB,QAAA7pB,WACA,IAAeogD,GAAKrgD,EAAAC,IAGpBD,EAAYu+C,GAAQl1B,aAAAlzB,IAGpB8J,EAASs+C,GAAQl1B,aAAAlzB,GAGjB6J,EAAA8pB,QAAA7pB,WACA,IAAaogD,GAAKrgD,EAAAC,IAwBlBvc,yBAAAkR,EAAAwzB,EAAA,QAEA,GAAApkC,KAAAkuE,WAAAt9D,EAAA,SACA,WAAcyrD,GAAKzrD,GAGnB,IAAA+9D,EAAAC,EAEA,QAAAxqC,GAAA,YAAAA,IACAuqC,EAAA,IAAwBrU,IAAan2B,cAAAvzB,EAAAwzB,UAAA,cAGrC,QAAAA,GAAA,WAAAA,IACAwqC,EAAA,IAAuBtU,IAAan2B,cAAAvzB,KAGpC,UAAAhR,KAqzBA,UAAAwqC,EAAAykC,GACA,IAAAhqC,GAAA,EAEA,MAAAA,GAAA,CAGA,GAFAA,GAAA,EAEAuF,EAAA,CACA,MAAA0kC,EAAA1kC,EAAArF,OAEA+pC,EAAAjqC,OACAA,GAAA,QAEAlkC,OAAAypC,EACA9rC,MAAAwwE,EAAAxwE,QAKA,GAAAuwE,EAAA,CACA,MAAAC,EAAAD,EAAA9pC,OAEA+pC,EAAAjqC,OACAA,GAAA,QAEAlkC,OAAAkuE,EACAvwE,MAAAwwE,EAAAxwE,UA90BAywE,CAAAJ,EAAAC,GAAA,CACA,MAAArsE,EAAA3C,EAAAe,QAAAguE,EAAA,4BACArwE,EAAAsB,EAAAtB,MAEA,GAAAA,EAAAiE,SAAAvC,KAAA6lE,SAAAvnE,EAAA6T,MACA,OAAWkqD,GAAK/xB,UAAAhsC,EAAA6T,MAGhB,GAAAnS,KAAAkuE,WAAA5vE,EAAAunC,aAAA,SACA,WAAew2B,GAAK/9D,EAAAunC,cAIpB,YAaAnmC,kBAAA4B,EAAAsP,GACA,IAAAD,EAAAC,EAAAD,OAEA,KAAAA,GAAA,CACA,GAAA3Q,KAAAkuE,WAAAv9D,EAAArP,GACA,OAAAqP,EAIA,GAAA3Q,KAAA0tE,QAAA/8D,GACA,YAGAA,WAGA,YASAjR,2BAAA2iC,EAAAkL,GACA,UAAAjsC,KAAA+gC,EAAA,CACA,UAAAh9B,KAAA/D,EAAAsvC,mBACA5wC,KAAAuuE,eAAAjtE,EAAA+D,IACAkoC,EAAAvkC,gBAAA3D,EAAA/D,GAIAA,EAAA69B,GAAA,YACAn/B,KAAAgvE,2BAAA1tE,EAAA2gC,cAAAsL,IAWA7tC,cAAAiuE,GACA,WAAAV,GAAAU,GAMAjuE,cACAM,KAAAstE,qBAAA,KAMA5tE,WACA,MAAAuvE,KACAC,EAAAlvE,KAAA+sE,mBACAoC,EAAApxE,OAAAgW,KAAAm7D,GAEA,UAAA/B,KAAAgC,EACAF,EAAA9B,GAAAiC,GAAAF,EAAA/B,MAGA,UAAAA,KAAAgC,EACAE,GAAAJ,EAAA9B,GAGA,UAAAA,KAAAgC,EACAG,GAAAL,EAAA9B,GAGA,UAAAA,KAAAgC,EACAI,GAAAN,EAAA9B,GACAqC,GAAAP,EAAA9B,GAGA,UAAAA,KAAAgC,EACAM,GAAAR,EAAA9B,GACAuC,GAAAT,EAAA9B,GAGAntE,KAAAstE,qBAAA2B,EASAvvE,mBAAA+tE,EAAAE,EAAAgC,EAAAhC,EAAAvrE,OAAA,GACA,MAAAwtE,EAAAjC,EAAAkC,QAAAF,GAEA,GAAAlC,EAAAqC,QAAArqB,SAAAmqB,EAAAhyE,MAAA,CACA,MAAA+xE,EACA,SACI,CACJ,MAAAI,EAAA/vE,KAAAktE,cAAA0C,GAEA,OAAA5vE,KAAA4tE,mBAAAmC,EAAApC,EAAAgC,EAAA,IAGA,UAKAt9C,GAAKy6C,GAAQ/7C,UAyRNk8C,GAMPvtE,YAAAiuE,GACA,GAAAA,aAAAV,GACA,OAAAU,EAGA,iBAAAA,EACAA,MACG9pE,MAAAuJ,QAAAugE,KAGHA,IAAAnvC,cAAoCJ,aAAA,KAGpCuvC,EAAA,qBAAAA,EAAA,IAAAA,EAAA,GAAAxuC,GAAA,qBACAwuC,EAAAxnC,QAGAnmC,KAAAurC,OAAAoiC,EAAA5/D,IAAAiiE,IAQA5tE,aACA,OAAApC,KAAAurC,OAAAnpC,OAQA8mC,WACA,OAAAlpC,KAAAurC,OAAAvrC,KAAAurC,OAAAnpC,OAAA,GAUA1C,CAAAtB,OAAAqa,YACA,OAAAzY,KAAAurC,OAAAntC,OAAAqa,YA4BA/Y,KAAAyS,GACA,MAAAi6B,EAAA,IAAA6gC,IAAA96D,IAIA,OAFAi6B,EAAAb,WAAAvrC,KAAAurC,UAAAa,EAAAb,QAEAa,EAQA1sC,QAAAkC,GACA,OAAA5B,KAAAurC,OAAA3pC,GAQAlC,kBACAM,KAAAurC,OAAAx9B,IAAAoE,KAAAvU,MAgBA8B,SAAAuwE,GACA,OAAApsE,MAAAC,KAAA9D,KAAAkwE,YAAA5gE,KAAA,KAAA6gE,SAAAF,IAkGA,SAAAb,GAAAgB,EAAAjD,GACA,MAAAkD,GACAzyE,KAAAuvE,EAEA2C,WACAQ,kBACAC,cAEAzC,mBACA0C,qBAEAC,qBAgBA,OAkFA,SAAAL,EAAAC,GACA,UAAAK,KAAAN,EAAA,CACA,MAAAO,EAAA5yE,OAAAgW,KAAA28D,GAAA96D,OAAAhY,KAAAmmE,WAAA,OAEA,UAAAnmE,KAAA+yE,EACAN,EAAAzyE,GAAA8yE,EAAA9yE,IApGAgzE,CAAAR,EAAAC,GAEAQ,GAAAT,EAAAC,EAAA,WACAQ,GAAAT,EAAAC,EAAA,kBACAQ,GAAAT,EAAAC,EAAA,cAEAQ,GAAAT,EAAAC,EAAA,mBACAQ,GAAAT,EAAAC,EAAA,qBAEAQ,GAAAT,EAAAC,EAAA,oBA0GA,SAAAD,EAAAC,GACA,UAAAK,KAAAN,EAAA,CACA,MAAAU,EAAAJ,EAAAK,eAEAD,IACAT,EAAAC,eAAA5uE,KAAAovE,GACAT,EAAAE,WAAA7uE,KAAAovE,GACAT,EAAAG,kBAAA9uE,KAAAovE,GACAT,EAAAI,iBAAA/uE,KAAAovE,KAhHAE,CAAAZ,EAAAC,GAEAA,EAGA,SAAAhB,GAAAJ,EAAA9B,GACA,UAAA8D,KAAAhC,EAAA9B,GAAAmD,eAEA,GAAArB,EAAAgC,GAAA,CACAC,GAAAjC,EAAAgC,GAEApvE,QAAAsvE,IACAA,EAAArB,QAAApuE,KAAAyrE,YAKA8B,EAAA9B,GAAAmD,eAGA,SAAAhB,GAAAL,EAAA9B,GACA,UAAAiE,KAAAnC,EAAA9B,GAAAoD,WAAA,CACA,MAAAO,EAAA7B,EAAAmC,GAGA,GAAAN,EAAA,CACA,MAAAO,EAAAP,EAAAhB,QAEAb,EAAA9B,GAAA2C,QAAApuE,QAAA2vE,WAIApC,EAAA9B,GAAAoD,WAGA,SAAAhB,GAAAN,EAAA9B,GACA,UAAAmE,KAAArC,EAAA9B,GAAAqD,kBAAA,CACA,MAAAM,EAAA7B,EAAAqC,GAEA,GAAAR,EAAA,CACA,MAAAS,EAAAT,EAAAhD,gBAEAmB,EAAA9B,GAAAW,gBAAApsE,QAAA6vE,WAIAtC,EAAA9B,GAAAqD,kBAGA,SAAAhB,GAAAP,EAAA9B,GACA,MAAAh7D,EAAA88D,EAAA9B,GAEA,UAAAqE,KAAAr/D,EAAAs+D,iBAAA,CACA,MAAAK,EAAA7B,EAAAuC,GAEA,GAAAV,EAAA,CACA,MAAAH,EAAA5yE,OAAAgW,KAAA+8D,GAAAl7D,OAAAhY,KAAAmmE,WAAA,OAEA,UAAAnmE,KAAA+yE,EACA/yE,KAAAuU,IACAA,EAAAvU,GAAAkzE,EAAAlzE,YAMAuU,EAAAs+D,iBAKA,SAAAhB,GAAAR,EAAA9B,GACA,MAAAkD,EAAApB,EAAA9B,GACAsE,EAAApB,EAAAP,QAAAl6D,OAAA87D,GAAAzC,EAAAyC,IAEArB,EAAAP,QAAAjsE,MAAAC,KAAA,IAAAd,IAAAyuE,IAGA,SAAA/B,GAAAT,EAAA9B,GACA,MAAAkD,EAAApB,EAAA9B,GAEAkD,EAAAvC,gBAAAjqE,MAAAC,KAAA,IAAAd,IAAAqtE,EAAAvC,kBAaA,SAAA+C,GAAAT,EAAAC,EAAA1gD,GACA,UAAA+gD,KAAAN,EACA,iBAAAM,EAAA/gD,GACA0gD,EAAA1gD,GAAAjuB,KAAAgvE,EAAA/gD,IACG9rB,MAAAuJ,QAAAsjE,EAAA/gD,KACH0gD,EAAA1gD,GAAAjuB,QAAAgvE,EAAA/gD,IAkBA,SAAAuhD,GAAAjC,EAAA9B,GACA,MAAAkD,EAAApB,EAAA9B,GAEA,OAGA,SAAAn5D,GACA,OAAAjW,OAAAgW,KAAAC,GAAAjG,IAAAnP,GAAAoV,EAAApV,IAJA+yE,CAAA1C,GAAAr5D,OAAA63D,KAAAqC,QAAArqB,SAAA4qB,EAAAzyE,OAOA,SAAAoyE,GAAA4B,GACA,uBAAAA,GAEAh0E,KAAAg0E,EAEAlyE,sBAEAA,mBAKA9B,KAAAg0E,EAAAzyC,GAAA,WAAAyyC,EAAAh0E,KAAA,QAEA8B,0BACAkyE,EAAAhhC,oBAGA35B,aAAArY,GACAgzE,EAAA36D,aAAArY,UChyCqBizE,GAQrBnyE,YAAAmgE,MAUA7/D,KAAA8xE,eAAA,IAAA9uE,IAUAhD,KAAA+xE,aAAA,KAOA/xE,KAAA6/D,cAAA9hE,OAAAiR,UAAwC6wD,GAIxC7/D,KAAA6/D,cAAAmS,YAAAhyE,KAAAiyE,aAAApzE,KAAAmB,MACAA,KAAA6/D,cAAAqS,gBAAAlyE,KAAAmyE,iBAAAtzE,KAAAmB,MACAA,KAAA6/D,cAAAuS,qBAAApyE,KAAAqyE,sBAAAxzE,KAAAmB,MAiBAN,QAAA4yE,EAAA/kC,EAAAogC,GAAA,UACA3tE,KAAA4nB,KAAA,cAAA0qD,GAIAtyE,KAAA+xE,aAwPA,SAAAQ,EAAAhlC,GACA,IAAA38B,EAEA,UAAAuB,KAAA,IAAyB86D,GAAasF,GAAA,CACtC,MAAAzrE,KAEA,UAAAlI,KAAAuT,EAAAy+B,mBACA9pC,EAAAlI,GAAAuT,EAAA8E,aAAArY,GAGA,MAAAs2C,EAAA3H,EAAAhqC,cAAA4O,EAAAvU,KAAAkJ,GAEA8J,GACA28B,EAAAilC,OAAAt9B,EAAAtkC,GAGAA,EAAa2pD,GAAaj2B,UAAA4Q,EAAA,GAG1B,OAAAtkC,EA3QA6hE,CAAA9E,EAAApgC,GAIAvtC,KAAA6/D,cAAAtyB,SAGAvtC,KAAA6/D,cAAAc,WAAkCsL,GAAcO,WAAA8F,GAGhDtyE,KAAA6/D,cAAA6S,SAGA,MAAArU,WAASA,GAAar+D,KAAAiyE,aAAAK,EAAAtyE,KAAA+xE,cAGtBY,EAAAplC,EAAAx+B,yBAGA,GAAAsvD,EAAA,CAEAr+D,KAAA4yE,uBAGA,UAAAzgE,KAAAtO,MAAAC,KAAA9D,KAAA+xE,aAAAphE,OAAAsxB,eACAsL,EAAAilC,OAAArgE,EAAAwgE,GAIAA,EAAA3R,QAuLA,SAAA6R,EAAAtlC,GACA,MAAAulC,EAAA,IAAA9vE,IACAg+D,EAAA,IAAAv6D,IAGAoiC,EAAewzB,GAAUhyB,UAAAwoC,GAAArR,WAGzB,UAAArvD,KAAA02B,EAEA,WAAA12B,EAAAvU,MACAk1E,EAAA3vE,IAAAgP,GAKA,UAAA4gE,KAAAD,EAAA,CACA,MAAAvR,EAAAwR,EAAA97D,aAAA,aACA+7D,EAAAzlC,EAAA0lC,qBAAAF,GAGA/R,EAAAv/D,IAAA8/D,GAIAP,EAAA9iE,IAAAqjE,GAAAtlD,IAAA+2D,EAAA9tC,QAHA87B,EAAA55D,IAAAm6D,EAAA,IAAgClF,GAAU2W,EAAA9tC,UAO1CqI,EAAAn9B,OAAA2iE,GAGA,OAAA/R,EAvNAkS,CAAAP,EAAAplC,GAcA,OAVAvtC,KAAA+xE,aAAA,KAGA/xE,KAAA8xE,eAAAr4D,QAGAzZ,KAAA6/D,cAAAtyB,OAAA,KACAvtC,KAAA6/D,cAAA6S,MAAA,KAGAC,EAOAjzE,aAAA4yE,EAAAa,GACA,MAAAvzE,EAAA7B,OAAAiR,QAA+BsjE,WAAAa,cAAA9U,WAAA,OAW/B,GATAiU,EAAAnzC,GAAA,WACAn/B,KAAA4nB,KAAA,WAAA0qD,EAAA10E,KAAAgC,EAAAI,KAAA6/D,eACGyS,EAAAnzC,GAAA,QACHn/B,KAAA4nB,KAAA,OAAAhoB,EAAAI,KAAA6/D,eAEA7/D,KAAA4nB,KAAA,mBAAAhoB,EAAAI,KAAA6/D,eAIAjgE,EAAAy+D,cAAAz+D,EAAAy+D,sBAAwDhC,IAQxD,UAAa9sC,EAAA,EAAa,yFAG1B,OAAU8uC,WAAAz+D,EAAAy+D,WAAA8U,YAAAvzE,EAAAuzE,aAOVzzE,iBAAA4yE,EAAAa,GACA,MAAA9U,EAAA,IAAyBhC,GAAU8W,GACnC,IAAAC,EAAAD,EAEA,UAAAl1B,KAAAp6C,MAAAC,KAAAwuE,EAAArwC,eAAA,CACA,MAAAr4B,EAAA5J,KAAAiyE,aAAAh0B,EAAAm1B,GAEAxpE,EAAAy0D,sBAAqChC,KACrCgC,EAAApiD,IAAArS,EAAAy0D,WAAApiD,IACAm3D,EAAAxpE,EAAAupE,aAIA,OAAU9U,aAAA8U,YAAAC,GAOV1zE,sBAAA4B,EAAA6xE,GAEA,MAAAE,EAAArzE,KAAA6/D,cAAA8C,OAAA2Q,kBAAAhyE,EAAA6xE,GAGA,IAAAE,EACA,YAIA,GAAAA,IAAAF,EAAAxiE,OACA,OAAWC,SAAAuiE,GAIX,GAAAnzE,KAAA+xE,aAAAphE,OAAA6tB,eAAAinB,SAAA4tB,GACA,YAIA,MAAAE,EAAAvzE,KAAA6/D,cAAAtyB,OAAAr2B,MAAAi8D,EAAAE,GAOA,UAAAziE,KAAA2iE,EAAA1qC,MAAA2qC,eACA5iE,EAAAk1B,QAAAytC,EAAA3iE,WACA5Q,KAAA8xE,eAAA3uE,IAAAyN,EAAAD,QAIA,OACAC,SAAA2iE,EAAA3iE,SACA6iE,aAAAF,EAAA1qC,MAAA5sB,IAAAtL,QAYAjR,uBACA,IAAAggB,GAAA,EAEA,UAAAlf,KAAAR,KAAA8xE,eACAtxE,EAAAihC,UACAzhC,KAAA6/D,cAAAtyB,OAAAn9B,OAAA5P,GACAR,KAAA8xE,eAAAriE,OAAAjP,GACAkf,GAAA,GAIAA,GACA1f,KAAA4yE,wBC1QO,SAAAc,GAAApN,GAGP,MAAA/gE,EAkQA,SAAA+gE,GACA,MAAAzkC,EAAA,IAAqBhC,GAAOymC,EAAAx1B,MAE5B,OAAAhgB,EAAAlxB,EAAAigE,KAEA,MAAA1/D,EAAA0hC,EAAA1hC,MAAAP,EAAA0yE,UAGA,IAAAnyE,EACA,OAIAA,QAAAvC,MAAA,EAGA,MAAAqgE,EA+DA,SAAAyE,EAAAlpC,EAAA+T,GACA,OAAAm1B,aAAAlrD,SACAkrD,EAAAlpC,EAAA+T,GAEAA,EAAAhqC,cAAAm/D,GAnEAiR,CAAArN,EAAA5D,MAAA9iE,EAAA0yE,SAAAzS,EAAAtyB,QAGA,IAAA0wB,EACA,OAIA,IAAA4B,EAAAc,WAAA3/C,KAAAphB,EAAA0yE,SAAAnyE,SACA,OAMA,MAAAozE,EAAA1T,EAAAuS,qBAAAnU,EAAAr+D,EAAAuzE,aAGA,IAAAI,EACA,OAIA1T,EAAAtyB,OAAAt9B,OAAAguD,EAAAsV,EAAA3iE,UAGA,MAAAgjE,EAAA/T,EAAAqS,gBAAAtyE,EAAA0yE,SAAAzS,EAAAtyB,OAAAsmC,iBAAA5V,EAAA,IAGA4B,EAAAc,WAAAqG,QAAApnE,EAAA0yE,SAAAnyE,SAGAP,EAAAy+D,WAAA,IAAwBhC,GAExBwD,EAAAtyB,OAAA0lC,qBAAAhV,GAKA4B,EAAAtyB,OAAAumC,oBAAAF,EAAAT,YAAAxiE,SAQA4iE,EAAAE,aACA7zE,EAAAuzE,YAAAtT,EAAAtyB,OAAAsmC,iBAAAN,EAAAE,aAAA,GAIA7zE,EAAAuzE,YAAAvzE,EAAAy+D,WAAApiD,KAtUA83D,CAFAzN,EAAUF,GAASE,IAInB0N,EAAAC,GAAA3N,GACA5rD,EAAAs5D,EAAA,WAAAA,EAAA,UAEA,OAAAlU,IACAA,EAAAjvC,GAAAnW,EAAAnV,GAAwCkf,SAAA6hD,EAAAG,mBAAA,YA6EjC,SAAAyN,GAAA5N,GAGP6N,GAFA7N,EAAUF,GAASE,IAInB,MAAA/gE,EAAA6uE,GAAA9N,GAAA,GAEA0N,EAAAC,GAAA3N,GACA5rD,EAAAs5D,EAAA,WAAAA,EAAA,UAEA,OAAAlU,IACAA,EAAAjvC,GAAAnW,EAAAnV,GAAwCkf,SAAA6hD,EAAAG,mBAAA,YAiFjC,SAAA4N,GAAA/N,GAGP,IAAAgO,EAAA,MAEA,iBAJAhO,EAAUF,GAASE,IAInBx1B,MAAAw1B,EAAAx1B,KAAAlyC,OACA01E,EA0KA,SAAAhO,GACA,iBAAAA,EAAAx1B,OACAw1B,EAAAx1B,MAAiBlyC,IAAA0nE,EAAAx1B,OAGjB,MAAAlyC,EAAA0nE,EAAAx1B,KAAAlyC,IACA,IAAA21E,EAEA,YAAA31E,GAAA,SAAAA,EAAA,CACA,MAAA41E,EAAA,SAAA51E,EAAA,mBAEA21E,GACA70E,CAAA80E,GAAAlO,EAAAx1B,KAAAxyC,WAEE,CACF,MAAAA,OAAA,IAAAgoE,EAAAx1B,KAAAxyC,MAAA,UAAAgoE,EAAAx1B,KAAAxyC,MAEAi2E,GACAztE,YACApH,CAAAd,GAAAN,IAKAgoE,EAAAx1B,KAAAlzC,OACA22E,EAAA32E,KAAA0oE,EAAAx1B,KAAAlzC,MAKA,OAFA0oE,EAAAx1B,KAAAyjC,EAEA31E,EAxMA61E,CAAAnO,IAGA6N,GAAA7N,EAAAgO,GAEA,MAAA/uE,EAAA6uE,GAAA9N,GAAA,GAEA,OAAAxG,IACAA,EAAAjvC,GAAA,UAAAtrB,GAAwCkf,SAAA6hD,EAAAG,mBAAA,SAqDxC,SAAAwN,GAAA3N,GACA,uBAAAA,EAAAx1B,KACAw1B,EAAAx1B,KAGA,iBAAAw1B,EAAAx1B,MAAA,iBAAAw1B,EAAAx1B,KAAAlzC,KACA0oE,EAAAx1B,KAAAlzC,KAGA,KA4IA,SAAAu2E,GAAA7N,EAAAoO,EAAA,MACA,MAAAC,EAAA,OAAAD,GAAA3+B,MAAA9+B,aAAAy9D,IAEA91E,EAAA,iBAAA0nE,EAAA5D,MAAA4D,EAAA5D,MAAA4D,EAAA5D,MAAA9jE,IACAN,EAAA,iBAAAgoE,EAAA5D,YAAA,IAAA4D,EAAA5D,MAAApkE,MAAAq2E,EAAArO,EAAA5D,MAAApkE,MAEAgoE,EAAA5D,OAAiB9jE,MAAAN,SAUjB,SAAA81E,GAAA9N,EAAA9hC,GACA,MAAA3C,EAAA,IAAqBhC,GAAOymC,EAAAx1B,MAE5B,OAAAhgB,EAAAlxB,EAAAigE,KACA,MAAA1/D,EAAA0hC,EAAA1hC,MAAAP,EAAA0yE,UAGA,IAAAnyE,EACA,OAGA,MAAAy0E,EAAAtO,EAAA5D,MAAA9jE,IACA+nE,EAAA,mBAAAL,EAAA5D,MAAApkE,MAAAgoE,EAAA5D,MAAApkE,MAAAsB,EAAA0yE,UAAAhM,EAAA5D,MAAApkE,MAGA,OAAAqoE,KAoCA,SAAAL,GACA,oBAAAA,EAAAx1B,OAAAmjC,GAAA3N,GACA,SAGA,OAAAA,EAAAx1B,KAAA9Q,UAAAsmC,EAAAx1B,KAAAhqC,aAAAw/D,EAAAx1B,KAAA1tC,OArCAyxE,CAAAvO,UAIAnmE,QAAAvC,KAHAuC,QAAAvC,MAAA,EAOAiiE,EAAAc,WAAA3/C,KAAAphB,EAAA0yE,SAAAnyE,WAMAP,EAAAy+D,aAEAz+D,EAAA7B,OAAAiR,OAAApP,EAAAigE,EAAAqS,gBAAAtyE,EAAA0yE,SAAA1yE,EAAAuzE,eAiCA,SAAA9U,EAAAyW,EAAAtwC,EAAAq7B,GACA,IAAAj2D,GAAA,EAGA,UAAAtI,KAAAuC,MAAAC,KAAAu6D,EAAAmD,UAAuDh9B,aACvDq7B,EAAA8C,OAAA4L,eAAAjtE,EAAAwzE,EAAAl2E,OACAihE,EAAAtyB,OAAAtkC,aAAA6rE,EAAAl2E,IAAAk2E,EAAAx2E,MAAAgD,GAEAsI,GAAA,GAIA,OAAAA,EAzCAmrE,CAAAn1E,EAAAy+D,YAA6Dz/D,IAAAg2E,EAAAt2E,MAAAqoE,GAAmCniC,EAAAq7B,IAGhGA,EAAAc,WAAAqG,QAAApnE,EAAA0yE,SAAAnyE,YD5IAkyB,GAAKw/C,GAAkB5sD,SEzUF+vD,GAQrBt1E,YAAAgjE,EAAAuS,GAOAj1E,KAAA0iE,QAQA1iE,KAAA2Z,UAAAs7D,EAUAj1E,KAAAu+D,OAAA,IAAoBlB,GAQpBr9D,KAAAioE,mBAAA,IAAgCrI,IAChCrB,OAAAv+D,KAAAu+D,SAEAv+D,KAAAioE,mBAAAp3C,GAAA,eZ0aA,CAAAC,EAAAlxB,EAAAigE,KACA,IAAAA,EAAAc,WAAAqG,QAAApnE,EAAAuS,KAAA,UACA,OAGA,MAAA80D,EAAApH,EAAAtyB,OACAqE,EAAAiuB,EAAAtB,OAAAD,eAAA1+D,EAAAipC,MAAA7sB,OACA4iC,EAAAqoB,EAAAsB,WAAA3oE,EAAAuS,KAAAvS,MAEAqnE,EAAAh3D,OAAA2hC,EAAAgN,KYnb6Dn6B,SAAA,WAQ7DzkB,KAAAk1E,iBAAA,IAA8BrD,IAC9BlP,OAAAD,EAAAC,SAQA3iE,KAAAk1E,iBAAArkD,GAAA,ODgfA,CAAAC,EAAAlxB,EAAAigE,KACA,GAAAA,EAAA8C,OAAAuL,WAAAtuE,EAAAuzE,YAAA,UACAtT,EAAAc,WAAAqG,QAAApnE,EAAA0yE,UAAA,CACA,MAAA95D,EAAAqnD,EAAAtyB,OAAAg7B,WAAA3oE,EAAA0yE,SAAA1yE,MAEAigE,EAAAtyB,OAAAt9B,OAAAuI,EAAA5Y,EAAAuzE,aAEAvzE,EAAAy+D,WAAsBhC,GAAUt0B,4BAAAnoC,EAAAuzE,YAAA36D,EAAAinB,YAChC7/B,EAAAuzE,YAAAvzE,EAAAy+D,WAAApiD,OCxfoDwI,SAAA,WACpDzkB,KAAAk1E,iBAAArkD,GAAA,UD8dA,CAAAC,EAAAlxB,EAAAigE,KAEA,IAAAjgE,EAAAy+D,YAAAwB,EAAAc,WAAAqG,QAAApnE,EAAA0yE,UAA6E10E,MAAA,IAAa,CAC1F,MAAAygE,WAAUA,EAAA8U,eAA0BtT,EAAAqS,gBAAAtyE,EAAA0yE,SAAA1yE,EAAAuzE,aAEpCvzE,EAAAy+D,aACAz+D,EAAAuzE,iBCpekE1uD,SAAA,WAClEzkB,KAAAk1E,iBAAArkD,GAAA,mBD6dA,CAAAC,EAAAlxB,EAAAigE,KAEA,IAAAjgE,EAAAy+D,YAAAwB,EAAAc,WAAAqG,QAAApnE,EAAA0yE,UAA6E10E,MAAA,IAAa,CAC1F,MAAAygE,WAAUA,EAAA8U,eAA0BtT,EAAAqS,gBAAAtyE,EAAA0yE,SAAA1yE,EAAAuzE,aAEpCvzE,EAAAy+D,aACAz+D,EAAAuzE,iBCne2E1uD,SAAA,WAE3EzkB,KAAAgtE,SAAA,QAUAttE,IAAAqkC,EAAA,QAEA,OAAA/jC,KAAAF,UAAAE,KAAA0iE,MAAA9hE,SAAA63D,QAAA10B,IAYArkC,UAAAy1E,GAEA,MAAAC,EAAAp1E,KAAAq1E,OAAAF,GAGA,OAAAn1E,KAAA2Z,UAAA27D,OAAAF,GAaA11E,OAAAy1E,GAEAn1E,KAAAu+D,OAAAgX,gBAGA,MAAAlX,EAAqBhC,GAAUhyB,UAAA8qC,GAE/BC,EAAA,IAAmC/iC,GAInC40B,EAAA,IAAyB10B,GAAkB,IAAMpF,IAKjD,GAJAntC,KAAAu+D,OAAAngB,aAAA+2B,EAAAC,GAEAp1E,KAAAioE,mBAAA9H,cAAA9B,EAAA4I,IAEAkO,EAAAh2C,GAAA,qBAGA,MAAA6hC,EA8HA,SAAAxgE,GACA,MAAAoJ,KACA43C,EAAAhhD,EAAA7D,KAAAiE,SAEA,IAAA4gD,EACA,SAGA,MAAAg0B,EAAsBnZ,GAAUhyB,UAAA7pC,GAEhC,UAAAuV,KAAAyrC,EAAAkhB,MAAA1B,QAAA,CACA,MAAAyU,EAAAD,EAAA5gB,gBAAA7+C,EAAAsrD,YAEAoU,GACA7rE,EAAAlI,MAAAqU,EAAAnY,KAAA63E,IAIA,OAAA7rE,EAhJA8rE,CAAAP,GAEA,UAAAv3E,EAAAirC,KAAAm4B,EACAhhE,KAAAioE,mBAAAvH,iBAAA9iE,EAAAirC,EAAAo+B,GAIA,OAAAmO,EAgBA11E,KAAAE,EAAAmkC,EAAA,QACA,GAAA/jC,KAAA0iE,MAAA9hE,SAAAwf,QAQA,UAAamP,EAAA,EAAa,6FAG1B,MAAAomD,EAAA31E,KAAA0iE,MAAA9hE,SAAA63D,QAAA10B,GAMA,OAJA/jC,KAAA0iE,MAAA+B,cAAA,cAAAl3B,IACAA,EAAAt9B,OAAAjQ,KAAAiF,MAAArF,EAAA+1E,KAAA,KAGAhwE,QAAAC,UAeAlG,IAAAE,EAAAmkC,EAAA,QAEA,MAAA4xC,EAAA31E,KAAA0iE,MAAA9hE,SAAA63D,QAAA10B,GAEA/jC,KAAA0iE,MAAA+B,cAAA,cAAAl3B,IACAA,EAAAkI,aAAA,MACAlI,EAAAqoC,yBAAA51E,KAAA0iE,MAAA9hE,SAAA+iC,UAAAiN,oBAEArD,EAAAn9B,OAAAm9B,EAAAk7B,cAAAkN,IACApoC,EAAAt9B,OAAAjQ,KAAAiF,MAAArF,EAAA+1E,KAAA,KAcAj2E,MAAAE,EAAA+tE,EAAA,SAEA,MAAAyH,EAAAp1E,KAAA2Z,UAAA07D,OAAAz1E,GAGA,OAAAI,KAAA61E,QAAAT,EAAAzH,GAiBAjuE,QAAAo2E,EAAAnI,EAAA,SACA,OAAA3tE,KAAA0iE,MAAA7J,OAAAtrB,GACAvtC,KAAAk1E,iBAAArqB,QAAAirB,EAAAvoC,EAAAogC,IAOAjuE,YAUA2yB,GAAK2iD,GAAgBjkD,UC7NAglD,GAIrBr2E,cAKAM,KAAAg2E,mBAAA,IAAAvvE,IAeA/G,SAAAu2C,EAAAggC,GACA,GAAAj2E,KAAAg2E,mBAAAv0E,IAAAw0C,GAMA,UAAa1mB,EAAA,EAAa,kGAG1BvvB,KAAAg2E,mBAAA5uE,IAAA6uC,EAAAggC,GAgDAv2E,IAAAu2C,GACA,MAAAggC,EAAAj2E,KAAAk2E,gBAAAjgC,GAEA,OACAv2C,IAAAy2E,GAGA,OA2bA,SAAAF,EAAAE,GACA,UAAArW,KAAAmW,EACAE,EAAArW,GA/bAsW,CAAAH,EAAAE,GAEAn2E,OA4EAN,iBAAA0tE,GAEAptE,KAAAq2E,IAAA,YAAAlzE,IAA8BkjE,GAAwB+G,IAGtD,UAAA1K,MAAeA,EAAA5xB,UAAcwlC,GAAAlJ,GAC7BptE,KAAAq2E,IAAA,UAAAlzE,IACIuwE,IACJhR,QACA5xB,OACA21B,kBAAA2G,EAAA3G,qBAmKA/mE,mBAAA0tE,GAEAptE,KAAAq2E,IAAA,YAAAlzE,IAA8BujE,GAA0B0G,IAGxD,UAAA1K,MAAeA,EAAA5xB,UAAcwlC,GAAAlJ,GAC7BptE,KAAAq2E,IAAA,UAAAlzE,IACI+wE,IACJpjC,OACA4xB,QACAj+C,SAAA2oD,EAAA3oD,YAoHA/kB,qBAAA0tE,GAEAptE,KAAAq2E,IAAA,YAAAlzE,IAA8BikE,GAA4BgG,IAG1D,UAAA1K,MAAeA,EAAA5xB,UAAcwlC,GAAAlJ,GAC7BptE,KAAAq2E,IAAA,UAAAlzE,IACIkxE,IACJvjC,OACA4xB,WAiBAhjE,gBAAAu2C,GACA,MAAAggC,EAAAj2E,KAAAg2E,mBAAA93E,IAAA+3C,GAEA,IAAAggC,EAMA,UAAa1mD,EAAA,EAAa,4FAG1B,OAAA0mD,GAyCA,SAAAK,GAAAlJ,GACA,GAAAA,EAAA1K,MAAAj2D,OACA,UAAAnO,KAAA8uE,EAAA1K,MAAAj2D,OAAA,OAKA8pE,IAJkB33E,IAAAwuE,EAAA1K,MAAA9jE,IAAAN,SAClB8uE,EAAAt8B,KAAAxyC,GACA8uE,EAAAoJ,WAAApJ,EAAAoJ,WAAAl4E,QAAAqD,cAKA40E,GAAAnJ,EAAA1K,MAAA0K,EAAAt8B,KAAAs8B,EAAAoJ,YAIA,SAAAD,GAAA7T,EAAA5xB,EAAA0lC,GAGA,SAFQ9T,QAAA5xB,QAER0lC,EAAA,CACAA,EAAA3yE,MAAAuJ,QAAAopE,SAEA,UAAAC,KAAAD,QACU9T,QAAA5xB,KAAA2lC,UC/lBKC,GAQfh3E,YAAA6C,EAAA,WAOAvC,KAAAyQ,cAaAzQ,KAAAuC,OAUAo0E,kBACA,UAAAC,KAAA52E,KAAAyQ,WACA,UAAAmmE,EAAAD,YACA,OAAAC,EAAAD,YAIA,YASAj3E,aAAAgR,GAIA,OAHAA,EAAAV,MAAAhQ,KACAA,KAAAyQ,WAAA/O,KAAAgP,GAEAA,SCjEemmE,GAOfn3E,YAAAi3E,GASA32E,KAAA22E,cAQA32E,KAAA+iE,oBAAA,OAAA/iE,KAAA22E,YAQA32E,KAAAgQ,MAAA,KA4CAtQ,aASAA,SAGA,MAAAs/B,EAAAjhC,OAAAiR,UAAgChP,MAUhC,OARAg/B,EAAA83C,YAAA92E,KAAA0I,YAAAk5B,iBAGA5C,EAAAhvB,aAGAgvB,EAAA+jC,oBAEA/jC,EAQA4C,uBACA,kBAUAliC,gBAAAs/B,GACA,WAAAh/B,KAAAg/B,EAAA23C,oBC7GqBI,GAWrBr3E,YAAAmf,GASA7e,KAAAghE,QAAA,IAAAv6D,IAQAzG,KAAAihC,UAAA,IAAuBq4B,GAEvBz6C,GACA7e,KAAAkhC,aAAA,EAAAriB,GASAnf,CAAAtB,OAAAqa,YACA,OAAAzY,KAAAiiC,cASAT,iBACA,OAAAxhC,KAAAihC,UAAA7+B,OASAq3D,gBACA,OAAAz5D,KAAAihC,UAAAw4B,UASAh4B,cACA,WAAAzhC,KAAAwhC,WASA7kC,WACA,OAAAqD,KASA2Q,aACA,YAWAjR,GAAA6C,GACA,0BAAAA,EASA7C,SAAAkC,GACA,OAAA5B,KAAAihC,UAAA+4B,QAAAp4D,GAQAlC,cACA,OAAAM,KAAAihC,UAAA7iC,OAAAqa,YASA/Y,cAAA4B,GACA,OAAAtB,KAAAihC,UAAAy4B,aAAAp4D,GAWA5B,oBAAA4B,GACA,OAAAtB,KAAAihC,UAAA04B,mBAAAr4D,GAQA5B,UACA,SAcAA,cAAAw6D,GACA,IAAA54D,EAAAtB,KAEA,UAAA4B,KAAAs4D,EACA54D,IAAA68B,SAAA78B,EAAA24D,cAAAr4D,IAGA,OAAAN,EAsBA5B,cAAAu4B,GACA,OAAAj4B,KAAAihC,UAAAg5B,cAAAhiC,GASAv4B,SACA,MAAAs/B,KAEA,UAAA19B,KAAAtB,KAAAihC,UACAjC,EAAAt9B,KAAAJ,EAAA83D,UAGA,OAAAp6B,EAUAt/B,gBAAAs/B,GACA,MAAAngB,KAEA,UAAA6E,KAAAsb,EACAtb,EAAA9lB,KAEAihB,EAAAnd,KAAmBq4D,GAAOM,SAAA32C,IAG1B7E,EAAAnd,KAAmBy3D,GAAIkB,SAAA32C,IAIvB,WAAaqzD,GAAgBl4D,GAS7Bnf,aAAA0iC,GACApiC,KAAAkhC,aAAAlhC,KAAAwhC,WAAAY,GAWA1iC,aAAAkC,EAAAwgC,GACA,MAAAC,EAsCA,SAAkBA,GAElB,oBAAAA,EACA,WAAe82B,GAAI92B,IAGZzC,GAAUyC,KACjBA,OAIA,OAAAx+B,MAAAC,KAAAu+B,GACAt0B,IAAAzM,GACA,iBAAAA,EACA,IAAe63D,GAAI73D,GAGnBA,aAAwB+3D,GACxB,IAAeF,GAAI73D,EAAA1B,KAAA0B,EAAA00C,iBAGnB10C,GA3DgB01E,CAAS50C,GAEzB,UAAA9gC,KAAA+gC,EAEA,OAAA/gC,EAAAqP,QACArP,EAAAihC,UAGAjhC,EAAAqP,OAAA3Q,KAGAA,KAAAihC,UAAAu4B,aAAA53D,EAAAygC,GAYA3iC,gBAAAkC,EAAA4gC,EAAA,GACA,MAAAH,EAAAriC,KAAAihC,UAAAm5B,aAAAx4D,EAAA4gC,GAEA,UAAAlhC,KAAA+gC,EACA/gC,EAAAqP,OAAA,KAGA,OAAA0xB,GCrRO,SAAAlpB,GAAAvI,EAAAyxB,GAIP,MAAApK,GAHAoK,EAAA40C,GAAA50C,IAGA31B,OAAA,CAAA4jC,EAAAhvC,IAAAgvC,EAAAhvC,EAAAm+B,WAAA,GACA9uB,EAAAC,EAAAD,OAGAumE,GAAAtmE,GACA,MAAAhP,EAAAgP,EAAAhP,MAUA,OANA+O,EAAAuwB,aAAAt/B,EAAAygC,GAGA80C,GAAAxmE,EAAA/O,EAAAygC,EAAAjgC,QACA+0E,GAAAxmE,EAAA/O,GAEA,IAAYy6D,GAAKzrD,IAAAi3B,aAAA5P,IAWV,SAAAsK,GAAAsG,GACP,IAAAA,EAAAtL,OAMA,UAAYhO,EAAA,EAAa,+GAIzB,MAAA5e,EAAAk4B,EAAA7sB,MAAArL,OAGAumE,GAAAruC,EAAA7sB,OACAk7D,GAAAruC,EAAA5sB,KAGA,MAAAyD,EAAA/O,EAAAmuB,gBAAA+J,EAAA7sB,MAAApa,MAAAinC,EAAA5sB,IAAAra,MAAAinC,EAAA7sB,MAAApa,OAMA,OAFAu1E,GAAAxmE,EAAAk4B,EAAA7sB,MAAApa,OAEA8d,EAYO,SAAA03D,GAAA3jC,EAAAC,GACP,IAAAD,EAAAlW,OAMA,UAAYhO,EAAA,EAAa,2GAIzB,MAAA8S,EAAAE,GAAAkR,GAMA,OAAAt6B,GAFAu6B,IAAAooB,0BAAAroB,EAAAz3B,MAAAy3B,EAAAx3B,IAAAgc,OAAAwb,EAAAz3B,MAAAic,QAEAoK,GA+CO,SAAA40C,GAAA50C,GACP,MAAAkyC,KAEAlyC,aAAAx+B,QACAw+B,OAIA,QAAAhlC,EAAA,EAAiBA,EAAAglC,EAAAjgC,OAAkB/E,IACnC,oBAAAglC,EAAAhlC,GACAk3E,EAAA7yE,KAAA,IAAwBy3D,GAAI92B,EAAAhlC,UACzB,GAAAglC,EAAAhlC,aAAiCg8D,GACpCkb,EAAA7yE,KAAA,IAAwBy3D,GAAI92B,EAAAhlC,GAAAuC,KAAAyiC,EAAAhlC,GAAA24C,uBACzB,GAAA3T,EAAAhlC,aAAiC05E,IAAgB10C,EAAAhlC,aAA0Bi8D,GAC9E,UAAA51C,KAAA2e,EAAAhlC,GACAk3E,EAAA7yE,KAAAgiB,QAEG2e,EAAAhlC,aAAiC47D,IACpCsb,EAAA7yE,KAAA2gC,EAAAhlC,IAMA,QAAAA,EAAA,EAAiBA,EAAAk3E,EAAAnyE,OAAuB/E,IAAA,CACxC,MAAAiE,EAAAizE,EAAAl3E,GACA42C,EAAAsgC,EAAAl3E,EAAA,GAEAiE,aAAuB63D,IAAIllB,aAAoBklB,IAAIke,GAAA/1E,EAAA2yC,KAEnDsgC,EAAAhhE,OAAAlW,EAAA,QAAoC87D,GAAIllB,EAAAr0C,KAAA0B,EAAA1B,KAAAq0C,EAAA+B,kBACxC34C,KAIA,OAAAk3E,EAWA,SAAA4C,GAAA32E,EAAAoB,GACA,MAAAokC,EAAAxlC,EAAA29B,SAAAv8B,EAAA,GACAmkC,EAAAvlC,EAAA29B,SAAAv8B,GAGA,GAAAokC,GAAAD,GAAAC,EAAA7G,GAAA,SAAA4G,EAAA5G,GAAA,SAAAk4C,GAAArxC,EAAAD,GAAA,CAEA,MAAAuxC,EAAA,IAAyBne,GAAInzB,EAAApmC,KAAAmmC,EAAAnmC,KAAAomC,EAAAgQ,iBAG7Bx1C,EAAAs+B,gBAAAl9B,EAAA,KAGApB,EAAA0gC,aAAAt/B,EAAA,EAAA01E,IASA,SAAAJ,GAAAtmE,GACA,MAAA2uB,EAAA3uB,EAAA2uB,SACA/+B,EAAAoQ,EAAAD,OAEA,GAAA4uB,EAAA,CACA,MAAAg4C,EAAA3mE,EAAAqnB,OAAAsH,EAAAqG,YACAhkC,EAAA29B,EAAA39B,MAEApB,EAAAs+B,gBAAAl9B,EAAA,GAEA,MAAA41E,EAAA,IAAwBre,GAAI55B,EAAA3/B,KAAA2c,OAAA,EAAAg7D,GAAAh4C,EAAAyW,iBAC5ByhC,EAAA,IAAyBte,GAAI55B,EAAA3/B,KAAA2c,OAAAg7D,GAAAh4C,EAAAyW,iBAE7Bx1C,EAAA0gC,aAAAt/B,GAAA41E,EAAAC,KAUA,SAAAJ,GAAAvwB,EAAAC,GACA,MAAA2wB,EAAA5wB,EAAA9Q,gBACA2hC,EAAA5wB,EAAA/Q,gBAEA,UAAA/uC,KAAAywE,EAAA,CACA,GAAAzwE,EAAA,KAAA8/C,EAAA9vC,aAAAhQ,EAAA,IACA,SAGA0wE,EAAA5yC,OAGA,OAAA4yC,EAAA5yC,OAAAF,KCzOe,IAAA+yC,GAJf,SAAAt5E,EAAAisB,GACA,OAASgiC,GAAWjuD,EAAAisB,UCTCstD,WAA2BhB,GAoBhDn3E,YAAAmpC,EAAAjqC,EAAA+I,EAAAmjB,EAAA6rD,GACA52E,MAAA42E,GAQA32E,KAAA6oC,QAAA3D,QAQAllC,KAAApB,MAQAoB,KAAA2H,cAAAhG,IAAAgG,EAAA,KAAAA,EAQA3H,KAAA8qB,cAAAnpB,IAAAmpB,EAAA,KAAAA,EAMAvoB,WACA,cAAAvC,KAAA2H,SACA,eACG,OAAA3H,KAAA8qB,SACH,kBAEA,kBASAprB,QACA,WAAam4E,GAAkB73E,KAAA6oC,MAAA7oC,KAAApB,IAAAoB,KAAA2H,SAAA3H,KAAA8qB,SAAA9qB,KAAA22E,aAQ/Bj3E,cACA,WAAam4E,GAAkB73E,KAAA6oC,MAAA7oC,KAAApB,IAAAoB,KAAA8qB,SAAA9qB,KAAA2H,SAAA3H,KAAA22E,YAAA,GAM/Bj3E,SACA,MAAAs/B,EAAAj/B,MAAAq5D,SAIA,OAFAp6B,EAAA6J,MAAA7oC,KAAA6oC,MAAAuwB,SAEAp6B,EAMAt/B,YACA,IAAAM,KAAA6oC,MAAAtL,OAMA,UAAahO,EAAA,EAAa,wEAG1B,UAAApd,KAAAnS,KAAA6oC,MAAA24B,UAA4Ch9B,SAAA,IAAgB,CAC5D,UAAAxkC,KAAA2H,WAAmCiwE,GAAOzlE,EAAA8E,aAAAjX,KAAApB,KAAAoB,KAAA2H,UAS1C,UAAc4nB,EAAA,EACd,yHAEMpd,OAAAvT,IAAAoB,KAAApB,IAAAN,MAAA0B,KAAA2H,WAIN,UAAA3H,KAAA2H,UAAA,OAAA3H,KAAA8qB,UAAA3Y,EAAAmuB,aAAAtgC,KAAApB,KAQA,UAAc2wB,EAAA,EACd,sFACMjuB,KAAA6Q,EAAAvT,IAAAoB,KAAApB,OASNc,WAEQk4E,GAAO53E,KAAA2H,SAAA3H,KAAA8qB,WF1CR,SAAA+d,EAAAjqC,EAAAN,GAEP44E,GAAAruC,EAAA7sB,OACAk7D,GAAAruC,EAAA5sB,KAGA,UAAA9J,KAAA02B,EAAA24B,UAAsCh9B,SAAA,IAAgB,CAItD,MAAAljC,EAAA6Q,EAAAgtB,GAAA,aAAAhtB,EAAAotB,SAAAptB,EAEA,OAAA7T,EACAgD,EAAAwxC,cAAAl0C,EAAAN,GAEAgD,EAAAyxC,iBAAAn0C,GAIAu4E,GAAA71E,EAAAqP,OAAArP,EAAAM,OAIAu1E,GAAAtuC,EAAA5sB,IAAAtL,OAAAk4B,EAAA5sB,IAAAra,OEqBGkxC,CAAa9yC,KAAA6oC,MAAA7oC,KAAApB,IAAAoB,KAAA8qB,UAOhB8W,uBACA,2BAUAliC,gBAAAs/B,EAAAp+B,GACA,WAAai3E,GAAoBxb,GAAKhC,SAAAr7B,EAAA6J,MAAAjoC,GAAAo+B,EAAApgC,IAAAogC,EAAAr3B,SAAAq3B,EAAAlU,SAAAkU,EAAA23C,oBC5KjBmB,WAAwBjB,GAS7Cn3E,YAAA87D,EAAAh5B,GACAziC,MAAA,MAOAC,KAAAw7D,iBAAAt2B,QAOAllC,KAAAwiC,UAMAjgC,WACA,eAMA7C,SACA,MAAAs/B,EAAAj/B,MAAAq5D,SAIA,OAFAp6B,EAAAw8B,eAAAx7D,KAAAw7D,eAAApC,SAEAp6B,EAMAt/B,YACA,GAAAM,KAAAw7D,eAAA7+D,KAAAiE,SAMA,UAAa2uB,EAAA,EAAa,mEAO1B7vB,WACE6iC,GAAS85B,GAAKt0B,4BAAA/nC,KAAAw7D,eAAAx7D,KAAAwiC,UAMhBZ,uBACA,+BCpEqBm2C,WAAsBlB,GAY3Cn3E,YAAA87D,EAAAh5B,EAAAkR,EAAAijC,GACA52E,MAAA42E,GAOA32E,KAAAw7D,iBAAAt2B,QAEAllC,KAAAw7D,eAAAhB,WAAA,SAOAx6D,KAAAwiC,UAOAxiC,KAAA0zC,iBAAAxO,QACAllC,KAAA0zC,eAAA8mB,WAAA,SAMAj4D,WACA,oBAAAvC,KAAA0zC,eAAA/2C,KAAAonC,SACA,SACG,cAAA/jC,KAAAw7D,eAAA7+D,KAAAonC,SACH,WAGA,OAQArkC,QACA,WAAAM,KAAA0I,YAAA1I,KAAAw7D,eAAAx7D,KAAAwiC,QAAAxiC,KAAA0zC,eAAA1zC,KAAA22E,aAiBAj3E,qBACA,OAAAM,KAAA0zC,eAAAooB,0BAAA97D,KAAAw7D,eAAAx7D,KAAAwiC,SAQA9iC,cACA,MAAAs4E,EAAAh4E,KAAAw7D,eAAAF,2BAAAt7D,KAAA0zC,eAAA1zC,KAAAwiC,SAEA,WAAAxiC,KAAA0I,YAAA1I,KAAAi4E,qBAAAj4E,KAAAwiC,QAAAw1C,EAAAh4E,KAAA22E,YAAA,GAMAj3E,YACA,MAAAw4E,EAAAl4E,KAAAw7D,eAAA7qD,OACAwnE,EAAAn4E,KAAA0zC,eAAA/iC,OACAynE,EAAAp4E,KAAAw7D,eAAAvjC,OACAogD,EAAAr4E,KAAA0zC,eAAAzb,OAKA,IAAAigD,IAAAC,EAMA,UAAa5oD,EAAA,EACb,mFAEG,GAAA6oD,EAAAp4E,KAAAwiC,QAAA01C,EAAAze,UAMH,UAAalqC,EAAA,EACb,oFAEG,GAAA2oD,IAAAC,GAAAC,EAAAC,KAAAD,EAAAp4E,KAAAwiC,QAMH,UAAajT,EAAA,EACb,kGAEG,GAAAvvB,KAAAw7D,eAAA7+D,MAAAqD,KAAA0zC,eAAA/2C,MACkB,UAAbq3B,GAAah0B,KAAAw7D,eAAAP,gBAAAj7D,KAAA0zC,eAAAunB,iBAAA,CACrB,MAAA59D,EAAA2C,KAAAw7D,eAAAx3C,KAAA5hB,OAAA,EAEA,GAAApC,KAAA0zC,eAAA1vB,KAAA3mB,IAAA+6E,GAAAp4E,KAAA0zC,eAAA1vB,KAAA3mB,GAAA+6E,EAAAp4E,KAAAwiC,QAMA,UAAejT,EAAA,EACf,wGAUA7vB,WACE03E,GAAO/a,GAAKt0B,4BAAA/nC,KAAAw7D,eAAAx7D,KAAAwiC,SAAAxiC,KAAA0zC,gBAMdh0C,SACA,MAAAs/B,EAAAj/B,MAAAq5D,SAKA,OAHAp6B,EAAAw8B,eAAAx7D,KAAAw7D,eAAApC,SACAp6B,EAAA0U,eAAA1zC,KAAA0zC,eAAA0lB,SAEAp6B,EAMA4C,uBACA,sBAUAliC,gBAAAs/B,EAAAp+B,GACA,MAAA46D,EAAyBjB,GAAQF,SAAAr7B,EAAAw8B,eAAA56D,GACjC8yC,EAAyB6mB,GAAQF,SAAAr7B,EAAA0U,eAAA9yC,GAEjC,WAAAZ,KAAAw7D,EAAAx8B,EAAAwD,QAAAkR,EAAA1U,EAAA23C,oBCxLqB2B,WAAwBzB,GAS7Cn3E,YAAAkR,EAAAyxB,EAAAs0C,GACA52E,MAAA42E,GAQA32E,KAAA4Q,WAAAs0B,QACAllC,KAAA4Q,SAAA4pD,WAAA,SAQAx6D,KAAAqiC,MAAA,IAAmBi3B,GAAU2d,GAAe50C,IAS5CriC,KAAAu4E,yBAAA,EAMAh2E,WACA,eAQAigC,cACA,OAAAxiC,KAAAqiC,MAAAo3B,UAQA/5D,QACA,MAAA2iC,EAAA,IAAoBi3B,OAAQt5D,KAAAqiC,OAAAt0B,IAAAzM,KAAAuY,QAAA,KAC5B5J,EAAA,IAAqBqoE,GAAet4E,KAAA4Q,SAAAyxB,EAAAriC,KAAA22E,aAIpC,OAFA1mE,EAAAsoE,wBAAAv4E,KAAAu4E,wBAEAtoE,EAQAvQ,cACA,MAAA08D,EAAAp8D,KAAA4Q,SAAAjU,KAAAiE,SAAAw7D,UACAoc,EAAA,IAAyBje,GAAQ6B,GAAA,IAEjC,WAAa2b,GAAa/3E,KAAA4Q,SAAA5Q,KAAAqiC,MAAAo3B,UAAA+e,EAAAx4E,KAAA22E,YAAA,GAM1Bj3E,YACA,MAAAy4E,EAAAn4E,KAAA4Q,SAAAD,OAEA,IAAAwnE,KAAA1e,UAAAz5D,KAAA4Q,SAAAqnB,OAMA,UAAa1I,EAAA,EACb,qEAQA7vB,WAKA,MAAA+4E,EAAAz4E,KAAAqiC,MACAriC,KAAAqiC,MAAA,IAAmBi3B,OAAQmf,GAAA1qE,IAAAzM,KAAAuY,QAAA,KAEzBV,GAAOnZ,KAAA4Q,SAAA6nE,GAMT/4E,SACA,MAAAs/B,EAAAj/B,MAAAq5D,SAKA,OAHAp6B,EAAApuB,SAAA5Q,KAAA4Q,SAAAwoD,SACAp6B,EAAAqD,MAAAriC,KAAAqiC,MAAA+2B,SAEAp6B,EAMA4C,uBACA,wBAUAliC,gBAAAs/B,EAAAp+B,GACA,MAAAie,KAEA,UAAA6E,KAAAsb,EAAAqD,MACA3e,EAAA9lB,KAEAihB,EAAAnd,KAAmBq4D,GAAOM,SAAA32C,IAG1B7E,EAAAnd,KAAmBy3D,GAAIkB,SAAA32C,IAIvB,MAAAzT,EAAA,IAAqBqoE,GAAiB/d,GAAQF,SAAAr7B,EAAApuB,SAAAhQ,GAAAie,EAAAmgB,EAAA23C,aAG9C,OAFA1mE,EAAAsoE,wBAAAv5C,EAAAu5C,wBAEAtoE,SCnKqByoE,WAAwB7B,GAW7Cn3E,YAAA9B,EAAAgkE,EAAAhsB,EAAAorB,EAAA2X,EAAAhC,GACA52E,MAAA42E,GAQA32E,KAAApC,OAQAoC,KAAA4hE,aAAA18B,QAAA,KAQAllC,KAAA41C,aAAA1Q,QAAA,KASAllC,KAAA24E,cAQA34E,KAAA44E,SAAA5X,EAMAz+D,WACA,eAQA7C,QACA,WAAag5E,GAAe14E,KAAApC,KAAAoC,KAAA4hE,SAAA5hE,KAAA41C,SAAA51C,KAAA44E,SAAA54E,KAAA24E,YAAA34E,KAAA22E,aAQ5Bj3E,cACA,WAAag5E,GAAe14E,KAAApC,KAAAoC,KAAA41C,SAAA51C,KAAA4hE,SAAA5hE,KAAA44E,SAAA54E,KAAA24E,YAAA34E,KAAA22E,YAAA,GAM5Bj3E,WACA,MAAA6C,EAAAvC,KAAA41C,SAAA,iBAEA51C,KAAA44E,SAAAr2E,GAAAvC,KAAApC,KAAAoC,KAAA41C,UAAA,EAAA51C,KAAA24E,aAMAj5E,SACA,MAAAs/B,EAAAj/B,MAAAq5D,SAYA,OAVAp5D,KAAA4hE,WACA5iC,EAAA4iC,SAAA5hE,KAAA4hE,SAAAxI,UAGAp5D,KAAA41C,WACA5W,EAAA4W,SAAA51C,KAAA41C,SAAAwjB,iBAGAp6B,EAAA45C,SAEA55C,EAMA4C,uBACA,wBAUAliC,gBAAAs/B,EAAAp+B,GACA,WAAa83E,GACb15C,EAAAphC,KACAohC,EAAA4iC,SAAmBvF,GAAKhC,SAAAr7B,EAAA4iC,SAAAhhE,GAAA,KACxBo+B,EAAA4W,SAAmBymB,GAAKhC,SAAAr7B,EAAA4W,SAAAh1C,GAAA,KACxBA,EAAA8hE,MAAA1B,QACAhiC,EAAA25C,YACA35C,EAAA23C,oBC5HqBkC,WAAwBhC,GAU7Cn3E,YAAAkR,EAAAkoE,EAAAhjC,EAAA6gC,GACA52E,MAAA42E,GAOA32E,KAAA4Q,WAEA5Q,KAAA4Q,SAAA4pD,WAAA,SAOAx6D,KAAA84E,UAOA94E,KAAA81C,UAMAvzC,WACA,eAQA7C,QACA,WAAam5E,GAAe74E,KAAA4Q,SAAAs0B,QAAAllC,KAAA84E,QAAA94E,KAAA81C,QAAA91C,KAAA22E,aAQ5Bj3E,cACA,WAAam5E,GAAe74E,KAAA4Q,SAAAs0B,QAAAllC,KAAA81C,QAAA91C,KAAA84E,QAAA94E,KAAA22E,YAAA,GAM5Bj3E,YACA,MAAAc,EAAAR,KAAA4Q,SAAAm1B,UAEA,KAAAvlC,aAA6Bu5D,IAM7B,UAAaxqC,EAAA,EACb,8GAEG,GAAA/uB,EAAA5C,OAAAoC,KAAA84E,QAMH,UAAavpD,EAAA,EACb,gGAQA7vB,WACAM,KAAA4Q,SAAAm1B,UAEAnoC,KAAAoC,KAAA81C,QAMAp2C,SACA,MAAAs/B,EAAAj/B,MAAAq5D,SAIA,OAFAp6B,EAAApuB,SAAA5Q,KAAA4Q,SAAAwoD,SAEAp6B,EAMA4C,uBACA,wBAUAliC,gBAAAs/B,EAAAp+B,GACA,WAAai4E,GAAiBte,GAAQF,SAAAr7B,EAAApuB,SAAAhQ,GAAAo+B,EAAA85C,QAAA95C,EAAA8W,QAAA9W,EAAA23C,oBCzHjBoC,WAA+BlC,GAYpDn3E,YAAA/C,EAAAiC,EAAA+I,EAAAmjB,EAAA6rD,GACA52E,MAAA42E,GAQA32E,KAAArD,OAQAqD,KAAApB,MAQAoB,KAAA2H,WAQA3H,KAAA8qB,WAMAvoB,WACA,cAAAvC,KAAA2H,SACA,mBACG,OAAA3H,KAAA8qB,SACH,sBAEA,sBASAprB,QACA,WAAaq5E,GAAsB/4E,KAAArD,KAAAqD,KAAApB,IAAAoB,KAAA2H,SAAA3H,KAAA8qB,SAAA9qB,KAAA22E,aAQnCj3E,cACA,WAAaq5E,GAAsB/4E,KAAArD,KAAAqD,KAAApB,IAAAoB,KAAA8qB,SAAA9qB,KAAA2H,SAAA3H,KAAA22E,YAAA,GAMnCj3E,YACA,GAAAM,KAAArD,MAAAqD,KAAArD,WAAAqD,KAAArD,KAAAwiC,GAAA,oBASA,UAAa5P,EAAA,EACb,oFACK5yB,KAAAqD,KAAArD,KAAAiC,IAAAoB,KAAApB,MAIL,UAAAoB,KAAA2H,UAAA3H,KAAArD,KAAAsa,aAAAjX,KAAApB,OAAAoB,KAAA2H,SASA,UAAa4nB,EAAA,EACb,6HAEK5yB,KAAAqD,KAAArD,KAAAiC,IAAAoB,KAAApB,MAIL,UAAAoB,KAAA2H,UAAA,OAAA3H,KAAA8qB,UAAA9qB,KAAArD,KAAA2jC,aAAAtgC,KAAApB,KAQA,UAAa2wB,EAAA,EACb,0FACK5yB,KAAAqD,KAAArD,KAAAiC,IAAAoB,KAAApB,MAQLc,WACA,OAAAM,KAAA8qB,SACA9qB,KAAArD,KAAAm2C,cAAA9yC,KAAApB,IAAAoB,KAAA8qB,UAEA9qB,KAAArD,KAAAo2C,iBAAA/yC,KAAApB,KAOAc,SACA,MAAAs/B,EAAAj/B,MAAAq5D,SAIA,OAFAp6B,EAAAriC,KAAAqD,KAAArD,KAAAy8D,SAEAp6B,EAMA4C,uBACA,+BAUAliC,gBAAAs/B,EAAAp+B,GACA,IAAAA,EAAA63D,QAAAz5B,EAAAriC,MAOA,UAAa4yB,EAAA,EACb,4HACKwU,SAAA/E,EAAAriC,OAIL,WAAao8E,GAAsBn4E,EAAA63D,QAAAz5B,EAAAriC,MAAAqiC,EAAApgC,IAAAogC,EAAAr3B,SAAAq3B,EAAAlU,SAAAkU,EAAA23C,oBChLdqC,WAAuBnC,GAY5Cn3E,YAAA87D,EAAAh5B,EAAAkR,EAAAmoB,EAAA8a,GACA52E,MAAA42E,GAOA32E,KAAAw7D,iBAAAt2B,QAEAllC,KAAAw7D,eAAAhB,WAAA,aAOAx6D,KAAAwiC,UAOAxiC,KAAA0zC,iBAAAxO,QAGAllC,KAAA0zC,eAAA8mB,WAAA,SAOAx6D,KAAA67D,oBAAA32B,QAMA3iC,WACA,cASAw5D,uBACA,WAAaxB,GAAQv6D,KAAAw7D,eAAA7+D,KAAAqD,KAAAw7D,eAAAx3C,KAAAxN,MAAA,OAUrBilD,iBACA,MAAAx/C,EAAAjc,KAAAw7D,eAAA3zB,aAAA7iC,OAAAmyC,mBAEA,WAAaklB,GAAKr8D,KAAAw7D,eAAAv/C,GAQlBvc,QACA,WAAAM,KAAA0I,YAAA1I,KAAAw7D,eAAAx7D,KAAAwiC,QAAAxiC,KAAA0zC,eAAA1zC,KAAA67D,kBAAA77D,KAAA22E,aAQAj3E,cAIA,MAAAg0C,EAAA1zC,KAAA0zC,eAAA2nB,gCAAAr7D,MAEAgkB,EAAAhkB,KAAAw7D,eAAAx3C,KAAAxN,MAAA,MACAg+B,EAAA,IAAgC+lB,GAAQv6D,KAAAw7D,eAAA7+D,KAAAqnB,GAAAq3C,gCAAAr7D,MAExCkX,EAAA,IAAoB+hE,GAAcvlC,EAAA1zC,KAAAwiC,QAAAxiC,KAAA67D,kBAAA77D,KAAA22E,YAAA,GAGlC,OAFAz/D,EAAAs9B,oBAEAt9B,EAMAxX,YACA,MAAAw4E,EAAAl4E,KAAAw7D,eAAA7qD,OACAwnE,EAAAn4E,KAAA0zC,eAAA/iC,OAGA,KAAAunE,KAAA/4C,GAAA,YAAA+4C,EAAAvnE,QAMA,UAAa4e,EAAA,EAAa,8EACvB,KAAA4oD,KAAAh5C,GAAA,YAAAg5C,EAAAxnE,QAMH,UAAa4e,EAAA,EAAa,8EACvB,GAAAvvB,KAAAwiC,SAAA01C,EAAAze,UAMH,UAAalqC,EAAA,EAAa,8FAO1B7vB,WACA,MAAAw5E,EAAAl5E,KAAAw7D,eAAA7qD,OAGEymE,GAFoB/a,GAAKhyB,UAAA6uC,GAEpBl5E,KAAA0zC,gBACL0jC,GAAO/a,GAAK/xB,UAAA4uC,GAAAl5E,KAAA67D,mBAMdn8D,SACA,MAAAs/B,EAAAj/B,MAAAq5D,SAMA,OAJAp6B,EAAAw8B,eAAAx8B,EAAAw8B,eAAApC,SACAp6B,EAAA0U,eAAA1U,EAAA0U,eAAA0lB,SACAp6B,EAAA68B,kBAAA78B,EAAA68B,kBAAAzC,SAEAp6B,EAMA4C,uBACA,uBAUAliC,gBAAAs/B,EAAAp+B,GACA,MAAA46D,EAAyBjB,GAAQF,SAAAr7B,EAAAw8B,eAAA56D,GACjC8yC,EAAyB6mB,GAAQF,SAAAr7B,EAAA0U,eAAA9yC,GACjCi7D,EAA4BtB,GAAQF,SAAAr7B,EAAA68B,kBAAAj7D,GAEpC,WAAAZ,KAAAw7D,EAAAx8B,EAAAwD,QAAAkR,EAAAmoB,EAAA78B,EAAA23C,oBC1LqBsC,WAAuBpC,GAW5Cn3E,YAAAi8D,EAAAn5B,EAAAq5B,EAAA8a,GACA52E,MAAA42E,GAOA32E,KAAA27D,gBAAAz2B,QAGAllC,KAAA27D,cAAAnB,WAAA,SAOAx6D,KAAAwiC,UAOAxiC,KAAAw0C,kBAA2BykC,GAAcE,qBAAAxd,GACzC37D,KAAAw0C,kBAAAgmB,WAAA,SAUAx6D,KAAA67D,sBAAA32B,QAAA,KAEAllC,KAAA67D,oBACA77D,KAAA67D,kBAAArB,WAAA,UAOAj4D,WACA,cAWAq5D,yBACA,MAAA53C,EAAAhkB,KAAAw0C,kBAAAxwB,KAAAxN,QAGA,OAFAwN,EAAAtiB,KAAA,GAEA,IAAa64D,GAAQv6D,KAAAw0C,kBAAA73C,KAAAqnB,GAUrBy3C,iBACA,MAAAx/C,EAAAjc,KAAA27D,cAAA9zB,aAAA7iC,OAAAmyC,mBAEA,WAAaklB,GAAKr8D,KAAA27D,cAAA1/C,GAQlBvc,QACA,MAAAwX,EAAA,IAAAlX,KAAA0I,YAAA1I,KAAA27D,cAAA37D,KAAAwiC,QAAAxiC,KAAA67D,kBAAA77D,KAAA22E,aAGA,OAFAz/D,EAAAs9B,kBAAAx0C,KAAAw0C,kBAEAt9B,EAQAxX,cACA,MAAA08D,EAAAp8D,KAAA27D,cAAAh/D,KAAAiE,SAAAw7D,UACAP,EAAA,IAAgCtB,GAAQ6B,GAAA,IAExC,WAAa4c,GAAch5E,KAAA47D,mBAAA57D,KAAAwiC,QAAAxiC,KAAA27D,cAAAE,EAAA77D,KAAA22E,YAAA,GAM3Bj3E,YACA,MAAAc,EAAAR,KAAA27D,cAAAhrD,OACAsnB,EAAAj4B,KAAA27D,cAAA1jC,OAGA,IAAAz3B,KAAAi5D,UAAAxhC,EAMA,UAAa1I,EAAA,EAAa,gEACvB,IAAA/uB,EAAAmQ,OAMH,UAAa4e,EAAA,EAAa,6DACvB,GAAAvvB,KAAAwiC,SAAAhiC,EAAAi5D,UAAAz5D,KAAA27D,cAAA1jC,OAMH,UAAa1I,EAAA,EAAa,8FACvB,GAAAvvB,KAAA67D,oBAAA77D,KAAA67D,kBAAA91B,UAMH,UAAaxW,EAAA,EAAa,2EAO1B7vB,WACA,MAAA05E,EAAAp5E,KAAA27D,cAAAhrD,OAEA,GAAA3Q,KAAA67D,kBACGub,GAAO/a,GAAKt0B,4BAAA/nC,KAAA67D,kBAAA,GAAA77D,KAAAw0C,uBACZ,CACH,MAAAhB,EAAA4lC,EAAAv/D,SAEGV,GAAOnZ,KAAAw0C,kBAAAhB,GAQR4jC,GALF,IAA0B/a,GACvB9B,GAAQj2B,UAAA80C,EAAAp5E,KAAA27D,cAAA1jC,QACRsiC,GAAQj2B,UAAA80C,IAAA3f,YAGJz5D,KAAA47D,oBAMPl8D,SACA,MAAAs/B,EAAAj/B,MAAAq5D,SASA,OAPAp6B,EAAA28B,cAAA37D,KAAA27D,cAAAvC,SACAp6B,EAAAwV,kBAAAx0C,KAAAw0C,kBAAA4kB,SAEAp5D,KAAA67D,oBACA78B,EAAA68B,kBAAA77D,KAAA67D,kBAAAzC,UAGAp6B,EAMA4C,uBACA,uBAUAliC,4BAAAi8D,GACA,MAAA33C,EAAA23C,EAAA33C,KAAAxN,MAAA,MAGA,OAFAwN,IAAA5hB,OAAA,KAEA,IAAam4D,GAAQoB,EAAAh/D,KAAAqnB,GAUrBtkB,gBAAAs/B,EAAAp+B,GACA,MAAA+6D,EAAwBpB,GAAQF,SAAAr7B,EAAA28B,cAAA/6D,GAChC4zC,EAA4B+lB,GAAQF,SAAAr7B,EAAAwV,kBAAA5zC,GACpCi7D,EAAA78B,EAAA68B,kBAAqDtB,GAAQF,SAAAr7B,EAAA68B,kBAAAj7D,GAAA,KAE7DsW,EAAA,IAAAlX,KAAA27D,EAAA38B,EAAAwD,QAAAq5B,EAAA78B,EAAA23C,aAGA,OAFAz/D,EAAAs9B,oBAEAt9B,SC3OqBmiE,WAAoBtf,GASzCr6D,YAAA8hD,EAAA5jD,EAAAmmC,EAAA,QACAhkC,MAAAnC,GAQAoC,KAAAs5E,KAAA93B,EAQAxhD,KAAA+jC,WAWAnjC,eACA,OAAAZ,KAAAs5E,KAMA55E,GAAA6C,EAAA3E,GACA,OAAAA,EAGA,eAAA2E,GAAA3E,GAAAoC,KAAApC,MAAAmC,MAAAo/B,GAAA58B,EAAA3E,GAFA,eAAA2E,GAAAxC,MAAAo/B,GAAA58B,GAWA7C,SACA,OAAAM,KAAA+jC,gBCrBqBw1C,GAWrB75E,YAAAgjE,EAAA1yD,GAOAhQ,KAAA0iE,QAQA1iE,KAAAgQ,QAaAtQ,WAAAE,EAAAkH,GACA,WAAaqyD,GAAIv5D,EAAAkH,GAajBpH,cAAA9B,EAAAkJ,GACA,WAAaizD,GAAOn8D,EAAAkJ,GAQpBpH,yBACA,WAAaq3E,GA2Cbr3E,OAAAyS,EAAAs0B,EAAAxO,EAAA,GACAj4B,KAAAw5E,6BAEA,MAAA5oE,EAAmB2pD,GAAQj2B,UAAAmC,EAAAxO,GAG3B,GAAA9lB,EAAAxB,OAAA,CAEA,GAAA8oE,GAAAtnE,EAAAxV,KAAAiU,EAAAjU,MAIA,YAFAqD,KAAAkQ,KAAemsD,GAAK/xB,UAAAn4B,GAAAvB,GAMpB,GAAAuB,EAAAxV,KAAAiE,SAEA,UAAAnB,MAAA,+FAIAO,KAAAoQ,OAAA+B,GAKA,MAAAiO,EAAAxP,EAAAjU,KAAAiE,SAAAgQ,EAAAjU,KAAAiE,SAAAwf,QAAA,KAEAnQ,EAAA,IAAqBqoE,GAAe1nE,EAAAuB,EAAAiO,GAUpC,GARAjO,aAAuBgnD,KACvBlpD,EAAAsoE,yBAAA,GAGAv4E,KAAAgQ,MAAA0pE,aAAAzpE,GACAjQ,KAAA0iE,MAAAiX,eAAA1pE,GAGAkC,aAAuB4kE,GACvB,UAAAxV,EAAAH,KAAAjvD,EAAA6uD,QAAA,CAEA,MAAA4Y,EAA8Brf,GAAQj2B,UAAA88B,EAAAzkE,KAAA,GACtCksC,EAAA,IAAsBwzB,GACtB+E,EAAAplD,MAAA0/C,aAAAke,EAAAhpE,GACAwwD,EAAAnlD,IAAAy/C,aAAAke,EAAAhpE,IAGA5Q,KAAA65E,UAAAtY,GAAiC14B,QAAAixC,gBAAA,EAAAnB,aAAA,KA6BjCj5E,WAAA8Y,EAAA1R,EAAA2/B,EAAAxO,GACAnxB,aAA6BiwE,IAAgBjwE,aAA0BizD,IAAOjzD,aAA0ByzD,GACxGv6D,KAAAiQ,OAAAjQ,KAAAuoE,WAAA/vD,GAAA1R,EAAA2/B,GAEAzmC,KAAAiQ,OAAAjQ,KAAAuoE,WAAA/vD,EAAA1R,GAAA2/B,EAAAxO,GA4BAv4B,cAAA9B,EAAAkJ,EAAA2/B,EAAAxO,GACAnxB,aAA6BiwE,IAAgBjwE,aAA0BizD,IAAOjzD,aAA0ByzD,GACxGv6D,KAAAiQ,OAAAjQ,KAAAuD,cAAA3F,GAAAkJ,EAAA2/B,GAEAzmC,KAAAiQ,OAAAjQ,KAAAuD,cAAA3F,EAAAkJ,GAAA2/B,EAAAxO,GAmBAv4B,OAAAyS,EAAAxB,GACA3Q,KAAAiQ,OAAAkC,EAAAxB,EAAA,OAaAjR,WAAA8Y,EAAA1R,EAAA6J,GACA7J,aAA6BiwE,IAAgBjwE,aAA0BizD,GACvE/5D,KAAAiQ,OAAAjQ,KAAAuoE,WAAA/vD,GAAA1R,EAAA,OAEA9G,KAAAiQ,OAAAjQ,KAAAuoE,WAAA/vD,EAAA1R,GAAA6J,EAAA,OAcAjR,cAAA9B,EAAAkJ,EAAA6J,GACA7J,aAA6BiwE,IAAgBjwE,aAA0BizD,GACvE/5D,KAAAiQ,OAAAjQ,KAAAuD,cAAA3F,GAAAkJ,EAAA,OAEA9G,KAAAiQ,OAAAjQ,KAAAuD,cAAA3F,EAAAkJ,GAAA6J,EAAA,OAaAjR,aAAAd,EAAAN,EAAAy7E,GAGA,GAFA/5E,KAAAw5E,6BAEAO,aAA8B1d,GAAK,CACnC,MAAA/0B,EAAAyyC,EAAAvL,uBAEA,UAAA3lC,KAAAvB,EACA0yC,GAAAh6E,KAAApB,EAAAN,EAAAuqC,QAGAoxC,GAAAj6E,KAAApB,EAAAN,EAAAy7E,GAiBAr6E,cAAAoH,EAAAizE,GACA,UAAAn7E,EAAAs7E,KAA8BlhB,GAAKlyD,GACnC9G,KAAAiJ,aAAArK,EAAAs7E,EAAAH,GAYAr6E,gBAAAd,EAAAm7E,GAGA,GAFA/5E,KAAAw5E,6BAEAO,aAA8B1d,GAAK,CACnC,MAAA/0B,EAAAyyC,EAAAvL,uBAEA,UAAA3lC,KAAAvB,EACA0yC,GAAAh6E,KAAApB,EAAA,KAAAiqC,QAGAoxC,GAAAj6E,KAAApB,EAAA,KAAAm7E,GAUAr6E,gBAAAq6E,GACA/5E,KAAAw5E,6BAEA,MAAAW,EAAAhoE,IACA,UAAA9M,KAAA8M,EAAAy+B,mBACA5wC,KAAAgJ,gBAAA3D,EAAA8M,IAIA,GAAA4nE,aAAiC1d,GAGjC,UAAAlqD,KAAA4nE,EAAAvY,WACA2Y,EAAAhoE,QAHAgoE,EAAAJ,GAmCAr6E,KAAAmpC,EAAApC,EAAAxO,GAGA,GAFAj4B,KAAAw5E,+BAEA3wC,aAA2BwzB,IAM3B,UAAa9sC,EAAA,EAAa,qDAG1B,IAAAsZ,EAAAtL,OAMA,UAAahO,EAAA,EAAa,0DAG1B,MAAA3e,EAAmB2pD,GAAQj2B,UAAAmC,EAAAxO,GAE3B,IAAAwhD,GAAA5wC,EAAAlsC,KAAAiU,EAAAjU,MAOA,UAAa4yB,EAAA,EAAa,2FAG1B,MAAAnP,EAAAyoB,EAAAlsC,KAAAiE,SAAAioC,EAAAlsC,KAAAiE,SAAAwf,QAAA,KACA1P,EAAA,IAAwBqnE,GAAalvC,EAAA7sB,MAAA6sB,EAAA5sB,IAAAgc,OAAA4Q,EAAA7sB,MAAAic,OAAArnB,EAAAwP,GAErCpgB,KAAAgQ,MAAA0pE,aAAAhpE,GACA1Q,KAAA0iE,MAAAiX,eAAAjpE,GAQAhR,OAAAq6E,GAGA,GAFA/5E,KAAAw5E,6BAEAO,aAA8B1d,GAAK,CAEnC,MAAA/0B,EAAAyyC,EAAAvL,uBAAAzyB,UAEA,UAAA9uC,KAAAq6B,EACA8yC,GAAAntE,EAAA+O,MAAA/O,EAAAgP,IAAAgc,OAAAhrB,EAAA+O,MAAAic,OAAAj4B,KAAAgQ,MAAAhQ,KAAA0iE,WAEG,CACH,MAAAlgC,EAAAu3C,EAAA56C,GAAA,QAAA46C,EAAAt6C,WAAA,EAEA26C,GAAyB7f,GAAQ50B,cAAAo0C,GAAAv3C,EAAAxiC,KAAAgQ,MAAAhQ,KAAA0iE,QAYjChjE,MAAAkR,GACA5Q,KAAAw5E,6BAEA,MAAAxzC,EAAAp1B,EAAAo1B,WACAD,EAAAn1B,EAAAm1B,UAEA,KAAAC,aAAgC+zB,IAMhC,UAAaxqC,EAAA,EAAa,kFAG1B,KAAAwW,aAA+Bg0B,IAM/B,UAAaxqC,EAAA,EAAa,gFAG1B3e,EAAAjU,KAAAiE,SAGAZ,KAAAq6E,OAAAzpE,GAFA5Q,KAAAs6E,eAAA1pE,GAeAlR,uBAAA/C,EAAAqnB,EAAAw2C,GACA,OAAAx6D,KAAA0iE,MAAA6X,uBAAA59E,EAAAqnB,EAAAw2C,GAWA96D,iBAAA+mC,EAAAxO,GACA,OAAAj4B,KAAA0iE,MAAAmR,iBAAAptC,EAAAxO,GASAv4B,oBAAAyS,GACA,OAAAnS,KAAA0iE,MAAAoR,oBAAA3hE,GASAzS,qBAAAyS,GACA,OAAAnS,KAAA0iE,MAAAuQ,qBAAA9gE,GAUAzS,YAAAsc,EAAAC,GACA,OAAAjc,KAAA0iE,MAAA9hB,YAAA5kC,EAAAC,GASAvc,cAAAc,GACA,OAAAR,KAAA0iE,MAAA+F,cAAAjoE,GASAd,cAAAc,GACA,OAAAR,KAAA0iE,MAAA8X,cAAAh6E,GAcAd,gBAAAyoC,EAAAC,EAAA5gC,GACA,OAAAxH,KAAA0iE,MAAA+X,gBAAAtyC,EAAAC,EAAA5gC,GASA9H,eAAAkR,GACA,MAAAo1B,EAAAp1B,EAAAo1B,WACAD,EAAAn1B,EAAAm1B,UAEA/lC,KAAAkQ,KAAamsD,GAAKhyB,UAAAtE,GAAyBw0B,GAAQj2B,UAAA0B,EAAA,QACnDhmC,KAAAoQ,OAAA21B,GASArmC,OAAAkR,GACA,MAAA8iC,EAAyB6mB,GAAQj2B,UAAA1zB,EAAAo1B,WAAA,OACjCw1B,EAAyBjB,GAAQj2B,UAAA1zB,EAAAm1B,UAAA,GAEjCq2B,EAAAxrD,EAAAjU,KAAAiE,SAAAw7D,UACAP,EAAA,IAAgCtB,GAAQ6B,GAAA,IAExCh8C,EAAAxP,EAAAjU,KAAAiE,SAAAwf,QAEAs6D,EAAA,IAAoB1B,GAAcxd,EAAA5qD,EAAAm1B,UAAA0zB,UAAA/lB,EAAAmoB,EAAAz7C,GAElCpgB,KAAAgQ,MAAA0pE,aAAAgB,GACA16E,KAAA0iE,MAAAiX,eAAAe,GASAh7E,OAAAc,EAAAs1C,GAGA,GAFA91C,KAAAw5E,+BAEAh5E,aAA6Bu5D,IAM7B,UAAaxqC,EAAA,EACb,uGAIA,MAAAnP,EAAA5f,EAAA7D,KAAAiE,SAAAJ,EAAA7D,KAAAiE,SAAAwf,QAAA,KACAu6D,EAAA,IAA8B9B,GAAiBte,GAAQ50B,cAAAnlC,KAAA5C,KAAAk4C,EAAA11B,GAEvDpgB,KAAAgQ,MAAA0pE,aAAAiB,GACA36E,KAAA0iE,MAAAiX,eAAAgB,GAiBAj7E,MAAAkR,EAAAgqE,GACA56E,KAAAw5E,6BAEA,IAuBAqB,EAAAC,EAvBA1B,EAAAxoE,EAAAD,OAEA,IAAAyoE,EAAAzoE,OAMA,UAAa4e,EAAA,EAAa,4EAQ1B,GAJAqrD,IACAA,EAAAxB,EAAAzoE,SAGAC,EAAAD,OAAA6tB,cAAuCJ,aAAA,IAAoBqnB,SAAAm1B,GAC3D,UAAarrD,EAAA,EAAa,iFAQ1B,GACA,MAAAnP,EAAAg5D,EAAAz8E,KAAAiE,SAAAw4E,EAAAz8E,KAAAiE,SAAAwf,QAAA,KACAoiB,EAAA42C,EAAA3f,UAAA7oD,EAAAqnB,OACA/gB,EAAA,IAAqB+hE,GAAcroE,EAAA4xB,EAAA,KAAApiB,GAEnCpgB,KAAAgQ,MAAA0pE,aAAAxiE,GACAlX,KAAA0iE,MAAAiX,eAAAziE,GAGA2jE,GAAAC,IACAD,EAAAzB,EACA0B,EAAAlqE,EAAAD,OAAAwC,aAIAimE,GADAxoE,EAAA5Q,KAAA8zE,oBAAAljE,EAAAD,SACAA,aACGyoE,IAAAwB,GAEH,OACAhqE,WACAi4B,MAAA,IAAcwzB,GAAO9B,GAAQj2B,UAAAu2C,EAAA,OAAwCtgB,GAAQj2B,UAAAw2C,EAAA,KAa7Ep7E,KAAAmpC,EAAAkyC,GAGA,GAFA/6E,KAAAw5E,8BAEA3wC,EAAAtL,OAMA,UAAahO,EAAA,EAAa,0DAG1B,MAAA/uB,EAAAu6E,aAA6ChhB,GAAOghB,EAAA,IAAyBhhB,GAAOghB,GAEpF,GAAAv6E,EAAAghC,WAAA,EAMA,UAAajS,EAAA,EAAa,qEAG1B,UAAA/uB,EAAAmQ,OAMA,UAAa4e,EAAA,EAAa,yFAG1B,MAAAnP,EAAAyoB,EAAAlsC,KAAAiE,SAAAioC,EAAAlsC,KAAAiE,SAAAwf,QAAA,KAGAnQ,EAAA,IAAqBqoE,GAAezvC,EAAA7sB,MAAAxb,EAAA4f,GACpCpgB,KAAAgQ,MAAA0pE,aAAAzpE,GACAjQ,KAAA0iE,MAAAiX,eAAA1pE,GAEA,MAAAC,EAAA,IAAmB6nE,GACnBlvC,EAAA7sB,MAAA6rB,aAAA,GACAgB,EAAA5sB,IAAAgc,OAAA4Q,EAAA7sB,MAAAic,OACGsiC,GAAQj2B,UAAA9jC,EAAA,GACX,OAAA4f,EAAA,KAAAA,EAAA,GAGApgB,KAAAgQ,MAAA0pE,aAAAxpE,GACAlQ,KAAA0iE,MAAAiX,eAAAzpE,GASAxQ,OAAAc,GAGA,GAFAR,KAAAw5E,6BAEA,OAAAh5E,EAAAmQ,OAMA,UAAa4e,EAAA,EAAa,qFAG1BvvB,KAAAkQ,KAAamsD,GAAKhyB,UAAA7pC,GAAAR,KAAA8zE,oBAAAtzE,IAClBR,KAAAoQ,OAAA5P,GA0CAd,UAAA9B,EAAA4J,GAGA,GAFAxH,KAAAw5E,8BAEAhyE,GAAA,kBAAAA,EAAAsyE,eAMA,UAAavqD,EAAA,EACb,oHAIA,MAAAuqD,EAAAtyE,EAAAsyE,eACAjxC,EAAArhC,EAAAqhC,MACA8vC,OAAAh3E,IAAA6F,EAAAmxE,aAAAnxE,EAAAmxE,YAEA,GAAA34E,KAAA0iE,MAAA1B,QAAAv/D,IAAA7D,GAMA,UAAa2xB,EAAA,EAAa,6EAG1B,IAAAsZ,EAMA,UAAatZ,EAAA,EAAa,oFAG1B,OAAAuqD,GAIAkB,GAAAh7E,KAAApC,EAAA,KAAAirC,EAAA8vC,GAEA34E,KAAA0iE,MAAA1B,QAAA9iE,IAAAN,IALAoC,KAAA0iE,MAAA1B,QAAAia,KAAAr9E,EAAAirC,EAAAixC,EAAAnB,GAmDAj5E,aAAAw7E,EAAA1zE,MACAxH,KAAAw5E,6BAEA,MAAAjY,EAAA,iBAAA2Z,MAAAt9E,KACAu9E,EAAAn7E,KAAA0iE,MAAA1B,QAAA9iE,IAAAqjE,GAEA,IAAA4Z,EAMA,UAAa5rD,EAAA,EAAa,qFAG1B,MAAA6rD,EAAA,kBAAA5zE,EAAAsyE,eACAuB,EAAA,kBAAA7zE,EAAAmxE,YAGAA,EAAA0C,EAAA7zE,EAAAmxE,YAAAwC,EAAAxC,YAEA,IAAAyC,IAAA5zE,EAAAqhC,QAAAwyC,EAMA,UAAa9rD,EAAA,EACb,sHAIA,MAAA+rD,EAAAH,EAAA9Z,WACAka,EAAA/zE,EAAAqhC,MAAArhC,EAAAqhC,MAAAyyC,EAEAF,GAAA5zE,EAAAsyE,iBAAAqB,EAAAK,uBAEAh0E,EAAAsyE,eAGAkB,GAAAh7E,KAAAuhE,EAAA,KAAAga,EAAA5C,IAIAqC,GAAAh7E,KAAAuhE,EAAA+Z,EAAA,KAAA3C,GAGA34E,KAAA0iE,MAAA1B,QAAAia,KAAA1Z,EAAAga,OAAA55E,EAAAg3E,IAOAwC,EAAAK,uBACAR,GAAAh7E,KAAAuhE,EAAA+Z,EAAAC,EAAA5C,GAEA34E,KAAA0iE,MAAA1B,QAAAia,KAAA1Z,EAAAga,OAAA55E,EAAAg3E,GAWAj5E,aAAAw7E,GACAl7E,KAAAw5E,6BAEA,MAAA57E,EAAA,iBAAAs9E,MAAAt9E,KAEA,IAAAoC,KAAA0iE,MAAA1B,QAAAv/D,IAAA7D,GAMA,UAAa2xB,EAAA,EAAa,gFAG1B,MAAAxZ,EAAA/V,KAAA0iE,MAAA1B,QAAA9iE,IAAAN,GAEAmY,EAAAylE,uBAQAR,GAAAh7E,KAAApC,EAFAmY,EAAAsrD,WAEA,KAAAtrD,EAAA4iE,aAPA34E,KAAA0iE,MAAA1B,QAAAz+B,QAAA3kC,GAqEA8B,aAAAyoC,EAAAC,EAAA5gC,GACAxH,KAAAw5E,6BAEAx5E,KAAA0iE,MAAA9hE,SAAA+iC,UAAA8O,OAAAtK,EAAAC,EAAA5gC,GAaA9H,kBAAA+mC,EAAAxO,GACAj4B,KAAAw5E,6BAEAx5E,KAAA0iE,MAAA9hE,SAAA+iC,UAAA+O,UAAAjM,EAAAxO,GAsBAv4B,sBAAA+7E,EAAAn9E,GAGA,GAFA0B,KAAAw5E,6BAEA,iBAAAiC,EACAz7E,KAAA07E,uBAAAD,EAAAn9E,QAEA,UAAAM,EAAAN,KAAiC06D,GAAKyiB,GACtCz7E,KAAA07E,uBAAA98E,EAAAN,GAkBAoB,yBAAAi8E,GAGA,GAFA37E,KAAAw5E,6BAEA,iBAAAmC,EACA37E,KAAA47E,0BAAAD,QAEA,UAAA/8E,KAAA+8E,EACA37E,KAAA47E,0BAAAh9E,GAyBAc,2BACA,OAAAM,KAAA0iE,MAAA9hE,SAAA+iC,UAAAk4C,mBAYAn8E,wBAAA2pB,GACArpB,KAAA0iE,MAAA9hE,SAAA+iC,UAAAm4C,gBAAAzyD,GAQA3pB,uBAAAd,EAAAN,GACA,MAAAqlC,EAAA3jC,KAAA0iE,MAAA9hE,SAAA+iC,UAGA,GAAAA,EAAAgD,aAAAhD,EAAAiF,OAAAj4B,OAAA8wB,QAAA,CACA,MAAAs6C,EAAoBzY,GAAiB0Y,sBAAAp9E,GAErCoB,KAAAiJ,aAAA8yE,EAAAz9E,EAAAqlC,EAAAiF,OAAAj4B,QAGAgzB,EAAAmP,cAAAl0C,EAAAN,GAOAoB,0BAAAd,GACA,MAAA+kC,EAAA3jC,KAAA0iE,MAAA9hE,SAAA+iC,UAGA,GAAAA,EAAAgD,aAAAhD,EAAAiF,OAAAj4B,OAAA8wB,QAAA,CACA,MAAAs6C,EAAoBzY,GAAiB0Y,sBAAAp9E,GAErCoB,KAAAgJ,gBAAA+yE,EAAAp4C,EAAAiF,OAAAj4B,QAGAgzB,EAAAoP,iBAAAn0C,GAQAc,6BAUA,GAAAM,KAAA0iE,MAAAuZ,iBAAAj8E,KACA,UAAauvB,EAAA,EAAa,6EAiB1B,SAAAyqD,GAAAzsC,EAAA3uC,EAAAN,EAAAuqC,GACA,MAAA65B,EAAAn1B,EAAAm1B,MACAlhB,EAAAkhB,EAAA9hE,SAGA,IAIAgQ,EAGAsrE,EAGAC,EAVAC,EAAAvzC,EAAA7sB,MAYA,UAAAk+D,KAAArxC,EAAAoM,WAAsCzQ,SAAA,IACtC23C,EAAAjC,EAAA/nE,KAAA8E,aAAArY,GAIAgS,GAAAsrE,GAAAC,IAEAD,GAAA59E,GACAo7E,IAGA0C,EAAAxrE,GAGAA,EAAAspE,EAAAr0C,aACAq2C,EAAAC,EASA,SAAAzC,IACA,MAAA7wC,EAAA,IAAoBwzB,GAAK+f,EAAAxrE,GACzBwP,EAAAyoB,EAAAlsC,KAAAiE,SAAA4gD,EAAAphC,QAAA,KACA1P,EAAA,IAAwBmnE,GAAkBhvC,EAAAjqC,EAAAs9E,EAAA59E,EAAA8hB,GAE1CmtB,EAAAv9B,MAAA0pE,aAAAhpE,GACAgyD,EAAAiX,eAAAjpE,GAVAE,aAA0B2pD,IAAQ3pD,GAAAwrE,GAAAF,GAAA59E,GAClCo7E,IAoBA,SAAAO,GAAA1sC,EAAA3uC,EAAAN,EAAA6T,GACA,MAAAuwD,EAAAn1B,EAAAm1B,MACAlhB,EAAAkhB,EAAA9hE,SACAy7E,EAAAlqE,EAAA8E,aAAArY,GACA,IAAAiqC,EAAAn4B,EAEA,GAAA2rE,GAAA/9E,EAAA,CAGA,GAFA6T,EAAAxV,OAAAwV,EAEA,CAEA,MAAAiO,EAAAjO,EAAAvR,SAAA4gD,EAAAphC,QAAA,KAEA1P,EAAA,IAAmBqoE,GAAsB5mE,EAAAvT,EAAAy9E,EAAA/9E,EAAA8hB,OACtC,CAGH,MAAAA,GAFAyoB,EAAA,IAAewzB,GAAO9B,GAAQ50B,cAAAxzB,GAAAo7B,EAAAumC,oBAAA3hE,KAE9BxV,KAAAiE,SAAA4gD,EAAAphC,QAAA,KAEA1P,EAAA,IAAmBmnE,GAAkBhvC,EAAAjqC,EAAAy9E,EAAA/9E,EAAA8hB,GAGrCmtB,EAAAv9B,MAAA0pE,aAAAhpE,GACAgyD,EAAAiX,eAAAjpE,IAYA,SAAAsqE,GAAAztC,EAAA3vC,EAAAgkE,EAAAhsB,EAAA+iC,GACA,MAAAjW,EAAAn1B,EAAAm1B,MACAlhB,EAAAkhB,EAAA9hE,SAEA8P,EAAA,IAAuBgoE,GAAe96E,EAAAgkE,EAAAhsB,EAAA8sB,EAAA1B,QAAA2X,EAAAn3B,EAAAphC,SAEtCmtB,EAAAv9B,MAAA0pE,aAAAhpE,GACAgyD,EAAAiX,eAAAjpE,GAWA,SAAA0pE,GAAAxpE,EAAA4xB,EAAAxyB,EAAA0yD,GACA,IAAAhyD,EAEA,GAAAE,EAAAjU,KAAAiE,SAAA,CACA,MAAA4gD,EAAAkhB,EAAA9hE,SACAi7D,EAAA,IAAgCtB,GAAQ/Y,EAAA4a,WAAA,IAExC1rD,EAAA,IAAkBqnE,GAAannE,EAAA4xB,EAAAq5B,EAAAra,EAAAphC,cAE/B1P,EAAA,IAAkBonE,GAAelnE,EAAA4xB,GAGjCxyB,EAAA0pE,aAAAhpE,GACAgyD,EAAAiX,eAAAjpE,GAUA,SAAA+oE,GAAA6C,EAAAC,GAEA,OAAAD,IAAAC,GAKAD,aAAuBjD,IAAWkD,aAAqBlD,SCv5ClCmD,GAMrB98E,YAAA+8E,GAOAz8E,KAAA08E,kBAAAD,EAWAz8E,KAAA28E,kBAAA,IAAAl2E,IAUAzG,KAAA48E,kBAAA,IAAAn2E,IAYAzG,KAAA68E,gBAAA,IAAAp2E,IASAzG,KAAA88E,aAAA,EAYA98E,KAAA+8E,eAAA,KAYA/8E,KAAAg9E,4BAAA,KASAv7C,cACA,UAAAzhC,KAAA28E,kBAAApyE,MAAA,GAAAvK,KAAA68E,gBAAAtyE,KAWA7K,gBAAAgR,GAKA,OAAAA,EAAAnO,MACA,aACA,GAAAvC,KAAAi9E,qBAAAvsE,EAAAE,SAAAD,QACA,OAGA3Q,KAAAk9E,YAAAxsE,EAAAE,SAAAD,OAAAD,EAAAE,SAAAqnB,OAAAvnB,EAAA2xB,MAAAo3B,WAEA,MAEA,mBACA,sBACA,sBACA,UAAAtnD,KAAAzB,EAAAm4B,MAAA24B,WACAxhE,KAAAi9E,qBAAA9qE,EAAAxB,SAIA3Q,KAAAm9E,eAAAhrE,GAGA,MAEA,aACA,WACA,gBACA,MAAAirE,EAAAp9E,KAAAi9E,qBAAAvsE,EAAA8qD,eAAA7qD,QACA0sE,EAAAr9E,KAAAi9E,qBAAAvsE,EAAAgjC,eAAA/iC,QAEAysE,GACAp9E,KAAAs9E,YAAA5sE,EAAA8qD,eAAA7qD,OAAAD,EAAA8qD,eAAAvjC,OAAAvnB,EAAA8xB,SAGA66C,GACAr9E,KAAAk9E,YAAAxsE,EAAAgjC,eAAA/iC,OAAAD,EAAAunE,qBAAAhgD,OAAAvnB,EAAA8xB,SAGA,MAEA,cACA,GAAAxiC,KAAAi9E,qBAAAvsE,EAAAE,SAAAD,QACA,OAGA3Q,KAAAs9E,YAAA5sE,EAAAE,SAAAD,OAAAD,EAAAE,SAAAqnB,OAAA,GACAj4B,KAAAk9E,YAAAxsE,EAAAE,SAAAD,OAAAD,EAAAE,SAAAqnB,OAAA,GAEA,MAAA4Q,EAAkBwzB,GAAKt0B,4BAAAr3B,EAAAE,SAAA,GAEvB,UAAAmF,KAAA/V,KAAA08E,kBAAAa,4BAAA10C,GAAA,CACA,MAAAu4B,EAAArrD,EAAAsrD,WAEArhE,KAAAw9E,mBAAAznE,EAAAnY,KAAAwjE,IAAArrD,EAAA4iE,aAGA,MAEA,aACA,MAAAS,EAAA1oE,EAAAirD,cAAAhrD,OAGA3Q,KAAAi9E,qBAAA7D,IACAp5E,KAAAs9E,YAAAlE,EAAA1oE,EAAAirD,cAAA1jC,OAAAvnB,EAAA8xB,SAIAxiC,KAAAi9E,qBAAAvsE,EAAA8jC,kBAAA7jC,SACA3Q,KAAAk9E,YAAAxsE,EAAA8jC,kBAAA7jC,OAAAD,EAAA8jC,kBAAAvc,OAAA,GAIAvnB,EAAAmrD,mBACA77D,KAAAs9E,YAAA5sE,EAAAmrD,kBAAAlrD,OAAAD,EAAAmrD,kBAAA5jC,OAAA,GAGA,MAEA,aAEA,MAAAihD,EAAAxoE,EAAA8qD,eAAA7qD,OAEA3Q,KAAAi9E,qBAAA/D,EAAAvoE,SACA3Q,KAAAs9E,YAAApE,EAAAvoE,OAAAuoE,EAAAtzC,YAAA,GAIA,MAAA63C,EAAA/sE,EAAAmrD,kBAAAlrD,OAEA3Q,KAAAk9E,YAAAO,EAAA/sE,EAAAmrD,kBAAA5jC,OAAA,GAGA,MAAAylD,EAAAhtE,EAAAgjC,eAAA/iC,OAEA3Q,KAAAi9E,qBAAAS,IACA19E,KAAAk9E,YAAAQ,EAAAhtE,EAAAgjC,eAAAzb,OAAAihD,EAAAzf,WAGA,OAKAz5D,KAAA+8E,eAAA,KAYAr9E,mBAAA6hE,EAAAK,EAAAhsB,EAAA+iC,GACA,MAAAgF,EAAA39E,KAAA68E,gBAAA3+E,IAAAqjE,GAEAoc,GAOAA,EAAA/nC,WACA+nC,EAAAhF,cAEA,MAAAgF,EAAA/b,UAAA,MAAA+b,EAAA/nC,UAGA51C,KAAA68E,gBAAAptE,OAAA8xD,IAZAvhE,KAAA68E,gBAAAz1E,IAAAm6D,GACAK,WACAhsB,WACA+iC,gBAmBAj5E,qBACA,MAAAkK,KAEA,UAAAhM,EAAAi7D,KAAA74D,KAAA68E,gBACA,MAAAhkB,EAAA+I,UACAh4D,EAAAlI,MAAkB9D,OAAAirC,MAAAgwB,EAAA+I,WAIlB,OAAAh4D,EAQAlK,kBACA,MAAAkK,KAEA,UAAAhM,EAAAi7D,KAAA74D,KAAA68E,gBACA,MAAAhkB,EAAAjjB,UACAhsC,EAAAlI,MAAkB9D,OAAAirC,MAAAgwB,EAAAjjB,WAIlB,OAAAhsC,EAcAlK,iBACA,WAAAm5D,KAAA74D,KAAA68E,gBACA,GAAAhkB,EAAA8f,YACA,SAKA,OAAA34E,KAAA28E,kBAAApyE,KAAA,EAmBA7K,WAAA8H,GAAwBo2E,2BAAA,IAExB,GAAA59E,KAAA+8E,eACA,OAAAv1E,EAAAo2E,0BACA59E,KAAAg9E,4BAAAxmE,QAEAxW,KAAA+8E,eAAAvmE,QAKA,MAAAqnE,KAGA,UAAAr9E,KAAAR,KAAA28E,kBAAA5oE,OAAA,CAEA,MAAA+pE,EAAA99E,KAAA28E,kBAAAz+E,IAAAsC,GAAAshC,KAAA,CAAAliB,EAAAqU,IACArU,EAAAqY,SAAAhE,EAAAgE,OACArY,EAAArd,MAAA0xB,EAAA1xB,KAIA,UAAAqd,EAAArd,MAAA,IAGA,EAGAqd,EAAAqY,OAAAhE,EAAAgE,QAAA,KAIA8lD,EAAA/9E,KAAA48E,kBAAA1+E,IAAAsC,GAEAw9E,EAAAC,GAAAz9E,EAAAyhC,eAGAyb,EAAAwgC,GAAAH,EAAA37E,OAAA07E,GAEA,IAAAzgF,EAAA,EACAkV,EAAA,EAGA,UAAAurC,KAAAJ,EACA,SAAAI,EAEA+/B,EAAAn8E,KAAA1B,KAAAm+E,eAAA39E,EAAAnD,EAAA2gF,EAAA3gF,GAAAO,OAEAP,SACK,SAAAygD,EAEL+/B,EAAAn8E,KAAA1B,KAAAo+E,eAAA59E,EAAAnD,EAAA0gF,EAAAxrE,GAAA3U,OAEA2U,SACK,SAAAurC,EAAA,CAEL,MAAAugC,EAAAL,EAAA3gF,GAAAyJ,WACAw3E,EAAAP,EAAAxrE,GAAAzL,WACA,IAAA+hC,EAEA,YAAAm1C,EAAA3gF,GAAAO,KACAirC,EAAA,IAAkBwzB,GAAO9B,GAAQj2B,UAAA9jC,EAAAnD,GAA0Bk9D,GAAQj2B,UAAA9jC,EAAAnD,EAAA,QAC7D,CACN,MAAAuE,EAAApB,EAAAy5D,cAAA58D,GACAwrC,EAAA,IAAkBwzB,GAAO9B,GAAQj2B,UAAA9jC,EAAAnD,GAA0Bk9D,GAAQj2B,UAAA9jC,EAAA29B,SAAAv8B,GAAA,IAKnEi8E,EAAAn8E,QAAA1B,KAAAu+E,mBAAA11C,EAAAy1C,EAAAD,IAEAhhF,IACAkV,SAGAlV,IACAkV,IAMAsrE,EAAA/7C,KAAA,CAAAliB,EAAAqU,IAIArU,EAAAhP,SAAAjU,MAAAs3B,EAAArjB,SAAAjU,KACAijB,EAAAhP,SAAAjU,KAAAonC,SAAA9P,EAAArjB,SAAAjU,KAAAonC,UAAA,IAIAnkB,EAAAhP,SAAAk1B,QAAA7R,EAAArjB,UAEAgP,EAAA4+D,YAAAvqD,EAAAuqD,YAIA5+D,EAAAhP,SAAAiuB,SAAA5K,EAAArjB,WAAA,KAIA,QAAAvT,EAAA,EAAkBA,EAAAwgF,EAAAz7E,OAAoB/E,IAAA,CACtC,MAAAohF,EAAAZ,EAAAxgF,EAAA,GACAqhF,EAAAb,EAAAxgF,GAGAshF,EACA,UAAAF,EAAAl8E,MAAA,UAAAm8E,EAAAn8E,MACA,SAAAk8E,EAAA7gF,MAAA,SAAA8gF,EAAA9gF,MACA6gF,EAAA7tE,SAAAk1B,QAAA44C,EAAA9tE,UAGAguE,EACA,UAAAH,EAAAl8E,MAAA,UAAAm8E,EAAAn8E,MACA,SAAAk8E,EAAA7gF,MAAA,SAAA8gF,EAAA9gF,MACA6gF,EAAA7tE,SAAAD,QAAA+tE,EAAA9tE,SAAAD,QACA8tE,EAAA7tE,SAAAqnB,OAAAwmD,EAAAr8E,QAAAs8E,EAAA9tE,SAAAqnB,OAGA4mD,EACA,aAAAJ,EAAAl8E,MAAA,aAAAm8E,EAAAn8E,MACAk8E,EAAA7tE,SAAAD,QAAA+tE,EAAA9tE,SAAAD,QACA8tE,EAAA51C,MAAAtL,QAAAmhD,EAAA71C,MAAAtL,QACAkhD,EAAA7tE,SAAAqnB,OAAAwmD,EAAAr8E,QAAAs8E,EAAA9tE,SAAAqnB,QACAwmD,EAAAne,cAAAoe,EAAApe,cACAme,EAAAle,mBAAAme,EAAAne,mBACAke,EAAAje,mBAAAke,EAAAle,mBAEAme,GAAAC,GAAAC,KACAhB,EAAAxgF,EAAA,GAAA+E,SAEAy8E,IACAhB,EAAAxgF,EAAA,GAAAwrC,MAAA5sB,IAAA4hE,EAAAxgF,EAAA,GAAAwrC,MAAA5sB,IAAA4rB,aAAA,IAGAg2C,EAAAtqE,OAAAlW,EAAA,GACAA,KAKA,UAAA8U,KAAA0rE,SACA1rE,EAAAqsE,YAEA,aAAArsE,EAAA5P,cACA4P,EAAAvB,gBACAuB,EAAA/P,QAUA,OANApC,KAAA88E,aAAA,EAGA98E,KAAAg9E,4BAAAa,EAAArnE,QACAxW,KAAA+8E,eAAAc,EAAArnE,QAAAZ,OAAAkpE,IAEAt3E,EAAAo2E,0BACA59E,KAAAg9E,4BAEAh9E,KAAA+8E,eAOAr9E,QACAM,KAAA28E,kBAAAljE,QACAzZ,KAAA48E,kBAAAnjE,QACAzZ,KAAA68E,gBAAApjE,QACAzZ,KAAA+8E,eAAA,KAWAr9E,YAAAiR,EAAAsnB,EAAAuK,GACA,MAAAu8C,GAAsBx8E,KAAA,SAAA01B,SAAAuK,UAAAvgC,MAAAjC,KAAA88E,gBAEtB98E,KAAAg/E,YAAAruE,EAAAouE,GAWAr/E,YAAAiR,EAAAsnB,EAAAuK,GACA,MAAAu8C,GAAsBx8E,KAAA,SAAA01B,SAAAuK,UAAAvgC,MAAAjC,KAAA88E,gBAEtB98E,KAAAg/E,YAAAruE,EAAAouE,GAEA/+E,KAAAi/E,wBAAAtuE,EAAAsnB,EAAAuK,GASA9iC,eAAAyS,GACA,MAAA4sE,GAAsBx8E,KAAA,YAAA01B,OAAA9lB,EAAAyzB,YAAApD,QAAArwB,EAAAstB,WAAAx9B,MAAAjC,KAAA88E,gBAEtB98E,KAAAg/E,YAAA7sE,EAAAxB,OAAAouE,GAUAr/E,YAAAiR,EAAAouE,GAEA/+E,KAAAk/E,cAAAvuE,GAGA,MAAAmtE,EAAA99E,KAAAm/E,sBAAAxuE,GAGA3Q,KAAAo/E,cAAAL,EAAAjB,GAGAA,EAAAp8E,KAAAq9E,GAIA,QAAA1hF,EAAA,EAAkBA,EAAAygF,EAAA17E,OAAoB/E,IACtCygF,EAAAzgF,GAAAmlC,QAAA,IACAs7C,EAAAvqE,OAAAlW,EAAA,GAEAA,KAYAqC,sBAAAc,GACA,IAAAs9E,EAUA,OARA99E,KAAA28E,kBAAAl7E,IAAAjB,GACAs9E,EAAA99E,KAAA28E,kBAAAz+E,IAAAsC,IAEAs9E,KAEA99E,KAAA28E,kBAAAv1E,IAAA5G,EAAAs9E,IAGAA,EASAp+E,cAAAc,GACAR,KAAA48E,kBAAAn7E,IAAAjB,IACAR,KAAA48E,kBAAAx1E,IAAA5G,EAAAy9E,GAAAz9E,EAAAyhC,gBAYAviC,cAAA2/E,EAAAvB,GAiBAuB,EAAAC,cAAAD,EAAA78C,QAEA,UAAAr9B,KAAA24E,EAAA,CACA,MAAAyB,EAAAF,EAAApnD,OAAAonD,EAAA78C,QACAg9C,EAAAr6E,EAAA8yB,OAAA9yB,EAAAq9B,QAEA,aAAA68C,EAAA98E,OACA,UAAA4C,EAAA5C,OACA88E,EAAApnD,QAAA9yB,EAAA8yB,OACA9yB,EAAA8yB,QAAAonD,EAAA78C,QACM68C,EAAApnD,OAAAunD,IACNr6E,EAAAq9B,SAAA68C,EAAAC,cACAD,EAAAC,cAAA,IAIA,UAAAn6E,EAAA5C,MACA88E,EAAApnD,OAAA9yB,EAAA8yB,SACA9yB,EAAA8yB,QAAAonD,EAAA78C,SAIA,aAAAr9B,EAAA5C,MACA,GAAA88E,EAAApnD,QAAA9yB,EAAA8yB,OACA9yB,EAAA8yB,QAAAonD,EAAA78C,aACM,GAAA68C,EAAApnD,OAAAunD,EAAA,CAWN,MAAAh9C,EAAAr9B,EAAAq9B,QAEAr9B,EAAAq9B,QAAA68C,EAAApnD,OAAA9yB,EAAA8yB,OAIA6lD,EAAArwE,SACAlL,KAAA,YACA01B,OAAAsnD,EACA/8C,UAAAr9B,EAAAq9B,QACAvgC,MAAAjC,KAAA88E,iBAMA,aAAAuC,EAAA98E,KAAA,CACA,aAAA4C,EAAA5C,KACA,GAAAg9E,GAAAp6E,EAAA8yB,OACA9yB,EAAA8yB,QAAAonD,EAAA78C,aACM,GAAA+8C,GAAAC,EACN,GAAAH,EAAApnD,OAAA9yB,EAAA8yB,OAAA,CACA,MAAAwnD,EAAAF,EAAAp6E,EAAA8yB,OAEA9yB,EAAA8yB,OAAAonD,EAAApnD,OAEA9yB,EAAAq9B,SAAAi9C,EACAJ,EAAAC,eAAAG,OAEAt6E,EAAAq9B,SAAA68C,EAAAC,cACAD,EAAAC,cAAA,OAGA,GAAAD,EAAApnD,QAAA9yB,EAAA8yB,OACAonD,EAAAC,eAAAn6E,EAAAq9B,QACAr9B,EAAAq9B,QAAA,OACO,GAAA68C,EAAApnD,OAAAunD,EAAA,CACP,MAAAC,EAAAD,EAAAH,EAAApnD,OAEA9yB,EAAAq9B,SAAAi9C,EACAJ,EAAAC,eAAAG,EAcA,GATA,UAAAt6E,EAAA5C,OACAg9E,GAAAp6E,EAAA8yB,OACA9yB,EAAA8yB,QAAAonD,EAAA78C,QACM68C,EAAApnD,OAAA9yB,EAAA8yB,SACNonD,EAAAC,eAAAn6E,EAAAq9B,QACAr9B,EAAAq9B,QAAA,IAIA,aAAAr9B,EAAA5C,KACA,GAAAg9E,GAAAp6E,EAAA8yB,OACA9yB,EAAA8yB,QAAAonD,EAAA78C,aACM,GAAA68C,EAAApnD,OAAA9yB,EAAA8yB,OAAA,CACN,MAAAwnD,EAAAF,EAAAp6E,EAAA8yB,OAEA9yB,EAAA8yB,OAAAonD,EAAApnD,OACA9yB,EAAAq9B,SAAAi9C,OACM,GAAAJ,EAAApnD,OAAAunD,EACN,GAAAD,GAAAC,EAAA,CAMA,MAAAh9C,EAAAr9B,EAAAq9B,QAEAr9B,EAAAq9B,QAAA68C,EAAApnD,OAAA9yB,EAAA8yB,OAEA,MAAAynD,EAAAl9C,EAAAr9B,EAAAq9B,QAAA68C,EAAAC,cAIAxB,EAAArwE,SACAlL,KAAA,YACA01B,OAAAonD,EAAApnD,OACAuK,QAAAk9C,EACAz9E,MAAAjC,KAAA88E,sBAGA33E,EAAAq9B,SAAAg9C,EAAAH,EAAApnD,OAMA,gBAAAonD,EAAA98E,KAAA,CAEA,aAAA4C,EAAA5C,KACA,GAAA88E,EAAApnD,OAAA9yB,EAAA8yB,QAAAsnD,EAAAp6E,EAAA8yB,OAAA,CACA,GAAAsnD,EAAAC,EAAA,CAOA,MAAAG,GACAp9E,KAAA,YACA01B,OAAAunD,EACAh9C,QAAA+8C,EAAAC,EACAv9E,MAAAjC,KAAA88E,gBAGA98E,KAAAo/E,cAAAO,EAAA7B,GAEAA,EAAAp8E,KAAAi+E,GAGAN,EAAAC,cAAAn6E,EAAA8yB,OAAAonD,EAAApnD,OACAonD,EAAA78C,QAAA68C,EAAAC,mBACMD,EAAApnD,QAAA9yB,EAAA8yB,QAAAonD,EAAApnD,OAAAunD,IACND,EAAAC,GACAH,EAAAC,cAAAC,EAAAC,EACAH,EAAApnD,OAAAunD,GAEAH,EAAAC,cAAA,GAKA,aAAAn6E,EAAA5C,OAEA88E,EAAApnD,QAAA9yB,EAAA8yB,QAAAsnD,GAAAC,GAEAH,EAAAC,cAAA,EACAD,EAAA78C,QAAA,EACA68C,EAAApnD,OAAA,GACMonD,EAAApnD,QAAA9yB,EAAA8yB,QAAAsnD,GAAAC,IAENr6E,EAAAq9B,QAAA,KAMA68C,EAAA78C,QAAA68C,EAAAC,qBACAD,EAAAC,cAYA5/E,eAAAiR,EAAAsnB,EAAAr6B,GACA,OACA2E,KAAA,SACAqO,SAAa2pD,GAAQj2B,UAAA3zB,EAAAsnB,GACrBr6B,OACAwE,OAAA,EACAo8E,YAAAx+E,KAAA88E,gBAaAp9E,eAAAiR,EAAAsnB,EAAAr6B,GACA,OACA2E,KAAA,SACAqO,SAAa2pD,GAAQj2B,UAAA3zB,EAAAsnB,GACrBr6B,OACAwE,OAAA,EACAo8E,YAAAx+E,KAAA88E,gBAaAp9E,mBAAAmpC,EAAA08B,EAAAF,GAEA,MAAAua,KAGAva,EAAA,IAAA5+D,IAAA4+D,GAGA,UAAAzmE,EAAA+I,KAAA49D,EAAA,CAEA,MAAAz6C,EAAAu6C,EAAA5jE,IAAA7C,GAAAymE,EAAAnnE,IAAAU,GAAA,KAGAksB,IAAAnjB,GAEAi4E,EAAAl+E,MACAa,KAAA,YACAqO,SAAAi4B,EAAA7sB,MACA6sB,QAAA3D,QACA9iC,OAAA,EACAk+D,aAAA1hE,EACA2hE,kBAAA54D,EACA64D,kBAAA11C,EACA0zD,YAAAx+E,KAAA88E,iBAKAzX,EAAA51D,OAAA7Q,GAIA,UAAAA,EAAAksB,KAAAu6C,EAEAua,EAAAl+E,MACAa,KAAA,YACAqO,SAAAi4B,EAAA7sB,MACA6sB,QAAA3D,QACA9iC,OAAA,EACAk+D,aAAA1hE,EACA2hE,kBAAA,KACAC,kBAAA11C,EACA0zD,YAAAx+E,KAAA88E,iBAIA,OAAA8C,EAUAlgF,qBAAAc,GACA,MAAAmQ,EAAAnQ,EAAAmQ,OAEA,IAAAA,EACA,SAGA,MAAAmtE,EAAA99E,KAAA28E,kBAAAz+E,IAAAyS,GACAsnB,EAAAz3B,EAAAolC,YAEA,GAAAk4C,EACA,UAAAjlB,KAAAilB,EACA,aAAAjlB,EAAAt2D,MAAA01B,GAAA4gC,EAAA5gC,UAAA4gC,EAAA5gC,OAAA4gC,EAAAr2B,QACA,SAKA,OAAAxiC,KAAAi9E,qBAAAtsE,GAYAjR,wBAAAiR,EAAAsnB,EAAAuK,GACA,MAAAqG,EAAA,IAAoBwzB,GAAO9B,GAAQj2B,UAAA3zB,EAAAsnB,GAA8BsiC,GAAQj2B,UAAA3zB,EAAAsnB,EAAAuK,IAEzE,UAAArwB,KAAA02B,EAAA24B,UAAuCh9B,SAAA,IACvCryB,EAAAgtB,GAAA,aACAn/B,KAAA48E,kBAAAntE,OAAA0C,GACAnS,KAAA28E,kBAAAltE,OAAA0C,GAEAnS,KAAAi/E,wBAAA9sE,EAAA,EAAAA,EAAAsnD,aAQA,SAAAwkB,GAAAp/D,GACA,MAAAghE,KAEA,UAAAn8D,KAAA7E,EACA,GAAA6E,EAAAyb,GAAA,QACA,QAAA9hC,EAAA,EAAmBA,EAAAqmB,EAAA9jB,KAAAwC,OAAuB/E,IAC1CwiF,EAAAn+E,MACA9D,KAAA,QACAkJ,WAAA,IAAAL,IAAAid,EAAAsyB,wBAIA6pC,EAAAn+E,MACA9D,KAAA8lB,EAAA9lB,KACAkJ,WAAA,IAAAL,IAAAid,EAAAsyB,mBAKA,OAAA6pC,EAgDA,SAAA3B,GAAA4B,EAAAhC,GACA,MAAApgC,KAEA,IAAAzlB,EAAA,EACA8nD,EAAA,EAGA,UAAAlnB,KAAAilB,EAEAjlB,EAAA5gC,WACAylB,EAAAh8C,QAAA,IAAAs+E,OAAAnnB,EAAA5gC,UAAA/gB,MAAA,KAEA6oE,GAAAlnB,EAAA5gC,UAIA,UAAA4gC,EAAAt2D,MACAm7C,EAAAh8C,QAAA,IAAAs+E,OAAAnnB,EAAAr2B,SAAAtrB,MAAA,KAGA+gB,EAAA4gC,EAAA5gC,OAAA4gC,EAAAr2B,SACG,UAAAq2B,EAAAt2D,MACHm7C,EAAAh8C,QAAA,IAAAs+E,OAAAnnB,EAAAr2B,SAAAtrB,MAAA,KAGA+gB,EAAA4gC,EAAA5gC,OAEA8nD,GAAAlnB,EAAAr2B,UAEAkb,EAAAh8C,QAAA,IAAAs+E,OAAAnnB,EAAAr2B,SAAAtrB,MAAA,KAGA+gB,EAAA4gC,EAAA5gC,OAAA4gC,EAAAr2B,QAEAu9C,GAAAlnB,EAAAr2B,SAUA,OAJAu9C,EAAAD,GACApiC,EAAAh8C,QAAA,IAAAs+E,OAAAF,EAAAC,GAAA7oE,MAAA,KAGAwmC,EAIA,SAAAohC,GAAAjqD,GACA,MAAAorD,EAAAprD,EAAAjkB,UAAA,cAAAikB,EAAAjkB,SAAAjU,KAAAonC,SACAm8C,EAAArrD,EAAAgU,OAAA,cAAAhU,EAAAgU,MAAAlsC,KAAAonC,SAEA,OAAAk8C,IAAAC,QChjCeC,GAIfzgF,cAOAM,KAAAogF,eAYApgF,KAAAqgF,WAAA,IAAA55E,IAQAzG,KAAAsgF,kBAAA,IAAAt9E,IAQAtD,aAAAgR,GACA1Q,KAAAogF,YAAA36B,SAAA/0C,IAIA1Q,KAAAogF,YAAA1+E,KAAAgP,GAYAhR,cAAAoE,EAAA,EAAAsjB,EAAApiB,OAAAmyC,mBACA,OAAArzC,EAAA,KAIA9D,KAAAogF,YAAA5pE,MAAA1S,EAAAsjB,GAUA1nB,aAAAi3E,GACA,OAAA32E,KAAAogF,YAAAzJ,GAUAj3E,qBAAA6gF,EAAAC,GACAxgF,KAAAqgF,WAAAj5E,IAAAo5E,EAAAD,GACAvgF,KAAAsgF,kBAAAn9E,IAAAo9E,GASA7gF,mBAAAgR,GACA,OAAA1Q,KAAAqgF,WAAA5+E,IAAAiP,GASAhR,kBAAAgR,GACA,OAAA1Q,KAAAsgF,kBAAA7+E,IAAAiP,GAUAhR,mBAAA8gF,GACA,OAAAxgF,KAAAqgF,WAAAniF,IAAAsiF,ICzEO,SAAAC,GAAAh1D,EAAAwM,GACP,OAzBO,SAAAyoD,GACP,QAAAA,GAAA,GAAAA,EAAAt+E,QAAA,kBAAA4e,KAAA0/D,GAwBAC,CAAAl1D,EAAAqX,OAAA7K,EAAA,KAZO,SAAAyoD,GACP,QAAAA,GAAA,GAAAA,EAAAt+E,QAAA,kBAAA4e,KAAA0/D,GAWAE,CAAAn1D,EAAAqX,OAAA7K,IAUO,SAAA4oD,GAAAp1D,EAAAwM,GACP,OAjDO,SAAAyoD,GACP,QAAAA,GAAA,GAAAA,EAAAt+E,QAAA,sEAAA4e,KAAA0/D,GAgDAI,CAAAr1D,EAAAqX,OAAA7K,IC9CA,MAAA8oD,GAAA,mBAkBqBC,GAKrBthF,YAAAgjE,GAOA1iE,KAAA0iE,QAYA1iE,KAAAogB,QAAA,EAQApgB,KAAAihF,QAAA,IAAqBd,GAAOngF,MAQ5BA,KAAA2jC,UAAA,IAAuB2/B,GAAiBtjE,MASxCA,KAAAotC,MAAA,IAAmB9B,IAAaI,WAAA,aAQhC1rC,KAAA+/D,OAAA,IAAoByc,GAAM9Z,EAAA1B,SAQ1BhhE,KAAAqtC,YAAA,IAAArqC,IAGAhD,KAAAkhF,WAAA,QAAAH,IAGA/gF,KAAAmlB,SAAAu9C,EAAA,kBAAA5xC,EAAA1L,KACA,MAAA1U,EAAA0U,EAAA,GAEA,GAAA1U,EAAAqyD,qBAAAryD,EAAAimE,cAAA32E,KAAAogB,QAOA,UAAcmP,EAAA,EACd,uGACM7e,gBAGA+T,SAAA,YAGNzkB,KAAAmlB,SAAAu9C,EAAA,kBAAA5xC,EAAA1L,KACA,MAAA1U,EAAA0U,EAAA,GAEA1U,EAAAqyD,qBACA/iE,KAAA+/D,OAAAohB,gBAAAzwE,KAEM+T,SAAA,SAGNzkB,KAAAmlB,SAAAu9C,EAAA,kBAAA5xC,EAAA1L,KACA,MAAA1U,EAAA0U,EAAA,GAEA1U,EAAAqyD,sBACA/iE,KAAAogB,UACApgB,KAAAihF,QAAAvH,aAAAhpE,MAEM+T,SAAA,QAGN,IAAA28D,GAAA,EAEAphF,KAAAmlB,SAAAnlB,KAAA2jC,UAAA,cACAy9C,GAAA,IAOAphF,KAAAmlB,SAAAu9C,EAAA,WAAA5xC,EAAAyc,KACAvtC,KAAA+/D,OAAAt+B,UAAA2/C,IACAphF,KAAA44D,gBAAArrB,GAEAvtC,KAAA+/D,OAAAshB,iBACArhF,KAAA4nB,KAAA,cAAA2lB,EAAAv9B,OAEAhQ,KAAA4nB,KAAA,SAAA2lB,EAAAv9B,OAGAhQ,KAAA+/D,OAAAuhB,QACAF,GAAA,KAOAphF,KAAAmlB,SAAAu9C,EAAA1B,QAAA,UAAAlwC,EAAA/a,EAAA6rD,EAAAhsB,KAEA51C,KAAA+/D,OAAAyd,mBAAAznE,EAAAnY,KAAAgkE,EAAAhsB,EAAA7/B,EAAA4iE,aAEA,OAAA/W,GAEA7rD,EAAA8a,GAAA,UAAAC,EAAA8wC,KACA5hE,KAAA+/D,OAAAyd,mBAAAznE,EAAAnY,KAAAgkE,EAAA7rD,EAAAsrD,WAAAtrD,EAAA4iE,iBAYAvc,gBACA,OAAAp8D,KAAAy4D,QAAAsoB,IAWArhF,WAAAs0E,EAAA,QAAAjwC,EAAA,QACA,GAAA/jC,KAAAotC,MAAAlvC,IAAA6lC,GAQA,UAAaxU,EAAA,EACb,mFACK3xB,KAAAmmC,IAIL,MAAApnC,EAAA,IAAmB08E,GAAWr5E,KAAAg0E,EAAAjwC,GAG9B,OAFA/jC,KAAAotC,MAAAjqC,IAAAxG,GAEAA,EAMA+C,UACAM,KAAA2jC,UAAA0pB,UACArtD,KAAAqlB,gBAUA3lB,QAAA9B,EAAA,QACA,OAAAoC,KAAAotC,MAAAlvC,IAAAN,GAQA8B,eACA,OAAAmE,MAAAC,KAAA9D,KAAAotC,MAAAzwC,KAAAonC,UAAAnuB,OAAAhY,MAAAmjF,IAsCArhF,kBAAA4tC,GACAttC,KAAAqtC,YAAAlqC,IAAAmqC,GAQA5tC,SACA,MAAAs/B,EAAejB,GAAK/9B,MAMpB,OAHAg/B,EAAA2E,UAAA,mCACA3E,EAAA0jC,MAAA,uBAEA1jC,EAUAt/B,kBACA,UAAA/C,KAAAqD,KAAAotC,MACA,GAAAzwC,IAAAqD,KAAAo8D,UACA,OAAAz/D,EAIA,OAAAqD,KAAAo8D,UAUA18D,mBACA,MAAA6hF,EAAAvhF,KAAAwhF,kBACA9e,EAAA1iE,KAAA0iE,MACAC,EAAAD,EAAAC,OAGA/xD,EAAA8xD,EAAA6X,uBAAAgH,GAAA,IAIA,OAHA5e,EAAAsD,yBAAAr1D,IAGA8xD,EAAA9hB,YAAAhwC,GAWAlR,wBAAAmpC,GACA,OAAA44C,GAAA54C,EAAA7sB,QAAAylE,GAAA54C,EAAA5sB,KAQAvc,gBAAA6tC,GACA,IAAAC,GAAA,EAEA,GACA,UAAAtoB,KAAAllB,KAAAqtC,YAGA,GAFAG,EAAAtoB,EAAAqoB,GAGA,YAGGC,IAyDH,SAAAi0C,GAAAC,GACA,MAAAniD,EAAAmiD,EAAAniD,SAEA,GAAAA,EAAA,CACA,MAAA3/B,EAAA2/B,EAAA3/B,KACAq4B,EAAAypD,EAAAzpD,OAAAsH,EAAAqG,YAEA,OAAU66C,GAAqB7gF,EAAAq4B,KAAqB4oD,GAAsBjhF,EAAAq4B,GAG1E,SAdA5F,GAAK2uD,GAAU/7D,SC9YM08D,GAIrBjiF,cAOAM,KAAA44E,SAAA,IAAAnyE,IAUA/G,CAAAtB,OAAAqa,YACA,OAAAzY,KAAA44E,SAAAnsE,SASA/M,IAAA6hE,GACA,OAAAvhE,KAAA44E,SAAAn3E,IAAA8/D,GAUA7hE,IAAA6hE,GACA,OAAAvhE,KAAA44E,SAAA16E,IAAAqjE,IAAA,KAqBA7hE,KAAAw7E,EAAAryC,EAAA2yC,GAAA,EAAA7C,GAAA,GACA,MAAApX,EAAA2Z,aAA6C0G,GAAM1G,EAAAt9E,KAAAs9E,EACnD2G,EAAA7hF,KAAA44E,SAAA16E,IAAAqjE,GAEA,GAAAsgB,EAAA,CACA,MAAAjgB,EAAAigB,EAAAxgB,WACA,IAAA57D,GAAA,EAqBA,OAnBAm8D,EAAA97B,QAAA+C,KACAg5C,EAAAC,iBAAgChf,GAASqC,UAAAt8B,IACzCpjC,GAAA,GAGA+1E,GAAAqG,EAAArG,yBACAqG,EAAAE,wBAAAvG,EACA/1E,GAAA,GAGA,kBAAAkzE,MAAAkJ,EAAAlJ,cACAkJ,EAAAG,aAAArJ,EACAlzE,GAAA,GAGAA,GACAzF,KAAA4nB,KAAA,UAAA25C,EAAAsgB,EAAAjgB,EAAA/4B,GAGAg5C,EAGA,MAAAjd,EAAoB9B,GAASqC,UAAAt8B,GAC7B9yB,EAAA,IAAqB6rE,GAAMrgB,EAAAqD,EAAA4W,EAAA7C,GAK3B,OAHA34E,KAAA44E,SAAAxxE,IAAAm6D,EAAAxrD,GACA/V,KAAA4nB,KAAA,UAAA25C,EAAAxrD,EAAA,KAAA8yB,GAEA9yB,EAWArW,QAAAw7E,GACA,MAAA3Z,EAAA2Z,aAA6C0G,GAAM1G,EAAAt9E,KAAAs9E,EACnD2G,EAAA7hF,KAAA44E,SAAA16E,IAAAqjE,GAEA,QAAAsgB,IACA7hF,KAAA44E,SAAAnpE,OAAA8xD,GACAvhE,KAAA4nB,KAAA,UAAA25C,EAAAsgB,IAAAxgB,WAAA,MAEArhE,KAAAiiF,eAAAJ,IAEA,GAYAniF,sBAAAkR,GACA,UAAAmF,KAAA/V,KACA+V,EAAAsrD,WAAAj6B,iBAAAx2B,WACAmF,GAWArW,6BAAAmpC,GACA,UAAA9yB,KAAA/V,KACA,OAAA+V,EAAAsrD,WAAAzM,gBAAA/rB,WACA9yB,GAQArW,UACA,UAAAqW,KAAA/V,KAAA44E,SAAAnsE,SACAzM,KAAAiiF,eAAAlsE,GAGA/V,KAAA44E,SAAA,KAEA54E,KAAAqlB,gBAgBA3lB,iBAAA+b,GACA,UAAA1F,KAAA/V,KAAA44E,SAAAnsE,SACAsJ,EAAAnY,KAAAmmE,WAAAtoD,EAAA,aACA1F,GAWArW,eAAAqW,GACAA,EAAAsP,gBACAtP,EAAAmsE,oBAeA7vD,GAAKsvD,GAAkB18D,SAyEjB28D,GAUNliF,YAAA9B,EAAAgnE,EAAA4W,EAAA7C,GAOA34E,KAAApC,OAQAoC,KAAAmiF,WAAAniF,KAAA8hF,iBAAAld,GAQA5kE,KAAA+hF,wBAAAvG,EASAx7E,KAAAgiF,aAAArJ,EAUA6C,6BACA,IAAAx7E,KAAAmiF,WACA,UAAa5yD,EAAA,EAAa,6DAG1B,OAAAvvB,KAAA+hF,wBAQApJ,kBACA,IAAA34E,KAAAmiF,WACA,UAAa5yD,EAAA,EAAa,6DAG1B,OAAAvvB,KAAAgiF,aAQAtiF,WACA,IAAAM,KAAAmiF,WACA,UAAa5yD,EAAA,EAAa,6DAG1B,OAAAvvB,KAAAmiF,WAAAnmE,MAAAkpB,QAQAxlC,SACA,IAAAM,KAAAmiF,WACA,UAAa5yD,EAAA,EAAa,6DAG1B,OAAAvvB,KAAAmiF,WAAAlmE,IAAAipB,QAeAxlC,WACA,IAAAM,KAAAmiF,WACA,UAAa5yD,EAAA,EAAa,6DAG1B,OAAAvvB,KAAAmiF,WAAA/e,UAUA1jE,iBAAAklE,GAWA,OAVA5kE,KAAAmiF,YACAniF,KAAAkiF,mBAIAtd,EAAA55B,SAAA,gBAAA5jB,GAAApnB,MACA4kE,EAAA55B,SAAA,kBAAA5jB,GAAApnB,MAEAA,KAAAmiF,WAAAvd,EAEAA,EAQAllE,mBACAM,KAAAmiF,WAAAC,eAAA,eAAApiF,MACAA,KAAAmiF,WAAAC,eAAA,iBAAApiF,MACAA,KAAAmiF,WAAA58B,SACAvlD,KAAAmiF,WAAA,MAgCA9vD,GAAKuvD,GAAQ38D,SCjdQo9D,WAAqB9nB,GAS1C76D,YAAA/C,EAAAqnB,EAAAw2C,EAAA,UAGA,GAFAz6D,MAAApD,EAAAqnB,EAAAw2C,IAEAx6D,KAAArD,KAAAwiC,GAAA,eAMA,UAAa5P,EAAA,EACb,uGAkEA,WACAvvB,KAAAmlB,SACAnlB,KAAArD,KAAAiE,SAAA8hE,MACA,iBACA,CAAArnD,EAAA+J,KACA,MAAA1U,EAAA0U,EAAA,GAEA1U,EAAAqyD,qBAcA,SAAkBryD,GAClB,MAAA9G,EAAA5J,KAAAw8D,0BAAA9rD,GAEA,IAAA1Q,KAAA8lC,QAAAl8B,GAAA,CACA,MAAA04E,EAAAtiF,KAAAuiF,aAEAviF,KAAAgkB,KAAApa,EAAAoa,KACAhkB,KAAArD,KAAAiN,EAAAjN,KAEAqD,KAAA4nB,KAAA,SAAA06D,KAnBY9kF,KAAAwC,KAAA0Q,KAET+T,SAAA,UA3EejnB,KAAAwC,MAQlBN,SACAM,KAAAqlB,gBAQA3lB,aACA,WAAa66D,GAAQv6D,KAAArD,KAAAqD,KAAAgkB,KAAAxN,QAAAxW,KAAAw6D,YAUrB96D,oBAAAkR,EAAA4pD,GACA,WAAAx6D,KAAA4Q,EAAAjU,KAAAiU,EAAAoT,KAAAxN,QAAAgkD,GAAA5pD,EAAA4pD,aAmEAnoC,GAAKgwD,GAAcp9D,SClDbu9D,GACN9iF,YAAAgjE,EAAAn1B,EAAA38B,GAMA5Q,KAAA0iE,QAOA1iE,KAAAutC,SAOAvtC,KAAA4Q,WAaA5Q,KAAAyiF,aAAA,IAAAz/E,KAAAhD,KAAA4Q,SAAAD,SAOA3Q,KAAA2iE,OAAAD,EAAAC,OAEA3iE,KAAA0iF,uBAUAhjF,YAAA2iC,EAAAsgD,GACAtgD,EAAAx+B,MAAAC,KAAAu+B,GAEA,QAAAhlC,EAAA,EAAkBA,EAAAglC,EAAAjgC,OAAkB/E,IAAA,CACpC,MAAAiE,EAAA+gC,EAAAhlC,GAEA2C,KAAA4iF,YAAAthF,GACAuhF,QAAA,IAAAxlF,GAAAslF,EAAAE,QACAC,OAAAzlF,IAAAglC,EAAAjgC,OAAA,GAAAugF,EAAAG,SAKA9iF,KAAA2iE,OAAAqM,2BAAAhvE,KAAA0iF,oBAAA1iF,KAAAutC,QACAvtC,KAAA0iF,uBASAhjF,oBACA,OAAAM,KAAA+iF,aACU1mB,GAAK/xB,UAAAtqC,KAAA+iF,cAGf/iF,KAAA0iE,MAAAC,OAAAsD,yBAAAjmE,KAAA4Q,UAYAlR,YAAA4B,EAAAqsE,GAIA,GAAA3tE,KAAA2iE,OAAAkD,SAAAvkE,GAGA,YAFAtB,KAAAgjF,cAAA1hF,EAAAqsE,GAQA3tE,KAAAijF,gCAAA3hF,EAAAqsE,IAQA3tE,KAAAmZ,QAAA7X,GAcAtB,KAAAkjF,iBAAA5hF,EAAAqsE,IAnBA3tE,KAAAmjF,sBAAA7hF,EAAAqsE,GA2BAjuE,cAAA4B,EAAAqsE,GAEA3tE,KAAAijF,gCAAA3hF,GACAtB,KAAAmZ,QAAA7X,GAIAtB,KAAAojF,qBAAA9hF,EAAAqsE,GASAjuE,sBAAA4B,EAAAqsE,GAEArsE,EAAA69B,GAAA,WACAn/B,KAAAqjF,YAAA/hF,EAAA2gC,cAAA0rC,GAIA3tE,KAAAojF,qBAAA9hF,EAAAqsE,GAQAjuE,QAAA4B,GAEA,IAAAtB,KAAA2iE,OAAAuL,WAAAluE,KAAA4Q,SAAAtP,GAQA,YALGwO,GAAA,EAAG7P,MACN,oFACKqB,OAAAsP,SAAA5Q,KAAA4Q,WAML,MAAA0yE,EAAkBjB,GAAYkB,aAAAvjF,KAAA4Q,SAAA,UAE9B5Q,KAAAutC,OAAAt9B,OAAA3O,EAAAtB,KAAA4Q,UAEA5Q,KAAA4Q,SAAA0yE,EAAAf,aACAe,EAAA/9B,SAGAvlD,KAAA2iE,OAAAkD,SAAAvkE,KAAAtB,KAAA2iE,OAAAuL,WAAAluE,KAAA4Q,SAAA,SACA5Q,KAAA+iF,aAAAzhF,EAEAtB,KAAA+iF,aAAA,KAGA/iF,KAAA0iF,oBAAAhhF,KAAAJ,GAQA5B,iBAAA4B,EAAAqsE,GACA,KAAArsE,aAA0By4D,IAC1B,OAGA,MAAAypB,EAAAxjF,KAAAyjF,cAAAniF,EAAAqsE,GACA+V,EAAA1jF,KAAA2jF,eAAAriF,EAAAqsE,GACAiW,EAAuBvB,GAAY18C,cAAArkC,GACnCsiF,EAAAppB,WAAA,SACA,MAAAqpB,EAAwBxB,GAAYh9C,aAAA/jC,GAGpC,GAFAuiF,EAAArpB,WAAA,SAEAgpB,EAAA,CACA,MAAAM,EAAwBzB,GAAYkB,aAAAvjF,KAAA4Q,UACpCkzE,EAAAtpB,WAAA,SAEAx6D,KAAAutC,OAAAmtC,MAAAkJ,GAEA5jF,KAAA4Q,SAAAkzE,EAAAvB,aACAuB,EAAAv+B,SAGA,GAAAm+B,EAAA,CAEA1jF,KAAA4Q,SAAAk1B,QAAA+9C,IAII/zE,GAAA,EAAG7P,MAAA,iGAKPD,KAAA4Q,SAAmB2pD,GAAQj2B,UAAAu/C,EAAA79C,WAAA,OAI3B,MAAA89C,EAAA,IAA4BzB,GAAYriF,KAAA4Q,SAAAjU,KAAAqD,KAAA4Q,SAAAoT,KAAA,cAExChkB,KAAAutC,OAAAmtC,MAAAmJ,GAEA7jF,KAAA4Q,SAAAkzE,EAAAvB,aACAuB,EAAAv+B,UAGAi+B,GAAAE,IAGA1jF,KAAA0iF,oBAAAhhF,KAAA1B,KAAA4Q,SAAAD,QAGAizE,EAAAr+B,SACAs+B,EAAAt+B,SAWA7lD,cAAA4B,EAAAqsE,GACA,MAAAnsE,EAAAF,EAAAE,gBAEA,OAAAmsE,EAAAkV,SACArhF,aAAgCu4D,IAChC/5D,KAAAyiF,aAAAhhF,IAAAD,IACAxB,KAAA0iE,MAAAC,OAAAsL,WAAAzsE,EAAAF,GAWA5B,eAAA4B,EAAAqsE,GACA,MAAAx6D,EAAA7R,EAAA6R,YAEA,OAAAw6D,EAAAmV,QACA3vE,aAA4B4mD,IAC5B/5D,KAAAyiF,aAAAhhF,IAAA0R,IACAnT,KAAA0iE,MAAAC,OAAAsL,WAAA3sE,EAAA6R,GAUAzT,qBAAA4B,EAAAqsE,GACA,MAAAoW,EAAA/jF,KAAAutC,OAAAhqC,cAAA,aAKAvD,KAAAgkF,cAAAD,EAAA/jF,KAAA4Q,SAAAD,SAAA3Q,KAAA2iE,OAAAuL,WAAA6V,EAAAziF,KACAyiF,EAAA/vC,aAAA1yC,GACAtB,KAAA4iF,YAAAmB,EAAApW,IAUAjuE,gCAAA4B,GACA,MAAA+vE,EAAArxE,KAAAgkF,cAAA1iF,EAAAtB,KAAA4Q,SAAAD,QAEA,IAAA0gE,EACA,SAGA,KAAAA,GAAArxE,KAAA4Q,SAAAD,QAAA,CAEA,GAAA3Q,KAAA2iE,OAAA+K,QAAA1tE,KAAA4Q,SAAAD,QACA,SAGA,GAAA3Q,KAAA4Q,SAAA80B,UAAA,CACA,MAAA/0B,EAAA3Q,KAAA4Q,SAAAD,OACA3Q,KAAA4Q,SAAA5Q,KAAAutC,OAAA0lC,qBAAAtiE,GAIAA,EAAA8wB,SACAzhC,KAAAutC,OAAAn9B,OAAAO,QAEI,GAAA3Q,KAAA4Q,SAAAw0B,QACJplC,KAAA4Q,SAAA5Q,KAAAutC,OAAAumC,oBAAA9zE,KAAA4Q,SAAAD,YACI,CACJ,MAAAszE,EAAAjkF,KAAAutC,OAAAumC,oBAAA9zE,KAAA4Q,SAAAD,QAEA3Q,KAAAutC,OAAAr2B,MAAAlX,KAAA4Q,UAEA5Q,KAAA4Q,SAAAqzE,EAEAjkF,KAAAyiF,aAAAt/E,IAAAnD,KAAA4Q,SAAAm1B,YAIA,SAWArmC,cAAA4B,EAAAd,GACA,OAAAR,KAAA2iE,OAAAuL,WAAA1tE,EAAAc,GACAd,EAGAA,EAAAmQ,OACA3Q,KAAAgkF,cAAA1iF,EAAAd,EAAAmQ,QAGA,MCxae,SAAAuzE,GAAAxhB,EAAA/+B,EAAAn8B,MACf,GAAAm8B,EAAAgD,YACA,OAGA,MAAAg8B,EAAAD,EAAAC,OAEAD,EAAA7J,OAAAtrB,IAGA,IAAA/lC,EAAA28E,yBAgKA,SAAAxhB,EAAAh/B,GACA,MAAAi3C,EAAAjY,EAAAyhB,gBAAAzgD,GAEA,IAAAA,EAAAggC,sBAAAiX,GACA,SAGA,MAAA/xC,EAAAlF,EAAAyF,gBAEA,GAAAP,EAAA7sB,MAAArL,QAAAk4B,EAAA5sB,IAAAtL,OACA,SAGA,OAAAgyD,EAAAuL,WAAA0M,EAAA,aA7KAyJ,CAAA1hB,EAAAh/B,GAGA,YAkJA,SAAA4J,EAAA5J,GACA,MAAAi3C,EAAArtC,EAAAm1B,MAAAC,OAAAyhB,gBAAAzgD,GAEA4J,EAAAn9B,OAAAm9B,EAAAk7B,cAAAmS,IACA0J,GAAA/2C,IAAAsmC,iBAAA+G,EAAA,GAAAj3C,GAxJA4gD,CAAAh3C,EAAA5J,GAKA,MAAA6gD,EAAA7gD,EAAAyF,gBACAq7C,EAAAD,EAAAxoE,MACA0oE,EAAiBrC,GAAYkB,aAAAiB,EAAAvoE,IAAA,UAG7BuoE,EAAAxoE,MAAAsmD,WAAAkiB,EAAAvoE,MACAsxB,EAAAn9B,OAAAo0E,GAWAh9E,EAAAm9E,iBA8BA,SAAAC,EAAAr3C,EAAAk3C,EAAAC,GACA,MAAAG,EAAAJ,EAAA9zE,OACA,MAAAm0E,EAAAJ,EAAA/zE,OAIA,GAAAk0E,GAAAC,EACA,OAIA,GAAAv3C,EAAAm1B,MAAAC,OAAA+K,QAAAmX,IAAAt3C,EAAAm1B,MAAAC,OAAA+K,QAAAoX,GACA,OAMA,IAsDA,SAAAC,EAAAC,EAAAriB,GACA,MAAAsiB,EAAA,IAA0B5oB,GAAK0oB,EAAAC,GAE/B,UAAA1mF,KAAA2mF,EAAAhwC,YACA,GAAA0tB,EAAA+K,QAAApvE,EAAA6T,MACA,SAIA,SA/DA+yE,CAAAT,EAAAC,EAAAn3C,EAAAm1B,MAAAC,QACA,OAOA8hB,EAAAl3C,EAAAumC,oBAAA+Q,GACAH,EAAAn3C,EAAA0lC,qBAAA6R,GAEAJ,EAAA5+C,QAAA2+C,IAKAl3C,EAAAt9B,OAAA60E,EAAAL,GAMAl3C,EAAAmtC,MAAA+J,GAOA,KAAAC,EAAA/zE,OAAA8wB,SAAA,CACA,MAAA0jD,EAAAT,EAAA/zE,OAEA+zE,EAAAn3C,EAAA0lC,qBAAAkS,GAEA53C,EAAAn9B,OAAA+0E,GAIAP,EAAAr3C,EAAAk3C,EAAAC,GArFAE,CAAAr3C,EAAAk3C,EAAAC,GAQA/hB,EAAAqM,2BAAAyV,EAAA9zE,OAAAsxB,cAAAsL,IAGA5J,aAA4B2/B,GAC5B/1B,EAAAkI,aAAAgvC,GAEA9gD,EAAA8E,MAAAg8C,GA0EA,SAAA9hB,EAAA/xD,GACA,MAAAw0E,EAAAziB,EAAAuL,WAAAt9D,EAAA,SACAy0E,EAAA1iB,EAAAuL,WAAAt9D,EAAA,aAEA,OAAAw0E,GAAAC,EAzEAC,CAAA3iB,EAAA8hB,IACAH,GAAA/2C,EAAAk3C,EAAA9gD,GAGA+gD,EAAAn/B,WA0FA,SAAA++B,GAAA/2C,EAAA38B,EAAA+yB,GACA,MAAAogD,EAAAx2C,EAAAhqC,cAAA,aAEAgqC,EAAAt9B,OAAA8zE,EAAAnzE,GAEA+yB,aAA2B2/B,GAC3B/1B,EAAAkI,aAAAsuC,EAAA,GAEApgD,EAAA8E,MAAAs7C,EAAA,GCzLA,MAAAwB,GAAA,cAqCe,SAAAC,GAAA9iB,EAAA/+B,EAAAn8B,MACf,MAAAm7D,EAAAD,EAAAC,OACA8iB,EAAA,YAAAj+E,EAAA48B,UACAshD,EAAAl+E,EAAAk+E,KAAAl+E,EAAAk+E,KAAA,YAEA58C,EAAAnF,EAAAmF,MAEAnoC,EAAA,IAAoB25D,IACpBp2B,WAuIA,SAAAloB,EAAAypE,GACA,MAAA9oF,EAAAqf,EAAArf,KACAgpF,EAAmBprB,GAAQj2B,UAAA3nC,EAAA8oF,EAAA,SAE3B,OAAAA,EACA,IAAappB,GAAKrgD,EAAA2pE,GAElB,IAAatpB,GAAKspB,EAAA3pE,GA9IlB4pE,CAAA98C,EAAA28C,GACAlhD,kBAAA,EACAH,UAAAqhD,EAAA,uBAGA7lF,GAAee,SAAAgiE,SAAA8iB,YAAAC,QAEf,IAAA3gD,EAEA,KAAAA,EAAApkC,EAAAokC,QAAA,CACA,GAAAA,EAAAF,KACA,OAGA,MAAAj0B,EAAAi1E,GAAAjmF,EAAAmlC,EAAAzmC,OAEA,GAAAsS,EASA,YARA+yB,aAA6B2/B,GAC7BZ,EAAA7J,OAAAtrB,IACAA,EAAAu4C,kBAAAl1E,KAGA+yB,EAAA0H,SAAAz6B,KAWA,SAAAi1E,GAAAjmF,EAAAtB,GAGA,WAAAA,EAAAiE,KACA,eAAA3C,EAAA8lF,KA+DA,SAAA/kF,EAAA8kF,GACA,IAAAlmD,EAAA5+B,EAAAiQ,SAAA2uB,SAEA,GAAAA,EAAA,CACA,IAAAtH,EAAAt3B,EAAAiQ,SAAAqnB,OAAAsH,EAAAqG,YAEA,MAAAmgD,GAAAxmD,EAAA3/B,KAAAq4B,EAAAwtD,KAAAO,GAAAzmD,EAAAtH,EAAAwtD,IAAA,CACA9kF,EAAAokC,OAKA,MAAA1jC,EAAAokF,EAAA9kF,EAAAiQ,SAAAm1B,UAAAplC,EAAAiQ,SAAAo1B,WAGA,GAAA3kC,KAAA89B,GAAA,SAEA,MAAA8mD,EAAA5kF,EAAAzB,KAAAkjC,OAAA2iD,EAAA,EAAApkF,EAAAzB,KAAAwC,OAAA,GAGAmjF,GAAA9/B,SAAAwgC,KAEAtlF,EAAAokC,OAEAxF,EAAA5+B,EAAAiQ,SAAA2uB,UAIAtH,EAAAt3B,EAAAiQ,SAAAqnB,OAAAsH,EAAAqG,aAIA,OAAAjlC,EAAAiQ,SA9FAs1E,CAAAtmF,EAAAe,OAAAf,EAAA6lF,WAwCA,SAAA9kF,EAAA+kF,GACA,MAAAnmD,EAAA5+B,EAAAiQ,SAAA2uB,SAEA,GAAAA,EAAA,CACA,MAAA3/B,EAAA2/B,EAAA3/B,KACA,IAAAq4B,EAAAt3B,EAAAiQ,SAAAqnB,OAAAsH,EAAAqG,YAEA,KAAU66C,GAAqB7gF,EAAAq4B,IAAA,aAAAytD,GAA6C7E,GAAsBjhF,EAAAq4B,IAClGt3B,EAAAokC,OAEA9M,EAAAt3B,EAAAiQ,SAAAqnB,OAAAsH,EAAAqG,YAIA,OAAAjlC,EAAAiQ,SAnDAu1E,CAAAvmF,EAAAe,OAAAf,EAAA8lF,KAAA9lF,EAAA6lF,WAIA,GAAAnnF,EAAAiE,OAAA3C,EAAA6lF,UAAA,8BAEA,GAAA7lF,EAAA+iE,OAAAkD,SAAAvnE,EAAA6T,MACA,OAAUooD,GAAQj2B,UAAAhmC,EAAA6T,KAAAvS,EAAA6lF,UAAA,kBAIlB,GAAA7lF,EAAA+iE,OAAAuL,WAAA5vE,EAAAunC,aAAA,SACA,OAAAvnC,EAAAunC,iBAIA,CAEA,GAAAjmC,EAAA+iE,OAAA+K,QAAApvE,EAAA6T,MAIA,YAFAvS,EAAAe,OAAAikC,KAAA,QAMA,GAAAhlC,EAAA+iE,OAAAuL,WAAA5vE,EAAAunC,aAAA,SACA,OAAAvnC,EAAAunC,cAmFA,SAAAkgD,GAAAnmF,EAAAq4B,EAAAwtD,GAEA,MAAAW,EAAAnuD,GAAAwtD,EAAA,MAEA,OAAAF,GAAA9/B,SAAA7lD,EAAAkjC,OAAAsjD,IAQA,SAAAJ,GAAAzmD,EAAAtH,EAAAwtD,GACA,OAAAxtD,KAAAwtD,EAAAlmD,EAAA0G,UAAA,GCjHA,SAAAogD,GAAAx9C,EAAA0E,GACA,MAAA+4C,KAEAziF,MAAAC,KAAA+kC,EAAA24B,UAA8Bp9B,UAAA,cAG9Br2B,IAAAoE,GAAAo7B,EAAAitC,cAAAroE,IAKAyD,OAAA2wE,IAMA,OAHAA,EAAAvqE,MAAA8qB,QAAA+B,EAAA7sB,QAAAuqE,EAAAvqE,MAAA8pB,QAAA+C,EAAA7sB,UACAuqE,EAAAtqE,IAAA4iB,SAAAgK,EAAA5sB,MAAAsqE,EAAAtqE,IAAA6pB,QAAA+C,EAAA5sB,QAIApa,QAAA0kF,IACAD,EAAA5kF,KAAA6kF,EAAAvqE,MAAArL,QAEA48B,EAAAn9B,OAAAm2E,KAKAD,EAAAzkF,QAAA2kF,IACA,IAAA71E,EAAA61E,EAEA,KAAA71E,YAAA8wB,SAAA,CACA,MAAAglD,EAAAl5C,EAAAitC,cAAA7pE,GAEAA,WAEA48B,EAAAn9B,OAAAq2E,MCnFO,SAAAC,GAAAhkB,GACPA,EAAA9hE,SAAA+lF,kBAAAp5C,IAOA,SAAAA,EAAAm1B,GACA,MAAA/+B,EAAA++B,EAAA9hE,SAAA+iC,UACAg/B,EAAAD,EAAAC,OAEAr7B,KAEA,IAAAkG,GAAA,EAEA,UAAA6wB,KAAA16B,EAAAgG,YAAA,CAGA,MAAAi9C,EAAAC,GAAAxoB,EAAAsE,GAEAikB,GACAt/C,EAAA5lC,KAAAklF,GACAp5C,GAAA,GAEAlG,EAAA5lC,KAAA28D,GAKA,GAAA7wB,EAAA,CAGA,IAAAs5C,EAAAx/C,EAIA,GAAAA,EAAAllC,OAAA,GACA,MAAA2kF,EAAAz/C,EAAA,GAAAtrB,MACAgrE,EAAA1/C,IAAAllC,OAAA,GAAA6Z,IAEA6qE,GAAA,IAAuBzqB,GAAK0qB,EAAAC,IAG5Bz5C,EAAAkI,aAAAqxC,GAAqC18C,SAAAzG,EAAAqF,eA3CrCi+C,CAAA15C,EAAAm1B,IAoDA,SAAAmkB,GAAAh+C,EAAA85B,GACA,OAAA95B,EAAAlC,YAcA,SAAAkC,EAAA85B,GACA,MAAAukB,EAAAr+C,EAAA7sB,MAEAmrE,EAAAxkB,EAAAsD,yBAAAihB,GAIA,IAAAC,EACA,YAGA,MAAAC,EAAAD,EAAAnrE,MAGA,GAAAkrE,EAAAphD,QAAAshD,GACA,YAIA,GAAAA,EAAArhD,WAAA48B,EAAA+K,QAAA0Z,EAAArhD,WACA,WAAas2B,GAAK+qB,EAAiB7sB,GAAQl1B,aAAA+hD,EAAArhD,YAG3C,WAAYs2B,GAAK+qB,GApCjBC,CAAAx+C,EAAA85B,GA4CA,SAAA95B,EAAA85B,GACA,MAAA3mD,EAAA6sB,EAAA7sB,MACAC,EAAA4sB,EAAA5sB,IAEAqrE,EAAA3kB,EAAAuL,WAAAlyD,EAAA,SACAurE,EAAA5kB,EAAAuL,WAAAjyD,EAAA,SAEAurE,EAAA7kB,EAAAyhB,gBAAApoE,GACAyrE,EAAA9kB,EAAAyhB,gBAAAnoE,GAGA,GAAAurE,IAAAC,EAAA,CAIA,GAAAH,GAAAC,EACA,YAOA,GAsDA,SAAAvrE,EAAAC,EAAA0mD,GACA,MAAA+kB,EAAA1rE,EAAA+pB,YAAA48B,EAAA+K,QAAA1xD,EAAA+pB,YAAA48B,EAAAuL,WAAAlyD,EAAA,SACA2rE,EAAA1rE,EAAA+pB,aAAA28B,EAAA+K,QAAAzxD,EAAA+pB,aAAA28B,EAAAuL,WAAAjyD,EAAA,SAEA,OAAAyrE,GAAAC,EA1DAC,CAAA5rE,EAAAC,EAAA0mD,GAAA,CACA,MAAAklB,EAAAllB,EAAAsD,yBAAAjqD,EAAA,WACA8rE,EAAAnlB,EAAAsD,yBAAAhqD,EAAA,YAEA,WAAcogD,GAAKwrB,IAAA7rE,QAAA8rE,IAAA9rE,MAAAC,IAInB,MAAA8rE,EAAAP,MAAAroD,GAAA,eACA6oD,EAAAP,MAAAtoD,GAAA,eAIA,GAAA4oD,GAAAC,EAAA,CAGA,MAAA7jD,EAAwBo2B,GAAQj2B,UAAAkjD,EAAA,GAChC9yC,EAAsB6lB,GAAQj2B,UAAAmjD,EAAA,GAE9BI,EAAAE,EAAAE,GAAA9jD,EAAAw+B,EAAA,SAAA3mD,EACA8rE,EAAAE,EAAAC,GAAAvzC,EAAAiuB,EAAA,OAAA1mD,EAEA,WAAaogD,GAAKwrB,EAAAC,GAIlB,YA1FAI,CAAAr/C,EAAA85B,GAmGA,SAAAslB,GAAAr3E,EAAA+xD,EAAAwlB,GACA,IAAA7mF,EAAAsP,EAAAD,OACAA,EAAArP,EAGA,KAAAqhE,EAAA+K,QAAA/8D,cACArP,EAAAqP,EACAA,WAIA,gBAAAw3E,EAAwC5tB,GAAQ50B,cAAArkC,GAAyBi5D,GAAQl1B,aAAA/jC,SCtM5D8mF,GACrB1oF,cAOAM,KAAAghE,QAAA,IAAqB2gB,GAQrB3hF,KAAAY,SAAA,IAAsBogF,GAAQhhF,MAQ9BA,KAAA2iE,OAAA,IAAoBmK,GASpB9sE,KAAAqoF,mBAQAroF,KAAAi8E,eAAA,MAEA,yFACAp6E,QAAA8uB,GAAA3wB,KAAAgtE,SAAAr8C,IAIA3wB,KAAA6wB,GAAA,kBAAAC,EAAA1L,KACAA,EAAA,GAEAkjE,cACM7jE,SAAA,YAGNzkB,KAAA2iE,OAAA4lB,SAAA,SACA7a,SAAA,IAEA1tE,KAAA2iE,OAAA4lB,SAAA,UACAzY,QAAA,QACAlN,SAAA,IAEA5iE,KAAA2iE,OAAA4lB,SAAA,SACAzY,QAAA,WAEA9vE,KAAA2iE,OAAA4lB,SAAA,oBACAjY,eAAA,QACA5C,SAAA,IAEA1tE,KAAA2iE,OAAAxwB,OAAA,SAAgC29B,QAAA,qBAMhC9vE,KAAA2iE,OAAA4lB,SAAA,WACAzY,SAAA,oBAGE4W,GAAwB1mF,MAsC1BN,OAAAwlB,GACA,WAAAllB,KAAAqoF,gBAAAjmF,QAEApC,KAAAqoF,gBAAA3mF,MAA+BsO,MAAA,IAAY0mE,GAAKxxD,aAEhDllB,KAAAwoF,qBAAA,IAGAtjE,EAAAllB,KAAAi8E,gBAqCAv8E,cAAA+oF,EAAAvjE,GACA,iBAAAujE,EACAA,EAAA,IAAqB/R,GAAK+R,GACvB,mBAAAA,IACHvjE,EAAAujE,EACAA,EAAA,IAAqB/R,IAGrB12E,KAAAqoF,gBAAA3mF,MAA8BsO,MAAAy4E,EAAAvjE,aAE9B,GAAAllB,KAAAqoF,gBAAAjmF,QACApC,KAAAwoF,qBAeA9oF,eAAAgR,GACAA,EAAAg4E,WAsHAhpF,cAAAe,EAAA0nC,EAAAC,IL/Se,SAAAs6B,EAAAjiE,EAAA0nC,EAAAC,GACfs6B,EAAA7J,OAAAtrB,IACA,IAAA5J,GAKAA,EAHAwE,EAEGA,aAAiCu5B,IAASv5B,aAA0Bm7B,GACvEn7B,EAEAoF,EAAAktC,gBAAAtyC,EAAAC,GAJAs6B,EAAA9hE,SAAA+iC,WAOAgD,aACA+7B,EAAAwhB,cAAAvgD,GAGA,MAAAglD,EAAA,IAAwBnG,GAAS9f,EAAAn1B,EAAA5J,EAAAiF,QAEjC,IAAAggD,EAGAA,EADAnoF,EAAA0+B,GAAA,oBACA1+B,EAAAwhC,eAEAxhC,GAGAkoF,EAAAtF,YAAAuF,GAGA/F,SAAA,EACAC,QAAA,IAGA,MAAAltC,EAAA+yC,EAAAE,oBAGAjzC,EACAjS,aAA6B2/B,GAC7B/1B,EAAAkI,aAAAG,GAEAjS,EAAA8E,MAAAmN,GAWG9lC,GAAA,EAAGjN,KAAA,wFK6PJimF,CAAa9oF,KAAAS,EAAA0nC,EAAAC,GAoCf1oC,cAAAikC,EAAAn8B,GACE08E,GAAalkF,KAAA2jC,EAAAn8B,GAgCf9H,gBAAAikC,EAAAn8B,GACEg+E,GAAexlF,KAAA2jC,EAAAn8B,GAgCjB9H,mBAAAikC,GACA,OF9Ze,SAAA++B,EAAA/+B,GACf,OAAA++B,EAAA7J,OAAAtrB,IACA,MAAAw7C,EAAAx7C,EAAAx+B,yBACA85B,EAAAlF,EAAAyF,gBAEA,IAAAP,KAAAlC,YACA,OAAAoiD,EAGA,MAAApsF,EAAAksC,EAAA7sB,MAAArf,KACAqsF,EAAAngD,EAAA7sB,MAAAsgD,cAAAzzB,EAAA5sB,KACAgtE,EAAAtsF,EAAAusF,cAAAF,GAeA,IAAAG,EAYA,MAAA3mD,GARA2mD,EAFAtgD,EAAA7sB,MAAArL,QAAAk4B,EAAA5sB,IAAAtL,OAEAk4B,EAEA0E,EAAAqT,YACArT,EAAAsmC,iBAAAoV,EAAApgD,EAAA7sB,MAAAgI,KAAAglE,EAAA5mF,SACAmrC,EAAAsmC,iBAAAoV,EAAApgD,EAAA5sB,IAAA+H,KAAAglE,EAAA5mF,QAAA,KAIA6Z,IAAAgc,OAAAkxD,EAAAntE,MAAAic,OAGA,UAAA9lB,KAAAg3E,EAAA3nB,UAAkDh9B,SAAA,IAClDryB,EAAAgtB,GAAA,aACAoO,EAAA67C,WAAAj3E,EAAAvS,KAAAuS,EAAA6jC,gBAAA+yC,GAEAx7C,EAAAilC,OAAArgE,EAAA0H,QAAA,GAAAkvE,GAmBA,GAAAI,GAAAtgD,EAAA,CAEA,MAAA+M,EAAA/M,EAAA0yB,sBAAA4tB,EAAAntE,MAAAuxB,EAAAsmC,iBAAAkV,EAAA,GAAAvmD,GAAA,GAEA6mD,EAAA97C,EAAAqT,YAAArT,EAAAsmC,iBAAAkV,EAAA,GAAAnzC,EAAA55B,OAGAqqE,GAFA94C,EAAAqT,YAAAhL,EAAA35B,IAAAsxB,EAAAsmC,iBAAAkV,EAAA,QAEAx7C,GACA84C,GAAAgD,EAAA97C,GAGA,OAAAw7C,IEmVSO,CAAkBtpF,KAAA2jC,GAa3BjkC,WAAA6pF,GAKA,GAJAA,aAAiCxvB,KACjCwvB,EAAoBltB,GAAUhyB,UAAAk/C,IAG9BA,EAAA5iD,YACA,SAGA,UAAAx0B,KAAAo3E,EAAA/nB,WAEA,GAAArvD,EAAAgtB,GAAA,cAAAn/B,KAAA2iE,OAAAkD,SAAA1zD,GACA,SAIA,SAeAzS,uBAAA/C,EAAAqnB,EAAAw2C,GACA,WAAaD,GAAa59D,EAAAqnB,EAAAw2C,GAwB1B96D,iBAAA+mC,EAAAxO,GACA,OAASsiC,GAAaj2B,UAAAmC,EAAAxO,GAYtBv4B,oBAAAyS,GACA,OAASooD,GAAal1B,aAAAlzB,GAYtBzS,qBAAAyS,GACA,OAASooD,GAAa50B,cAAAxzB,GAkBtBzS,YAAAsc,EAAAC,GACA,WAAaogD,GAAUrgD,EAAAC,GAiBvBvc,cAAAc,GACA,OAAS67D,GAAUhyB,UAAA7pC,GAgBnBd,cAAAyS,GACA,OAASkqD,GAAU/xB,UAAAn4B,GAkEnBzS,gBAAAyoC,EAAAC,EAAA5gC,GACA,WAAak6D,GAAcv5B,EAAAC,EAAA5gC,GAa3B9H,cACA,WAAag3E,GAMbh3E,UACAM,KAAAY,SAAAysD,UACArtD,KAAAqlB,gBAUA3lB,qBACA,MAAA8pF,KAIA,IAFAxpF,KAAA4nB,KAAA,kBAEA5nB,KAAAqoF,gBAAAjmF,QAAA,CAEA,MAAAqnF,EAAAzpF,KAAAqoF,gBAAA,GAAAr4E,MACAhQ,KAAAi8E,eAAA,IAA6B1C,GAAMv5E,KAAAypF,GAGnC,MAAAC,EAAA1pF,KAAAqoF,gBAAA,GAAAnjE,SAAAllB,KAAAi8E,gBACAuN,EAAA9nF,KAAAgoF,GAGA1pF,KAAA4nB,KAAA,UAAA5nB,KAAAi8E,gBAEAj8E,KAAAqoF,gBAAAliD,QACAnmC,KAAAi8E,eAAA,KAKA,OAFAj8E,KAAA4nB,KAAA,iBAEA4hE,GA+FAn3D,GAAK+1D,GAAOr3D,UChwBS44D,GAIrBjqF,cAOAM,KAAA4pF,UAAA7rF,OAAAY,OAAkCyoD,IAQlC1nD,SAAA4lB,GAUAtlB,KAAA4pF,UAAAzkE,SAAAG,EAAA,WAAAwL,EAAA+4D,KACA7pF,KAAA4pF,UAAAhiE,KAAA,YAAsCkoB,GAAO+5C,QAiB7CnqF,IAAA0wC,EAAAlrB,EAAA1d,MACA,MAAAuoC,EAAkBI,GAAcC,GAChC3rB,EAAAjd,EAAAid,SAIAzkB,KAAA4pF,UAAAzkE,SAAAnlB,KAAA4pF,UAAA,YAAA75C,EAAA,CAAAjf,EAAA+4D,KACA3kE,EAAA2kE,EAAA,KAGAA,EAAA1nE,iBACA0nE,EAAA3nE,kBAIA4O,EAAA7M,SAIA6M,EAAA3J,QAAA,IACM1C,aASN/kB,MAAAmqF,GACA,QAAA7pF,KAAA4pF,UAAAhiE,KAAA,YAA8CkoB,GAAO+5C,MAMrDnqF,UACAM,KAAA4pF,UAAAvkE,uBCvGqBykE,WAAgCH,GAMrDjqF,YAAAkzB,GACA7yB,QAQAC,KAAA4yB,SAoBAlzB,IAAA0wC,EAAAlrB,EAAA1d,MACA,oBAAA0d,EAAA,CACA,MAAAimD,EAAAjmD,EAEAA,EAAA,EAAA6kE,EAAAt4B,KACAzxD,KAAA4yB,OAAAy4C,QAAAF,GACA1Z,MAIA1xD,MAAAqH,IAAAgpC,EAAAlrB,EAAA1d,gBCzBqBwiF,GAQrBtqF,YAAA4mE,GACA,MAAAwC,EAAA9oE,KAAA0I,YAAAuhF,eAWAjqF,KAAAsmE,OAAA,IAAoB/yC,GAAM+yC,EAAAtmE,KAAA0I,YAAAwhF,eAE1BlqF,KAAAsmE,OAAAvpE,OAAA,UAAA+rE,GAUA9oE,KAAAopE,QAAA,IAAqBP,GAAgB7oE,KAAA8oE,GAgBrC9oE,KAAAsrE,SAAA,IAAsBL,GAMtBjrE,KAAAmqF,OAAA,IAAoBte,GAAM7rE,KAAAsmE,OAAApoE,IAAA,aAQ1B8B,KAAAzB,EAAAyB,KAAAmqF,OAAA5rF,EAgBAyB,KAAAoH,IAAA,wBACApH,KAAAgb,KAAA,YAAAhb,KAAAoqF,MAAA,SAAuD3lE,SAAA,SACvDzkB,KAAAgb,KAAA,cAAAhb,KAAAoqF,MAAA,aAA6D3lE,SAAA,SAe7DzkB,KAAAoH,IAAA,iBAUApH,KAAA0iE,MAAA,IAAmB0lB,GASnBpoF,KAAAJ,KAAA,IAAkBo1E,GAAch1E,KAAA0iE,OAShC1iE,KAAAqqF,QAAA,IAAqBriB,GAAiBhoE,KAAA0iE,OACtC1iE,KAAAqqF,QAAAv5C,KAAAlwC,SAAA/B,KAAA,cAAAuoB,GAAApnB,MAUAA,KAAAsqF,WAAA,IAAwBvU,GAExB/1E,KAAAsqF,WAAA/B,SAAA,YAAAvoF,KAAAqqF,QAAApiB,mBAAAjoE,KAAAJ,KAAAqoE,qBACAjoE,KAAAsqF,WAAA/B,SAAA,mBAAAvoF,KAAAqqF,QAAApiB,qBACAjoE,KAAAsqF,WAAA/B,SAAA,gBAAAvoF,KAAAJ,KAAAqoE,qBAEAjoE,KAAAsqF,WAAA/B,SAAA,UAAAvoF,KAAAJ,KAAAs1E,mBA2BAl1E,KAAAuqF,WAAA,IAAwBT,GAAuB9pF,MAC/CA,KAAAuqF,WAAAplE,SAAAnlB,KAAAqqF,QAAAv5C,KAAAlwC,UAQAlB,cACA,MAAA4pE,EAAAtpE,KACAsmE,EAAAtmE,KAAAsmE,OAEA,OAOA,WACA,MAAA8C,EAAA9C,EAAApoE,IAAA,eACAmrE,EAAA/C,EAAApoE,IAAA,qBACAssF,EAAAlkB,EAAApoE,IAAA,oBAEA,OAAAorE,EAAAF,QAAAqhB,KAAArhB,EAAA3hD,OAAA+iE,GAAAnhB,GAZAqhB,GACA5gF,KAAA6gF,GACAC,EAAAD,EAAA,QACA7gF,KAAA,IAAA8gF,EAAAD,EAAA,eAEA7gF,KAAA,IAAA9J,KAAA4nB,KAAA,iBAUA,SAAAgjE,EAAAD,EAAAE,GACA,OAAAF,EAAAj+E,OAAA,CAAAo+E,EAAAxgB,IACAA,EAAAugB,GAIAC,EAAAhhF,KAAAwgE,EAAAugB,GAAAhsF,KAAAyrE,IAHAwgB,EAIInlF,QAAAC,YAaJlG,UACA,IAAAqrF,EAAAplF,QAAAC,UAMA,MAJA,gBAAA5F,KAAAoqF,QACAW,EAAA,IAAAplF,QAAAC,GAAA5F,KAAAgb,KAAA,QAAApV,KAGAmlF,EACAjhF,KAAA,KACA9J,KAAA4nB,KAAA,WACA5nB,KAAAqlB,gBACArlB,KAAAsrE,SAAAje,YAEAvjD,KAAA,IAAA9J,KAAAopE,QAAA/b,WACAvjD,KAAA,KACA9J,KAAA0iE,MAAArV,UACArtD,KAAAJ,KAAAytD,UACArtD,KAAAqqF,QAAAh9B,UACArtD,KAAAuqF,WAAAl9B,YAcA3tD,WAAA0lB,GACAplB,KAAAsrE,SAAAD,WAAAjmD,GAWA1lB,cAAA4mE,GACA,WAAA3gE,QAAAC,IACA,MAAAgtB,EAAA,IAAA5yB,KAAAsmE,GAEA1gE,EACAgtB,EAAAg4D,cACA9gF,KAAA,KACA8oB,EAAAhL,KAAA,aACAgL,EAAAhL,KAAA,WAEA9d,KAAA,IAAA8oB,OAMAP,GAAK23D,GAAQj5D,UC9SEi6D,GAOftrF,QAAAka,GACA,MACAnL,EADA7N,SAAAqqF,eAAAC,mBAAA,IACA3nF,cAAA,OAGA,OAFAkL,EAAAxK,YAAA2V,GAEAnL,EAAA+N,iBCRqB2uE,GAIrBzrF,cAOAM,KAAAorF,WAAA,IAAAC,UAQArrF,KAAAsrF,cAAA,IAA2BnpC,IAAetI,YAAcV,KAQxDn5C,KAAAurF,YAAA,IAAyBP,GAUzBtrF,OAAAijD,GAEA,MAAAD,EAAA1iD,KAAAsrF,cAAAvsC,UAAA4D,EAAA/hD,UAGA,OAAAZ,KAAAurF,YAAAC,QAAA9oC,GASAhjD,OAAAE,GAEA,MAAA8iD,EAAA1iD,KAAAyrF,OAAA7rF,GAGA,OAAAI,KAAAsrF,cAAA7rC,UAAAiD,GAWAhjD,OAAAE,GACA,MAAAgB,EAAAZ,KAAAorF,WAAAM,gBAAA9rF,EAAA,aACAga,EAAAhZ,EAAAmO,yBACAszB,EAAAzhC,EAAAszD,KAAAp+C,WAEA,KAAAusB,EAAAjgC,OAAA,GACAwX,EAAA3V,YAAAo+B,EAAA,IAGA,OAAAzoB,SC9CqB+xE,WAAuBrgD,GAM5C5rC,YAAAyqF,GACApqF,OAGA2rC,WAAA,YAIA1rC,KAAA6wB,GAAA,OAAAC,EAAAggB,EAAAlvC,KACAkvC,EAAA86C,YACA96C,EAAAviC,SAGAuiC,EAAAtwC,SAAAR,KAAA6rF,gBACA7rF,KAAA6rF,eAAAznF,aAAA0sC,EAAAtwC,QAAAR,KAAA6rF,eAAAhtE,SAAAjd,MAKA5B,KAAA6wB,GAAA,UAAAC,EAAAggB,KACAA,EAAAtwC,SAAAR,KAAA6rF,gBACA/6C,EAAAtwC,QAAA4P,WAUApQ,KAAAmqF,SAQAnqF,KAAA6rF,eAAA,KAOAnsF,UACAM,KAAA+N,IAAA+iC,KAAAuc,WAUA3tD,UAAAosF,GACA9rF,KAAA6rF,eAAAC,EAoCApsF,YAAAomB,GACA,IAAAA,EAAA1jB,SA+DA,SAAsB8vB,GACtB,OAAAA,EAAAC,MAAAvS,GAAA,iBAAAA,GAhE0BmsE,CAAajmE,GAMvC,UAAayJ,EAAA,EAAa,6EAG1B,OASAnI,GAAA4kE,IAEA,UAAAl7C,KAAA9wC,KACA,UAAAisF,KAAAnmE,EACAgrB,EAAA9F,SAAAihD,GAAA7kE,GAAA4kE,GAKAhsF,KAAA6wB,GAAA,OAAAC,EAAAggB,KACA,UAAAm7C,KAAAnmE,EACAgrB,EAAA9F,SAAAihD,GAAA7kE,GAAA4kE,KAKAhsF,KAAA6wB,GAAA,UAAAC,EAAAggB,KACA,UAAAm7C,KAAAnmE,EACAgrB,EAAAsxC,eAAA6J,EAAAD,QAoBA35D,GAAKiZ,GAAYva,IC7MjB,IAAIm7D,GAAe,EACfC,GAAkB,EAmCP,IAAAC,GALf,SAAA9tF,EAAAssB,GAEA,OAASuS,GAAS7+B,EAAQ4tF,GAAkBC,GAD5CvhE,EAAA,mBAAAA,SAAAjpB,ICfA,MAAA0qF,GAAA,qCAsCqBC,GAMrB5sF,YAAA+tE,GACA1vE,OAAAiR,OAAAhP,KAAuBusF,GAAWC,GAAK/e,KAUvCztE,KAAAysF,aAAA,EAiDAzsF,KAAA0sF,YAAA,KAYAhtF,SACA,MAAA4B,EAAAtB,KAAA2sF,aACAC,cAAA,IAKA,OAFA5sF,KAAAysF,aAAA,EAEAnrF,EAsCA5B,MAAA4B,GASA,OARAtB,KAAA0sF,aAouCA7tE,YACA+Q,YACA9oB,eApuCA9G,KAAA2sF,aACArrF,OACAurF,YAAA,EACAC,WAAA9sF,KAAA0sF,cAGAprF,EASA5B,OAAA4B,GACA,IAAAtB,KAAA0sF,YAMA,UAAan9D,EAAA,EAAa,mGAG1BvvB,KAAA+sF,wBAAAzrF,EAAAtB,KAAA0sF,aA+BAhtF,kBACA,SAAAstF,EAAAvf,GACA,GAAAA,EAAA5uD,SACA,UAAA6E,KAAA+pD,EAAA5uD,SACAouE,GAAAvpE,SACAA,EACMwpE,GAAAxpE,WACNspE,EAAAtpE,IAMAspE,CAAAhtF,MAwCAN,YAAAsxB,EAAA1L,GACA,OACA8B,GAAA,CAAA+lE,EAAAjoE,IACA,IAAAkoE,IACAC,oBAAAF,EACA9nF,UAAA8nF,EACAn8D,aAAA1L,UAAAJ,aAIAooE,GAAA,CAAAjoF,EAAAkoF,EAAAroE,IACA,IAAAsoE,IACAx8D,aAAA1L,UAAAjgB,YAAAkoF,cAAAroE,cA8DAxlB,cAAAY,EAAAmtE,GACAntE,EAAAmsF,aAQG38E,GAAA,EAAGjN,KAAA,4FAk9BN,SAAA4qF,EAAAntF,EAAAmtE,GACAA,EAAA3mE,aACAxG,EAAAwG,aACAxG,EAAAwG,eAGA4mF,GAAAptF,EAAAwG,WAAA2mE,EAAA3mE,aAGA2mE,EAAAkgB,iBACArtF,EAAAqtF,iBACArtF,EAAAqtF,mBAGAD,GAAAptF,EAAAqtF,eAAAlgB,EAAAkgB,iBAGAlgB,EAAAj1D,MACAlY,EAAAkY,KAAA9W,QAAA+rE,EAAAj1D,MAGA,GAAAi1D,EAAA5uD,UAAA4uD,EAAA5uD,SAAAzc,OAAA,CACA,GAAA9B,EAAAue,SAAAzc,QAAAqrE,EAAA5uD,SAAAzc,OAMA,UAAamtB,EAAA,EACb,uGAIA,IAAAq+D,EAAA,EAEA,UAAAzf,KAAAV,EAAA5uD,SACA4uE,EAAAntF,EAAAue,SAAA+uE,KAAAzf,IAn/BAsf,CAAAntF,EAA4BisF,GAAWC,GAAK/e,KAS5C/tE,YAAAE,GACA,IAAAiuF,EAUA,GANAA,EAFAjuF,EAAA0B,KAEAtB,KAAAsoB,KAAAtoB,KAAAwY,KAGAxY,KAAAsoB,IAAAtoB,KAAAwY,MAAAxY,KAAAwY,KAUA,UAAa+W,EAAA,EACb,yGAIA,OAAAvvB,KAAAwY,KACAxY,KAAA8tF,YAAAluF,GAEAI,KAAA+tF,eAAAnuF,GAUAF,eAAAE,GACA,IAAA0B,EAAA1B,EAAA0B,KAUA,OARAA,IACAA,EAAA1B,EAAA0B,KAAAV,SAAAotF,gBAAAhuF,KAAAtB,IAAA2tF,GAAArsF,KAAAsoB,MAGAtoB,KAAAiuF,kBAAAruF,GACAI,KAAAkuF,uBAAAtuF,GACAI,KAAAmuF,gBAAAvuF,GAEA0B,EASA5B,YAAAE,GACA,IAAA0B,EAAA1B,EAAA0B,KAoCA,OAjCAA,EACA1B,EAAAktF,WAAAt0E,KAAAlX,EAAAmC,YAEAnC,EAAA1B,EAAA0B,KAAAV,SAAAwU,eAAA,IAaAg5E,GAAApuF,KAAAwY,MACAxY,KAAAquF,mBACA1rB,OAAA3iE,KAAAwY,KACA81E,QAulBA,SAAAhtF,GACA,OACA5B,IAAApB,GACAgD,EAAAmC,YAAAnF,GAGAoB,SACA4B,EAAAmC,YAAA,KA9lBA8qF,CAAAjtF,GACA1B,SAUA0B,EAAAmC,YAAAzD,KAAAwY,KAAAlJ,KAAA,IAGAhO,EASA5B,kBAAAE,GACA,IAAA4uF,EAAA1lF,EAAA2lF,EAAAC,EAEA,IAAA1uF,KAAA8G,WACA,OAGA,MAAAxF,EAAA1B,EAAA0B,KACAwrF,EAAAltF,EAAAktF,WAEA,IAAA0B,KAAAxuF,KAAA8G,WAsCA,GApCA2nF,EAAAntF,EAAA2V,aAAAu3E,GAGA1lF,EAAA9I,KAAA8G,WAAA0nF,GAGA1B,IACAA,EAAAhmF,WAAA0nF,GAAAC,GAUAC,EAAc7mE,EAAQ/e,EAAA,KAAAA,EAAA,GAAApK,GAAAoK,EAAA,GAAApK,GAAA,KAmBtB0vF,GAAAtlF,GAAA,CAQA,MAAA6lF,EAAAD,EAAA5lF,EAAA,GAAAxK,MAAAwK,EAIAgkF,GAAA8B,GAAAJ,IACAG,EAAAlhF,QAAAghF,GAGAzuF,KAAAquF,mBACA1rB,OAAAgsB,EACAL,QAAAO,GAAAvtF,EAAAktF,EAAAE,GACA9uF,aAWA,SAAA4uF,GAAA,iBAAA1lF,EAAA,GACA9I,KAAA8uF,sBAAAhmF,EAAA,GAAAlJ,IAmBAktF,GAAA2B,GAAAG,GAAAJ,IACA1lF,EAAA2E,QAAAghF,GAmBAM,GAhBAjmF,IAUAiF,IAAAmsE,QAAA57E,OAAA47E,GAEAxtE,OAAA,CAAAunC,EAAAlP,IAAAkP,EAAAxsB,OAAAsd,OAEAr4B,OAAAsiF,GAAA,MAGA1tF,EAAA2tF,eAAAP,EAAAF,EAAA1lF,IAiCApJ,sBAAA0D,EAAAxD,GACA,MAAA0B,EAAA1B,EAAA0B,KAEA,UAAA4tF,KAAA9rF,EAAA,CACA,MAAA+rF,EAAA/rF,EAAA8rF,GAQAd,GAAAe,GACAnvF,KAAAquF,mBACA1rB,QAAAwsB,GACAb,QAAAc,GAAA9tF,EAAA4tF,GACAtvF,SAWA0B,EAAAkC,MAAA0rF,GAAAC,GAWAzvF,uBAAAE,GACA,MAAA0B,EAAA1B,EAAA0B,KACAmN,EAAA7O,EAAAgtF,aAAAhsF,SAAAmO,yBAAAzN,EACAurF,EAAAjtF,EAAAitF,WACA,IAAAe,EAAA,EAEA,UAAAlqE,KAAA1jB,KAAA6e,SACA,GAAAwwE,GAAA3rE,IACA,IAAAmpE,EAAA,CACAnpE,EAAA4rE,UAAAhuF,GAGA,UAAAwvC,KAAAptB,EACAjV,EAAAxK,YAAA6sC,EAAAtwC,eAGI,GAAAysF,GAAAvpE,GACJmpE,IACAnpE,EAAAkoE,YACAloE,EAAAnV,SAGAE,EAAAxK,YAAAyf,EAAAljB,eAEI,GAAWy6C,GAAMv3B,GACrBjV,EAAAxK,YAAAyf,QAEA,GAAAmpE,EAAA,CACA,MACA0C,GAqtBA1wE,YACA+Q,YACA9oB,eAxtBAlH,EAAAktF,WAGAjuE,SAAAnd,KAAA6tF,GAEA7rE,EAAAipE,aACArrF,KAAAmN,EAAAqH,WAAA83E,KACAf,YAAA,EACAC,WAAAyC,SAGA9gF,EAAAxK,YAAAyf,EAAAnV,UAKA3O,EAAAgtF,cACAtrF,EAAA2C,YAAAwK,GAWA/O,gBAAAE,GACA,GAAAI,KAAA2tF,eAIA,UAAA/uF,KAAAoB,KAAA2tF,eAAA,CACA,MAAA6B,EAAAxvF,KAAA2tF,eAAA/uF,GAAAmP,IAAA0hF,IACA,MAAAC,EAAAC,GAAA/wF,EAAAsY,MAAA,KAEA,OAAAu4E,EAAAG,yBAAAF,EAAAC,EAAA/vF,KAGAA,EAAAktF,YACAltF,EAAAktF,WAAAl9D,SAAAluB,KAAA8tF,IAkBA9vF,mBAAAijE,OAAqBA,EAAA2rB,UAAA1uF,SACrB,MAAAktF,EAAAltF,EAAAktF,WAGA+C,GAAAltB,EAAA2rB,EAAA1uF,GAEA,MAAA4vF,EAAA7sB,EAEA/sD,OAAAzD,IAAA48E,GAAA58E,IAEAyD,OAAAzD,KAAA6e,YAIAjjB,IAAA+hF,KAAAC,0BAAAptB,EAAA2rB,EAAA1uF,IAEAktF,GACAA,EAAAl9D,SAAAluB,KAAA8tF,GAaA9vF,wBAAA4B,EAAAwrF,GACA,UAAArvE,KAAAqvE,EAAAl9D,SAWA,UAAAogE,KAAAvyE,EACAuyE,IAIA,GAAAlD,EAAAt0E,KACAlX,EAAAmC,YAAAqpF,EAAAt0E,SADA,CAMA,UAAAg2E,KAAA1B,EAAAhmF,WAAA,CACA,MAAAgC,EAAAgkF,EAAAhmF,WAAA0nF,GAGA,OAAA1lF,EACAxH,EAAA0H,gBAAAwlF,GAEAltF,EAAA2H,aAAAulF,EAAA1lF,GAIA,QAAAzL,EAAA,EAAkBA,EAAAyvF,EAAAjuE,SAAAzc,SAAgC/E,EAClD2C,KAAA+sF,wBAAAzrF,EAAAwU,WAAAzY,GAAAyvF,EAAAjuE,SAAAxhB,MAKAg1B,GAAKi6D,GAAUrnE,SAORgrE,GAMPvwF,YAAA+tE,GACA1vE,OAAAiR,OAAAhP,KAAAytE,GA0CA/tE,SAAA4B,GACA,MAAAhD,EAAA0B,KAAAgxB,WAAAhxB,KAAAqF,WAEA,OAAArF,KAAAklB,SAAAllB,KAAAklB,SAAA5mB,EAAAgD,GAAAhD,EAaAoB,0BAAAijE,EAAA2rB,EAAA1uF,GACA,MAAAslB,EAAA,IAAA2qE,GAAAltB,EAAA2rB,EAAA1uF,GAKA,OAHAI,KAAAslB,QAAAH,SAAAnlB,KAAAgxB,WAAA,UAAAhxB,KAAAqF,UAAA6f,GAGA,KACAllB,KAAAslB,QAAAD,cAAArlB,KAAAgxB,WAAA,UAAAhxB,KAAAqF,UAAA6f,WAeOkoE,WAAA6C,GAUPvwF,yBAAAgwF,EAAAC,EAAA/vF,GACA,MAAAslB,EAAA,CAAA4L,EAAAs3B,KACAunC,IAAAvnC,EAAAh9C,OAAA8kF,QAAAP,KACA,mBAAA3vF,KAAAqtF,oBACArtF,KAAAqtF,oBAAAjlC,GAEApoD,KAAAgxB,WAAApJ,KAAA5nB,KAAAqtF,oBAAAjlC,KAQA,OAHApoD,KAAAslB,QAAAH,SAAAvlB,EAAA0B,KAAAouF,EAAAxqE,GAGA,KACAllB,KAAAslB,QAAAD,cAAAzlB,EAAA0B,KAAAouF,EAAAxqE,WAWOsoE,WAAAyC,GAIPvwF,SAAA4B,GAGA,OAAAytF,GAFAhvF,MAAAowF,SAAA7uF,MAEAtB,KAAAutF,cAAA,IAgBA,SAAAa,GAAAzrB,GACA,QAAAA,IAWAA,EAAArkE,QACAqkE,IAAArkE,OAGAuF,MAAAuJ,QAAAu1D,GACAA,EAAAtuB,KAAA+5C,IACEzrB,aAAAstB,IAgCF,SAAAJ,GAAAltB,EAAA2rB,GAAAhtF,KAAiDA,IACjD,IAAAhD,EAnBA,SAAAqkE,EAAArhE,GACA,OAAAqhE,EAAA50D,IAAA0hF,GAEAA,aAAAQ,GACAR,EAAAU,SAAA7uF,GAIAmuF,GAWAW,CAAAztB,EAAArhE,GAYAytF,GALAzwF,EADA,GAAAqkE,EAAAvgE,QAAAugE,EAAA,aAAA6qB,GACAlvF,EAAA,GAEAA,EAAAoO,OAAAsiF,GAAA,KAIAV,EAAAl+E,SAEAk+E,EAAAlnF,IAAA9I,GA8BA,SAAAuwF,GAAA/6E,EAAA06E,EAAA9vF,GACA,OACAgB,IAAApB,GACAwV,EAAAm7E,eAAAvwF,EAAA8vF,EAAAlwF,IAGAoB,SACAoU,EAAAu8E,kBAAA3xF,EAAA8vF,KAYA,SAAAY,GAAAt7E,EAAAo7E,GACA,OACAxvF,IAAApB,GACAwV,EAAAtQ,MAAA0rF,GAAA5wF,GAGAoB,SACAoU,EAAAtQ,MAAA0rF,GAAA,OASA,SAAS1C,GAAK/e,GAkBd,OAjBe2e,GAAa3e,EAAAnvE,IAY5B,GAAAA,iBAAA2xF,IAAA/C,GAAA5uF,IAAA2uF,GAAA3uF,IAAA+wF,GAAA/wF,IACA,OAAAA,IAiBA,SAASiuF,GAAS9e,GAclB,GAbA,iBAAAA,EACAA,EA0GA,SAAAA,GACA,OACAj1D,MAAAi1D,IA5GA6iB,CAAA7iB,GACEA,EAAAj1D,MA8HF,SAAAi1D,GACA5pE,MAAAuJ,QAAAqgE,EAAAj1D,QACAi1D,EAAAj1D,MAAAi1D,EAAAj1D,OA/HA+3E,CAAA9iB,GAGAA,EAAA58C,KACA48C,EAAAkgB,eAkFA,SAAA6C,GACA,UAAAlzF,KAAAkzF,EACAC,GAAAD,EAAAlzF,GAGA,OAAAkzF,EAvFAE,CAAAjjB,EAAA58C,WAGA48C,EAAA58C,KAGA48C,EAAAj1D,KAAA,CACAi1D,EAAA3mE,YA+CA,SAAA2M,GACA,UAAAmM,KAAAnM,EACAA,EAAAmM,GAAAthB,QACAmV,EAAAmM,GAAAthB,SAAAmpB,OAAAhU,EAAAmM,GAAAthB,QAGAmyF,GAAAh9E,EAAAmM,GApDA+wE,CAAAljB,EAAA3mE,YAGA,MAAA+X,KAEA,GAAA4uD,EAAA5uD,SACA,GAAAwwE,GAAA5hB,EAAA5uD,UACAA,EAAAnd,KAAA+rE,EAAA5uD,eAEA,UAAA6E,KAAA+pD,EAAA5uD,SACAquE,GAAAxpE,IAAAupE,GAAAvpE,IAAoDu3B,GAAMv3B,GAC1D7E,EAAAnd,KAAAgiB,GAEA7E,EAAAnd,KAAA,IAAyB4qF,GAAQ5oE,IAMjC+pD,EAAA5uD,WAGA,OAAA4uD,EAiHA,SAAAgjB,GAAAz8E,EAAApV,GACAiF,MAAAuJ,QAAA4G,EAAApV,MACAoV,EAAApV,IAAAoV,EAAApV,KAUA,SAAAowF,GAAA/6C,EAAA28C,GACA,OAAA7B,GAAA6B,GACA38C,EACE86C,GAAA96C,GACF28C,KAEY38C,KAAU28C,IAkBtB,SAAAlD,GAAA15E,EAAA68E,GACA,UAAAjxE,KAAAixE,EACA78E,EAAA4L,GACA5L,EAAA4L,GAAAle,QAAAmvF,EAAAjxE,IAEA5L,EAAA4L,GAAAixE,EAAAjxE,GAwDA,SAAAmvE,GAAAzwF,GACA,OAAAA,GAAA,IAAAA,EAOA,SAAA2uF,GAAA96E,GACA,OAAAA,aAAwB2+E,GAOxB,SAAA5D,GAAA/6E,GACA,OAAAA,aAAwBm6E,GAOxB,SAAA+C,GAAAl9E,GACA,OAAAA,aAAwBw5E,GAoBxB,SAAAiD,GAAAJ,GACA,eAAAA,GAAA,SAAAA,cCj1CqBsC,GAQrBpxF,YAAAyqF,GAgCAnqF,KAAAQ,QAAA,KAQAR,KAAA4rF,YAAA,EAUA5rF,KAAAmqF,SAWAnqF,KAAAzB,EAAA4rF,KAAA5rF,EAQAyB,KAAA+wF,iBAAA,IAA8BzlD,GAS9BtrC,KAAAgxF,iBAAAhxF,KAAAixF,mBAGAjxF,KAAA+wF,iBAAAlgE,GAAA,OAAAC,EAAAogE,KACAA,EAAA/G,WAkBAnqF,KAAAgtE,SAAA,UA8CAmkB,mBACA,OAAAnxF,KAAAoxF,cACApxF,KAAAoxF,cAGApxF,KAAAoxF,cAAgC9E,GAAQztF,KAAAmB,WAoCxCN,mBACA,MAAAwxF,EAAA,IAAyBvF,GAIzB,OAFA3rF,KAAA+wF,iBAAA5tF,IAAA+tF,GAEAA,EA8DAxxF,cAAAmf,GACQ+gB,GAAU/gB,KAClBA,OAGA,UAAA6E,KAAA7E,EACA7e,KAAAgxF,iBAAA7tF,IAAAugB,GAYAhkB,gBAAAmf,GACQ+gB,GAAU/gB,KAClBA,OAGA,UAAA6E,KAAA7E,EACA7e,KAAAgxF,iBAAA5gF,OAAAsT,GAaAhkB,YAAA0tE,GACAptE,KAAAM,SAAA,IAAsBgsF,GAAQlf,GAgB9B1tE,eAAA0tE,GACEkf,GAAQn6C,OAAAnyC,KAAAM,SAAA8sE,GA4DV1tE,SACA,GAAAM,KAAA4rF,WAMA,UAAar8D,EAAA,EAAa,yEAI1BvvB,KAAAM,WACAN,KAAAQ,QAAAR,KAAAM,SAAAiO,SAGAvO,KAAAqxF,cAAArxF,KAAAM,SAAAgxF,aAGAtxF,KAAA4rF,YAAA,EAWAlsF,UACAM,KAAAqlB,gBAEArlB,KAAA+wF,iBAAAhjF,IAAArQ,KAAA2vD,YC/ZO,SAAAkkC,IAAA/wF,QAA8BA,EAAA4K,SAAAomF,YAAAC,UAAAC,kBAG/BxoE,EAAU9d,KAChBA,OAKM8d,EAAUuoE,KAChBA,OAGA,MAAAE,EC3Ee,SAAAnxF,GACf,KAAAA,GAAA,QAAAA,EAAAkK,QAAApC,eAAA,CACA,GAAa,UAANkW,GAAMvhB,OAAAq2D,iBAAA9yD,GAAAoQ,SACb,OAAApQ,EAGAA,IAAAuiB,cAGA,YDkEmC6uE,CAAqBpxF,EAAAuiB,eACxD8uE,EAAA,IAAyB/9B,GAAItzD,GAC7Bk2D,EAAA,IAAwB5C,GAAI1oD,GAE5B,IAAA0mF,EACAl0F,EAGA,GAAA6zF,GAAAC,EAEE,CACF,MAAAK,EAAAN,GAAA,IAAqC39B,GAAI29B,GAAAO,aACzCj7B,EAAA26B,GAAA,IAA4C59B,GAAMt1C,GAAMvhB,SAExDW,EAAAk0F,GAgEA,SAAAN,EAAA96B,EAAAm7B,EAAAE,EAAAh7B,GACA,IAEAk7B,EACAC,EAHAC,EAAA,EACAC,EAAA,EAKA,MAAAC,EAAAR,EAAAh9B,UA6DA,OA3DA28B,EAAAn9C,KAAAzjC,IACA,MAAA0hF,EAAAC,GAAAC,GAAA5hF,EAAA8lD,EAAAm7B,GACA,IAAAY,EACAC,EAEA,GAAAX,EACA,GAAAh7B,EAAA,CAEA,MAAA47B,EAAAZ,EAAAn9B,gBAAAmC,GAKA07B,EAHAE,EAGAA,EAAAC,oBAAAL,GAEA,OAGAE,EAAAV,EAAAa,oBAAAL,GA6BA,SAAAM,IACAT,EAAAM,EACAP,EAAAM,EACAR,EAAAM,EACAL,EAAAI,EAKA,OAlCAv7B,IACA27B,EAAA37B,EAAA67B,oBAAAL,IAIAx7B,IAAAg7B,EACAW,EAAAN,GACAS,KAIA97B,GAAAg7B,EACAU,EAAAN,GACAU,IAKAH,EAAAN,GAAAK,GAAAN,EACAU,IACIH,GAAAN,GAAAK,EAAAN,GACJU,IAaAJ,IAAAJ,IAGAJ,GAAAC,EAAAD,GAAA,KAnIAa,CAAAtB,EAAA96B,EAAAm7B,EAAAE,EAAAh7B,IAGAy7B,GAAAhB,EAAA,GAAA96B,EAAAm7B,QATAj0F,EAAAk0F,GAAAU,GAAAhB,EAAA,GAAA96B,EAAAm7B,GAYA,IAAApxC,KAAMA,EAAAD,OAAYuyC,GAAAjB,GAElB,GAAAH,EAAA,CACA,MAAAqB,EAAAD,GAAA,IAA2Dj/B,GAAI69B,IAC/DsB,EAA+B5/B,GAAes+B,GAM9ClxC,GAAAuyC,EAAAvyC,KACAD,GAAAwyC,EAAAxyC,IAOAC,GAAAkxC,EAAA1sC,WACAzE,GAAAmxC,EAAAzsC,UAOAzE,GAAAwyC,EAAAxyC,KACAD,GAAAyyC,EAAAzyC,IAGA,OAASC,OAAAD,MAAA5iD,QAUT,SAAA40F,GAAA5hF,EAAA8lD,EAAAm7B,GACA,MAAApxC,KAAQA,EAAAD,MAAA5iD,QAAkBgT,EAAA8lD,EAAAm7B,GAE1B,OAAAj0F,EAAAi0F,EAAA3sD,QAAAguD,OAAAzyC,EAAAD,IA2FA,SAAAuyC,IAAAtyC,KAAsCA,EAAAD,QACtC,MAAAsE,QAAQA,EAAAhiC,WAAsBtE,GAAMvhB,OAEpC,OACAwjD,OAAAqE,EACAtE,MAAA19B,GE5Oe,SAAAqwE,GAAAzN,GASf,OAAApnF,KAAAonF,EHkeArzD,GAAKy+D,GAAM1pC,IACX/0B,GAAKy+D,GAAM//D,UI1eX,MAAAqiE,GAAaD,GAAM,MACnBE,GAA8B70E,GAAM5d,SAAAszD,WAyCfo/B,WAAyBxC,GAI9CpxF,YAAAyqF,GACApqF,MAAAoqF,GAEA,MAAAtrF,EAAAmB,KAAAmxF,aASAnxF,KAAAoH,IAAA,SASApH,KAAAoH,IAAA,UAiBApH,KAAAoH,IAAA,uBASApH,KAAAoH,IAAA,gBAUApH,KAAAoH,IAAA,gBAQApH,KAAAoH,IAAA,aAgBApH,KAAAS,QAAAT,KAAAixF,mBAEAjxF,KAAAuzF,aACAjrE,IAAA,MACAxhB,YACA0sF,OACA,KACA,mBACA30F,EAAAuoB,GAAA,WAAA9oB,uBAAuDA,KACvDO,EAAAyuF,GAAA,wCACAzuF,EAAAyuF,GAAA,2CACAzuF,EAAAuoB,GAAA,cAGA5jB,OACAg9C,IAAA3hD,EAAAuoB,GAAA,MAAAgsE,IACA3yC,KAAA5hD,EAAAuoB,GAAA,OAAAgsE,MAIAv0E,SAAA7e,KAAAS,UASAf,OACAM,KAAAyzF,WAAA,EAQA/zF,OACAM,KAAAyzF,WAAA,EAkCA/zF,SAAA8H,GACAxH,KAAA0zF,OAEA,MAAAC,EAA2BL,GAAgBK,iBAC3CC,EAAA71F,OAAAiR,WACAxO,QAAAR,KAAAQ,QACAgxF,WACAmC,EAAAE,gBACAF,EAAAG,oBACAH,EAAAI,oBACAJ,EAAAK,gBACAL,EAAAM,oBACAN,EAAAO,qBAEAzC,QAAA4B,GACA3B,eAAA,GACGlqF,IAEHg5C,IAASA,EAAAC,OAAA7iD,KAAAgT,GAA+B0iF,GAAgBa,oBAAAP,GAExD71F,OAAAiR,OAAAhP,MAAwBwgD,MAAAC,OAAA7vC,aAoCxBlR,IAAA8H,GACAxH,KAAAo0F,QAEAp0F,KAAAq0F,0BAAA,MACAr0F,KAAAyzF,UACAzzF,KAAAs0F,cAAA9sF,GAEAxH,KAAAu0F,iBAIAv0F,KAAAs0F,cAAA9sF,GAKAxH,KAAAmlB,SAAAnlB,KAAA,mBAAAA,KAAAq0F,2BAMA30F,QACAM,KAAAq0F,4BAEAr0F,KAAAu0F,eAIAv0F,KAAAqlB,cAAArlB,KAAA,mBAAAA,KAAAq0F,2BAEAr0F,KAAAq0F,0BAAA,KAEAr0F,KAAAw0F,QAWA90F,cAAA8H,GACAxH,KAAAy0F,SAAAjtF,GAEA,MAAA2wE,EAAAuc,GAAAltF,EAAA4D,QACAupF,EAAAntF,EAAAiqF,QAAAiD,GAAAltF,EAAAiqF,SAAA4B,GAGArzF,KAAAmlB,SAAiB3G,GAAM5d,SAAA,UAAAkwB,EAAAs3B,KACvB,MAAAwsC,EAAAxsC,EAAAh9C,OAGAypF,EAAA1c,GAAAyc,EAAAzgC,SAAAgkB,GAGA2c,EAAAH,GAAAC,EAAAzgC,SAAAwgC,IAIAE,IAAAC,GAAA3c,GAAAwc,GACA30F,KAAAy0F,SAAAjtF,KAEM0gD,YAAA,IAGNloD,KAAAmlB,SAAiB3G,GAAMvhB,OAAA,cACvB+C,KAAAy0F,SAAAjtF,KASA9H,eACAM,KAAAqlB,cAAsB7G,GAAM5d,SAAA,UAC5BZ,KAAAqlB,cAAsB7G,GAAMvhB,OAAA,WAU5B,SAAAy3F,GAAA31F,GACA,OAAMmjD,GAASnjD,GACfA,EAGMq0D,GAAOr0D,GACbA,EAAAi2D,wBAGA,mBAAAj2D,EACA21F,GAAA31F,KAGA,KA2VA,SAAAg2F,GAAAr+B,EAAAs+B,GACA,OAAAt+B,EAAAlW,IAAAw0C,EAAAvgC,OAA8C6+B,GAAgB2B,oBAS9D,SAAAC,GAAAx+B,GACA,OAAAA,EAAAhD,OAA4B4/B,GAAgB2B,oBAnV5C3B,GAAgB6B,sBAAA,GAmBhB7B,GAAgB2B,oBAAA,GAQhB3B,GAAgBa,oBAAuB5C,GA6KvC+B,GAAgBK,kBAGhBK,gBAAA,CAAAt9B,EAAAs+B,MACAx0C,IAAAu0C,GAAAr+B,EAAAs+B,GACAv0C,KAAAiW,EAAAjW,KAAAiW,EAAAhW,MAAA,EAAAs0C,EAAAt0C,MAAA,EACA9iD,KAAA,YAGAs2F,oBAAA,CAAAx9B,EAAAs+B,MACAx0C,IAAAu0C,GAAAr+B,EAAAs+B,GACAv0C,KAAAiW,EAAAjW,KAAAiW,EAAAhW,MAAA,EAAAs0C,EAAAt0C,MAAqE4yC,GAAgB6B,sBACrFv3F,KAAA,aAGAq2F,oBAAA,CAAAv9B,EAAAs+B,MACAx0C,IAAAu0C,GAAAr+B,EAAAs+B,GACAv0C,KAAAiW,EAAAjW,KAAAiW,EAAAhW,MAAA,EAAiD4yC,GAAgB6B,sBACjEv3F,KAAA,aAKAw3F,oBAAA,CAAA1+B,EAAAs+B,MACAx0C,IAAAu0C,GAAAr+B,EAAAs+B,GACAv0C,KAAAiW,EAAAjW,KAAAu0C,EAAAt0C,MAAA,EACA9iD,KAAA,YAGAy3F,wBAAA,CAAA3+B,EAAAs+B,MACAx0C,IAAAu0C,GAAAr+B,EAAAs+B,GACAv0C,KAAAiW,EAAAjW,KAA0B6yC,GAAgB6B,sBAC1Cv3F,KAAA,aAGA03F,wBAAA,CAAA5+B,EAAAs+B,MACAx0C,IAAAu0C,GAAAr+B,EAAAs+B,GACAv0C,KAAAiW,EAAAjW,KAAAu0C,EAAAt0C,MAA8C4yC,GAAgB6B,sBAC9Dv3F,KAAA,aAKA23F,oBAAA,CAAA7+B,EAAAs+B,MACAx0C,IAAAu0C,GAAAr+B,EAAAs+B,GACAv0C,KAAAiW,EAAAlD,MAAAwhC,EAAAt0C,MAAA,EACA9iD,KAAA,YAGA43F,wBAAA,CAAA9+B,EAAAs+B,MACAx0C,IAAAu0C,GAAAr+B,EAAAs+B,GACAv0C,KAAAiW,EAAAlD,MAAAwhC,EAAAt0C,MAA+C4yC,GAAgB6B,sBAC/Dv3F,KAAA,aAGA63F,wBAAA,CAAA/+B,EAAAs+B,MACAx0C,IAAAu0C,GAAAr+B,EAAAs+B,GACAv0C,KAAAiW,EAAAlD,MAA2B8/B,GAAgB6B,sBAC3Cv3F,KAAA,aAKAi2F,gBAAA,CAAAn9B,EAAAs+B,MACAx0C,IAAA00C,GAAAx+B,GACAjW,KAAAiW,EAAAjW,KAAAiW,EAAAhW,MAAA,EAAAs0C,EAAAt0C,MAAA,EACA9iD,KAAA,YAGAm2F,oBAAA,CAAAr9B,EAAAs+B,MACAx0C,IAAA00C,GAAAx+B,GACAjW,KAAAiW,EAAAjW,KAAAiW,EAAAhW,MAAA,EAAAs0C,EAAAt0C,MAAqE4yC,GAAgB6B,sBACrFv3F,KAAA,aAGAk2F,oBAAA,CAAAp9B,EAAAs+B,MACAx0C,IAAA00C,GAAAx+B,GACAjW,KAAAiW,EAAAjW,KAAAiW,EAAAhW,MAAA,EAAiD4yC,GAAgB6B,sBACjEv3F,KAAA,aAKA83F,oBAAA,CAAAh/B,EAAAs+B,MACAx0C,IAAA00C,GAAAx+B,GACAjW,KAAAiW,EAAAjW,KAAAu0C,EAAAt0C,MAAA,EACA9iD,KAAA,YAGA+3F,wBAAA,CAAAj/B,EAAAs+B,MACAx0C,IAAA00C,GAAAx+B,GACAjW,KAAAiW,EAAAjW,KAA0B6yC,GAAgB6B,sBAC1Cv3F,KAAA,aAGAg4F,wBAAA,CAAAl/B,EAAAs+B,MACAx0C,IAAA00C,GAAAx+B,GACAjW,KAAAiW,EAAAjW,KAAAu0C,EAAAt0C,MAA8C4yC,GAAgB6B,sBAC9Dv3F,KAAA,aAKAi4F,oBAAA,CAAAn/B,EAAAs+B,MACAx0C,IAAA00C,GAAAx+B,GACAjW,KAAAiW,EAAAlD,MAAAwhC,EAAAt0C,MAAA,EACA9iD,KAAA,YAGAk4F,wBAAA,CAAAp/B,EAAAs+B,MACAx0C,IAAA00C,GAAAx+B,GACAjW,KAAAiW,EAAAlD,MAAAwhC,EAAAt0C,MAA+C4yC,GAAgB6B,sBAC/Dv3F,KAAA,aAGAm4F,wBAAA,CAAAr/B,EAAAs+B,MACAx0C,IAAA00C,GAAAx+B,GACAjW,KAAAiW,EAAAlD,MAA2B8/B,GAAgB6B,sBAC3Cv3F,KAAA,oBC7qBqBo4F,WAA0BrjE,GAI/Cw2C,wBACA,0BAMAzpE,OAOAM,KAAA8wC,KAAA,IAAkBwiD,GAalBtzF,KAAAi2F,gBAAA,MACA,MAAAnlD,EAAA9wC,KAAA4yB,OAAAy3D,QAAAv5C,KAEAlN,EADAkN,EAAAlwC,SACA+iC,UAAAC,gBAEA,OAAAA,EACAkN,EAAAC,aAAAwL,aAAA3Y,EAAAjnC,MAGA,OAUAqD,KAAAk2F,OAAA,IAAAzvF,IAGAzG,KAAA4yB,OAAAujE,GAAArlD,KAAAojB,KAAA/wD,IAAAnD,KAAA8wC,MAGA9wC,KAAA4yB,OAAAujE,GAAAC,aAAAjzF,IAAAnD,KAAA8wC,KAAAtwC,SASA61F,kBACA,MAAAlkF,EAAAnS,KAAAk2F,OAAAh4F,IAAA8B,KAAA8wC,KAAArwC,QAAAvC,IAAA,IAEA,OAAAiU,IAAA2+B,KAAA,KASApxC,QAAAoxC,GACA,OAAA9wC,KAAAk2F,OAAAz0F,IAAAqvC,GAWApxC,IAAAE,GACA,GAAAI,KAAAs2F,QAAA12F,EAAAkxC,MAMA,UAAavhB,EAAA,EAAa,sFAI1BvvB,KAAAq2F,aAEAr2F,KAAA8wC,KAAArwC,QAAA2P,OAAApQ,KAAAq2F,aAIAr2F,KAAAk2F,OAAA9uF,IAAAxH,EAAAkxC,KAAAlxC,GAGAI,KAAAu2F,MAAA32F,GAUAF,OAAAoxC,GACA,IAAA9wC,KAAAs2F,QAAAxlD,GAMA,UAAavhB,EAAA,EAAa,8FAI1B,GAAAvvB,KAAAq2F,cAAAvlD,EAAA,CAEA9wC,KAAA8wC,KAAArwC,QAAA2P,OAAA0gC,GAGA9wC,KAAAk2F,OAAAzmF,OAAAqhC,GAGA,MAAA5H,EAAArlC,MAAAC,KAAA9D,KAAAk2F,OAAAzpF,UAAAga,MAGAyiB,EAEAlpC,KAAAu2F,MAAArtD,GAGAlpC,KAAA8wC,KAAA0jD,YAIAx0F,KAAAk2F,OAAAzmF,OAAAqhC,GAUApxC,eAAAkR,GACAA,IACA5Q,KAAAk2F,OAAAh4F,IAAA8B,KAAAq2F,aAAAzlF,YAGA5Q,KAAA8wC,KAAA0lD,IAAAx2F,KAAAy2F,uBAYA/2F,OAAAoxC,KAASA,EAAA4lD,mBAAA,KACT12F,KAAA8wC,KAAAlP,UAAA80D,EAEA12F,KAAA8wC,KAAArwC,QAAA0C,IAAA2tC,GACA9wC,KAAA8wC,KAAA0lD,IAAAx2F,KAAAy2F,uBAUA/2F,sBACA,IAAAkR,EAAA/M,MAAAC,KAAA9D,KAAAk2F,OAAAzpF,UAAAga,MAAA7V,SAUA,OAPAA,MAAA6gF,UAEA7gF,EAAA7S,OAAAiR,UAA+B4B,GAC/B6gF,QAAAzxF,KAAAi2F,mBAIArlF,SC1MqB+lF,GACrBj3F,cAQAM,KAAAoH,IAAA,gBAQApH,KAAA42F,eAAA,KAQA52F,KAAA62F,UAAA,IAAA7zF,IAQAhD,KAAA82F,sBAAA,KAQAp3F,IAAAc,GACA,GAAAR,KAAA62F,UAAAp1F,IAAAjB,GACA,UAAa+uB,EAAA,EAAa,0CAG1BvvB,KAAAmlB,SAAA3kB,EAAA,YAAAR,KAAA+2F,OAAAv2F,IAAkE0nD,YAAA,IAClEloD,KAAAmlB,SAAA3kB,EAAA,WAAAR,KAAAg3F,SAAuD9uC,YAAA,IACvDloD,KAAA62F,UAAA1zF,IAAA3C,GAQAd,OAAAc,GACAA,IAAAR,KAAA42F,gBACA52F,KAAAg3F,MAAAx2F,GAGAR,KAAA62F,UAAAp1F,IAAAjB,KACAR,KAAAqlB,cAAA7kB,GACAR,KAAA62F,UAAApnF,OAAAjP,IAUAd,OAAAc,GACAkxD,aAAA1xD,KAAA82F,uBAEA92F,KAAA42F,eAAAp2F,EACAR,KAAA0jC,WAAA,EAUAhkC,QACAgyD,aAAA1xD,KAAA82F,uBAEA92F,KAAA82F,sBAAA3lC,WAAA,KACAnxD,KAAA42F,eAAA,KACA52F,KAAA0jC,WAAA,GACG,IAYHrR,GAAKskE,GAAcvvC,IACnB/0B,GAAKskE,GAAc5lE,UChFJkmE,GAUfv3F,YAAA8H,GA4CA,GA3CAzJ,OAAAiR,OAAAhP,KAAAwH,GA2CAA,EAAAk2C,SAAAl2C,EAAA0vF,iBACA,UAAAvmE,KAAAnpB,EAAAk2C,QAAA,CACA,IAAAA,EAAAl2C,EAAAk2C,QAAA/sB,GAEA,iBAAA+sB,IACAA,OAGA,UAAAtN,KAAAsN,EACAl2C,EAAA0vF,iBAAA9vF,IAAAgpC,EAAA,CAAAxwC,EAAA6xD,KACAzxD,KAAA2wB,KACA8gC,OAcAxoB,YACA,OAAAjpC,KAAAm3F,WAAA9qD,KAAA+qD,KAAA,KAUAluD,WACA,OAAAlpC,KAAAm3F,WAAAvhF,OAAAwhF,IAAA5gF,OAAA,YAUAuuB,WACA,OAAA/kC,KAAAq3F,kBAAA,GAUAC,eACA,OAAAt3F,KAAAq3F,mBAAA,GAUAniD,cACA,IAAAtzC,EAAA,KAGA,cAAA5B,KAAAo2F,aAAAQ,eACA,MAGA52F,KAAAm3F,WAAA9qD,KAAA,CAAAyE,EAAAymD,KACA,MAAAC,EAAA1mD,EAAAtwC,UAAAR,KAAAo2F,aAAAQ,eAMA,OAJAY,IACA51F,EAAA21F,GAGAC,IAGA51F,GAMAlC,aACAM,KAAA+2F,OAAA/2F,KAAAipC,OAMAvpC,YACAM,KAAA+2F,OAAA/2F,KAAAkpC,MAMAxpC,YACAM,KAAA+2F,OAAA/2F,KAAA+kC,MAMArlC,gBACAM,KAAA+2F,OAAA/2F,KAAAs3F,UASA53F,OAAAoxC,GACAA,GACAA,EAAAhI,QAaAppC,kBAAAovE,GAEA,MAAA55B,EAAAl1C,KAAAk1C,QACAuiD,EAAAz3F,KAAAm3F,WAAA/0F,OAEA,IAAAq1F,EACA,YAKA,UAAAviD,EACA,OAAAl1C,KAAA,IAAA8uE,EAAA,gBAIA,IAAAltE,GAAAszC,EAAAuiD,EAAA3oB,GAAA2oB,EAEA,GACA,MAAA3mD,EAAA9wC,KAAAm3F,WAAAj5F,IAAA0D,GAGA,GAAAw1F,GAAAtmD,GACA,OAAAA,EAIAlvC,KAAA61F,EAAA3oB,GAAA2oB,QACG71F,IAAAszC,GAEH,aASA,SAAAkiD,GAAAtmD,GACA,SAAAA,EAAAhI,OAAgC,QAANtqB,GAAMvhB,OAAAq2D,iBAAAxiB,EAAAtwC,SAAAk3F,eChRXC,WAA6B7G,GAIlDpxF,YAAAyqF,GACApqF,MAAAoqF,GAEAnqF,KAAAuzF,aACAjrE,IAAA,OACAxhB,YACA0sF,OACA,KACA,yCCHqBoE,WAAoB9G,GAIzCpxF,YAAAyqF,GACApqF,MAAAoqF,GAEA,MAAAtrF,EAAAmB,KAAAmxF,aAQAnxF,KAAAoiC,MAAApiC,KAAAixF,mBAQAjxF,KAAAo2F,aAAA,IAA0BO,GAQ1B32F,KAAAuqF,WAAA,IAAwBZ,GAQxB3pF,KAAAoH,IAAA,iBAQApH,KAAAoH,IAAA,aASApH,KAAA63F,aAAA,IAA0BZ,IAC1BE,WAAAn3F,KAAAoiC,MACAg0D,aAAAp2F,KAAAo2F,aACAc,iBAAAl3F,KAAAuqF,WACA7sC,SAEAo6C,eAAA,uBAGAC,WAAA,6BAIA/3F,KAAAuzF,aACAjrE,IAAA,MACAxhB,YACA0sF,OACA,KACA,aACA30F,EAAAyuF,GAAA,oCACAzuF,EAAAuoB,GAAA,eAIAvI,SAAA7e,KAAAoiC,MAEAvR,IAEAmnE,UC9Ee,SAAAlnD,GACf,OAAAA,EAAAqgD,aAAA/pE,GAAA0J,IACAA,EAAA1lB,SAAA0lC,EAAAtwC,SACAswB,EAAA3O,mBD2EeA,CAAcniB,SAQ7BN,SACAK,MAAAwO,SAGA,UAAA4D,KAAAnS,KAAAoiC,MACApiC,KAAAo2F,aAAAjzF,IAAAgP,EAAA3R,SAGAR,KAAAoiC,MAAAvR,GAAA,OAAAC,EAAA3e,KACAnS,KAAAo2F,aAAAjzF,IAAAgP,EAAA3R,WAGAR,KAAAoiC,MAAAvR,GAAA,UAAAC,EAAA3e,KACAnS,KAAAo2F,aAAAhmF,OAAA+B,EAAA3R,WAIAR,KAAAuqF,WAAAplE,SAAAnlB,KAAAQ,SAMAd,QACAM,KAAA63F,aAAAI,aAMAv4F,YACAM,KAAA63F,aAAAK,YAUAx4F,eAAA4mE,EAAA1pE,GACA0pE,EAAAv4D,IAAAnQ,IACA,KAAAA,EACAoC,KAAAoiC,MAAAj/B,IAAA,IAAwBw0F,IACpB/6F,EAAA6E,IAAA7D,GACJoC,KAAAoiC,MAAAj/B,IAAAvG,EAAA+B,OAAAf,IAmBIkS,GAAA,EAAGjN,KACP,4EACMjF,kBE/Jeu6F,WAAuBxlE,GAI5Cw2C,wBACA,uBAMAgB,sBACA,OAAW6rB,IAMXt2F,YAAAkzB,GACA7yB,MAAA6yB,GAOA5yB,KAAAo4F,YAAAp4F,KAAAq4F,qBASAr4F,KAAAo2F,aAAA,IAA0BO,GAG1B/jE,EAAA5X,KAAA,eACAhb,KAAAo2F,aAAAjzF,IAAAyvB,EAAAujE,GAAArlD,KAAAlN,iBACA5jC,KAAAo2F,aAAAjzF,IAAAnD,KAAAo4F,YAAA53F,WASAR,KAAAs4F,SAAA1lE,EAAAw2C,QAAAlrE,IAAsC83F,IAWtCh2F,KAAAu4F,8BAAuCtoC,GAAQ,IAAAjwD,KAAA4nB,KAAA,kCAI/C5nB,KAAAgtE,SAAA,QAMAttE,OACA,MACAikC,EADA3jC,KAAA4yB,OACA8vC,MAAA9hE,SAAA+iC,UAGA3jC,KAAAmlB,SAAAnlB,KAAAo2F,aAAA,oBAAAtlE,EAAAlzB,EAAA8lC,KACA,MAAA80D,EAAAx4F,KAAAs4F,SAAAjC,cAAAr2F,KAAAo4F,aAEA10D,GAAA80D,EACAx4F,KAAAw0F,OACI9wD,GACJ1jC,KAAA0zF,SAKA1zF,KAAAmlB,SAAAwe,EAAA,gBAAA7S,EAAAlxB,MACAA,EAAAkiE,cAAAn+B,EAAAgD,cACA3mC,KAAAw0F,OAKAx0F,KAAAu4F,kCAIAv4F,KAAAmlB,SAAAnlB,KAAA,iCACAA,KAAA4yB,OAAAy3D,QAAAv5C,KAAAlwC,SAAA8iC,WACA1jC,KAAA0zF,SAWAh0F,YACA,MAAA4mE,EC1Ge,SAAAA,GACf,OAAAziE,MAAAuJ,QAAAk5D,IAEAlkC,MAAAkkC,GAIAA,EAMAvoE,OAAAiR,QACAozB,UACEkkC,IANFlkC,UDiGiBq2D,CAAsBz4F,KAAA4yB,OAAA0zC,OAAApoE,IAAA,mBACvCtB,EAAAoD,KAAA4yB,OAAAujE,GAAAuC,iBAEA14F,KAAAo4F,YAAAO,eAAAryB,EAAAlkC,MAAAxlC,GASA8C,qBACA,MAAA04F,EAAA,IAA0BR,GAAW53F,KAAA4yB,OAAAu3D,QAUrC,OARAiO,EAAA3K,gBACA3mF,YACA0sF,OAAA,0BAIA4E,EAAA7pF,SAEA6pF,EAQA14F,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OAGA5yB,KAAAs4F,SAAAhC,QAAAt2F,KAAAo4F,cAKAxlE,EAAA8vC,MAAA9hE,SAAA+iC,UAAAgD,aAMA9iC,MAAAC,KAAA9D,KAAAo4F,YAAAh2D,OAAAjQ,MAAAhgB,QAAAxQ,IAAAwQ,EAAAm2C,YAAAn2C,EAAAm2C,aAKAtoD,KAAAmlB,SAAAnlB,KAAA4yB,OAAAujE,GAAA,cACAn2F,KAAAs4F,SAAAM,eAAA54F,KAAA64F,6BAIA74F,KAAAs4F,SAAAn1F,KACA2tC,KAAA9wC,KAAAo4F,YACAxnF,SAAA5Q,KAAA64F,0BACAnC,iBAAA,0BAOAh3F,OACAM,KAAAs4F,SAAAhC,QAAAt2F,KAAAo4F,eACAp4F,KAAAqlB,cAAArlB,KAAA4yB,OAAAujE,GAAA,UACAn2F,KAAAs4F,SAAAloF,OAAApQ,KAAAo4F,cAWA14F,0BACA,MACAoxC,EADA9wC,KAAA4yB,OACAy3D,QAAAv5C,KACAgoD,EAAAhoD,EAAAlwC,SACA40C,EAAAsjD,EAAAn1D,UAGAqF,EAAA8vD,EAAAn1D,UAAAqF,WAEA,OAKA59B,OAAA,KACA,MAAAy9B,EAAAG,EAAAwM,EAAApM,gBAAAoM,EAAAlM,eACAyvD,EAAuBjlC,GAAIO,iBAAAvjB,EAAAC,aAAA2nB,eAAA7vB,IAG3B,OAAAG,EACA+vD,EAAA,IAKAA,EAAA32F,OAAA,OAAA22F,IAAA32F,OAAA,GAAAs+C,OACAq4C,EAAAtyE,MAGAsyE,IAAA32F,OAAA,KAGAovF,UAiCA,SAAAxoD,GACA,MAAA2qD,EAA0BL,GAAgBK,iBAE1C,OAAA3qD,GACA2qD,EAAAyB,oBACAzB,EAAA0B,wBACA1B,EAAA2B,wBACA3B,EAAA+B,oBACA/B,EAAAgC,wBACAhC,EAAAiC,0BAEAjC,EAAAkC,oBACAlC,EAAAmC,wBACAnC,EAAAoC,wBACApC,EAAA4B,oBACA5B,EAAA6B,wBACA7B,EAAA8B,yBAjDAuD,CAAAhwD,IAOAtpC,UACAM,KAAAu4F,8BAAA9mC,SACAzxD,KAAAqlB,gBACAtlB,MAAAstD,iBEjOqB4rC,GAOrBv5F,YAAAkzB,GAOA5yB,KAAA4yB,SAQA5yB,KAAAk5F,YAAA,IAAAzyF,IAQA/G,SACA,UAAApB,KAAA0B,KAAAk5F,YAAAzsF,eACAnO,EAAA66F,aAaAz5F,IAAA9B,EAAAsnB,GACA,GAAAllB,KAAAyB,IAAA7D,GAOA,UAAa2xB,EAAA,EACb,mFAAwF3xB,SAIxFoC,KAAAk5F,YAAA9xF,IAAAgyF,GAAAx7F,IAAgDsnB,WAAAi0E,aAAAv7F,IAahD8B,OAAA9B,GACA,IAAAoC,KAAAyB,IAAA7D,GASA,UAAa2xB,EAAA,EACb,2FAAgG3xB,SAIhG,OAAAoC,KAAAk5F,YAAAh7F,IAAAk7F,GAAAx7F,IAAAsnB,SAAAllB,KAAA4yB,OAAAu3D,QASAzqF,IAAA9B,GACA,OAAAoC,KAAAk5F,YAAAz3F,IAAA23F,GAAAx7F,KAUA,SAAAw7F,GAAAx7F,GACA,OAAA0H,OAAA1H,GAAA0K,oBCxHqB+wF,GAOrB35F,YAAAkzB,EAAAke,GAOA9wC,KAAA4yB,SAQA5yB,KAAA8wC,OASA9wC,KAAA04F,iBAAA,IAA8BO,GAAgBrmE,GAS9C5yB,KAAAo2F,aAAA,IAA0BO,GAG1B32F,KAAAmlB,SAAAyN,EAAAy3D,QAAAv5C,KAAAlwC,SAAA,oBAAAZ,KAAAmK,UASAzK,SACAM,KAAA4nB,KAAA,UAMAloB,UACAM,KAAAqlB,gBACArlB,KAAA8wC,KAAAuc,WAaAh7B,GAAKgnE,GAAUp0E,SC7EMq0E,WAAwBD,GAI7C35F,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAke,EAAA9wC,KAAA8wC,KACAyoD,EAAA3mE,EAAAw2C,QAAAlrE,IAAA,kBAEA4yC,EAAAviC,SAGA,MAAAirF,EAAA5mE,EAAAy3D,QAAAv5C,KAAAlwC,SAAA63D,UACA3nB,EAAA5K,SAAArnC,KAAA,cAAAuoB,GAAAoyE,GAIA1oD,EAAA5K,SAAArnC,KAAA,aAAAuoB,GAAApnB,KAAAo2F,cACAxjE,EAAAy3D,QAAAv5C,KAAA2oD,cAAA3oD,EAAAlN,iBACAkN,EAAA5K,SAAAtoC,KAAA47F,EAAAz1D,SAEA/jC,KAAAo2F,aAAAjzF,IAAA2tC,EAAAlN,iBCZe,UAAA81D,OACfA,EAAAC,uBACAA,EAAAC,mBACAA,EAAAC,QACAA,EAAAC,YACAA,EAAAC,UACAA,IAIAH,EAAAz2F,IAAA02F,EAAAr5F,SAGAm5F,EAAAvyF,IAAA,WAAAxH,EAAA6xD,KACAmoC,EAAAl2D,YAAAm2D,EAAAzD,aAAA1yD,YACAo2D,GACAA,IAGAD,EAAA/wD,QAEA2oB,OAKAooC,EAAAtP,WAAAnjF,IAAA,OAAAxH,EAAA6xD,KACAooC,EAAAzD,aAAA1yD,YACAg2D,EAAA5wD,QAEAixD,GACAA,IAGAtoC,ODpBEuoC,EACFN,OAAA9mE,EAAAy3D,QAAAv5C,KACA8oD,mBAAA55F,KAAAo2F,aACAuD,uBAAA/mE,EAAA23D,WACAsP,QAAAN,EAAAnB,YACA14F,cACA65F,EAAA7F,QAEAh0F,YACA65F,EAAA/E,uBE5BqByF,WAAqBnJ,GAM1CpxF,YAAAyqF,GACApqF,MAAAoqF,GASAnqF,KAAAk0D,KAAAl0D,KAAAixF,mBAaAvxF,SACAK,MAAAwO,SAEAvO,KAAAk6F,wBAMAx6F,UAGA,OAFAM,KAAAm6F,yBAAA/pF,SAEArQ,MAAAstD,UAQA3tD,wBACA,MAAA06F,EAAAp6F,KAAAm6F,yBAAA,IAA0D7N,IAC1DhkE,IAAA,MACAxhB,YACA0sF,OACA,KACA,eACA,UACA,uBAGA30E,SAAA7e,KAAAk0D,OACG3lD,SAEH3N,SAAAszD,KAAAjwD,YAAAm2F,UCpEqBC,WAAuBvJ,GAQ5CpxF,YAAAyqF,EAAAvmD,GACA7jC,MAAAoqF,GAEA,MAAAtrF,EAAAmB,KAAAmxF,aAEAvtD,IACA5jC,KAAAQ,QAAAR,KAAA4jC,mBAGA5jC,KAAAuzF,aACAjrE,IAAA,MACAxhB,YACA0sF,OACA,KACA,aACA,sBACA,qBACA30F,EAAAuoB,GAAA,YAAA9oB,KAAA,2BACAO,EAAAyuF,GAAA,8BAGAgN,gBAAAz7F,EAAAuoB,GAAA,aAAA9oB,UAUA0B,KAAAoH,IAAA,iBAQApH,KAAAoH,IAAA,gBAQApH,KAAAu6F,gBAAA32D,EAcAlkC,SACAK,MAAAwO,SAEAvO,KAAAu6F,gBACAv6F,KAAAM,SAAA6Q,MAAAnR,KAAAQ,QAAAR,KAAAu6F,iBAEAv6F,KAAA4jC,gBAAA5jC,KAAAQ,QAOAd,UACAM,KAAAu6F,iBACAv6F,KAAAM,SAAAgsE,OAAAtsE,KAAAu6F,iBAGAx6F,MAAAstD,iBC1FqBmtC,WAA6BH,GASlD36F,YAAAyqF,EAAAvmD,GACA7jC,MAAAoqF,EAAAvmD,GACA,MAAA/kC,EAAAmB,KAAAmxF,aACA5yF,EAAAyB,KAAAzB,EAOAyB,KAAAoH,IAAA,aAIApH,KAAAytF,gBACA3mF,YACA2zF,KAAA,UACAC,aAAA77F,EAAAuoB,GAAA,OANA9oB,GACAC,EAAA,MAAAD,KAMAk1F,MAAA,uCCvBqBmH,WAA4BV,GAQjDv6F,YAAAyqF,EAAAvmD,GACA7jC,MAAAoqF,GAQAnqF,KAAAkmC,SAAA,IAAsBs0D,GAAoBrQ,EAAAvmD,GAM1ClkC,SACAK,MAAAwO,SAEAvO,KAAAqxF,cAAArxF,KAAAkmC,UAMAtC,sBACA,OAAA5jC,KAAAkmC,SAAA1lC,SCjCe,SAAAo6F,GAAA9mF,EAAAlU,GACfkU,aAAA+mF,sBACA/mF,EAAAxV,MAAAsB,GAGAkU,EAAA0I,UAAA5c,ECiBe,IAAAk7F,IAjBfp7F,sBACA,IAAAM,KAAAk4E,cASA,UAAa3oD,EAAA,EAAa,wFAGxBqrE,GAAgB56F,KAAAk4E,cAAAl4E,KAAAJ,KAAA1B,eCcG68F,WAAsB/Q,GAa3CtqF,YAAAs7F,EAAA10B,GACAvmE,MAAAumE,GAEOpkB,GAAS84C,KAChBh7F,KAAAk4E,cAAA8iB,GAGAh7F,KAAAsmE,OAAApoE,IAAA,WAAAwD,KAAqCy2F,IACrCn4F,KAAAsmE,OAAAvpE,OAAA,iBAAAiD,KAAAsmE,OAAApoE,IAAA,YAEA8B,KAAAJ,KAAA+Z,UAAA,IAA4BwxE,GAE5BnrF,KAAA0iE,MAAA9hE,SAAAsgF,aAEAlhF,KAAAm2F,GAAA,IAAgBmD,GAAet5F,KAAA,IAAY26F,GAAmB36F,KAAAmqF,OAAAnqF,KAAAk4E,gBCxD/C,SAAAtlD,GACf,IAAO1J,EAAU0J,EAAAqoE,qBAOjB,UAAY1rE,EAAA,EAAa,yGAGzB,MAAA2oD,EAAAtlD,EAAAslD,cAGA,GAAAA,GAAA,aAAAA,EAAAxtE,QAAApC,eAAA4vE,EAAAgjB,KAAA,CACA,IAAAC,EACA,MAAAD,EAAAhjB,EAAAgjB,KACAE,EAAA,IAAAxoE,EAAAqoE,sBAIO/xE,EAAUgyE,EAAAG,UACjBF,EAAAD,EAAAG,OAEAH,EAAAG,OAAA,MACAD,IACAD,EAAAhqF,MAAA+pF,MAKAA,EAAA3gF,iBAAA,SAAA6gF,GAIAxoE,EAAA/B,GAAA,eACAqqE,EAAA1gF,oBAAA,SAAA4gF,GAEAD,IACAD,EAAAG,OAAAF,MDmBEG,CAAYt7F,MAMdQ,cACA,OAAAR,KAAAm2F,GAAArlD,KAAA5K,SAAA1lC,QAUAd,UAGA,MAAAE,EAAAI,KAAAu7F,UAIA,OAFAv7F,KAAAm2F,GAAA9oC,UAEAttD,MAAAstD,UACAvjD,KAAA,KACA9J,KAAAk4E,eACK0iB,GAAgB56F,KAAAk4E,cAAAt4E,KA2ErBF,cAAAs7F,EAAA10B,GACA,WAAA3gE,QAAAC,IACA,MAAAgtB,EAAA,IAAA5yB,KAAAg7F,EAAA10B,GAEA1gE,EACAgtB,EAAAg4D,cACA9gF,KAAA,KACA8oB,EAAAujE,GAAAqF,OACA5oE,EAAAhL,KAAA,aAEA9d,KAAA,KACA,MAAA2xF,EAA0Bv5C,GAAS84C,GE9KpB,SAAAlnF,GACf,OAAAA,aAAA+mF,oBACA/mF,EAAAxV,MAGAwV,EAAA0I,UF0KOk/E,CAAkBV,GACzBA,EAEA,OAAApoE,EAAAhzB,KAAA47F,KAAAC,KAEA3xF,KAAA,KACA8oB,EAAAhL,KAAA,aACAgL,EAAAhL,KAAA,WAEA9d,KAAA,IAAA8oB,OAMAP,GAAK0oE,IG5LLr7F,QAAAE,GACAI,KAAAJ,KAAAwH,IAAAxH,IAMAF,UACA,OAAAM,KAAAJ,KAAA1B,SHqLAm0B,GAAK0oE,GAAeD,UIpMLa,GACfj8F,YAAAk8F,GAOA57F,KAAA67F,MA2CA,SAAAD,GAEA,MAAAC,EAAAD,EAAAC,MAAAh4F,MAAAC,KAAA83F,EAAAC,UACAz5D,EAAAw5D,EAAAx5D,MAAAv+B,MAAAC,KAAA83F,EAAAx5D,UAEA,GAAAy5D,EAAAz5F,OACA,OAAAy5F,EAGA,OAAAz5D,EACAxsB,OAAAzD,GAAA,SAAAA,EAAAnH,MACA+C,IAAAoE,KAAA2pF,aAtDAC,CAAAH,GAQA57F,KAAAg8F,QAAAJ,EAQAr+E,YACA,OAAAvd,KAAAg8F,QAAAz+E,MAWA7d,QAAA6C,GACA,OAAAvC,KAAAg8F,QAAAT,QAAAh5F,GASA7C,QAAA6C,EAAA3C,GACAI,KAAAg8F,QAAAC,QAAA15F,EAAA3C,UC5BqBs8F,WAA0BrtC,GAC/CnvD,YAAAoxC,GACA/wC,MAAA+wC,GAEA,MAAAgoD,EAAA94F,KAAAY,SAOA,SAAAu7F,EAAArrE,EAAAlxB,GACAA,EAAAuiB,iBAEA,MAAAi6E,EAAAx8F,EAAAy8F,WAAAz8F,EAAAy8F,WAAAx4F,MAAAC,KAAAg1F,EAAAn1D,UAAAgG,aAEAmvD,EAAAlxE,KAAA,kBACA00E,aAAA18F,EAAA08F,aACAF,iBAZAp8F,KAAA8uD,cAAA,wCAEA9uD,KAAAmlB,SAAA2zE,EAAA,QAAAqD,GAAsD13E,SAAA,QACtDzkB,KAAAmlB,SAAA2zE,EAAA,OAAAqD,GAAqD13E,SAAA,QAcrD/kB,WAAAivD,GACA,MAAAo7B,GACAuS,aAAA,IAAqBX,GAAYhtC,EAAA4tC,cAAA5tC,EAAA4tC,cAAA5tC,EAAA2tC,eAGjC,QAAA3tC,EAAApsD,OACAwnF,EAAAsS,UAOA,SAAAvrD,EAAA6d,GACA,MAAA6tC,EAAA7tC,EAAAvjD,OAAA8lC,cACA2J,EAAA8T,EAAA8tC,QACA7hD,EAAA+T,EAAA+tC,QACA,IAAA/7C,EAGA67C,EAAAG,qBAAAH,EAAAG,oBAAA9hD,EAAAD,GACA+F,EAAA67C,EAAAG,oBAAA9hD,EAAAD,GAGA+T,EAAAiuC,eACAj8C,EAAA67C,EAAA57C,eACAwC,SAAAuL,EAAAiuC,YAAAjuC,EAAAkuC,aACAl8C,EAAAzO,UAAA,IAGA,OAAAyO,EACA7P,EAAAC,aAAAqT,eAAAzD,GAEA7P,EAAAlwC,SAAA+iC,UAAAyF,gBA3BA0zD,CAAA98F,KAAA8wC,KAAA6d,IAGA3uD,KAAA4nB,KAAA+mC,EAAApsD,KAAAosD,EAAAo7B,ICnDA,MAAAgT,IAAA,yBCgBqBC,WAAkBrqE,GAIvCw2C,wBACA,kBAMAzpE,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAqqE,EAAArqE,EAAA8vC,MAAA9hE,SACAkwC,EAAAle,EAAAy3D,QAAAv5C,KACAgoD,EAAAhoD,EAAAlwC,SA2DA,SAAAs8F,EAAApsE,EAAAlxB,GACA,MAAA08F,EAAA18F,EAAA08F,aAEA18F,EAAAuiB,iBAEA,MAAA1hB,EAAAmyB,EAAAhzB,KAAAy1E,OAAAziD,EAAA8vC,MAAA4mB,mBAAA2T,EAAAt5D,YAEAm1D,EAAAlxE,KAAA,mBAA0C00E,eAAA77F,UAAAoqF,OAAA/5D,EAAAlzB,OA1D1CoC,KAAAm9F,mBAAA,IAAgChS,GAEhCr6C,EAAAunB,YAAoB6jC,IAMpBl8F,KAAAmlB,SAAA2zE,EAAA,iBAAAhoE,IACA8B,EAAAigC,YACA/hC,EAAA7M,SAEMQ,SAAA,YAENzkB,KAAAmlB,SAAA2zE,EAAA,kBAAAhoE,EAAAlxB,KACA,MAAA08F,EAAA18F,EAAA08F,aACA,IAAA77F,EAAA,GAEA67F,EAAAf,QAAA,aACA96F,ECvDe,SAAAb,GACf,OAAAA,EACAuQ,QAAA,2DAAAuQ,EAAA08E,IAGA,GAAAA,EAAAh7F,OACA,IAGAg7F,GD8CcC,CAAsBf,EAAAf,QAAA,cAChCe,EAAAf,QAAA,gBACJ96F,EEzDe,SAAA+X,GAsBf,OArBAA,IAEArI,QAAA,aACAA,QAAA,aAEAA,QAAA,mBACAA,QAAA,cAEAA,QAAA,gBACAA,QAAA,gBAEAA,QAAA,oBAEAmD,QAAA,gBAEAkF,QAAeA,SAMfA,EFmCc8kF,CAAehB,EAAAf,QAAA,gBAG7B96F,EAAAT,KAAAm9F,mBAAA9nB,OAAA50E,GAEAT,KAAA4nB,KAAA,uBAAsCnnB,UAAA67F,iBAEtCxrD,EAAAysD,yBACM94E,SAAA,QAENzkB,KAAAmlB,SAAAnlB,KAAA,uBAAA8wB,EAAAlxB,KACA,IAAAA,EAAAa,QAAAghC,QAAA,CACA,MAAA+7D,EAAAx9F,KAAA4yB,OAAAhzB,KACA8iE,EAAA1iE,KAAA4yB,OAAA8vC,MAKA+6B,EAAAD,EAAA3nB,QAAAj2E,EAAAa,QAAA,oBAEA,MAAAg9F,EAAAj8D,WACA,OAGAkhC,EAAAomB,cAAA2U,MAEMh5E,SAAA,QAcNzkB,KAAAmlB,SAAA2zE,EAAA,OAAAoE,GAAmDz4E,SAAA,QACnDzkB,KAAAmlB,SAAA2zE,EAAA,OAAAhoE,EAAAlxB,KAGAgzB,EAAAigC,WACAjzD,EAAAuiB,iBAEA+6E,EAAApsE,EAAAlxB,KAEM6kB,SAAA,QAENzkB,KAAAmlB,SAAA2zE,EAAA,mBAAAhoE,EAAAlxB,KACAA,EAAAa,QAAAghC,UACA7hC,EAAA08F,aAAAL,QAAA,YAAAj8F,KAAAm9F,mBAAA7nB,OAAA11E,EAAAa,UACAb,EAAA08F,aAAAL,QAAA,aD1Ge,SAAAyB,EAAAprB,GACf,IAAA95D,EAAA,GAEA,GAAA85D,EAAAnzC,GAAA,SAAAmzC,EAAAnzC,GAAA,aAEA3mB,EAAA85D,EAAA1yE,UACE,GAAA0yE,EAAAnzC,GAAA,QAAAmzC,EAAAhyC,aAAA,OAEF9nB,EAAA85D,EAAAr7D,aAAA,WACE,CAGF,IAAAg9B,EAAA,KAEA,UAAAvwB,KAAA4uD,EAAArwC,cAAA,CACA,MAAA07D,EAAAD,EAAAh6E,GAGAuwB,MAAA9U,GAAA,qBAAAzb,EAAAyb,GAAA,uBACA49D,GAAAt3C,SAAAxR,EAAAr2C,OAAAm/F,GAAAt3C,SAAA/hC,EAAA9lB,MACA4a,GAAA,KAEAA,GAAA,QAIAA,GAAAmlF,EACA1pD,EAAAvwB,GAIA,OAAAlL,EC2E6CklF,CAAe99F,EAAAa,WAG5D,OAAAb,EAAAirF,QACAj4D,EAAA8vC,MAAAwhB,cAAA+Y,EAAAt5D,aAEMlf,SAAA,eG1GSm5E,GAMfl+F,YAAAkzB,GAOA5yB,KAAA4yB,SAgBA5yB,KAAAoH,IAAA,aAAAzF,GAyCA3B,KAAAoH,IAAA,gBAEApH,KAAAgtE,SAAA,WAGAhtE,KAAAmlB,SAAAnlB,KAAA4yB,OAAA8vC,MAAA9hE,SAAA,cACAZ,KAAA69F,YAGA79F,KAAA6wB,GAAA,UAAAC,IACA9wB,KAAAsoD,WACAx3B,EAAA7M,SAEMQ,SAAA,SAGNzkB,KAAAmlB,SAAAyN,EAAA,qBAAA9B,EAAAlzB,EAAAU,KACAA,GACA0B,KAAA6wB,GAAA,gBAAAitE,IAA6Cr5E,SAAA,YAC7CzkB,KAAAsoD,WAAA,IAEAtoD,KAAAkkB,IAAA,gBAAA45E,IACA99F,KAAA69F,aAYAn+F,UACAM,KAAAsoD,WAAA,EAgBA5oD,WAKAA,UACAM,KAAAqlB,iBAmBA,SAAAy4E,GAAAhtE,GACAA,EAAA3J,QAAA,EACA2J,EAAA7M,OALAoO,GAAGurE,GAAW7sE,UCzJOgtE,WAAqBH,GAI1Cl+F,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACAlhB,EAAAkhB,EAAA9hE,SAEA8hE,EAAA7J,OAAAtrB,KAcA,SAAAm1B,EAAAn1B,EAAA5J,EAAAg/B,GACA,MAAAq7B,EAAAr6D,EAAAgD,YACAkC,EAAAlF,EAAAyF,gBACAzB,EAAAkB,EAAA7sB,MAAArL,OACAi3B,EAAAiB,EAAA5sB,IAAAtL,OAGA,GAAAgyD,EAAA+K,QAAA/lC,IAAAg7B,EAAA+K,QAAA9lC,GASA,YAJAo2D,GAAAr2D,GAAAC,GACA86B,EAAAwhB,cAAAvgD,IAMA,GAAAq6D,EACAC,GAAA1wD,EAAA1E,EAAA7sB,WACE,CACF,MAAA2oE,IAAA97C,EAAA7sB,MAAA0pB,WAAAmD,EAAA5sB,IAAAmpB,SACA84D,EAAAv2D,GAAAC,EAEA86B,EAAAwhB,cAAAvgD,GAAmCghD,kBAEnCA,IAIAuZ,EACAD,GAAA1wD,EAAA5J,EAAAmF,OAMAyE,EAAAkI,aAAA7N,EAAA,KAnDAu2D,CAAAn+F,KAAA4yB,OAAA8vC,MAAAn1B,EAAAiU,EAAA7d,UAAA++B,EAAAC,QACA3iE,KAAA4nB,KAAA,gBAA+B2lB,cAwD/B,SAAA0wD,GAAA1wD,EAAA6wD,GACA7wD,EAAAr2B,MAAAknF,GACA7wD,EAAAkI,aAAA2oD,EAAAztF,OAAAwC,YAAA,SClEqBkrF,WAAsBh2C,GAC3C3oD,YAAAoxC,GACA/wC,MAAA+wC,GAEA,MAAA0Q,EAAAxhD,KAAAY,SAEA4gD,EAAA3wB,GAAA,WAAAC,EAAAlxB,KACA,GAAAI,KAAAsoD,WAAA1oD,EAAAmwC,SAA0ChB,GAAQM,MAAA,CAElD,IAAAh0B,EACAmmC,EAAAxmC,KAAA,QAAA8V,GAAAzV,EAAAyV,GAAgDrM,SAAA,YAEhD+8B,EAAA55B,KAAA,YAA2B8mC,GAAYlN,EAAA5hD,EAAA+uD,UACvC2vC,OAAA1+F,EAAAswC,YAKA70B,KAAA4I,KAAAH,QACAgN,EAAA7M,UASAvkB,kBCxBqB6+F,WAAc5rE,GAInCw2C,wBACA,cAGAzpE,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAke,EAAAle,EAAAy3D,QAAAv5C,KACAgoD,EAAAhoD,EAAAlwC,SAEAkwC,EAAAunB,YAAoBgmC,IAEpBzrE,EAAA04C,SAAAnoE,IAAA,YAAoC46F,GAAYnrE,IAEhD5yB,KAAAmlB,SAAA2zE,EAAA,SAAAhoE,EAAAlxB,KACAA,EAAAuiB,iBAGAviB,EAAA0+F,SAIA1rE,EAAAy4C,QAAA,SACAv6B,EAAAysD,0BACM94E,SAAA,eCrCe+5E,WAA0BZ,GAI/Cl+F,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACAlhB,EAAAkhB,EAAA9hE,SAEA8hE,EAAA7J,OAAAtrB,KAkDA,SAAAm1B,EAAAn1B,EAAA5J,GACA,MAAAq6D,EAAAr6D,EAAAgD,YACAkC,EAAAlF,EAAAyF,gBACAzB,EAAAkB,EAAA7sB,MAAArL,OACAi3B,EAAAiB,EAAA5sB,IAAAtL,OACAutF,EAAAv2D,GAAAC,EAEA,GAAAo2D,EACAS,GAAAlxD,EAAA1E,EAAA5sB,SACE,CACF,MAAA0oE,IAAA97C,EAAA7sB,MAAA0pB,WAAAmD,EAAA5sB,IAAAmpB,SACAs9B,EAAAwhB,cAAAvgD,GAAmCghD,kBAKnCuZ,EACAO,GAAAlxD,EAAA5J,EAAAmF,OAcA67C,GACAp3C,EAAAkI,aAAA7N,EAAA,IAjFA82D,CAAAh8B,EAAAn1B,EAAAiU,EAAA7d,WACA3jC,KAAA4nB,KAAA,gBAA+B2lB,aAI/B7tC,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACAlhB,EAAAkhB,EAAA9hE,SAEAZ,KAAAsoD,UAQA,SAAAqa,EAAAh/B,GAGA,GAAAA,EAAAoF,WAAA,EACA,SAGA,MAAA41D,EAAAh7D,EAAAiF,OAGA,IAAA+1D,IAAAh8B,EAAAuL,WAAAywB,EAAA,aACA,SAGA,MAAA91D,EAAAlF,EAAAyF,gBACAzB,EAAAkB,EAAA7sB,MAAArL,OACAi3B,EAAAiB,EAAA5sB,IAAAtL,OAGA,IAAAiuF,GAAAj3D,EAAAg7B,IAAAi8B,GAAAh3D,EAAA+6B,KAAAh7B,IAAAC,EACA,SAGA,SA/BA0gB,CAAAoa,EAAAC,OAAAnhB,EAAA7d,YA8EA,SAAA86D,GAAAlxD,EAAA38B,GACA,MAAAiuF,EAAAtxD,EAAAhqC,cAAA,aAEAgqC,EAAAt9B,OAAA4uF,EAAAjuF,GACA28B,EAAAkI,aAAAopD,EAAA,SAYA,SAAAD,GAAAp+F,EAAAmiE,GAEA,OAAAniE,EAAA2+B,GAAA,iBAIAwjC,EAAA+K,QAAAltE,IAAAo+F,GAAAp+F,EAAAmQ,OAAAgyD,UC1GqBm8B,WAAmBnsE,GAIxCw2C,wBACA,mBAGAzpE,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACA+vC,EAAA/vC,EAAA8vC,MAAAC,OACA2nB,EAAA13D,EAAA03D,WACAx5C,EAAAle,EAAAy3D,QAAAv5C,KACAgoD,EAAAhoD,EAAAlwC,SAGA+hE,EAAA4lB,SAAA,aACAhY,WAAA,UAIA+Z,EAAAjU,IAAA,UACAlzE,IAASuwE,IACThR,MAAA,YACA5xB,KAAA,QAGAw5C,EAAAjU,IAAA,YACAlzE,IAASkjE,IACT3D,MAAA,YACA5xB,KAAA,CAAAmtB,EAAAgJ,MAAA83B,mBAAA,SAGAjuD,EAAAunB,YAAoBgmC,IAEpBzrE,EAAA04C,SAAAnoE,IAAA,iBAAyCq7F,GAAiB5rE,IAE1D5yB,KAAAmlB,SAAA2zE,EAAA,SAAAhoE,EAAAlxB,KACAA,EAAAuiB,iBAGAviB,EAAA0+F,SAIA1rE,EAAAy4C,QAAA,cACAv6B,EAAAysD,0BACM94E,SAAA,eC5CSu6E,GAOft/F,YAAAgjE,EAAAu8B,EAAA,IAOAj/F,KAAA0iE,QASA1iE,KAAAuK,KAAA,EAQAvK,KAAAi/F,QAQAj/F,KAAAk/F,UAAA,EAQAl/F,KAAAm/F,gBAAA,EAAAruE,EAAA9gB,KACA,eAAAA,EAAAzN,MAAAyN,IAAAhQ,KAAAo/F,QACAp/F,KAAAq/F,QAAA,KAIAr/F,KAAAs/F,yBAAA,MACAt/F,KAAAq/F,WAGAr/F,KAAA0iE,MAAA9hE,SAAAiwB,GAAA,SAAA7wB,KAAAm/F,iBAEAn/F,KAAA0iE,MAAA9hE,SAAA+iC,UAAA9S,GAAA,eAAA7wB,KAAAs/F,0BACAt/F,KAAA0iE,MAAA9hE,SAAA+iC,UAAA9S,GAAA,mBAAA7wB,KAAAs/F,0BA8BAtvF,YAKA,OAJAhQ,KAAAo/F,SACAp/F,KAAAo/F,OAAAp/F,KAAA0iE,MAAA68B,eAGAv/F,KAAAo/F,OASA1/F,MAAA8+E,GACAx+E,KAAAuK,MAAAi0E,EAEAx+E,KAAAuK,MAAAvK,KAAAi/F,OACAj/F,KAAAq/F,QAAA,GAOA3/F,OACAM,KAAAk/F,UAAA,EAMAx/F,SACAM,KAAAk/F,UAAA,EAMAx/F,UACAM,KAAA0iE,MAAA9hE,SAAAsjB,IAAA,SAAAlkB,KAAAm/F,iBACAn/F,KAAA0iE,MAAA9hE,SAAA+iC,UAAAzf,IAAA,eAAAlkB,KAAAs/F,0BACAt/F,KAAA0iE,MAAA9hE,SAAA+iC,UAAAzf,IAAA,mBAAAlkB,KAAAs/F,0BASA5/F,OAAA8/F,GACAx/F,KAAAk/F,WAAAM,IACAx/F,KAAAo/F,OAAA,KACAp/F,KAAAuK,KAAA,UC1JqBk1F,WAAqB7B,GAQ1Cl+F,YAAAkzB,EAAA8sE,GACA3/F,MAAA6yB,GASA5yB,KAAA2/F,QAAA,IAAqBX,GAAYpsE,EAAA8vC,MAAAg9B,GAQjCzgF,aACA,OAAAjf,KAAA2/F,QAMAjgG,UACAK,MAAAstD,UAEArtD,KAAA2/F,QAAAtyC,UAiBA3tD,QAAA8H,MACA,MAAAk7D,EAAA1iE,KAAA4yB,OAAA8vC,MACAlhB,EAAAkhB,EAAA9hE,SACA4X,EAAAhR,EAAAgR,MAAA,GACAonF,EAAApnF,EAAApW,OACAymC,EAAArhC,EAAAqhC,OAAA2Y,EAAA7d,UAAAyF,gBACAy2D,EAAAr4F,EAAAq4F,YAEAn9B,EAAA+B,cAAAzkE,KAAA2/F,QAAA3vF,MAAAu9B,IACA,MAAAuyD,EAAAj3D,EAAAlC,YAEA3mC,KAAA2/F,QAAAI,OAEAD,GACAvyD,EAAAn9B,OAAAy4B,GAGArwB,GACA+0B,EAAAyyD,WAAAxnF,EAAAgpC,EAAA7d,UAAAqS,gBAAAnN,EAAA7sB,OAGA6jF,EACAtyD,EAAAkI,aAAAoqD,GACIC,GAEJvyD,EAAAkI,aAAA5M,EAAA7sB,MAAA6rB,aAAA+3D,IAGA5/F,KAAA2/F,QAAAM,SAEAjgG,KAAA2/F,QAAAnmE,MAAAomE,MCnFe,SAAAM,GAAAttE,GACf,IAAAutE,EAAA,KAEA,MAAAz9B,EAAA9vC,EAAA8vC,MACA5xB,EAAAle,EAAAy3D,QAAAv5C,KACAsvD,EAAAxtE,EAAA04C,SAAAptE,IAAA,SA+EA,SAAAmiG,IACA,MAAAphF,EAAAmhF,EAAAnhF,OAEAA,EAAA8gF,OAEAr9B,EAAA+B,cAAAxlD,EAAAjP,MAAA,KACA0yD,EAAAwhB,cAAAxhB,EAAA9hE,SAAA+iC,aAGA1kB,EAAAghF,SAtFAnvD,EAAAlwC,SAAAiwB,GAAA,WAAAC,EAAAi5D,KAoBA,SAAAA,GACA,MAAAvoC,EAAAkhB,EAAA9hE,SACAuyD,EAAAriB,EAAAlwC,SAAAuyD,YACAmtC,EAAAH,KAAAr6D,QAAA0b,EAAA7d,WAUA,GAPAw8D,EAAA,MAOAC,EAAA93C,UACA,OAGA,GAgGA,SAAAi4C,GAEA,GAAAA,EAAAtwD,QACA,SAGA,OAAAuwD,GAAA/6C,SAAA86C,EAAAxwD,SAtGA0wD,CAAA1W,IAAAvoC,EAAA7d,UAAAgD,YACA,OAIA,GAAAwsB,GAAA,MAAA42B,EAAAh6C,QACA,OAMA,IAAAojB,GAAA,MAAA42B,EAAAh6C,SAAAuwD,EACA,OAGAD,KArDAK,CAAA3W,IAA6EtlE,SAAA,WAE7EqsB,EAAAlwC,SAAAiwB,GAAA,mBA4DA,WACA,MAAA2wB,EAAAkhB,EAAA9hE,SACA+/F,EAAA,IAAAn/C,EAAA7d,UAAAoF,YAAAyY,EAAA7d,UAAAyF,gBAAA7L,OAMA,GAAAikB,EAAA7d,UAAAgD,aAAAg6D,EACA,OAGAN,MAxEgE57E,SAAA,WAEhEqsB,EAAAlwC,SAAAiwB,GAAA,sBACAsvE,EAAAz9B,EAAA+X,gBAAA/X,EAAA9hE,SAAA+iC,aACKlf,SAAA,WAoFL,MAAA+7E,IACC1wD,GAAO,WACPA,GAAO,cACPA,GAAO,aACPA,GAAO,aACR,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAIA,QAAAJ,EAAA,IAAqBA,GAAA,IAAaA,IAClC8wD,GAAA9+F,KAAAguC,GC/HO,SAAAkxD,GAAAC,GACP,MAAAA,EAAAz+F,OACA,SAIA,UAAAqrD,KAAAozC,EACA,gBAAApzC,EAAAlrD,OAAAu+F,GAAArzC,GACA,SAIA,SAYO,SAAAqzC,GAAArzC,GAEP,GAAAA,EAAAS,YAAA9rD,OAAAqrD,EAAAQ,YAAA7rD,QAAA,EACA,OAIA,MACA07E,ECpBe,SAAAj7D,EAAAk+E,GACf,MAAAjjB,KACA,IACAkjB,EADAp/F,EAAA,EAuCA,OApCAihB,EAAAhhB,QAAAg3D,IACA,SAAAA,GACAooC,IAEAr/F,KACG,UAAAi3D,GACHqoC,EAAA,UACAF,EAAAv0F,OAAA/K,KAAAq/F,EAAAn/F,KAEAq/F,IAEAD,GACAz+F,KAAA,SACAX,QACA6K,QAAAs0F,EAAAn/F,MAIAA,KAEAs/F,EAAA,UACAF,EAAAx+D,WAEAy+D,IAEAD,GACAz+F,KAAA,SACAX,QACA4gC,QAAA,MAMAy+D,IAEAnjB,EAEA,SAAAmjB,IACAD,IACAljB,EAAAp8E,KAAAs/F,GACAA,EAAA,MAIA,SAAAE,EAAAC,GACA,OAAAH,KAAAz+F,MAAA4+F,GD/BiBC,CADGnnD,GAAIwT,EAAAQ,YAAAR,EAAAS,YAAAmzC,IACM5zC,EAAAS,aAG9B,GAAA4vB,EAAA17E,OAAA,EACA,OAGA,MAAAy2D,EAAAilB,EAAA,GAGA,OAAAjlB,EAAApsD,OAAA,IAAAosD,EAAApsD,OAAA,GAAA0yB,GAAA,QAIA05B,OAJA,EAgBO,SAAAwoC,GAAAC,EAAAC,GACP,OAAAD,KAAAniE,GAAA,SAAAoiE,KAAApiE,GAAA,QACAmiE,EAAA1hG,OAAA2hG,EAAA3hG,KAEA0hG,IAAAC,QEpDMC,GAMN9hG,YAAAkzB,GAOA5yB,KAAA4yB,SAQA5yB,KAAAqqF,QAAArqF,KAAA4yB,OAAAy3D,QAUA3qF,OAAAmhG,EAAArrD,GACA,GAAOorD,GAAwBC,GAC/B7gG,KAAAyhG,kCAAAZ,EAAArrD,QAEA,UAAAiY,KAAAozC,EAEA7gG,KAAA0hG,oBAAAj0C,EAAAjY,GACAx1C,KAAA2hG,yBAAAl0C,GAuBA/tD,kCAAAmhG,EAAArrD,GAEA,MAAAosD,EAkKA,SAAAf,GACA,MAAAh6C,EAAAg6C,EACA9yF,IAAA0/C,KAAAnsD,MACAoL,OAAA,CAAAm1F,EAAAvgG,IACAugG,EAAAn6D,kBAAApmC,GAAmD88B,aAAA,KAGnD,IAAAyoB,EACA,OAKA,OAAAA,EAAAroB,cAA2BJ,aAAA,EAAAC,aAAA,IAC3BgO,KAAA7rC,KAAA2+B,GAAA,qBAAA3+B,EAAA2+B,GAAA,gBAhLA2iE,CAAAjB,GAGA,IAAAe,EACA,OAGA,MAGAG,EAHA/hG,KAAA4yB,OAAAy3D,QAAAv5C,KAAAC,aAGAwL,aAAAqlD,GAIAI,EAAA,IAAgC7/C,GAChC8/C,EAAAjiG,KAAA4yB,OAAAhzB,KAAAi2E,QACAmsB,EAAAviD,UAAAsiD,IACA5jE,SAAA,GAGA+jE,EAAAliG,KAAA4yB,OAAAy3D,QAAA9rB,OAAAL,eAAA0jC,GAQA,IAAAM,EACA,OAIA,MAAAC,EAAAt+F,MAAAC,KAAAm+F,EAAAhgE,eACAmgE,EAAAv+F,MAAAC,KAAAo+F,EAAAjgE,eAIAogE,EAAAF,IAAA//F,OAAA,GACAkgG,EAAAF,IAAAhgG,OAAA,GAOA,GALAigG,KAAAljE,GAAA,cAAAmjE,MAAAnjE,GAAA,cACAgjE,EAAA17E,OAIA87E,GAAAJ,KAAAI,GAAAH,GACA,OAOA,MAAAhnD,EAAA+mD,EAAAp0F,IAAAoE,KAAAgtB,GAAA,QAAAhtB,EAAAvS,KAAA,KAAA0P,KAAA,IAAAa,QAAA,eACAgrC,EAAAinD,EAAAr0F,IAAAoE,KAAAgtB,GAAA,QAAAhtB,EAAAvS,KAAA,KAAA0P,KAAA,IAAAa,QAAA,eAGA,GAAAgrC,IAAAC,EACA,OAGA,MAAAonD,EAAqBvoD,GAAIkB,EAAAC,IAEzBqnD,cAASA,EAAAC,aAAAC,aAAuCC,GAAAJ,GAGhD,IAAAK,EAAA,KAEArtD,IACAqtD,EAAA7iG,KAAAqqF,QAAA9rB,OAAA8J,aAAA7yB,EAAApM,kBAGA,MAAA42D,EAAA5kD,EAAA7+B,OAAAkmF,EAAAC,GACAjc,EAAAzmF,KAAA4yB,OAAA8vC,MAAA9hB,YACA5gD,KAAA4yB,OAAA8vC,MAAAmR,iBAAAquB,EAAAO,GACAziG,KAAA4yB,OAAA8vC,MAAAmR,iBAAAquB,EAAAO,EAAAE,IAGA3iG,KAAA4yB,OAAAy4C,QAAA,SACA7yD,KAAAwnF,EACAn3D,MAAA49C,EACAoZ,YAAAgD,IAOAnjG,oBAAA+tD,EAAAjY,GACA,WAAAiY,EAAAlrD,KACA,OAYA,MAAA64C,EAAAqS,EAAArS,QAAAjrC,QAAA,eAIAqyF,EAAqBvoD,GAFrBwT,EAAAtS,QAAAhrC,QAAA,eAEyBirC,IAEzBqnD,cAASA,EAAAC,aAAAC,aAAuCC,GAAAJ,GAGhD,IAAAK,EAAA,KAEArtD,IACAqtD,EAAA7iG,KAAAqqF,QAAA9rB,OAAA8J,aAAA7yB,EAAApM,kBAIA,MAAA05D,EAAA9iG,KAAAqqF,QAAAv5C,KAAA+iC,iBAAApmB,EAAAnsD,KAAAmhG,GACAM,EAAA/iG,KAAAqqF,QAAA9rB,OAAAH,gBAAA0kC,GACArc,EAAAzmF,KAAA4yB,OAAA8vC,MAAA9hB,YAAAmiD,IAAAl7D,aAAA86D,IACA3C,EAAA5kD,EAAA7+B,OAAAkmF,EAAAC,GAEA1iG,KAAA4yB,OAAAy4C,QAAA,SACA7yD,KAAAwnF,EACAn3D,MAAA49C,EACAoZ,YAAAgD,IAOAnjG,yBAAA+tD,GACA,eAAAA,EAAAlrD,KACA,OAGA,MAAAs2D,EAAiBioC,GAAuBrzC,GACxCq1C,EAAA9iG,KAAAqqF,QAAAv5C,KAAA+iC,iBAAApmB,EAAAnsD,KAAAu3D,EAAAj3D,OACAmhG,EAAA/iG,KAAAqqF,QAAA9rB,OAAAH,gBAAA0kC,GACAE,EAAAnqC,EAAApsD,OAAA,GAAA7M,KAEAI,KAAA4yB,OAAAy4C,QAAA,SAKA7yD,KAAAwqF,EAAA7yF,QAAA,eACA04B,MAAA7oC,KAAA4yB,OAAA8vC,MAAA9hB,YAAAmiD,MAiCA,SAAAR,GAAA1jF,GACA,OAAAA,EAAAsT,MAAAzO,KAAAyb,GAAA,SAAAzb,EAAAyb,GAAA,cAQA,SAAAyjE,GAAAJ,GAEA,IAAAC,EAAA,KAEAQ,EAAA,KAGA,QAAA5lG,EAAA,EAAiBA,EAAAmlG,EAAApgG,OAAuB/E,IAAA,CAGxC,SAFAmlG,EAAAnlG,KAGAolG,EAAA,OAAAA,EAAAplG,EAAAolG,EACAQ,EAAA5lG,GAKA,IAAAslG,EAAA,EAEAD,EAAA,EAEA,QAAArlG,EAAAolG,EAA6BplG,GAAA4lG,EAAmB5lG,IAEhD,UAAAmlG,EAAAnlG,IACAslG,IAIA,UAAAH,EAAAnlG,IACAqlG,IAIA,OAASA,aAAAC,YAAAF,uBC1SYS,WAAcvwE,GAInCw2C,wBACA,cAMAzpE,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OAGAwtE,EAAA,IAA2BX,GAAY7sE,IAAA0zC,OAAApoE,IAAA,wBAEvC00B,EAAA04C,SAAAnoE,IAAA,QAAAi9F,GAEEF,GAA8BttE,GDpBjB,SAAAA,GACfA,EAAAy3D,QAAAv5C,KAAAlwC,SAAAiwB,GAAA,aAAAC,EAAA+vE,EAAArrD,KACA,IAAMgsD,GAAe5uE,GAAAuwE,OAAAtC,EAAArrD,KCmBnB4tD,CAA6BxwE,UCpBVywE,WAAsBzF,GAQ3Cl+F,YAAAkzB,EAAAwR,GACArkC,MAAA6yB,GASA5yB,KAAAokC,YASApkC,KAAA2/F,QAAA,IAAqBX,GAAYpsE,EAAA8vC,MAAA9vC,EAAA0zC,OAAApoE,IAAA,oBAajCwB,QAAA8H,MACA,MAAAk7D,EAAA1iE,KAAA4yB,OAAA8vC,MACAlhB,EAAAkhB,EAAA9hE,SAEA8hE,EAAA+B,cAAAzkE,KAAA2/F,QAAA3vF,MAAAu9B,IACAvtC,KAAA2/F,QAAAI,OAEA,MAAAp8D,EAAA4J,EAAAktC,gBAAAj5B,EAAA7d,WAOAwgD,EAAAxgD,EAAAgD,YAQA,GALAhD,EAAAgD,aACA+7B,EAAA8iB,gBAAA7hD,GAAuCS,UAAApkC,KAAAokC,UAAAshD,KAAAl+E,EAAAk+E,OAIvC1lF,KAAAsjG,4CAAA97F,EAAA+7F,UAAA,GAGA,YAFAvjG,KAAAwjG,mCAAAj2D,GAMA,GAAA5J,EAAAgD,YACA,OAGA,IAAA63C,EAAA,EAEA76C,EAAAyF,gBAAAolC,uBAAA3sE,QAAAgnC,IACA21C,GAAmBx2C,GACnBa,EAAAoM,WAAuB1Q,kBAAA,EAAAE,kBAAA,EAAAD,SAAA,OAIvBk+B,EAAAwhB,cAAAvgD,GAAoCwgD,4BACpCnkF,KAAA2/F,QAAAnmE,MAAAglD,GAEAjxC,EAAAkI,aAAA9R,GAEA3jC,KAAA2/F,QAAAM,WAsBAvgG,4CAAA6jG,GAEA,GAAAA,EAAA,EACA,SAGA,MAAA7gC,EAAA1iE,KAAA4yB,OAAA8vC,MAEA/+B,EADA++B,EAAA9hE,SACA+iC,UACAi3C,EAAAlY,EAAAC,OAAAyhB,gBAAAzgD,GAMA,KAFAA,EAAAgD,aAAAhD,EAAAggC,sBAAAiX,IAGA,SAGA,IAAAlY,EAAAC,OAAAuL,WAAA0M,EAAA,aACA,SAGA,MAAA6oB,EAAA7oB,EAAAz8C,SAAA,GAKA,OAAAslE,GAAA,cAAAA,EAAA7lG,KAYA8B,mCAAA6tC,GACA,MAAAm1B,EAAA1iE,KAAA4yB,OAAA8vC,MAEA/+B,EADA++B,EAAA9hE,SACA+iC,UACAi3C,EAAAlY,EAAAC,OAAAyhB,gBAAAzgD,GACAogD,EAAAx2C,EAAAhqC,cAAA,aAEAgqC,EAAAn9B,OAAAm9B,EAAAk7B,cAAAmS,IACArtC,EAAAt9B,OAAA8zE,EAAAnJ,GAEArtC,EAAAkI,aAAAsuC,EAAA,UC/JqB2f,WAAuBr7C,GAC5C3oD,YAAAoxC,GACA/wC,MAAA+wC,GAEA,MAAAlwC,EAAAkwC,EAAAlwC,SACA,IAAA2iG,EAAA,EAEA3iG,EAAAiwB,GAAA,SAAAC,EAAAlxB,KACAA,EAAAmwC,SAAwBhB,GAAQt/B,QAAA7P,EAAAmwC,SAA2BhB,GAAQK,YACnEm0D,EAAA,KAIA3iG,EAAAiwB,GAAA,WAAAC,EAAAlxB,KACA,MAAAw/C,KAEA,GAAAx/C,EAAAmwC,SAAwBhB,GAAQt/B,OAChC2vC,EAAAhb,UAAA,UACAgb,EAAAsmC,KAAA,gBACI,IAAA9lF,EAAAmwC,SAA2BhB,GAAQK,UAIvC,OAHAgQ,EAAAhb,UAAA,WACAgb,EAAAsmC,KAAA,YAKA,MAAAie,EAA2Bv1D,GAAGC,MAAAzuC,EAAAowC,OAAApwC,EAAAqwC,QAK9B,IAAA50B,EAJA+jC,EAAAsmC,KAAAie,EAAA,OAAAvkD,EAAAsmC,KACAtmC,EAAAmkD,aAIA3iG,EAAAoa,KAAA,SAAA8V,GAAAzV,EAAAyV,GAAqDrM,SAAA,YAErD7jB,EAAAgnB,KAAA,aAAgC8mC,GAAY9tD,EAAAhB,EAAA+uD,SAAAvP,IAI5C/jC,KAAA4I,KAAAH,QACAgN,EAAA7M,SAQAvkB,YC7Ce,SAAAkkG,GAAAhxE,GACf,MAAA8vC,EAAA9vC,EAAA8vC,MACA5xB,EAAAle,EAAAy3D,QAAAv5C,KACA+yD,EAAA,IAEA,IAAAC,EAAA,KACAC,EAAArhC,EAAA+X,gBAAA/X,EAAA9hE,SAAA+iC,WACAqgE,EAAAn4E,KAAAC,MAEA42C,EAAA9hE,SAAA+iC,UAAA9S,GAAA,SAQA,SAAAC,GACA,MAAAkhC,EAAA0Q,EAAA+X,gBAAA3pD,EAAAhgB,QACAizF,EAAAj+D,QAAAksB,KACA8xC,EAAAC,EACAA,EAAA/xC,EACAgyC,EAAAn4E,KAAAC,SAXAglB,EAAAlwC,SAAAiwB,GAAA,YAoBA,SAAAC,EAAA+vE,GACOD,GAAwBC,IA6E/B,SAAAA,GACA,UAAApzC,KAAAozC,EAAA,CACA,gBAAApzC,EAAAlrD,KACA,SAGA,MAAA0hG,EAAAx2C,EAAAQ,YACAi2C,EAAAz2C,EAAAS,YAGA,IAAAi2C,GAAAF,GACA,SAGA,MAAAzB,EAAqBvoD,GAAIgqD,EAAAC,GAGzBE,EAAA5B,EAAAnuD,KAAAliC,GAAA,WAAAA,GACAkyF,EAAA7B,EAAAnuD,KAAAliC,GAAA,WAAAA,GAEA,GAAAiyF,IAAAC,EACA,SAIA,SAtG+BC,CAAAzD,MAY/B,WAqCAh1E,KAAAC,MAAAk4E,EAAAH,GACAC,MAAAn9D,aAAAo9D,EAAAp9D,aACAo9D,EAAA74D,kBAAApF,QAAAg+D,EAAA54D,oBAnCAw3B,EAAA+B,cAAAl3B,IACAA,EAAAkI,aAAAquD,KAIAlxE,EAAAy4C,QAAA,UApBAk5B,GAGAzzE,EAAA7M,UAzBkDQ,SAAA,YAmIlD,SAAA0/E,GAAAtlF,GACA,OAAAA,EAAAsT,MAAAzO,KAAAyb,GAAA,2BChJqBqlE,WAAe7xE,GAIpCw2C,wBACA,eAGAzpE,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAke,EAAAle,EAAAy3D,QAAAv5C,KACAgoD,EAAAhoD,EAAAlwC,SAEAkwC,EAAAunB,YAAoBqrC,IAEpB9wE,EAAA04C,SAAAnoE,IAAA,oBAA4CkgG,GAAazwE,EAAA,YACzDA,EAAA04C,SAAAnoE,IAAA,aAAqCkgG,GAAazwE,EAAA,aAElD5yB,KAAAmlB,SAAA2zE,EAAA,UAAAhoE,EAAAlxB,KACAgzB,EAAAy4C,QAAA,WAAAzrE,EAAAwkC,UAAA,0BAA8EshD,KAAA9lF,EAAA8lF,KAAA6d,SAAA3jG,EAAA2jG,WAC9E3jG,EAAAuiB,iBACA2uB,EAAAysD,yBAGEqG,GAAuChxE,UCvBpB6xE,WAAe9xE,GACpCw3C,sBACA,OAAW+4B,GAAOsB,IAMlBr7B,wBACA,sBCTqBu7B,WAAoB7tB,GACzCt0E,WACA,aAQA7C,QACA,WAAaglG,GAAW1kG,KAAA22E,aAQxBj3E,cACA,WAAaglG,GAAW1kG,KAAA22E,YAAA,GAGxBj3E,YAMAkiC,uBACA,qBCpCA,MAAA+iE,GAAA,IAAAl+F,IAwBA,SAAAm+F,GAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAL,GAAAzmG,IAAA2mG,GAEAG,IACAA,EAAA,IAAAv+F,IACAk+F,GAAAv9F,IAAAy9F,EAAAG,IAGAA,EAAA59F,IAAA09F,EAAAC,GAgCA,SAAAE,GAAArlF,GACA,OAAAA,GAWO,SAASslF,GAAStlF,EAAAqU,EAAA05C,MACzB,MAAAo3B,EA9BA,SAAAF,EAAAC,GACA,MAAAE,EAAAL,GAAAzmG,IAAA2mG,GAEA,OAAAG,KAAAvjG,IAAAqjG,GACAE,EAAA9mG,IAAA4mG,GAGAG,GAuBAE,CAAAvlF,EAAAlX,YAAAurB,EAAAvrB,aAEA,IAGA,OAAAq8F,EAFAnlF,IAAAslB,QAEAjR,EAAA05C,GACE,MAAA97D,GAUF,MATE/B,GAAA,EAAG7P,MAAA,yCAAA4R,EAAAlS,SACHmQ,GAAA,EAAG7P,MAAA,wBAAA2f,GACH9P,GAAA,EAAG7P,MAAA,2BAAAg0B,GACHnkB,GAAA,EAAG7P,MAAA,oBAAA0tE,EAAAy3B,WACHt1F,GAAA,EAAG7P,MAAA,qBAAA0tE,EAAA03B,YACHv1F,GAAA,EAAG7P,MAAA,qBAAA0tE,EAAA23B,YACHx1F,GAAA,EAAG7P,MAAA,qBAAA0tE,EAAA43B,YACHz1F,GAAA,EAAG7P,MAAA,qBAAA0tE,EAAA63B,YAEL3zF,GAuCO,SAAA4zF,GAAAC,EAAAC,EAAAn+F,GAOP,GAJAk+F,IAAAlvF,QACAmvF,IAAAnvF,QAGA,GAAAkvF,EAAAtjG,QAAA,GAAAujG,EAAAvjG,OACA,OAAUsjG,cAAAC,eAqIV,MAAAC,EAAA,IAAAv2F,QAGA,UAAAunE,KAAA8uB,EACAE,EAAAx+F,IAAAwvE,EAAA,GAIA,MAAAh3E,GACAimG,iBAAAH,IAAAtjG,OAAA,GAAAu0E,YAAA,EACAmvB,iBAAAH,IAAAvjG,OAAA,GAAAu0E,YAAA,EACAovB,yBAAAL,EAAAtjG,OACA4jG,yBAAAL,EAAAvjG,QAGA6jG,EAAA,IAA4BC,GAAc1+F,EAAA5G,SAAA4G,EAAA2+F,cAC1CF,EAAAG,sBAAAV,GACAO,EAAAG,sBAAAT,GAGA,IAAAtoG,EAAA,EAGA,KAAAA,EAAAqoG,EAAAtjG,QAAA,CAEA,MAAAikG,EAAAX,EAAAroG,GAGAipG,EAAAV,EAAA1nG,IAAAmoG,GAGA,GAAAC,GAAAX,EAAAvjG,OAAA,CACA/E,IACA,SAGA,MAAAkpG,EAAAZ,EAAAW,GAGAE,EAAkBtB,GAASmB,EAAAE,EAAAN,EAAAQ,WAAAJ,EAAAE,GAAA,IAC3BG,EAAkBxB,GAASqB,EAAAF,EAAAJ,EAAAQ,WAAAF,EAAAF,GAAA,IAI3BJ,EAAAU,eAAAN,EAAAE,GAEAN,EAAAG,sBAAAI,EAAAH,GACAJ,EAAAG,sBAAAM,EAAAH,GAMA,UAAAK,KAAAJ,EAMAZ,EAAAx+F,IAAAw/F,EAAAN,EAAAI,EAAAtkG,QAIAsjG,EAAAnyF,OAAAlW,EAAA,KAAAmpG,GACAb,EAAApyF,OAAA+yF,EAAA,KAAAI,GAGA,GAAAl/F,EAAAq/F,aAAA,CAEA,MAAAC,EAAApB,EAAAtjG,OAAAxC,EAAAmmG,yBACAgB,EAAApB,EAAAvjG,OAAAxC,EAAAomG,yBAMAa,GAAAnB,EAAAqB,EAAAD,GACAD,GAAAlB,EAAAmB,EAAAC,GAOA,OAHAC,GAAAtB,EAAA9lG,EAAAkmG,kBACAkB,GAAArB,EAAA/lG,EAAAimG,mBAESH,cAAAC,qBAKHO,GAMNxmG,YAAAkB,EAAAulG,GAEAnmG,KAAAinG,SAAArmG,EAAAqgF,QAGAjhF,KAAAknG,cAAAf,EAOAnmG,KAAAmnG,oBAAA,IAAA1gG,IAKAzG,KAAAonG,WAAA,IAAA3gG,IAqBA/G,sBAAA+Q,EAAA42F,EAAA,MACA,MAAAC,EAAAD,EAAArnG,KAAAmnG,oBAAAjpG,IAAAmpG,GAAA,KAEA,UAAA32F,KAAAD,EACAzQ,KAAAmnG,oBAAA//F,IAAAsJ,EAAA42F,GAAA52F,GAUAhR,eAAA2mG,EAAAE,GAQA,OAAAF,EAAA39F,aACA,KAAQqvE,GACR,OAAAwuB,EAAA79F,aACA,KAAUswE,GACVqtB,EAAA3yD,eAAA5N,QAAAygE,EAAA/qC,iBAAA+qC,EAAA9qC,WAAAr0B,iBAAAi/D,EAAA3yD,gBACA1zC,KAAAunG,aAAAlB,EAAAE,EAAA,kBACOF,EAAA3yD,eAAA5N,QAAAygE,EAAAxqC,kBACP/7D,KAAAunG,aAAAlB,EAAAE,EAAA,iBACOF,EAAA3yD,eAAA5M,QAAAy/D,EAAA/qC,iBACPx7D,KAAAunG,aAAAlB,EAAAE,EAAA,mBAGA,MAGA,KAAUxuB,GACVsuB,EAAA3yD,eAAA5N,QAAAygE,EAAA/qC,iBAAA6qC,EAAA3yD,eAAA7U,SAAA0nE,EAAA/qC,gBACAx7D,KAAAunG,aAAAlB,EAAAE,EAAA,gBAEAvmG,KAAAunG,aAAAlB,EAAAE,EAAA,eAOA,MAGA,KAAQttB,GACR,OAAAstB,EAAA79F,aACA,KAAUswE,GACVqtB,EAAA1qC,cAAA98B,SAAA0nE,EAAA/qC,iBACAx7D,KAAAunG,aAAAlB,EAAAE,EAAA,eAGA,MAGA,KAAUxuB,IACVsuB,EAAA1qC,cAAA71B,QAAAygE,EAAA/qC,iBAAA6qC,EAAA1qC,cAAA98B,SAAA0nE,EAAA/qC,kBACAx7D,KAAAunG,aAAAlB,EAAAE,EAAA,eAOA,MAGA,KAAQvtB,GACR,OAAAutB,EAAA79F,aACA,KAAUswE,GACVqtB,EAAA3yD,eAAA5N,QAAAygE,EAAA/qC,iBACAx7D,KAAAunG,aAAAlB,EAAAE,EAAA,uBAGAF,EAAA7qC,eAAA11B,QAAAygE,EAAA/qC,iBACAx7D,KAAAunG,aAAAlB,EAAAE,EAAA,oBAGA,MAGA,KAAUttB,GACVotB,EAAA7qC,eAAA11B,QAAAygE,EAAA5qC,gBACA37D,KAAAunG,aAAAlB,EAAAE,EAAA,mBAeA7mG,WAAA2mG,EAAAE,EAAAnB,GACA,OACAA,YACAC,WAAArlG,KAAAwnG,WAAAnB,GACAf,WAAAtlG,KAAAwnG,WAAAjB,GACAhB,WAAAvlG,KAAAknG,cAAAlnG,KAAAynG,aAAApB,EAAAE,GAAA,KACAf,WAAAxlG,KAAAknG,cAAAlnG,KAAAynG,aAAAlB,EAAAF,GAAA,MAUA3mG,WAAAk3E,GAIA,MAAA8wB,EAAA1nG,KAAAmnG,oBAAAjpG,IAAA04E,GAGA,OAAA8wB,EAAAC,WAAA3nG,KAAAinG,SAAAW,kBAAAF,GA2BAhoG,aAAA2mG,EAAAE,GAEA,MAAAsB,EAAA7nG,KAAAmnG,oBAAAjpG,IAAAqoG,GACAuB,EAAA9nG,KAAAinG,SAAAc,mBAAAF,GAGA,IAAAC,EACA,YAGA,MAAAE,EAAAhoG,KAAAmnG,oBAAAjpG,IAAAmoG,GACA4B,EAAAjoG,KAAAonG,WAAAlpG,IAAA8pG,GAGA,OAAAC,GACAA,EAAA/pG,IAAA4pG,IAGA,KASApoG,aAAA2mG,EAAAE,EAAA2B,GAEA,MAAAF,EAAAhoG,KAAAmnG,oBAAAjpG,IAAAmoG,GACAwB,EAAA7nG,KAAAmnG,oBAAAjpG,IAAAqoG,GAEA,IAAA0B,EAAAjoG,KAAAonG,WAAAlpG,IAAA8pG,GAEAC,IACAA,EAAA,IAAAxhG,IACAzG,KAAAonG,WAAAhgG,IAAA4gG,EAAAC,IAGAA,EAAA7gG,IAAAygG,EAAAK,IA4BA,SAAAlB,GAAAv2F,EAAAkmE,GACA,UAAAjmE,KAAAD,EACAC,EAAAimE,gBAWA,SAAAkwB,GAAAp2F,EAAA+xB,GACA,QAAAnlC,EAAA,EAAiBA,EAAAmlC,EAAanlC,IAC9BoT,EAAA/O,KAAA,IAAuBgjG,GAAW,IA8HlC,SAAAyD,GAAAC,EAAAxpG,EAAAksB,GACA,MAGAu9E,EAHAD,EAAA/lE,MAGA23B,QAAA,GAAA/iD,aAAArY,GAEA,GAAAypG,GAAAv9E,EACA,YAGA,MAAA+d,EAAA,IAAmBwzB,GAAK+rC,EAAAx3F,SAAAw3F,EAAAx3F,SAAAi3B,aAAAugE,EAAA5lE,UAExB,WAAYq1C,GAAkBhvC,EAAAjqC,EAAAypG,EAAAv9E,EAAA,GAg2C9B,SAAAw9E,GAAA1oF,EAAAqU,GACA,cAAArU,EAAA8zB,eAAAooB,0BAAA7nC,EAAAunC,eAAAvnC,EAAAuO,SAgBA,SAAA+lE,GAAAjhE,EAAAoM,GAUA,MAAAjjC,KAGA,QAAApT,EAAA,EAAiBA,EAAAiqC,EAAAllC,OAAmB/E,IAAA,CAEpC,MAAAwrC,EAAAvB,EAAAjqC,GACAu5E,EAAA,IAAiBmB,GACjBlvC,EAAA7sB,MACA6sB,EAAA5sB,IAAAgc,OAAA4Q,EAAA7sB,MAAAic,OAGAyb,EAAA5N,QAAA+C,EAAA5sB,KAAA4sB,EAAA7sB,MAAA03B,EACA,GAGAjjC,EAAA/O,KAAAk1E,GAGA,QAAArkE,EAAAlV,EAAA,EAAsBkV,EAAA+0B,EAAAllC,OAAmBmQ,IAOzC+0B,EAAA/0B,GAAA+0B,EAAA/0B,GAAAgpD,sBAAAqb,EAAApb,eAAAob,EAAAljC,eAAAkjC,EAAAp0C,SAAA,GAGAkR,IAAA6nB,sBAAAqb,EAAApb,eAAAob,EAAAljC,eAAAkjC,EAAAp0C,SAGA,OAAA/xB,EA9hDAm0F,GAAmB/sB,GAAoBA,GAAkB,CAAAj4D,EAAAqU,EAAA05C,KACzD,GAAA/tD,EAAAhhB,MAAAq1B,EAAAr1B,IAAA,CAIA,MAAA6R,EAAAmP,EAAAipB,MAAAi0B,cAAA7oC,EAAA4U,OAAA96B,IAAA86B,GACA,IAAcgvC,GAAkBhvC,EAAAjpB,EAAAhhB,IAAAghB,EAAAjY,SAAAiY,EAAAkL,SAAA,IAIhCkyC,EAAAp9C,EAAAipB,MAAA+rB,gBAAA3gC,EAAA4U,OAWA,OATAm0B,GAIA2Q,EAAAy3B,WACA30F,EAAA/O,KAAA,IAAyBm2E,GAAkB7a,EAAA/oC,EAAAr1B,IAAAq1B,EAAAnJ,SAAAlL,EAAAkL,SAAA,IAI3C,GAAAra,EAAArO,QACA,IAAgBsiG,GAAW,IAG3Bj0F,EAGA,OAAAmP,KAIAglF,GAAmB/sB,GAAoBS,GAAe,CAAA14D,EAAAqU,KAOtD,GAAArU,EAAAipB,MAAA7sB,MAAAwsF,gBAAAv0E,EAAArjB,WAAAgP,EAAAipB,MAAAzB,iBAAAnT,EAAArjB,UAAA,CAGA,MACAhH,EADAgW,EAAAipB,MAAAyyB,2BAAArnC,EAAArjB,SAAAqjB,EAAAuO,SAAAvO,EAAAskD,yBACAxqE,IAAA5P,GACA,IAAc05E,GAAkB15E,EAAAyhB,EAAAhhB,IAAAghB,EAAAjY,SAAAiY,EAAAkL,SAAAlL,EAAA+2D,cAGhC,GAAA1iD,EAAAskD,wBAAA,CA4CA,MAAA3B,EAAAuxB,GAAAl0E,EAAArU,EAAAhhB,IAAAghB,EAAAjY,UAEAivE,GACAhtE,EAAA6D,QAAAmpE,GAKA,OAAAhtE,EAMA,OAFAgW,EAAAipB,MAAAjpB,EAAAipB,MAAAyyB,2BAAArnC,EAAArjB,SAAAqjB,EAAAuO,SAAA,OAEA5iB,KA8BAglF,GAAmB/sB,GAAoBmB,GAAc,CAAAp5D,EAAAqU,KACrD,MAAAqT,KAOA1nB,EAAAipB,MAAA7sB,MAAAwsF,gBAAAv0E,EAAA8nC,oBACAn8C,EAAAipB,MAAAzB,iBAAAnT,EAAA8nC,mBAAAn8C,EAAAipB,MAAA7sB,MAAA8pB,QAAA7R,EAAA8nC,oBACAz0B,EAAA5lC,KAAgB26D,GAAKt0B,4BAAA9T,EAAA4nC,kBAAA,IAIrB,MAAAhzB,EAAAjpB,EAAAipB,MAAAwyB,gCAAApnC,GAQA,OALA4U,EAAAlC,aACAW,EAAA5lC,KAAAmnC,GAIAvB,EAAAv5B,IAAA86B,GACA,IAAagvC,GAAkBhvC,EAAAjpB,EAAAhhB,IAAAghB,EAAAjY,SAAAiY,EAAAkL,SAAAlL,EAAA+2D,gBAI/BiuB,GAAmB/sB,GAAoBE,GAAa,CAAAn4D,EAAAqU,KAIpD,OAiBA,SAAA4U,EAAA4/D,GACA,MAAA7rC,EAAmBP,GAAKt0B,4BAAA0gE,EAAAjtC,eAAAitC,EAAAjmE,SAIxB,IAAAw6B,EAAA,KACAD,KAGAH,EAAAH,cAAA5zB,GAAA,GAEAm0B,EAAAn0B,EACEA,EAAA7sB,MAAAwsF,gBAAA5rC,EAAA5gD,QAGF+gD,EAAAl0B,EAAAi0B,cAAAF,GACAI,EAAAn0B,EAAA+rB,gBAAAgI,IAOAG,GAAAl0B,GAGA,MAAAj/B,KAIA,QAAAiZ,KAAAk6C,EAAA,CAGAl6C,IAAAi5C,0BAAA2sC,EAAAjtC,eAAAitC,EAAAjmE,SAGA,MAAAkR,EAAA+0D,EAAAxwB,qBAGAvb,EAAA75C,EAAA7G,MAAAwsF,gBAAA90D,GAGA7wB,IAAAy4C,2BAAA5nB,EAAA+0D,EAAAjmE,QAAAk6B,GAEA9yD,EAAAlI,QAAAmhB,GAKAm6C,GACApzD,EAAAlI,KACAs7D,EAAAzB,sBAAAktC,EAAAjtC,eAAAitC,EAAA/0D,eAAA+0D,EAAAjmE,SAAA,OAIA,OAAA54B,EA3EA8+F,CAAA9oF,EAAAipB,MAAA5U,GAGAlmB,IAAA86B,GAAA,IAAiCgvC,GAAkBhvC,EAAAjpB,EAAAhhB,IAAAghB,EAAAjY,SAAAiY,EAAAkL,SAAAlL,EAAA+2D,gBA2EnDiuB,GAAmB/sB,GAAoBoB,GAAc,CAAAr5D,EAAAqU,KAerD,GAAArU,EAAAipB,MAAA5sB,IAAA6pB,QAAA7R,EAAAugB,mBAKA,OAJAvgB,EAAA4nC,mBACAj8C,EAAAipB,MAAA5sB,IAAAgc,UAGArY,GAiBA,GAAAA,EAAAipB,MAAA7sB,MAAAwsF,gBAAAv0E,EAAA0nC,gBAAA/7C,EAAAipB,MAAAzB,iBAAAnT,EAAA0nC,eAAA,CACA,MAAA8b,EAAA73D,EAAAslB,QAUA,OARAuyC,EAAA5uC,MAAA,IAAyBwzB,GACzBpoC,EAAA2nC,mBAAA12B,QACAtlB,EAAAipB,MAAA5sB,IAAAy/C,aAAAznC,EAAA0nC,cAAA1nC,EAAA2nC,qBAGAh8C,EAAAipB,MAAA5sB,IAAAgY,EAAA0nC,cAAAz2B,QACAtlB,EAAAipB,MAAA5sB,IAAAu+C,WAAA,cAEA56C,EAAA63D,GAOA,OAFA73D,EAAAipB,MAAAjpB,EAAAipB,MAAAuyB,gCAAAnnC,IAEArU,KAGAglF,GAAmBtsB,GAAiBT,GAAkB,CAAAj4D,EAAAqU,KACtD,MAAArqB,GAAAgW,GAYA,GAAAA,EAAA24D,yBAAA34D,EAAAhP,SAAA43F,gBAAAv0E,EAAA4U,MAAA7sB,QAAAiY,EAAA4U,MAAAzB,iBAAAxnB,EAAAhP,UAAA,CACA,MAAAgmE,EAAAuxB,GAAAvoF,EAAAqU,EAAAr1B,IAAAq1B,EAAAnJ,UAEA8rD,GACAhtE,EAAAlI,KAAAk1E,GAOA,OAAAhtE,IAGAg7F,GAAmBtsB,GAAiBA,GAAe,CAAA14D,EAAAqU,EAAA05C,IAUnD/tD,EAAAhP,SAAAk1B,QAAA7R,EAAArjB,WAAA+8D,EAAAy3B,WACAxlF,IAKAA,EAAAhP,SAAAgP,EAAAhP,SAAAsqD,iCAAAjnC,IAEArU,KAGAglF,GAAmBtsB,GAAiBP,GAAa,CAAAn4D,EAAAqU,KAGjDrU,EAAAhP,SAAAgP,EAAAhP,SAAAuqD,+BAAAlnC,IAEArU,KAGAglF,GAAmBtsB,GAAiBW,GAAc,CAAAr5D,EAAAqU,KAGlDrU,EAAAhP,SAAAgP,EAAAhP,SAAAwqD,gCAAAnnC,IAEArU,KAGAglF,GAAmBtsB,GAAiBU,GAAc,CAAAp5D,EAAAqU,KAClDrU,EAAAhP,SAAAgP,EAAAhP,SAAAyqD,gCAAApnC,IAEArU,KAKAglF,GAAmBlsB,GAAiBJ,GAAe,CAAA14D,EAAAqU,KACnDrU,EAAAgiD,WACAhiD,EAAAgiD,SAAAhiD,EAAAgiD,SAAA1G,iCAAAjnC,GAAA,IAGArU,EAAAg2B,WACAh2B,EAAAg2B,SAAAh2B,EAAAg2B,SAAAslB,iCAAAjnC,GAAA,KAGArU,KAGAglF,GAAmBlsB,GAAiBA,GAAe,CAAA94D,EAAAqU,EAAA05C,KACnD,GAAA/tD,EAAAhiB,MAAAq2B,EAAAr2B,KAAA,CACA,IAAA+vE,EAAAy3B,UAGA,WAAgBV,GAAW,IAF3B9kF,EAAAgiD,SAAA3tC,EAAA2hB,SAAA3hB,EAAA2hB,SAAA1Q,QAAA,KAMA,OAAAtlB,KAGAglF,GAAmBlsB,GAAiBM,GAAc,CAAAp5D,EAAAqU,KAClDrU,EAAAgiD,WACAhiD,EAAAgiD,SAAAhiD,EAAAgiD,SAAAvG,gCAAApnC,IAGArU,EAAAg2B,WACAh2B,EAAAg2B,SAAAh2B,EAAAg2B,SAAAylB,gCAAApnC,KAGArU,KAGAglF,GAAmBlsB,GAAiBX,GAAa,CAAAn4D,EAAAqU,KACjDrU,EAAAgiD,WACAhiD,EAAAgiD,SAAevF,GAAK2G,kBAAApjD,EAAAgiD,SAAAzG,+BAAAlnC,KAGpBrU,EAAAg2B,WACAh2B,EAAAg2B,SAAeymB,GAAK2G,kBAAApjD,EAAAg2B,SAAAulB,+BAAAlnC,MAGpBrU,KAGAglF,GAAmBlsB,GAAiBO,GAAc,CAAAr5D,EAAAqU,KAClDrU,EAAAgiD,WACAhiD,EAAAgiD,SAAAhiD,EAAAgiD,SAAAxG,gCAAAnnC,IAGArU,EAAAg2B,WACAh2B,EAAAg2B,SAAAh2B,EAAAg2B,SAAAwlB,gCAAAnnC,KAGArU,KAKAglF,GAAmB5rB,GAAgBV,GAAe,CAAA14D,EAAAqU,KAClDrU,EAAA47C,eAAAgtC,gBAAAv0E,EAAArjB,YACAgP,EAAA4iB,SAAAvO,EAAAuO,SAGA5iB,EAAA47C,eAAA57C,EAAA47C,eAAAN,iCAAAjnC,GACArU,EAAA8zB,eAAA9zB,EAAA8zB,eAAAwnB,iCAAAjnC,IAEArU,KAGAglF,GAAmB5rB,GAAgBA,GAAc,CAAAp5D,EAAAqU,EAAA05C,KAQjD,GAAA/tD,EAAA47C,eAAA11B,QAAA7R,EAAAunC,iBAAA57C,EAAA8zB,eAAA5N,QAAA7R,EAAAyf,gBAAA,CAYA,GAAAi6B,EAAA23B,WAEG,CACH,MAAAthF,EAAAiQ,EAAA4nC,kBAAA73C,KAAAxN,QAMA,OALAwN,EAAAtiB,KAAA,GAEAke,EAAA47C,eAAA,IAA0BjB,GAAQtmC,EAAA4nC,kBAAAl/D,KAAAqnB,GAClCpE,EAAA4iB,QAAA,GAEA5iB,GARA,WAAgB8kF,GAAW,IAuC3B,GACA9kF,EAAA47C,eAAA11B,QAAA7R,EAAAunC,kBAAA57C,EAAA8zB,eAAA5N,QAAA7R,EAAAyf,kBACAi6B,EAAA23B,YAAA,iBAAA33B,EAAA43B,WACA,CACA,MAAAoD,EAAA,cAAA/oF,EAAA8zB,eAAA/2C,KAAAonC,SACA6kE,EAAA,cAAA30E,EAAAyf,eAAA/2C,KAAAonC,SAWA,GALA6kE,IAAAD,KAHAA,IAAAC,IAMAj7B,EAAAy3B,UAEA,CACA,MAAA5pC,EAAAvnC,EAAAyf,eAAA2nB,gCAAApnC,GACAyf,EAAA9zB,EAAA8zB,eAAA2nB,gCAAApnC,GAEA,WAAgB8jD,GAAavc,EAAA57C,EAAA4iB,QAAAkR,EAAA,IAE7B,WAAgBgxD,GAAW,IAmB3B,OAbA9kF,EAAA47C,eAAAgtC,gBAAAv0E,EAAAyf,kBACA9zB,EAAA4iB,SAAAvO,EAAAuO,SAGA5iB,EAAA47C,eAAA57C,EAAA47C,eAAAH,gCAAApnC,GACArU,EAAA8zB,eAAA9zB,EAAA8zB,eAAA2nB,gCAAApnC,GAIArU,EAAAi8C,kBAAA/1B,QAAA7R,EAAA4nC,oBAAA8R,EAAAy3B,YACAxlF,EAAAi8C,kBAAAj8C,EAAAi8C,kBAAAR,gCAAApnC,KAGArU,KAGAglF,GAAmB5rB,GAAgBjB,GAAa,CAAAn4D,EAAAqU,EAAA05C,KAYhD,MAAAk7B,EAAsBxsC,GAAKt0B,4BAAA9T,EAAAunC,eAAAvnC,EAAAuO,SAE3B,gBAAAvO,EAAA1xB,OAAAorE,EAAA23B,YACA1lF,EAAAm8C,iBAAAysC,gBAAAv0E,EAAAunC,iBAAAqtC,EAAAzhE,iBAAAxnB,EAAA47C,iBACA,IAAgBkpC,GAAW,KAM3B9kF,EAAA47C,eAAAgtC,gBAAAv0E,EAAAyf,kBACA9zB,EAAA4iB,SAAAvO,EAAAuO,SAGA5iB,EAAA47C,eAAAgtC,gBAAAv0E,EAAAunC,kBACA57C,EAAA4iB,SAAAvO,EAAAuO,SAGA5iB,EAAA47C,eAAA57C,EAAA47C,eAAAL,+BAAAlnC,GACArU,EAAA8zB,eAAA9zB,EAAA8zB,eAAAynB,+BAAAlnC,GAMArU,EAAAi8C,kBAAA/1B,QAAA7R,EAAAyf,kBACA9zB,EAAAi8C,kBAAAj8C,EAAAi8C,kBAAAV,+BAAAlnC,KAGArU,MAGAglF,GAAmB5rB,GAAgBC,GAAc,CAAAr5D,EAAAqU,EAAA05C,KAyEjD,GAxEA15C,EAAA4nC,oBAGAj8C,EAAAi8C,kBAAAj8C,EAAAi8C,kBAAAC,0BAAA7nC,EAAA4nC,kBAAA,GAYAj8C,EAAAm8C,iBAAAj2B,QAAA7R,EAAA4nC,qBACAj8C,EAAA4iB,QAAAvO,EAAAuO,UAwDA5iB,EAAA8zB,eAAA5N,QAAA7R,EAAA0nC,eAAA,CACA,MAAAmtC,EAAA,GAAA70E,EAAAuO,QACAumE,EAAA90E,EAAA4nC,mBAAAj8C,EAAAm8C,iBAAAj2B,QAAA7R,EAAA4nC,mBAEA,GAAAitC,GAAAC,GAAA,uBAAAp7B,EAAA43B,WAGA,OAFA3lF,EAAA47C,eAAA57C,EAAA47C,eAAAJ,gCAAAnnC,IAEArU,GAcA,OAAAA,EAAA47C,eAAA11B,QAAA7R,EAAA0nC,iBAAA,oBAAAgS,EAAA43B,YAAA3lF,EAAA47C,eAAAvjC,OAAA,IACArY,EAAA47C,eAAAvnC,EAAA2nC,mBAAA12B,QACAtlB,EAAA8zB,eAAA9zB,EAAA8zB,eAAA0nB,gCAAAnnC,IAEArU,KAKAA,EAAA47C,eAAAgtC,gBAAAv0E,EAAA0nC,iBACA/7C,EAAA4iB,QAAAvO,EAAA0nC,cAAA1jC,QAGArY,EAAA47C,eAAA57C,EAAA47C,eAAAJ,gCAAAnnC,GACArU,EAAA8zB,eAAA9zB,EAAA8zB,eAAA0nB,gCAAAnnC,IAEArU,MAKAglF,GAAmB7sB,GAAeO,GAAe,CAAA14D,EAAAqU,KACjD,MACAgoC,EADmBI,GAAKt0B,4BAAAnoB,EAAA47C,eAAA57C,EAAA4iB,SACxB04B,iCAAAjnC,GAAA,MAeA,OAbArU,EAAA47C,eAAAS,EAAAjgD,MACA4D,EAAA4iB,QAAAy5B,EAAAhgD,IAAAgc,OAAAgkC,EAAAjgD,MAAAic,OAQArY,EAAA8zB,eAAA5N,QAAA7R,EAAArjB,YACAgP,EAAA8zB,eAAA9zB,EAAA8zB,eAAAwnB,iCAAAjnC,KAGArU,KAGAglF,GAAmB7sB,GAAeA,GAAa,CAAAn4D,EAAAqU,EAAA05C,KAK/C,MAAA/jC,EAAgByyB,GAAKt0B,4BAAAnoB,EAAA47C,eAAA57C,EAAA4iB,SACrBsH,EAAgBuyB,GAAKt0B,4BAAA9T,EAAAunC,eAAAvnC,EAAAuO,SAIrB,IAcAw1C,EAdAotB,EAAAz3B,EAAAy3B,UAIAhhG,GAAAupE,EAAAy3B,UA+BA,GA5BA,gBAAAz3B,EAAA43B,YAAA,eAAA53B,EAAA63B,WACAphG,GAAA,EACE,eAAAupE,EAAA43B,YAAA,gBAAA53B,EAAA63B,aACFphG,GAAA,GAOA4zE,EADAp4D,EAAA8zB,eAAA5N,QAAA7R,EAAAyf,iBAAAtvC,EACAwb,EAAA8zB,eAAAooB,0BACA7nC,EAAAunC,eACAvnC,EAAAuO,SAGA5iB,EAAA8zB,eAAA6nB,sBACAtnC,EAAAunC,eACAvnC,EAAAyf,eACAzf,EAAAuO,SAUA8lE,GAAA1oF,EAAAqU,IAAAq0E,GAAAr0E,EAAArU,GAGA,OAAAqU,EAAA+0E,eAcA,GAJAp/D,EAAAxC,iBAAAnT,EAAAyf,iBAIA9J,EAAA6yB,cAAA3yB,GAAA,GAMA,OAHAF,EAAA5tB,MAAA4tB,EAAA5tB,MAAAu/C,sBAAAtnC,EAAAunC,eAAAvnC,EAAAyf,eAAAzf,EAAAuO,SACAoH,EAAA3tB,IAAA2tB,EAAA3tB,IAAAs/C,sBAAAtnC,EAAAunC,eAAAvnC,EAAAyf,eAAAzf,EAAAuO,SAEA+lE,IAAA3+D,GAAAouC,GAQA,GAFAluC,EAAA1C,iBAAAxnB,EAAA8zB,iBAEA5J,EAAA2yB,cAAA7yB,GAAA,GAMA,OAHAA,EAAA5tB,MAAA4tB,EAAA5tB,MAAA0/C,aAAAznC,EAAAunC,eAAAvnC,EAAAgkD,sBACAruC,EAAA3tB,IAAA2tB,EAAA3tB,IAAAy/C,aAAAznC,EAAAunC,eAAAvnC,EAAAgkD,sBAEAswB,IAAA3+D,GAAAouC,GAaA,MAAAixB,EAAgBj1E,GAAapU,EAAA47C,eAAAP,gBAAAhnC,EAAAunC,eAAAP,iBAE7B,aAAAguC,GAAA,aAAAA,EAOA,OAHAr/D,EAAA5tB,MAAA4tB,EAAA5tB,MAAAu/C,sBAAAtnC,EAAAunC,eAAAvnC,EAAAyf,eAAAzf,EAAAuO,SACAoH,EAAA3tB,IAAA2tB,EAAA3tB,IAAAs/C,sBAAAtnC,EAAAunC,eAAAvnC,EAAAyf,eAAAzf,EAAAuO,SAEA+lE,IAAA3+D,GAAAouC,GAcA,UAAAp4D,EAAArd,MAAA,UAAA0xB,EAAA1xB,MAAAorE,EAAA03B,WAEE,UAAAzlF,EAAArd,MAAA,UAAA0xB,EAAA1xB,MAAAorE,EAAA23B,aACFF,GAAA,GAFAA,GAAA,EAOA,MAAA99D,KAIAy1B,EAAAnzB,EAAAkzB,cAAAhzB,GAEA,UAAAjB,KAAAk0B,EAAA,CAEAl0B,EAAA7sB,MAAA6sB,EAAA7sB,MAAA8/C,0BAAA7nC,EAAAunC,eAAAvnC,EAAAuO,SACAqG,EAAA5sB,IAAA4sB,EAAA5sB,IAAA6/C,0BAAA7nC,EAAAunC,eAAAvnC,EAAAuO,SAGA,MAAA0mE,EAAoC,QAAbl1E,GAAa6U,EAAA7sB,MAAAi/C,gBAAAhnC,EAAAgkD,qBAAAhd,iBACpCxwB,EAAA5B,EAAAyyB,2BAAArnC,EAAAgkD,qBAAAhkD,EAAAuO,QAAA0mE,GAEA5hE,EAAA5lC,QAAA+oC,GAIA,MAAAuyB,EAAApzB,EAAAgrB,gBAAA9qB,GA+BA,OA7BA,OAAAkzB,GAAAooC,IAEApoC,EAAAhhD,MAAAghD,EAAAhhD,MAAA0/C,aAAAznC,EAAAunC,eAAAvnC,EAAAgkD,sBACAjb,EAAA/gD,IAAA+gD,EAAA/gD,IAAAy/C,aAAAznC,EAAAunC,eAAAvnC,EAAAgkD,sBAQA,IAAA3wC,EAAAllC,OACAklC,EAAA5lC,KAAAs7D,GAGA,GAAA11B,EAAAllC,OACA0nC,EAAA9tB,MAAA6iB,SAAA+K,EAAA5tB,QAAA8tB,EAAA9tB,MAAA8pB,QAAA8D,EAAA5tB,OACAsrB,EAAA75B,QAAAuvD,GAEA11B,EAAA5lC,KAAAs7D,GAMA11B,EAAA/zB,OAAA,IAAAypD,IAIA,IAAA11B,EAAAllC,QAGA,IAAesiG,GAAW9kF,EAAA+2D,cAG1B4xB,GAAAjhE,EAAA0wC,KAGA4sB,GAAmB7sB,GAAekB,GAAc,CAAAr5D,EAAAqU,EAAA05C,KAChD,IAAAqK,EAAAp4D,EAAA8zB,eAAAxO,QAKAtlB,EAAA8zB,eAAA5N,QAAA7R,EAAAugB,oBAAAvgB,EAAA4nC,mBAAA,mBAAA8R,EAAA43B,aACAvtB,EAAAp4D,EAAA8zB,eAAA0nB,gCAAAnnC,IAUA,MAAA2oC,EAAmBP,GAAKt0B,4BAAAnoB,EAAA47C,eAAA57C,EAAA4iB,SAExB,GAAAo6B,EAAA3gD,IAAA6pB,QAAA7R,EAAAugB,mBASA,OANAvgB,EAAA4nC,mBACAj8C,EAAA4iB,UAGA5iB,EAAA8zB,eAAAskC,GAEAp4D,GAmBA,GAAAg9C,EAAA5gD,MAAAwsF,gBAAAv0E,EAAA0nC,gBAAAiB,EAAAx1B,iBAAAnT,EAAA0nC,eAAA,CACA,IAAAwtC,EAAA,IAAuB9sC,GAAKpoC,EAAA0nC,cAAAiB,EAAA3gD,KAQ5B,OAPAktF,IAAA/tC,gCAAAnnC,GAOAs0E,IAJA,IAAOlsC,GAAKO,EAAA5gD,MAAAiY,EAAA0nC,eACZwtC,GAGAnxB,GAQAp4D,EAAA8zB,eAAA5N,QAAA7R,EAAA0nC,gBAAA,kBAAAgS,EAAA43B,aACAvtB,EAAA/jD,EAAA2nC,oBAwBAh8C,EAAA8zB,eAAA5N,QAAA7R,EAAAugB,oBAAA,iBAAAm5B,EAAA43B,aACAvtB,EAAAp4D,EAAA8zB,gBAKA,MACApM,GADAs1B,EAAAxB,gCAAAnnC,IAOA,GAAAA,EAAA4nC,kBAAA,CACA,MAAAutC,EAAAxsC,EAAA5gD,MAAA8pB,QAAA7R,EAAA4nC,oBAAAe,EAAAx1B,iBAAAnT,EAAA4nC,mBAEAj8C,EAAA4iB,QAAA,GAAA4mE,GACA9hE,EAAA5lC,KAAgB26D,GAAKt0B,4BAAA9T,EAAAugB,kBAAA,IAIrB,OAAA+zD,GAAAjhE,EAAA0wC,KAGA4sB,GAAmB7sB,GAAeiB,GAAc,CAAAp5D,EAAAqU,EAAA05C,KAChD,MAAAlS,EAAoBY,GAAKt0B,4BAAAnoB,EAAA47C,eAAA57C,EAAA4iB,SAEzB,GAAAvO,EAAA8nC,iBAAAysC,gBAAA5oF,EAAA47C,iBAAAC,EAAAr0B,iBAAAnT,EAAAunC,gBACA,aAAA57C,EAAArd,MAUA,IAAAorE,EAAA03B,WAAA,CACA,MAAAllE,KAEA,IAAAkpE,EAAAp1E,EAAA4nC,kBAAA32B,QACAokE,EAAAr1E,EAAAyf,eAAAxO,QAEAtlB,EAAA4iB,QAAA,IACArC,EAAAz+B,KAAA,IAAuBq2E,GAAan4D,EAAA47C,eAAA57C,EAAA4iB,QAAA,EAAA5iB,EAAA8zB,eAAA,IACpC21D,IAAA/tC,2BAAA17C,EAAA8zB,eAAA9zB,EAAA4iB,QAAA,GACA8mE,IAAA/tC,sBAAA37C,EAAA47C,eAAA57C,EAAA8zB,eAAA9zB,EAAA4iB,QAAA,IAGA,MAAA+mE,EAAAt1E,EAAA8nC,iBAAAL,aAAA97C,EAAA47C,eAAA57C,EAAA8zB,gBACA81D,EAAA,IAAuBzxB,GAAasxB,EAAA,EAAAE,EAAA,GAEpCE,EAAAD,EAAAvxB,qBAAAj0D,KAAAxN,QACAizF,EAAA/nG,KAAA,GAEA,MAAAgoG,EAAA,IAAqCnvC,GAAQivC,EAAA91D,eAAA/2C,KAAA8sG,GAC7CE,EAAA,IAA+B5xB,GAAauxB,EAAAr1E,EAAAuO,QAAAknE,EAAA,GAK5C,OAHAvpE,EAAAz+B,KAAA8nG,GACArpE,EAAAz+B,KAAAioG,GAEAxpE,QASA,MAAAvgB,EAAA4iB,QACA,OAAAmrC,EAAA23B,YAGA1lF,EAAA47C,eAAAvnC,EAAA4nC,kBAAA32B,QACAtlB,EAAA8zB,eAAA9zB,EAAA8zB,eAAA2nB,gCAAApnC,IAEArU,KALA,IAAkB8kF,GAAW,IAa7B,MACAzoC,EADmBI,GAAKt0B,4BAAAnoB,EAAA47C,eAAA57C,EAAA4iB,SACxB64B,gCAAApnC,GAMA,OAJArU,EAAA47C,eAAAS,EAAAjgD,MACA4D,EAAA4iB,QAAAy5B,EAAAhgD,IAAAgc,OAAAgkC,EAAAjgD,MAAAic,OACArY,EAAA8zB,eAAA9zB,EAAA8zB,eAAA2nB,gCAAApnC,IAEArU,KAKAglF,GAAmB/rB,GAAiBP,GAAe,CAAA14D,EAAAqU,KACnDrU,EAAAhP,SAAAgP,EAAAhP,SAAAsqD,iCAAAjnC,IAEArU,KAGAglF,GAAmB/rB,GAAiBG,GAAc,CAAAp5D,EAAAqU,IAKlDrU,EAAAhP,SAAAk1B,QAAA7R,EAAA8nC,mBACAn8C,EAAAhP,SAAAqjB,EAAA4nC,kBAAA32B,QACAtlB,EAAAhP,SAAA4pD,WAAA,UAEA56C,KAGAA,EAAAhP,SAAAgP,EAAAhP,SAAAyqD,gCAAApnC,IAEArU,KAGAglF,GAAmB/rB,GAAiBd,GAAa,CAAAn4D,EAAAqU,KACjDrU,EAAAhP,SAAAgP,EAAAhP,SAAAuqD,+BAAAlnC,IAEArU,KAGAglF,GAAmB/rB,GAAiBA,GAAe,CAAAj5D,EAAAqU,EAAA05C,KACnD,GAAA/tD,EAAAhP,SAAAk1B,QAAA7R,EAAArjB,UAAA,CACA,IAAA+8D,EAAAy3B,UAGA,WAAgBV,GAAW,IAF3B9kF,EAAAk5D,QAAA7kD,EAAA6hB,QAMA,OAAAl2B,KAGAglF,GAAmB/rB,GAAiBI,GAAc,CAAAr5D,EAAAqU,KAiBlD,GAAmB,QAAbD,GAHNpU,EAAAhP,SAAAoT,KACAiQ,EAAA0nC,cAAAV,mBAEmBhnC,EAAA4nC,kBAAA,CAGnB,OAAAj8C,EAFA,IAA0Bi5D,GAAej5D,EAAAhP,SAAAi3B,aAAA,GAAAjoB,EAAAk5D,QAAAl5D,EAAAk2B,QAAA,IASzC,OAFAl2B,EAAAhP,SAAAgP,EAAAhP,SAAAwqD,gCAAAnnC,IAEArU,KAKAglF,GAAmB7rB,GAAwBA,GAAsB,CAAAn5D,EAAAqU,EAAA05C,KACjE,GAAA/tD,EAAAjjB,OAAAs3B,EAAAt3B,MAAAijB,EAAAhhB,MAAAq1B,EAAAr1B,IAAA,CACA,IAAA+uE,EAAAy3B,WAAAxlF,EAAAkL,WAAAmJ,EAAAnJ,SACA,WAAgB45E,GAAW,IAE3B9kF,EAAAjY,SAAAssB,EAAAnJ,SAIA,OAAAlL,KAKAglF,GAAmB3rB,GAAgBX,GAAe,CAAA14D,EAAAqU,KAGlDrU,EAAA+7C,cAAA6sC,gBAAAv0E,EAAArjB,WAAAgP,EAAA+7C,cAAA1jC,OAAAhE,EAAArjB,SAAAqnB,SACArY,EAAA4iB,SAAAvO,EAAAuO,SAGA5iB,EAAA+7C,cAAA/7C,EAAA+7C,cAAAT,iCAAAjnC,GACArU,EAAA40B,kBAAuBykC,GAAcE,qBAAAv5D,EAAA+7C,gBAErC/7C,KAGAglF,GAAmB3rB,GAAgBD,GAAc,CAAAp5D,EAAAqU,EAAA05C,KAqDjD,IAAA/tD,EAAAi8C,oBAAA8R,EAAA23B,YAAA1lF,EAAA+7C,cAAA6sC,gBAAAv0E,EAAAunC,gBAAA,CACA,MAAAouC,EAAA31E,EAAA4nC,kBAAA73C,KAAAxN,QACAozF,EAAAloG,KAAA,GAEA,MAAAi6D,EAAA,IAA4BpB,GAAQtmC,EAAA4nC,kBAAAl/D,KAAAitG,GACpCp1D,EAA4BykC,GAAcE,qBAAA,IAA2B5e,GAAQtmC,EAAA4nC,kBAAAl/D,KAAAitG,IAE7EC,EAAA,IAA8B5wB,GAActd,EAAA,UAQ5C,OAPAkuC,EAAAr1D,oBAEA50B,EAAA+7C,cAAA/7C,EAAA+7C,cAAAN,gCAAApnC,GACArU,EAAA40B,kBAAwBykC,GAAcE,qBAAAv5D,EAAA+7C,eACtC/7C,EAAAi8C,kBAAAguC,EAAAr1D,kBAAAtP,QACAtlB,EAAAi8C,kBAAArB,WAAA,UAEAqvC,EAAAjqF,GAoBA,OAfAA,EAAA+7C,cAAA6sC,gBAAAv0E,EAAA8nC,oBAAAn8C,EAAA+7C,cAAA70B,QAAA7S,EAAA8nC,mBACAn8C,EAAA4iB,UAGA5iB,EAAA+7C,cAAA6sC,gBAAAv0E,EAAAyf,kBACA9zB,EAAA4iB,SAAAvO,EAAAuO,SAGA5iB,EAAA+7C,cAAA/7C,EAAA+7C,cAAAN,gCAAApnC,GACArU,EAAA40B,kBAAuBykC,GAAcE,qBAAAv5D,EAAA+7C,eAErC/7C,EAAAi8C,oBACAj8C,EAAAi8C,kBAAAj8C,EAAAi8C,kBAAAR,gCAAApnC,KAGArU,KAGAglF,GAAmB3rB,GAAgBlB,GAAa,CAAAn4D,EAAAqU,EAAA05C,KAChD,MAAAm8B,EAAqBztC,GAAKt0B,4BAAA9T,EAAAunC,eAAAvnC,EAAAuO,SAE1B,GAAA5iB,EAAAi8C,kBAAA,CAOA,GAAAiuC,EAAA9tF,MAAA8pB,QAAAlmB,EAAAi8C,oBAAAiuC,EAAA1iE,iBAAAxnB,EAAAi8C,mBAAA,CACA,MAAAL,EAAA57C,EAAA+7C,cAAAR,+BAAAlnC,GAEA81E,EAAAnqF,EAAAi8C,kBAAAV,+BAAAlnC,GACA+1E,EAAAD,EAAA/lF,KAAAxN,QACAwzF,EAAAtoG,KAAA,GAEA,MAAAs2E,EAAA,IAAiCzd,GAAQwvC,EAAAptG,KAAAqtG,GAGzC,OAFA,IAAsBjyB,GAAavc,EAAA57C,EAAA4iB,QAAAw1C,EAAA,IAKnCp4D,EAAAi8C,kBAAAj8C,EAAAi8C,kBAAAV,+BAAAlnC,GAoBA,GAAArU,EAAA+7C,cAAA6sC,gBAAAv0E,EAAAunC,iBAAAsuC,EAAA1iE,iBAAAxnB,EAAA+7C,eAAA,CACA,MAAAsuC,EAAAh2E,EAAAuO,SAAA5iB,EAAA+7C,cAAA1jC,OAAAhE,EAAAunC,eAAAvjC,QAUA,OATArY,EAAA4iB,SAAAynE,EAEArqF,EAAA+7C,cAAA6sC,gBAAAv0E,EAAAyf,iBAAA9zB,EAAA+7C,cAAA1jC,OAAAhE,EAAAyf,eAAAzb,SACArY,EAAA4iB,SAAAvO,EAAAuO,SAGA5iB,EAAA+7C,cAAA1nC,EAAAunC,eAAAt2B,QACAtlB,EAAA40B,kBAAwBykC,GAAcE,qBAAAv5D,EAAA+7C,gBAEtC/7C,GAYA,OAFAA,EAAA+7C,cAAA71B,QAAA7R,EAAAyf,iBAEA,kBAAAi6B,EAAA63B,YAAA,eAAA73B,EAAA43B,YAWAtxE,EAAAunC,eAAA11B,QAAA7R,EAAAyf,kBACA9zB,EAAA+7C,cAAA6sC,gBAAAv0E,EAAAunC,iBAAA57C,EAAA+7C,cAAA1jC,QAAAhE,EAAAunC,eAAAvjC,SACArY,EAAA4iB,SAAAvO,EAAAuO,SAGA5iB,EAAA+7C,cAAA6sC,gBAAAv0E,EAAAyf,iBAAA9zB,EAAA+7C,cAAA1jC,OAAAhE,EAAAyf,eAAAzb,SACArY,EAAA4iB,SAAAvO,EAAAuO,UAKA5iB,EAAA+7C,cAAAnB,WAAA,SACA56C,EAAA+7C,cAAA/7C,EAAA+7C,cAAAR,+BAAAlnC,GACArU,EAAA+7C,cAAAnB,WAAA,SAEA56C,EAAAi8C,kBACAj8C,EAAA40B,kBAAA50B,EAAA40B,kBAAA2mB,+BAAAlnC,GAEArU,EAAA40B,kBAAwBykC,GAAcE,qBAAAv5D,EAAA+7C,gBAGtC/7C,KA/BAA,EAAA4iB,SAAAvO,EAAAuO,QACA5iB,EAAA+7C,cAAA/7C,EAAA+7C,cAAAG,0BAAA7nC,EAAAunC,eAAAvnC,EAAAuO,SACA5iB,EAAA40B,kBAAwBykC,GAAcE,qBAAAv5D,EAAA+7C,gBAEtC/7C,MA8BAglF,GAAmB3rB,GAAgBA,GAAc,CAAAr5D,EAAAqU,EAAA05C,KAcjD,GAAA/tD,EAAA+7C,cAAA71B,QAAA7R,EAAA0nC,eAAA,CACA,IAAA/7C,EAAAi8C,oBAAA5nC,EAAA4nC,kBACA,WAAgB6oC,GAAW,IAG3B,GAAA9kF,EAAAi8C,mBAAA5nC,EAAA4nC,mBAAAj8C,EAAAi8C,kBAAA/1B,QAAA7R,EAAA4nC,mBACA,WAAgB6oC,GAAW,IAgB3B,GAAA9kF,EAAAi8C,mBAAA5nC,EAAA4nC,mBAAAj8C,EAAAi8C,kBAAA/1B,QAAA7R,EAAA4nC,mBAAA,CACA,MAAAquC,EAAA,cAAAtqF,EAAA+7C,cAAAh/D,KAAAonC,SACAomE,EAAA,cAAAl2E,EAAA0nC,cAAAh/D,KAAAonC,SAWA,GALAomE,IAAAD,KAHAA,IAAAC,IAMAx8B,EAAAy3B,UAEA,CACA,MAAAx7F,KAcA,OAVAqqB,EAAAuO,SACA54B,EAAAlI,KAAA,IAAqBq2E,GAAa9jD,EAAA2nC,mBAAA3nC,EAAAuO,QAAAvO,EAAA0nC,cAAA,IAKlC/7C,EAAA4iB,SACA54B,EAAAlI,KAAA,IAAqBq2E,GAAan4D,EAAA+7C,cAAA/7C,EAAA4iB,QAAA5iB,EAAAg8C,mBAAA,IAGlChyD,EAEA,WAAgB86F,GAAW,IAa3B,GATA9kF,EAAAi8C,oBACAj8C,EAAAi8C,kBAAAj8C,EAAAi8C,kBAAAT,gCAAAnnC,IAQArU,EAAA+7C,cAAA71B,QAAA7R,EAAAugB,oBAAA,eAAAm5B,EAAA43B,WAGA,OAFA3lF,EAAA4iB,WAEA5iB,GAOA,GAAAqU,EAAA0nC,cAAA71B,QAAAlmB,EAAA40B,oBAAA,eAAAm5B,EAAA63B,WAAA,CACA,MAAA4E,EAAAn2E,EAAAugB,kBAAAxwB,KAAAxN,QACA4zF,EAAA1oG,KAAA,GAEA,MAAAwyC,EAAA,IAA0BqmB,GAAQtmC,EAAAugB,kBAAA73C,KAAAytG,GAGlC,OAAAxqF,EAFA,IAAqBm4D,GAAan4D,EAAA40B,kBAAA,EAAAN,EAAA,IAclC,OAPAt0B,EAAA+7C,cAAA6sC,gBAAAv0E,EAAA0nC,gBAAA/7C,EAAA+7C,cAAA1jC,OAAAhE,EAAA0nC,cAAA1jC,SACArY,EAAA4iB,SAAAvO,EAAAuO,SAGA5iB,EAAA+7C,cAAA/7C,EAAA+7C,cAAAP,gCAAAnnC,GACArU,EAAA40B,kBAAuBykC,GAAcE,qBAAAv5D,EAAA+7C,gBAErC/7C,WChmEqByqF,WAAoBzM,GACzCl+F,YAAAkzB,GACA7yB,MAAA6yB,GAWA5yB,KAAAk2F,UAQAl2F,KAAAsqG,gBAAA,IAAAh4C,QAGAtyD,KAAA69F,UAMAn+F,UACAM,KAAAsoD,UAAAtoD,KAAAk2F,OAAA9zF,OAAA,EASA1C,SAAAsQ,GACA,MAAAu6F,EAAAvqG,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UAEAA,GACA2D,OAAAijE,EAAA/mC,YAAA3/D,MAAAC,KAAAymG,EAAA5gE,gBACAX,WAAAuhE,EAAAvhE,YAGAhpC,KAAAk2F,OAAAx0F,MAAqBsO,QAAA2zB,cACrB3jC,KAAA69F,UAMAn+F,aACAM,KAAAk2F,UACAl2F,KAAA69F,UAYAn+F,kBAAA4nC,EAAA0B,EAAAv4B,GACA,MAAAiyD,EAAA1iE,KAAA4yB,OAAA8vC,MACA9hE,EAAA8hE,EAAA9hE,SAGA4pG,KAGA,UAAA3hE,KAAAvB,EAAA,CACA,MAMAsO,EANA60D,GAAA5hE,EAAAp4B,GAMA47B,KACAxD,KAAA7sB,MAAArf,MAAAiE,EAAAw7D,WAIAxmB,GACA40D,EAAA9oG,KAAAk0C,GAKA40D,EAAApoG,QACAsgE,EAAA7J,OAAAtrB,IACAA,EAAAkI,aAAA+0D,GAA2CpgE,SAAApB,MAa3CtpC,MAAAgrG,EAAAC,GACA,MAAAjoC,EAAA1iE,KAAA4yB,OAAA8vC,MACA9hE,EAAA8hE,EAAA9hE,SAGAZ,KAAAsqG,gBAAAnnG,IAAAwnG,GAEA,MAAAC,EAAAF,EAAAj6F,WAAA+F,QAAAZ,OAAAlF,KAAAqyD,qBACA6nC,EAAA7uD,UAIA,UAAA8uD,KAAAD,EAAA,CACA,MAAAE,EAAAD,EAAAl0B,YAAA,EACAo0B,EAAAlnG,MAAAC,KAAAlD,EAAAqgF,QAAA+pB,cAAAF,IAYAG,EAV2BxF,IAC3BoF,EAAA7B,eACA+B,GAEA5E,cAAA,EACAvlG,SAAAZ,KAAA4yB,OAAA8vC,MAAA9hE,SACAimG,cAAA,IAIAnB,YAGA,UAAAh1F,KAAAu6F,EAEAN,EAAAjxB,aAAAhpE,GACAgyD,EAAAiX,eAAAjpE,GAEA9P,EAAAqgF,QAAAiqB,qBAAAL,EAAAn6F,KAQA,SAAA+5F,GAAA5hE,EAAAp4B,GACA,MAAAwrD,EAAApzB,EAAAsiE,2BAAA16F,GAKAwrD,EAAAn6B,KAAA,CAAAliB,EAAAqU,IAAArU,EAAA5D,MAAA6iB,SAAA5K,EAAAjY,QAAA,KAGA,QAAA3e,EAAA,EAAiBA,EAAA4+D,EAAA75D,OAAwB/E,IAAA,CACzC,MAAAuiB,EAAAq8C,EAAA5+D,EAAA,GACA42B,EAAAgoC,EAAA5+D,GAEAuiB,EAAA3D,IAAAqmD,WAAAruC,EAAAjY,SAEA4D,EAAA3D,IAAAgY,EAAAhY,IACAggD,EAAA1oD,OAAAlW,EAAA,GACAA,KAIA,OAAA4+D,QC3KqBmvC,WAAoBf,GAUzC3qG,QAAAsQ,EAAA,MAEA,MAAAq7F,EAAAr7F,EAAAhQ,KAAAk2F,OAAAoV,UAAA1rF,KAAA5P,UAAAhQ,KAAAk2F,OAAA9zF,OAAA,EAEA+P,EAAAnS,KAAAk2F,OAAA3iF,OAAA83F,EAAA,MACAV,EAAA3qG,KAAA4yB,OAAA8vC,MAAA68B,cAIAv/F,KAAA4yB,OAAA8vC,MAAA+B,cAAAkmC,EAAA,KACA3qG,KAAAurG,MAAAp5F,EAAAnC,MAAA26F,GAEA,MAAAl6F,EAAAzQ,KAAA4yB,OAAA8vC,MAAA9hE,SAAAqgF,QAAA+pB,cAAA74F,EAAAnC,MAAA2mE,aACA32E,KAAAwrG,kBAAAr5F,EAAAwxB,UAAA2D,OAAAn1B,EAAAwxB,UAAAqF,WAAAv4B,GAEAzQ,KAAA4nB,KAAA,SAAAzV,EAAAnC,MAAA26F,KAGA3qG,KAAA69F,iBC3BqB4N,WAAoBpB,GASzC3qG,UACA,MAAAyS,EAAAnS,KAAAk2F,OAAAzvE,MACAilF,EAAA1rG,KAAA4yB,OAAA8vC,MAAA68B,cAIAv/F,KAAA4yB,OAAA8vC,MAAA+B,cAAAinC,EAAA,KACA,MACAZ,EADA34F,EAAAnC,MAAAS,WAAA0B,EAAAnC,MAAAS,WAAArO,OAAA,GACAu0E,YAAA,EACAlmE,EAAAzQ,KAAA4yB,OAAA8vC,MAAA9hE,SAAAqgF,QAAA+pB,cAAAF,GAEA9qG,KAAAwrG,kBAAAr5F,EAAAwxB,UAAA2D,OAAAn1B,EAAAwxB,UAAAqF,WAAAv4B,GACAzQ,KAAAurG,MAAAp5F,EAAAnC,MAAA07F,KAGA1rG,KAAA69F,iBCzBqB8N,WAAoBh5E,GAIzCjzB,YAAAkzB,GACA7yB,MAAA6yB,GAwBA5yB,KAAA4rG,eAAA,IAAAt5C,QAMA5yD,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OAGA5yB,KAAA6rG,aAAA,IAA0BT,GAAWx4E,GACrC5yB,KAAA8rG,aAAA,IAA0BL,GAAW74E,GAGrCA,EAAA04C,SAAAnoE,IAAA,OAAAnD,KAAA6rG,cACAj5E,EAAA04C,SAAAnoE,IAAA,OAAAnD,KAAA8rG,cAEA9rG,KAAAmlB,SAAAyN,EAAA8vC,MAAA,kBAAA5xC,EAAA1L,KACA,MAAA1U,EAAA0U,EAAA,GAOA,IAAA1U,EAAAqyD,oBACA,OAGA,MAAA/yD,EAAAU,EAAAV,MAGAhQ,KAAA4rG,eAAAnqG,IAAAuO,IAAA,eAAAA,EAAAzN,OAGAvC,KAAA8rG,aAAAxB,gBAAA7oG,IAAAuO,GAEAhQ,KAAA6rG,aAAAE,SAAA/7F,GACKhQ,KAAA6rG,aAAAvB,gBAAA7oG,IAAAuO,KAGLhQ,KAAA6rG,aAAAE,SAAA/7F,GACAhQ,KAAA8rG,aAAAE,cAKAhsG,KAAA4rG,eAAAzoG,IAAA6M,MACMyU,SAAA,YAENzkB,KAAAmlB,SAAAnlB,KAAA6rG,aAAA,UAAA/6E,EAAAm7E,EAAAtB,KACA3qG,KAAA8rG,aAAAC,SAAApB,KAGA/3E,EAAA23D,WAAAnjF,IAAA,iBACAwrB,EAAA23D,WAAAnjF,IAAA,iBACAwrB,EAAA23D,WAAAnjF,IAAA,oCCrFqB8kG,WAAiBpb,GAItCpxF,cACAK,QAEA,MAAAlB,EAAAmB,KAAAmxF,aAQAnxF,KAAAoH,IAAA,cAUApH,KAAAoH,IAAA,uBASApH,KAAAoH,IAAA,gBAEApH,KAAAuzF,aACAjrE,IAAA,MACA5pB,GAAA,6BACAoI,YACA0sF,OACA,KACA,WAEA2Y,QAAAttG,EAAAuoB,GAAA,cAQA1nB,SACAK,MAAAwO,SAEAvO,KAAAosG,oBACApsG,KAAAqsG,kBAIArsG,KAAA6wB,GAAA,sBACA7wB,KAAAosG,oBACApsG,KAAAqsG,oBAGArsG,KAAA6wB,GAAA,wBACA7wB,KAAAqsG,oBASA3sG,oBACA,GAAAM,KAAAS,QAAA,CACA,MACAkb,GADA,IAAA0vE,WAAAK,gBAAA1rF,KAAAS,QAAAqgB,OAAA,iBACAtc,cAAA,OACA2nG,EAAAxwF,EAAA1E,aAAA,WAQA,IANAk1F,IACAnsG,KAAAmsG,WAGAnsG,KAAAQ,QAAAgc,UAAA,GAEAb,EAAA7F,WAAA1T,OAAA,GACApC,KAAAQ,QAAAyD,YAAA0X,EAAA7F,WAAA,KAUApW,kBACAM,KAAAssG,WACAtsG,KAAAQ,QAAA6C,iBAAA,kBAAAxB,QAAAmiB,IACAA,EAAAxgB,MAAA+oG,KAAAvsG,KAAAssG,yBCvGqBE,WAAoB1b,GAIzCpxF,YAAAyqF,GACApqF,MAAAoqF,GAQAnqF,KAAAoH,IAAA,WAqBApH,KAAAoH,IAAA,gBAEA,MAAAvI,EAAAmB,KAAAmxF,aAEAnxF,KAAAuzF,aACAjrE,IAAA,OACAxhB,YACA0sF,OACA,KACA,aACA30F,EAAAuoB,GAAA,WAAAxW,GAAA,cAAAA,GACA/R,EAAAyuF,GAAA,mBAAAhvF,MAAAwiB,UAGAjC,WAEAyJ,IAAA,OAEAxhB,YACA0sF,OACA,KACA,qBAIA30E,WAEArG,KAAA3Z,EAAAuoB,GAAA,2BC1CqBqlF,WAAmB3b,GAIxCpxF,YAAAyqF,GACApqF,MAAAoqF,GAEA,MAAAtrF,EAAAmB,KAAAmxF,aACAub,EAAuBvoF,IAGvBnkB,KAAAoH,IAAA,SACApH,KAAAoH,IAAA,cACApH,KAAAoH,IAAA,QACApH,KAAAoH,IAAA,gBACApH,KAAAoH,IAAA,WACApH,KAAAoH,IAAA,gBACApH,KAAAoH,IAAA,aACApH,KAAAoH,IAAA,SACApH,KAAAoH,IAAA,eACApH,KAAAoH,IAAA,WACApH,KAAAoH,IAAA,uBACApH,KAAAoH,IAAA,iBACApH,KAAAoH,IAAA,eAQApH,KAAA6e,SAAA7e,KAAAixF,mBAQAjxF,KAAA2sG,YAAA3sG,KAAA4sG,qBAQA5sG,KAAA6sG,UAAA7sG,KAAA8sG,iBAAAJ,GASA1sG,KAAA+sG,SAAA,IAAsBb,GAEtBlsG,KAAA+sG,SAAAtf,gBACA3mF,YACA0sF,MAAA,qBAaAxzF,KAAAnB,KAAA,kBAAAuoB,GACApnB,KAAA,UACAA,KAAA,QACAA,KAAA,YACAA,KAAAgtG,kBAAAnuG,KAAAmB,OAGAA,KAAAuzF,aACAjrE,IAAA,SAEAxhB,YACA0sF,OACA,KACA,YACA30F,EAAAuoB,GAAA,SACAvoB,EAAAyuF,GAAA,0BAAAhvF,OACAO,EAAAyuF,GAAA,wBAAAhvF,OACAO,EAAAuoB,GAAA,OAAA9oB,KAAA,kBACAO,EAAAyuF,GAAA,mCAEA/qF,KAAA1D,EAAAuoB,GAAA,OAAA9oB,MAAA,UACA2uG,SAAApuG,EAAAuoB,GAAA,YACA8lF,2CAAgDR,IAChDS,gBAAAtuG,EAAAyuF,GAAA,eAAAhvF,OACA8uG,eAAAvuG,EAAAyuF,GAAA,YAGAzuE,SAAA7e,KAAA6e,SAEAgS,IACAmnE,UAAAn5F,EAAAuoB,GAAA0J,IACAA,EAAA3O,mBAGAkrF,MAAAxuG,EAAAuoB,GAAA0J,IAGA9wB,KAAAsoD,UACAtoD,KAAA4nB,KAAA,WAIAkJ,EAAA3O,sBAUAziB,SACAK,MAAAwO,SAEAvO,KAAAstG,OACAttG,KAAA+sG,SAAAluG,KAAA,WAAAuoB,GAAApnB,KAAA,QACAA,KAAA6e,SAAA1b,IAAAnD,KAAA+sG,WAGA/sG,KAAA6e,SAAA1b,IAAAnD,KAAA2sG,aACA3sG,KAAA6e,SAAA1b,IAAAnD,KAAA6sG,WAMAntG,QACAM,KAAAQ,QAAAsoC,QAUAppC,qBACA,MAAAitG,EAAA,IAA0BH,GAK1B,OAHAG,EAAA9tG,KAAA,QAAAuoB,GAAApnB,KAAA,kBACA2sG,EAAA9tG,KAAA,YAAAuoB,GAAApnB,KAAA,mBAEA2sG,EAUAjtG,iBAAAgtG,GACA,MAAAG,EAAA,IAAwB/b,GACxBjyF,EAAAmB,KAAAmxF,aAqBA,OAnBA0b,EAAAtZ,aACAjrE,IAAA,OAEAxhB,YACA0sF,OACA,KACA,oBAEAhwF,MAAA3E,EAAAuoB,GAAA,cACA/U,4BAAiCq6F,KAGjC7tF,WAEArG,KAAAxY,KAAAmxF,aAAA/pE,GAAA,aAKAylF,EAeAntG,kBAAA6tG,EAAApjE,EAAAiG,GACA,OAAAm9D,EACA,iBAAAA,EACAA,GAEAn9D,IACAA,EjL3IO,SAAAA,GACP,OAAOhC,GAAGC,MAIVgC,GAAAD,GAEAriC,IAAAnP,GAAAgwC,GAAAhwC,EAAA0J,gBAAA1J,GAGA8N,OAAA,CAAApO,EAAAM,IACAN,EAAAkY,OAAA,KAAAg4B,GACAlwC,EAAAM,EAEAN,EAAA,IAAAM,GAZAwxC,EiLyIiBo9D,CAAmBp9D,IAGpCm9D,aAAA/1F,SACA+1F,EAAApjE,EAAAiG,MAEejG,IAAUiG,OAAkBA,KAAY,MAKvD,sDCnPqBq9D,WAAe96E,GAIpCjzB,OACA,MACAnB,EADAyB,KAAA4yB,OACAr0B,EACAyB,KAAA0tG,WAAA,OAAAnvG,EAAA,eAAmDovG,GAAA/tF,GACnD5f,KAAA0tG,WAAA,OAAAnvG,EAAA,eAAmDqvG,GAAAhuF,GAWnDlgB,WAAA9B,EAAAusC,EAAAiG,EAAAy9D,GACA,MAAAj7E,EAAA5yB,KAAA4yB,OACAA,EAAAujE,GAAAuC,iBAAAv1F,IAAAvF,EAAAusF,IACA,MAAA/e,EAAAx4C,EAAA04C,SAAAptE,IAAAN,GACAkzC,EAAA,IAA6B27D,GAAUtiB,GASvC,OARAr5C,EAAA1pC,KACA+iC,QACAmjE,KAAAO,EACAz9D,YACAm9D,SAAA,IAEAz8D,EAAAjyC,KAAA,aAAAuoB,GAAAgkD,EAAA,aACAprE,KAAAmlB,SAAA2rB,EAAA,cAAAle,EAAAy4C,QAAAztE,IACAkzC,WCwDqBg9D,WAAan7E,GAIlCw3C,sBACA,OAAWwhC,GAAa8B,IAMxBtkC,wBACA,oBChGe4kC,GA6BfruG,YAAAkzB,EAAAkN,EAAAkuE,GACA,IAAA9oF,EAEA,sBAAA8oF,EACA9oF,EAAA8oF,MACG,CAEH,MAAA5iC,EAAA4iC,EAEA9oF,EAAA,MACA0N,EAAAy4C,QAAAD,KAIAx4C,EAAA8vC,MAAA9hE,SAAAiwB,GAAA,UAAAC,EAAA9gB,KACA,kBAAAA,EAAAzN,KACA,OAGA,MAAAu7E,EAAAj6E,MAAAC,KAAA8uB,EAAA8vC,MAAA9hE,SAAAm/D,OAAAG,cACArrC,EAAAipD,EAAA,GAGA,MAAAA,EAAA17E,QAAA,WAAAyyB,EAAAtyB,MAAA,SAAAsyB,EAAAj3B,MAAA,GAAAi3B,EAAAzyB,OACA,OAEA,MAAA+P,EAAA0iB,EAAAjkB,SAAA2uB,UAAA1K,EAAAjkB,SAAAm1B,UAEA,IAAA5zB,EAAAxB,OAAAwuB,GAAA,aACA,OAGA,MAAAh/B,EAAA2/B,EAAA/oB,KAAA5E,EAAAvS,MAEAO,GAKAyyB,EAAA8vC,MAAA+B,cAAAl3B,IAEA,MAAAvxB,EAAAuxB,EAAAsmC,iBAAA1hE,EAAAxB,OAAA,GACAsL,EAAAsxB,EAAAsmC,iBAAA1hE,EAAAxB,OAAAxQ,EAAA,GAAAiC,QACAymC,EAAA0E,EAAAqT,YAAA5kC,EAAAC,GAGAsxB,EAAAn9B,OAAAy4B,GAEA3jB,GAAe/kB,qBC7EA8tG,GA8CfvuG,YAAAkzB,EAAAs7E,EAAAC,GACA,IAAAC,EACA9tC,EACA+tC,EACAC,EAEAJ,aAAAx3F,OACA03F,EAAAF,EAEAG,EAAAH,EAGA,iBAAAC,EACA7tC,EAAA6tC,EAEAG,EAAAH,EAIAE,KAAA,CAAA71F,IACA,IAAA5O,EACA,MAAAwG,KACAm+F,KAEA,aAAA3kG,EAAAwkG,EAAAr3F,KAAAyB,OAEA5O,KAAAxH,OAAA,IAFA,CAMA,IAAAR,MACAA,EACA4sG,EAAAC,EACAC,EAAAjuG,EACAkuG,EAAAC,GACKhlG,EAGL,MAAA6/B,EAAAglE,EAAAhuG,EAAAmuG,EAIAC,GAHAjtG,GAAAgI,EAAA,GAAAxH,OAAAqnC,EAAArnC,OAKAR,EAAA6sG,EAAArsG,QAEA0sG,GACAltG,EAAA6sG,EAAArsG,OAAA3B,EAAA2B,OACAR,EAAA6sG,EAAArsG,OAAA3B,EAAA2B,OAAAwsG,EAAAxsG,QAGAgO,EAAA1O,KAAAmtG,GACAz+F,EAAA1O,KAAAotG,GAEAP,EAAA7sG,MAAAE,EAAA6sG,EAAArsG,OAAAR,EAAA6sG,EAAArsG,OAAA3B,EAAA2B,SAGA,OACAgO,SACAm+F,YAKAD,KAAA,EAAA/gE,EAAAwhE,KACA,UAAAlmE,KAAAkmE,EACAxhE,EAAAtkC,aAAAq3D,GAAA,EAAAz3B,GAKA0E,EAAAqoC,yBAAAtV,KAGA1tC,EAAA8vC,MAAA9hE,SAAAiwB,GAAA,UAAAC,EAAA9gB,KACA,kBAAAA,EAAAzN,KACA,OAGA,MAAAohC,EAAA/Q,EAAA8vC,MAAA9hE,SAAA+iC,UAGA,IAAAA,EAAAgD,YACA,OAGA,MAAAm3C,EAAAj6E,MAAAC,KAAA8uB,EAAA8vC,MAAA9hE,SAAAm/D,OAAAG,cACArrC,EAAAipD,EAAA,GAGA,MAAAA,EAAA17E,QAAA,WAAAyyB,EAAAtyB,MAAA,SAAAsyB,EAAAj3B,MAAA,GAAAi3B,EAAAzyB,OACA,OAGA,MAAAygE,EAAAl/B,EAAAmF,MAAAn4B,OACA6H,EA8BA,SAAAhY,GACA,OAAAqD,MAAAC,KAAAtD,EAAAyhC,eAAAv1B,OAAA,CAAAkT,EAAAqU,IAAArU,EAAAqU,EAAAr0B,KAAA,IA/BAovG,CAAAnsC,GAAArsD,MAAA,EAAAmtB,EAAAmF,MAAA7Q,QACAg3E,EAAAZ,EAAA71F,GACA02F,EAAAC,GAAAtsC,EAAAosC,EAAAV,OAAA37E,EAAA8vC,OACA0sC,EAAAD,GAAAtsC,EAAAosC,EAAA7+F,OAAAwiB,EAAA8vC,OAEAwsC,EAAA9sG,QAAAgtG,EAAAhtG,QAKAwwB,EAAA8vC,MAAA+B,cAAAl3B,IACA,MAAAwhE,EAAAn8E,EAAA8vC,MAAAC,OAAA0sC,eAAAH,EAAA5uC,GAGAguC,EAAA/gE,EAAAwhE,GAGA,UAAAlmE,KAAAumE,EAAArzD,UACAxO,EAAAn9B,OAAAy4B,QAuBA,SAAAsmE,GAAAtsC,EAAAysC,EAAA5sC,GACA,OAAA4sC,EACA15F,OAAAyV,QAAA1pB,IAAA0pB,EAAA,SAAA1pB,IAAA0pB,EAAA,IACAtd,IAAAsd,GACAq3C,EAAA9hB,YAAA8hB,EAAAmR,iBAAAhR,EAAAx3C,EAAA,IAAAq3C,EAAAmR,iBAAAhR,EAAAx3C,EAAA,YCvLqBkkF,WAAyB3R,GAK9Cl+F,YAAAkzB,EAAA0tC,GACAvgE,MAAA6yB,GAQA5yB,KAAAsgE,eAmBA5gE,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACAlhB,EAAAkhB,EAAA9hE,SAEAZ,KAAA1B,MAAA0B,KAAAwvG,gCACAxvG,KAAAsoD,UAAAoa,EAAAC,OAAA8sC,0BAAAjuD,EAAA7d,UAAA3jC,KAAAsgE,cAuBA5gE,QAAA8H,MACA,MAAAk7D,EAAA1iE,KAAA4yB,OAAA8vC,MAEA/+B,EADA++B,EAAA9hE,SACA+iC,UACArlC,OAAAqD,IAAA6F,EAAAkoG,YAAA1vG,KAAA1B,MAAAkJ,EAAAkoG,WAEAhtC,EAAA7J,OAAAtrB,IACA,GAAA5J,EAAAgD,YACAroC,EACAivC,EAAAoiE,sBAAA3vG,KAAAsgE,cAAA,GAEA/yB,EAAAqoC,yBAAA51E,KAAAsgE,kBAEI,CACJ,MAAAh5B,EAAAo7B,EAAAC,OAAA0sC,eAAA1rE,EAAAgG,YAAA3pC,KAAAsgE,cAEA,UAAAz3B,KAAAvB,EACAhpC,EACAivC,EAAAtkC,aAAAjJ,KAAAsgE,aAAAhiE,EAAAuqC,GAEA0E,EAAAvkC,gBAAAhJ,KAAAsgE,aAAAz3B,MAcAnpC,gCACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACAC,EAAAD,EAAAC,OACAh/B,EAAA++B,EAAA9hE,SAAA+iC,UAEA,GAAAA,EAAAgD,YACA,OAAAhD,EAAArD,aAAAtgC,KAAAsgE,cAGA,UAAAz3B,KAAAlF,EAAAgG,YACA,UAAAx3B,KAAA02B,EAAA24B,WACA,GAAAmB,EAAA4L,eAAAp8D,EAAAnS,KAAAsgE,cACA,OAAAnuD,EAAAmuB,aAAAtgC,KAAAsgE,cAKA,UC3HA,MAAAsvC,GAAA,aAUqBC,WAAoBl9E,GAIzCjzB,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OAEAA,EAAA8vC,MAAAC,OAAAxwB,OAAA,SAAwC27B,gBAAA8hC,KAIxCh9E,EAAA03D,WAAAwlB,oBACAptC,MAAAktC,GACA9+D,KAAA,SACA0lC,YACA,KAEApzE,QACA2sG,cAAA,YAOAn9E,EAAA04C,SAAAnoE,IAAAysG,GAAA,IAAiCL,GAAgB38E,EAAAg9E,KAGjDh9E,EAAA23D,WAAAnjF,IAAA,SAAAwoG,6BCxCA,MAAMI,GAAI,aAMWC,WAAet9E,GAIpCjzB,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAr0B,EAAAq0B,EAAAr0B,EAEAq0B,EAAAujE,GAAAuC,iBAAAv1F,IAAuC6sG,GAAI7lB,IAC3C,MAAA/e,EAAAx4C,EAAA04C,SAAAptE,IAAgD8xG,IAChDl/D,EAAA,IAA6B27D,GAAUtiB,GAUvC,OATAr5C,EAAA1pC,KACA+iC,MAAA5rC,EAAA,KACA+uG,KAAsB4C,GAAAtwF,EACtBwwB,UAAA,SACAm9D,SAAA,IAEAz8D,EAAAjyC,KAAA,oBAAAuoB,GAAAgkD,EAAA,qBAEAprE,KAAAmlB,SAAA2rB,EAAA,cAAAle,EAAAy4C,QAAgE2kC,KAChEl/D,KCxBA,MAAAq/D,GAAA,eAUqBC,WAAsBz9E,GAI3CjzB,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OAGAA,EAAA8vC,MAAAC,OAAAxwB,OAAA,SAAwC27B,gBAAAqiC,KAExCv9E,EAAA03D,WAAAwlB,oBACAptC,MAAAytC,GACAr/D,KAAA,IACA0lC,YACA,MAEApzE,QACAitG,aAAA,cAOAz9E,EAAA04C,SAAAnoE,IAAAgtG,GAAA,IAAmCZ,GAAgB38E,EAAAu9E,KAGnDv9E,EAAA23D,WAAAnjF,IAAA,SAAA+oG,6BCvCA,MAAMG,GAAM,eAMSC,WAAiB59E,GAItCjzB,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAr0B,EAAAq0B,EAAAr0B,EAEAq0B,EAAAujE,GAAAuC,iBAAAv1F,IAAuCmtG,GAAMnmB,IAC7C,MAAA/e,EAAAx4C,EAAA04C,SAAAptE,IAAgDoyG,IAChDx/D,EAAA,IAA6B27D,GAAUtiB,GAUvC,OATAr5C,EAAA1pC,KACA+iC,MAAA5rC,EAAA,KACA+uG,KAAsBkD,GAAA5wF,EACtBwwB,UAAA,SACAm9D,SAAA,IAEAz8D,EAAAjyC,KAAA,oBAAAuoB,GAAAgkD,EAAA,qBAEAprE,KAAAmlB,SAAA2rB,EAAA,cAAAle,EAAAy4C,QAAgEilC,KAChEx/D,KCrBe,SAAS2/D,GAAKC,GAC7B,MAAAC,EAAAD,EAAA3rE,OAEA,OAAA4rE,EAAA9rE,KACA,KAGA8rE,EAAAryG,YCJqBsyG,WAA0BhT,GAY/Cl+F,UACAM,KAAA1B,MAAA0B,KAAA0Y,YACA1Y,KAAAsoD,UAAAtoD,KAAA6wG,gBAUAnxG,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACAlhB,EAAAkhB,EAAA9hE,SACA+hE,EAAAD,EAAAC,OACAmuC,EAAAjtG,MAAAC,KAAA09C,EAAA7d,UAAA+/B,qBAEAhB,EAAA7J,OAAAtrB,IACA,GAAAvtC,KAAA1B,MACA0B,KAAA+wG,aAAAxjE,EAAAujE,EAAAl7F,OAAAo7F,SACI,CACJ,MAAAC,EAAAH,EAAAl7F,OAAAitD,GAGAmuC,GAAAnuC,IAAAquC,GAAAvuC,EAAAE,IAGA7iE,KAAAmxG,YAAA5jE,EAAA0jE,MAWAvxG,YACA,MAAA0xG,EAAqBX,GAAKzwG,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UAAA+/B,qBAG1B,SAAA0tC,IAAAJ,GAAAI,IASA1xG,gBACA,GAAAM,KAAA1B,MACA,SAGA,MAAAqlC,EAAA3jC,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UACAg/B,EAAA3iE,KAAA4yB,OAAA8vC,MAAAC,OAEAyuC,EAAqBX,GAAK9sE,EAAA+/B,qBAE1B,QAAA0tC,GAIAF,GAAAvuC,EAAAyuC,GAcA1xG,aAAA6tC,EAAAujE,GAEAO,GAAA9jE,EAAAujE,GAAA/0D,UAAAl6C,QAAAyvG,IACA,GAAAA,EAAAt1F,MAAA0pB,WAAA4rE,EAAAr1F,IAAAmpB,QAGA,YAFAmI,EAAA45B,OAAAmqC,EAAAt1F,MAAArL,QAMA,GAAA2gG,EAAAt1F,MAAA0pB,UAAA,CACA,MAAA6rE,EAAAhkE,EAAA0lC,qBAAAq+B,EAAAt1F,MAAArL,QAIA,YAFA48B,EAAAr9B,KAAAohG,EAAAC,GAOAD,EAAAr1F,IAAAmpB,SACAmI,EAAAr2B,MAAAo6F,EAAAr1F,KAKA,MAAAu1F,EAAAjkE,EAAAumC,oBAAAw9B,EAAAr1F,IAAAtL,QAEA48B,EAAAr9B,KAAAohG,EAAAE,KAWA9xG,YAAA6tC,EAAAujE,GACA,MAAAW,KAGAJ,GAAA9jE,EAAAujE,GAAA/0D,UAAAl6C,QAAAyvG,IACA,IAAAI,EAAAV,GAAAM,EAAAt1F,OAEA01F,IACAA,EAAAnkE,EAAAhqC,cAAA,cAEAgqC,EAAA8J,KAAAi6D,EAAAI,IAGAD,EAAA/vG,KAAAgwG,KAOAD,EAAA11D,UAAArvC,OAAA,CAAAilG,EAAAC,IACAD,EAAAx+F,aAAAy+F,GACArkE,EAAAmtC,MAAAntC,EAAAumC,oBAAA69B,IAEAA,GAGAC,IAKA,SAAAZ,GAAAa,GACA,oBAAAA,EAAAlhG,OAAA/S,KAAAi0G,EAAAlhG,OAAA,KAWA,SAAA0gG,GAAA9jE,EAAAujE,GACA,IAAA3sE,EACA9mC,EAAA,EACA,MAAAiqC,KAEA,KAAAjqC,EAAAyzG,EAAA1uG,QAAA,CACA,MAAAygE,EAAAiuC,EAAAzzG,GACAy0G,EAAAhB,EAAAzzG,EAAA,GAEA8mC,IACAA,EAAAoJ,EAAA0lC,qBAAApQ,IAGAivC,GAAAjvC,EAAA1vD,aAAA2+F,IACAxqE,EAAA5lC,KAAA6rC,EAAAqT,YAAAzc,EAAAoJ,EAAAumC,oBAAAjR,KACA1+B,EAAA,MAGA9mC,IAGA,OAAAiqC,EAIA,SAAA4pE,GAAAvuC,EAAAE,GAEA,MAAAkvC,EAAApvC,EAAAuL,WAAArL,EAAAlyD,OAAA,cACAqhG,EAAArvC,EAAAuL,YAAA,sBAAArL,GAEA,OAAAkvC,GAAAC,QC3MqBC,WAA0Bt/E,GAI/CjzB,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACA+vC,EAAA/vC,EAAA8vC,MAAAC,OAEA/vC,EAAA04C,SAAAnoE,IAAA,iBAAyCytG,GAAiBh+E,IAE1D+vC,EAAA4lB,SAAA,cACAhY,WAAA,SACAD,eAAA,UAIA3N,EAAAuvC,cAAA,CAAA9lE,EAAA+hC,KACA,GAAA/hC,EAAA+jC,SAAA,6BAAAhC,EAAAvwE,KACA,WAIAg1B,EAAA03D,WAAA6nB,kBAAuCzvC,MAAA,aAAA5xB,KAAA,eAGvCle,EAAA8vC,MAAA9hE,SAAA+lF,kBAAAp5C,IACA,MAAAuwC,EAAAlrD,EAAA8vC,MAAA9hE,SAAAm/D,OAAAG,aAEA,UAAArrC,KAAAipD,EACA,aAAAjpD,EAAAtyB,KAAA,CACA,MAAA/B,EAAAq0B,EAAAjkB,SAAAm1B,UAEA,IAAAvlC,EAEA,SAGA,GAAAA,EAAA2+B,GAAA,eAAA3+B,EAAAihC,QAIA,OAFA8L,EAAAn9B,OAAA5P,IAEA,EACM,GAAAA,EAAA2+B,GAAA,gBAAAwjC,EAAAuL,WAAAr5C,EAAAjkB,SAAApQ,GAKN,OAFA+sC,EAAA45B,OAAA3mE,IAEA,EACM,GAAAA,EAAA2+B,GAAA,YAEN,MAAA0J,EAAA0E,EAAAk7B,cAAAjoE,GAEA,UAAAkjB,KAAAmlB,EAAA24B,WACA,GAAA99C,EAAAyb,GAAA,gBAAAwjC,EAAAuL,WAAA3gC,EAAA0lC,qBAAAvvD,MAGA,OAFA6pB,EAAA45B,OAAAzjD,IAEA,QAIK,aAAAmR,EAAAtyB,KAAA,CACL,MAAAoO,EAAAkkB,EAAAjkB,SAAAD,OAEA,GAAAA,EAAAwuB,GAAA,eAAAxuB,EAAA8wB,QAIA,OAFA8L,EAAAn9B,OAAAO,IAEA,EAKA,WAOAjR,YACA,MACA0rE,EADAprE,KAAA4yB,OACA04C,SAAAptE,IAAA,cAOA8B,KAAAmlB,SAAAnlB,KAAA4yB,OAAAy3D,QAAAv5C,KAAAlwC,SAAA,SAAAkwB,EAAAlxB,KACA,MAAA4hD,EAAAxhD,KAAA4yB,OAAA8vC,MAAA9hE,SACAgzC,EAAA4N,EAAA7d,UAAAuH,kBAAAv6B,OAEA6wC,EAAA7d,UAAAgD,aAAAiN,EAAAnS,SAAA2pC,EAAA9sE,QACA0B,KAAA4yB,OAAAy4C,QAAA,cACArrE,KAAA4yB,OAAAy3D,QAAAv5C,KAAAysD,uBAEA39F,EAAAuiB,iBACA2O,EAAA7M,+CCnGqBmuF,WAAqBz/E,GAI1CjzB,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAr0B,EAAAq0B,EAAAr0B,EACAq0B,EAAAujE,GAAAuC,iBAAAv1F,IAAA,aAAAgnF,IACA,MAAA/e,EAAAx4C,EAAA04C,SAAAptE,IAAA,cACAm0G,EAAA,IAAmC5F,GAAUtiB,GAU7C,OATAkoB,EAAAjrG,KACA+iC,MAAA5rC,EAAA,KACA+uG,KAAsBgF,GAAA1yF,EACtB2tF,SAAA,IAGA8E,EAAAxzG,KAAA,oBAAAuoB,GAAAgkD,EAAA,qBAEAprE,KAAAmlB,SAAAktF,EAAA,cAAAz/E,EAAAy4C,QAAA,eACAgnC,WCpBqBE,WAAyB3U,GAY9Cl+F,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MAEAG,EAAgB4tC,GADhB/tC,EAAA9hE,SACqB+iC,UAAA+/B,qBAErB1jE,KAAA1B,QAAAukE,KAAA1jC,GAAA,aACAn/B,KAAAsoD,YAAAua,GAAA2vC,GAAA3vC,EAAAH,EAAAC,QAaAjjE,QAAA8H,MACA,MAAAk7D,EAAA1iE,KAAA4yB,OAAA8vC,MACA9hE,EAAA8hE,EAAA9hE,SAEA8hE,EAAA7J,OAAAtrB,IACA,MAAAujE,GAAAtpG,EAAAm8B,WAAA/iC,EAAA+iC,WAAA+/B,oBAEA,UAAAb,KAAAiuC,GACAjuC,EAAA1jC,GAAA,cAAAqzE,GAAA3vC,EAAAH,EAAAC,SACAp1B,EAAAklE,OAAA5vC,EAAA,gBAaA,SAAA2vC,GAAA3vC,EAAAF,GACA,OAAAA,EAAAuL,WAAArL,EAAAlyD,OAAA,eAAAgyD,EAAAkD,SAAAhD,SCnDqB6vC,WAAkB//E,GAIvCw2C,wBACA,kBAMAzpE,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACA8vC,EAAA9vC,EAAA8vC,MACA9iE,EAAAgzB,EAAAhzB,KAEAgzB,EAAA04C,SAAAnoE,IAAA,gBAAwCovG,GAAgB3/E,IAGxD8vC,EAAAC,OAAA4lB,SAAA,aAAuCxX,eAAA,WAEvCn+C,EAAA03D,WAAA6nB,kBAAuCzvC,MAAA,YAAA5xB,KAAA,MAMvClxC,EAAAs1E,iBAAArkD,GAAA,WAAAC,EAAAlxB,EAAAigE,KACA,MAAAtyB,EAAAsyB,EAAAtyB,OAGA,GAAAsyB,EAAAc,WAAA3/C,KAAAphB,EAAA0yE,UAAwD10E,KAAAgC,EAAA0yE,SAAA10E,OAKxD,GAAQ80G,GAASC,sBAAAlxG,IAAA7B,EAAA0yE,SAAA10E,MAAA,CACjB,GAAAgC,EAAA0yE,SAAA7wC,QACA,OAGA,MAAAsiD,EAAAx2C,EAAAhqC,cAAA,aAKAgwE,EAAA1T,EAAAuS,qBAAA2R,EAAAnkF,EAAAuzE,aAGA,IAAAI,EACA,OAIAhmC,EAAAt9B,OAAA8zE,EAAAxQ,EAAA3iE,UAGA,MAAAytD,WAAWA,GAAawB,EAAAqS,gBAAAtyE,EAAA0yE,SAAA/kC,EAAAsmC,iBAAAkQ,EAAA,IAKxBnkF,EAAAy+D,WAAA9wB,EAAAqT,YAAArT,EAAA0lC,qBAAA8Q,GAAA1lB,EAAApiD,KACArc,EAAAuzE,YAAAvzE,EAAAy+D,WAAApiD,SAGI22F,GAAAhzG,EAAA0yE,SAAA1yE,EAAAuzE,YAAAtT,EAAA8C,UACJ/iE,EAAA7B,OAAAiR,OAAApP,EAAAizG,GAAAjzG,EAAA0yE,SAAA1yE,EAAAuzE,YAAAtT,OAEMp7C,SAAA,QAGN7kB,EAAAs1E,iBAAArkD,GAAA,QAAAC,EAAAlxB,EAAAigE,KAEAjgE,EAAAy+D,YAIAu0C,GAAAhzG,EAAA0yE,SAAA1yE,EAAAuzE,YAAAtT,EAAA8C,UACA/iE,EAAA7B,OAAAiR,OAAApP,EAAAizG,GAAAjzG,EAAA0yE,SAAA1yE,EAAAuzE,YAAAtT,OAEMp7C,SAAA,WAONi+C,EAAA9hE,SAAA+lF,kBAAAp5C,GAAAvtC,KAAA8yG,yBAAAvlE,IAEA3a,EAAA/B,GAAA,iBACA6xC,EAAA+B,cAAA,cAAAl3B,GAAAvtC,KAAA8yG,yBAAAvlE,MACM9oB,SAAA,WASN/kB,yBAAA6tC,GACA,MAAAm1B,EAAA1iE,KAAA4yB,OAAA8vC,MAEA,UAAA3+B,KAAA2+B,EAAA9hE,SAAAmyG,eAAA,CACA,MAAAp2G,EAAA+lE,EAAA9hE,SAAA63D,QAAA10B,GAEA,GAAApnC,EAAA8kC,SAAA,cAAA9kC,EAAAonC,UAEA2+B,EAAAC,OAAAuL,WAAAvxE,EAAA,aAGA,OAFA4wC,EAAAi5B,cAAA,YAAA7pE,IAEA,IAsDA,SAAAk2G,GAAAr5E,EAAA5oB,EAAAivD,GACA,MAAAkkB,EAAAlkB,EAAAtyB,OAAAhqC,cAAA,aAGA,OADAs8D,EAAAtyB,OAAAt9B,OAAA8zE,EAAAnzE,GACAivD,EAAAmS,YAAAx4C,EAAAqmC,EAAAtyB,OAAAsmC,iBAAAkQ,EAAA,IAGA,SAAA6uB,GAAAtxG,EAAAsP,EAAA+xD,GACA,MAAAgL,EAAAhL,EAAAqwC,cAAApiG,GAGA,QAAA+xD,EAAAuL,WAAAP,EAAA,gBAKAhL,EAAAuL,WAAAP,EAAAjsE,KAAA,aAAAJ,GAhCAoxG,GAASC,sBAAA,IAAA3vG,KACT,aACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,aCtKqBiwG,WAAuBrV,GAO5Cl+F,YAAAkzB,EAAAsgF,GACAnzG,MAAA6yB,GAmBA5yB,KAAAkzG,gBAMAxzG,UACA,MAAAmjE,EAAgB4tC,GAAKzwG,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UAAA+/B,qBAErB1jE,KAAA1B,QAAAukE,GAAA7iE,KAAAkzG,cAAAztD,SAAAod,EAAAjlE,OAAAilE,EAAAjlE,KACAoC,KAAAsoD,YAAAua,GAAA7iE,KAAAkzG,cAAA7+D,KAAA8+D,GAAAC,GAAAvwC,EAAAswC,EAAAnzG,KAAA4yB,OAAA8vC,MAAAC,SAWAjjE,QAAA8H,GACA,MAAAk7D,EAAA1iE,KAAA4yB,OAAA8vC,MACA9hE,EAAA8hE,EAAA9hE,SAEAq9D,EAAAz2D,EAAAlJ,MAEAokE,EAAA7J,OAAAtrB,IACA,MAAAujE,EAAAjtG,MAAAC,KAAAlD,EAAA+iC,UAAA+/B,qBACA9tD,OAAAitD,GACAuwC,GAAAvwC,EAAA5E,EAAAyE,EAAAC,SAGA,UAAAE,KAAAiuC,EACAjuC,EAAA1jC,GAAA8+B,IACA1wB,EAAAklE,OAAA5vC,EAAA5E,MAcA,SAAAm1C,GAAAvwC,EAAAswC,EAAAxwC,GACA,OAAAA,EAAAuL,WAAArL,EAAAlyD,OAAAwiG,KAAAxwC,EAAAkD,SAAAhD,GC9EA,MAAAwwC,GAAA,kBASqBC,WAAuB3gF,GAI5CjzB,YAAAkzB,GACA7yB,MAAA6yB,GAEAA,EAAA0zC,OAAAvpE,OAAA,WACAyK,UACKk7D,MAAA,YAAA6wC,MAAA,YAAA/f,MAAA,yBACA9wB,MAAA,WAAA5xB,KAAA,KAAAyiE,MAAA,YAAA/f,MAAA,wBACA9wB,MAAA,WAAA5xB,KAAA,KAAAyiE,MAAA,YAAA/f,MAAA,wBACA9wB,MAAA,WAAA5xB,KAAA,KAAAyiE,MAAA,YAAA/f,MAAA,0BAQLrpB,sBACA,OAAWuoC,IAMXhzG,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAprB,EAAAorB,EAAA0zC,OAAApoE,IAAA,mBAEAg1G,KAEA,UAAAM,KAAAhsG,EAEAgsG,EAAA9wC,QAAA2wC,KAEAzgF,EAAA8vC,MAAAC,OAAA4lB,SAAAirB,EAAA9wC,OACAqO,eAAA,WAGAn+C,EAAA03D,WAAA6nB,iBAAAqB,GAEAN,EAAAxxG,KAAA8xG,EAAA9wC,QAIA1iE,KAAAyzG,wBAAA7gF,GAGAA,EAAA04C,SAAAnoE,IAAA,cAAsC8vG,GAAcrgF,EAAAsgF,IAMpDxzG,YAGA,MAAAkzB,EAAA5yB,KAAA4yB,OACA8gF,EAAA9gF,EAAA04C,SAAAptE,IAAA,SACAsJ,EAAAorB,EAAA0zC,OAAApoE,IAAA,mBAEAw1G,GACA1zG,KAAAmlB,SAAAuuF,EAAA,gBAAA5iF,EAAAlxB,KACA,MAAAg0C,EAAAhhB,EAAA8vC,MAAA9hE,SAAA+iC,UAAAsH,mBAAAt6B,OACAnJ,EAAA6sC,KAAAm/D,GAAA5/D,EAAAzU,GAAAq0E,EAAA9wC,UAEA9uB,EAAAzU,GAAAk0E,KAAA,IAAAz/D,EAAApS,YACA5hC,EAAA2tC,OAAAklE,OAAA7+D,EAAAy/D,MAYA3zG,wBAAAkzB,GACAA,EAAA03D,WAAAjU,IAAA,UAAAlzE,IAAyCuwE,IACzChR,MAAA,WACA5xB,KAAA,KAGA21B,kBAAsBjiD,EAAUtmB,IAAA,mBC9FXy1G,GAOrBj0G,YAAAoH,EAAAmB,GAEAA,GACGgnB,GAAMjvB,KAAAiI,GAITnB,GACA9G,KAAAoH,IAAAN,IAKAurB,GAAKshF,GAAO5iF,UCpBS6iF,WAA0B9iB,GAI/CpxF,YAAAyqF,GACApqF,MAAAoqF,GAEA,MAAAtrF,EAAAmB,KAAAmxF,aAQAnxF,KAAAoH,IAAA,gBAYApH,KAAAoH,IAAA,iBAYApH,KAAA6e,SAAA7e,KAAAixF,mBAEAjxF,KAAAuzF,aACAjrE,IAAA,MAEAxhB,YACA0sF,OACA,KACA,WACA,qBACA30F,EAAAuoB,GAAA,WAAA9oB,yBAAyDA,KACzDO,EAAAyuF,GAAA,4CAIAzuE,SAAA7e,KAAA6e,SAEAgS,IAGAgjF,YAAAh1G,EAAAuoB,GAAA0J,KAAA3O,qBAUAziB,QACAM,KAAA6e,SAAAzc,QACApC,KAAA6e,SAAAoqB,MAAAH,QASAppC,YACA,GAAAM,KAAA6e,SAAAzc,OAAA,CACA,MAAAghC,EAAApjC,KAAA6e,SAAAqqB,KAEA,mBAAA9F,EAAA80D,UACA90D,EAAA80D,YAEA90D,EAAA0F,sBCtCqBgrE,WAAqBhjB,GAU1CpxF,YAAAyqF,EAAAkoB,EAAA0B,GACAh0G,MAAAoqF,GAEA,MAAAtrF,EAAAmB,KAAAmxF,aAQAnxF,KAAAqyG,aAgBAryG,KAAA+zG,YAQA/zG,KAAAoH,IAAA,aAUApH,KAAAoH,IAAA,gBAQApH,KAAAoH,IAAA,SAiBApH,KAAAoH,IAAA,wBAQApH,KAAAo2F,aAAA,IAA0BO,GAY1B32F,KAAAuqF,WAAA,IAAwBZ,GAExB3pF,KAAAuzF,aACAjrE,IAAA,MAEAxhB,YACA0sF,OACA,KACA,cACA30F,EAAAuoB,GAAA,SACAvoB,EAAAyuF,GAAA,0BAAAhvF,SAIAugB,UACAwzF,EACA0B,KAIA1B,EAAA5kB,gBACA3mF,YACA0sF,OACA,0BA4CA9zF,SACAK,MAAAwO,SAGAvO,KAAAmlB,SAAAnlB,KAAAqyG,WAAA,YACAryG,KAAAg0G,QAAAh0G,KAAAg0G,SAIAh0G,KAAA+zG,UAAAl1G,KAAA,aAAAuoB,GAAApnB,KAAA,UAIAA,KAAA6wB,GAAA,qBACA,GAAA7wB,KAAAg0G,OAMA,YAAAh0G,KAAAi0G,cAAA,CACA,MAAAC,EAAkCJ,GAAYI,sBAE9Cl0G,KAAA+zG,UAAAnjG,SAA8B2gF,IAC9B/wF,QAAAR,KAAA+zG,UAAAvzG,QACA4K,OAAApL,KAAAqyG,WAAA7xG,QACAkxF,eAAA,EACAF,WACA0iB,EAAAC,UACAD,EAAAE,UACAF,EAAAG,UACAH,EAAAI,aAEK12G,UAELoC,KAAA+zG,UAAAnjG,SAAA5Q,KAAAi0G,gBAKAj0G,KAAAuqF,WAAAplE,SAAAnlB,KAAAQ,SAGAR,KAAAo2F,aAAAjzF,IAAAnD,KAAAQ,SAEA,MAAA+zG,EAAA,CAAA30G,EAAA6xD,KACAzxD,KAAAg0G,SACAh0G,KAAAqyG,WAAAvpE,QACA9oC,KAAAg0G,QAAA,EACAviD,MAKAzxD,KAAAuqF,WAAAnjF,IAAA,aAAAxH,EAAA6xD,KAEAzxD,KAAAqyG,WAAA/pD,YAAAtoD,KAAAg0G,SACAh0G,KAAAg0G,QAAA,EACAviD,OAKAzxD,KAAAuqF,WAAAnjF,IAAA,cAAAxH,EAAA6xD,KACAzxD,KAAAg0G,QACAviD,MAKAzxD,KAAAuqF,WAAAnjF,IAAA,YAAAmtG,GACAv0G,KAAAuqF,WAAAnjF,IAAA,MAAAmtG,GAMA70G,QACAM,KAAAqyG,WAAAvpE,SAoDAgrE,GAAYI,uBACZC,UAAAK,KAEAh0D,IAAAg0D,EAAA9gD,OACAjT,KAAA+zD,EAAA/zD,KACA7iD,KAAA,OAGAw2G,UAAA,CAAAI,EAAAC,MAEAj0D,IAAAg0D,EAAA9gD,OACAjT,KAAA+zD,EAAA/zD,KAAAg0D,EAAA/zD,MAAA8zD,EAAA9zD,MACA9iD,KAAA,OAGAy2G,UAAA,CAAAG,EAAAC,MAEAj0D,IAAAg0D,EAAAh0D,IAAAi0D,EAAAhgD,OACAhU,KAAA+zD,EAAA/zD,KACA7iD,KAAA,OAGA02G,UAAA,CAAAE,EAAAC,MAEAj0D,IAAAg0D,EAAA9gD,OAAA+gD,EAAAhgD,OACAhU,KAAA+zD,EAAA/zD,KAAAg0D,EAAA/zD,MAAA8zD,EAAA9zD,MACA9iD,KAAA,sCCpWqB82G,WAA2BjI,GAIhD/sG,YAAAyqF,GACApqF,MAAAoqF,GAQAnqF,KAAA20G,UAAA30G,KAAA40G,mBAEA50G,KAAAytF,gBACA3mF,YACA+tG,iBAAA,KAKA70G,KAAAgrC,SAAA,WAAA5jB,GAAApnB,KAAA,QAMAN,SACAK,MAAAwO,SAEAvO,KAAA6e,SAAA1b,IAAAnD,KAAA20G,WASAj1G,mBACA,MAAAi1G,EAAA,IAAwBzI,GAUxB,OARAyI,EAAAl0G,QAAsBq0G,GAAAl1F,EAEtB+0F,EAAAlnB,gBACA3mF,YACA0sF,MAAA,wBAIAmhB,eC/DqBI,WAAiBjkB,GAItCpxF,cACAK,QAQAC,KAAAoiC,MAAApiC,KAAAixF,mBAQAjxF,KAAAo2F,aAAA,IAA0BO,GAQ1B32F,KAAAuqF,WAAA,IAAwBZ,GASxB3pF,KAAA63F,aAAA,IAA0BZ,IAC1BE,WAAAn3F,KAAAoiC,MACAg0D,aAAAp2F,KAAAo2F,aACAc,iBAAAl3F,KAAAuqF,WACA7sC,SAEAo6C,cAAA,UAGAC,UAAA,eAIA/3F,KAAAuzF,aACAjrE,IAAA,KAEAxhB,YACA0sF,OACA,KACA,WACA,YAIA30E,SAAA7e,KAAAoiC,QAOA1iC,SACAK,MAAAwO,SAGA,UAAA4D,KAAAnS,KAAAoiC,MACApiC,KAAAo2F,aAAAjzF,IAAAgP,EAAA3R,SAGAR,KAAAoiC,MAAAvR,GAAA,OAAAC,EAAA3e,KACAnS,KAAAo2F,aAAAjzF,IAAAgP,EAAA3R,WAGAR,KAAAoiC,MAAAvR,GAAA,UAAAC,EAAA3e,KACAnS,KAAAo2F,aAAAhmF,OAAA+B,EAAA3R,WAIAR,KAAAuqF,WAAAplE,SAAAnlB,KAAAQ,SAMAd,QACAM,KAAA63F,aAAAI,aAMAv4F,YACAM,KAAA63F,aAAAK,mBC1GqB8c,WAAqBlkB,GAI1CpxF,YAAAyqF,GACApqF,MAAAoqF,GAQAnqF,KAAA6e,SAAA7e,KAAAixF,mBAEAjxF,KAAAuzF,aACAjrE,IAAA,KAEAxhB,YACA0sF,OACA,KACA,kBAIA30E,SAAA7e,KAAA6e,WAOAnf,QACAM,KAAA6e,SAAAoqB,MAAAH,eCjCqBmsE,WAA0BnkB,GAI/CpxF,YAAAyqF,GACApqF,MAAAoqF,GAEAnqF,KAAAuzF,aACAjrE,IAAA,KACAxhB,YACA0sF,OACA,KACA,sCCEqB0hB,WAAyBzI,GAI9C/sG,YAAAyqF,GACApqF,MAAAoqF,GAQAnqF,KAAAm1G,iBAAAn1G,KAAAo1G,oBAEAp1G,KAAAytF,gBACA3mF,YACA0sF,MAAA,qBAQA9zF,SACAK,MAAAwO,SAEAvO,KAAA6e,SAAA1b,IAAAnD,KAAAm1G,kBASAz1G,oBACA,MAAAy1G,EAAA,IAA+BrkB,GA0B/B,OAxBAqkB,EAAA5hB,aACAjrE,IAAA,OAEAxhB,YACA0sF,OACA,KACA,sBAIA30E,WAEAyJ,IAAA,OAEAxhB,YACA0sF,OACA,KACA,iCAOA2hB,GCpEe,SAAAE,IAAA/vF,QAA+BA,EAAAgwF,YAAApwF,WAAAqwF,oBAC9CjwF,EAAAH,SAAAvkB,SAAA,aAAAkwB,GAAkD1lB,aAClD,GAAAkqG,IAAA,CAIA,UAAAE,KAAAD,EACA,GAAAC,EAAArhD,SAAA/oD,GACA,OAIA8Z,oBCgDO,SAAAuwF,GAAAtrB,EAAAurB,EAA+ChB,IACtD,MAAArC,EAAA,IAAAqD,EAAAvrB,GAEA4pB,EAAA,IAAuBH,GAAiBzpB,GACxCwrB,EAAA,IAA0B7B,GAAY3pB,EAAAkoB,EAAA0B,GAYtC,OAVA1B,EAAAxzG,KAAA,aAAAuoB,GAAAuuF,GAEAtD,aAA4BqC,GAC5BrC,EAAAxzG,KAAA,QAAAuoB,GAAAuuF,EAAA,UAEAtD,EAAAsC,UAAA91G,KAAA,QAAAuoB,GAAAuuF,EAAA,UA6HA,SAAAA,IASA,SAAAA,GACAA,EAAA9kF,GAAA,cACEwkF,IACF/vF,QAAAqwF,EACAL,UAAA,IAAAK,EAAA3B,OACA9uF,SAAA,KACAywF,EAAA3B,QAAA,GAEAuB,iBAAAI,EAAAn1G,cAhBAo1G,CAAAD,GAwBA,SAAAA,GAEAA,EAAA9kF,GAAA,UAAAC,IAEAA,EAAAhgB,kBAA6BokG,KAI7BS,EAAA3B,QAAA,KA/BA6B,CAAAF,GAsCA,SAAAA,GAEAA,EAAAprB,WAAAnjF,IAAA,aAAAxH,EAAA6xD,KACAkkD,EAAA3B,SACA2B,EAAA5B,UAAAjrE,QACA2oB,OAKAkkD,EAAAprB,WAAAnjF,IAAA,WAAAxH,EAAA6xD,KACAkkD,EAAA3B,SACA2B,EAAA5B,UAAA7b,YACAzmC,OAlDAqkD,CAAAH,GA7HAI,CAAAJ,GAEAA,EAqFO,SAAAK,GAAAL,EAAAvzE,GACP,MAAA+nD,EAAAwrB,EAAAxrB,OACA8rB,EAAAN,EAAAM,SAAA,IAA8ClB,GAAQ5qB,GAEtD8rB,EAAA7zE,MAAAvS,OAAAuS,GAAAuK,MAAA,EAA0CpqC,OAAAmgE,YAC1C,iBAAAngE,EACA,WAAc0yG,GAAiB9qB,GAC5B,cAAA5nF,GAAA,iBAAAA,EAAA,CACH,MAAA2zG,EAAA,IAA4BlB,GAAY7qB,GACxC,IAAAkoB,EAcA,OAXAA,EADA,WAAA9vG,EACA,IAAqBkqG,GAAUtiB,GAE/B,IAAqB+qB,GAAgB/qB,IAIrCtrF,QAAAd,OAAAgW,KAAA2uD,IAAAt7C,GAAAs7C,GACA2vC,EAAArnE,SAAA,WAAA5jB,GAAA8uF,GAEAA,EAAAr3F,SAAA1b,IAAAkvG,GAEA6D,KAIAP,EAAA5B,UAAAl1F,SAAA1b,IAAA8yG,GAEAA,EAAA7zE,MAAA4I,SAAA,WAAA5jB,GAAAuuF,eCnMqBQ,WAAkBxjF,GAIvCjzB,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAr0B,EAAAq0B,EAAAr0B,EACAiJ,ECjBO,SAAAorB,GACP,MAAAr0B,EAAAq0B,EAAAr0B,EACA63G,GACAC,UAAA93G,EAAA,MACA+3G,YAAA/3G,EAAA,MACAg4G,YAAAh4G,EAAA,MACAi4G,YAAAj4G,EAAA,OAEA,OAAAq0B,EAAA0zC,OAAApoE,IAAA,mBAAA6P,IAAAylG,IACA,MAAAD,EAAA6C,EAAA5C,EAAAD,OAKA,OAJAA,MAAAC,EAAAD,QAEAC,EAAAz1G,OAAAiR,UAAqCwkG,GAAWD,WAEhDC,IDGwBiD,CAAmB7jF,GAC3C8jF,EAAAn4G,EAAA,KACAo4G,EAAAp4G,EAAA,KAEAq0B,EAAAujE,GAAAuC,iBAAAv1F,IAAA,UAAAgnF,IACA,MAAAysB,KACAC,EAAA,IAAwCvrE,GACxCwrE,EAAAlkF,EAAA04C,SAAAptE,IAAA,WACA64G,EAAAnkF,EAAA04C,SAAAptE,IAAA,aACAotE,GAAAwrC,GACA,UAAAtD,KAAAhsG,EAAA,CACA,MAAAimE,GACAlrE,KAAA,SACAmgE,MAAA,IAA+BixC,IAC/BxpE,MAAAqpE,EAAAD,MACA/f,MAAAggB,EAAAhgB,MACAwjB,UAAA,KAGA,cAAAxD,EAAA9wC,OACA+K,EAAA/K,MAAA7jE,KAAA,QAAAuoB,GAAA2vF,EAAA,SACAtpC,EAAA/K,MAAAt7D,IAAA,2BACAkkE,EAAA5pE,KAAAq1G,KAEAtpC,EAAA/K,MAAA7jE,KAAA,QAAAuoB,GAAA0vF,EAAA,QAAAx4G,OAAAk1G,EAAA9wC,OACA+K,EAAA/K,MAAAt7D,KACA+jE,YAAA,UACA8rC,aAAAzD,EAAA9wC,SAIAm0C,EAAA1zG,IAAAsqE,GACAmpC,EAAApD,EAAA9wC,OAAA8wC,EAAAD,MAEA,MAAAoC,EAAiCF,GAActrB,GAqB/C,OApBY6rB,GAAiBL,EAAAkB,GAC7BlB,EAAAtD,WAAAjrG,KACA8vG,MAAA,EACAF,UAAA,EACAzJ,QAAAoJ,IAEAhB,EAAAloB,gBAAyC3mF,YAAc0sF,OAAA,0BACvDmiB,EAAA92G,KAAA,aAAAixB,OAAAw7C,EAAA,gBAAA6rC,IACAA,EAAA9iE,KAAAiU,OAEAqtD,EAAAtD,WAAAxzG,KAAA,SAAAuoB,GAAA0vF,EAAA,QAAAC,EAAA,SAAAz4G,EAAA84G,KACA,MAAAC,EAAA/4G,GAAA84G,GAAA,YAEA,OAAAR,EAAAS,GAAAT,EAAAS,GAAAX,IAGA12G,KAAAmlB,SAAAwwF,EAAA,UAAA7kF,IACA8B,EAAAy4C,QAAAv6C,EAAAhgB,OAAAq6D,YAAAr6C,EAAAhgB,OAAAmmG,cAAkF34G,MAAAwyB,EAAAhgB,OAAAmmG,mBAAiCt1G,GACnHixB,EAAAy3D,QAAAv5C,KAAAhI,UAEA6sE,WElEqB2B,WAAoB1Z,GAOzCl+F,YAAAkzB,EAAArwB,GACAxC,MAAA6yB,GAQA5yB,KAAAuC,KAAA,YAAAA,EAAA,sBAcA7C,UACAM,KAAA1B,MAAA0B,KAAA0Y,YACA1Y,KAAAsoD,UAAAtoD,KAAA6wG,gBAQAnxG,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACA9hE,EAAA8hE,EAAA9hE,SACAkwG,EAAAjtG,MAAAC,KAAAlD,EAAA+iC,UAAA+/B,qBACA9tD,OAAAitD,GAAA00C,GAAA10C,EAAAH,EAAAC,SAGA60C,GAAA,IAAAx3G,KAAA1B,MAGAokE,EAAA7J,OAAAtrB,IAGA,GAAAiqE,EAAA,CAEA,IAAAzyE,EAAA+rE,IAAA1uG,OAAA,GAAA+Q,YACAskG,EAAAzyG,OAAAmyC,kBACA2mC,KAkDA,KAAA/4C,GAAA,YAAAA,EAAAnnC,MAAA,IAAAmnC,EAAA9tB,aAAA,gBAGA,MAAAygG,EAAA3yE,EAAA9tB,aAAA,cAGAygG,EAAAD,IAEAA,EAAAC,GAKA,MAAAC,EAAAD,EAAAD,EAKA35B,EAAAp8E,MAAoBlB,QAAAukC,EAAA6yE,WAAAD,IAGpB5yE,IAAA5xB,YAGA2qE,IAAA/hC,UAEA,UAAA5pC,KAAA2rE,EACAvwC,EAAAtkC,aAAA,aAAAkJ,EAAAylG,WAAAzlG,EAAA3R,SAqBA,IAAAg3G,EAAA,CAGA,IAAAK,EAAA7yG,OAAAmyC,kBAEA,UAAAhlC,KAAA2+F,EACA3+F,EAAAgtB,GAAA,aAAAhtB,EAAA8E,aAAA,cAAA4gG,IACAA,EAAA1lG,EAAA8E,aAAA,eAQA6gG,GAAAhH,GAAA,EAHA+G,EAAA,IAAAA,EAAA,EAAAA,GAMAC,GAAAhH,GAAA,EAAA+G,GAOA,UAAAr3G,KAAAswG,EAAA/0D,UACAy7D,GAAA,YAAAh3G,EAAA5C,KAGA2vC,EAAAklE,OAAAjyG,EAAA,aACKg3G,GAAA,YAAAh3G,EAAA5C,KAKA45G,GAAA,YAAAh3G,EAAA5C,MAAA4C,EAAAyW,aAAA,aAAAjX,KAAAuC,MAGLgrC,EAAAtkC,aAAA,WAAAjJ,KAAAuC,KAAA/B,IALA+sC,EAAAwqE,eAA4BC,SAAAh4G,KAAAuC,KAAAq1G,WAAA,GAAqCp3G,GACjE+sC,EAAAklE,OAAAjyG,EAAA,eAgBAd,YAEA,MAAAu4G,EAAmBxH,GAAKzwG,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UAAA+/B,qBAExB,QAAAu0C,KAAA94E,GAAA,aAAA84E,EAAAhhG,aAAA,aAAAjX,KAAAuC,KASA7C,gBAEA,GAAAM,KAAA1B,MACA,SAGA,MAAAqlC,EAAA3jC,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UACAg/B,EAAA3iE,KAAA4yB,OAAA8vC,MAAAC,OAEAyuC,EAAqBX,GAAK9sE,EAAA+/B,qBAE1B,QAAA0tC,GAKAmG,GAAAnG,EAAAzuC,IAYA,SAAAm1C,GAAAhH,EAAA9nE,EAAA6uE,GAEA,MAAAK,EAAAlvE,EAAA8nE,EAAA,GAAAA,IAAA1uG,OAAA,GAEA,GAAA81G,EAAA/4E,GAAA,aACA,IAAAhtB,EAAA+lG,EAAAlvE,EAAA,iCAcAyuE,EAAAS,EAAAjhG,aAAA,cAIA,KAAA9E,KAAAgtB,GAAA,aAAAhtB,EAAA8E,aAAA,eAAA4gG,GACAJ,EAAAtlG,EAAA8E,aAAA,gBACAwgG,EAAAtlG,EAAA8E,aAAA,eAIA9E,EAAA8E,aAAA,eAAAwgG,GAEA3G,EAAA9nE,EAAA,kBAAA72B,GAGAA,IAAA62B,EAAA,kCAWA,SAAAuuE,GAAA10C,EAAAF,GACA,OAAAA,EAAAuL,WAAArL,EAAAlyD,OAAA,cAAAgyD,EAAAkD,SAAAhD,SCpSqBs1C,WAAsBva,GAQ3Cl+F,YAAAkzB,EAAAwlF,GACAr4G,MAAA6yB,GASA5yB,KAAAq4G,UAAA,WAAAD,EAAA,KAMA14G,UACAM,KAAAsoD,UAAAtoD,KAAA6wG,gBAQAnxG,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACAlhB,EAAAkhB,EAAA9hE,SACA,IAAA03G,EAAAz0G,MAAAC,KAAA09C,EAAA7d,UAAA+/B,qBAEAhB,EAAA7J,OAAAtrB,IACA,MAAAgrE,EAAAD,IAAAl2G,OAAA,GAGA,IAAA2iC,EAAAwzE,EAAAplG,YAGA,KAAA4xB,GAAA,YAAAA,EAAAnnC,MAAAmnC,EAAA9tB,aAAA,cAAAshG,EAAAthG,aAAA,eACAqhG,EAAA52G,KAAAqjC,GAEAA,IAAA5xB,YAOAnT,KAAAq4G,UAAA,IACAC,IAAAv8D,WAGA,UAAA5pC,KAAAmmG,EAAA,CACA,MAAAZ,EAAAvlG,EAAA8E,aAAA,cAAAjX,KAAAq4G,UAIAX,EAAA,EAIAnqE,EAAAklE,OAAAtgG,EAAA,aAIAo7B,EAAAtkC,aAAA,aAAAyuG,EAAAvlG,MAYAzS,gBAEA,MAAAu4G,EAAmBxH,GAAKzwG,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UAAA+/B,qBAGxB,IAAAu0C,MAAA94E,GAAA,YACA,SAGA,GAAAn/B,KAAAq4G,UAAA,GAGA,MAAAX,EAAAO,EAAAhhG,aAAA,cACA1U,EAAA01G,EAAAhhG,aAAA,YAEA,IAAAg9B,EAAAgkE,EAAAz2G,gBAEA,KAAAyyC,KAAA9U,GAAA,aAAA8U,EAAAh9B,aAAA,eAAAygG,GAAA,CACA,GAAAzjE,EAAAh9B,aAAA,eAAAygG,EAKA,OAAAzjE,EAAAh9B,aAAA,aAAA1U,EAGA0xC,IAAAzyC,gBAIA,SAIA,UC5GA,SAAAg3G,KACA,MAAAC,GAAAz4G,KAAAyhC,UAAA,MAAAzhC,KAAAm+B,SAAA,GAAAvgC,MAAA,MAAAoC,KAAAm+B,SAAA,GAAAvgC,MAEA,OAAAoC,KAAAyhC,SAAAg3E,EACA,EAGQt2E,GAAe3kC,KAAAwC,MCbhB,SAAA04G,GAAAh2C,GACP,OAAA5xC,EAAAlxB,EAAAigE,KACA,MAAAc,EAAAd,EAAAc,WAEA,IAAAA,EAAA3/C,KAAAphB,EAAAuS,KAAA,YACAwuD,EAAA3/C,KAAAphB,EAAAuS,KAAA,wBACAwuD,EAAA3/C,KAAAphB,EAAAuS,KAAA,wBAEA,OAGAwuD,EAAAqG,QAAApnE,EAAAuS,KAAA,UACAwuD,EAAAqG,QAAApnE,EAAAuS,KAAA,sBACAwuD,EAAAqG,QAAApnE,EAAAuS,KAAA,wBAEA,MAAA0gE,EAAAjzE,EAAAuS,KAGAwmG,GAAA9lC,EA6uBA,SAAAA,EAAAhT,GACA,MAAAtB,EAAAsB,EAAAtB,OACA0I,EAAApH,EAAAtyB,OACAyqE,EAAA,YAAAnlC,EAAA57D,aAAA,sBACAq7D,EDvwBO,SAAA/kC,GACP,MAAA+kC,EAAA/kC,EAAAq6B,uBAAA,MAGA,OAFA0K,EAAAnwC,gBAAAq2E,GAEAlmC,ECmwBkBsmC,CAAyB3xC,GAE3C4xC,EAAA5xC,EAAAW,uBAAAowC,EAAA,MAKA,OAJA/wC,EAAAh3D,OAAAg3D,EAAA4M,iBAAAglC,EAAA,GAAAvmC,GAEA/T,EAAAngB,aAAAy0B,EAAAP,GAEAA,EA1vBAwmC,CAAAjmC,EAAAhT,GAEAA,EAAA6C,IAWO,SAAAq2C,GAAAr2C,GACP,OAAA5xC,EAAAlxB,EAAAigE,KACA,MACAyS,EADAzS,EAAAtB,OAAAD,eAAA1+D,EAAAgR,UAAAg2B,wBAAAtoC,MAAA6T,KAAAgtB,GAAA,OACA4G,UACAkhC,EAAApH,EAAAtyB,OAIA05B,EAAA+xC,eAAA/xC,EAAAgM,qBAAAX,IACArL,EAAA+xC,eAAA/xC,EAAA6M,oBAAAxB,IAGA,MAAAumC,EAAAvmC,EAAA3hE,OACAsoG,EAAAJ,EAAAr3G,gBACAilF,EAAAxf,EAAAuT,cAAAq+B,GACAn5F,EAAAunD,EAAA72D,OAAAq2E,GAGAwyB,KAAA9lG,aACA+lG,GAAAjyC,EAAAgyC,IAAA9lG,aAMAgmG,GAFAt5C,EAAAtB,OAAAL,eAAAoU,GAEAr7D,aAAA,gBAAArX,EAAAgR,SAAA61E,EAAAzqE,MAAAs2D,EAAAzS,EAAA6C,GAGA,UAAAh/C,KAAAujD,EAAAwB,cAAA/oD,GAAA8hD,WACA3B,EAAAtB,OAAAmK,kBAAAhlD,GAGAoN,EAAA7M,QAeO,SAAAm1F,GAAAtoF,EAAAlxB,EAAAigE,GACP,IAAAA,EAAAc,WAAAqG,QAAApnE,EAAAuS,KAAA,sBACA,OAGA,MAAAmgE,EAAAzS,EAAAtB,OAAAJ,cAAAv+D,EAAAuS,MACA80D,EAAApH,EAAAtyB,OAIA05B,EAAA+xC,eAAA/xC,EAAAgM,qBAAAX,IACArL,EAAA+xC,eAAA/xC,EAAA6M,oBAAAxB,IAIA,IAAAumC,EAAAvmC,EAAA3hE,OACA,MAAA0oG,EAAA,YAAAz5G,EAAA4gE,kBAAA,UAIA04C,GAAAjyC,EAHA4xC,EAAA5xC,EAAAwrC,OAAA4G,EAAAR,GAGAA,EAAA1lG,aACA+lG,GAAAjyC,EAAA4xC,EAAAr3G,gBAAAq3G,GAGA,UAAAn1F,KAAA9jB,EAAAuS,KAAA8vB,cACA49B,EAAAc,WAAAqG,QAAAtjD,EAAA,UAWO,SAAA41F,GAAA52C,GACP,OAAA5xC,EAAAlxB,EAAAigE,KACA,IAAAA,EAAAc,WAAAqG,QAAApnE,EAAAuS,KAAA,wBACA,OAGA,MAAAmgE,EAAAzS,EAAAtB,OAAAJ,cAAAv+D,EAAAuS,MACA80D,EAAApH,EAAAtyB,OAIA05B,EAAA+xC,eAAA/xC,EAAAgM,qBAAAX,IACArL,EAAA+xC,eAAA/xC,EAAA6M,oBAAAxB,IAGA,MAAAumC,EAAAvmC,EAAA3hE,OACAsoG,EAAAJ,EAAAr3G,gBACAilF,EAAAxf,EAAAuT,cAAAq+B,GACA5xC,EAAA72D,OAAAq2E,GAEAwyB,KAAA9lG,aACA+lG,GAAAjyC,EAAAgyC,IAAA9lG,aAIAgmG,GAAAv5G,EAAA2gE,kBAAA,EAAA3gE,EAAAipC,MAAA7sB,MAAAyqE,EAAAzqE,MAAAs2D,EAAAzS,EAAA6C,GAGAi2C,GAAA/4G,EAAAuS,KAAAmgE,EAAAzS,EAAA6C,GAGA,UAAAh/C,KAAA9jB,EAAAuS,KAAA8vB,cACA49B,EAAAc,WAAAqG,QAAAtjD,EAAA,WA6BO,SAAA61F,GAAAzoF,EAAAlxB,EAAAigE,GACP,eAAAjgE,EAAAuS,KAAAvU,KAAA,CACA,IAAAg0C,EAAAiuB,EAAAtB,OAAAD,eAAA1+D,EAAAipC,MAAA7sB,OAEA,MAAAirD,EAAApH,EAAAtyB,OACAlnB,KAgDA,YAAAurB,EAAAjhC,OAAA/S,MAAA,MAAAg0C,EAAAjhC,OAAA/S,OAGA,OAFAg0C,EAAAq1B,EAAA+xC,eAAApnE,IAEAjhC,OAAA/S,MAHA,CASA,MAAA47G,EAAA5nE,EACA6nE,EAAAxyC,EAAA4M,iBAAAjiC,EAAAjhC,OAAA,OAGA,IAAA6oG,EAAA1zE,QAAA2zE,GAAA,CACA,MAAA/5F,EAAAunD,EAAA72D,OAAA62D,EAAArmB,YAAA44D,EAAAC,IACApzF,EAAA3kB,KAAAge,GAGAkyB,EAAAq1B,EAAA6M,oBAAAliC,EAAAjhC,QAIA,GAAA0V,EAAAjkB,OAAA,GACA,QAAA/E,EAAA,EAAmBA,EAAAgpB,EAAAjkB,OAAkB/E,IAAA,CACrC,MAAAq8G,EAAA9nE,EAAA5L,WAKA,GAHA4L,EADAq1B,EAAAh3D,OAAA2hC,EAAAvrB,EAAAhpB,IACA4e,IAGA5e,EAAA,GACA,MAAAs8G,EAAAT,GAAAjyC,EAAAyyC,IAAAvmG,aAIAwmG,KAAAhpG,QAAA+oG,GACA9nE,EAAA3Z,UAMAihF,GAAAjyC,EAAAr1B,EAAA5L,WAAA4L,EAAA7L,aA2BO,SAAA6zE,GAAA9oF,EAAAlxB,EAAAigE,GACP,MAAAjuB,EAAAiuB,EAAAtB,OAAAD,eAAA1+D,EAAAgR,UACAipG,EAAAjoE,EAAA5L,WACA8zE,EAAAloE,EAAA7L,UAKAmzE,GAAAr5C,EAAAtyB,OAAAssE,EAAAC,GAeO,SAAAC,GAAAjpF,EAAAlxB,EAAAigE,GACP,GAAAA,EAAAc,WAAAqG,QAAApnE,EAAA0yE,UAAwD10E,MAAA,IAAa,CACrE,MAAA2vC,EAAAsyB,EAAAtyB,OACAysE,EAAAh6G,KAAA6/D,cAAA6S,MAGAulC,EAAA1qE,EAAAhqC,cAAA,YAGAy2G,EAAAtC,OAAAsC,EAAAtC,QAAA,EACAnqE,EAAAtkC,aAAA,aAAA+wG,EAAAtC,OAAAO,GAGA,MAAA11G,EAAA3C,EAAA0yE,SAAA3hE,QAAA,MAAA/Q,EAAA0yE,SAAA3hE,OAAA/S,KAAA,sBACA2vC,EAAAtkC,aAAA,WAAA1G,EAAA01G,GAGA+B,EAAAtC,SAGA,MAAAnkC,EAAA1T,EAAAuS,qBAAA6lC,EAAAr4G,EAAAuzE,aAIA,IAAAI,EACA,OAGAhmC,EAAAt9B,OAAAgoG,EAAA1kC,EAAA3iE,UAEA,MAAAi1B,EA0bA,SAAAo0E,EAAAnsD,EAAA+R,GACA,MAAAtyB,EAAAsyB,EAAAtyB,OACA,IAAA2sE,EAAAD,EACAp0E,EAAA0H,EAAAumC,oBAAAmmC,GAIA,UAAAv2F,KAAAoqC,EAEA,SAAApqC,EAAA9lB,MAAA,MAAA8lB,EAAA9lB,KACAioC,EAAAg6B,EAAAmS,YAAAtuD,EAAAmiB,GAAAstC,gBAIA,CACA,MAAAvpE,EAAAi2D,EAAAmS,YAAAtuD,EAAA6pB,EAAAsmC,iBAAAqmC,EAAA,QACAC,EAAAvwG,EAAAy0D,WAAAriD,MAAA+pB,UAEAF,EAAAj8B,EAAAupE,YAWAgnC,KAAAh7E,GAAA,aACA0gC,EAAA8C,OAAAuL,WAAAgsC,EAAAC,EAAAv8G,SACAs8G,EAAAr0E,EAAAl1B,QAYAwuB,GAAA,aAAA+6E,EAAA/mG,aAAA+mG,EAAA/mG,YAAAgsB,GAAA,cACA+6E,IAAA/mG,YACA0yB,EAAA0H,EAAAsmC,iBAAAqmC,EAAA,QAMA,OAAAr0E,EA7eAu0E,CAAAnC,EAAAr4G,EAAA0yE,SAAArwC,cAAA49B,GAEAm6C,EAAAtC,SAGA93G,EAAAy+D,WAAA9wB,EAAAqT,YAAAhhD,EAAAuzE,YAAAttC,GAGA0tC,EAAAE,aAEA7zE,EAAAuzE,YAAA5lC,EAAAsmC,iBAAAN,EAAAE,aAAA,GAGA7zE,EAAAuzE,YAAAvzE,EAAAy+D,WAAApiD,KAeO,SAAAo+F,GAAAvpF,EAAAlxB,EAAAigE,GACP,GAAAA,EAAAc,WAAA3/C,KAAAphB,EAAA0yE,UAAqD10E,MAAA,IAAa,CAElE,MAAAihB,EAAAhb,MAAAC,KAAAlE,EAAA0yE,SAAArwC,eAEA,UAAAve,KAAA7E,EACA6E,EAAAyb,GAAA,OACAzb,EAAA6e,WAcO,SAAA+3E,GAAAxpF,EAAAlxB,EAAAigE,GACP,GAAAA,EAAAc,WAAA3/C,KAAAphB,EAAA0yE,UAAqD10E,MAAA,IAAa,CAClE,OAAAgC,EAAA0yE,SAAA9wC,WACA,OAGA,MAAA3iB,MAAAjf,EAAA0yE,SAAArwC,eAEA,IAAAs4E,GAAA,EACAC,GAAA,EAEA,UAAA92F,KAAA7E,GACA07F,GAAA72F,EAAAyb,GAAA,OAAAzb,EAAAyb,GAAA,OACAzb,EAAA6e,UAGA7e,EAAAyb,GAAA,SAEAq7E,IACA92F,EAAA0b,MAAA1b,EAAA9jB,KAAAuQ,QAAA,cAIAuT,EAAAvQ,aAAAuQ,EAAAvQ,YAAAgsB,GAAA,OAAAzb,EAAAvQ,YAAAgsB,GAAA,SACAzb,EAAA0b,MAAA1b,EAAA9jB,KAAAuQ,QAAA,cAEIuT,EAAAyb,GAAA,OAAAzb,EAAAyb,GAAA,SAEJo7E,GAAA,GAGAC,GAAA,GAcO,SAAAC,GAAA3pE,GACP,OAAAhgB,EAAAlxB,KACA,GAAAA,EAAA4+D,UACA,OAGA,MAAAqU,EAAAjzE,EAAA+9D,cAAA33B,WAEA,GAAA6sC,KAAA1zC,GAAA,aACA,MAAAmzC,EAAA1yE,EAAA2+D,OAAAJ,cAAA0U,GACA6nC,EAAApoC,EAAA9zC,eAAA6N,KAAA7rC,KAAA2+B,GAAA,OAAA3+B,EAAA2+B,GAAA,OACAx+B,EAAAmwC,EAAA+iC,iBAAAvB,EAAA,GAAAr9B,YAEA,UAAA32C,KAAAqC,EAAA,CACA,mBAAArC,EAAAiE,MAAAjE,EAAA6T,KAAAgtB,GAAA,OACAv/B,EAAAgyC,aAAAtzC,EAAA6mC,iBAEA,MACK,iBAAA7mC,EAAAiE,MAAAjE,EAAA6T,MAAAuoG,EAAA,CACL96G,EAAAgyC,aAAAtzC,EAAAunC,aAEA,UA+PO,SAAA80E,GAAA7pF,GAAArwB,EAAA0nC,IAMP,IAEAxE,EAFAxxB,EAAA1R,EAAA0+B,GAAA,oBAAA1+B,EAAA09B,SAAA,GAAA19B,EAUA,GAHAkjC,EAHAwE,EAGAnoC,KAAAy6E,gBAAAtyC,GAFAnoC,KAAAY,SAAA+iC,UAKAxxB,KAAAgtB,GAAA,aAEA,MAAAlB,EAAA0F,EAAAsH,mBACA,IAAA2vE,EAAA,KASA,GAPA38E,EAAAttB,OAAAwuB,GAAA,YACAy7E,EAAA38E,EAAAttB,OACGstB,EAAA+H,YAAA/H,EAAA+H,WAAA7G,GAAA,cACHy7E,EAAA38E,EAAA+H,YAIA40E,EAAA,CAIA,MAAAC,EAAAD,EAAA3jG,aAAA,cAGA,GAAA4jG,EAAA,EAEA,KAAA1oG,KAAAgtB,GAAA,aACAhtB,EAAA2gC,cAAA,aAAA3gC,EAAA8E,aAAA,cAAA4jG,GAEA1oG,IAAAgB,cA4FA,SAAA2nG,GAAAjoC,EAAArrE,GACA,MAAAuzG,IAAAvzG,EAAAuzG,WACAC,IAAAxzG,EAAAwzG,cACAtD,EAAAlwG,EAAAowG,WAEA,IAAAzlG,EAAA0gE,EAEA,KAAA1gE,GAAA,YAAAA,EAAAvU,MAAA,CACA,MAAAq9G,EAAA9oG,EAAA8E,aAAA,cAEA,GAAA8jG,GAAArD,GAAAuD,GAAAD,GAAAtD,EAAAuD,EACA,OAAA9oG,EAGAA,IAAA3Q,gBAGA,YAKA,SAAA03G,GAAAjyC,EAAAi0C,EAAAC,GACA,OAAAD,GAAAC,IAAA,MAAAD,EAAAt9G,MAAA,MAAAs9G,EAAAt9G,OAAAs9G,EAAAt9G,MAAAu9G,EAAAv9G,KACAqpE,EAAAm0C,gBAAAn0C,EAAA6M,oBAAAonC,IAGA,KAOA,SAAAvC,GAAA9lC,EAAAwoC,EAAAx7C,EAAA6C,GACA,MAAA44C,EAAAD,EAAA1qG,OACA4tD,EAAAsB,EAAAtB,OACA0I,EAAApH,EAAAtyB,OAGA,IAAA2uB,EAAAqC,EAAAD,eAAAoE,EAAAuQ,qBAAAJ,IAKA,MAAA+nC,EAAAE,GAAAjoC,EAAArxE,iBACAu5G,YAAA,EACAC,eAAA,EACApD,WAAA/kC,EAAA57D,aAAA,gBAEAskG,EAAA1oC,EAAArxE,gBAEA,GAAAo5G,KAAA3jG,aAAA,eAAA47D,EAAA57D,aAAA,eAGA,MAAAq7D,EAAA/T,EAAAJ,cAAAy8C,GACA1+C,EAAA+K,EAAA+xC,eAAA/xC,EAAA6M,oBAAAxB,SAMApW,EAHAq/C,GAAA,YAAAA,EAAA39G,KAGA2gE,EAAAD,eAAAoE,EAAAmR,iBAAA0nC,EAAA,QAIAh9C,EAAAD,eAAAoE,EAAAuQ,qBAAAJ,IAUA,GANA3W,EAAAs/C,GAAAt/C,GAGA+K,EAAAh3D,OAAAisD,EAAAo/C,GAGAC,GAAA,YAAAA,EAAA39G,KAAA,CACA,MAAA69G,EAAAl9C,EAAAJ,cAAAo9C,GAGA56G,EADAsmE,EAAArmB,YAAAqmB,EAAA4M,iBAAA4nC,EAAA,GAAAv/C,GACAjnB,WAA8CxQ,kBAAA,IAE9C,UAAAnmC,KAAAqC,EACA,GAAArC,EAAA6T,KAAAgtB,GAAA,OACA,MAAAu8E,EAAAz0C,EAAA+xC,eAAA/xC,EAAAgM,qBAAA30E,EAAA6T,OACA0mG,EAAAv6G,EAAA6T,KAAAxB,OAEA+iC,EAAAuzB,EAAA4M,iBAAAwnC,EAAA,OACAnC,GAAAjyC,EAAAvzB,EAAA1N,WAAA0N,EAAA3N,WACAkhC,EAAA/2D,KAAA+2D,EAAAuT,cAAAq+B,GAAAnlE,GAEA/yC,EAAAiQ,SAAA8qG,OAGE,CACF,MAAAC,EAAAL,EAAAnoG,YAEA,GAAAwoG,MAAAx8E,GAAA,OAAAw8E,EAAAx8E,GAAA,QACA,IAAAy8E,EAAA,KAEA,UAAAl4F,KAAAi4F,EAAA15E,cAAA,CACA,MAAA45E,EAAAt9C,EAAAL,eAAAx6C,GAEA,KAAAm4F,KAAA5kG,aAAA,cAAA47D,EAAA57D,aAAA,eAGA,MAFA2kG,EAAAl4F,EAMAk4F,IACA30C,EAAA+xC,eAAA/xC,EAAA6M,oBAAA8nC,IACA30C,EAAA/2D,KAAA+2D,EAAAuT,cAAAohC,EAAAjrG,QAAAs2D,EAAA4M,iBAAAwnC,EAAA,UAMAnC,GAAAjyC,EAAAq0C,IAAAnoG,aACA+lG,GAAAjyC,EAAAq0C,EAAA95G,gBAAA85G,GAKA,SAAAnC,GAAA2C,EAAAC,EAAAC,EAAAC,EAAAp8C,EAAA6C,GAKA,MAAAw5C,EAAApB,GAAAiB,EAAA/1E,YACA+0E,YAAA,EACAC,eAAA,EACApD,WAAAkE,EACAK,IAAA,MAGA59C,EAAAsB,EAAAtB,OACA0I,EAAApH,EAAAtyB,OAGA6uE,EAAAF,IAAAjlG,aAAA,mBAEA,IAAAilD,EAEA,GAAAggD,EAkBE,GAAAE,GAAAN,EAAA,CAkBF,MAAAO,EAAA99C,EAAAJ,cAAA+9C,GAAAvrG,OACAurD,EAAA+K,EAAA6M,oBAAAuoC,OACE,CAmBF,MAAA1+C,EAAA+E,EAAAmR,iBAAAqoC,EAAA,OACAhgD,EAAAqC,EAAAD,eAAAX,QAzCAzB,EAAA8/C,EA4CA9/C,EAAAs/C,GAAAt/C,GAIA,UAAAx4C,QAAAu4F,EAAAh6E,gBACAve,EAAAyb,GAAA,OAAAzb,EAAAyb,GAAA,SACA+8B,EAAA+K,EAAA/2D,KAAA+2D,EAAAuT,cAAA92D,GAAAw4C,GAAAjgD,IAEAi9F,GAAAjyC,EAAAvjD,IAAAvQ,aACA+lG,GAAAjyC,EAAAvjD,EAAAliB,gBAAAkiB,IAUA,SAAA83F,GAAA5pE,GACA,OAAAA,EAAAhL,wBAAAtoC,KAAA6T,KAAAgtB,GAAA,oBCjiCqBm9E,WAAoB3pF,GAIzCw3C,sBACA,OAAWuoC,IAMXhzG,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OAMAA,EAAA8vC,MAAAC,OAAA4lB,SAAA,YACAxX,eAAA,SACAjD,iBAAA,2BAIA,MAAAluE,EAAAgzB,EAAAhzB,KACAyqF,EAAAz3D,EAAAy3D,QAEAz3D,EAAA8vC,MAAA9hE,SAAA+lF,kBAAAp5C,IDggBO,SAAAm1B,EAAAn1B,GACP,MAAAuwC,EAAApb,EAAA9hE,SAAAm/D,OAAAG,aACAq8C,EAAA,IAAA91G,IAEA,IAAA+1G,GAAA,EAEA,UAAA3nF,KAAAipD,EACA,aAAAjpD,EAAAtyB,MAAA,YAAAsyB,EAAAj3B,KACA6+G,EAAA5nF,EAAAjkB,eACG,aAAAikB,EAAAtyB,MAAA,YAAAsyB,EAAAj3B,KAAA,CACH,YAAAi3B,EAAAj3B,KAAA,CAEA,MAAAuU,EAAA0iB,EAAAjkB,SAAAm1B,UAEA5zB,EAAAmuB,aAAA,gBACAiN,EAAAvkC,gBAAA,aAAAmJ,GAEAqqG,GAAA,GAGArqG,EAAAmuB,aAAA,cACAiN,EAAAvkC,gBAAA,WAAAmJ,GAEAqqG,GAAA,GAMAC,EAFA5nF,EAAAjkB,SAAAi3B,aAAAhT,EAAAzyB,aAGG,UAAAyyB,EAAAtyB,MAAA,YAAAsyB,EAAAj3B,KACH6+G,EAAA5nF,EAAAjkB,UACG,aAAAikB,EAAAtyB,MAAA,cAAAsyB,EAAAyrC,aACHm8C,EAAA5nF,EAAAgU,MAAA7sB,OACG,aAAA6Y,EAAAtyB,MAAA,YAAAsyB,EAAAyrC,cACHm8C,EAAA5nF,EAAAgU,MAAA7sB,OAIA,UAAA0gG,KAAAH,EAAA9vG,SACAkwG,EAAAD,GACAE,EAAAF,GAGA,OAAAF,EAEA,SAAAC,EAAA7rG,GACA,MAAAqjC,EAAArjC,EAAAo1B,WAEA,GAAAiO,KAAA9U,GAAA,YAMG,CACH,IAAAu9E,EAAAzoE,EAEA,GAAAsoE,EAAA96G,IAAAi7G,GACA,OAGA,KAAAA,EAAAl7G,iBAAAk7G,EAAAl7G,gBAAA29B,GAAA,aAGA,GAFAu9E,IAAAl7G,gBAEA+6G,EAAA96G,IAAAi7G,GACA,OAIAH,EAAAn1G,IAAAwJ,EAAAo1B,WAAA02E,OArBA,CACA,MAAAvqG,EAAAvB,EAAAm1B,UAEA5zB,KAAAgtB,GAAA,aACAo9E,EAAAn1G,IAAA+K,MAqBA,SAAAwqG,EAAAxqG,GACA,IAAA0qG,EAAA,EACAC,EAAA,KAEA,KAAA3qG,KAAAgtB,GAAA,cACA,MAAA87E,EAAA9oG,EAAA8E,aAAA,cAEA,GAAAgkG,EAAA4B,EAAA,CACA,IAAAlF,EAEA,OAAAmF,GACAA,EAAA7B,EAAA4B,EACAlF,EAAAkF,IAEAC,EAAA7B,IACA6B,EAAA7B,GAGAtD,EAAAsD,EAAA6B,GAGAvvE,EAAAtkC,aAAA,aAAA0uG,EAAAxlG,GAEAqqG,GAAA,OAEAM,EAAA,KACAD,EAAA1qG,EAAA8E,aAAA,gBAGA9E,IAAAgB,aAIA,SAAAypG,EAAAzqG,GACA,IAAA4qG,KACA9oE,EAAA,KAEA,KAAA9hC,KAAAgtB,GAAA,cACA,MAAA87E,EAAA9oG,EAAA8E,aAAA,cAMA,GAJAg9B,KAAAh9B,aAAA,cAAAgkG,IACA8B,IAAAvmG,MAAA,EAAAykG,EAAA,IAGA,GAAAA,EACA,GAAA8B,EAAA9B,GAAA,CACA,MAAA14G,EAAAw6G,EAAA9B,GAEA9oG,EAAA8E,aAAA,aAAA1U,IACAgrC,EAAAtkC,aAAA,WAAA1G,EAAA4P,GAEAqqG,GAAA,QAGAO,EAAA9B,GAAA9oG,EAAA8E,aAAA,YAIAg9B,EAAA9hC,EACAA,IAAAgB,eCroBqD6pG,CAAoBpqF,EAAA8vC,MAAAn1B,IAEzE88C,EAAA9rB,OAAA0+C,0BAAA,KAAAC,IACAt9G,EAAA2+D,OAAA0+C,0BAAA,KAAAC,IAEA7yB,EAAA9rB,OAAA1tC,GAAA,sBAA4C4pF,GAAmBpwB,EAAAv5C,OAC/Du5C,EAAA9rB,OAAA1tC,GAAA,sBD4aO,SAAA6xC,GACP,OAAA5xC,EAAAlxB,KACA,MAAAkjG,EAAAljG,EAAAgyC,aACA0R,EAAAw/C,EAAAnyF,OACA4tD,EAAA3+D,EAAA2+D,OAEA,SAAAjb,EAAA1lD,MAAA,MAAA0lD,EAAA1lD,KAAA,CAEA,GAAAklG,EAAA19D,QAMI,CAKJ,MAAA+3E,EAAA5+C,EAAAL,eAAA4kC,EAAA98D,YACAo3E,EAAA7+C,EAAAO,eAAAgkC,EAAA98D,YAGApmC,EAAA+9D,cAAA+E,EAAAuQ,qBAAAkqC,GAAAt1E,aAAAu1E,OAfA,CAGA,MAAAD,EAAA5+C,EAAAL,eAAA4kC,EAAA/8D,WAEAnmC,EAAA+9D,cAAA+E,EAAAuQ,qBAAAkqC,GAaArsF,EAAA7M,YACG,GACH,MAAAq/B,EAAA1lD,MACAklG,EAAA98D,aACA,MAAA88D,EAAA98D,WAAApoC,MAAA,MAAAklG,EAAA98D,WAAApoC,MACA,CAGA,MAAAu/G,EAAA5+C,EAAAL,eAAA5a,GAIA,IAAA85D,EAAA,EACAvE,EAAA/V,EAAA98D,WAEA,KAAA6yE,MAAA15E,GAAA,OAAA05E,EAAA15E,GAAA,QACAi+E,GAAA7+C,EAAAO,eAAA+5C,GAEAA,IAAAr3G,gBAGA5B,EAAA+9D,cAAA+E,EAAAuQ,qBAAAkqC,GAAAt1E,aAAAu1E,GAEAtsF,EAAA7M,SC7d4Co5F,CAAmBzqF,EAAA8vC,QAC/D9iE,EAAA2+D,OAAA1tC,GAAA,sBAAyC4pF,GAAmBpwB,EAAAv5C,OAE5Du5C,EAAApiB,mBAAAp3C,GAAA,SAA2C0oF,IAAyB90F,SAAA,SACpE4lE,EAAApiB,mBAAAp3C,GAAA,kBAAoD6nF,GAAkB9lF,EAAA8vC,QACtE9iE,EAAAqoE,mBAAAp3C,GAAA,SAAwC0oF,IAAyB90F,SAAA,SACjE7kB,EAAAqoE,mBAAAp3C,GAAA,kBAAiD6nF,GAAkB9lF,EAAA8vC,QAEnE2nB,EAAApiB,mBAAAp3C,GAAA,8BAAgEuoF,IAChEx5G,EAAAqoE,mBAAAp3C,GAAA,8BAA6DuoF,IAC7D/uB,EAAApiB,mBAAAp3C,GAAA,gCAAkEyoF,GAAqB1mF,EAAA8vC,QACvF9iE,EAAAqoE,mBAAAp3C,GAAA,gCAA+DyoF,GAAqB1mF,EAAA8vC,QAEpF2nB,EAAApiB,mBAAAp3C,GAAA,kBAAoDkoF,GAAenmF,EAAA8vC,QACnE2nB,EAAApiB,mBAAAp3C,GAAA,SAA2C+oF,IAAsBn1F,SAAA,QACjE7kB,EAAAqoE,mBAAAp3C,GAAA,kBAAiDkoF,GAAenmF,EAAA8vC,QAChE9iE,EAAAqoE,mBAAAp3C,GAAA,SAAwC+oF,IAAsBn1F,SAAA,QAE9D7kB,EAAAs1E,iBAAArkD,GAAA,aAA0CwpF,IAAY51F,SAAA,SACtD7kB,EAAAs1E,iBAAArkD,GAAA,aAA0CwpF,IAAY51F,SAAA,SACtD7kB,EAAAs1E,iBAAArkD,GAAA,aAA0CypF,IAAgB71F,SAAA,SAC1D7kB,EAAAs1E,iBAAArkD,GAAA,aAA0CkpF,IAG1CnnF,EAAA8vC,MAAA7xC,GAAA,gBAAoC8pF,IAAwBl2F,SAAA,SAG5DmO,EAAA04C,SAAAnoE,IAAA,mBAA2Cm0G,GAAW1kF,EAAA,aACtDA,EAAA04C,SAAAnoE,IAAA,mBAA2Cm0G,GAAW1kF,EAAA,aAGtDA,EAAA04C,SAAAnoE,IAAA,iBAAyCg1G,GAAavlF,EAAA,YACtDA,EAAA04C,SAAAnoE,IAAA,kBAA0Cg1G,GAAavlF,EAAA,aAEvD,MAAAkmE,EAAA94F,KAAA4yB,OAAAy3D,QAAAv5C,KAAAlwC,SAIAZ,KAAAmlB,SAAA2zE,EAAA,SAAAhoE,EAAAlxB,KACA,MAAA4hD,EAAAxhD,KAAA4yB,OAAA8vC,MAAA9hE,SACAgzC,EAAA4N,EAAA7d,UAAAuH,kBAAAv6B,OAEA6wC,EAAA7d,UAAAgD,aAAA,YAAAiN,EAAAh2C,MAAAg2C,EAAAnS,UACAzhC,KAAA4yB,OAAAy4C,QAAA,eAEAzrE,EAAAuiB,iBACA2O,EAAA7M,UAMAjkB,KAAAmlB,SAAA2zE,EAAA,UAAAhoE,EAAAlxB,KAEA,gBAAAA,EAAAwkC,UACA,OAGA,MAAAT,EAAA3jC,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UAEA,IAAAA,EAAAgD,YACA,OAGA,MAAA22E,EAAA35E,EAAAsH,mBAEA,IAAAqyE,EAAA53E,UACA,OAGA,MAAAkO,EAAA0pE,EAAA3sG,OAEA,aAAAijC,EAAAh2C,OAIAg2C,EAAApyC,iBAAA,aAAAoyC,EAAApyC,gBAAA5D,OAMAoC,KAAA4yB,OAAAy4C,QAAA,eAEAzrE,EAAAuiB,iBACA2O,EAAA7M,WACMQ,SAAA,SAEN,MAAA84F,EAAApyC,GACA,CAAAvrE,EAAA6xD,KACAzxD,KAAA4yB,OAAA04C,SAAAptE,IAAAitE,GAEA7iB,YACAtoD,KAAA4yB,OAAAy4C,QAAAF,GACA1Z,MAKAzxD,KAAA4yB,OAAA23D,WAAAnjF,IAAA,MAAAm2G,EAAA,eACAv9G,KAAA4yB,OAAA23D,WAAAnjF,IAAA,YAAAm2G,EAAA,iBAIA,SAAAL,GAAA18G,GACA,IAAA4B,EAAA,EAEA,UAAAshB,KAAAljB,EAAAyhC,cACA,SAAAve,EAAA9lB,MAAA,MAAA8lB,EAAA9lB,KACA,UAAAuU,KAAAuR,EAAAue,cACA7/B,GAAA86G,GAAA/qG,GAKA,OAAA/P,oDCzKqBo7G,WAAe7qF,GAIpCjzB,OAEA,MAAAnB,EAAAyB,KAAA4yB,OAAAr0B,EACAyB,KAAA0tG,WAAA,eAAAnvG,EAAA,KAAgDk/G,GAAA79F,GAChD5f,KAAA0tG,WAAA,eAAAnvG,EAAA,KAAgDm/G,GAAA99F,GAUhDlgB,WAAAyrE,EAAAhhC,EAAAmjE,GACA,MAAA16E,EAAA5yB,KAAA4yB,OACAA,EAAAujE,GAAAuC,iBAAAv1F,IAAAgoE,EAAAgf,IACA,MAAA/e,EAAAx4C,EAAA04C,SAAAptE,IAAAitE,GACAknC,EAAA,IAAmC5F,GAAUtiB,GAU7C,OATAkoB,EAAAjrG,KACA+iC,QACAmjE,OACAC,SAAA,IAGA8E,EAAAxzG,KAAA,oBAAAuoB,GAAAgkD,EAAA,qBAEAprE,KAAAmlB,SAAAktF,EAAA,cAAAz/E,EAAAy4C,QAAAF,IACAknC,KCjCO,SAAA3zD,GAAAi/D,EAAA/sG,GACP,IAAAD,EAAAC,EAAAD,OAEA,KAAAA,GAAA,CACA,GAAAA,EAAA/S,OAAA+/G,EACA,OAAAhtG,EAGAA,YAaO,SAAAitG,GAAAh/G,EAAAN,EAAA6T,EAAAo7B,EAAAswE,EAAA,GACPv/G,EAAAu/G,EACAtwE,EAAAtkC,aAAArK,EAAAN,EAAA6T,GAEAo7B,EAAAvkC,gBAAApK,EAAAuT,GAWO,SAAA2rG,GAAAvwE,EAAA2uB,EAAAp1D,MACP,MAAAi3G,EAAAxwE,EAAAhqC,cAAA,YAAAuD,GACAymC,EAAAi5B,cAAA,YAAAu3C,GACAxwE,EAAAt9B,OAAA8tG,EAAA7hD,GCrCe,SAAA8hD,KACf,OAAAl+C,IACAA,EAAAjvC,GAAA,iBAAAC,EAAAlxB,EAAAigE,KACA,MAAAo+C,EAAAr+G,EAAA0yE,SAGA,IAAAzS,EAAAc,WAAA3/C,KAAAi9F,GAAoDrgH,MAAA,IACpD,OAGA,MAAAsgH,KAAUA,EAAAC,cAAAC,kBAwHV,SAAAH,GACA,MAAAI,GACAF,YAAA,EACAC,eAAA,GAeAE,KACAC,KAIA,IAAAC,EAEA,UAAAC,KAAA56G,MAAAC,KAAAm6G,EAAAh8E,eAGA,aAAAw8E,EAAA7gH,MAAA,UAAA6gH,EAAA7gH,MAAA,UAAA6gH,EAAA7gH,KAAA,CAEA,UAAA6gH,EAAA7gH,MAAA4gH,IACAA,EAAAC,GAKA,MAAAC,EAAA76G,MAAAC,KAAA26G,EAAAx8E,eAAArsB,OAAA9B,KAAAqrB,GAAA,iBAEA,UAAAw/E,KAAAD,EAEA,aAAAC,EAAAhuG,OAAA/S,MAAA+gH,EAAAhuG,SAAA6tG,EACAH,EAAAF,cACAG,EAAA58G,KAAAi9G,OACK,CACLJ,EAAA78G,KAAAi9G,GAGA,MAAAC,EAAAC,GAAAF,GAEAC,EAAAP,EAAAD,iBACAC,EAAAD,eAAAQ,IASA,OAFAP,EAAAH,SAAAI,KAAAC,GAEAF,EAnL8CS,CAAAb,GAG9Cn3G,KAEAs3G,IACAt3G,EAAAs3G,kBAGAD,IACAr3G,EAAAq3G,eAGA,MAAAY,EAAAl/C,EAAAtyB,OAAAhqC,cAAA,QAAAuD,GAGAysE,EAAA1T,EAAAuS,qBAAA2sC,EAAAn/G,EAAAuzE,aAGA,GAAAI,EAAA,CAOA,GAHA1T,EAAAtyB,OAAAt9B,OAAA8uG,EAAAxrC,EAAA3iE,UACAivD,EAAAc,WAAAqG,QAAAi3C,GAAiDrgH,MAAA,IAEjDsgH,EAAA97G,OAEA87G,EAAAr8G,QAAAm9G,GAAAn/C,EAAAmS,YAAAgtC,EAAAn/C,EAAAtyB,OAAAsmC,iBAAAkrC,EAAA,aACI,CAEJ,MAAAC,EAAAn/C,EAAAtyB,OAAAhqC,cAAA,YACAs8D,EAAAtyB,OAAAt9B,OAAA+uG,EAAAn/C,EAAAtyB,OAAAsmC,iBAAAkrC,EAAA,QAEIjB,GAAoBj+C,EAAAtyB,OAAAsyB,EAAAtyB,OAAAsmC,iBAAAmrC,EAAA,QAIxBp/G,EAAAy+D,WAAAwB,EAAAtyB,OAAAqT,YAEAif,EAAAtyB,OAAA0lC,qBAAA8rC,GAKAl/C,EAAAtyB,OAAAumC,oBAAAirC,IAQAxrC,EAAAE,aACA7zE,EAAAuzE,YAAAtT,EAAAtyB,OAAAsmC,iBAAAN,EAAAE,aAAA,GAIA7zE,EAAAuzE,YAAAvzE,EAAAy+D,WAAApiD,QAMO,SAAAgjG,GAAAjrC,GACP,OAAAlU,IACAA,EAAAjvC,cAA4BmjD,IAAc,CAAAljD,EAAAlxB,EAAAigE,KAC1C,MAAAq/C,EAAAt/G,EAAA0yE,SAGA,IAAAzS,EAAAc,WAAA3/C,KAAAk+F,GAAwDthH,MAAA,IACxD,OAGA,MAAAmgH,EAAAl+C,EAAAtyB,OAAAhqC,cAAA,aAGAgwE,EAAA1T,EAAAuS,qBAAA2rC,EAAAn+G,EAAAuzE,aAGA,IAAAI,EACA,OAGA1T,EAAAtyB,OAAAt9B,OAAA8tG,EAAAxqC,EAAA3iE,UACAivD,EAAAc,WAAAqG,QAAAk4C,GAAqDthH,MAAA,IAErD,MAAAu1E,EAAAtT,EAAAtyB,OAAAsmC,iBAAAkqC,EAAA,GACAl+C,EAAAqS,gBAAAgtC,EAAA/rC,GAGA4qC,EAAAv8E,YACAq+B,EAAAtyB,OAAAi5B,cAAA,YAAA2M,GAIAvzE,EAAAy+D,WAAAwB,EAAAtyB,OAAAqT,YAEAif,EAAAtyB,OAAA0lC,qBAAA8qC,GAKAl+C,EAAAtyB,OAAAumC,oBAAAiqC,IAIAn+G,EAAAuzE,YAAAvzE,EAAAy+D,WAAApiD,OAoFA,SAAA4iG,GAAAF,GACA,IAAAP,EAAA,EACAx8G,EAAA,EAGA,MAAAid,EAAAhb,MAAAC,KAAA66G,EAAA18E,eACArsB,OAAA8N,GAAA,OAAAA,EAAA9lB,MAAA,OAAA8lB,EAAA9lB,MAGA,KAAAgE,EAAAid,EAAAzc,QAAA,OAAAyc,EAAAjd,GAAAhE,MAAA,CACA,MAAAuhH,EAAAtgG,EAAAjd,GAKAw8G,GAFAzuD,SAAAwvD,EAAAloG,aAAA,eAGArV,IAGA,OAAAw8G,QCjOegB,GAgEf1/G,YAAAq/G,EAAAv3G,MAOAxH,KAAA++G,QAQA/+G,KAAAq/G,SAAA73G,EAAA63G,UAAA,EAQAr/G,KAAAs/G,OAAA,iBAAA93G,EAAA83G,OAAA93G,EAAA83G,YAAA39G,EAQA3B,KAAAu/G,iBAAA/3G,EAAA+3G,eAQAv/G,KAAAw/G,OAAA,iBAAAh4G,EAAAg4G,OAAAh4G,EAAAg4G,YAAA79G,EASA3B,KAAAy/G,UAAA,IAAAz8G,IASAhD,KAAA0/G,KAAA,EASA1/G,KAAA2/G,QAAA,EAUA3/G,KAAA4/G,MAAA,EASA5/G,KAAA6/G,cAAA,IAAAp5G,IAQA/G,CAAAtB,OAAAqa,YACA,OAAAzY,KAQAN,OACA,MAAAs/G,EAAAh/G,KAAA++G,MAAA5gF,SAAAn+B,KAAA0/G,MAGA,IAAAV,GAAAh/G,KAAA8/G,gBACA,OAAWj7E,MAAA,GAIX,GAAA7kC,KAAA+/G,WAAA//G,KAAA0/G,KAAA1/G,KAAA2/G,SAAA,CAEA,MAAAK,EAAAhgH,KAAA2/G,QACAM,EAAAjgH,KAAAkgH,qBAAAv+G,EAAAq+G,GAQA,OALAhgH,KAAA2/G,WAEA3/G,KAAAu/G,gBAAAv/G,KAAAmgH,kBAAAngH,KAAAogH,kBAAAJ,EAAA,GAGAhgH,KAAA+kC,OAAAk7E,EAIA,MAAAI,EAAArB,EAAA7gF,SAAAn+B,KAAA4/G,OAEA,IAAAS,EAQA,OANArgH,KAAA0/G,OAEA1/G,KAAA2/G,QAAA,EACA3/G,KAAA4/G,MAAA,EAGA5/G,KAAA+kC,OAIA,MAAAu7E,EAAA3wD,SAAA0wD,EAAAppG,aAAA,eACAspG,EAAA5wD,SAAA0wD,EAAAppG,aAAA,gBAGAqpG,EAAA,GAAAC,EAAA,IACAvgH,KAAAwgH,aAAAxgH,KAAA0/G,KAAA1/G,KAAA2/G,QAAAY,EAAAD,GAIA,MAAAN,EAAAhgH,KAAA2/G,QACAM,EAAAjgH,KAAAkgH,gBAAAG,EAAAL,EAAAO,EAAAD,GAWA,OARAtgH,KAAA2/G,UAGA3/G,KAAA4/G,QAEA5/G,KAAAmgH,kBAAAngH,KAAAogH,kBAAAJ,EAAAM,GAGAtgH,KAAA+kC,OAAAk7E,EASAvgH,QAAAs/G,GACAh/G,KAAAy/G,UAAAt8G,IAAA67G,GASAt/G,gBAEA,YAAAiC,IAAA3B,KAAAs/G,QAAAt/G,KAAA0/G,KAAA1/G,KAAAs/G,OAcA5/G,gBAAA2gH,EAAAb,EAAAe,EAAA,EAAAD,EAAA,GACA,OACAz7E,MAAA,EACAvmC,OACA+hH,OACArB,IAAAh/G,KAAA0/G,KACAF,SACAe,UACAD,UACAG,UAAAzgH,KAAA4/G,QAWAlgH,iBACA,MAAAghH,EAAA1gH,KAAA0/G,KAAA1/G,KAAAq/G,SACAsB,EAAA3gH,KAAAy/G,UAAAh+G,IAAAzB,KAAA0/G,MAEA,OAAAgB,GAAAC,EAWAjhH,kBAAA8/G,EAAAc,GACA,QAAA3+G,IAAA3B,KAAAw/G,OAEA,SAKA,MAAAoB,EAAApB,IAAAx/G,KAAAw/G,OAEAqB,EAAArB,EAAAx/G,KAAAw/G,UAAAc,EAAAtgH,KAAAw/G,OAEA,OAAAoB,IAAAC,EAWAnhH,WAAAs/G,EAAAQ,GACA,IAAAx/G,KAAA6/G,cAAAp+G,IAAAu9G,GAEA,SAMA,OAHAh/G,KAAA6/G,cAAA3hH,IAAA8gH,GAGAv9G,IAAA+9G,GAYA9/G,aAAAs/G,EAAAQ,EAAAe,EAAAD,GAEA,QAAAQ,EAAAtB,EAAA,EAAwCsB,GAAAtB,EAAAc,EAAA,EAAwCQ,IAChF9gH,KAAA+gH,iBAAA/B,EAAA8B,GAIA,QAAAE,EAAAhC,EAAA,EAAkCgC,EAAAhC,EAAAuB,EAA6BS,IAC/D,QAAAF,EAAAtB,EAAqCsB,GAAAtB,EAAAc,EAAA,EAAwCQ,IAC7E9gH,KAAA+gH,iBAAAC,EAAAF,GAYAphH,iBAAAs/G,EAAAQ,GACAx/G,KAAA6/G,cAAAp+G,IAAAu9G,IACAh/G,KAAA6/G,cAAAz4G,IAAA43G,EAAA,IAAAv4G,KAGAzG,KAAA6/G,cAAA3hH,IAAA8gH,GAEA53G,IAAAo4G,GAAA,UCrWeyB,GAIfvhH,cACAM,KAAAk2F,UAUAx2F,IAAAqL,EAAAwiC,GACA,MAAAjQ,EAAAt9B,KAAAk2F,OAGAgrB,EAAA5jF,EAAA,GACAt9B,KAAAmhH,kBAAAp2G,GACA,MAAAq2G,EAAA9jF,EAAA,GAGA4jF,IAAAE,GAAAC,GAAAH,EAAAE,IACAphH,KAAA4nB,KAAA,cACA05F,cAAAJ,EACAK,cAAAH,EACA7zE,WAYA7tC,OAAA2S,EAAAk7B,GACA,MAAAjQ,EAAAt9B,KAAAk2F,OAEAgrB,EAAA5jF,EAAA,GACAt9B,KAAAwhH,kBAAAnvG,GACA,MAAA+uG,EAAA9jF,EAAA,GAGA4jF,IAAAE,GAAAC,GAAAH,EAAAE,IACAphH,KAAA4nB,KAAA,cACA05F,cAAAJ,EACAK,cAAAH,EACA7zE,WAYA7tC,kBAAAqL,GACA,MAAAuyB,EAAAt9B,KAAAk2F,OACAt0F,EAAA07B,EAAAguE,UAAAn5F,KAAAE,KAAAtH,EAAAsH,IAGA,GAAAgvG,GAAAt2G,EAAAuyB,EAAA17B,IACA,OAIAA,GAAA,GACA07B,EAAA/pB,OAAA3R,EAAA,GAKA,IAAAvE,EAAA,EAEA,KAAAigC,EAAAjgC,IAAAokH,GAAAnkF,EAAAjgC,GAAA0N,IACA1N,IAGAigC,EAAA/pB,OAAAlW,EAAA,EAAA0N,GASArL,kBAAA2S,GACA,MAAAirB,EAAAt9B,KAAAk2F,OACAt0F,EAAA07B,EAAAguE,UAAAn5F,KAAAE,QAGAzQ,GAAA,GACA07B,EAAA/pB,OAAA3R,EAAA,IAYA,SAAAy/G,GAAAzhG,EAAAqU,GACA,OAAArU,GAAAqU,GAAArU,EAAA6E,UAAAwP,EAAAxP,UAAAi9F,GAAA9hG,EAAAogB,UAAA0hF,GAAAztF,EAAA+L,SAQA,SAAAyhF,GAAA7hG,EAAAqU,GACA,OAAArU,EAAA6E,SAAAwP,EAAAxP,YAEE7E,EAAA6E,SAAAwP,EAAAxP,WAKFi9F,GAAA9hG,EAAAogB,SAAA0hF,GAAAztF,EAAA+L,SAQA,SAAA0hF,GAAA1hF,GACA,OAAAn8B,MAAAuJ,QAAA4yB,KAAA8B,OAAAxyB,KAAA,KAAA0wB,EAjCA3N,GAAG4uF,GAAkBh8F,2BClHrB,MAAA08F,GAAAvjH,OAAA,YACAwjH,GAAAxjH,OAAA,SAOOyjH,GAAA,YAOAC,GAAA,qBAQA,SAAAC,GAAAzgH,GACP,QAAAA,EAAA69B,GAAA,cAIA79B,EAAAiiC,kBAAAo+E,IAgDO,SAAAK,GAAAxhH,EAAA+sC,EAAA/lC,MA0BP,OAvBO4mC,GAAGE,QACVf,EAAAtkC,aAAA,0BAAAzI,GAGA+sC,EAAAoK,SAAAkqE,GAAArhH,GACA+sC,EAAA00E,kBAAAN,IAAA,EAAAnhH,GACAA,EAAA2hC,gBAA2B+/E,GAE3B16G,EAAA2iC,OA0DO,SAAA3pC,EAAA2hH,EAAA50E,GACPA,EAAA00E,kBAAAL,GAAAO,EAAA3hH,GA1DA4hH,CAAA5hH,EAAAgH,EAAA2iC,MAAAoD,GAGA/lC,EAAA66G,qBAoMA,SAAAn8E,EAAAqH,GACA,MAAA+0E,EAAA/0E,EAAAs6B,gBAAA,OAA0D2rB,MAAA,mCAA2C,SAAA/iD,GACrG,MAAAE,EAAA3wC,KAAA0wC,aAAAD,GAGA68D,EAAA,IAAmBpB,GAQnB,OAPAoB,EAAAlmG,IAAA,UAAuBm7G,GAAA3iG,GAGvB0tF,EAAA/+F,SAEAoiC,EAAA1sC,YAAAqpG,EAAA9sG,SAEAmwC,IAIApD,EAAAt9B,OAAAs9B,EAAAsmC,iBAAA3tC,EAAA,GAAAo8E,GACA/0E,EAAAoK,UAAA,wBAAAzR,GArNAs8E,CAAAhiH,EAAA+sC,GA2BO,SAAA/sC,EAAA+sC,EAAApqC,EAAAiN,GACP,MAAAktB,EAAA,IAAmB2jF,GAEnB3jF,EAAAzM,GAAA,cAAAC,EAAAlxB,KACAA,EAAA0hH,eACAlxG,EAAA5P,EAAAZ,EAAA0hH,cAAA1hH,EAAA2tC,QAGA3tC,EAAA2hH,eACAp+G,EAAA3C,EAAAZ,EAAA2hH,cAAA3hH,EAAA2tC,UAIAA,EAAA00E,kBAAA,gBAAAzhH,EAAAuK,EAAAwiC,IAAAjQ,EAAAn6B,IAAA4H,EAAAwiC,GAAA/sC,GACA+sC,EAAA00E,kBAAA,mBAAAzhH,EAAA6R,EAAAk7B,IAAAjQ,EAAAltB,OAAAiC,EAAAk7B,GAAA/sC,GAtCAiiH,CACAjiH,EACA+sC,EACA,CAAA/sC,EAAAuK,EAAAwiC,MAAAoK,SAAA+qE,EAAA33G,EAAAi1B,SAAAx/B,GACA,CAAAA,EAAAuK,EAAAwiC,MAAAsK,YAAA6qE,EAAA33G,EAAAi1B,SAAAx/B,IAGAA,EAGA,SAAAkiH,EAAA1iF,GACA,OAAAn8B,MAAAuJ,QAAA4yB,UAiDO,SAAS2iF,GAAQniH,GACxB,MAAAoiH,EAAApiH,EAAA+iC,kBAAAq+E,IAEA,OAAAgB,EAIA,mBAAAA,QAHA,GA6CO,SAAAC,GAAA38E,EAAAqH,GAuBP,OAtBAA,EAAAoK,UAAA,oDAAAzR,GAIOkI,GAAGE,SAEVf,EAAAtkC,aAAA,kBAAAi9B,EAAA2sB,WAAA,eAAA3sB,GAGAA,EAAArV,GAAA,qBAAAC,EAAA9xB,EAAAmgC,KACAoO,EAAAtkC,aAAA,kBAAAk2B,EAAA,eAAA+G,MAIAA,EAAArV,GAAA,oBAAAC,EAAA9xB,EAAAmgC,KACAA,EACAoO,EAAAoK,SAAA,qCAAAzR,GAEAqH,EAAAsK,YAAA,qCAAA3R,KAIAA,EAmBO,SAAA48E,GAAAn/E,EAAA++B,GACP,MAAAqgD,EAAAp/E,EAAAwH,qBAEA,GAAA43E,EACA,OAAArgD,EAAAoR,oBAAAivC,GAGA,MAAA3R,EAAAztE,EAAA+/B,oBAAA3+B,OAAAzmC,MAEA,GAAA8yG,EAAA,CAGA,GAAAA,EAAA3vE,QACA,OAAAihC,EAAAmR,iBAAAu9B,EAAA,GAGA,MAAAI,EAAA9uC,EAAAoR,oBAAAs9B,GAGA,OAAAztE,EAAAmF,MAAAw5B,WAAAkvC,GACAA,EAIA9uC,EAAAuQ,qBAAAm+B,GAGA,OAAAztE,EAAAmF,MAMA,SAASo5E,KACT,YC3RA,MAAAc,GAAA5kH,OAAA,WAwBO,SAAA6kH,GAAAltE,GACP,QAAAA,EAAAxS,kBAAAy/E,KAA0DjB,GAAQhsE,GAS3D,SAAAmtE,GAAAv/E,GACP,MAAAoS,EAAApS,EAAAwH,qBAEA,SAAA4K,IAAAktE,GAAAltE,IASO,SAAAotE,GAAAx/E,GACP,MAAAy/E,EAAqB1kE,GAAY,QAAA/a,EAAAsH,oBAEjC,SAAAm4E,IAAAH,GAAAG,EAAAzyG,SCvCO,SAAA0yG,GAAA77G,MACP,OAAAs4D,KAAAjvC,GAAA,gBAAAC,EAAAlxB,EAAAigE,KACA,MAAAk/C,EAAAn/G,EAAAuS,KAEA,IAAA0tD,EAAAc,WAAAqG,QAAA+3C,EAAA,UACA,OAIAl/C,EAAAc,WAAAqG,QAAA+3C,EAAA,+BACAl/C,EAAAc,WAAAqG,QAAA+3C,EAAA,kCAEA,MAAAuE,EAAA97G,KAAA87G,SAEAC,EAAA1jD,EAAAtyB,OAAAq6B,uBAAA,UAAgF4rB,MAAA,UAChFgwB,EAAA3jD,EAAAtyB,OAAAq6B,uBAAA,SAGA,IAAA67C,EAFA5jD,EAAAtyB,OAAAt9B,OAAA4vD,EAAAtyB,OAAAsmC,iBAAA0vC,EAAA,GAAAC,GAIAF,IACAG,EDnBO,SAAA1tE,EAAAxI,GAGP,OAFAA,EAAA00E,kBAAAe,IAAA,EAAAjtE,GAEQisE,GAAQjsE,EAAAxI,GAAwB80E,qBAAA,ICgBvBqB,CAAaH,EAAA1jD,EAAAtyB,SAG9B,MAAAo2E,EAAA,IAA0BvE,GAAWL,GAErC6E,GACAzF,YAAAY,EAAA9nG,aAAA,kBACAmnG,eAAAW,EAAA9nG,aAAA,sBAGA,UAAA4sG,KAAAF,EAAA,CACA,MAAA3E,IAAUA,EAAAqB,QAAYwD,EAEtBC,EAAAC,GAAAC,GAAAhF,EAAA4E,GAAAJ,EAAA3jD,GAIAokD,EAAAC,GAHAnF,EAAA5gF,SAAA6gF,GAGAA,EAAA8E,EAAAjkD,GAGAA,EAAAc,WAAAqG,QAAAq5C,EAAA,UAIA8D,GAAAN,EAAAD,EAFA/jD,EAAAtyB,OAAAsmC,iBAAAowC,EAAA,OAEApkD,EAAAr4D,GAGA,MAAAoqC,EAAAiuB,EAAAtB,OAAAD,eAAA1+D,EAAAipC,MAAA7sB,OAEA6jD,EAAAtB,OAAAngB,aAAA2gE,EAAAuE,EAAAG,EAAAF,GACA1jD,EAAAtyB,OAAAt9B,OAAA2hC,EAAA0xE,EAAAG,EAAAF,KAWO,SAAAa,GAAA58G,MACP,OAAAs4D,KAAAjvC,GAAA,mBAAAC,EAAAlxB,EAAAigE,KACA,MAAAwkD,EAAAzkH,EAAAuS,KAEA,IAAA0tD,EAAAc,WAAAqG,QAAAq9C,EAAA,UACA,OAGA,MAAAtF,EAAAsF,EAAA1zG,OAGA6yG,EAAAc,GADAzkD,EAAAtB,OAAAJ,cAAA4gD,IAGAC,EAAAD,EAAA7gF,cAAAmmF,GAEAV,EAAA,IAA0BvE,GAAWL,GAAUM,SAAAL,EAAAM,OAAAN,IAE/C4E,GACAzF,YAAAY,EAAA9nG,aAAA,kBACAmnG,eAAAW,EAAA9nG,aAAA,sBAGA,UAAA4sG,KAAAF,EAAA,CACA,MACAM,EAAAC,GAAAG,EAAArF,EADA+E,GAAAC,GAAAhF,EAAA4E,GAAAJ,EAAA3jD,GACAA,GAGAA,EAAAc,WAAAqG,QAAA68C,EAAAxD,KAAA,UAIA8D,GAAAN,EAAAD,EAFA/jD,EAAAtyB,OAAAsmC,iBAAAowC,EAAA,OAEApkD,EAAAr4D,MAaO,SAAA+8G,GAAA/8G,MACP,OAAAs4D,KAAAjvC,GAAA,oBAAAC,EAAAlxB,EAAAigE,KACA,MAAAk+C,EAAAn+G,EAAAuS,KAEA,IAAA0tD,EAAAc,WAAAqG,QAAA+2C,EAAA,UACA,OAGA,MAAAsG,EAAAtG,EAAAptG,OACAouG,EAAAsF,EAAA1zG,OACA6zG,EAAAzF,EAAA7gF,cAAAmmF,GAEAV,EAAA,IAA0BvE,GAAWL,GAAUM,SAAAmF,EAAAlF,OAAAkF,IAE/CZ,GACAzF,YAAAY,EAAA9nG,aAAA,kBACAmnG,eAAAW,EAAA9nG,aAAA,sBAIA,UAAA4sG,KAAAF,EACA,GAAAE,EAAAxD,OAAAtC,EAAA,CACA,MAAAkG,EAAApkD,EAAAtB,OAAAJ,cAAAkmD,GAMA,YAHAF,GAAAN,EAAAD,EAFA/jD,EAAAtyB,OAAAsmC,iBAAAowC,EAAAI,EAAAnmF,cAAA6/E,IAEAl+C,EAAAr4D,MAoBO,SAAAi9G,GAAAj9G,MACP,MAAA87G,IAAA97G,EAAA87G,SAEA,OAAAxjD,KAAAjvC,GAAA,+BAAAC,EAAAlxB,EAAAigE,KACA,MAAAk/C,EAAAn/G,EAAAuS,KAEA,IAAA0tD,EAAAc,WAAAqG,QAAApnE,EAAAuS,KAAA2e,EAAAlzB,MACA,OAGA,MACAqgH,EAAAqG,GADAzkD,EAAAtB,OAAAJ,cAAA4gD,IAGA2F,EAAA9kH,EAAA2gE,kBACAokD,EAAA/kH,EAAA4gE,kBAGA,GAAAmkD,EAAAD,EAAA,CAEA,MAAAE,EAAA/gH,MAAAC,KAAAi7G,EAAA98E,eAAArsB,OAAA,EAAmEhU,WAAQijH,EAAAjjH,EAAA8iH,EAAA,EAAAC,IAG3EG,GAAAF,EADAb,GAAA,QAAA9F,EAAAp+C,GACAA,EAAA,OAGA,UAAAwkD,KAAAO,EACA,UAAA7G,KAAAsG,EAAApiF,cACA8iF,GAAAhH,EAAA,KAAAl+C,EAAAyjD,GAKA0B,GAAA,QAAA/G,EAAAp+C,OAGA,CAOAilD,GALAjhH,MAAAC,KAAAi7G,EAAA98E,eACArsB,OAAA,EAAgBhU,WAAQijH,EAAAjjH,EAAA+iH,EAAA,EAAAD,IACxB3oE,UAEAgoE,GAAA,QAAA9F,EAAAp+C,GACAA,EAAA,GAGA,MAAA8jD,EAAA,IAA2BvE,GAAWL,GAAUM,SAAAsF,IAAA,EAAAA,EAAArF,OAAAoF,EAAA,IAEhDd,GACAzF,YAAAY,EAAA9nG,aAAA,kBACAmnG,eAAAW,EAAA9nG,aAAA,sBAGA,UAAA4sG,KAAAF,EACAsB,GAAApB,EAAAD,EAAA/jD,EAAAyjD,GAIA0B,GAAA,QAAA/G,EAAAp+C,GAGA,SAAAglD,EAAAjjH,EAAAsjH,EAAAC,GACA,OAAAvjH,EAAAsjH,GAAAtjH,EAAAujH,KAYO,SAAAC,GAAA59G,MACP,MAAA87G,IAAA97G,EAAA87G,SAEA,OAAAxjD,KAAAjvC,GAAA,kCAAAC,EAAAlxB,EAAAigE,KACA,MAAAk/C,EAAAn/G,EAAAuS,KAEA,IAAA0tD,EAAAc,WAAAqG,QAAApnE,EAAAuS,KAAA2e,EAAAlzB,MACA,OAGA,MAAAgmH,GACAzF,YAAAY,EAAA9nG,aAAA,kBACAmnG,eAAAW,EAAA9nG,aAAA,sBAGAouG,EAAAzlH,EAAA2gE,kBACA+kD,EAAA1lH,EAAA4gE,kBAEA+kD,GAAAF,EAAAC,EAAAD,EAAAC,GAAA,EAEA,UAAAzB,KAAA,IAAsCzE,GAAWL,GAEjD8E,EAAArE,OAAA+F,GAIAN,GAAApB,EAAAD,EAAA/jD,EAAAyjD,KA6CA,SAAAyB,GAAAhH,EAAAyH,EAAA3lD,EAAAyjD,GACA,MAAAr8C,EAAApH,EAAAtyB,OACAk4E,EAAA5lD,EAAAtB,OAAAJ,cAAA4/C,GAGA,IAAA0H,EACA,OAGA,IAAAC,EAEA,GAAApC,EAAA,CAEAoC,EAAgB7C,GADhB57C,EAAA0+C,sBAAAH,EAAAC,EAAAzvE,iBACgCixB,GAEhCA,EAAAh3D,OAAAg3D,EAAA6M,oBAAA2xC,GAAAC,GACAz+C,EAAA/2D,KAAA+2D,EAAAwB,cAAAg9C,GAAAx+C,EAAA4M,iBAAA6xC,EAAA,IACAz+C,EAAA72D,OAAA62D,EAAAuT,cAAAirC,SAEAC,EAAAz+C,EAAAwrC,OAAA+S,EAAAC,GAGA5lD,EAAAtB,OAAAngB,aAAA2/D,EAAA2H,GASA,SAAAT,GAAApB,EAAAD,EAAA/jD,EAAAyjD,GACA,MAAAjD,KAAQA,GAAOwD,EAGf2B,EAAAI,GAAA/B,EAAAD,GAEA6B,EAAA5lD,EAAAtB,OAAAJ,cAAAkiD,GAIAoF,KAAA7nH,OAAA4nH,GACAT,GAAA1E,EAAAmF,EAAA3lD,EAAAyjD,GASA,SAAAa,GAAAN,EAAAD,EAAA1nD,EAAA2D,EAAAr4D,GACA,MAAA87G,EAAA97G,KAAA87G,SACAuC,EAAAD,GAAA/B,EAAAD,GAEAkC,EAAAxC,EACET,GAAgBhjD,EAAAtyB,OAAAo4E,sBAAAE,GAAAhmD,EAAAtyB,QAClBsyB,EAAAtyB,OAAAq6B,uBAAAi+C,GAEA9H,EAAA8F,EAAAxD,KAEA0F,EAAA,IAAAhI,EAAAv8E,YAAA,cAAAu8E,EAAA5/E,SAAA,GAAAvgC,KAIA,GAFAiiE,EAAAtyB,OAAAt9B,OAAAisD,EAAA4pD,GAEAC,EAAA,CACA,MAAAC,EAAAjI,EAAA5/E,SAAA,GACA8nF,EAAApmD,EAAAtyB,OAAAsmC,iBAAAiyC,EAAA,OAIA,GAFAjmD,EAAAc,WAAAqG,QAAAg/C,EAAA,UAEAx+G,EAAA87G,SAAA,CACA,MAAA4C,MAAAF,EAAAp1E,oBAAAxuC,OAAA,WAEA+jH,EAAAtmD,EAAAtyB,OAAAq6B,uBAAAs+C,GAEArmD,EAAAtB,OAAAngB,aAAA4nE,EAAAG,GACAtmD,EAAAtyB,OAAAt9B,OAAAg2G,EAAAE,GAEAtmD,EAAAtB,OAAAngB,aAAA2/D,EAAA+H,QAEAjmD,EAAAtB,OAAAngB,aAAA2/D,EAAA+H,GACAjmD,EAAAtB,OAAAngB,aAAA4nE,EAAAF,QAGAjmD,EAAAtB,OAAAngB,aAAA2/D,EAAA+H,GAWA,SAAA5B,GAAAG,EAAAG,EAAAV,EAAAjkD,GACA,IAAAokD,EAAApkD,EAAAtB,OAAAJ,cAAAkmD,GAEA,IAAAJ,EAAA,CAEApkD,EAAAc,WAAAqG,QAAAq9C,EAAA,UAEAJ,EAAApkD,EAAAtyB,OAAAq6B,uBAAA,MACA/H,EAAAtB,OAAAngB,aAAAimE,EAAAJ,GAEA,MAAA9F,EAAAkG,EAAA1zG,OAAAsG,aAAA,kBACAghB,EAAAkmF,EAAA,GAAAqG,GAAArG,EAAAqG,EAAArG,EAAAqG,EAEA5zG,EAAAivD,EAAAtyB,OAAAsmC,iBAAAiwC,EAAA7rF,GACA4nC,EAAAtyB,OAAAt9B,OAAAW,EAAAqzG,GAGA,OAAAA,EAQA,SAAA2B,GAAA/B,EAAAD,GACA,MAAA5E,IAAQA,EAAAQ,UAAcqE,GACtBzF,eAAQA,EAAAD,eAA8ByF,EAMtC,OAHAzF,KAAAa,EAIA,KAIAZ,KAAAoB,EAEA,UAQA,SAAAwE,GAAAhF,EAAA4E,GACA,OAAA5E,EAAA4E,EAAAzF,YAAA,gBAUA,SAAA4F,GAAAqC,EAAAnI,EAAAp+C,GACA,MAAAwmD,EAAAC,GAAAF,EAAAnI,GAEA,OAAAoI,GAsBA,SAAAD,EAAA5C,EAAA3jD,GACA,MAAA0mD,EAAA1mD,EAAAtyB,OAAAq6B,uBAAAw+C,GAEAlqD,EAAA2D,EAAAtyB,OAAAsmC,iBAAA2vC,EAAA,SAAA4C,EAAA,SAIA,OAFAvmD,EAAAtyB,OAAAt9B,OAAAisD,EAAAqqD,GAEAA,EA7BAC,CAAAJ,EAAAnI,EAAAp+C,GAQA,SAAAymD,GAAAF,EAAA5C,GACA,UAAAM,KAAAN,EAAAvhF,cACA,GAAA6hF,EAAAlmH,MAAAwoH,EACA,OAAAtC,EA0BA,SAAAkB,GAAAoB,EAAA5C,EAAA3jD,GACA,MAAAikD,EAAAwC,GAAAF,EAAA5C,GAEAM,GAAA,IAAAA,EAAAtiF,YACAq+B,EAAAtyB,OAAAn9B,OAAAyvD,EAAAtyB,OAAAitC,cAAAspC,IAYA,SAAAgB,GAAAF,EAAAyB,EAAAxmD,EAAA5nC,GACA,UAAAosF,KAAAO,EAAA,CACA,MAAA6B,EAAA5mD,EAAAtB,OAAAJ,cAAAkmD,GAGAoC,GACA5mD,EAAAtyB,OAAAr9B,KACA2vD,EAAAtyB,OAAAitC,cAAAisC,GACA5mD,EAAAtyB,OAAAsmC,iBAAAwyC,EAAApuF,KASA,SAAAqsF,GAAAoC,GACA,UAAAhjG,KAAAgjG,EAAAzkF,cACA,aAAAve,EAAA9lB,KACA,OAAA8lB,QCjhBqBijG,WAAmBh0F,GAIxCw2C,wBACA,mBA8BAzpE,gBAAAq+G,GACA,MAAAsG,EAAAtG,EAAAptG,OACAouG,EAAAsF,EAAA1zG,OAEA6zG,EAAAzF,EAAA7gF,cAAAmmF,GAEAV,EAAA,IAA0BvE,GAAWL,GAAUM,SAAAmF,EAAAlF,OAAAkF,IAE/C,UAAAnE,KAAeA,EAAArB,MAAAQ,YAAoBmE,EACnC,GAAAtD,IAAAtC,EACA,OAAYiB,MAAAQ,UAsBZ9/G,YAAA6tC,EAAA2wE,EAAA0I,GACA,MAAA7H,EAAAxxE,EAAAhqC,cAAA,SAIA,OAFAsjH,GAAAt5E,EAAAwxE,EAAA,EAAAb,EAAA0I,GAEA7H,EA4BAr/G,WAAAq/G,EAAAv3G,MACA,MAAAk7D,EAAA1iE,KAAA4yB,OAAA8vC,MAEAxvD,EAAA1L,EAAAs/G,IAAA,EACAC,EAAAv/G,EAAA02G,MAAA,EAEAx7C,EAAA7J,OAAAtrB,IACA,MAAA4wE,EAAAY,EAAA9nG,aAAA,kBAQA,GALAknG,EAAAjrG,GACAq6B,EAAAtkC,aAAA,cAAAk1G,EAAA4I,EAAAhI,GAIA,IAAA7rG,OAAA6rG,EAAAv9E,WAGA,YAFAqlF,GAAAt5E,EAAAwxE,EAAA7rG,EAAA6zG,EAAA/mH,KAAAgnH,WAAAjI,IAMA,MAAAkI,EAAA,IAA6B7H,GAAWL,GAAUO,OAAApsG,IAIlD,IAAAg0G,EAAA,EAEA,UAAAlI,IAAgBA,EAAAuB,UAAAD,UAAAD,UAA8B4G,EAAA,CAC9CjI,EAAA9rG,GACA8rG,EAAAuB,EAAArtG,GAIAq6B,EAAAtkC,aAAA,UAAAs3G,EAAAwG,EAAA1G,GAMArB,IAAA9rG,IACAg0G,GAAA5G,GAIAuG,GAAAt5E,EAAAwxE,EAAA7rG,EAAA6zG,EAAAG,KA8BAxnH,cAAAq/G,EAAAv3G,MACA,MAAAk7D,EAAA1iE,KAAA4yB,OAAA8vC,MAEAxvD,EAAA1L,EAAAs/G,IAAA,EACAK,EAAA3/G,EAAAo/G,SAAA,EAEAlkD,EAAA7J,OAAAtrB,IACA,MAAA6wE,EAAAW,EAAA9nG,aAAA,kBAGA/D,EAAAkrG,GACA7wE,EAAAtkC,aAAA,iBAAAm1G,EAAA+I,EAAApI,GAGA,MAAAqI,EAAApnH,KAAAgnH,WAAAjI,GAGA,OAAA7rG,GAAAk0G,IAAAl0G,EAAA,CACA,UAAAmxG,KAAAtF,EAAA98E,cACAolF,GAAAF,EAAA55E,IAAAsmC,iBAAAwwC,EAAAnxG,EAAA,UAGA,OAGA,MAAAywG,EAAA,IAA2BvE,GAAWL,GAAUS,OAAAtsG,EAAAqsG,gBAAA,IAEhD,UAAAP,IAAgBA,EAAAQ,SAAAa,OAAAC,UAAAC,UAAAE,eAAiDkD,EAMjE,GAAAnE,IAAAtsG,GASA,GANAq6B,EAAAtkC,aAAA,UAAAq3G,EAAA6G,EAAA9G,GAGAsD,EAAA2D,QAAAtI,GAGAuB,EAAA,EACA,QAAAljH,EAAA2hH,EAAA,EAA4B3hH,EAAA2hH,EAAAuB,EAAmBljH,IAC/CsmH,EAAA2D,QAAAjqH,OAGK,CAGL,MAAA6+D,EAAA3uB,EAAAsmC,iBAAAkrC,EAAA5gF,SAAA6gF,GAAAyB,GAEA4G,GAAAF,EAAA55E,EAAA2uB,MAkDAx8D,oBAAAq+G,EAAAwJ,EAAA,GACA,MAAA7kD,EAAA1iE,KAAA4yB,OAAA8vC,MAEAq8C,EADAhB,EAAAptG,OACAA,OAEA4vG,EAAA5wD,SAAAouD,EAAA9mG,aAAA,eACAqpG,EAAA3wD,SAAAouD,EAAA9mG,aAAA,eAEAyrD,EAAA7J,OAAAtrB,IAEA,GAAA+yE,EAAA,GAEA,MAAAkH,aAAWA,EAAAC,eAA4BC,GAAApH,EAAAiH,GAEnC3J,GAAsB,UAAA6J,EAAA1J,EAAAxwE,GAG1B,MAAAo6E,KAGAH,EAAA,IACAG,EAAArH,QAAAkH,GAIAjH,EAAA,IACAoH,EAAApH,WAIA8G,GADA/G,EAAAiH,IAAA,EAAAjH,EAAA,EACA/yE,IAAAumC,oBAAAiqC,GAAA4J,GAIA,GAAArH,EAAAiH,EAAA,CACA,MAAAL,EAAAK,EAAAjH,EAGAsH,MAAA,IAA8BxI,GAAWL,KAG9BS,OAAAqI,GAA0BD,EAAAv7E,KAAA,EAAqBg0E,UAAOA,IAAAtC,GAGjE+J,EAAAF,EAAAhyG,OAAA,EAA8CyqG,OAAAC,UAAAd,aAI9C,OAHAa,IAAAtC,GAAAyB,IAAAqI,GACArI,EAAAqI,GAAArI,EAAAc,EAAAuH,IAMA,UAAAxH,KAAiBA,EAAAC,aAAgBwH,EACjCv6E,EAAAtkC,aAAA,UAAAq3G,EAAA4G,EAAA7G,GAMA,MAAAsH,KAKApH,EAAA,IACAoH,EAAApH,WAGA8G,GAAAH,EAAA35E,IAAAumC,oBAAAiqC,GAAA4J,GAEA,MAAAvJ,EAAAW,EAAA9nG,aAAA,qBAGAmnG,EAAAyJ,GACKjK,GAAsB,iBAAAQ,EAAA8I,EAAAnI,EAAAxxE,MA8D3B7tC,sBAAAq+G,EAAAwJ,EAAA,GACA,MAAA7kD,EAAA1iE,KAAA4yB,OAAA8vC,MAEA2hD,EAAAtG,EAAAptG,OACAouG,EAAAsF,EAAA1zG,OACAo3G,EAAAhJ,EAAA7gF,cAAAmmF,GAEA9D,EAAA5wD,SAAAouD,EAAA9mG,aAAA,eACAqpG,EAAA3wD,SAAAouD,EAAA9mG,aAAA,eAEAyrD,EAAA7J,OAAAtrB,IAEA,GAAAgzE,EAAA,GAEA,MAAAqH,MAAA,IAA8BxI,GAAWL,GACzCM,SAAA0I,EACAzI,OAAAyI,EAAAxH,EAAA,EACAhB,gBAAA,MAIAiI,aAAWA,EAAAC,eAA4BC,GAAAnH,EAAAgH,GAEnC3J,GAAsB,UAAA6J,EAAA1J,EAAAxwE,GAE1B,MAAWiyE,OAAAwI,GAAqBJ,EAAAv7E,KAAA,EAAqBg0E,UAAOA,IAAAtC,GAG5D4J,KAGAH,EAAA,IACAG,EAAApH,QAAAiH,GAIAlH,EAAA,IACAqH,EAAArH,WAGA,UAAAd,OAAiBA,EAAAR,MAAAyB,eAAyBmH,EAAA,CAW1C,GANA5I,GAAA+I,EAAAN,GAEAjI,IAAAwI,IAEAhJ,EAAA+I,EAAAN,GAAAD,GAAA,EAEA,CAGAH,GAAA,EAAA95E,EAFAA,EAAAsmC,iBAAAkrC,EAAA5gF,SAAA6gF,GAAAyB,GAEAkH,KAMA,GAAApH,EAAAgH,EAAA,CAEA,MAAAL,EAAAK,EAAAhH,EAGAqH,MAAA,IAA8BxI,GAAWL,GAAUM,SAAA,EAAAC,OAAAyI,KAGnD,UAAA1H,KAAiBA,EAAAE,UAAAvB,SAAqB4I,EAItC,GAAAvH,IAAAtC,GAAAiB,EAAAuB,EAAAwH,EAAA,CACA,MAAAE,EAAA1H,EAAA2G,EAEA35E,EAAAtkC,aAAA,UAAAg/G,EAAA5H,GAKA,MAAAsH,KAGArH,EAAA,IACAqH,EAAArH,WAGAuG,GAAAt5E,EAAAwxE,EAAAgJ,EAAA,EAAAb,EAAA,EAAAS,GAGA,MAAAxJ,EAAAY,EAAA9nG,aAAA,kBAEAknG,EAAA4J,GACKnK,GAAsB,cAAAO,EAAA+I,EAAAnI,EAAAxxE,MAc3B7tC,WAAAq/G,GAIA,UAFAA,EAAA5gF,SAAA,GAEA8D,eAAAv1B,OAAA,CAAAk6G,EAAA5H,KAGA,OAAA4H,EAFAj3D,SAAAqvD,EAAA/nG,aAAA,gBAGG,IAWH,SAAA4vG,GAAAt5E,EAAAwxE,EAAA7rG,EAAAgrG,EAAAgK,EAAAphH,MACA,QAAAzJ,EAAA,EAAiBA,EAAA6gH,EAAU7gH,IAAA,CAC3B,MAAAgnH,EAAA92E,EAAAhqC,cAAA,YAEAgqC,EAAAt9B,OAAAo0G,EAAAtF,EAAA7rG,GAEAm0G,GAAAa,EAAA36E,IAAAsmC,iBAAAwwC,EAAA,OAAAv9G,IASA,SAAAugH,GAAAc,EAAA56E,EAAA2uB,EAAAp1D,MACA,QAAAzJ,EAAA,EAAiBA,EAAA8qH,EAAW9qH,IAC1BygH,GAAoBvwE,EAAA2uB,EAAAp1D,GAgBtB,SAAA4gH,GAAAU,EAAAb,GACA,GAAAa,EAAAb,EACA,OAAUC,aAAA,EAAAC,YAAA,GAGV,MAAAD,EAAAlxG,KAAA+N,MAAA+jG,EAAAb,GAGA,OAASC,eAAAC,YAFTW,EAAAZ,EAAAD,EAAAC,SC7jBqBa,WAA2BzqB,GAIhDl+F,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACA/+B,EAAA++B,EAAA9hE,SAAA+iC,UACAg/B,EAAAD,EAAAC,OAEA2lD,EAsCA,SAAA13G,GACA,MAAAD,EAAAC,EAAAD,OAEA,OAAAA,MAAAhU,KAAAgU,WAzCA43G,CAAA5kF,EAAAsH,oBAEAjrC,KAAAsoD,UAAAqa,EAAAuL,WAAAo6C,EAAA,SAaA5oH,QAAA8H,MACA,MAAAk7D,EAAA1iE,KAAA4yB,OAAA8vC,MACA/+B,EAAA++B,EAAA9hE,SAAA+iC,UACA6kF,EAAAxoH,KAAA4yB,OAAAw2C,QAAAlrE,IAA8CyoH,IAE9CzI,EAAAvuD,SAAAnoD,EAAA02G,OAAA,EACA0I,EAAAj3D,SAAAnoD,EAAAo/G,UAAA,EAEA1qD,EAAyB4mD,GAA4Bn/E,EAAA++B,GAErDA,EAAA7J,OAAAtrB,IACA,MAAAwxE,EAAAyJ,EAAAC,YAAAl7E,EAAA2wE,EAAA0I,GAEAlkD,EAAAomB,cAAAi2B,EAAA7iD,GAEA3uB,EAAAkI,aAAAlI,EAAAsmC,iBAAAkrC,EAAA71B,eAAA,qBClCqBw/B,WAAyB9qB,GAS9Cl+F,YAAAkzB,EAAAprB,MACAzH,MAAA6yB,GAQA5yB,KAAA2oH,MAAAnhH,EAAAmhH,OAAA,QAMAjpH,UACA,MAEAkpH,EAAsBlqE,GAAY,QAFlC1+C,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UAEkCsH,oBAElCjrC,KAAAsoD,YAAAsgE,EAUAlpH,UACA,MAAAkzB,EAAA5yB,KAAA4yB,OACA+Q,EAAA/Q,EAAA8vC,MAAA9hE,SAAA+iC,UACA6kF,EAAA51F,EAAAw2C,QAAAlrE,IAAyCyoH,IAGzCtC,EADoB3lE,GAAY,YAAA/a,EAAAsH,oBAChCt6B,OACAouG,EAAAsF,EAAA1zG,OAEAquG,EAAAD,EAAA7gF,cAAAmmF,GACAnxG,EAAA,UAAAlT,KAAA2oH,MAAA3J,EAAA,EAAAA,EAEAwJ,EAAAK,WAAA9J,GAAiCb,KAAA,EAAA4I,GAAA5zG,WCnDZ41G,WAA4BlrB,GASjDl+F,YAAAkzB,EAAAprB,MACAzH,MAAA6yB,GAQA5yB,KAAA2oH,MAAAnhH,EAAAmhH,OAAA,QAMAjpH,UACA,MAEAkpH,EAAsBlqE,GAAY,QAFlC1+C,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UAEkCsH,oBAElCjrC,KAAAsoD,YAAAsgE,EAWAlpH,UACA,MAAAkzB,EAAA5yB,KAAA4yB,OACA+Q,EAAA/Q,EAAA8vC,MAAA9hE,SAAA+iC,UACA6kF,EAAA51F,EAAAw2C,QAAAlrE,IAAyCyoH,IAIzC5I,EAAoBr/D,GAAY,YAFhC/a,EAAAsH,oBAGA8zE,EAAAhB,EAAAptG,eAEA6uG,OAASA,GAASgJ,EAAAO,gBAAAhL,GAClB7qG,EAAA,UAAAlT,KAAA2oH,MAAAnJ,EAAA,EAAAA,EAEAgJ,EAAAQ,cAAAjK,GAAoC6H,QAAA,EAAAE,GAAA5zG,WCzDf+1G,WAAyBrrB,GAQ9Cl+F,YAAAkzB,EAAAprB,MACAzH,MAAA6yB,GAQA5yB,KAAAokC,UAAA58B,EAAA48B,WAAA,eAMA1kC,UACA,MAGAq+G,EAAoBr/D,GAAY,YAHhC1+C,KAAA4yB,OAAA8vC,MACA9hE,SAEgC+iC,UAAAsH,oBAEhCjrC,KAAAsoD,YAAAy1D,EAMAr+G,UACA,MAKAq+G,EAAoBr/D,GAAY,YALhC1+C,KAAA4yB,OAAA8vC,MACA9hE,SACA+iC,UAEAsH,oBAGAi+E,EAAA,iBAAAlpH,KAAAokC,UAEAokF,EAAAxoH,KAAA4yB,OAAAw2C,QAAAlrE,IAA8CyoH,IAE9CuC,EACAV,EAAAW,sBAAApL,EAAA,GAEAyK,EAAAY,oBAAArL,EAAA,UC3CqBsL,WAAyBzrB,GAS9Cl+F,YAAAkzB,EAAAprB,GACAzH,MAAA6yB,GAQA5yB,KAAAokC,UAAA58B,EAAA48B,UAQApkC,KAAAspH,aAAA,SAAAtpH,KAAAokC,WAAA,QAAApkC,KAAAokC,UAMA1kC,UACA,MAAA6pH,EAAAvpH,KAAAwpH,oBAEAxpH,KAAAsoD,YAAAihE,EAGAvpH,KAAA1B,MAAAirH,EAUA7pH,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MAEAq7C,EAAoBr/D,GAAY,YADhCgkB,EAAA9hE,SACgC+iC,UAAAsH,oBAChCs+E,EAAAvpH,KAAA1B,MACA8lC,EAAApkC,KAAAokC,UAEAs+B,EAAA7J,OAAAtrB,IACA,MAAAk8E,EAAA,SAAArlF,GAAA,QAAAA,EAGAslF,EAAAD,EAAA1L,EAAAwL,EACAI,EAAAF,EAAAF,EAAAxL,EAGA6L,EAAAD,EAAAh5G,QAqKA,SAAAg5G,EAAAD,EAAAn8E,GACOs8E,GAAOF,KACPE,GAAOH,IACdn8E,EAAAn9B,OAAAm9B,EAAAk7B,cAAAihD,IAGAn8E,EAAAr9B,KAAAq9B,EAAAk7B,cAAAkhD,GAAAp8E,EAAAsmC,iBAAA61C,EAAA,SAIAn8E,EAAAn9B,OAAAu5G,GA7KAG,CAAAH,EAAAD,EAAAn8E,GAEA,MAAAw8E,EAAA/pH,KAAAspH,aAAA,oBACAU,EAAAr6D,SAAAouD,EAAA9mG,aAAA8yG,IAAA,GACAE,EAAAt6D,SAAA45D,EAAAtyG,aAAA8yG,IAAA,GAGAx8E,EAAAtkC,aAAA8gH,EAAAC,EAAAC,EAAAP,GACAn8E,EAAAkI,aAAAlI,EAAAk7B,cAAAihD,IAGAE,EAAApoF,YAiIA,SAAAooF,EAAAr8E,GACA,MAAAwxE,EAAA6K,EAAAj5G,OAEAu5G,EAAAnL,EAAA7gF,cAAA0rF,GAEA,UAAAvJ,KAAcA,EAAArB,MAAAuB,aAAqB,IAAQnB,GAAWL,GAAUO,OAAA4K,IAA0B,CAC1F,MAAAC,EAAAnL,EAAAuB,EAAA,GAAA2J,EAEAC,GACGvM,GAAsB,UAAA2C,EAAA,EAAAF,EAAA9yE,GAIzBA,EAAAn9B,OAAAw5G,GA7IAQ,CAAAR,EAAAr8E,KAWA7tC,oBACA,MAEAq+G,EAAoBr/D,GAAY,YAFhC1+C,KAAA4yB,OAAA8vC,MACA9hE,SACgC+iC,UAAAsH,oBAEhC,IAAA8yE,EACA,OAGA,MAAAyK,EAAAxoH,KAAA4yB,OAAAw2C,QAAAlrE,IAA8CyoH,IAG9C4C,EAAAvpH,KAAAspH,aAyBA,SAAAvL,EAAA35E,EAAAokF,GACA,MAAA6B,EAAA,SAAAjmF,EAAA25E,EAAA5qG,YAAA4qG,EAAAv8G,gBAEA,IAAA6oH,EACA,OAIA,MAAAC,EAAA,SAAAlmF,EAAA25E,EAAAsM,EACAE,EAAA,SAAAnmF,EAAAimF,EAAAtM,GAGQyB,OAAAgL,GAAyBhC,EAAAO,gBAAAuB,IACzB9K,OAAAiL,GAA0BjC,EAAAO,gBAAAwB,GAElCG,EAAA/6D,SAAA26D,EAAArzG,aAAA,eAMA,OAHAuzG,EAAAE,IAAAD,EAGAJ,OAAA1oH,EA7CAgpH,CAAA5M,EAAA/9G,KAAAokC,UAAAokF,GAqDA,SAAAzK,EAAA35E,GACA,MAAAigF,EAAAtG,EAAAptG,OACAouG,EAAAsF,EAAA1zG,OAEA6zG,EAAAzF,EAAA7gF,cAAAmmF,GAGA,WAAAjgF,GAAAogF,IAAAzF,EAAAv9E,WAAA,SAAA4C,GAAA,IAAAogF,EACA,OAGA,MAAAjE,EAAA5wD,SAAAouD,EAAA9mG,aAAA,eACAknG,EAAAY,EAAA9nG,aAAA,kBAMA,GAAAknG,IAJA,QAAA/5E,GAAAogF,EAAAjE,IAAApC,GACA,MAAA/5E,GAAAogF,IAAArG,GAIA,OAGA,MAAAyM,EAAAj7D,SAAAouD,EAAA9mG,aAAA,eACA4zG,EAAA,QAAAzmF,EAAAogF,EAAAoG,EAAApG,EAEAoD,MAAA,IAA2BxI,GAAWL,GAAUO,OAAAuL,KAGhDC,EADAlD,EAAAv7E,KAAA/tC,KAAA+hH,OAAAtC,GACAyB,OAEAuL,EAAAnD,EAAAv7E,KAAA,EAA2C2yE,MAAAuB,UAAAf,YAC3CA,IAAAsL,IAIA,QAAA1mF,EAEA46E,IAAA6L,EAGAA,IAAA7L,EAAAuB,IAIA,OAAAwK,KAAA1K,KAhGA2K,CAAAjN,EAAA/9G,KAAAokC,WAEA,IAAAmlF,EACA,OAIA,MAAAQ,EAAA/pH,KAAAspH,aAAA,oBACAlB,EAAAz4D,SAAAouD,EAAA9mG,aAAA8yG,IAAA,GAIA,OAFAp6D,SAAA45D,EAAAtyG,aAAA8yG,IAAA,KAEA3B,EACAmB,OADA,GAmIA,SAASM,GAAO9L,GAChB,UAAAA,EAAAv8E,YAAAu8E,EAAA5/E,SAAA,GAAAgB,GAAA,cAAA4+E,EAAA5/E,SAAA,GAAAsD,cC7PqBwpF,WAAyBrtB,GAI9Cl+F,UACA,MAGAq+G,EAAoBr/D,GAAY,YAHhC1+C,KAAA4yB,OAAA8vC,MACA9hE,SAEgC+iC,UAAAsH,oBAEhCjrC,KAAAsoD,YAAAy1D,KAAAptG,cAAA6wB,WAAA,EAMA9hC,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MAKA2hD,EADoB3lE,GAAY,YAHhCgkB,EAAA9hE,SAAA+iC,UAEAsH,oBAEAt6B,OACAouG,EAAAsF,EAAA1zG,OAEAu6G,EAAAnM,EAAA7gF,cAAAmmF,GACAlG,EAAAY,EAAA9nG,aAAA,kBAEAyrD,EAAA7J,OAAAtrB,IACA4wE,GAAA+M,GAAA/M,GACIP,GAAsB,cAAAO,EAAA,EAAAY,EAAAxxE,EAAA,GAG1B,MAAAq6E,MAAA,IAA6BxI,GAAWL,GAAUO,OAAA4L,KAElDC,EAAA,IAAA1kH,IAGAmhH,EACAhyG,OAAA,EAAgBopG,MAAAuB,aAAevB,IAAAkM,GAAA3K,EAAA,GAC/B1+G,QAAA,EAAiB29G,SAAAa,OAAAE,aAAwB4K,EAAA/jH,IAAAo4G,GAAgCa,OAAA4H,aAAA1H,EAAA,KAGzEqH,EACAhyG,OAAA,EAAgBopG,MAAAuB,aAAevB,GAAAkM,EAAA,GAAAlM,EAAAuB,EAAA2K,GAC/BrpH,QAAA,EAAiBw+G,OAAAE,aAAsB3C,GAAsB,UAAA2C,EAAA,EAAAF,EAAA9yE,IAG7D,MAAA69E,EAAAF,EAAA,EACAvH,EAAA,IAA2BvE,GAAWL,GAAUQ,gBAAA,EAAAF,SAAA+L,EAAA9L,OAAA8L,IAEhD,IAAAC,EAEA,UAAArM,IAAgBA,EAAAQ,SAAAa,aAAoBsD,GACpC,GAAAwH,EAAA1pH,IAAA+9G,GAAA,CACA,MAAYa,KAAAiL,EAAArD,gBAAiCkD,EAAAjtH,IAAAshH,GAC7C9rE,EAAA23E,EACA99E,EAAAumC,oBAAAu3C,GACA99E,EAAAsmC,iBAAAkrC,EAAA5gF,SAAA6gF,GAAA,GAEAzxE,EAAAr9B,KAAAq9B,EAAAitC,cAAA8wC,GAAA53E,GACKkqE,GAAsB,UAAAqK,EAAAqD,EAAA/9E,GAE3B89E,EAAAC,OAEAD,EAAAhL,EAIA9yE,EAAAn9B,OAAAi0G,YCpEqBkH,WAA4B3tB,GAIjDl+F,UACA,MAAAkzB,EAAA5yB,KAAA4yB,OACA+Q,EAAA/Q,EAAA8vC,MAAA9hE,SAAA+iC,UACA6kF,EAAA51F,EAAAw2C,QAAAlrE,IAAyCyoH,IAEzC5I,EAAoBr/D,GAAY,YAAA/a,EAAAsH,oBAEhCjrC,KAAAsoD,YAAAy1D,GAAAyK,EAAAxB,WAAAjJ,EAAAptG,eAAA,EAMAjR,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MAKAq7C,EAAoBr/D,GAAY,YAJhCgkB,EAAA9hE,SAAA+iC,UAEAsH,oBAGAo5E,EAAAtG,EAAAptG,OACAouG,EAAAsF,EAAA1zG,OAEAytG,EAAAW,EAAA9nG,aAAA,qBACA+nG,EAAAD,EAAA7gF,cAAAmmF,GAGAuD,MAAA,IAA4BxI,GAAWL,IAIvCyM,EADA5D,EAAAv7E,KAAA/tC,KAAA+hH,OAAAtC,GACAyB,OAEA98C,EAAA7J,OAAAtrB,IAEA6wE,GAAAY,GAAAZ,GACA7wE,EAAAtkC,aAAA,iBAAAm1G,EAAA,EAAAW,GAGA,UAAAsB,KAAgBA,EAAAb,SAAAc,aAAwBsH,EAExCpI,GAAAgM,GAAAlL,EAAA,GAAAd,EAAAc,EAAAkL,EACK5N,GAAsB,UAAA0C,EAAA,EAAAD,EAAA9yE,GACtBiyE,IAAAgM,GAELj+E,EAAAn9B,OAAAiwG,YC/CqBoL,WAA4B7tB,GAIjDl+F,UACA,MAKAq+G,EAAoBr/D,GAAY,YALhC1+C,KAAA4yB,OAAA8vC,MACA9hE,SACA+iC,UAEAsH,oBAEAygF,IAAA3N,EAEA/9G,KAAAsoD,UAAAojE,EAUA1rH,KAAA1B,MAAAotH,GAAA1rH,KAAA2rH,aAAA5N,IAAAptG,eAYAjR,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MAMA2hD,EADoB3lE,GAAY,YAJhCgkB,EAAA9hE,SACA+iC,UAEAsH,oBAEAt6B,OACAouG,EAAAsF,EAAA1zG,OAEAi7G,EAAA7M,EAAA9nG,aAAA,kBACA40G,EAAAxH,EAAAziH,MAEAkqH,EAAAF,EAAAC,MAAA,EAEAnpD,EAAA7J,OAAAtrB,IACA,GAAAu+E,EAAA,CAGA,MAAAC,EAgCA,SAAAhN,EAAA+M,EAAAF,GACA,MAAAG,KAMApI,EAAA,IAAyBvE,GAAWL,GAAUM,SAJ9CyM,EAAAF,IAAA,EAI8CtM,OAF9CwM,EAAA,IAIA,UAAA9M,IAAcA,EAAAuB,UAAAF,UAAqBsD,EACnCpD,EAAA,GAAAvB,EAAAuB,EAAAuL,GACAC,EAAArqH,KAAA2+G,GAIA,OAAA0L,EA/CAC,CAAAjN,EAAA+M,EAAAF,GAEA,UAAAvL,KAAA0L,EACAE,GAAA5L,EAAAyL,EAAAv+E,GAIGqwE,GAAsB,cAAAkO,EAAA/M,EAAAxxE,EAAA,KAYzB7tC,aAAAq+G,EAAAgB,GACA,MAAAZ,EAAAxuD,SAAAovD,EAAA9nG,aAAA,mBAEA,QAAAknG,GAAAJ,EAAAptG,OAAA/O,MAAAu8G,GAiCA,SAAA8N,GAAAlO,EAAAI,EAAA5wE,GACA,MAAA82E,EAAAtG,EAAAptG,OACAouG,EAAAsF,EAAA1zG,OAIAu7G,EAAA/N,EAHAkG,EAAAziH,MAKAkF,KAEAqlH,EALAx8D,SAAAouD,EAAA9mG,aAAA,YAKAi1G,EAEAC,EAAA,IACArlH,EAAAy5G,QAAA4L,GAGA,MAAA9M,EAAAN,EAAA7gF,cAAAmmF,GACA/E,EAAAD,EAAA6M,EACAtE,MAAA,IAA2BxI,GAAWL,GAAUM,WAAAC,SAAAC,gBAAA,KAEhD,IAAA6M,EAEA,UAAApN,IAAcA,EAAAQ,SAAAa,OAAAC,UAAAG,eAAwCmH,EAStD,GARAvH,IAAAtC,IACAqO,EAAA5M,EAEAc,EAAA,IACAx5G,EAAAw5G,iBAIA3+G,IAAAyqH,OAAA5M,GAAAR,IAAAM,EAAA,CACA,MAAA+E,EAAAtF,EAAA5gF,SAAA6gF,GAGGlB,GAAoBvwE,EAFvBA,EAAAsmC,iBAAAwwC,EAAA5D,GAEuB35G,GAKtB82G,GAAsB,UAAAsO,EAAAnO,EAAAxwE,SCrJF8+E,WAA+BzuB,GAIpDl+F,UACA,MAKAq+G,EAAoBr/D,GAAY,YALhC1+C,KAAA4yB,OAAA8vC,MACA9hE,SACA+iC,UAEAsH,oBAGAygF,IAAA3N,EAEA/9G,KAAAsoD,UAAAojE,EAUA1rH,KAAA1B,MAAAotH,GAAA1rH,KAAA2rH,aAAA5N,IAAAptG,eAYAjR,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MAEA/+B,EADA++B,EAAA9hE,SACA+iC,UACA6kF,EAAAxoH,KAAA4yB,OAAAw2C,QAAAlrE,IAAA,cAGA6/G,EAAoBr/D,GAAY,YADhC/a,EAAAsH,mBACgCt6B,QAEhCouG,EADAhB,EAAAptG,OACAA,OAEA27G,EAAA38D,SAAAovD,EAAA9nG,aAAA,uBACSuoG,OAAA+M,GAA0B/D,EAAAO,gBAAAhL,GAEnCyO,EAAAF,EAAAC,MAAA,EAEA7pD,EAAA7J,OAAAtrB,IACGqwE,GAAsB,iBAAA4O,EAAAzN,EAAAxxE,EAAA,KAYzB7tC,aAAAq+G,EAAAgB,GACA,MAAAX,EAAAzuD,SAAAovD,EAAA9nG,aAAA,sBAEAuxG,EAAAxoH,KAAA4yB,OAAAw2C,QAAAlrE,IAAA,eAEAshH,OAASA,GAASgJ,EAAAO,gBAAAhL,GAElB,QAAAK,GAAAoB,EAAApB,GCmHe,SAAAqO,GAAA/pD,GACfA,EAAA9hE,SAAA+lF,kBAAAp5C,IAOA,SAAAA,EAAAm1B,GACA,MAAAob,EAAApb,EAAA9hE,SAAAm/D,OAAAG,aAEA,IAAA1yB,GAAA,EAGA,MAAAk/E,EAAA,IAAA1pH,IAEA,UAAA6xB,KAAAipD,EAAA,CACA,IAAAihC,EAEA,SAAAlqF,EAAAj3B,MAAA,UAAAi3B,EAAAtyB,OACAw8G,EAAAlqF,EAAAjkB,SAAAm1B,WAIA,YAAAlR,EAAAj3B,MAAA,aAAAi3B,EAAAj3B,OACAmhH,EAAWrgE,GAAY,QAAA7pB,EAAAjkB,WAIvB+7G,GAAA93F,KACAkqF,EAAWrgE,GAAY,QAAA7pB,EAAAgU,MAAA7sB,QAGvB+iG,IAAA2N,EAAAjrH,IAAAs9G,KAGAvxE,EAAAo/E,GAAA7N,EAAAxxE,IAAAC,EAEAA,EAAAq/E,GAAA9N,EAAAxxE,IAAAC,EAEAk/E,EAAAvpH,IAAA47G,IAIA,OAAAvxE,GA3CAs/E,CAAAv/E,EAAAm1B,IAmDA,SAAAkqD,GAAA7N,EAAAxxE,GACA,IAAAC,GAAA,EAEA,MAAAu/E,EAkDA,SAAAhO,GACA,MAAAZ,EAAAxuD,SAAAovD,EAAA9nG,aAAA,mBACA+1G,EAAAjO,EAAAv9E,WAEAurF,KAEA,UAAA/N,IAAcA,EAAAuB,UAAAF,UAAqB,IAAQjB,GAAWL,GAAA,CAEtD,GAAAwB,EAAA,EACA,SAGA,MAAA0M,EAAAjO,EAAAb,EAGA+O,EAAAD,EAAA9O,EAAA6O,EAGA,GAAAhO,EAAAuB,EAAA2M,EAAA,CACA,MAAAhB,EAAAgB,EAAAlO,EAEA+N,EAAArrH,MAAsB2+G,OAAAE,QAAA2L,KAItB,OAAAa,EA3EAI,CAAApO,GAEA,GAAAgO,EAAA3qH,OAAA,CACAorC,GAAA,EAEA,UAAA5tC,KAAAmtH,EACGnP,GAAsB,UAAAh+G,EAAA2gH,QAAA3gH,EAAAygH,KAAA9yE,EAAA,GAIzB,OAAAC,EAQA,SAAAq/E,GAAA9N,EAAAxxE,GACA,IAAAC,GAAA,EAEA,MAAA4/E,EA6DA,SAAArO,GACA,MAAAsO,KAEA,UAAArO,IAAcA,KAAM,IAAQI,GAAWL,GAAUQ,gBAAA,IACjD8N,EAAArO,KACAqO,EAAArO,GAAA,GAGAqO,EAAArO,IAAA,EAGA,OAAAqO,EAxEAC,CAAAvO,GACAwO,EAAAH,EAAA,GAIA,IAFArvH,OAAA0O,OAAA2gH,GAAAj7F,MAAA/vB,OAAAmrH,GAEA,CACA,MAAAC,EAAAzvH,OAAA0O,OAAA2gH,GAAA1gH,OAAA,CAAAunC,EAAAiB,MAAAjB,EAAAiB,EAAAjB,EAAA,GAEA,UAAAuwE,EAAAj6G,KAAAxM,OAAA62B,QAAAw4F,GAAA,CACA,MAAAjG,EAAAqG,EAAAjjH,EAEA,GAAA48G,EAAA,CACA,QAAA9pH,EAAA,EAAoBA,EAAA8pH,EAAqB9pH,IACpCygH,GAAoBvwE,IAAAsmC,iBAAAkrC,EAAA5gF,SAAAqmF,GAAA,QAGzBh3E,GAAA,IAKA,OAAAA,EA0DA,SAAAm/E,GAAA93F,GACA,MAAA44F,EAAA,cAAA54F,EAAAtyB,KACA3D,EAAAi2B,EAAAyrC,aAEA,OAAAmtD,IAAA,gBAAA7uH,GAAA,YAAAA,GAAA,YAAAA,GCrVe,SAAA8uH,GAAAhrD,GACfA,EAAA9hE,SAAA+lF,kBAAAp5C,IAOA,SAAAA,EAAAm1B,GACA,MAAAob,EAAApb,EAAA9hE,SAAAm/D,OAAAG,aAEA,IAAA1yB,GAAA,EAEA,UAAA3Y,KAAAipD,EAEA,UAAAjpD,EAAAtyB,MAAAsyB,EAAAjkB,SAAAD,OAAAwuB,GAAA,eACAqO,EAAAmgF,GAAA94F,EAAAjkB,SAAAD,OAAA48B,IAAAC,GAIA,UAAA3Y,EAAAtyB,OACA,SAAAsyB,EAAAj3B,OACA4vC,EAAAogF,GAAA/4F,EAAAjkB,SAAAm1B,UAAAwH,IAAAC,GAGA,YAAA3Y,EAAAj3B,OACA4vC,EAAAqgF,GAAAh5F,EAAAjkB,SAAAm1B,UAAAwH,IAAAC,GAGA,aAAA3Y,EAAAj3B,OACA4vC,EAAAmgF,GAAA94F,EAAAjkB,SAAAm1B,UAAAwH,IAAAC,IAKA,OAAAA,GAlCAsgF,CAAAvgF,EAAAm1B,IAyCA,SAAAkrD,GAAA7O,EAAAxxE,GACA,IAAAC,GAAA,EAEA,UAAAwxE,KAAAD,EAAA98E,cACAuL,EAAAqgF,GAAA7O,EAAAzxE,IAAAC,EAGA,OAAAA,EAOA,SAAAqgF,GAAAxJ,EAAA92E,GACA,IAAAC,GAAA,EAEA,UAAAuwE,KAAAsG,EAAApiF,cACAuL,EAAAmgF,GAAA5P,EAAAxwE,IAAAC,EAGA,OAAAA,EAOA,SAAAmgF,GAAA5P,EAAAxwE,GACA,UAAAwwE,EAAAv8E,aACA+L,EAAAi5B,cAAA,YAAAu3C,IAEA,GCnCe,SAAAgQ,GAAArrD,EAAA2nB,GACfA,EAAAv5C,KAAAlwC,SAAA+lF,kBAAAp5C,IAQA,SAAAA,EAAAm1B,EAAAnE,EAAAztB,GACA,IAAAtD,GAAA,EAEA,MAAAwgF,EAqBA,SAAAl9E,GACA,MAAAm9E,EAAApqH,MAAAC,KAAAgtC,EAAAgc,UAAA5Q,kBACAtmC,OAAA9B,OAAAnD,QACAiF,OAAAs4G,IACAt4G,OAAA9B,GAAAq6G,GAAAr6G,EAAAnD,SAEAy9G,EAAAvqH,MAAAC,KAAAgtC,EAAAgc,UAAA3Q,gBACAvmC,OAAA9B,OAAAnD,QACAiF,OAAAu4G,IACAzhH,OAAA,CAAAunC,EAAAzzC,KACA,MAAA6tH,EAAAxqH,MAAAC,KAAAtD,EAAAyhC,eAAArsB,OAAAs4G,IAEA,UAAAj6E,KAAAo6E,QAGA,UAAAJ,KAAAG,GApCAE,CAAAx9E,GAEA,UAAAtwC,KAAAwtH,EACAxgF,EAAA+gF,GAAA/tH,EAAA+9D,EAAAhxB,IAAAC,EAMAA,GAmFA,SAAA7J,EAAA46B,EAAAhxB,GACA,MAAAu5C,EAAAjjF,MAAAC,KAAA6/B,EAAAgG,aACA57B,IAAA86B,GAAA01B,EAAA2I,YAAAr+B,IAEA0E,EAAAkI,aAAAqxC,GAAoC18C,SAAAzG,EAAAqF,aAtFpCwlF,CAAA9rD,EAAA9hE,SAAA+iC,UAAA46B,EAAAhxB,GAGA,OAAAC,GAxBAihF,CAAAlhF,EAAAm1B,EAAA2nB,EAAA9rB,OAAA8rB,EAAAv5C,OAsDA,SAAAy9E,GAAAG,EAAAnwD,EAAAhxB,GACA,MAAAohF,EAAApwD,EAAAL,eAAAwwD,GACAE,EAyBA,SAAA7Q,EAAAh6B,GACA,MAAA8qC,EAAA9Q,EAAAv8E,WAAA,EACA3qB,QAAAktE,EAAA/tC,iBAAA5zC,OAEA,OAAAysH,GAAAh4G,EAAA,WA7BAi4G,CAAAH,EAAAh+G,OAAAg+G,GAEA,GAAAD,EAAA9wH,OAAAgxH,EAAA,CAEArwD,EAAAmK,kBAAAgmD,GAEA,MAAAK,EAAAxhF,EAAAklE,OAAAmc,EAAAF,GAKA,OAFAnwD,EAAAngB,aAAAuwE,EAAAI,IAEA,EAGA,SAqBA,SAAAb,GAAA1tH,GACA,OAAAA,EAAA2+B,GAAA,MAAA3+B,EAAA2+B,GAAA,QAMA,SAAAgvF,GAAA3tH,GACA,OAAAA,EAAA2+B,GAAA,OAAA3+B,EAAA2+B,GAAA,mBC/HqB6vF,WAAqBr8F,GAI1CjzB,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACA8vC,EAAA9vC,EAAA8vC,MACAC,EAAAD,EAAAC,OACA2nB,EAAA13D,EAAA03D,WAEA3nB,EAAA4lB,SAAA,SACAhY,WAAA,SACAzC,iBAAA,gCACAJ,SAAA,EACA7H,UAAA,IAGAlD,EAAA4lB,SAAA,YACAzY,QAAA,QACApC,SAAA,IAGA/K,EAAA4lB,SAAA,aACAzY,QAAA,WACAhC,iBAAA,qBACAJ,SAAA,IAIA/K,EAAAxwB,OAAA,UAA4B29B,QAAA,cAG5BnN,EAAAuvC,cAAA,CAAAvkC,EAAAshD,KACA,YAAAA,EAAArxH,MAAAiG,MAAAC,KAAA6pE,EAAAuC,YAAAzqB,SAAA,SACA,WAKAkd,EAAAuvC,cAAA,CAAAvkC,EAAAshD,KACA,GAAAprH,MAAAC,KAAA6pE,EAAAuC,YAAAzqB,SAAA,SAIA,eAAAwpE,EAAArxH,MAAA,SAAAqxH,EAAArxH,WAAA,IAMA0sF,EAAAjU,IAAA,UAAAlzE,IAAkC66G,MAElC1zB,EAAAjU,IAAA,mBAAAlzE,IAA2CkgH,IAAsBC,UAAA,KACjEh5B,EAAAjU,IAAA,gBAAAlzE,IAAwCkgH,MAGxC/4B,EAAAjU,IAAA,UAAAlzE,IAAkCuwE,IAAyBhR,MAAA,WAAA5xB,KAAA,QAE3Dw5C,EAAAjU,IAAA,mBAAAlzE,IAA2CihH,IAAoBd,UAAA,KAC/Dh5B,EAAAjU,IAAA,gBAAAlzE,IAAwCihH,MACxC95B,EAAAjU,IAAA,YAAAlzE,IdkLA28D,KAAAjvC,GAAA,mBAAAC,EAAAlxB,EAAAigE,KAEA/uC,EAAA7M,OACA,MAAAgjD,EAAApH,EAAAtyB,OACAgxB,EAAAsB,EAAAtB,OAGA+T,EADA/T,EAAAD,eAAA1+D,EAAAgR,UAAAg2B,wBAAAtoC,MAAA6T,KAAAgtB,GAAA,OACA4G,UACA+9E,EAAAxxC,EAAA3hE,OAGA81E,EAAAxf,EAAAuT,cAAAlI,GACA5yD,EAAAunD,EAAA72D,OAAAq2E,GAEA,UAAA/iE,KAAAujD,EAAAwB,cAAA/oD,GAAA8hD,WACAjD,EAAAmK,kBAAAhlD,GAIAogG,EAAAtiF,YAEAylC,EAAA72D,OAAA62D,EAAAuT,cAAAspC,MAEKr/F,SAAA,YctML6lE,EAAAjU,IAAA,UAAAlzE,IAAkC87G,GAAe,OACjD30B,EAAAjU,IAAA,UAAAlzE,IAAkC87G,GAAe,OAEjD30B,EAAAjU,IAAA,mBAAAlzE,IAA2CohH,IAAqBjB,UAAA,KAChEh5B,EAAAjU,IAAA,gBAAAlzE,IAAwCohH,MAGxCj6B,EAAA4kC,sBAAoCxsD,MAAA,UAAA5xB,KAAA,YACpCw5C,EAAA4kC,sBAAoCxsD,MAAA,UAAA5xB,KAAA,YAGpCw5C,EAAAjU,IAAA,mBAAAlzE,IAA2CiiH,IAAoC9B,UAAA,KAC/Eh5B,EAAAjU,IAAA,gBAAAlzE,IAAwCiiH,MACxC96B,EAAAjU,IAAA,mBAAAlzE,IAA2CshH,IAAiCnB,UAAA,KAC5Eh5B,EAAAjU,IAAA,gBAAAlzE,IAAwCshH,MAEtCsJ,GAAwBn7F,EAAA8vC,MAAA9vC,EAAAy3D,SAG1Bz3D,EAAA04C,SAAAnoE,IAAA,kBAA0CklH,GAAkBz1F,IAC5DA,EAAA04C,SAAAnoE,IAAA,0BAAkDulH,GAAgB91F,GAAW+1F,MAAA,WAC7E/1F,EAAA04C,SAAAnoE,IAAA,0BAAkDulH,GAAgB91F,GAAW+1F,MAAA,WAC7E/1F,EAAA04C,SAAAnoE,IAAA,4BAAoD2lH,GAAmBl2F,GAAW+1F,MAAA,UAClF/1F,EAAA04C,SAAAnoE,IAAA,6BAAqD2lH,GAAmBl2F,GAAW+1F,MAAA,WAEnF/1F,EAAA04C,SAAAnoE,IAAA,qBAA6C8nH,GAAgBr4F,IAC7DA,EAAA04C,SAAAnoE,IAAA,wBAAgDooH,GAAmB34F,IAEnEA,EAAA04C,SAAAnoE,IAAA,+BAAuD8lH,GAAgBr2F,GAAWwR,UAAA,gBAClFxR,EAAA04C,SAAAnoE,IAAA,iCAAyD8lH,GAAgBr2F,GAAWwR,UAAA,kBAEpFxR,EAAA04C,SAAAnoE,IAAA,0BAAkDkmH,GAAgBz2F,GAAWwR,UAAA,WAC7ExR,EAAA04C,SAAAnoE,IAAA,yBAAiDkmH,GAAgBz2F,GAAWwR,UAAA,UAC5ExR,EAAA04C,SAAAnoE,IAAA,yBAAiDkmH,GAAgBz2F,GAAWwR,UAAA,UAC5ExR,EAAA04C,SAAAnoE,IAAA,uBAA+CkmH,GAAgBz2F,GAAWwR,UAAA,QAE1ExR,EAAA04C,SAAAnoE,IAAA,2BAAmDkpH,GAAsBz5F,IACzEA,EAAA04C,SAAAnoE,IAAA,wBAAgDsoH,GAAmB74F,IAEjE65F,GAA0B/pD,GAC1BgrD,GAAgChrD,GAGlC1iE,KAAA4yB,OAAA23D,WAAAnjF,IAAA,UAAAge,IAAAplB,KAAAmvH,6BAAA/pG,IAAgGX,SAAA,QAChGzkB,KAAA4yB,OAAA23D,WAAAnjF,IAAA,MAAApH,KAAAovH,gBAAA,IAAmE3qG,SAAA,QACnEzkB,KAAA4yB,OAAA23D,WAAAnjF,IAAA,YAAApH,KAAAovH,gBAAA,IAA0E3qG,SAAA,QAM1E0lD,sBACA,OAAWw8C,IAWXjnH,0BAAA2vH,EAAA59D,GACA,MAAA7+B,EAAA5yB,KAAA4yB,OACA+Q,EAAA/Q,EAAA8vC,MAAA9hE,SAAA+iC,UAEA,IAAAA,EAAAgD,aAAA,IAAAhD,EAAAoF,YAAApF,EAAAyF,gBAAA7L,OAAA,CACA,MAAAwlF,EAAAp/E,EAAAwH,qBAEA,IAAA43E,MAAA5jF,GAAA,SACA,OAGAsyB,IAEA7+B,EAAA8vC,MAAA7J,OAAAtrB,IACAA,EAAAkI,aAAAlI,EAAAk7B,cAAAs6C,EAAA5kF,SAAA,GAAAA,SAAA,QAYAz+B,eAAA+lF,GACA,MAAA7yD,EAAA5yB,KAAA4yB,OAEA,OAAAy8F,EAAA59D,KACA,MAIAssD,EAAqBr/D,GAAY,YAJjC9rB,EAAA8vC,MAAA9hE,SAAA+iC,UAEAsH,oBAIA,IAAA8yE,EACA,OAGAtsD,IAEA,MAAA4yD,EAAAtG,EAAAptG,OACAouG,EAAAsF,EAAA1zG,OAEA2+G,EAAAvQ,EAAA7gF,cAAAmmF,GACAkL,EAAAlL,EAAAnmF,cAAA6/E,GAEAyR,EAAA,IAAAD,EAEA,IAAA9pC,GAAA+pC,GAAA,IAAAF,EAEA,OAGA,MAAAG,EAAAF,IAAAlL,EAAA7iF,WAAA,EACAkuF,EAAAJ,IAAAvQ,EAAAv9E,WAAA,EAMA,IAAAmuF,EAGA,GAPAlqC,GAAAiqC,GAAAD,GACA78F,EAAAw2C,QAAAlrE,IAAwByoH,IAAUkC,WAAA9J,GAAuB+H,GAAA/H,EAAAv9E,aAMzDikD,GAAAgqC,EAAA,CACA,MAAAG,EAAA7Q,EAAA5gF,SAAAmxF,EAAA,GAEAK,EAAAC,EAAAzxF,SAAA,QAGA,IAAAsnD,GAAA+pC,EAAA,CACA,MAAAK,EAAA9Q,EAAA5gF,SAAAmxF,EAAA,GAEAK,EAAAE,EAAA1xF,SAAA0xF,EAAAruF,WAAA,QAIAmuF,EAAAtL,EAAAlmF,SAAAoxF,GAAA9pC,EAAA,OAGA7yD,EAAA8vC,MAAA7J,OAAAtrB,IACAA,EAAAkI,aAAAlI,EAAAk7B,cAAAknD,qBCxOqBG,WAAwBh/B,GAI7CpxF,YAAAyqF,GACApqF,MAAAoqF,GAEA,MAAAtrF,EAAAmB,KAAAmxF,aAQAnxF,KAAAoiC,MAAApiC,KAAAixF,mBAQAjxF,KAAAoH,IAAA,UAQApH,KAAAoH,IAAA,aAQApH,KAAAnB,KAAA,SACAuoB,GAAApnB,KAAA,UAAAA,KAAA,QAAA4mH,EAAA1I,OAA+DA,OAAY0I,KAE3E5mH,KAAAuzF,aACAjrE,IAAA,MACAxhB,YACA0sF,OAAA,OAGA30E,WAEAyJ,IAAA,MACAxhB,YACA0sF,OAAA,mCAEA30E,SAAA7e,KAAAoiC,QAGA9Z,IAAA,MACAxhB,YACA0sF,OAAA,oCAEA30E,WAEArG,KAAA3Z,EAAAuoB,GAAA,aAMAyJ,IACAmnE,UAAAn5F,EAAAuoB,GAAA0J,IACAA,EAAA3O,mBAGAkrF,MAAAxuG,EAAAuoB,GAAA,KACApnB,KAAA4nB,KAAA,gBAMA,QAAAhmB,EAAA,EAAsBA,EAAA,IAAaA,IAAA,CACnC,MAAAmuH,EAAA,IAAuBC,GAGvBD,EAAAl/F,GAAA,YAEA,MAAAmuF,EAAA1oG,KAAA+N,MAAAziB,EAAA,IACA49G,EAAA59G,EAAA,GAGA5B,KAAAoH,IAAA,OAAA43G,EAAA,GACAh/G,KAAAoH,IAAA,UAAAo4G,EAAA,KAGAx/G,KAAAoiC,MAAAj/B,IAAA4sH,GAGA/vH,KAAA6wB,GAAA,sBACA7wB,KAAAiwH,wBAGAjwH,KAAA6wB,GAAA,mBACA7wB,KAAAiwH,wBAOAvwH,SAQAA,aAUAA,sBACA,MAAAw+G,EAAAl+G,KAAAk+G,KACA0I,EAAA5mH,KAAA4mH,QAEA5mH,KAAAoiC,MAAAr0B,IAAA,CAAAgiH,EAAAnuH,KAEA,MAIAs1G,EAJA5gG,KAAA+N,MAAAziB,EAAA,IAIAs8G,GAHAt8G,EAAA,GAGAglH,EAEAmJ,EAAA3oH,IAAA,OAAA8vG,YAYM8Y,WAA6Bl/B,GAInCpxF,YAAAyqF,GACApqF,MAAAoqF,GAEA,MAAAtrF,EAAAmB,KAAAmxF,aAQAnxF,KAAAoH,IAAA,WAEApH,KAAAuzF,aACAjrE,IAAA,MACAxhB,YACA0sF,OACA,oCACA30F,EAAAyuF,GAAA,kBAGAz8D,IACAq/F,UAAArxH,EAAAuoB,GAAA,sGCxKqB+oG,WAAgBx9F,GAIrCjzB,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAr0B,EAAAyB,KAAA4yB,OAAAr0B,EACAq0B,EAAAujE,GAAAuC,iBAAAv1F,IAAA,cAAAgnF,IACA,MAAA/e,EAAAx4C,EAAA04C,SAAAptE,IAAA,eACAy3G,EAAiCF,GAActrB,GAC/CwrB,EAAA92G,KAAA,aAAAuoB,GAAAgkD,GAEAuqC,EAAAtD,WAAAjrG,KACAkmG,KAAsB8iB,GAAAxwG,EACtBuqB,MAAA5rC,EAAA,KACAgvG,SAAA,IAGA,MAAA8iB,EAAA,IAAwCP,GAAe3lC,GAevD,OAdAwrB,EAAA5B,UAAAl1F,SAAA1b,IAAAktH,GACAA,EAAArlF,SAAA,WAAA5jB,GAAAuuF,GACAA,EAAAtD,WAAAxhF,GAAA,YAEAw/F,EAAAnS,KAAA,EACAmS,EAAAzJ,QAAA,IAEAjR,EAAA9kF,GAAA,eACA+B,EAAAy4C,QAAA,eACA6yC,KAAAmS,EAAAnS,KACA0I,QAAAyJ,EAAAzJ,UAEAh0F,EAAAy3D,QAAAv5C,KAAAhI,UAEA6sE,IAEA/iF,EAAAujE,GAAAuC,iBAAAv1F,IAAA,cAAAgnF,IACA,MAAA3iF,IAEAjF,KAAA,eACAmgE,OACAyI,YAAA,uBACAhhC,MAAA5rC,EAAA,KACA+xH,UAAA,KAGiB/tH,KAAA,cAEjBA,KAAA,SACAmgE,OACAyI,YAAA,wBACAhhC,MAAA5rC,EAAA,QAIAgE,KAAA,SACAmgE,OACAyI,YAAA,yBACAhhC,MAAA5rC,EAAA,QAIAgE,KAAA,SACAmgE,OACAyI,YAAA,oBACAhhC,MAAA5rC,EAAA,QAIA,OAAAyB,KAAAuwH,iBAAAhyH,EAAA,KAAiDiyH,GAAA5wG,EAAepY,EAAA2iF,KAEhEv3D,EAAAujE,GAAAuC,iBAAAv1F,IAAA,WAAAgnF,IACA,MAAA3iF,IAEAjF,KAAA,eACAmgE,OACAyI,YAAA,oBACAhhC,MAAA5rC,EAAA,KACA+xH,UAAA,KAGiB/tH,KAAA,cAEjBA,KAAA,SACAmgE,OACAyI,YAAA,sBACAhhC,MAAA5rC,EAAA,QAIAgE,KAAA,SACAmgE,OACAyI,YAAA,sBACAhhC,MAAA5rC,EAAA,QAIAgE,KAAA,SACAmgE,OACAyI,YAAA,iBACAhhC,MAAA5rC,EAAA,QAIA,OAAAyB,KAAAuwH,iBAAAhyH,EAAA,KAAiDkyH,GAAA7wG,EAAYpY,EAAA2iF,KAE7Dv3D,EAAAujE,GAAAuC,iBAAAv1F,IAAA,kBAAAgnF,IACA,MAAA3iF,IAEAjF,KAAA,SACAmgE,OACAyI,YAAA,mBACAhhC,MAAA5rC,EAAA,QAIAgE,KAAA,SACAmgE,OACAyI,YAAA,sBACAhhC,MAAA5rC,EAAA,QAIAgE,KAAA,SACAmgE,OACAyI,YAAA,qBACAhhC,MAAA5rC,EAAA,QAIAgE,KAAA,SACAmgE,OACAyI,YAAA,qBACAhhC,MAAA5rC,EAAA,QAGiBgE,KAAA,cAEjBA,KAAA,SACAmgE,OACAyI,YAAA,2BACAhhC,MAAA5rC,EAAA,QAIAgE,KAAA,SACAmgE,OACAyI,YAAA,6BACAhhC,MAAA5rC,EAAA,QAIA,OAAAyB,KAAAuwH,iBAAAhyH,EAAA,KAAiDmyH,GAAA9wG,EAAkBpY,EAAA2iF,KAanEzqF,iBAAAyqC,EAAAmjE,EAAA9lG,EAAA2iF,GACA,MAAAv3D,EAAA5yB,KAAA4yB,OACA+iF,EAA6BF,GAActrB,GAC3C7e,KAEAurC,EAAA,IAAoCvrE,GACpC,UAAAkoE,KAAAhsG,EACAmpH,GAAAnd,EAAA5gF,EAAA04C,EAAAurC,GAiBA,OAfQb,GAAiBL,EAAAkB,GAEzBlB,EAAAtD,WAAAjrG,KACA+iC,QACAmjE,OACAC,SAAA,IAGAoI,EAAA92G,KAAA,aAAAixB,OAAAw7C,EAAA,gBAAA6rC,IACAA,EAAA9iE,KAAAiU,OAEAtoD,KAAAmlB,SAAAwwF,EAAA,UAAA7kF,IACA8B,EAAAy4C,QAAAv6C,EAAAhgB,OAAAq6D,aACAv4C,EAAAy3D,QAAAv5C,KAAAhI,UAEA6sE,GAUA,SAAAgb,GAAAnd,EAAA5gF,EAAA04C,EAAAurC,GACA,MAAAn0C,EAAA8wC,EAAA9wC,MAAA,IAAqCixC,GAAKH,EAAA9wC,QAC1CyI,YAAWA,EAAAmlD,YAAsB9c,EAAA9wC,MACjC,iBAAA8wC,EAAAjxG,KAAA,CACA,MAAA6oE,EAAAx4C,EAAA04C,SAAAptE,IAAAitE,GACAG,EAAA5pE,KAAA0pE,GACA1I,EAAAt7D,KAAmB+jE,gBACnBzI,EAAA7jE,KAAA,aAAAuoB,GAAAgkD,GACAklD,GACA5tD,EAAA7jE,KAAA,QAAAuoB,GAAAgkD,EAAA,SAGA1I,EAAAt7D,KAAe4vG,UAAA,IACfH,EAAA1zG,IAAAqwG,SC/NqBod,WAAsB/hE,GAC3CnvD,YAAAoxC,GACA/wC,MAAA+wC,GAEA9wC,KAAA8uD,aAAA,YAGApvD,WAAAivD,GACA3uD,KAAA4nB,KAAA+mC,EAAApsD,KAAAosD,WCXA,MAAAkiE,GAA+B1gF,GAAc,gBAiBxB2gF,WAAen+F,GAIpCw2C,wBACA,eAMAzpE,OACA,MAAAoxC,EAAA9wC,KAAA4yB,OAAAy3D,QAAAv5C,KACAgoD,EAAAhoD,EAAAlwC,SAQAZ,KAAA+wH,oBAAA,IAAA/tH,IAIAhD,KAAA4yB,OAAAy3D,QAAApiB,mBAAAp3C,GAAA,aAAAC,EAAAlxB,EAAAigE,KAEA7/D,KAAAgxH,gCAAAnxD,EAAAtyB,QAEA,MAAA05B,EAAApH,EAAAtyB,OACAiI,EAAAyxB,EAAArmE,SAAA+iC,UACAo/E,EAAAvtE,EAAArK,qBACA,IAAA8lF,EAAA,KAEA,UAAApoF,KAAA2M,EAAA7L,YACA,UAAArrC,KAAAuqC,EAAA,CACA,MAAAvnC,EAAAhD,EAAA6T,KAGU4vG,GAAQzgH,KAAA4vH,GAAA5vH,EAAA2vH,KAClBhqD,EAAAtvB,SAA2BmqE,GAA0BxgH,GAErDtB,KAAA+wH,oBAAA5tH,IAAA7B,GACA2vH,EAAA3vH,EAGAA,GAAAyhH,GACA97C,EAAAxxB,aAAAD,EAAA7L,aAA4DO,MAAA,EAAAC,MAAoBw4E,GAAQI,SAKlFt+F,SAAA,QAGNqsB,EAAAunB,YAAoBu4D,IACpB5wH,KAAAmlB,SAAA2zE,EAAA,gBAAA1zE,IAAAplB,KAAAmxH,gBAAA/rG,IAGAplB,KAAAmlB,SAAA2zE,EAAA,cAAA1zE,IAAAplB,KAAAoxH,cAAAhsG,IAAsFX,SAAA,SAGtFzkB,KAAAmlB,SAAA2zE,EAAA,UAAAhoE,EAAAlxB,KACAI,KAAAqxH,cAAA,WAAAzxH,EAAAwkC,aACAxkC,EAAAuiB,iBACA2O,EAAA7M,UAEMQ,SAAA,SAUN/kB,aAAAinB,EAAA0oG,GACA,MAAAz8F,EAAA5yB,KAAA4yB,OACAke,EAAAle,EAAAy3D,QAAAv5C,KACAgoD,EAAAhoD,EAAAlwC,SACA,IAAAJ,EAAA6uH,EAAAjkH,OAGA,GA0SA,SAAA5K,GACA,KAAAA,GAAA,CACA,GAAAA,KAAA2+B,GAAA,qBAAA3+B,EAAA2+B,GAAA,eACA,SAGA3+B,IAAAmQ,OAGA,SAnTA2gH,CAAA9wH,GACA,OAIA,IAAQuhH,GAAQvhH,MAChBA,IAAAk+C,aAAmCqjE,KAGnC,OAIAsN,EAAAltG,iBAGA22E,EAAAp1D,WACAoN,EAAAhI,QAIA,MAAAm1B,EAAArrC,EAAAy3D,QAAA9rB,OAAAL,eAAA19D,GAEAR,KAAAuxH,yBAAAtzD,GAUAv+D,WAAAinB,EAAA0oG,GACA,MAAAt/E,EAAAs/E,EAAAt/E,QACA01C,EAAA11C,GAA+BhB,GAAQt/B,QAAAsgC,GAAsBhB,GAAQI,WAAAY,GAAyBhB,GAAQG,WACtG,IAAAsiF,GAAA,GAmPA,SAAAzhF,GACA,OAAAA,GAAmBhB,GAAQG,YAC3Ba,GAAahB,GAAQC,WACrBe,GAAahB,GAAQE,SACrBc,GAAahB,GAAQI,UAnPrBsiF,CAAA1hF,IA0PA,SAAAs/E,GACA,OAAQv/E,GAAOu/E,IAAAwB,GAzPZa,CAAArC,GAEAt/E,IAAuBhB,GAAQM,QAClCmiF,EAAAxxH,KAAA2xH,gBAAAtC,EAAAn/E,WAFAshF,EAAAxxH,KAAA4xH,mCAAA5xH,KAAA6xH,oBAFAL,EAAAxxH,KAAA8xH,iBAAArsC,GAOA+rC,IACAnC,EAAAltG,iBACAwE,EAAA1C,QAWAvkB,cAAA+lF,GAEA,GAAAzlF,KAAA4yB,OAAAigC,WACA,OAGA,MACAuV,EADApoE,KAAA4yB,OAAA8vC,MAAA9hE,SACA+iC,UAGA,IAAAykC,EAAAzhC,YACA,OAGA,MAAAorF,EAAA/xH,KAAAgyH,iCAAAvsC,GAEA,OAAAssC,GACA/xH,KAAA4yB,OAAA8vC,MAAA7J,OAAAtrB,IACA,IAAA0kF,EAAA7pD,EAAAx/B,OAAAj4B,OAGA,KAAAshH,EAAAxwF,SAAA,CACA,MAAAywF,EAAAD,EACAA,EAAAC,EAAAvhH,OAEA48B,EAAAn9B,OAAA8hH,GAGAlyH,KAAAuxH,yBAAAQ,MAGA,QAfA,EA0BAryH,iBAAA+lF,GACA,MAAA/iB,EAAA1iE,KAAA4yB,OAAA8vC,MACAC,EAAAD,EAAAC,OAEAyF,EADA1F,EAAA9hE,SACA+iC,UACAouF,EAAA3pD,EAAAj9B,qBAGA,GAAA4mF,GAAApvD,EAAAkD,SAAAksD,GAAA,CACA,MAAAnhH,EAAA60E,EAAArd,EAAAl9B,kBAAAk9B,EAAAn9B,mBACA2K,EAAA+sB,EAAAsD,yBAAAr1D,EAAA60E,EAAA,sBAQA,OANA7vC,GACA8sB,EAAA7J,OAAAtrB,IACAA,EAAAkI,aAAAG,MAIA,EAKA,IAAAwyB,EAAAzhC,YACA,OAGA,MAAAwrF,EAAAnyH,KAAAgyH,iCAAAvsC,GAEA,OAAA0sC,GAAAxvD,EAAAkD,SAAAssD,IACAnyH,KAAAuxH,yBAAAY,IAEA,QAHA,EAkBAzyH,gBAAA0yH,GACA,MAAA1vD,EAAA1iE,KAAA4yB,OAAA8vC,MAEAqvD,EADArvD,EAAA9hE,SAAA+iC,UACAwH,qBAEA,GAAA4mF,GAAArvD,EAAAC,OAAAkD,SAAAksD,GAQA,OAPArvD,EAAA7J,OAAAtrB,IACA,MAAAw2C,EAAAx2C,EAAAhqC,cAAA,aAEAgqC,EAAAt9B,OAAA8zE,EAAAguC,EAAAK,EAAA,kBACA7kF,EAAAkI,aAAAsuC,EAAA,SAGA,EAYArkF,kCACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACA2vD,EAAA3vD,EAAA9hE,SAAA+iC,UACAi3C,EAAAlY,EAAAC,OAAAyhB,gBAAAiuC,GAEA,OAAAA,EAAAjpF,gBAAAzsC,MAAAi+E,IAIAlY,EAAA7J,OAAAtrB,IACAA,EAAAkI,aAAAlI,EAAAk7B,cAAAmS,OAGA,GASAl7E,oBACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACA2nB,EAAArqF,KAAA4yB,OAAAy3D,QAKA04B,EAJA14B,EAAAv5C,KACAlwC,SACA+iC,UAEAwH,qBAIA,GAAA43E,GAA0BhB,GAAQgB,GAAA,CAClC,MAAAuP,EAAAjoC,EAAA9rB,OAAAL,eAAA6kD,EAAApyG,QAMA,OAJA+xD,EAAA7J,OAAAtrB,IACAA,EAAAkI,aAAAlI,EAAAk7B,cAAA6pD,OAGA,EAGA,SASA5yH,yBAAAc,GACAR,KAAA4yB,OAAA8vC,MAAA7J,OAAAtrB,IACAA,EAAAkI,aAAAlI,EAAAitC,cAAAh6E,MAaAd,iCAAAmvE,GACA,MAAAnM,EAAA1iE,KAAA4yB,OAAA8vC,MACAC,EAAAD,EAAAC,OACAyF,EAAA1F,EAAA9hE,SAAA+iC,UAIA4uF,EAAA7vD,EAAA+X,gBAAArS,GACA1F,EAAA8iB,gBAAA+sC,GAAiCnuF,UAAAyqC,EAAA,uBACjC,MAAAkjD,EAAAljD,EAAA0jD,EAAAzpF,MAAA9C,WAAAusF,EAAAzpF,MAAA/C,UAEA,OAAAgsF,GAAApvD,EAAAkD,SAAAksD,GACAA,EAGA,KASAryH,gCAAA6tC,GACA,UAAAilF,KAAAxyH,KAAA+wH,oBACAxjF,EAAAsK,YAAuBiqE,GAA0B0Q,GAGjDxyH,KAAA+wH,oBAAAt3G,SA4CA,SAAAy3G,GAAA1wH,EAAAmQ,GACA,QAAAA,GAIA9M,MAAAC,KAAAtD,EAAAg+B,gBAAAinB,SAAA90C,gBC7YqB8hH,WAAgC9/F,GAIrDw3C,sBACA,OAAW6rB,IAMX7sB,wBACA,gCAMAzpE,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACA2mE,EAAA3mE,EAAAw2C,QAAAlrE,IAAA,kBAGAq7F,GACAv5F,KAAAmlB,SAAAo0E,EAAA,OAAAzoE,KA2KA,SAAA6S,GACA,MAAAoS,EAAApS,EAAAwH,qBAEA,SAAA4K,IAA2BgsE,GAAQhsE,KA7KnC28E,CAAA9/F,EAAAy3D,QAAAv5C,KAAAlwC,SAAA+iC,YACA7S,EAAA7M,SAEOQ,SAAA,SASPzkB,KAAA2yH,UAAA,IAAAlsH,IAKAzG,KAAAs4F,SAAAt4F,KAAA4yB,OAAAw2C,QAAAlrE,IAAA,qBAEA8B,KAAAmlB,SAAAyN,EAAAujE,GAAA,cACAn2F,KAAA4yH,8BAIA5yH,KAAAmlB,SAAAyN,EAAAujE,GAAAC,aAAA,wBACAp2F,KAAA4yH,8BACMnuG,SAAA,QAiBN/kB,SAAAmzH,GAAAzwF,MAAuBA,EAAA0wF,cAAAp8B,mBAAA,yBACvB,MAAA9jE,EAAA5yB,KAAA4yB,OACAwlE,EAAA,IAA0BR,GAE1B,GAAA53F,KAAA2yH,UAAAlxH,IAAAoxH,GAOA,UAAatjG,EAAA,EAAa,2EAA8EsjG,cAGxGz6B,EAAAO,eAAAv2D,EAAAxP,EAAAujE,GAAAuC,kBAEA14F,KAAA2yH,UAAAvrH,IAAAyrH,GACA/hF,KAAAsnD,EACA06B,cACAp8B,qBASAh3F,4BACA,UAAAm6F,KAAA75F,KAAA2yH,UAAAlmH,SACAzM,KAAA4yB,OAAAujE,GAAAC,aAAA1yD,WAAAm2D,EAAAi5B,YAAA9yH,KAAA4yB,OAAAy3D,QAAAv5C,KAAAlwC,SAAA+iC,WAGA3jC,KAAA+yH,aAAAl5B,GAFA75F,KAAAgzH,aAAAn5B,GAaAn6F,aAAAm6F,GACA75F,KAAAizH,kBAAAp5B,IAIA75F,KAAAs4F,SAAAloF,OAAAypF,EAAA/oD,MAaApxC,aAAAm6F,GACA75F,KAAAizH,kBAAAp5B,GAoBA,SAAAjnE,GACA,MAAAsgG,EAAAtgG,EAAAw2C,QAAAlrE,IAAA,qBACA0S,EAAAuiH,GAAAvgG,GAEAsgG,EAAAt6B,eAAAhoF,GAvBAwiH,CAAApzH,KAAA4yB,QACG5yB,KAAAs4F,SAAAhC,QAAAuD,EAAA/oD,OACH9wC,KAAAs4F,SAAAn1F,KACA2tC,KAAA+oD,EAAA/oD,KACAlgC,SAAAuiH,GAAAnzH,KAAA4yB,QACA8jE,iBAAAmD,EAAAnD,mBASAh3F,kBAAAm6F,GACA,OAAA75F,KAAAs4F,SAAAjC,aAAAwD,EAAA/oD,MAWA,SAAAqiF,GAAAvgG,GACA,MAAAygG,EAAAzgG,EAAAy3D,QAAAv5C,KACA6iD,EAA0BL,GAAgBK,iBAC1C6+B,EAeA,SAAA7uF,GACA,MAAAo/E,EAAAp/E,EAAAwH,qBAEA,GAAA43E,GAAyBhB,GAAQgB,GACjC,OAAAA,EAIA,IAAApyG,EADAgzB,EAAAsH,mBACAt6B,OAEA,KAAAA,GAAA,CACA,GAAAA,EAAAwuB,GAAA,YAAiC4iF,GAAQpxG,GACzC,OAAAA,EAGAA,YA9BA2iH,CAAAD,EAAAzyH,SAAA+iC,WAEA,OACAv4B,OAAAioH,EAAAtiF,aAAAgO,UAAAyzE,GACAhhC,WACAmC,EAAAK,gBACAL,EAAAM,oBACAN,EAAAO,oBACAP,EAAAE,gBACAF,EAAAG,oBACAH,EAAAI,4BC1Mew/B,GAOf7zH,YAAA4B,EAAAqP,EAAA,MACA3Q,KAAAwzH,MAAAlyH,EACAtB,KAAAyzH,QAAA9iH,EACA3Q,KAAAihC,aACAjhC,KAAA0zH,OAAApyH,EAAA2V,aAAA,YACAjX,KAAA2zH,MAAAryH,EAAA2V,aAAA,2BAEAtG,GACAA,EAAAijH,SAAA5zH,MAKAA,KAAA6zH,YAAAhwH,MAAAC,KAAAxC,EAAAwF,YACA8O,OAAA3O,MAAArJ,KAAAmmE,WAAA,QACAnuD,OAAA3O,GAAA,UAAAA,EAAArJ,MACAmQ,IAAA9G,KAAoBvH,CAAAuH,EAAArJ,MAAAqJ,EAAA3I,SACpBoO,OAAA,CAAAC,EAAAutE,IAAAn8E,OAAAiR,OAAArC,EAAAutE,OAIAl6E,KAAA8zH,eAAAjwH,MAAAC,KAAAxC,EAAAwF,YACA8O,OAAA3O,KAAArJ,KAAAmmE,WAAA,QACAh2D,IAAA9G,KAAoBvH,CAAAuH,EAAArJ,KAAA2e,OAAA,IAAAtV,EAAA3I,SACpBoO,OAAA,CAAAC,EAAAutE,IAAAn8E,OAAAiR,OAAArC,EAAAutE,OAGA,MAAAt4E,EAAAN,EAAAQ,WACA+B,MAAA5E,UAAAqU,QAAA9V,KAAA8D,EAAAQ,WAAAgU,WAAAxU,GACA,GAGA1D,EAAA0D,EAAA2V,aAAA,oBAAyDrV,IAGzD5B,KAAAgkC,MAAArzB,KACMA,EAAA/S,SAAkBA,WACdA,IAEV,MAAAm2H,EAAAzyH,EAAA2V,aAAA,SACAjX,KAAAmhC,SAAA4yF,IAAA78G,MAAA,KAAA4qB,UAGA9hC,KAAAg0H,aAAAh0H,KAAA8zH,eAAAG,YACAj0H,KAAA8zH,eAAAG,YAAA/8G,MAAA,QAGAlX,KAAAk0H,UAAAl0H,KAAA8zH,eAAA3/D,SACAn0D,KAAA8zH,eAAA3/D,SAAAj9C,MAAA,KAAAnJ,IAAA+F,SAWApU,SAAAgkB,GACA1jB,KAAAihC,UAAAv/B,KAAAgiB,GAWAhkB,QAAAq2C,GACA,OAAAA,GAIA/1C,KAAAggC,QAAA1wB,KAAA,OAAAzL,MAAAC,KAAAiyC,EAAAvV,iBAAAsB,OAAAxyB,KAAA,QAIAtP,KAAA2Q,QAAA,uBAAAolC,EAAAplC,OAAA/S,MACA,6BAAAm4C,EAAAplC,OAAA/S,MAAAoC,KAAA2Q,OAAAu/E,QAAAn6C,EAAAplC,SAQAw5B,YACA,OAAAnqC,KAAA0zH,OAQApmB,WACA,OAAAttG,KAAA2zH,MAQAn7G,WACA,OAAAxY,KAAAwzH,MAAA/vH,YAQAu8B,cACA,OAAAhgC,KAAAmhC,SAOAz2B,cACA,OAAA1K,KAAAwzH,MAAA9oH,QAQAypH,qBACA,OAAAn0H,KAAAyzH,QAQAlxH,WACA,OAAAvC,KAAA8zH,eAAAvxH,MAAA,UAQAoO,aACA,OAAA3Q,KAAAyzH,QAQA50G,eACA,OAAA7e,KAAAihC,UAQArjC,WACA,OAAAoC,KAAAgkC,MAQAjQ,oBACA,OAAA/zB,KAAA8zH,eAQAhtH,iBACA,OAAA9G,KAAA6zH,YAQAI,kBACA,OAAAj0H,KAAAg0H,aAQA7/D,eACA,OAAAn0D,KAAAk0H,iBClNqBE,WAA8Bx2B,GAInDl+F,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACA/+B,EAAA++B,EAAA9hE,SAAA+iC,UAEA3jC,KAAAsoD,YA8BA,SAAA3kB,EAAA++B,GAGA,IAAA/xD,EAFkBmyG,GAA4Bn/E,EAAA++B,GAE9C/xD,OAEAA,EAAAwuB,GAAA,WACAxuB,YAGA,OAAAA,EAvCA0jH,CAAA1wF,EAAA++B,GAMAhjE,QAAA8H,GACA,MAAAorB,EAAA5yB,KAAA4yB,OACAA,EAAA8vC,MAAA7J,OAAAtrB,IACA,MAAAm1B,EAAA9vC,EAAA8vC,MACAlhB,EAAAkhB,EAAA9hE,SACA0zH,EAAA/mF,EAAAhqC,cAAAiE,EAAAlJ,OAEAi2H,EAA6BzR,GAA4BthE,EAAA7d,UAAA++B,GACzDA,EAAAomB,cAAAwrC,EAAAC,GAEAD,EAAA3jH,QACA48B,EAAAkI,aAAA6+E,EAAA,SClBO,SAAAE,GAAA5hG,EAAA0zC,GACP,OAAA1zC,EAAAw2C,QAAAlrE,IAAA,mBAAAs2H,wBAAAluD,GA8BO,SAAAmuD,GAAAH,EAAAr2D,GACP,OAAAlgE,OAAAgW,KAAAugH,EAAAxtH,YACA8O,OAAA3O,KAAAg3D,EAAAhnD,aAAAhQ,IACA8G,IAAA9G,KAAmBvH,CAAAuH,GAAAg3D,EAAAhnD,aAAAhQ,MACnBwgB,SAAc+rE,MAAA8gC,EAAAt0F,QAAA1wB,KAAA,QACd5C,OAAA,CAAAC,EAAAutE,IAAAn8E,OAAAiR,OAAArC,EAAAutE,OAWO,SAAAw6C,GAAAJ,EAAAv+E,GACP,OAAAh4C,OAAAgW,KAAAugH,EAAAxtH,YACAiH,IAAAnP,KAAkBc,CAAAd,GAAAm3C,EAAA9+B,aAAArY,MAClBgX,OAAAskE,QAAAv4E,IAAA5D,OAAA0O,OAAAytE,GAAA,IACAxtE,OAAA,CAAAC,EAAAutE,IAAAn8E,OAAAiR,OAAArC,EAAAutE,OCtDO,SAAAy6C,GAAAL,EAAAniH,EAAAo7B,GACP,IAAAk4B,GAAA,EAGA,MAAAmvD,EAAAN,EAAAz1G,SAAA9Q,IAAA2V,KAA8DhkB,CAAAgkB,EAAA9lB,OAAA,KAC9D8O,OAAA,CAAAC,EAAAutE,IAAAn8E,OAAAiR,OAAArC,EAAAutE,OAGA26C,EAAAP,EAAAz1G,SACA9Q,IAAA2V,KAAoBhkB,CAAAgkB,EAAA9lB,MAAA8lB,EAAAuwG,YAAAlmH,IAAAnQ,UAAuDA,QAC3E8O,OAAA,CAAAC,EAAAutE,IAAAn8E,OAAAiR,OAAArC,EAAAutE,OAGA,UAAAx2D,KAAAvR,EAAA8vB,cAAA,CAEA2yF,EAAA11H,eAAAwkB,EAAA9lB,QAAAg3H,EAAAlxG,EAAA9lB,QACAg3H,EAAAlxG,EAAA9lB,MAAA8lB,GAIA,MAAAoxG,EAAA,aACA,GAAApxG,EAAA9lB,MAAA8lB,EAAA9lB,KAAA2e,OAAAmH,EAAA9lB,KAAAwE,OAAA0yH,EAAA1yH,UAAA0yH,EAAA,CACA,MAAAl3H,EAAA8lB,EAAA9lB,KAAA2e,OAAA,EAAAmH,EAAA9lB,KAAAwE,OAAA0yH,EAAA1yH,QACAwyH,EAAA11H,eAAAtB,KAAAg3H,EAAAh3H,KACAg3H,EAAAh3H,GAAA8lB,GAKA,UAAA9lB,KAAAG,OAAAgW,KAAA6gH,GACAC,EAAAj3H,GAAA6nD,SAAA/hC,EAAA9lB,QACAg3H,EAAAh3H,GAAA8lB,GAMA,UAAA9lB,KAAAG,OAAAgW,KAAA6gH,GACA,GAAAA,EAAAh3H,GACA2vC,EAAAt9B,OAAA2kH,EAAAh3H,GAAAuU,EAAA,WAEA,CACA,MAAA2B,EAAAy5B,EAAAhqC,cAAA3F,GACA2vC,EAAAt9B,OAAA6D,EAAA3B,EAAA,OACAszD,GAAA,EAIA,OAAAA,QCvDqBsvD,WAA4Bn3B,GAIjDl+F,YAAAkzB,GACA7yB,MAAA6yB,GACA5yB,KAAAoH,IAAA,6BACApH,KAAAoH,IAAA,mBACApH,KAAAg1H,gBAAA,KAMAt1H,UACAM,KAAAi1H,iCACAj1H,KAAAsoD,YAAAtoD,KAAAg1H,gBACAh1H,KAAAk1H,aAAAl1H,KAAAsoD,UACAtoD,KAAAg1H,kBACAh1H,KAAAm1H,qBAAAn1H,KAAA4yB,OAAAlvB,UAAA0xH,eAAAp1H,KAAAg1H,gBAAAp3H,MAAAusC,OAOAkrF,qBACA,OAAAr1H,KAAAg1H,gBAUAt1H,aAAA40H,EAAAr2D,GACA,SAUAv+D,iCACA,MAAAkK,EAAA5J,KAAA4yB,OAAAlvB,UAAA4xH,4BAAA,CAAAC,EAAA/0H,IAAAR,KAAAw1H,aAAAD,EAAA/0H,IACAR,KAAAg1H,gBAAAprH,EAAApJ,QACAR,KAAAy1H,oBAAA7rH,EAAA2rH,YCjDqBG,WAA8BX,GAKnDr1H,aAAA40H,EAAAr2D,GACA,OAAAq2D,EAAAH,eAMAz0H,UACAM,KAAA4yB,OACA8vC,MAAA7J,OAAAtrB,IACA,MAAA/sC,EAAAR,KAAAq1H,eACA9nF,EAAAkI,aAAAj1C,EAAAgB,iBAAAhB,EAAA2S,YAAA,MACAo6B,EAAAn9B,OAAA5P,YCFqBm1H,WAAwBhjG,GAI7Cw3C,sBACA,OAAW2mD,IAMX3nD,wBACA,wBAMAzpE,YAAAkzB,GACA7yB,MAAA6yB,GACAA,EAAA0zC,OAAAvpE,OAAA,gBAOAiD,KAAA62F,aAQA72F,KAAA41H,YAQA51H,KAAA61H,eASAn2H,eAAA9B,GACA,OAAAoC,KAAA62F,UAAAj5F,GASA8B,gBAAAmiC,EAAA,MACA,OAAAA,EAAA9jC,OAAA0O,OAAAzM,KAAA62F,WAAAjhF,OAAAisB,GAAA9jC,OAAA0O,OAAAzM,KAAA62F,WASAn3F,kBAAA6C,GACA,OAAAxE,OAAA0O,OAAAzM,KAAA62F,WAAAjhF,OAAA9B,KAAAvR,UASA7C,4BAAAmiC,GACA,IAAArhC,EAAAR,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UAAAwH,sBAAAnrC,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UAAAiF,OAAAj4B,OACA,KAAAnQ,GAAA,CACA,MAAA+0H,EAAAv1H,KAAA4yB,OAAAlvB,UAAA0xH,eAAA50H,EAAA5C,MACA,GAAA23H,GAAA1zF,EAAA0zF,EAAA/0H,GACA,OAAYA,UAAA+0H,QAEZ/0H,IAAAmQ,OAEA,OAAUnQ,QAAA,KAAA+0H,KAAA,MAgBV71H,kBAAA6d,EAAA2H,GACA,UAAA3iB,KAAAgb,EACAvd,KAAA61H,YAAAtzH,KACAvC,KAAA61H,YAAAtzH,OAEAvC,KAAA61H,YAAAtzH,GAAAb,KAAAwjB,GAOAxlB,OACAM,KAAA4yB,OAAAlvB,UAAA1D,KAGAA,KAAA4yB,OAAA04C,SAAAnoE,IAAA,qBAAkDixH,GAAqBp0H,KAAA4yB,SAGvE5yB,KAAA4yB,OAAA04C,SAAAnoE,IAAA,qBAAkDuyH,GAAqB11H,KAAA4yB,SAEvE,MAAAlvB,EAAA1D,KAAA4yB,OAAA0zC,OAAApoE,IAAA,aAIAH,OAAAgW,KAAArQ,GAAA7B,QAAAjE,IAEA,MACA+R,GADA,IAAA07E,WACAK,gBAAAhoF,EAAA9F,GAAA0C,SAAA,YAAAg1D,gBACA3lD,EAAA1G,aAAA,UAAArL,GACA+R,EAAA1G,aAAA,WAAAvF,EAAA9F,GAAAusC,OACAx6B,EAAA1G,aAAA,UAAAvF,EAAA9F,GAAA0vG,MAAA,gBACAttG,KAAA81H,gBAAAnmH,KAIA3P,KAAA2mF,mBAAA,WAAyCguC,IAGzC30H,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+lF,kBAAAp5C,IACA,UAAA1Y,KAAA70B,KAAA4yB,OAAA8vC,MAAA9hE,SAAAm/D,OAAAG,aAEA,uBAAAza,SAAA5wB,EAAAtyB,MAAA,CACA,MAAA4P,EAAA,WAAA0iB,EAAAtyB,KAAAsyB,EAAAjkB,SAAAm1B,UAAAlR,EAAAjkB,SAAA4tB,eAAA/X,MACA,GAAAtU,GACAnS,KAAA+1H,gBAAA5jH,EAAAo7B,GACA,YAUAvtC,KAAA4yB,OAAA8vC,MAAAC,OAAAxwB,OAAA,SACA29B,QAAA/xE,OAAAgW,KAAA/T,KAAA62F,aAIA72F,KAAA4yB,OAAA03D,WAAAjU,IAAA,UAAAlzE,IJ5JO,SAAAyvB,EAAA0zC,GACP,OAAA1zC,EAAAw2C,QAAAlrE,IAAA,mBAAA83H,sBAAA1vD,GI2J8C0vD,CAAqBh2H,KAAA4yB,QACnErV,MAAAvd,KAAAi2H,cACAvzD,MAAA,CAAA4xD,EAAAv+E,EAAAmgF,IACAA,EAAA3yH,cACA+wH,EAAA12H,KACK82H,GAAiBJ,EAAAv+E,OAGdtxB,SAAA,QAGRzkB,KAAA4yB,OAAA03D,WAAAjU,IAAA,gBAAAlzE,IAAoDqxH,GAAuBx0H,KAAA4yB,QAC3ErV,MAAAvd,KAAAi2H,cACAnlF,KAAA,CAAAwjF,EAAAr2D,EAAAgJ,IACAA,EAAAW,uBACA0sD,EAAA5pH,QACK+pH,GAAkBH,EAAAr2D,OAGfx5C,SAAA,SAER,MAAA0xG,EAAAn2H,KAAA4yB,OAAAlvB,UAEA1D,KAAA4yB,OAAA03D,WAAAjU,IAAA,mBAAAlzE,IAAuDqxH,GAAuBx0H,KAAA4yB,QAC9ErV,OAAA,WACAuzB,KAAA,CAAAwjF,EAAAr2D,EAAAgJ,KACA,MAAAmvD,EAAAn4D,EAAAttD,QAAAwlH,EAAAf,eAAAn3D,EAAAttD,OAAA/S,MACAkW,EAAAmzD,EAAAW,uBAGAwuD,IAAA,8BAAA3wE,SAAA2wE,EAAA7zH,OACA07D,EAAA39B,aAAA,UAAA29B,EAAA39B,aAAA,WACA,oBAAAg0F,EAAA5pH,QACK+pH,GAAkBH,EAAAr2D,IAEvB,OAAAq2D,EAAA3jH,OAAAmD,EAAyCkuG,GAAQluG,EAAAmzD,OAEzCxiD,SAAA,SAGR/kB,gBAAAyS,EAAAo7B,GACA,MAAA+mF,EAAAt0H,KAAAo1H,eAAAjjH,EAAAvU,MACA,IAAA6nE,GAAA,EACA,GAAA6uD,GAAAt0H,KAAA61H,YAAA32H,eAAAo1H,EAAA/xH,MAAA,CACA,UAAA0E,KAAAlJ,OAAAgW,KAAAugH,EAAAxtH,YAAA,CACA,MAAAxI,EAAAg2H,EAAAxtH,WAAAG,GAEA3I,IAAA6T,EAAA8E,aAAAhQ,IACAsmC,EAAAtkC,aAAAhC,EAAA3I,EAAA6T,GAIA,UAAAkkH,KAAAr2H,KAAA61H,YAAAvB,EAAA/xH,MAAA,CACAkjE,KAAA4wD,EAAA/B,EAAAniH,EAAAo7B,GACA,UAAA7pB,KAAAvR,EAAA8vB,cACAjiC,KAAA+1H,gBAAAryG,EAAA6pB,IAIA,OAAAk4B,EAQAwwD,oBACA,cAAAjzH,IAAAjF,OAAA0O,OAAAzM,KAAA62F,WAAA9oF,IAAA+F,KAAAvR,QAWA7C,wBAAA4mE,GACA,OAAAxG,IACAA,EAAAjvC,GAAA,SAA4B21C,GAAa,CAAAvI,EAAAgJ,KACzC,MAAAqtD,EAAAt0H,KAAA62F,UAAA54B,EAAArgE,MACA,GAAA02H,GAAAhuD,EAAA/oD,MAAAkoC,SAAA6uE,EAAA/xH,MACA,OAAA+jE,EAAAx1B,KAAAwjF,EAAAr2D,EAAAgJ,OAcAvnE,sBAAA4mE,GACA,OAASoN,IACT5iC,KAAAiF,KAAA/1C,KAAAs2H,6BAAAvgF,EAAAuwB,EAAA/oD,SAA6F3f,MAAA,GAC7F8kE,MAAA,CAAA3sB,EAAAmgF,IAAA5vD,EAAA5D,MACA1iE,KAAAs2H,6BAAAvgF,EAAAuwB,EAAA/oD,OACAw4B,EACAmgF,KAKAx2H,6BAAAq2C,EAAAx4B,GACA,OAAAxf,OAAA0O,OAAAzM,KAAA62F,WAAAjhF,OAAA9B,GACAA,EAAAo8E,QAAAn6C,IACAx4B,EAAAkoC,SAAA3xC,EAAAvR,SAEA,wFAAAkjD,SAAA1P,EAAAn4C,OACA6oB,MASA/mB,gBAAAiQ,EAAAgB,EAAA,MACA,MAAAnQ,EAAA,IAAsB+yH,GAAW5jH,EAAAgB,GACjC3Q,KAAA62F,UAAAr2F,EAAA5C,MAAA4C,EACAR,KAAA41H,SAAAp1H,EAAA+B,MAAA/B,EAAA5C,KAGAoC,KAAA4yB,OAAA8vC,MAAAC,OAAA4lB,SAAA/nF,EAAA5C,MACAioE,UAAAl1D,EACAiyD,SAAA,EAEAkN,QAAAn/D,IAAA/S,KAAA,QAEAkwE,gBAAA/vE,OAAAgW,KAAAvT,EAAAsG,cAIAjD,MAAAC,KAAA6L,EAAAmG,YAAAF,OAAAtU,GAAA,IAAAA,EAAAY,UACA6L,IAAA2V,GAAA1jB,KAAA81H,gBAAApyG,EAAAljB,WClUqB+1H,WAAuB5jG,GAI5Cw3C,sBACA,OAAWwrD,IAMXxsD,wBACA,uBAMAzpE,YAAAkzB,GACA7yB,MAAA6yB,GACAA,EAAA0zC,OAAAvpE,OAAA,uBAMA2C,OAEA,IAAAM,KAAA4yB,OAAA0zC,OAAApoE,IAAA,kBACA,OAIA,MAAAs4H,EAAA,OAAAx2H,KAAA4yB,OAAA0zC,OAAApoE,IAAA,kBAGA8B,KAAA4yB,OAAA8vC,MAAAC,OAAAuvC,cAAA,CAAAvkC,EAAAF,KACA,GAAAE,EAAAwC,SAAA,UAAA1C,EAAA7vE,OAAA44H,EACA,WAKAx2H,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+lF,kBAAAp5C,GAAAvtC,KAAAy2H,sBAAAlpF,EAAAipF,IAEAx2H,KAAA4yB,OAAA/B,GAAA,iBACA7wB,KAAA4yB,OAAA8vC,MAAA+B,cAAA,cAAAl3B,GAAAvtC,KAAAy2H,sBAAAlpF,EAAAipF,MACM/xG,SAAA,WAaN/kB,sBAAAw2H,EAAAM,GACA,MAAA9zD,EAAA1iE,KAAA4yB,OAAA8vC,MAEA,UAAA3+B,KAAA2+B,EAAA9hE,SAAAmyG,eAAA,CACA,MAAAp2G,EAAA+lE,EAAA9hE,SAAA63D,QAAA10B,GAEA,kBAAApnC,EAAAonC,UAIApnC,EAAA8kC,QAEA,OADAy0F,EAAAQ,cAAAF,EAAA75H,IACA,UCnEqBg6H,WAAmBhkG,GAIxCw3C,sBACA,OAAWwrD,IAMXj2H,OAEAM,KAAA4yB,OAAAujE,GAAAuC,iBAAAv1F,IAAA,WAAAgnF,IACA,MAAA0sB,EAAA,IAA+BvrE,GAC/B5nC,EAAA1D,KAAA4yB,OAAA0zC,OAAApoE,IAAA,aAGA,UAAAoC,KAAAvC,OAAAgW,KAAArQ,GACAmzG,EAAA1zG,KACAZ,KAAA,SACAmgE,MAAA,IAAgBixC,IAChBxpE,MAAAzmC,EAAApD,GAAA6pC,MACA6sE,UAAA,EACA7rC,YAAA,iBACA8rC,aAAA,OAAA32G,MAKA,MAAAq1G,EAAwBF,GAActrB,GAmBtC,OAlBG6rB,GAAiBL,EAAAkB,GAEpBlB,EAAAtD,WAAAjrG,KACA+iC,MAAAnqC,KAAA4yB,OAAAr0B,EAAA,uBACA24G,MAAA,EACAF,UAAA,EACAzJ,QAAAvtG,KAAA4yB,OAAAr0B,EAAA,wBAIAo3G,EAAA92G,KAAA,aAAAuoB,GAAApnB,KAAA4yB,OAAA04C,SAAAptE,IAAA,+BAGA8B,KAAAmlB,SAAAwwF,EAAA,UAAA7kF,IACA9wB,KAAA4yB,OAAAy4C,QAAAv6C,EAAAhgB,OAAAq6D,aAAkD7sE,MAAAwyB,EAAAhgB,OAAAmmG,eAClDj3G,KAAA4yB,OAAAy3D,QAAAv5C,KAAAhI,UAGA6sE,YCvDA,MAAAihB,GAAA,IAAAvnH,QAYO,SAAAwnH,GAAA/lF,EAAAtwC,EAAAs2H,EAAAC,GACP,MAAAn2H,EAAAkwC,EAAAlwC,SAGAg2H,GAAAn1H,IAAAb,KACAg2H,GAAAxvH,IAAAxG,EAAA,IAAA6F,KAGA7F,EAAA+lF,kBAAAp5C,IAqCA,SAAA3sC,EAAA2sC,GACA,MAAAypF,EAAAJ,GAAA14H,IAAA0C,GACA,IAAA6kE,GAAA,EAEA,UAAAjlE,EAAA+0H,KAAAyB,EACAC,GAAA1pF,EAAA/sC,EAAA+0H,KACA9vD,GAAA,GAIA,OAAAA,GA/CAyxD,CAAAt2H,EAAA2sC,KAIAqpF,GAAA14H,IAAA0C,GAAAwG,IAAA5G,GACAs2H,kBACAC,kBAIAjmF,EAAAviC,SA8CA,SAAA0oH,GAAA1pF,EAAA/sC,EAAA+0H,GACA,MAAA30H,EAAAJ,EAAAI,SACA4X,EAAA+8G,EAAAuB,gBACA,IAAArxD,GAAA,EAGA,IAAA7kE,EACA,SAIAJ,EAAAyW,aAAA,sBAAAuB,IACA+0B,EAAAtkC,aAAA,mBAAAuP,EAAAhY,GACAilE,GAAA,GAGA,MACA78B,EADAhoC,EAAA+iC,UACAiF,OACAmuF,EAAAxB,EAAAwB,cAGA,GAAAA,QAMA,OALAv2H,EAAAigC,SAAA,oBACA8M,EAAAsK,YAAA,iBAAAr3C,GACAilE,GAAA,GAGAA,EAKA,MAAA0xD,GAAAtzH,MAAAC,KAAAtD,EAAAyhC,eAAAoS,KAAA7zC,MAAA2+B,GAAA,cAGA,OAAAv+B,EAAA8iC,WAAAyzF,GACA32H,EAAAigC,SAAA,oBACA8M,EAAAoK,SAAA,iBAAAn3C,GACAilE,GAAA,GAGAA,IAIA0xD,GAAAvuF,KAAAj4B,SAAAnQ,EACAA,EAAAigC,SAAA,oBACA8M,EAAAoK,SAAA,iBAAAn3C,GACAilE,GAAA,GAGAjlE,EAAAigC,SAAA,oBACA8M,EAAAsK,YAAA,iBAAAr3C,GACAilE,GAAA,GAIAA,GClIO,MAAM2xD,IACb,MACA,KACA,aACA,MAYA,SAAAC,GAAA/C,GACA,gBAAAA,EAAAvgG,cAAAujG,YACEF,GAAiB3xE,SAAA6uE,EAAA5pH,UACnB,SAAA4pH,EAAAvgG,cAAAujG,iBAIqBC,WAAoB5kG,GAIzCw3C,sBACA,OAAWwrD,IAMXj2H,OACA,MAAA83H,EAAAx3H,KAAA4yB,OAAAlvB,UAAA+zH,kBAAA,QAGAz3H,KAAA4yB,OAAA8vC,MAAAC,OAAAxwB,OAAA,UACA29B,QAAA0nD,EAAA5hH,OAAAyhH,IAAAtpH,IAAA+F,KAAAlW,QAIAoC,KAAA4yB,OAAA8vC,MAAAC,OAAAxwB,OAAA,SACA29B,QAAA0nD,EAAA5hH,OAAA9B,IAAAujH,GAAAvjH,IAAA/F,IAAA+F,KAAAlW,QAKA,UAAA4C,KAAAg3H,EACAH,GAAA72H,IACAR,KAAA4yB,OAAA8vC,MAAAC,OAAAxwB,OAAA3xC,EAAA5C,MACAmzE,eAAA,UAIA,SAAAvwE,EAAAuzB,cAAA2jG,OACA13H,KAAA4yB,OAAA8vC,MAAAC,OAAAg1D,kBAAAhqD,IACA,GAAAA,EAAAwC,YAA+B3vE,EAAA5C,cAC/B,WAOAoC,KAAA4yB,OAAA03D,WAAAjU,IAAA,mBAAAlzE,IAAuDqxH,GAAuBx0H,KAAA4yB,QAC9ErV,OAAA,QACAuzB,KAAA,CAAAwjF,EAAAr2D,EAAAgJ,KAEA,GAAAhJ,EAAAttD,OAAA/S,UAAyCqgE,EAAArgE,0BACzCqgE,EAAAttD,OAAA/S,UAAqCqgE,EAAArgE,gCACrC,OAAAqpE,EAAAW,uBACA0sD,EAAA5pH,QACM+pH,GAAkBH,EAAAr2D,IAIxB,MAAAnqD,EAAAmzD,EAAA0+C,sBACA2O,EAAA5pH,QACK+pH,GAAkBH,EAAAr2D,IASvB,OANAq2D,EAAA97G,MACKq+G,GAAiB72H,KAAA4yB,OAAAy3D,QAAAv5C,KAAAh9B,EAAAwgH,EAAA97G,MAKXqqG,GAFXyR,EAAA3jH,OAAAmD,EAAiDkuG,GAAQluG,EAAAmzD,GAE9BA,OAEnBxiD,SAAA,SAGRzkB,KAAA4yB,OAAAlvB,UAAAijF,mBAAA,SAAA2tC,EAAAr2D,EAAAi4D,KACA,GACAmB,GAAA/C,IACA,IAAAr2D,EAAAz8B,YACAxhC,KAAA4yB,OAAA8vC,MAAAC,OAAAuL,WAAAjQ,EAAA,aACA,CACA,MAAA8lB,EAAAmyC,EAAA3yH,cAAA,aAKA,OAJA2yH,EAAAjmH,OAAA8zE,EAAA9lB,EAAA,OACAq2D,EAAA97G,MACA09G,EAAAjmH,OAAAimH,EAAA3tD,WAAA+rD,EAAA97G,MAAAurE,IAEA,wBCxGqB6zC,WAA2BjlG,GAIhDw3C,sBACA,OAAWwrD,IAMXj2H,OAGAM,KAAA4yB,OAAA03D,WAAAjU,IAAA,gBAAAlzE,IAAoDqxH,GAAuBx0H,KAAA4yB,QAC3ErV,OAAA,eACAuzB,KAAA,CAAAwjF,EAAAr2D,EAAAgJ,IACAA,EAAAsB,WAAA,OAKAvoE,KAAA4yB,OAAA03D,WAAAjU,IAAA,mBAAAlzE,IAAuDqxH,GAAuBx0H,KAAA4yB,QAC9ErV,OAAA,eACAuzB,KAAA,CAAAwjF,EAAAr2D,EAAAgJ,KACA,MAAAngE,GACA0sF,MAAA,oBACArwE,SAAAmxG,EAAAL,YAAA3kH,KAAA,MAEA9O,EAAAymE,EAAAY,gBAAA,iBAAA/gE,GACAwwC,EAAA2vB,EAAAW,uBAAA,MAA8D6sD,GAAkBH,EAAAr2D,IAEhF,OADAgJ,EAAAh3D,OAAA,IAA2Bo0B,GAAYiT,EAAA,GAAA92C,GAC5BwhH,GAAQ1qE,EAAA2vB,OAKnBjnE,KAAA4yB,OAAAlvB,UAAAijF,mBAAA,gBAAA2tC,EAAAniH,EAAAo7B,KACA,IAAAk4B,GAAA,EACA,IAAA6uD,EAAA3jH,QAAA,YAAA2jH,EAAA3jH,OAAApO,KAAA,CACA,MAAA0xH,EAAAK,EAAAvgG,cAAAkgG,YAAA/8G,MAAA,KACA,GAAA+8G,EAAA7xH,SACAmrC,EAAAi5B,qBAAkCytD,EAAA,KAAmB9hH,EAAA,UACrDo7B,EAAAkI,aAAAtjC,EAAA3Q,gBAAA,MACA+rC,EAAAn9B,OAAA+B,GACAszD,GAAA,GAGA,OAAAA,IAIA,MAAAoyD,EAAA73H,KAAA4yB,OAAAw2C,QAAAlrE,IAAA,mBAAAu5H,kBAAA,eAGA,UAAAnD,KAAAuD,EACA,UAAA/jH,KAAAwgH,EAAAL,YACAj0H,KAAA4yB,OAAA8vC,MAAAC,OAAAxwB,cAA4Cr+B,KAC5Cy8D,WAAA+jD,EAAA12H,cCzDqBk6H,WAAyBnlG,GAI9Cw3C,sBACA,OAAWwrD,GAAiBiC,IAM5Bl4H,OAEA,MAAAq4H,EAAA/3H,KAAA4yB,OAAAlvB,UAAA+zH,kBAAA,aAEA,UAAAO,KAAAD,EAEA,UAAAjkH,KAAAkkH,EAAA7jE,SACAn0D,KAAA4yB,OAAA8vC,MAAAC,OAAAxwB,cAA4Cr+B,KAC5Cg8D,QAAAkoD,EAAAp6H,OAKAoC,KAAA4yB,OAAA03D,WAAAjU,IAAA,mBAAAlzE,IAAuDqxH,GAAuBx0H,KAAA4yB,QAC9ErV,OAAA,aACAuzB,KAAA,CAAAwjF,EAAAr2D,EAAAgJ,KACA,MAAAngE,EAAuB2tH,GAAkBH,EAAAr2D,GACzCn3D,EAAAqc,SAAAmxG,EAAAngE,SAAA7kD,KAAA,KACA,MAAAwE,EAAAmzD,EAAAW,uBACA,eACA9gE,GAEA,OAAAwtH,EAAA3jH,OAAAmD,EAAyCkuG,GAAQluG,EAAAmzD,qBCjC5BgxD,WAAsBnnC,GAI3CpxF,YAAAyqF,GACApqF,MAAAoqF,GAQAnqF,KAAAoH,IAAA,SAQApH,KAAAoH,IAAA,MAQApH,KAAAoH,IAAA,eAQApH,KAAAoH,IAAA,iBASApH,KAAAoH,IAAA,eASApH,KAAAoH,IAAA,oBAEA,MAAAvI,EAAAmB,KAAAmxF,aAEAnxF,KAAAuzF,aACAjrE,IAAA,QACAxhB,YACAvE,KAAA,OACAixF,OACA,KACA,WACA,gBACA30F,EAAAyuF,GAAA,wBAEAj7E,GAAAxT,EAAAuoB,GAAA,MACA8wG,YAAAr5H,EAAAuoB,GAAA,eACA+wG,SAAAt5H,EAAAuoB,GAAA,cACAgxG,eAAAv5H,EAAAyuF,GAAA,eACA+qC,mBAAAx5H,EAAAuoB,GAAA,qBAEAyJ,IACA2I,MAAA36B,EAAAuoB,GAAA,YAeA1nB,SACAK,MAAAwO,SAEA,MAAA2L,EAAA5b,IACA0B,KAAAQ,QAAAlC,SAAA,IAAAA,IAAA,IAGA4b,EAAAla,KAAA1B,OAIA0B,KAAA6wB,GAAA,gBAAAC,EAAAlzB,EAAAU,KACA4b,EAAA5b,KAOAoB,SACAM,KAAAQ,QAAA83H,SAMA54H,QACAM,KAAAQ,QAAAsoC,eClIqByvF,WAAiCxD,GAOtDr1H,YAAAkzB,EAAAvtB,GACAtF,MAAA6yB,GACA5yB,KAAAqF,YACArF,KAAAsoD,WAAA,EACAtoD,KAAA1B,MAAA,KAMAoB,UACAK,MAAA89F,UACA79F,KAAAsoD,aAAAtoD,KAAAg1H,kBAAAj3H,OAAAgW,KAAA/T,KAAAy1H,oBAAA3uH,YAAA2+C,SAAAzlD,KAAAqF,YACArF,KAAAsoD,YACAtoD,KAAA1B,MAAA0B,KAAAg1H,gBAAA/9G,aAAAjX,KAAAqF,YAOA3F,aAAA40H,GACA,OAAAA,EAAAH,eAMAz0H,QAAA+M,GACAzM,KAAAsoD,WACAtoD,KAAA4yB,OAAA8vC,MAAA7J,OAAAtrB,IACAA,EAAAtkC,aAAAjJ,KAAAqF,UAAAoH,EAAAnO,MAAA0B,KAAAg1H,oBCxCA,MAAMwD,GAAOrlC,GAAM,YAKEslC,WAA2BhsB,GAIhD/sG,YAAAyqF,GACApqF,MAAAoqF,GACA,MAAAtrF,EAAAmB,KAAAmxF,aACAnxF,KAAAoH,IAAA,SACApH,KAAAoH,IAAA,UACApH,KAAAoH,IAAA,cAGApH,KAAAoH,IAAA,gBAEApH,KAAAytF,gBACA3mF,YACAtD,OACAoN,SAAA,WACA4vC,IAAA3hD,EAAAuoB,GAAA,MAAA8yD,GAAiCs+C,GAAIt+C,IACrCz5B,KAAA5hD,EAAAuoB,GAAA,OAAA8yD,GAAmCs+C,GAAIt+C,uCCFlBw+C,WAA4B/lG,GAIjDw3C,sBACA,OAAWwrD,IAMXxsD,wBACA,4BAMAzpE,YAAAkzB,GACA7yB,MAAA6yB,GACAA,EAAA0zC,OAAAvpE,OAAA,yBAMA2C,OAEA,IAAAM,KAAA4yB,OAAA0zC,OAAApoE,IAAA,sBACA,OAGA8B,KAAA24H,mBAAA34H,KAAA4yB,OAAA0zC,OAAApoE,IAAA,sBAEA,UAAA+I,KAAAlJ,OAAAgW,KAAA/T,KAAA24H,oBAAA,CACA,MAAAC,EAAA54H,KAAA24H,mBAAA1xH,GACA1E,EAAAq2H,EAAAr2H,KACA4oE,0BAA+ClkE,IAC/C4xH,uBAA8C5xH,IAC9CjH,KAAA4yB,OAAA04C,SAAAnoE,IAAAgoE,EAAA,IAA8CotD,GAAwBv4H,KAAA4yB,OAAA3rB,IAGtE,MAAA6xH,GACAC,SAAA/4H,KAAAg5H,oBACAC,UAAAj5H,KAAAk5H,qBACAC,YAAAn5H,KAAAo5H,uBACAC,QAAA,GAGA,IAAAP,EAAA55H,eAAAqD,GACA,8CAAmDA,IAInDvC,KAAA4yB,OAAA03D,WAAAjU,IAAA,YAAAlzE,IAAiDikE,IACjD1E,MAAAz7D,EACA6pC,KAAA7pC,KAGA,MAAAqyH,EAAAR,EAAAv2H,GAEA,IAAA+2H,EACA,SAGA,MAAAl0G,GAAAwzG,EAAAztD,EAAAnrE,KAAA4yB,QACA1N,EAAAo0G,EAAAnoH,MAAAnR,KAAAolB,GACAplB,KAAA4yB,OAAAujE,GAAAuC,iBAAAv1F,IAAA01H,EAAA3zG,GAQAllB,KAAAu5H,iBAMAv5H,KAAAw5H,mBAEA,MAAA91H,EAAA1D,KAAA4yB,OAAAlvB,UAAA+1H,gBAAAlE,KAAApB,gBAEA,UAAA7zH,KAAAoD,EAAA,CAGA,MAAAg2H,EAAA37H,OAAAgW,KAAA/T,KAAA24H,oBACA/iH,OAAA3O,GAAAlJ,OAAAgW,KAAAzT,EAAAwG,YAAA2+C,SAAAx+C,IAAA,WAAAjH,KAAA24H,mBAAA1xH,GAAA1E,MACAu/B,OAGA,OAAA43F,EAAAt3H,OACA,SAGA,MAAAu3H,EAAAD,EAAApqH,KAAA,KAIA,GAHAtP,KAAAw5H,gBAAAl5H,EAAA1C,MAAA+7H,EAGA35H,KAAAu5H,cAAAr6H,eAAAy6H,GACA,SAGA,MAAAC,EAAAF,EAAA3rH,IAAA9G,wBAA+EA,KAI/E4yF,EAAA75F,KAAAq4F,qBACAwB,EAAAlB,eACAihC,EACA55H,KAAA4yB,OAAAujE,GAAAuC,kBAGA,MAAAmhC,EAAA75H,KAAA85H,iBAAAjgC,GAGGwb,IACH/vF,QAAAu0G,EACAtkB,iBAAAskB,EAAAr5H,SACA80G,UAAA,IAAAukB,EAAApmC,UACAvuE,SAAA,KACAllB,KAAA+5H,iBAIA/5H,KAAAu5H,cAAAI,GAAAE,EAGA75H,KAAAg6H,gBAAA,IAA6BvB,GAAkBz4H,KAAA4yB,OAAAu3D,QAC/CnqF,KAAAg6H,gBAAA5yH,KACAkmG,KAAS2sB,GAAAr6G,EACT6zE,WAAA,IAEAzzF,KAAA4yB,OAAAujE,GAAArlD,KAAAojB,KAAA/wD,IAAAnD,KAAAg6H,iBACAh6H,KAAA4yB,OAAAujE,GAAAC,aAAAjzF,IAAAnD,KAAAg6H,gBAAAx5H,SAGAR,KAAAmlB,SAAAnlB,KAAA4yB,OAAAujE,GAAA,aAAAn2F,KAAAk6H,wBACAl6H,KAAAmlB,SAAAnlB,KAAA4yB,OAAA,wBAAA5yB,KAAAk6H,wBAEAl6H,KAAAmlB,SAAAnlB,KAAAg6H,gBAAA,oBAAAlpG,EAAAlzB,EAAA61F,KACAA,EACAzzF,KAAAmlB,SAAmB3G,GAAMvhB,OAAA,aAAA+C,KAAAk6H,yBAGzBl6H,KAAAqlB,cAAwB7G,GAAMvhB,OAAA,aAAA+C,KAAAk6H,wBAC9Bl6H,KAAA+5H,iBAIA/5H,KAAAmlB,SAAAnlB,KAAAg6H,gBAAA,eACAh6H,KAAA+5H,cACA,MACAxE,EADAv1H,KAAA4yB,OAAAlvB,UAAA4xH,4BAAAC,KAAApB,gBACAoB,KACA,GAAAA,GAAAv1H,KAAAw5H,gBAAAt6H,eAAAq2H,EAAA33H,MAAA,CACA,MAAA+7H,EAAA35H,KAAAw5H,gBAAAjE,EAAA33H,MACAoC,KAAAu5H,cAAAr6H,eAAAy6H,IACA35H,KAAAu5H,cAAAI,GAAAnjC,KACAprF,OAAApL,KAAAg6H,gBAAAx5H,QACAixF,QAAAzxF,KAAA4yB,OAAAujE,GAAArlD,KAAAlN,qBAYAlkC,cACA3B,OAAA0O,OAAAzM,KAAAu5H,eAAA13H,QAAAiS,IACAA,EAAA2/E,WAAA,IAaA/zF,oBAAAk5H,EAAAztD,EAAAv4C,GACA,OAAAu3D,IACA,MAAA/e,EAAAx4C,EAAA04C,SAAAptE,IAAAitE,GACAgvD,EAAA,IAA6B7uF,GAC7BsrE,KAEA,UAAAh4G,KAAAb,OAAAgW,KAAA6kH,EAAApxH,SAAA,CACA,MAAAgsG,EAAAolB,EAAApxH,QAAA5I,GACAw7H,EAAA,IAA0BzmB,IAC1BxpE,MAAAqpE,EACAwD,UAAA,IAGAojB,EAAAv7H,KAAA,YAAAuoB,GAAAgkD,EAAA,QAAA9sE,OAAAM,GACAw7H,EAAAhzH,KACA+jE,cACA8rC,aAAAr4G,IAEAg4G,EAAAh4G,GAAA40G,EAEA2mB,EAAAh3H,KAAwBZ,KAAA,SAAAmgE,MAAA03D,IAGxB,MAAAzkB,EAAwBF,GAActrB,GAuBtC,OAtBG6rB,GAAiBL,EAAAwkB,GAEpBxkB,EAAAtD,WAAAjrG,KACA8vG,MAAA,EACAF,UAAA,EACA7sE,MAAAyuF,EAAAzuF,MACAojE,yBAA8BqrB,EAAAzuF,kBAG9BwrE,EAAAtD,WAAAxzG,KAAA,SAAAuoB,GAAAgkD,EAAA,QAAA9sE,GACAs4G,EAAAt4G,IAAAs6H,EAAAzuF,OAGAwrE,EAAA92G,KAAA,aAAAuoB,GAAAgkD,EAAA,YAAA9sE,GACAA,GAIA0B,KAAAmlB,SAAAwwF,EAAA,UAAA7kF,IACA8B,EAAAy4C,QAAAv6C,EAAAhgB,OAAAq6D,aAA6C7sE,MAAAwyB,EAAAhgB,OAAAmmG,iBAG7CtB,GAaAj2G,qBAAAk5H,EAAAztD,EAAAv4C,GACA,OAAAu3D,IACA,MAAA/e,EAAAx4C,EAAA04C,SAAAptE,IAAAitE,IACA+sD,YAAUA,EAAA,IAAmBU,EAC7ByB,EAAA,IAAyBpC,GAAa9tC,GAStC,OAPAkwC,EAAAnC,cACAmC,EAAAx7H,KAAA,SAAAuoB,GAAAgkD,EAAA,SAEAprE,KAAAmlB,SAAAk1G,EAAA,QAAAvpG,IACA8B,EAAAy4C,QAAAF,GAAkC7sE,MAAAwyB,EAAAhgB,OAAAtQ,QAAAlC,UAGlC+7H,GAaA36H,uBAAAk5H,EAAAztD,EAAAv4C,GACA,OAAAu3D,IACA,MAAA/e,EAAAx4C,EAAA04C,SAAAptE,IAAAitE,GACAgvD,EAAA,IAA6B7uF,GAC7Bv3B,EAAAhW,OAAAgW,KAAA6kH,EAAApxH,SAOA8yH,EAAA17H,GAAAg6H,EAAApxH,QAAA5I,GAOA27H,EAAAC,OAAA,IACAtjH,MAAA,KACAtB,OAAAtX,MACAwjC,KAAA,CAAAliB,EAAAqU,IAAAlgB,EAAAT,QAAAsM,GAAA7L,EAAAT,QAAA2gB,IAOAwmG,EAAA77H,GACA47H,GAAAD,EAAAC,GAAA/0E,SAAA7mD,GAgBA,UAAA87H,KAAA38H,OAAAgW,KAAA6kH,EAAApxH,SAAA,CACA,MAAA4yH,EAAA,IAA0BzmB,IAC1BxpE,MAAAmwF,EAAAI,GACA1jB,UAAA,EACAp4G,IAAA87H,IAKAN,EAAAv7H,KAAA,QAAAuoB,GAAAgkD,EAAA,QAAAqvD,EAAAC,IACAP,EAAAh3H,KAAwBZ,KAAA,eAAAmgE,MAAA03D,IAGxB,MAAAzkB,EAAwBF,GAActrB,GA8BtC,OA7BG6rB,GAAiBL,EAAAwkB,GAEpBxkB,EAAAtD,WAAAjrG,KACA4vG,UAAA,EACA7sE,MAAAyuF,EAAAzuF,MACAojE,yBAA8BqrB,EAAAzuF,kBAI9BwrE,EAAAtD,WACAxzG,KAAA,SACAuoB,GAAAgkD,EAAA,QAlCAovD,IACA,MAAAG,EAAAJ,EAAAC,GACA,OAAAG,EAAAv4H,OAAA,EACAu4H,EAAA5sH,IAAAusH,GAAAhrH,KAAA,MAEAspH,EAAAzuF,OAAA,KAgCAnqC,KAAAmlB,SAAAwwF,EAAA,UAAA7kF,IACA,MAAArkB,EAAA8tH,EAAAnvD,EAAA9sE,QACAM,IAAWA,GAAMkyB,EAAAhgB,OACjBlP,EAAA6K,EAAA6G,QAAA1U,IAEA,IAAAgD,EAEA6K,EAAA/K,KAAA9C,GAGA6N,EAAA8G,OAAA3R,EAAA,GAEAgxB,EAAAy4C,QAAAF,GAAkC7sE,MAAAmO,EAAA6C,KAAA,SAGlCqmG,GAUAj2G,qBACA,MAAA04F,EAAA,IAA0BR,GAAW53F,KAAA4yB,OAAAu3D,QASrC,OAPAiO,EAAA3K,gBACA3mF,YAEA0sF,OAAA,0BAIA4E,EASA14F,iBAAAm6F,GACA,MAAAjnE,EAAA5yB,KAAA4yB,OACAmhF,EAAA,IAAwBzgB,GAAgB1gE,EAAAu3D,QAaxC,OAXA4pB,EAAAtzG,QAAA0C,IAAA02F,GACAka,EAAAnyE,UAAA,uBACAhP,EAAAujE,GAAArlD,KAAAojB,KAAA/wD,IAAA4wG,GACAnhF,EAAAujE,GAAAC,aAAAjzF,IAAA4wG,EAAAvzG,SAGAq5F,EAAAtP,WAAAnjF,IAAA,OAAA0pB,EAAA2gC,KACAzxD,KAAA46H,WAAA7mB,GACAtiD,MAGAsiD,EAMAr0G,uBACA,MAAAkK,EAAA5J,KAAA4yB,OAAAlvB,UAAA4xH,4BAAAC,KAAApB,gBACAl2D,EAAAr0D,EAAApJ,QACA+0H,EAAA3rH,EAAA2rH,KAEA,IAAAA,IAAAv1H,KAAAw5H,gBAAAt6H,eAAAq2H,EAAA33H,OAAAoC,KAAA4yB,OAAAigC,WAEA,YADA7yD,KAAAg6H,gBAAAvmC,WAAA,GAIAzzF,KAAAg6H,gBAAAvmC,WAAA,EAEA,MAAA19C,EAAA/1C,KAAA4yB,OAAAy3D,QAAA9rB,OAAAJ,cAAAF,GACAttB,EAAA3wC,KAAA4yB,OAAAy3D,QAAAv5C,KAAAC,aAAAwL,aAAAxG,GAEA8kF,EAAyBtpC,IACzB/wF,QAAAR,KAAAg6H,gBAAAx5H,QACA4K,OAAAulC,EACA6gD,WACA,CAAA96B,EAAA89C,MACAh0D,IAAAkW,EAAAlW,IAAAg0D,EAAA//C,OACAhU,KAAAiW,EAAAjW,KAAAiW,EAAAhW,WAKA1gD,KAAAg6H,gBAAAx5E,IAAAq6E,EAAAr6E,IACAxgD,KAAAg6H,gBAAAv5E,KAAAo6E,EAAAp6E,YCrcqBq6E,WAAmBnoG,GAIxCjzB,YAAAkzB,GACA7yB,MAAA6yB,GAEAA,EAAA0zC,OAAAvpE,OAAA,wBACAiD,KAAA+6H,MAAA,EAMA5wD,sBACA,OAAWwrD,IAOXqF,WACA,OAAAh7H,KAAA+6H,QAMAE,cACA,OAAAj7H,KAAA4yB,OAAA0zC,OAAApoE,IAAA,mBAMAwB,OAEAM,KAAA4yB,OAAAlvB,UAAA+1H,gBAAAlE,KAAApB,gBAAAtyH,QAAA0zH,IACAv1H,KAAA4yB,OAAA8vC,MAAAC,OAAAxwB,OAAAojF,EAAA33H,MACAkwE,iBAAA,UAKA9tE,KAAA4yB,OAAA03D,WAAA4kC,sBACAxsD,MAAA,KACA5xB,KAAA,OAIA9wC,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+lF,kBAAAp5C,IACA,UAAA1Y,KAAA70B,KAAA4yB,OAAA8vC,MAAA9hE,SAAAm/D,OAAAG,aAEA,cAAAza,SAAA5wB,EAAAtyB,MAAA,CAEA,MAAA4P,EAAA0iB,EAAAjkB,SAAAm1B,UACA/lC,KAAAk7H,WAAA/oH,EAAAo7B,MAMA7tC,WAAAyS,EAAAo7B,GACA,GAAAp7B,GAIAA,MAAA8E,aAAA,OAEA,MAAAs+G,EAAAv1H,KAAA4yB,OAAAlvB,UAAA0xH,eAAAjjH,EAAAvU,MAQA,GANA23H,MAAA5kH,QAGA48B,EAAAtkC,aAAA,KAkBA,SAAAuP,GACA,IAAAyd,EAAA,KACAr0B,EAAA4W,EAAApW,OAEA,KAAAR,GACAq0B,EAAA,GAAAA,EAAAzd,EAAA2iH,aAAAv5H,GAGA,OAAAq0B,IAAA,GAAA3R,SAAA,IA1BA2R,IAAwCj2B,KAAAi7H,WAAkBj7H,KAAAg7H,QAAY7oH,GAGtEojH,EACA,UAAA7xG,KAAAvR,EAAA8vB,cACAjiC,KAAAk7H,WAAAx3G,EAAA6pB,YCtFA,MAAM6tF,GAAOjoC,GAAM,YAEEkoC,WAA6B7uB,GAClD9sG,YAAAyqF,GACApqF,MAAAoqF,GACA,MAAAtrF,EAAAmB,KAAAmxF,aACAnxF,KAAAoH,IAAA,SACApH,KAAAoH,IAAA,UACApH,KAAAoH,IAAA,gBACApH,KAAAoH,IAAA,iBAEApH,KAAAytF,gBACA3mF,YACA0sF,OACA,gBACA30F,EAAAyuF,GAAA,kCACAzuF,EAAAyuF,GAAA,wCAEA9pF,OACAoN,SAAA,WACA4vC,IAAA3hD,EAAAuoB,GAAA,MAAA8yD,GAAiCkhD,GAAIlhD,IACrCz5B,KAAA5hD,EAAAuoB,GAAA,OAAA8yD,GAAmCkhD,GAAIlhD,eCjBlBohD,WAAkB3oG,GAIvCw3C,sBACA,OAAWotD,IAMX73H,OACAM,KAAA2sG,YAAA,IAAyB0uB,GACzBr7H,KAAA2sG,YAAAvlG,MACApH,KAAA4yB,OAAAujE,GAAArlD,KAAAojB,KAAA/wD,IAAAnD,KAAA2sG,aACA3sG,KAAA4yB,OAAAujE,GAAAC,aAAAjzF,IAAAnD,KAAA2sG,YAAAnsG,SAGAR,KAAAmlB,SAAAnlB,KAAA4yB,OAAAujE,GAAA,aAAAn2F,KAAAu7H,yBACAv7H,KAAAmlB,SAAAnlB,KAAA4yB,OAAA,wBAAA5yB,KAAAu7H,yBAMA77H,wBACA,MAAAkK,EAAA5J,KAAA4yB,OAAAlvB,UAAA4xH,4BAAAC,GACA,SAAAA,EAAAhzH,MAAAgzH,EAAAxhG,cAAAkrE,OAGA,IAAAr1F,EAAApJ,SAAAR,KAAA4yB,OAAAigC,WAEA,YADA7yD,KAAA2sG,YAAAlZ,WAAA,GAGA,MAAAwL,EAAAtvC,SAAA/lD,EAAA2rH,KAAAxhG,cAAAkrE,OAEAj/F,KAAA2sG,YAAAlZ,WAAA,EAEA,MAAA19C,EAAA/1C,KAAA4yB,OAAAy3D,QAAA9rB,OAAAJ,cAAAv0D,EAAApJ,SACAmwC,EAAA3wC,KAAA4yB,OAAAy3D,QAAAv5C,KAAAC,aAAAwL,aAAAxG,GAEAylF,EAAA7qF,EAAA8qF,UAAAtrH,QAAA,6BAAA2Q,OAAA1e,OAEAo5H,EAAAv8B,EACAtuD,EAAA+qF,UAAAv4H,IAAA,gCAGAwtC,EAAA+qF,UAAAtrH,OAAA,gCAGA,MAAAzQ,EAAA67H,EAAAv8B,EACAj/F,KAAA4yB,OAAAu3D,OAAA5rF,EAAA,gDAAAi9H,EAAAv8B,IACAj/F,KAAA4yB,OAAAu3D,OAAA5rF,EAAA,yBAAA0gG,EAAAu8B,IAEAx7H,KAAA2sG,YAAAgvB,WAAAH,EAAAv8B,EACAj/F,KAAA2sG,YAAAvlG,KAAyBoR,KAAA7Y,IAEzB,MAAAi8H,EAA0BrqC,IAC1B/wF,QAAAR,KAAA2sG,YAAAnsG,QACA4K,OAAAulC,EACA6gD,WACA96B,KACAlW,IAAAkW,EAAAlW,IAAAkW,EAAAjC,OACAhU,KAAAiW,EAAAjW,UAKAzgD,KAAA2sG,YAAAnsD,IAAAo7E,EAAAp7E,IACAxgD,KAAA2sG,YAAAlsD,KAAAm7E,EAAAn7E,mBCrEqBo7E,WAAsBlpG,GAI3Cw2C,wBACA,sBAMAzpE,YAAAkzB,GACA7yB,MAAA6yB,GAEAA,EAAAujE,GAAArlD,KAAA3rB,SAA2B3G,GAAMvhB,OAAA2D,SAAA,aAAAkwB,EAAAlxB,KAGjC,UAAA0B,KAAuBkd,GAAMvhB,OAAA2D,SAAAyC,iBAAA,cAC7B/B,EAAAo6H,UAAAtrH,OAAA,WAGA,IAAA5P,EAAAZ,EAAAwL,OACA,KAAA5K,KAAAk7H,WAAA,CACA,GAAAl7H,EAAAk7H,UAAAvnE,SAAA,cACA3zD,EAAAk7H,UAAAv4H,IAAA,WACA,MAEA3C,IAAAsB,4BCjBqBg6H,WAAuBnpG,GAI5Cw3C,sBACA,OAAWwrD,IASXj2H,eAAAgjE,EAAA9gE,GACA,MAAAkvC,EAAA9wC,KAAA4yB,OAAAy3D,QAAA9rB,OAAAJ,cAAAuE,GACA5xB,GACA9wC,KAAA4yB,OAAAy3D,QAAAv5C,KAAA+nB,OAAAtrB,IACAA,EAAAtkC,aAAA,0BAAArH,EAAAkvC,KAUApxC,eAAAgjE,GACA,MAAA5xB,EAAA9wC,KAAA4yB,OAAAy3D,QAAA9rB,OAAAJ,cAAAuE,GACA,GAAA5xB,EACA,OAAAA,EAAA75B,aAAA,2BAOAvX,OAEA,MAAAq8H,EAAA/7H,KAAA4yB,OAAAlvB,UAAA+zH,kBAAA,WAEA,UAAAuE,KAAAD,EAEA,UAAAjoH,KAAAkoH,EAAA7nE,SACAn0D,KAAA4yB,OAAA8vC,MAAAC,OAAAxwB,cAA4Cr+B,KAC5Cg8D,QAAAksD,EAAAp+H,OAQAoC,KAAA4yB,OAAA8vC,MAAAC,OAAAxwB,OAAA,SACA29B,QAAAisD,EAAAhuH,IAAA+F,MAA0CA,EAAAlW,uBAG1CoC,KAAA4yB,OAAA03D,WAAAjU,IAAA,mBAAAlzE,IAAuDqxH,GAAuBx0H,KAAA4yB,QAC9ErV,OAAA,WACAuzB,KAAA,CAAAwjF,EAAAr2D,EAAAgJ,KACA,MAAAngE,EAAuB2tH,GAAkBH,EAAAr2D,GACzCn3D,EAAAm1H,QAAA3H,EAAAngE,SAAA,GACA,MAAArgD,EAAAmzD,EAAAW,uBACA,aACA9gE,GAEA,OAAAwtH,EAAA3jH,OAAAmD,EAAyCkuG,GAAQluG,EAAAmzD,OAKjDjnE,KAAA4yB,OAAAlvB,UAAAijF,mBAAA,YAAA2tC,EAAAniH,EAAAo7B,KACA,IAAAk4B,GAAA,EAUA,OATA,IAAAtzD,EAAAqvB,aACA,IAAA8yF,EAAAngE,SAAA/xD,OACAmrC,EAAAi5B,qBAAkC8tD,EAAAngE,SAAA,KAAgChiD,EAAA,OAElEo7B,EAAAi5B,cAAA8tD,EAAA12H,KAAA,gBAAAuU,EAAA,OAEAszD,GAAA,GAGAA,KClFe,SAAAy2D,GAAAtrH,EAAAtS,EAAAokE,GACf,OAAAA,EAAA9hB,YAAAu7E,GAAAvrH,EAAAtS,GAAA,EAAAokE,GAAAy5D,GAAAvrH,EAAAtS,GAAA,EAAAokE,IAUA,SAAAy5D,GAAAvrH,EAAAtS,EAAA89H,EAAA15D,GAGA,IAAAphE,EAAAsP,EAAA2uB,WAAA68F,EAAAxrH,EAAAo1B,WAAAp1B,EAAAm1B,WAEAs2F,EAAA,KAEA,KAAA/6H,KAAA2V,aAAA,aAAA3Y,GACA+9H,EAAA/6H,EACAA,EAAA86H,EAAA96H,EAAAE,gBAAAF,EAAA6R,YAGA,OAAAkpH,EAAA35D,EAAAmR,iBAAAwoD,EAAAD,EAAA,kBAAAxrH,QCxBqB0rH,WAAoB1+B,GAYzCl+F,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACAlhB,EAAAkhB,EAAA9hE,SAEAZ,KAAA1B,MAAAkjD,EAAA7d,UAAA1sB,aAAA,YACAjX,KAAAsoD,UAAAoa,EAAAC,OAAA8sC,0BAAAjuD,EAAA7d,UAAA,YAmBAjkC,QAAAyV,GACA,MAAAutD,EAAA1iE,KAAA4yB,OAAA8vC,MACA/+B,EAAA++B,EAAA9hE,SAAA+iC,UAEA++B,EAAA7J,OAAAtrB,IAEA,GAAA5J,EAAAgD,YAAA,CACA,MAAA/1B,EAAA+yB,EAAAsH,mBAGA,GAAAtH,EAAArD,aAAA,aAEA,MAAAi8F,EAAuBL,GAAav4F,EAAAsH,mBAAAtH,EAAA1sB,aAAA,YAAAyrD,GAEpCn1B,EAAAtkC,aAAA,WAAAkM,EAAAonH,GAGAhvF,EAAAkI,aAAA8mF,QAKA,QAAApnH,EAAA,CACA,MAAArO,EAAwBkyD,GAAKr1B,EAAAqS,iBAE7BlvC,EAAAM,IAAA,WAAA+N,GAEA,MAAA7T,EAAAisC,EAAAg7B,WAAApzD,EAAArO,GAEAymC,EAAAt9B,OAAA3O,EAAAsP,GAGA28B,EAAAkI,aAAAlI,EAAAitC,cAAAl5E,SAEI,CAGJ,MAAAgmC,EAAAo7B,EAAAC,OAAA0sC,eAAA1rE,EAAAgG,YAAA,YAEA,UAAAd,KAAAvB,EACAiG,EAAAtkC,aAAA,WAAAkM,EAAA0zB,aC7EqB2zF,WAAsB5+B,GAI3Cl+F,UACAM,KAAAsoD,UAAAtoD,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UAAArD,aAAA,YAWA5gC,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACA/+B,EAAA++B,EAAA9hE,SAAA+iC,UAEA++B,EAAA7J,OAAAtrB,IAEA,MAAAkvF,EAAA94F,EAAAgD,aACMu1F,GAAav4F,EAAAsH,mBAAAtH,EAAA1sB,aAAA,YAAAyrD,IAAA/+B,EAAAgG,YAGnB,UAAAd,KAAA4zF,EACAlvF,EAAAvkC,gBAAA,WAAA6/B,MCnCA,MAAA6zF,GAAAt+H,OAAA,eAEAu+H,GAAA,8DACAC,GAAA,kEAkBO,SAAAhoH,GAAAO,EAAAo4B,GAEP,MAAAsvF,EAAAtvF,EAAA2J,uBAAA,KAA0D/hC,SAAUsP,SAAA,IAGpE,OAFA8oB,EAAA00E,kBAAAya,IAAA,EAAAG,GAEAA,EAcO,SAAAC,GAAAC,GAGP,OAMA,SAAAA,GAGA,OAFAA,EAAA5sH,QAAAwsH,GAAA,IAEAx8H,MAAAy8H,IATAI,CAFAD,EAAAz3H,OAAAy3H,IAEAA,EAAA,ICkCe,SAAAE,GAAAnsF,EAAA4xB,EAAAp9C,EAAAjgB,GACf,MAAA63H,EAAA,IAAAC,GAAAz6D,EAAAp9C,EAAAjgB,GACA+iE,EAAA1F,EAAA9hE,SAAA+iC,UAaAre,EAAAH,SAAA2rB,EAAAlwC,SAAA,WAAAkwB,EAAAlxB,KAEA,IAAAwoE,EAAAzhC,YACA,OAKA,GAAA/mC,EAAAswC,UAAAtwC,EAAAowC,QAAApwC,EAAAqwC,QACA,OAGA,MAAAmtF,EAAAx9H,EAAAmwC,SAA4ChB,GAAQG,WACpDmuF,EAAAz9H,EAAAmwC,SAA2ChB,GAAQC,UAGnD,IAAAouF,IAAAC,EACA,OAGA,MAAAzsH,EAAAw3D,EAAAn9B,mBACA,IAAAqyF,GAGAA,EADAF,EACAF,EAAAK,sBAAA3sH,EAAAhR,GAEAs9H,EAAAM,uBAAA5sH,EAAAhR,KAMAkxB,EAAA7M,SAEKQ,SAAWD,EAAUtmB,IAAA,kBAU1Bi/H,GASAz9H,YAAAgjE,EAAAp9C,EAAAjgB,GAOArF,KAAA0iE,QAQA1iE,KAAAqF,YAQArF,KAAAy9H,gBAAA/6D,EAAA9hE,SAAA+iC,UASA3jC,KAAA09H,aAAA,KAUA19H,KAAA29H,kCAAA,EAGAr4G,EAAAH,SAAAnlB,KAAAy9H,gBAAA,gBAAA3sG,EAAAlxB,KAIAI,KAAA29H,iCACA39H,KAAA29H,kCAAA,EAOA39H,KAAA49H,wBAOAh+H,EAAAkiE,cAAA+7D,GAAA79H,KAAAy9H,gBAAAxyF,mBAAA5lC,IAIArF,KAAA87E,qBAYAp8E,sBAAAkR,EAAAhR,GACA,MAAAyF,EAAArF,KAAAqF,UAWA,KAAArF,KAAA49H,sBAWAhtH,EAAA80B,WAAA1lC,KAAA89H,wBAYA,OAAAC,GAAAntH,EAAAvL,IAAArF,KAAA89H,wBACA99H,KAAAg+H,sBAAAp+H,GACAI,KAAA47E,6BAEA,GAOAqiD,GAAArtH,EAAAvL,IACArF,KAAAg+H,sBAAAp+H,GACAI,KAAA67E,oBAEA,GAOAqiD,GAAAttH,EAAAvL,IAAArF,KAAA89H,wBACA99H,KAAAg+H,sBAAAp+H,GACAI,KAAA67E,oBAEA,QAJA,EAgBAn8E,uBAAAkR,EAAAhR,GACA,MAAAyF,EAAArF,KAAAqF,UAGA,OAAArF,KAAA49H,qBAUAG,GAAAntH,EAAAvL,IAAArF,KAAA89H,wBACA99H,KAAAg+H,sBAAAp+H,GACAI,KAAA87E,kBACA97E,KAAA47E,6BAEA,IASA57E,KAAAg+H,sBAAAp+H,GACAI,KAAA87E,kBAYAlrE,EAAA80B,WACA1lC,KAAA47E,6BAGA,GAOAmiD,GAAAntH,EAAAvL,KAAArF,KAAA89H,wBACA99H,KAAAg+H,sBAAAp+H,GACAI,KAAAm+H,wCAAAvtH,IAEA,GAQAA,EAAAw0B,SAAA84F,GAAAttH,EAAAvL,GAMArF,KAAA89H,4BAMAM,GAAAxtH,EAAAvL,KAIArF,KAAAq+H,uCACAr+H,KAAA67E,sBAeA77E,KAAAg+H,sBAAAp+H,GACAI,KAAAm+H,wCAAAvtH,IAEA,GASAA,EAAA80B,UACA1lC,KAAA89H,wBACA99H,KAAA47E,4BACA57E,KAAAg+H,sBAAAp+H,IAEA,QAGA,OASAw+H,GAAAxtH,EAAAvL,KAIArF,KAAAq+H,uCACAr+H,KAAA67E,qBAgBA+hD,2BACA,QAAA59H,KAAA09H,aAUAI,6BACA,OAAA99H,KAAAy9H,gBAAAn9F,aAAAtgC,KAAAqF,WAWA3F,mBACAM,KAAA09H,aAAA19H,KAAA0iE,MAAA7J,OAAAtrB,KAAA+wF,4BAUA5+H,kBACAM,KAAA0iE,MAAA7J,OAAAtrB,IACAA,EAAAgxF,wBAAAv+H,KAAA09H,cACA19H,KAAA09H,aAAA,OASAh+H,sBAAAE,GACAA,EAAAuiB,iBASAziB,4BACAM,KAAA0iE,MAAA7J,OAAAtrB,IACAA,EAAAqoC,yBAAA51E,KAAAqF,aAYA3F,wCAAAkR,GACA,MAAAvL,EAAArF,KAAAqF,UAEArF,KAAA0iE,MAAA7J,OAAAtrB,IACAA,EAAAoiE,sBAAA3vG,KAAAqF,UAAAuL,EAAAo1B,WAAA/uB,aAAA5R,MAYA3F,uCACAM,KAAA29H,kCAAA,GAOA,SAAAE,GAAAjtH,EAAAvL,GACA,OAAA44H,GAAArtH,EAAAvL,IAAA64H,GAAAttH,EAAAvL,GAKA,SAAA44H,GAAArtH,EAAAvL,GACA,MAAA2gC,WAAQA,EAAAD,aAAwBn1B,EAChC4tH,IAAAx4F,KAAA1F,aAAAj7B,GAGA,QAFA0gC,KAAAzF,aAAAj7B,MAEAm5H,GAAAx4F,EAAA/uB,aAAA5R,KAAA0gC,EAAA9uB,aAAA5R,IAKA,SAAA64H,GAAAttH,EAAAvL,GACA,MAAA2gC,WAAQA,EAAAD,aAAwBn1B,EAChC4tH,IAAAx4F,KAAA1F,aAAAj7B,GACAo5H,IAAA14F,KAAAzF,aAAAj7B,GAEA,OAAAm5H,KAAAC,GAAAz4F,EAAA/uB,aAAA5R,KAAA0gC,EAAA9uB,aAAA5R,IAKA,SAAA04H,GAAAntH,EAAAvL,GACA,MAAA2gC,WAAQA,EAAAD,aAAwBn1B,EAChC4tH,IAAAx4F,KAAA1F,aAAAj7B,GAGA,KAFA0gC,KAAAzF,aAAAj7B,IAEAm5H,EAIA,OAAAz4F,EAAA9uB,aAAA5R,KAAA2gC,EAAA/uB,aAAA5R,GAKA,SAAA+4H,GAAAxtH,EAAAvL,GACA,OAAAw4H,GAAAjtH,EAAAi3B,cAAA,GAAAxiC,SCzjBA,MAAAq5H,GAAA,yBAUqBC,WAAoBhsG,GAIzCjzB,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OAGAA,EAAA8vC,MAAAC,OAAAxwB,OAAA,SAAwC27B,gBAAA,aAExCl7C,EAAA03D,WAAAjU,IAAA,gBACAlzE,IAASujE,IAA6BhE,MAAA,WAAA5xB,KAA0Bl8B,MAEhEge,EAAA03D,WAAAjU,IAAA,mBACAlzE,IAASujE,IAA6BhE,MAAA,WAAA5xB,KAAA,CAAA37B,EAAAo4B,IAC3B34B,GAAmBkoH,GAAa3nH,GAAAo4B,MAG3C3a,EAAA03D,WAAAjU,IAAA,UACAlzE,IAAS+wE,IACTpjC,MACAlzC,KAAA,IACAkJ,YACAqO,MAAA,IAGAutD,OACA9jE,IAAA,WACAN,MAAAy3C,KAAA9+B,aAAA,YAKA2b,EAAA04C,SAAAnoE,IAAA,WAAmCm5H,GAAW1pG,IAC9CA,EAAA04C,SAAAnoE,IAAA,aAAqCq5H,GAAa5pG,IAGhDqqG,GAA2BrqG,EAAAy3D,QAAAv5C,KAAAle,EAAA8vC,MAAA1iE,KAAA,YAG7BA,KAAA4+H,sBAiBAl/H,sBACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAke,EAAAle,EAAAy3D,QAAAv5C,KACA+tF,EAAA,IAAA77H,IAGA8tC,EAAAlwC,SAAA+lF,kBAAAp5C,IACA,MAAA5J,EAAA/Q,EAAA8vC,MAAA9hE,SAAA+iC,UAEA,GAAAA,EAAArD,aAAA,aACA,MAAA+9B,EAAuB69D,GAAav4F,EAAAsH,mBAAAtH,EAAA1sB,aAAA,YAAA2b,EAAA8vC,OACpCzf,EAAArwB,EAAAy3D,QAAA9rB,OAAA2I,YAAA7I,GAIA,UAAAlsD,KAAA8wC,EAAAue,WACArvD,EAAAgtB,GAAA,OACAoO,EAAAoK,SAAA+mF,GAAAvsH,GACA0sH,EAAA17H,IAAAgP,OAOAygB,EAAA03D,WAAAjU,IAAA,mBAAAlzE,IAAA28D,IAOA,SAAAg/D,IACAhuF,EAAA+nB,OAAAtrB,IACA,UAAAp7B,KAAA0sH,EAAApyH,SACA8gC,EAAAsK,YAAA6mF,GAAAvsH,GACA0sH,EAAApvH,OAAA0C,KATA2tD,EAAAjvC,GAAA,SAAAiuG,GAA8Cr6G,SAAA,YAC9Cq7C,EAAAjvC,GAAA,SAAAiuG,GAA8Cr6G,SAAA,YAC9Cq7C,EAAAjvC,GAAA,YAAAiuG,GAAiDr6G,SAAA,YACjDq7C,EAAAjvC,GAAA,YAAAiuG,GAAiDr6G,SAAA,qBC/F5Bs6G,WAAsBlwE,GAC3CnvD,YAAAoxC,GACA/wC,MAAA+wC,GAEA9wC,KAAA8uD,aAAA,QAGApvD,WAAAivD,GACA3uD,KAAA4nB,KAAA+mC,EAAApsD,KAAAosD,iBCXqBqwE,WAAkBluC,GAIvCpxF,YAAAyqF,GACApqF,MAAAoqF,GAQAnqF,KAAAoH,IAAA,QAQApH,KAAAoH,IAAA,OAEA,MAAAvI,EAAAmB,KAAAmxF,aAEAnxF,KAAAuzF,aACAjrE,IAAA,QACAxhB,YACA0sF,OACA,KACA,YAEAnd,IAAAx3E,EAAAuoB,GAAA,QAEAvI,WAEArG,KAAA3Z,EAAAuoB,GAAA,0BCnCqB63G,WAAyBnuC,GAO9CpxF,YAAAyqF,EAAA+0C,GACAn/H,MAAAoqF,GAEA,MAAAg1C,cAAgCh7G,MAChCi7G,eAAkCj7G,MAQlCnkB,KAAAoH,IAAA,SAQApH,KAAAoH,IAAA,SAQApH,KAAAoH,IAAA,iBAkBApH,KAAAoH,IAAA,kBAeApH,KAAAoH,IAAA,iBAOApH,KAAA6sG,UAAA7sG,KAAA8sG,iBAAAqyB,GAOAn/H,KAAAq6H,UAAAr6H,KAAAq/H,iBAAAH,EAAAC,EAAAC,GAQAp/H,KAAAs/H,WAAAt/H,KAAAu/H,kBAAAH,GAcAp/H,KAAAnB,KAAA,eAAAuoB,GACApnB,KAAA,YACAA,KAAA,WACA,CAAAw/H,EAAAC,IAAAD,GAAAC,GAGA,MAAA5gI,EAAAmB,KAAAmxF,aAEAnxF,KAAAuzF,aACAjrE,IAAA,MACAxhB,YACA0sF,OACA,KACA,mBACA30F,EAAAyuF,GAAA,8BAGAzuE,UACA7e,KAAA6sG,UACA7sG,KAAAq6H,UACAr6H,KAAAs/H,cAYA5/H,iBAAA2S,GACA,MAAAw6F,EAAA,IAAwBmyB,GAASh/H,KAAAmqF,QAKjC,OAHA0iB,EAAAx2B,IAAAhkE,EACAw6F,EAAAhuG,KAAA,QAAAuoB,GAAApnB,KAAA,SAEA6sG,EAYAntG,iBAAAw/H,EAAAC,EAAAC,GACA,MAAA/E,EAAA,IAAA6E,EAAAl/H,KAAAmqF,OAAAi1C,GAcA,OAZA/E,EAAAhoH,GAAA8sH,EACA9E,EAAAqF,iBAAAN,EACA/E,EAAAx7H,KAAA,SAAAuoB,GAAApnB,MACAq6H,EAAAx7H,KAAA,cAAAuoB,GAAApnB,MACAq6H,EAAAx7H,KAAA,YAAAuoB,GAAApnB,KAAA,YAAA1B,QAEA+7H,EAAAxpG,GAAA,aAGA7wB,KAAAw/H,UAAA,OAGAnF,EAWA36H,kBAAA0/H,GACA,MAAAE,EAAA,IAAyBxuC,GAAI9wF,KAAAmqF,QAC7BtrF,EAAAmB,KAAAmxF,aAoBA,OAlBAmuC,EAAA/rC,aACAjrE,IAAA,MACAxhB,YACA0sF,OACA,KACA,2BACA30F,EAAAyuF,GAAA,8CACAzuF,EAAAyuF,GAAA,0BAAAhvF,QAEA+T,GAAA+sH,GAEAvgH,WAEArG,KAAA3Z,EAAAuoB,GAAA,mBAKAk4G,EAMA5/H,SACAM,KAAAq6H,UAAA/B,SAMA54H,QACAM,KAAAq6H,UAAAvxF,kECjNqB62F,WAAqB7uC,GAI1CpxF,YAAAyqF,GACApqF,MAAAoqF,GACA,MAAA5rF,EAAA4rF,EAAA5rF,EAOAyB,KAAAo2F,aAAA,IAAgCO,GAOhC32F,KAAAuqF,WAAA,IAA8BZ,GAM9B3pF,KAAA4/H,aAAA5/H,KAAA6/H,kBAMA7/H,KAAA8/H,eAAA9/H,KAAA+/H,cAAAxhI,EAAA,MAA0DyhI,GAAApgH,EAAS,kBACnE5f,KAAA8/H,eAAAv9H,KAAA,SAMAvC,KAAAigI,iBAAAjgI,KAAA+/H,cAAAxhI,EAAA,MAA4D2hI,GAAAtgH,EAAU,6BAQtE5f,KAAAmgI,YAAA,IAA+Bx0C,GAQ/B3rF,KAAA63F,aAAA,IAAgCZ,IAChCE,WAAAn3F,KAAAmgI,YACA/pC,aAAAp2F,KAAAo2F,aACAc,iBAAAl3F,KAAAuqF,WACA7sC,SAEAo6C,cAAA,cAEAC,UAAA,SAGA/3F,KAAAuzF,aACAjrE,IAAA,OACAxhB,YACA0sF,OACA,KACA,gBAGAyZ,SAAA,MAEApuF,UACA7e,KAAA4/H,aACA5/H,KAAA8/H,eACA9/H,KAAAigI,oBAOAvgI,SACAK,MAAAwO,SCrEe,UAAAuiC,KAAyBA,IACxCA,EAAA3rB,SAAA2rB,EAAAtwC,QAAA,UAAAswB,EAAAs3B,KACAA,EAAAjmC,iBACA2uB,EAAAlpB,KAAA,YACKsgC,YAAA,IDkEGk4E,EAAetvF,KAAA9wC,QAEvBA,KAAA4/H,aACA5/H,KAAA8/H,eACA9/H,KAAAigI,kBAEAp+H,QAAAmF,IAEAhH,KAAAmgI,YAAAh9H,IAAA6D,GAEAhH,KAAAo2F,aAAAjzF,IAAA6D,EAAAxG,WAGAR,KAAAuqF,WAAAplE,SAAAnlB,KAAAQ,SAKAd,QACAM,KAAA63F,aAAAI,aAQAv4F,kBACA,MAAAnB,EAAAyB,KAAAmqF,OAAA5rF,EACA8hI,EAAA,IAAiCpB,GAAgBj/H,KAAAmqF,OAAc8tC,IAG/D,OAFAoI,EAAAl2F,MAAA5rC,EAAA,MACA8hI,EAAAhG,UAAAnC,YAAA,sBACAmI,EAYA3gI,cAAAyqC,EAAAmjE,EAAA1rE,EAAAlnB,GACA,MAAA4lH,EAAA,IAA2B7zB,GAAUzsG,KAAAmqF,QAUrC,OATAm2C,EAAAl5H,KACA+iC,QACAmjE,OACAC,SAAA,IAEA+yB,EAAA7yC,gBAA+B3mF,YAAc0sF,MAAA5xD,KAC7ClnB,GACA4lH,EAAAt1F,SAAA,WAAA5jB,GAAApnB,KAAA0a,GAEA4lH,4DElJqBC,WAAwBzvC,GAI7CpxF,YAAAyqF,GACApqF,MAAAoqF,GACA,MAAA5rF,EAAA4rF,EAAA5rF,EAOAyB,KAAAo2F,aAAA,IAAgCO,GAOhC32F,KAAAuqF,WAAA,IAA8BZ,GAM9B3pF,KAAAwgI,kBAAAxgI,KAAAygI,uBAMAzgI,KAAA0gI,iBAAA1gI,KAAA+/H,cAAAxhI,EAAA,MAA4DoiI,GAAA/gH,EAAU,UAMtE5f,KAAA4gI,eAAA5gI,KAAA+/H,cAAAxhI,EAAA,MAA0DsiI,GAAAjhH,EAAU,QAOpE5f,KAAAoH,IAAA,QAQApH,KAAAmgI,YAAA,IAA+Bx0C,GAQ/B3rF,KAAA63F,aAAA,IAAgCZ,IAChCE,WAAAn3F,KAAAmgI,YACA/pC,aAAAp2F,KAAAo2F,aACAc,iBAAAl3F,KAAAuqF,WACA7sC,SAEAo6C,cAAA,cAEAC,UAAA,SAGA/3F,KAAAuzF,aACAjrE,IAAA,MACAxhB,YACA0sF,OACA,KACA,mBAGAyZ,SAAA,MAEApuF,UACA7e,KAAAwgI,kBACAxgI,KAAA4gI,eACA5gI,KAAA0gI,oBAOAhhI,SACAK,MAAAwO,UAEAvO,KAAAwgI,kBACAxgI,KAAA4gI,eACA5gI,KAAA0gI,kBAEA7+H,QAAAmF,IAEAhH,KAAAmgI,YAAAh9H,IAAA6D,GAEAhH,KAAAo2F,aAAAjzF,IAAA6D,EAAAxG,WAGAR,KAAAuqF,WAAAplE,SAAAnlB,KAAAQ,SAKAd,QACAM,KAAA63F,aAAAI,aAWAv4F,cAAAyqC,EAAAmjE,EAAA5yF,GACA,MAAA4lH,EAAA,IAA2B7zB,GAAUzsG,KAAAmqF,QAOrC,OANAm2C,EAAAl5H,KACA+iC,QACAmjE,OACAC,SAAA,IAEA+yB,EAAAt1F,SAAA,WAAA5jB,GAAApnB,KAAA0a,GACA4lH,EAQA5gI,uBACA,MAAA4gI,EAAA,IAA2B7zB,GAAUzsG,KAAAmqF,QACrCtrF,EAAAmB,KAAAmxF,aACA5yF,EAAAyB,KAAAzB,EAqBA,OApBA+hI,EAAAl5H,KACA4vG,UAAA,EACAzJ,QAAAhvG,EAAA,QAEA+hI,EAAA7yC,gBACA3mF,YACA0sF,OACA,KACA,4BAEAr+E,KAAAtW,EAAAuoB,GAAA,OAAAjS,MAAsD2nH,GAAa3nH,IACnE/J,OAAA,YAGAk1H,EAAAzhI,KAAA,SAAAuoB,GAAApnB,KAAA,OAAAmV,GACAA,GAAA5W,EAAA,OAEA+hI,EAAAzhI,KAAA,aAAAuoB,GAAApnB,KAAA,OAAAmV,QACAmrH,EAAAhgI,SAAAgoB,IAAA,IACAg4G,EAAAhgI,SAAAqtF,kBACA2yC,2BC1KA,MAAAQ,GAAA,eASqBC,WAAepuG,GAIpCw3C,sBACA,OAAgB6rB,IAKhBt2F,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAA,EAAAy3D,QAAAv5C,KAAAunB,YAAwC0mE,IAMxC/+H,KAAAghI,YAAAhhI,KAAAihI,qBAMAjhI,KAAAkhI,SAAAlhI,KAAAmhI,kBAOAnhI,KAAAs4F,SAAA1lE,EAAAw2C,QAAAlrE,IAA2C83F,IAE3Ch2F,KAAAohI,2BAEAphI,KAAAqhI,iCAQA3hI,qBACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAouG,EAAA,IAAgCT,GAAe3tG,EAAAu3D,QAC/Cm3C,EAAA1uG,EAAA04C,SAAAptE,IAAA,QACAqjI,EAAA3uG,EAAA04C,SAAAptE,IAAA,UAuBA,OAtBA8iI,EAAAniI,KAAA,QAAAuoB,GAAAk6G,EAAA,SACAN,EAAAJ,eAAA/hI,KAAA,aAAAuoB,GAAAk6G,GACAN,EAAAN,iBAAA7hI,KAAA,aAAAuoB,GAAAm6G,GAEAvhI,KAAAmlB,SAAA67G,EAAA,YACAhhI,KAAAwhI,iBAGAxhI,KAAAmlB,SAAA67G,EAAA,cACApuG,EAAAy4C,QAAA,UACArrE,KAAAyhI,YAGAT,EAAAz2C,WAAAnjF,IAAA,OAAAxH,EAAA6xD,KACAzxD,KAAAyhI,UACAhwE,MAGAuvE,EAAAz2C,WAAAnjF,IAAA05H,GAAA,CAAAlhI,EAAA6xD,KACAzxD,KAAAwhI,eACA/vE,MAEAuvE,EAQAthI,kBACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAsuG,EAAA,IAA6BvB,GAAY/sG,EAAAu3D,QACzCm3C,EAAA1uG,EAAA04C,SAAAptE,IAAA,QAmBA,OAlBAgjI,EAAAtB,aAAA/gI,KAAA,SAAAuoB,GAAAk6G,EAAA,SAEAJ,EAAAtB,aAAA/gI,KAAA,cAAAuoB,GAAAk6G,EAAA,YAAAhjI,OACA4iI,EAAApB,eAAAjhI,KAAA,aAAAuoB,GAAAk6G,GAEAthI,KAAAmlB,SAAA+7G,EAAA,cACAtuG,EAAAy4C,QAAA,OAAA61D,EAAAtB,aAAAvF,UAAA75H,QAAAlC,OACA0B,KAAA0hI,oBAGA1hI,KAAAmlB,SAAA+7G,EAAA,cACAlhI,KAAA0hI,oBAGAR,EAAA32C,WAAAnjF,IAAA,OAAAxH,EAAA6xD,KACAzxD,KAAA0hI,kBACAjwE,MAEAyvE,EAQAxhI,2BACA,MAAAkzB,EAAA5yB,KAAA4yB,OACA0uG,EAAA1uG,EAAA04C,SAAAptE,IAAA,QACAK,EAAAq0B,EAAAr0B,EAEAq0B,EAAA23D,WAAAnjF,IAAA05H,GAAA,CAAAj3C,EAAAp4B,KAEAA,IACA6vE,EAAAh5E,WACAtoD,KAAA2hI,YAGA/uG,EAAAujE,GAAAuC,iBAAAv1F,IAAA,OAAAgnF,IACA,MAAAm2C,EAAA,IAA+B7zB,GAAUtiB,GAUzC,OATAm2C,EAAAh4E,WAAA,EACAg4E,EAAAn2F,MAAA5rC,EAAA,MACA+hI,EAAAhzB,KAA0Bs0B,GAAAhiH,EAC1B0gH,EAAAlwF,UAAA0wF,GACAR,EAAA/yB,SAAA,EAEA+yB,EAAAzhI,KAAA,oBAAAuoB,GAAAk6G,EAAA,qBAEAthI,KAAAmlB,SAAAm7G,EAAA,cAAAtgI,KAAA2hI,WACArB,IASA5gI,iCACA,MAAAo5F,EAAA94F,KAAA4yB,OAAAy3D,QAAAv5C,KAAAlwC,SAGAZ,KAAAmlB,SAAA2zE,EAAA,aACA94F,KAAA6hI,2BAGA7hI,KAAA2hI,YAIA3hI,KAAA4yB,OAAA23D,WAAAnjF,IAAA,OAAAxH,EAAA6xD,KACAzxD,KAAA8hI,qBAAA9hI,KAAAghI,YAAA5qC,aAAA1yD,YACA1jC,KAAAghI,YAAAl4F,QACA2oB,OAMAhtC,SAAA,SAGAzkB,KAAA4yB,OAAA23D,WAAAnjF,IAAA,OAAAxH,EAAA6xD,KACAzxD,KAAA+hI,eACA/hI,KAAAyhI,UACAhwE,OAIQ4jD,IACR/vF,QAAAtlB,KAAAkhI,SACA5rB,UAAA,IAAAt1G,KAAA+hI,aACAxsB,iBAAAv1G,KAAAs4F,SAAAxnD,KAAAtwC,SACA0kB,SAAA,IAAAllB,KAAAyhI,YAQA/hI,kBACAM,KAAAgiI,oBAGAhiI,KAAAs4F,SAAAn1F,KACA2tC,KAAA9wC,KAAAghI,YACApwH,SAAA5Q,KAAA64F,4BAQAn5F,eACA,GAAAM,KAAAiiI,eACA,OAEA,MACAX,EADAthI,KAAA4yB,OACA04C,SAAAptE,IAAA,QACA8B,KAAAs4F,SAAAn1F,KACA2tC,KAAA9wC,KAAAkhI,SACAtwH,SAAA5Q,KAAA64F,4BAEA74F,KAAAkhI,SAAAtB,aAAAtH,SAOAt4H,KAAAkhI,SAAAtB,aAAAvF,UAAA75H,QAAAlC,MAAAgjI,EAAAhjI,OAAA,GAOAoB,kBACAM,KAAAiiI,iBACAjiI,KAAAs4F,SAAAloF,OAAApQ,KAAAkhI,UAGAlhI,KAAA4yB,OAAAy3D,QAAAv5C,KAAAhI,SASAppC,UACAM,KAAA4yB,OACA04C,SAAAptE,IAAA,QACAoqD,YAIAtoD,KAAA6hI,0BAMA7hI,KAAA8hI,mBACA9hI,KAAAwhI,eAGAxhI,KAAAkiI,mBATAliI,KAAAkiI,kBACAliI,KAAAwhI,gBAYAxhI,KAAAmiI,oBASAziI,UACA,IAAAM,KAAAoiI,aACA,OAEA,MAAAxvG,EAAA5yB,KAAA4yB,OACA5yB,KAAAqlB,cAAAuN,EAAAujE,GAAA,UAEAn2F,KAAA0hI,kBAEA1hI,KAAAs4F,SAAAloF,OAAApQ,KAAAghI,aAEApuG,EAAAy3D,QAAAv5C,KAAAhI,QAUAppC,mBACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAkmE,EAAAlmE,EAAAy3D,QAAAv5C,KAAAlwC,SACA,IAAAyhI,EAAAriI,KAAA6hI,0BACAS,EAAAC,IA4BA,SAAAA,IACA,OAAAzpC,EAAAn1D,UAAAmF,MAAAtK,eAAAud,UAAA1P,KAAA/qC,KAAA69B,GAAA,YA5BAn/B,KAAAmlB,SAAAyN,EAAAujE,GAAA,cACA,MAAAqsC,EAAAxiI,KAAA6hI,0BACArjF,EAAA+jF,IAWAF,IAAAG,IAAAH,GAAA7jF,IAAA8jF,EACAtiI,KAAAyhI,UAQAzhI,KAAAs4F,SAAAM,eAAA54F,KAAA64F,2BAEAwpC,EAAAG,EACAF,EAAA9jF,IAaAyjF,qBACA,OAAAjiI,KAAAs4F,SAAAhC,QAAAt2F,KAAAkhI,UASAc,yBACA,OAAAhiI,KAAAs4F,SAAAhC,QAAAt2F,KAAAghI,aAUAc,yBACA,OAAA9hI,KAAAs4F,SAAAjC,cAAAr2F,KAAAghI,YASAoB,mBACA,OAAApiI,KAAAiiI,gBAAAjiI,KAAAgiI,mBAUAD,mBAEA,OADA/hI,KAAAs4F,SAAAjC,aACAr2F,KAAAkhI,UAAAlhI,KAAA8hI,mBAYApiI,0BACA,MAAAoxC,EAAA9wC,KAAA4yB,OAAAy3D,QAAAv5C,KACAgoD,EAAAhoD,EAAAlwC,SACA6hI,EAAAziI,KAAA6hI,0BAIA,OAAgBz2H,OAHhBq3H,EACA3xF,EAAAC,aAAAwL,aAAAkmF,GACA3xF,EAAAC,aAAA2nB,eAAAogC,EAAAn1D,UAAAyF,kBAcA1pC,0BACA,MAAAoxC,EAAA9wC,KAAA4yB,OAAAy3D,QAAAv5C,KACAnN,EAAAmN,EAAAlwC,SAAA+iC,UACA,GAAAA,EAAAgD,YACA,OAAA+7F,GAAA/+F,EAAAsH,oBACS,CAGT,MAAApC,EAAAlF,EAAAyF,gBAAAS,aACA84F,EAAAD,GAAA75F,EAAA7sB,OACA4mH,EAAAF,GAAA75F,EAAA5sB,KACA,OAAA0mH,MAAAC,GAIA9xF,EAAA23B,cAAAk6D,GAAA94F,aAAA/D,QAAA+C,GACA85F,EAJA,OAgBA,SAAAD,GAAA9xH,GACA,OAAAA,EAAA4tB,eAAA6N,KAAA+I,ITvbO,SAAA9zC,GACP,OAAAA,EAAA69B,GAAA,uBAAA79B,EAAAiiC,kBAAAm5F,KSsboDmG,CAAaztF,UCtb5C0tF,WAAanwG,GAIlCw3C,sBACA,OAAWw0D,GAAaoC,IAMxB53D,wBACA,oBCpBqB45D,WAAsBnlC,GAY3Cl+F,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACAlhB,EAAAkhB,EAAA9hE,SAEAZ,KAAA8G,WAAA06C,EAAA7d,UAAAqS,gBACAh2C,KAAA1B,MAAAkjD,EAAA7d,UAAA1sB,aAAA,YACAjX,KAAAsoD,UAAAoa,EAAAC,OAAA8sC,0BAAAjuD,EAAA7d,UAAA,YAmBAjkC,QAAA+T,GACA,MAAAivD,EAAA1iE,KAAA4yB,OAAA8vC,MACA/+B,EAAA++B,EAAA9hE,SAAA+iC,UAEA++B,EAAA7J,OAAAtrB,IAEA,GAAA5J,EAAAgD,YAAA,CACA,MAAA/1B,EAAA+yB,EAAAsH,mBAGA,GAAAtH,EAAArD,aAAA,aAEA,MAAAi8F,EAAuBL,GAAav4F,EAAAsH,mBAAAtH,EAAA1sB,aAAA,YAAAyrD,GACpCn1B,EAAAtkC,aAAA,WAAAwK,EAAA0B,KAAAonH,GAGAhvF,EAAAkI,aAAA8mF,QAKA,QAAA9oH,EAAA0B,KAAA,CACA,MAAArO,EAAwBkyD,GAAKr1B,EAAAqS,iBAC7BlvC,EAAAM,IAAA,WAAAqM,EAAA0B,MAEA,MAAA7T,EAAAisC,EAAAg7B,WAAA90D,EAAA0B,KAAArO,GAEAymC,EAAAt9B,OAAA3O,EAAAsP,GAGA28B,EAAAkI,aAAAlI,EAAAitC,cAAAl5E,SAEI,CAGJ,MAAAgmC,EAAAo7B,EAAAC,OAAA0sC,eAAA1rE,EAAAgG,YAAA,YACA,UAAAd,KAAAvB,EACAiG,EAAAtkC,aAAA,WAAAwK,EAAA0B,KAAA0zB,GACA0E,EAAAtkC,aAAA,cAAAwK,EAAAo1B,aC5EqBm6F,WAA4BjO,GAQjDr1H,aAAA40H,EAAAr2D,GACA,iBAAAq2D,EAAA/xH,KAMA7C,UACAK,MAAA89F,UACA79F,KAAAsoD,WACAtoD,KAAAg1H,kBACAh1H,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UAAArD,aAAA,aACAtgC,KAAA4yB,OAAA8vC,MAAA9hE,SAAA+iC,UAAArD,aAAA,gBAWA5gC,UACA,MAAAgjE,EAAA1iE,KAAA4yB,OAAA8vC,MACA/+B,EAAA++B,EAAA9hE,SAAA+iC,UAEAA,EAAAgD,aAIA+7B,EAAA7J,OAAAtrB,IAEA,MAAAkvF,EAAA94F,EAAAgD,aACMu1F,GAAav4F,EAAAsH,mBAAAtH,EAAA1sB,aAAA,cAAA0sB,EAAAgG,YAGnB,UAAAd,KAAA4zF,EACAlvF,EAAAvkC,gBAAA,WAAA6/B,GACA0E,EAAAvkC,gBAAA,cAAA6/B,MCvDA,MAAAo6F,GAAA7kI,OAAA,iBAEO,SAAA8kI,GAAAp8H,EAAAymC,GACP,GAAAzmC,EAAA,CACA,MAAA2M,KACA,UAAA7U,KAAAb,OAAAgW,KAAAjN,GACA,QAAAlI,IAGA6U,EAAA7U,GAAAkI,EAAAlI,IAEA,MAAAi+H,EAAAtvF,EAAA2J,uBAAA,IAAAzjC,GAAkEgR,SAAA,IAElE,OADA8oB,EAAA00E,kBAAAghB,IAAA,EAAApG,GACAA,SCQqBsG,WAAsBxE,GAI3Cj/H,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OACA5yB,KAAAojI,cAAAxwG,EAAA0zC,OAAApoE,IAAA,sBAAA00B,EAAA0zC,OAAApoE,IAAA,sBAAAgnB,SAAA,KAGA0N,EAAA8vC,MAAAC,OAAAxwB,OAAA,SAAwC27B,iBAAA,4BAExCl7C,EAAA03D,WAAAjU,IAAA,gBACAlzE,IAASujE,IAA6BhE,MAAA,WAAA5xB,KAAA,CAAA37B,EAAAo4B,IAC3B34B,GAAiBO,EAAAo4B,MAG5B3a,EAAA03D,WAAAjU,IAAA,mBACAlzE,IAASujE,IAA6BhE,MAAA,WAAA5xB,KAAA,CAAA37B,EAAAo4B,IAC3B34B,GAAmBkoH,GAAa3nH,GAAAo4B,MAG3C3a,EAAA03D,WAAAjU,IAAA,gBACAlzE,IAASujE,IAA6BhE,MAAA,cAAA5xB,KAAA,CAAAhqC,EAAAymC,IAC3B21F,GAA0Bp8H,EAAAymC,MAGrC3a,EAAA03D,WAAAjU,IAAA,mBACAlzE,IAASujE,IAA6BhE,MAAA,cAAA5xB,KAAA,CAAAhqC,EAAAymC,IAC3B21F,GAA0Bp8H,EAAAymC,MAGrC3a,EAAA03D,WAAAjU,IAAA,UACAlzE,IAAS+wE,IACTpjC,MACAlzC,KAAA,IACAkJ,YACAqO,MAAA,IAGAutD,OACA9jE,IAAA,WAEAN,MAAAy3C,KAAA9+B,aAAA,YAIA2b,EAAA03D,WAAAjU,IAAA,UACAlzE,IAAS+wE,IACTpjC,MACAlzC,KAAA,KAEA8kE,OACA9jE,IAAA,cACAN,MAAAy3C,IACA,MAAAtiC,KACA,UAAA7U,EAAAN,KAAAy3C,EAAAC,gBACAviC,EAAA7U,GAAAN,EAEA,OAAAmV,OAMAzT,KAAAojI,eACAxwG,EAAA04C,SAAAnoE,IAAA,WAAoC4/H,GAAanwG,IACjDA,EAAA04C,SAAAnoE,IAAA,aAAsC6/H,GAAmBpwG,MAEzDA,EAAA04C,SAAAnoE,IAAA,WAAoCm5H,GAAW1pG,IAC/CA,EAAA04C,SAAAnoE,IAAA,aAAsCq5H,GAAa5pG,KAIjDqqG,GAA2BrqG,EAAAy3D,QAAAv5C,KAAAle,EAAA8vC,MAAA1iE,KAAA,YAG7BA,KAAA4+H,6BCtFqByE,WAAiBtC,GAOtCrhI,iCACA,MAAAo5F,EAAA94F,KAAA4yB,OAAAy3D,QAAAv5C,KAAAlwC,SAIAZ,KAAAmlB,SAAA2zE,EAAA,aACA94F,KAAA6hI,2BAIA7hI,KAAA2hI,YAKA3hI,KAAA4yB,OAAA23D,WAAAnjF,IAAA,OAAAxH,EAAA6xD,KACAzxD,KAAA8hI,qBAAA9hI,KAAAghI,YAAA5qC,aAAA1yD,YACA1jC,KAAAghI,YAAAl4F,QACA2oB,OAMAhtC,SAAA,SAIAzkB,KAAA4yB,OAAA23D,WAAAnjF,IAAA,OAAAxH,EAAA6xD,KACAzxD,KAAA+hI,eACA/hI,KAAAyhI,UACAhwE,OAKE4jD,IACF/vF,QAAAtlB,KAAAkhI,SACA5rB,UAAA,IAAAt1G,KAAA+hI,aACAxsB,iBAAAv1G,KAAAs4F,SAAAxnD,KAAAtwC,SACA0kB,SAAA,KACAllB,KAAAoiI,eAKApiI,KAAA0hI,kBAGA1hI,KAAAs4F,SAAAloF,OAAApQ,KAAAghI,iBAaAthI,mBACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAkmE,EAAAlmE,EAAAy3D,QAAAv5C,KAAAlwC,SAEA,IAAAyhI,EAAAriI,KAAA6hI,0BACAS,EAAAC,IAoCA,SAAAA,IACA,OAAAzpC,EAAAn1D,UAAAmF,MAAAtK,eACAud,UACA1P,KAAA/qC,KAAA69B,GAAA,YArCAn/B,KAAAmlB,SAAAyN,EAAAujE,GAAA,cACA,MAAAqsC,EAAAxiI,KAAA6hI,0BACArjF,EAAA+jF,KAYAF,IAAAG,IACAH,GAAA7jF,IAAA8jF,IACAtiI,KAAAyhI,UAcAY,EAAAG,EACAF,EAAA9jF,IAgBA9+C,UACAM,KAAA4yB,OACA04C,SAAAptE,IAAA,QAEAoqD,YAKAtoD,KAAA6hI,0BAMA7hI,KAAA8hI,mBACA9hI,KAAAwhI,eAIAxhI,KAAAkiI,kBAVAliI,KAAAwhI,eAeAxhI,KAAAmiI,oBAQAziI,eACA,GAAAM,KAAAiiI,eACA,OAGA,MAAArvG,EAAA5yB,KAAA4yB,OACA0uG,EAAA1uG,EAAA04C,SAAAptE,IAAA,QACA46F,EAAAlmE,EAAAy3D,QAAAv5C,KAAAlwC,SAGA,GADAZ,KAAAojI,cAAAxwG,EAAA0zC,OAAApoE,IAAA,sBAAA00B,EAAA0zC,OAAApoE,IAAA,sBAAAgnB,SAAA,KACAllB,KAAAojI,cAAA,CACA,MAAA3vH,KACA,GAAA6tH,EAAAx6H,WACA,UAAAlI,EAAAN,KAAAgjI,EAAAx6H,WACA2M,EAAA7U,GAAAN,EAGA,IAAAsB,EAAAgzB,EAAA2oE,UAEA9nF,EAAA6vH,cACA7vH,EAAA6vH,gBAGA,MAAA9kF,EA+CAs6C,EAAAn1D,UAAAmF,MAAAtK,eACAud,UACA1P,KAAA/qC,KAAA69B,GAAA,YAhDA,GAAAqf,KAAAvnC,aAAA,iBACA,MAAAssH,EAAA/kF,EAAAvnC,aAAA,gBACAusH,EAAAhlF,EAAAvnC,aAAA,uBACA,IAAA5L,EAAAk4H,EAEA,GAAAC,EAAA,CACA,MAAAC,EAAAjlF,EAAAhgB,eAAA6N,KAAA/qC,KAAAm/B,SAAA+iG,IACAC,KAAAxsH,aAAA,QACA5L,EAAA,IAAAo4H,EAAAxsH,aAAA,UAAAssH,GAIA,MAAAG,EAAA9wG,EAAAslD,cAAA70E,iBAAAgI,GAEA,IAAAs4H,EAAA,GACA,UAAAxxH,KAAAuxH,EACAC,GAAAxxH,EAAAyxH,UAEAhkI,EAAA+jI,EAEAlwH,EAAA6vH,YAAA,gBAAAC,EAGA9vH,EAAA6vH,YAAAO,WAAAjkI,EAEAI,KAAAojI,cAAA3vH,EAAA6vH,YAAA72H,IACAmmB,EAAAy3D,QAAAv5C,KAAAhI,QACA9oC,KAAA4yB,OAAAy4C,QAAA,OAAA5+D,UAGAzM,KAAAs4F,SAAAn1F,KACA2tC,KAAA9wC,KAAAkhI,SACAtwH,SAAA5Q,KAAA64F,4BAGA74F,KAAAkhI,SAAAtB,aAAAtH,SAQAt4H,KAAAkhI,SAAAtB,aAAAvF,UAAA75H,QAAAlC,MAAAgjI,EAAAhjI,OAAA,UClOqBwlI,WAA2BnxG,GAIhDjzB,YAAAkzB,GACA7yB,MAAA6yB,GACAA,EAAA0zC,OAAAvpE,OAAA,8BACA61B,EAAA0zC,OAAAvpE,OAAA,8BAMAotE,sBACA,OAAWwrD,IAGXj2H,OACAM,KAAA+jI,eAAA/jI,KAAA4yB,OAAA0zC,OAAApoE,IAAA,uBAAAgnB,SAEAllB,KAAA4yB,OAAAlvB,UAAAijF,mBAAA,gBAA+DguC,IAE/D30H,KAAA4yB,OAAA03D,WAAAjU,IAAA,mBAAAlzE,IAAuDikE,IACvD1E,MAAA,kBACA5xB,KAAA,qBAIA9wC,KAAA4yB,OAAA03D,WAAAjU,IAAA,mBAAAlzE,IAAuDqxH,GAAuBx0H,KAAA4yB,QAC9ErV,OAAA,gBACAuzB,KAAA,CAAAwjF,EAAAr2D,EAAAgJ,KACA,MAAAx4D,EAAAw4D,EAAAW,uBACA,WACK6sD,GAAkBH,EAAAr2D,IAGvB,OADAr7D,QAAAkN,IAAArB,GACWuzG,GAAQvzG,EAAAw4D,OAEXxiD,SAAA,gBC7Cau/G,WAAiCjP,GAItDr1H,YAAAkzB,GACA7yB,MAAA6yB,GACA5yB,KAAAikI,eAAArxG,EAAA0zC,OAAApoE,IAAA,uBAAAgnB,SAMAxlB,aAAA40H,GACA,uBAAAA,EAAA/xH,KAMA7C,QAAA+M,GACAzM,KAAAikI,eAAAjkI,KAAAy1H,oBAAA3uH,WAAA,mBAAA2F,EAAAiE,UAAA0T,IACAA,IAAApkB,KAAAq1H,eAAAp+G,aAAA,oBAIAjX,KAAA4yB,OAAA8vC,MAAA7J,OAAAtrB,IACAA,EAAAtkC,aAAA,kBAAAmb,EAAApkB,KAAAq1H,uEClBqB6O,WAAsBvxG,GAI3Cw3C,sBACA,OAAW25D,GAAoBrR,IAG/B/yH,OACAM,KAAAorE,QAAA,IAAqB44D,GAAwBhkI,KAAA4yB,QAC7C5yB,KAAA4yB,OAAA04C,SAAAnoE,IAAA,oBAAAnD,KAAAorE,SAEAprE,KAAA4yB,OAAAujE,GAAAuC,iBAAAv1F,IAAA,qBAAAgnF,IACA,MAAAr5C,EAAA,IAAoB27D,GAQpB,OAPA37D,EAAA1pC,KACA+iC,MAAAggD,EAAA5rF,EAAA,6BACA+uG,KAAU62B,GAAAvkH,EACV2tF,SAAA,IAEAz8D,EAAAjyC,KAAA,aAAAuoB,GAAApnB,KAAAorE,QAAA,aACAprE,KAAAmlB,SAAA2rB,EAAA,cAAA9wC,KAAA4yB,OAAAy4C,QAAA,qBAAoF36D,UAAA,YACpFogC,IAGA9wC,KAAA4yB,OAAAujE,GAAAuC,iBAAAv1F,IAAA,qBAAAgnF,IACA,MAAAr5C,EAAA,IAAoB27D,GAQpB,OAPA37D,EAAA1pC,KACA+iC,MAAAggD,EAAA5rF,EAAA,gBACA+uG,KAAU82B,GAAAxkH,EACV2tF,SAAA,IAEAz8D,EAAAjyC,KAAA,aAAAuoB,GAAApnB,KAAAorE,QAAA,aACAprE,KAAAmlB,SAAA2rB,EAAA,cAAA9wC,KAAA4yB,OAAAy4C,QAAA,qBAAoF36D,UAAA,SACpFogC,IAIApxC,YACAM,KAAA4yB,OAAAw2C,QAAAlrE,IAA2Du0H,IAC3DlqC,SAAA,eACAnmD,OAAA,2CACA0wF,YAAA,IAAA9yH,KAAAorE,QAAA9iB,oBC1CA,MAAM+7E,GAAOlxC,GAAM,YAWEmxC,WAAwB73B,GAI7C/sG,YAAAyqF,GACApqF,MAAAoqF,GAEA,MAAAtrF,EAAAmB,KAAAmxF,aAGAnxF,KAAAyzF,WAAA,EAOAzzF,KAAAoH,IAAA,SAOApH,KAAAoH,IAAA,UAEApH,KAAAytF,gBACA3mF,YACA0sF,MAAA,0BACAhwF,OACAg9C,IAAA3hD,EAAAuoB,GAAA,MAAA8yD,GAAiCmqD,GAAInqD,IACrCz5B,KAAA5hD,EAAAuoB,GAAA,OAAA8yD,GAAmCmqD,GAAInqD,uCCzCjCqqD,WAA2B11E,GACjCnvD,YAAAoxC,GACA/wC,MAAA+wC,GACA9wC,KAAA8uD,aAAA,aACA9uD,KAAAkoD,YAAA,EAGAxoD,WAAAivD,GACA3uD,KAAA4nB,KAAA+mC,EAAApsD,KAAAosD,UClBqB61E,WAA8B31E,GACnDnvD,YAAAoxC,GACA/wC,MAAA+wC,GACA9wC,KAAA8uD,aAAsB21E,GAAA,EACtBzkI,KAAAkoD,YAAA,EAGAxoD,WAAAivD,GACA3uD,KAAA4nB,KAAA+mC,EAAApsD,KAAAosD,UCFqB+1E,WAA6B9mC,GAIlDl+F,QAAA8H,GACAxH,KAAA4yB,OAAA8vC,MAAA7J,OAAAtrB,IACAvtC,KAAA2kI,kBAAAn9H,EAAA+lC,KAIA7tC,kBAAA8H,EAAA+lC,KAEAv9B,MAAA,IAAAhQ,KAAA4kI,gBAAAp9H,EAAA+lC,GACAt9B,OAAA,IAAAjQ,KAAAwmE,cAAAh/D,EAAA+lC,GACAr9B,KAAA,IAAAlQ,KAAA6kI,YAAAr9H,EAAA+lC,GACAp9B,QAAA,IAAAnQ,KAAA8kI,eAAAt9H,EAAA+lC,GACAn9B,OAAA,IAAApQ,KAAA+kI,cAAAv9H,EAAA+lC,GACAzmC,WAAA,IAAA9G,KAAA+3G,cAAAvwG,EAAA+lC,GACAvkC,gBAAA,IAAAhJ,KAAAgJ,gBAAAxB,EAAA+lC,GACAl9B,KAAA,IAAArQ,KAAAqQ,KAAA7I,EAAA+lC,KACG/lC,EAAAkJ,aAGHhR,QAAAixC,GACA,MAAAG,EAAA9wC,KAAA4yB,OAAAy3D,QAAAv5C,KAAAC,aAAA4Q,aAAAhR,GACAiB,EAAA5xC,KAAA4yB,OAAAy3D,QAAAv5C,KAAA+iC,iBAAA/iC,EAAA,OACA,OAAA9wC,KAAA4yB,OAAAy3D,QAAA9rB,OAAAH,gBAAAxsB,GAAAjhC,OAGAjR,iBAAA+Q,WAAmBA,GAAa88B,GAChC98B,EAAA1C,IAAA2C,KAAAH,QAAA1O,QAAA6O,GAAA1Q,KAAA2kI,kBAAAj0H,EAAA68B,IAGA7tC,eAAAc,QAAiBA,EAAAmQ,SAAAC,WAAAC,YAAA5J,QAA6CsmC,GAC9D,MAAAxqB,EAAA/iB,KAAA61E,QAAAllE,GACAmD,EAAAy5B,EAAAhqC,qBAA0C/C,KAE1C,GADA+sC,EAAAwqE,cAAA9wG,EAAA6M,GACA,QAAAlD,EACA28B,EAAAilC,OAAA1+D,EAAAiP,GACAwqB,EAAAkI,aAAA3hC,EAAA,UAEA,CACA,MAAAkxH,EAAAjiH,EAAAob,SAAAttB,GACA08B,EAAAt9B,OAAA6D,EAAAkxH,EAAAp0H,GACA28B,EAAAkI,aAAA3hC,EAAA,OAIApU,aAAAiR,OAAeA,EAAAC,WAAAxF,SAAAyF,aAAsC08B,GACrD,MAAAxqB,EAAA/iB,KAAA61E,QAAAllE,GACAwnE,EAAAp1D,EAAAob,SAAA/yB,GACA45H,EAAAjiH,EAAAob,SAAAttB,GACA08B,EAAAt9B,OAAAkoE,EAAA6sD,EAAAp0H,GACA28B,EAAAkI,aAAA0iC,EAAA,MAGAz4E,gBAAAc,QAAkBA,EAAA4K,UAAkBmiC,GACpC,MAAA4qC,EAAAn4E,KAAA61E,QAAAzqE,GACAmiC,EAAAklE,OAAAt6B,SAAuC33E,KACvC+sC,EAAAkI,aAAA0iC,EAAA,MAGAz4E,eAAA0L,OAAiBA,GAASmiC,GAC1B,MAAA4qC,EAAAn4E,KAAA61E,QAAAzqE,GACAmiC,EAAAn9B,OAAA+nE,GAGAz4E,eAAA0L,OAAiBA,EAAAnE,QAAesmC,GAChC,MAAA4qC,EAAAn4E,KAAA61E,QAAAzqE,GACAmiC,EAAAwqE,cAAA9wG,EAAAkxE,GAGAz4E,iBAAA0L,OAAmBA,EAAAxM,OAAc2uC,GACjC,MAAA4qC,EAAAn4E,KAAA61E,QAAAzqE,GACAmiC,EAAAvkC,gBAAApK,EAAAu5E,GAGAz4E,MAAAoR,OAAQA,EAAA1F,UAAiBmiC,GACzB,MAAA2qC,EAAAl4E,KAAA61E,QAAA/kE,GACAqnE,EAAAn4E,KAAA61E,QAAAzqE,GACAmiC,EAAAt9B,OAAAioE,EAAAC,EAAA,UACA5qC,EAAAn9B,OAAA+nE,oMC7EA,MAAA8sD,IACAC,MAASC,GAAAvlH,EACTwlH,eAAkBC,GAAAzlH,EAClB0lH,SAAYC,GAAA3lH,EACZ4lH,MAASC,GAAA7lH,EACT8lH,KAAQC,GAAA/lH,EACRpH,KAAQotH,GAAAhmH,EACRimH,WAAcC,GAAAlmH,EACdmmH,MAASC,GAAApmH,GAGT,SAASqmH,GAAIhK,GACb,OAAAA,EAAAiK,QACWnoI,OAAAooI,GAAA,EAAApoI,EAAGk+H,EAAAiK,UAEdjB,GAAAhJ,EAAA3uB,MACWvvG,OAAAooI,GAAA,EAAApoI,EAAGknI,GAAAhJ,EAAA3uB,QAELvvG,OAAAooI,GAAA,EAAApoI,EAAGknI,GAAAS,aAGSU,WAAoBD,GAAA,EACzCl+H,wBACA,OACAspC,WAAkBhvC,KAAAwC,SAClBshI,QAAe9jI,KAAAwC,SACfivG,QAAezxG,KAAAwC,SACfuhI,YAAmB/jI,KAAAwC,SACnBoe,UAAiB5gB,KAAA+C,QACjBihI,WAAkBhkI,KAAA+C,QAClBkhI,aAAoBjkI,KAAA+C,SAIpB5F,cACAK,QACAC,KAAAqmI,QAAA,EACArmI,KAAAuxC,WAAA,EACAvxC,KAAAumI,UAAA,MACAvmI,KAAAwmI,YAAA,SACAxmI,KAAAmjB,YACAnjB,KAAAg0G,QAAA,EACAh0G,KAAAsmI,YAAA,EAGA5mI,oBACAK,MAAAqO,oBAGA1O,cACA,OAAW0mI,GAAWK,kBAAA7wH,OAAAqmH,GACtBj8H,KAAAmjB,SAAAjM,MAAA,KAAAuuC,SAAAw2E,EAAA5pH,KAIA3S,SACA,OAAWymI,GAAA;;UAEDO,GAAA9mH;;SAEF5f,KAAAuxC,WAAAvxC,KAAAsmI,WACEH,GAAA;;gBAEMnmI,KAAAqmI,OACEF,GAAA;;gCAEcnmI,KAAA2mI;;;;wBAIR3mI,KAAAumI;;oBAGxB;iBACgBvmI,KAAAqmI,QAAArmI,KAAAg0G,OACEmyB,GAAA;;wBAEMnmI,KAAA4mI,cAAA74H,IACxBkuH,GAAmCkK,GAAA;;;wCAGK9qH,GACxCrb,KAAA6mI,oBAAAxrH,EAAA4gH,EAAA5pH;;;;;kCAKkC4zH,GAAIhK;;gCAENA,EAAA9xF;;;;;sBAMVnqC,KAAAg0G,OACEmyB,GAAA;;sCAEcnmI,KAAA8mI;;;;;gCAKNb,IAAM34B,KAAA;;;;;;0BAOtC;oBAEA;;YAGU64B,GAAA;;;0BAGgBnmI,KAAA+mI;;;;kBAIR/mI,KAAAwmI;;;;MAOlB9mI,mBACAM,KAAAg0G,QAAAh0G,KAAAg0G,OAGAt0G,qBACAM,KAAAsmI,YAAAtmI,KAAAsmI,WAGA5mI,oBACAM,KAAAg0G,QAAA,EAGAt0G,oBAAA2b,EAAA2rH,GACAhnI,KAAA2f,cAAuB8kH,GAAA,EAAkBuC,EAAAhnI,OACzCA,KAAAsmI,YAAA,GAIAz7H,eAAA9N,OAAA,iBAAwCqpI,+FCMxCv7H,eAAA9N,OAAA,2BA9JsBopI,GAAA,EACtBl+H,wBACA,OACAm6B,MAAAv+B,MACAojI,eAAAjiI,OACAi3H,QAAA32H,QAIA5F,cACAK,QACAC,KAAAoiC,SACApiC,KAAAinI,eAAA,EAGAvnI,oBACAK,MAAAqO,oBAEApO,KAAAknI,WACA3sH,iBAAA,aAAA1I,IACA7R,KAAAoiC,MAAAv+B,MAAAC,KAAA9D,KAAA6e,UAAA9Q,IAAA,CAAA2V,EAAA9hB,MACA2xG,MAAA3xG,EAAA,EACAA,aAIA5B,KAAAoiC,MAAAv+B,MAAAC,KAAA9D,KAAA6e,UAAA9Q,IAAA,CAAA2V,EAAA9hB,MACA2xG,MAAA3xG,EAAA,EACAA,WAEA5B,KAAAmnI,eAAAnnI,KAAAinI,gBAGAvnI,SACA,OAAWymI,GAAA;;UAEDiB,GAAAxnH;;;;;;0CAM+B,IAAA5f,KAAAinI;;;;;;;;gBAQzBjnI,KAAAoiC,MAAAr0B,IAAAoE,GAAAnS,KAAAsgI,OAAAnuH;8BACc,IAAAnS,KAAA6sC;;;;;;;;;0BASJ,IAAA7sC,KAAAqnI,SAAA;;uEAG1B,IADuErnI,KACvEinI,eACA,WACA;;kBAEkBlpI,OAAAooI,GAAA,EAAApoI,EAAKupI,GAAA1nH;;;0BAGG,IAAA5f,KAAAqnI,SAAA;;wEAE8CrnI,KACxEinI,iBACAjnI,KAAAoiC,MAAAhgC,OAAA,EACA,WACA;;kBAEkBrE,OAAAooI,GAAA,EAAApoI,EAAKwpI,GAAA3nH;;;0BAGG,IAAA5f,KAAAwnI;;wEAE8CxnI,KACxEoiC,MAAAhgC,OAAA,EACA,WACA;;kBAEkBrE,OAAAooI,GAAA,EAAApoI,EAAK0pI,GAAA7nH;;;;;;MASvBlgB,UACAM,KAAA2f,cAAuB8kH,GAAA,EAAiBzkI,KAAAi8H,QAAAj8H,KAAA,QACxCA,KAAAinI,eAAAjnI,KAAAoiC,MAAAhgC,OAGA1C,aACAM,KAAAoiC,MAAAhgC,QAAA,IACApC,KAAA2f,cAAyB8kH,GAAA,EAAiBzkI,KAAA6e,SAAA7e,KAAAinI,kBAC1CjnI,KAAAinI,iBAAAjnI,KAAAoiC,MAAAhgC,OAAA,IACApC,KAAAinI,gBAAA,IAKAvnI,SAAAkR,GACA,SAAAA,GAAA,IAAA5Q,KAAAinI,iBACAjnI,KAAA2f,cACQ8kH,GAAA,EACRzkI,KACA,SACAA,KAAAinI,eACAjnI,KAAAinI,eAAA,IAGAjnI,KAAAinI,gBAAA,GAEA,UAAAr2H,GAAA5Q,KAAAinI,iBAAAjnI,KAAAoiC,MAAAhgC,OAAA,IACApC,KAAA2f,cACQ8kH,GAAA,EACRzkI,KACA,SACAA,KAAAinI,eACAjnI,KAAAinI,eAAA,IAGAjnI,KAAAinI,gBAAA,GAIAvnI,OAAAyS,GACA,OAAWg0H,GAAA;;kBAEO,IAAAnmI,KAAAmnI,eAAAh1H,EAAAvQ;sCACoB5B,KAAAinI,iBAAA90H,EAAAvQ,MACtC,SACA;WACWuQ,EAAAohG;;MAKX7zG,eAAAkC,GACA5B,KAAA6e,SAAAzc,QAAAR,IAAA5B,KAAA6e,SAAAjd,KAKA5B,KAAAinI,eAAArlI,+ECoKAiJ,eAAA9N,OAAA,wBA/TmBopI,GAAA,EACnBl+H,wBACA,OACAg0H,QAAA32H,OACA88B,MAAAv+B,MACA6jI,WAAA1iI,OACA2iI,YAAA5iI,SAIArF,cACAK,QACAC,KAAAoiC,SACApiC,KAAA0nI,YAAA,EACA1nI,KAAA2nI,aAAA,EACA3nI,KAAAi8H,QAAA,KAGAv8H,oBACAK,MAAAqO,oBACApO,KAAAkxC,cAAAgjB,KAAA1vD,cAAA,kBACAxE,KAAA4nI,MAAA5nI,KAAAkxC,cAAAgjB,KAAA1vD,cAAA,mBAEAxE,KAAA4nI,MAAA5nI,KAAAkxC,cAAA3tC,cAAA,OACAvD,KAAA4nI,MAAA3+H,aAAA,sBACAjJ,KAAAkxC,cAAAgjB,KAAAjwD,YAAAjE,KAAA4nI,QAGA,IAAAvkH,iBAAA,IAAArjB,KAAA6nI,gBACAtkH,QAAAvjB,MACA8G,YAAA,EACA0c,WAAA,EACAC,SAAA,IAGAzjB,KAAA6nI,eAEA7nI,KAAA6e,SAAAzc,OAAA,IACApC,KAAA0nI,WAAA,GAIAhoI,eACAM,KAAAoiC,MAAAv+B,MAAAC,KAAA9D,KAAA6e,UAAA9Q,IAAA,CAAA2V,EAAA9hB,MAEA2xG,OACA7vF,EAAAu1B,QAAA6uF,eACApkH,EAAAzM,aAAAyM,EAAAu1B,QAAA6uF,gBACA,OACApkH,EAAAu1B,QAAA8uF,UACA,eACA7zH,QAAAwP,EAAAu1B,QAAA+uF,WACApmI,WAGA5B,KAAAioI,YAAAjoI,KAAA0nI,YAGAhoI,YACAM,KAAA2nI,aAAA,EACI5pI,OAAAgP,GAAA,EAAAhP,CAAMiC,KAAAkoI,cAAAloI,KAAA4nI,OAGVloI,aACAM,KAAA2nI,aAAA,EACI5pI,OAAAgP,GAAA,EAAAhP,CAAMiC,KAAAkoI,cAAAloI,KAAA4nI,OAGVloI,cACA,OAAWymI,GAAA;;4BAEiB,KAC5BnmI,KAAAmoI;2BAE2Bt2H,IAC3B7R,KAAAooI,WAAAv2H,EAAAtB;sBAEsB,IAAAvQ,KAAAwnI;wBACExnI,KAAAoiC,MAAApiC,KAAA0nI,YAAAn0B;0BACEvzG,KAAAoiC,MAAApiC,KAAA0nI,YAAAxzH;wBACFlU,KAAA0nI;wBACA1nI,KAAA2nI,YAAA;;;MAMxBjoI,SACA,OAAWymI,GAAA;;UAEDkC,GAAAzoH;;;;;cAKI5f,KAAAoiC,MAAAr0B,IAAAoE,GAAAnS,KAAA+nI,SAAA51H;;wBAEU,IAAAnS,KAAA6sC;;;;;;;;4CAQmB,IAAA7sC,KAAA0nI;;;;;;MAS3ChoI,SAAAyS,GACA,OAAWg0H,GAAA;;kBAEO,IAAAnmI,KAAAioI,YAAA91H,EAAAvQ;0CACwB5B,KAAA0nI,aAAAv1H,EAAAvQ,MAC1C,SACA;UACU,SAAAuQ,EAAA+B,QAAA;;UAEA/B,EAAAohG;;oBAEU,IAAAvzG,KAAAsoI,UAAAn2H;;;YAGRpU,OAAAooI,GAAA,EAAApoI,EAAKwqI,GAAA3oH;;;MAMjBlgB,aACAM,KAAAoiC,MAAAhgC,QAAA,IACApC,KAAA2f,cAAyB8kH,GAAA,EAAiBzkI,KAAA6e,SAAA7e,KAAA0nI,cAC1C1nI,KAAA0nI,aAAA1nI,KAAAoiC,MAAAhgC,OAAA,IACApC,KAAA0nI,YAAA,IAKAhoI,YAAAkC,GACA5B,KAAA6e,SAAAzc,QAAAR,IAAA5B,KAAA6e,SAAAjd,KAGA5B,KAAA0nI,WAAA9lI,GAGAlC,UACAM,KAAA0nI,WAAA1nI,KAAAoiC,MAAAhgC,OACApC,KAAA2f,cACM8kH,GAAA,EAAiBzkI,KAAAi8H,QAAAj8H,KAAA,YACvBwoI,mBAGA,IAFA3kI,MAAAC,KAAA9D,KAAA6e,UAAAjJ,OACA8N,GAAA,SAAAA,EAAAu1B,QAAA+uF,YACA5lI,OACAqmI,iBAAA,kBAKA/oI,WAAAyS,GACAnS,KAAA2f,cACM8kH,GAAA,GAEIA,GAAA,EAAqBzkI,KAAA6e,SAAA1M,EAAAvQ,QAC/B6mI,iBAAAt2H,EAAAohG,MACAi1B,mBAAAr2H,EAAA+B,WAEAuT,OACAtV,EAAA+B,QACArQ,MAAAC,KAAA9D,KAAA6e,UACAjJ,OACA8N,GACA,SAAAA,EAAAu1B,QAAA+uF,YACAtkH,IAAA1jB,KAAA6e,SAAA1M,EAAAvQ,QAEAmM,IAAA2V,GACkB+gH,GAAA,EAAqB/gH,GAAS8kH,mBAAA,oBA4IhD39H,eAAA9N,OAAA,8BAnIoBopI,GAAA,EACpBl+H,wBACA,OACAwrF,WAAkBlxF,KAAAwC,QAAAS,SAAA,GAClBkjI,UAAApjI,OACA88B,MAAAv+B,MACA8kI,UAAA5jI,QACA6jI,eAAAtjI,OACAujI,aAAAvjI,OACAwjI,aAAAxjI,QAIA5F,cACAK,QACAC,KAAAyzF,WAAA,EACAzzF,KAAA0oI,UAAA,GACA1oI,KAAA2oI,WAAA,EAGAjpI,oBACAK,MAAAqO,oBACA,MAAAmJ,EAAAvX,KACA,IAAAqjB,iBAAA0lH,IACAA,EAAAlnI,QAAA4rD,IACA,eAAAA,EAAAlrD,MACA,SAAAgV,EAAA0hC,QAAA+vF,UACAzxH,EAAAk8E,WAAA,EACAl8E,EAAAoxH,UAAA,SAAApxH,EAAAqxH,eACArxH,EAAAmxH,UAAAnxH,EAAAuxH,kBAMAvlH,QAAAhM,GACAzQ,YAAA,EACA0c,WAAA,EACAC,SAAA,IAGAlM,EAAAoxH,UAAA,SAAApxH,EAAAqxH,eACArxH,EAAAk8E,UAAA,SAAAl8E,EAAA0hC,QAAA+vF,QAGAtpI,aACAM,KAAA2f,cAAA,IAAAspH,MAAA,oBACAjpI,KAAAyzF,WAAA,EAGA/zF,YAAAmS,GACA7R,KAAA0oI,UAAA72H,EAAAzG,OAAA9M,MAGAoB,YACA,MAAAwpI,GACAtnI,MAAA5B,KAAA6oI,aACAt1B,MAAAvzG,KAAA0oI,UACAx0H,QAAAlU,KAAA2oI,WAEA3oI,KAAA2f,cAAA,IAAAnP,YAAA,kBAA0DD,OAAA24H,KAC1DlpI,KAAAmoI,aAGAzoI,aAAAmS,GACA7R,KAAA2oI,UAAA92H,EAAAzG,OAAA+9H,QAGAzpI,YACAM,KAAA2f,cACA,IAAAnP,YAAA,aAAoCD,OAAAvQ,KAAA0nI,cAEpC1nI,KAAAmoI,aAGAzoI,SACA,OAAWymI,GAAA;;UAEDiD,GAAAxpH;;0BAEgB5f,KAAAyzF,UAAA;;;;+CAIqBzzF,KAAA6oI;;;;;oBAK3B7oI,KAAA6oI;uBACG7oI,KAAAm8F;uBACAn8F,KAAA8oI;;;;;;8BAMO9oI,KAAA2oI;4BACF92H,GAAA7R,KAAAqpI,aAAAx3H;;;;;;;;;;;0BAWF,IAAA7R,KAAAspI;;;;;kDAKwB,IAAAtpI,KAAAmoI;;;;;wBAK1B,IAAAnoI,KAAAupI;;;;;;;uCCvTlBC,WAAqBrD,GAAA,EAC3Bl+H,wBACA,OACAkiC,OAAc5nC,KAAA+C,QACdmkI,UAAiBlnI,KAAAwC,SACjB2kI,aAAoBnnI,KAAAwC,UAIpBrF,cACAK,QACAC,KAAAmqC,MAAiBq/F,GAAYr/F,MAC7BnqC,KAAAypI,UAAA,EACAzpI,KAAA0pI,aAAA,EAGAhqI,oBACAK,MAAAqO,oBACAvK,MAAAC,KAAA9D,KAAA6e,UAEAhd,QAAAsQ,GACAA,EAAAoI,iBACA,iBACAva,KAAA2pI,oBAAA9qI,KAAAmB,QAKAY,SAAA2Z,iBAAA,QAAA1I,KACA7R,KAAAm0D,SAAAtiD,EAAAzG,SAAApL,KAAA0pI,cACA1pI,KAAA0pI,aAAA,KAKAhqI,SACA,OAAWymI,GAAA;;UAEDyD,GAAAhqH;;;;wCAI8B5f,KAAAypI,SAAA;mBACrBzpI,KAAA6pI;aACN7pI,KAAAmqC;;;0CAG6BnqC,KAAA0pI,YAAA;;;;;MAQ1ChqI,wBACAM,KAAA0pI,aAAA,EAGAhqI,oBAAA2b,GACArb,KAAAypI,UAAA,EACAzpI,KAAA0pI,aAAA,EACA1pI,KAAA2f,cAAuB8kH,GAAA,EAAeppH,EAAA9K,OAAAvQ,QAItCwpI,GAAYr/F,MAAA,2BAEZt/B,eAAA9N,OAAA,mBAA0CysI,kCCrEpCM,WAA2B3D,GAAA,EACjCl+H,wBACA,OACAnE,MAAavB,KAAA+C,QACb7E,SAAgB8B,KAAA+C,SAIhB5F,oBACAK,MAAAqO,oBAEApO,KAAAS,QAAAT,KAAAy7H,UAGA/7H,SACA,OAAWymI,GAAA;;UAED4D,GAAAnqH;;oCAE0B5f,KAAAgqI;;aAEvBF,GAAkBG,OAAAjqI,KAAA8D;;wCAES9D,KAAAS;;MAKxCf,iBACAM,KAAA2f,cACA,IAAAnP,YAAA,kBACAD,OAAAvQ,KAAA6e,SAAA1M,KAAA,OAMA23H,GAAkBG,QAClBxpF,KAAA,eACA+S,MAAA,gBACA1iD,OAAA,iBACAo5H,MAAA,SAGAr/H,eAAA9N,OAAA,qBAA4C+sI,kCC5CtCK,WAA4BhE,GAAA,EAClCl+H,wBACA,OACAnE,MAAavB,KAAA+C,QACbsL,UAAiBrO,KAAA+C,SAIjB5F,oBACAK,MAAAqO,oBAGA1O,SACA,OAAWymI,GAAA;;UAEDiE,GAAAxqH;;;yBAGe5f,KAAA4Q,oBAAyB5Q,KAAAgqI;YACtChqI,KAAA8D;;;;MAOZpE,eACAM,KAAA6e,SAAA1M,KAAA,GAAA3O,MAAAk9C,SAA2C1gD,KAAA01D,gBAC3C,SAAA11D,KAAA4Q,WACA5Q,KAAAwD,MAAAk9C,MAAA,OAIAhhD,iBACAM,KAAA2f,cACA,IAAAnP,YAAA,kBACAD,OAAAvQ,KAAA6e,SAAA1M,KAAA,OAMAg4H,GAAmBF,QACnBxpF,KAAA,eACA+S,MAAA,gBACA1iD,OAAA,iBACAo5H,MAAA,SAGAr/H,eAAA9N,OAAA,2BAAkDotI,kCC/C5CE,WAAsBlE,GAAA,EAC5Bl+H,wBACA,OACAnE,MAAavB,KAAA+C,SAIb5F,oBACAK,MAAAqO,oBAEAvK,MAAAC,KAAA9D,KAAA6e,UACAhd,QAAAsQ,IACAA,EAAAoI,iBACA,iBACAva,KAAA2pI,oBAAA9qI,KAAAmB,SAIAA,KAAA6e,SAAA1M,KAAA,GAAAlJ,aAAA,mBACAjJ,KAAA6e,SAAA1M,KAAA,GAAAlJ,aAAA,oBACAjJ,KAAAsqI,YAAA,EAEAtqI,KAAAua,iBAAA,YAAAva,KAAAuqI,mBAAA,GACAvqI,KAAAua,iBAAA,UAAAva,KAAAwqI,iBAAA,GACAxqI,KAAAua,iBAAA,YAAAva,KAAAwqI,iBAAA,GACAxqI,KAAAua,iBAAA,YAAAva,KAAAyqI,cAAA,GACAzqI,KAAAua,iBAAA,YAAAva,KAAAyqI,cAAA,GAGA/qI,SACA,OAAWymI,GAAA;;UAEDuE,GAAA9qH;;;;;;MASVlgB,oBAAA2b,GACArb,KAAA2f,cAAuB8kH,GAAA,EAAeppH,EAAA9K,OAAAvQ,OAGtCN,kBAAAmS,GACA7R,KAAAsqI,YAAA,EACAtqI,KAAAyqI,aAAA54H,GAGAnS,kBACAM,KAAAsqI,YAAA,EAGA5qI,aAAAmS,GACA,IAAA7R,KAAAsqI,WACA,OAEA,MAAAl/H,OAAWA,GAASyG,EACpB,IAAAgpC,EAAA,EACA8vF,EAAA,EACA,MAAAl8H,EAAArD,EACA,yBAAAqD,EAAA/D,QACA,OAGA,IAAA2qH,EAAA5mH,EAEA,GACAk8H,GAAAtV,EAAAuV,WAAAvV,EAAApwE,iBACKowE,IAAAwV,cAELhwF,EAAAhpC,EAAAi5H,MAAAH,EAEA,cAAA94H,EAAAtP,OACAs4C,EAAAhpC,EAAAk5H,QAAA,GAAAD,MAAAH,GAGAl8H,EAAAu8H,qBACA,4BACA,GAAAxnI,MAAAk9C,SAA0B7F,OAI1BwvF,GAAaJ,QACbxpF,KAAA,eACA+S,MAAA,gBACA1iD,OAAA,iBACAo5H,MAAA,SAGAr/H,eAAA9N,OAAA,oBAA2CstI,IChG3CltI,EAAAQ,EAAA0B,EAAA,4BAAA4rI,WAmCqBA,WAAuBlwC,IAW5CkwC,GAAchhD,8BATkBt3D,GAChCjzB,OACA,MAAAgE,EAAA1D,KAAA4yB,OAAA0zC,OAAApoE,IAAA,aACEkoI,GAAWK,kBAAA1oI,OAAAgW,KAAArQ,GACbqK,IAAAsE,KAAkBA,KAAA83B,MAAAzmC,EAAA2O,GAAA83B,MAAAmjE,KAAA5pG,EAAA2O,GAAAi7F,wBCpCyB36E,GAC3CjzB,OACAM,KAAA4yB,OAAAy3D,QAAAv5C,KAAAunB,YAAwCmsE,IACxCxkI,KAAA4yB,OAAA04C,SAAAnoE,IAAA,2BAAwDuhI,GAAoB1kI,KAAA4yB,SAC5E5yB,KAAAmlB,SAAAnlB,KAAA4yB,OAAAy3D,QAAAv5C,KAAAlwC,SAAoD6jI,GAAA,EAAS,CAAA3zG,EAAAlxB,KAC7DI,KAAA4yB,OAAA04C,SAAAptE,IAAA,wBAAAmtE,QAAAzrE,EAAA+uD,SAAAp+C,0BCwBwCoiB,GAIxCw3C,sBACA,OAAW6yB,GAAWuB,GAAOO,GAAY2F,GAAQqJ,IAMjD3kC,wBACA,mCCzBwCx2C,GAIxCw2C,wBACA,mBAMAzpE,YACAM,KAAAkrI,sBACAlrI,KAAAmrI,6BACAnrI,KAAAorI,yBACAprI,KAAAqrI,4BAYA3rI,sBACA,MAAA4rE,EAAAtrE,KAAA4yB,OAAA04C,SAEAA,EAAAptE,IAAA,iBAEA,IAAO6vG,GAAsB/tG,KAAA4yB,OAAA,2BAG7B04C,EAAAptE,IAAA,iBAEA,IAAO6vG,GAAsB/tG,KAAA4yB,OAAA,+BAiB7BlzB,6BACA,MAAA4rE,EAAAtrE,KAAA4yB,OAAA04C,SAEAA,EAAAptE,IAAA,UAEA,IAAO+vG,GAAuBjuG,KAAA4yB,OAAA,gCAC9B,IAAOq7E,GAAuBjuG,KAAA4yB,OAAA,6BAI9B04C,EAAAptE,IAAA,YAKA,IAAO+vG,GAAuBjuG,KAAA4yB,OAAA,yCAC9B,IAAOq7E,GAAuBjuG,KAAA4yB,OAAA,uCAI9B04C,EAAAptE,IAAA,SAEA,IAAO+vG,GAAuBjuG,KAAA4yB,OAAA,0BAgB9BlzB,yBACA,MAAA0rE,EAAAprE,KAAA4yB,OAAA04C,SAAAptE,IAAA,WAEAktE,GACAA,EAAA8nC,cACAt9F,OAAAhY,KAAAuC,MAAA,mBACA0B,QAAAo1G,IACA,MAAAq0B,EAAAr0B,EAAA,GACAn3E,EAAA,IAAAppB,cAAwC40H,WAGxC,IAASv9B,GAAsB/tG,KAAA4yB,OAAAkN,EAAA,KAC/B9/B,KAAA4yB,OAAAy4C,QAAA,WAAuC/sE,MAAA24G,QAcvCv3G,4BACAM,KAAA4yB,OAAA04C,SAAAptE,IAAA,eAEA,IAAO6vG,GAAsB/tG,KAAA4yB,OAAA,sCCtHKD,GAIlCw3C,sBACA,OAAW0lC,GAAaI,IAMxB9mC,wBACA,6BCZoCx2C,GAIpCw3C,sBACA,OAAWimC,GAAeG,IAM1BpnC,wBACA,+BCbwCx2C,GAIxCw3C,sBACA,OAAW8nC,GAAmBG,IAM9BjpC,wBACA,mCCTqCx2C,GAIrCw3C,sBACA,OAAWmpC,GAAgB6C,IAM3BhtC,wBACA,gCChBkCx2C,GAIlCw3C,sBACA,OAAWmyC,GAAakB,IAMxBr0C,wBACA,eRsBCupC,iBS7BkC//E,GAInCw3C,sBACA,OAAW6kD,GAAcmB,GAASW,IAMlC3nD,wBACA,8BCZ0Cx2C,GAI1Cw3C,sBACA,OAAWsoD,IAMXtpD,wBACA,qBAMAzpE,YACA,MAAAkzB,EAAA5yB,KAAA4yB,OACA24G,EAAA34G,EAAAw2C,QAAAlrE,IAAsDu0H,IAEtD+Y,EAAA54G,EAAA0zC,OAAApoE,IAAA,wBACAutI,EAAA74G,EAAA0zC,OAAApoE,IAAA,iBAEAwtI,EAAA94G,EAAA0zC,OAAApoE,IAAA,sBAEAutI,GAEA7oI,QAAAC,KACA,mIAKA2oI,GAAAC,IACAF,EAAAhjD,SAAA,gBACAnmD,MAAAopG,GAAAC,EACA3Y,YAAiB3P,KAIjBuoB,GACAH,EAAAhjD,SAAA,SACAnmD,MAAAspG,EACA5Y,YAAiB5P,qBCxByBvwF,GAI1Cw2C,wBACA,qBAKAzpE,YAAAkzB,GACA7yB,MAAA6yB,GAMA5yB,KAAAo4F,YAAAp4F,KAAAq4F,qBAMAr4F,KAAA+zG,UAAA/zG,KAAA85H,mBAMA95H,KAAAqyG,WAAAryG,KAAA2rI,oBAEQt2B,IACR/vF,QAAAtlB,KAAA+zG,UACAwB,iBACAv1G,KAAA+zG,UAAAvzG,QACAR,KAAAqyG,WAAA7xG,SAEA80G,UAAA,IAAAt1G,KAAA+zG,UAAAtgB,UACAvuE,SAAA,IAAAllB,KAAA46H,eAMAl7H,OACA,MAAAkzB,EAAA5yB,KAAA4yB,OAEA5yB,KAAAmlB,SAAAyN,EAAA8vC,MAAA9hE,SAAA+iC,UAAA,gBAAA7S,EAAAlxB,KACAA,EAAAkiE,cACA9hE,KAAA46H,eAGA56H,KAAAmlB,SAAAyN,EAAAujE,GAAA,aAAAn2F,KAAA4rI,iBAEA5rI,KAAAmlB,SAAAyN,EAAA,wBAAA5yB,KAAA4rI,iBAAgFnnH,SAAA,QAChFzkB,KAAAmlB,SAAAyN,EAAAujE,GAAAC,aAAA,uBAAAp2F,KAAA4rI,iBAEA5rI,KAAAmlB,SAAAnlB,KAAAqyG,WAAA,oBAAAvhF,EAAAlzB,EAAA61F,KACAA,EAEAzzF,KAAAqyG,WAAAltF,SAAAloB,OAAA,aAAA+C,KAAA4rI,kBAGA5rI,KAAAqyG,WAAAhtF,cAAApoB,OAAA,UAEA+C,KAAA46H,gBAWAl7H,YACA,MAAA9C,EAAAoD,KAAA4yB,OAAAujE,GAAAuC,iBACApyB,EAAAtmE,KAAA4yB,OAAA0zC,OAAApoE,IAAA,gBACA8B,KAAAo4F,YAAAO,eAAAryB,EAAA1pE,GAEA,UAAAuV,KAAAnS,KAAAo4F,YAAAh2D,MACAjwB,EAAA0e,GAAA,cAAA7wB,KAAA46H,YAAA,IAA6Dn2G,SAAA,SAS7D/kB,qBACA,MAAA04F,EAAA,IAAgCR,GAAW53F,KAAA4yB,OAAAu3D,QAa3C,OAZAiO,EAAA3K,gBACA3mF,YAEA0sF,OAAA,0BAIA4E,EAAAhC,aAAAvlE,GAAA,oBAAAC,EAAAlzB,EAAAuhC,KACAA,GACAn/B,KAAA46H,eAGAxiC,EAQA14F,mBACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAmhF,EAAA,IAA8BzgB,GAAgB1gE,EAAAu3D,QAU9C,OATA4pB,EAAAtzG,QAAA0C,IAAAnD,KAAAo4F,aACA2b,EAAAnyE,UAAA,uBACAhP,EAAAujE,GAAArlD,KAAAojB,KAAA/wD,IAAA4wG,GACAnhF,EAAAujE,GAAAC,aAAAjzF,IAAA4wG,EAAAvzG,SAEAR,KAAAo4F,YAAA7N,WAAAnjF,IAAA,OAAA0pB,EAAA2gC,KACAzxD,KAAA46H,YAAA,GACAnpE,MAEAsiD,EAQAr0G,oBACA,MAAAkzB,EAAA5yB,KAAA4yB,OACAr0B,EAAAq0B,EAAAr0B,EACA8zG,EAAA,IAA+BiyB,GAAe1xG,EAAAu3D,QAmB9C,OAlBAkoB,EAAAjrG,KACA+iC,MAAA5rC,EAAA,KACA+uG,KAAkBu+B,GAAAjsH,EAClBo3F,UAAA,IAGA3E,EAAAxzG,KAAA,QAAAuoB,GAAApnB,KAAA+zG,UAAA,aACA1B,EAAAxzG,KAAA,WAAAuoB,GAAApnB,KAAA+zG,UAAA,YAAAtgB,OAEAzzF,KAAAmlB,SAAAktF,EAAA,eACAryG,KAAA+zG,UAAAtgB,UAGAzzF,KAAA46H,YAAA,GAFA56H,KAAA8rI,eAKAl5G,EAAAujE,GAAArlD,KAAAojB,KAAA/wD,IAAAkvG,GACAz/E,EAAAujE,GAAAC,aAAAjzF,IAAAkvG,EAAA7xG,SACA6xG,EAQA3yG,gBACA,MAAAkzB,EAAA5yB,KAAA4yB,OACA8vC,EAAA9vC,EAAA8vC,MACA5xB,EAAAle,EAAAy3D,QAAAv5C,KAEA,IAAAle,EAAAujE,GAAAC,aAAA1yD,UAEA,YADA1jC,KAAA+rI,cAIA,GAAAn5G,EAAAigC,WAEA,YADA7yD,KAAA+rI,cAIA,MAAAC,EAAAnoI,MAAAC,KAAA4+D,EAAA9hE,SAAA+iC,UAAA+/B,qBAAA,GAEA,IAAAsoE,GAAAnoI,MAAAC,KAAA9D,KAAAo4F,YAAAh2D,OAAAjQ,MAAAhgB,MAAAm2C,WAEA,YADAtoD,KAAA+rI,cAIA,MAAA96F,EAAAH,EAAAC,aAAAwL,aAAA3pB,EAAAy3D,QAAA9rB,OAAAJ,cAAA6tE,IAEAhsI,KAAAqyG,WAAA5e,WAAA,EAEAzzF,KAAAisI,uBAAAh7F,GAEAjxC,KAAA+zG,UAAAtgB,WACAzzF,KAAA8rI,aAQApsI,cACAM,KAAAqyG,WAAA5e,WAAA,EAQA/zF,aACA,MAAAwsI,EAAAlsI,KAAA+zG,UAAAtgB,UACAzzF,KAAA+zG,UAAAvd,KACAprF,OAAApL,KAAAqyG,WAAA7xG,QACAixF,QAAAzxF,KAAA4yB,OAAAujE,GAAArlD,KAAAlN,kBAEAsoG,GACAlsI,KAAAo4F,YAAAh2D,MAAAlkC,IAAA,GAAA4qC,QASAppC,WAAAysI,GACAnsI,KAAA+zG,UAAAtgB,WAAA,EACA04C,GACAnsI,KAAA4yB,OAAAy3D,QAAAv5C,KAAAhI,QASAppC,uBAAAy4E,GACA,MAAAi0D,EAAAnvI,OAAAq2D,iBAAA6kB,GACAk0D,EAAA,IAAiCv4E,GAAI9zD,KAAA4yB,OAAAujE,GAAArlD,KAAAlN,iBACrC0oG,EAAA38E,SAAAy8E,EAAAG,WAAA,IAGAC,EAAA78E,SAAAy8E,EAAAK,WAAA,SAAA98E,SAAAy8E,EAAAM,SAAA,IACA97H,EAAyB2gF,IACzB/wF,QAAAR,KAAAqyG,WAAA7xG,QACA4K,OAAA+sE,EACAqZ,WAAA,CAAAm7C,EAAAn4B,MAEAh0D,IAAAmsF,EAAAnsF,IAAA8rF,GAAAE,EAAAh4B,EAAA//C,QAAA,EACAhU,KAAA4rF,EAAA5rF,KAAA+zD,EAAA9zD,WAIA1gD,KAAAqyG,WAAA7xD,IAAA5vC,EAAA4vC,IACAxgD,KAAAqyG,WAAA5xD,KAAA7vC,EAAA6vC,qBC1QsC9tB,GAItCw3C,sBACA,OACGwrD,GACAY,GACAgB,GACAK,GACAE,GACAgE,GACAnF,GACA+B,GACAoC,GACAQ,GACAO,IAOH1yD,wBACA,iCCzDoC25D,GAIpC34D,sBACA,OAAWg5D,GAAeE,IAM1Bl6D,wBACA,iBb8CCwsD,iBc1DwChjG,GACzCw3C,sBACA,OAAW25D,GAAoBI,oBCCSvxG,GAIxCjzB,OACAM,KAAA2sG,YAAA,IAAyB0uB,GACzBr7H,KAAA2sG,YAAAvlG,MACApH,KAAA4yB,OAAAujE,GAAArlD,KAAAojB,KAAA/wD,IAAAnD,KAAA2sG,aACA3sG,KAAA4yB,OAAAujE,GAAAC,aAAAjzF,IAAAnD,KAAA2sG,YAAAnsG,SAGAR,KAAAmlB,SAAAnlB,KAAA4yB,OAAAujE,GAAA,aAAAn2F,KAAAu7H,yBACAv7H,KAAAmlB,SAAAnlB,KAAA4yB,OAAA,wBAAA5yB,KAAAu7H,yBAMA77H,wBACA,MAAAkK,EAAA5J,KAAA4yB,OAAAlvB,UAAA4xH,4BAAAC,GACAA,EAAAxhG,cAAA64G,YAGA,IAAAhjI,EAAApJ,SAAAR,KAAA4yB,OAAAigC,WAEA,YADA7yD,KAAA2sG,YAAAlZ,WAAA,GAIA,MAAAm5C,EAAAhjI,EAAA2rH,KAAAxhG,cAAA64G,WAEA,IAAAA,EACA,OAGA,MAAAz4G,EAAAw7B,SAAA/lD,EAAA2rH,KAAAxhG,cAAAI,KACAhJ,EAAAwkC,SAAA/lD,EAAA2rH,KAAAxhG,cAAA5I,KAEAnrB,KAAA2sG,YAAAlZ,WAAA,EAEA,MAAA19C,EAAA/1C,KAAA4yB,OAAAy3D,QAAA9rB,OAAAJ,cAAAv0D,EAAApJ,SACAmwC,EAAA3wC,KAAA4yB,OAAAy3D,QAAAv5C,KAAAC,aAAAwL,aAAAxG,GACA82F,EAAAl8F,EAAA8qF,UAAAtrH,QAAA,6BAAA2Q,OAEAgsH,EAAA,IAAAp2H,OAAAk2H,EAAA,MACAzsI,EAAA0sI,EAAA1sI,MAAA2sI,GAEAntI,KAEA,IAAAQ,GAAAg0B,EAAA,GAAAA,EAAA,GAAAh0B,KAAAiC,OAAA+xB,EAAA,CACA,MAAA/xB,EAAAjC,IAAAiC,OAAA,EACAzC,EAAA+B,KAAA1B,KAAA4yB,OAAAu3D,OAAA5rF,EAAA,8CAAA41B,EAAA/xB,UACGjC,GAAAg0B,GACHx0B,EAAA+B,KAAA1B,KAAA4yB,OAAAu3D,OAAA5rF,EAAA,6BAAAoyC,GAAA,GAGAxwC,GAAAgrB,GAAAhrB,EAAAiC,OAAA+oB,GACAxrB,EAAA+B,KAAA1B,KAAA4yB,OAAAu3D,OAAA5rF,EAAA,gDAAA4B,EAAAiC,OAAA+oB,KAGAxrB,EAAAyC,OAAA,EACApC,KAAA+sI,aAAAptI,EAAA2P,KAAA,KAAAqhC,GAAA,GAGA3wC,KAAAgtI,aAAAr8F,GAIAjxC,aAAAC,EAAAgxC,EAAAs8F,GACAA,EACAt8F,EAAA+qF,UAAAv4H,IAAA,gCAEAwtC,EAAA+qF,UAAAtrH,OAAA,gCAEApQ,KAAA2sG,YAAAgvB,YAAA,EACA37H,KAAA2sG,YAAAvlG,KAAyBoR,KAAA7Y,IAEzB,MAAAi8H,EAA0BrqC,IAC1B/wF,QAAAR,KAAA2sG,YAAAnsG,QACA4K,OAAAulC,EACA6gD,WACA96B,KACAlW,IAAAkW,EAAAlW,IAAAkW,EAAAjC,OACAhU,KAAAiW,EAAAjW,UAKAzgD,KAAA2sG,YAAAnsD,IAAAo7E,EAAAp7E,IACAxgD,KAAA2sG,YAAAlsD,KAAAm7E,EAAAn7E,KAGA/gD,aAAAixC,GACAA,EAAA+qF,UAAAtrH,OAAA,gCACApQ,KAAA2sG,YAAAlZ,WAAA,kBCpFyC9gE,GAIzCw3C,sBACA,OAAWwrD,IAMXj2H,OAEA,MAAAwtI,EAAAltI,KAAA4yB,OAAAlvB,UAAA+zH,kBAAA,QAEA,UAAA0V,KAAAD,EAEA,UAAAp5H,KAAAq5H,EAAAh5E,SACAn0D,KAAA4yB,OAAA8vC,MAAAC,OAAAxwB,cAA4Cr+B,KAC5Cg8D,QAAAq9D,EAAAvvI,OAQAoC,KAAA4yB,OAAA8vC,MAAAC,OAAAxwB,OAAA,SACA29B,QAAAo9D,EAAAn/H,IAAA+F,MAAuCA,EAAAlW,uBAGvCoC,KAAA4yB,OAAA03D,WAAAjU,IAAA,mBAAAlzE,IAAuDqxH,GAAuBx0H,KAAA4yB,QAC9ErV,OAAA,QACAuzB,KAAA,CAAAwjF,EAAAr2D,EAAAgJ,KACA,MAAAngE,EAAuB2tH,GAAkBH,EAAAr2D,GACzCn3D,EAAAm1H,QAAA3H,EAAAngE,SAAA,GACA,MAAArgD,EAAAmzD,EAAAW,uBACA,UACA9gE,GAEA,OAAAwtH,EAAA3jH,OAAAmD,EAAyCkuG,GAAQluG,EAAAmzD,OAKjDjnE,KAAA4yB,OAAAlvB,UAAAijF,mBAAA,SAAA2tC,EAAAniH,EAAAo7B,KACA,IAAAk4B,GAAA,EAMA,OALA,IAAAtzD,EAAAqvB,aACA+L,EAAAi5B,qBAAiC8tD,EAAAngE,SAAA,KAAgChiD,EAAA,OACjEszD,GAAA,GAGAA,oB1B3C2C9yC,GAI3Cw3C,sBACA,OAAWwrD,IAMXj2H,OACAM,KAAA4yB,OAAAy3D,QAAAv5C,KAAAunB,YAAwCksE,IACxCvkI,KAAAojI,cAAApjI,KAAA4yB,OAAA0zC,OAAApoE,IAAA,sBACA8B,KAAA4yB,OAAA0zC,OAAApoE,IAAA,sBAAAgnB,SACA,KAEAllB,KAAAojI,gBAIApjI,KAAAmlB,SAAAnlB,KAAA4yB,OAAAy3D,QAAAv5C,KAAAlwC,SAAA,cAAAkwB,EAAAlxB,KACA,MAAA8iE,EAAA1iE,KAAA61E,QAAAj2E,EAAAqxC,WAEAx9B,EAAiBghH,GADjBz0H,KAAA4yB,OAAAlvB,UAAA0xH,eAAA1yD,EAAA9kE,MACmC8kE,GAEnCjvD,EAAA6vH,cACA7vH,EAAA6vH,gBAGA7vH,EAAA6vH,YAAAO,WAAA7jI,KAAA4yB,OAAA2oE,UAEA9nF,EAAA0B,KAAA1B,EAAA,sBACAA,EAAA,eACAzT,KAAAojI,cAAA3vH,EAAAhH,IACAzM,KAAA4yB,OAAAy3D,QAAAv5C,KAAAhI,QACA9oC,KAAA4yB,OAAA8vC,MAAA7J,OAAAtrB,IACA9gC,EAAA,eAAAA,EAAA0I,YACA1I,EAAA0I,KACAo4B,EAAAwqE,cAAAtrG,EAAAi2D,SAKA1iE,KAAA4yB,OAAA03D,WAAAjU,IAAA,YAAAlzE,IAAgDikE,IAChD1E,MAAA,cACA5xB,KAAA,iBAGA9wC,KAAA4yB,OAAA03D,WAAAjU,IAAA,UAAAlzE,IAA8CkxE,IAC9CvjC,KAAA,cACA4xB,MAAA,iBAIA1iE,KAAA4yB,OAAA03D,WAAAjU,IAAA,mBAAAlzE,IAAuDqxH,GAAuBx0H,KAAA4yB,QAC9ErV,OAAA,UACAuzB,KAAA,CAAAwjF,EAAAr2D,EAAAgJ,IACAA,EAAAW,uBACA,YACK6sD,GAAkBH,EAAAr2D,OAGfx5C,SAAA,UAGRzkB,KAAA4yB,OAAAlvB,UAAAijF,mBAAA,UAAyDguC,KAKzDj1H,QAAAixC,GACA,MAAAG,EAAA9wC,KAAA4yB,OAAAy3D,QAAAv5C,KAAAC,aAAA4Q,aAAAhR,GACAiB,EAAA5xC,KAAA4yB,OAAAy3D,QAAAv5C,KAAA+iC,iBAAA/iC,EAAA,OACA,OAAA9wC,KAAA4yB,OAAAy3D,QAAA9rB,OAAAH,gBAAAxsB,GAAAjhC,uB2B1F0CgiB,GAI1Cw3C,sBACA,OAAWwrD,IAMXj2H,OAEAM,KAAA4yB,OAAAlvB,UAAA+1H,gBAAAlE,KAAApB,gBAAAtyH,QAAA0zH,IACAv1H,KAAA4yB,OAAA8vC,MAAAC,OAAAxwB,OAAAojF,EAAA33H,MACAkwE,iBAAA,uBAKA9tE,KAAA4yB,OAAA03D,WAAA4kC,sBACAxsD,MAAA,QACA5xB,KAAA,UAGA9wC,KAAA4yB,OAAA03D,WAAA4kC,sBACAxsD,MAAA,UACA5xB,KAAA,YAIA9wC,KAAA4yB,OAAA03D,WAAA4kC,sBACAxsD,MAAA,OACA5xB,KAAA,SAIA9wC,KAAA4yB,OAAAlvB,UAAA+1H,gBAAAlE,GAAA,SAAAA,EAAAhzH,MACAV,QAAA0zH,IACA,MAAAj+E,KAAsBi+E,EAAA33H,iBACtB41G,KAAqBl8D,YAErBt3C,KAAA4yB,OAAA8vC,MAAAC,OAAA4lB,SAAAjxC,GACAi5B,WAAAglD,EAAA33H,OAGAoC,KAAA4yB,OAAA8vC,MAAAC,OAAA4lB,SAAAirB,GACA1jC,WAAgBylD,EAAA33H,iBAChBkwE,gBAAA,SAGA9tE,KAAA4yB,OAAA8vC,MAAAC,OAAAxwB,OAAAojF,EAAA33H,MACAkyE,QAAA0jC,IAGAxzG,KAAA4yB,OAAA03D,WAAAjU,IAAA,YAAAlzE,IAAiDkjE,IACjD3D,MAAAprB,EACAxG,KAAA,CAAAmtB,EAAAgJ,IACAA,EAAAW,uBAAA,mBAAmE6sD,GAAkBc,EAAAt3D,OAE5Ex5C,SAAA,YAETzkB,KAAA4yB,OAAA03D,WAAAjU,IAAA,YAAAlzE,IAAiDkjE,IACjD3D,MAAA8wC,EACA1iE,KAAA,CAAAmtB,EAAAgJ,IACAA,EAAAW,uBAAA,sBACA9jE,KAAAm6D,EAAAhnD,aAAA,aAGSwN,SAAA,cAGTzkB,KAAA4yB,OAAA03D,WAAAjU,IAAA,UAAAlzE,IAA8CuwE,IAC9C5iC,KAAAiF,IACA,wBAAAA,EAAAn4C,MACAoC,KAAAotI,oBAAAr3F,GACA,OAAan4C,MAAA,IAGb8kE,MAAA,CAAA3sB,EAAAmgF,KACA,MAAAmX,EAAArtI,KAAAotI,oBAAAr3F,GAAAtvB,MACA,OAAAyvG,EAAA3yH,iBACQ8pI,EAAAzvI,iBACH82H,GAAiB2Y,EAAAt3F,QAGdtxB,SAAA,YAERzkB,KAAA4yB,OAAA03D,WAAAjU,IAAA,UAAAlzE,IAA8CuwE,IAC9C5iC,KAAAiF,GACA,uBAAAA,EAAAn4C,QACAoC,KAAAotI,oBAAAr3F,EAAAplC,UAAyD/S,MAAA,GACzD8kE,MAAA,CAAA3sB,EAAAmgF,KACA,MAAAmX,EAAArtI,KAAAotI,oBAAAr3F,EAAAplC,QAAA8V,MACA,OAAAyvG,EAAA3yH,iBACQ8pI,EAAAzvI,yBACH82H,GAAiB2Y,EAAAt3F,QAGdtxB,SAAA,YAGRzkB,KAAA4yB,OAAAlvB,UAAA+1H,gBAAAlE,GAAA,iBAAAA,EAAAhzH,MACAV,QAAA0zH,IACA,MAAAj+E,KAAsBi+E,EAAA33H,wBACtB41G,KAAqBl8D,YAErBt3C,KAAA4yB,OAAA8vC,MAAAC,OAAA4lB,SAAAjxC,GACAw4B,QAAAylD,EAAA5kH,OAAA/S,OAGAoC,KAAA4yB,OAAA8vC,MAAAC,OAAA4lB,SAAAirB,GACA1jC,QAAAx4B,EACAw2B,iBAAA,qBAGA9tE,KAAA4yB,OAAA8vC,MAAAC,OAAAxwB,OAAAojF,EAAA33H,MACAkyE,QAAA0jC,IAGAxzG,KAAA4yB,OAAA03D,WAAAjU,IAAA,YAAAlzE,IAAiDkjE,IACjD3D,MAAAprB,EACAxG,KAAA,CAAAmtB,EAAAgJ,IACAA,EAAAW,uBAAA,oBAAoE6sD,GAAkBc,EAAAt3D,OAE7Ex5C,SAAA,YAETzkB,KAAA4yB,OAAA03D,WAAAjU,IAAA,YAAAlzE,IAAiDkjE,IACjD3D,MAAA8wC,EACA1iE,KAAA,CAAAmtB,EAAAgJ,IACAA,EAAAW,uBAAA,4BACA9jE,KAAAm6D,EAAAhnD,aAAA,aAGSwN,SAAA,YAETzkB,KAAA4yB,OAAA03D,WAAAjU,IAAA,UAAAlzE,IAA+CuwE,IAC/C5iC,KAAAiF,GAAA,sBAAAA,EAAAn4C,OAAsEA,MAAA,GACtE8kE,MAAA,CAAA3sB,EAAAmgF,KACA,MAAAmX,EAAArtI,KAAA4yB,OAAAlvB,UAAA+1H,gBAAAlE,GAAA,aAAAA,EAAAhzH,MAAAkkB,MACA,OAAAyvG,EAAA3yH,cACA+zC,EACMo9E,GAAiB2Y,EAAAt3F,QAGdtxB,SAAA,YAETzkB,KAAA4yB,OAAA03D,WAAAjU,IAAA,UAAAlzE,IAA+CuwE,IAC/C5iC,KAAAiF,GAAA,6BAAAA,EAAAn4C,OAA6EA,MAAA,GAC7E8kE,MAAA,CAAA3sB,EAAAmgF,KACA,MAAAmX,EAAArtI,KAAA4yB,OAAAlvB,UAAA+1H,gBAAAlE,GAAA,aAAAA,EAAAhzH,MAAAkkB,MACA,OAAAyvG,EAAA3yH,cACAiwG,EACMkhB,GAAiB2Y,EAAAt3F,QAGdtxB,SAAA,cAIT/kB,oBAAAq2C,GACA,OAAA/1C,KAAA4yB,OAAAlvB,UAAA+1H,gBAAAlE,GACAA,EAAArlC,QAAAn6C,OjBpGAk1F,GAAc/gD,eACdxmF,WACA/G,MACAwtC,MAAA,OACA7pC,SAAA,oHAEAyjF,WACA55C,MAAA,YACAmjE,KAAA,OACAhtG,SACA,kFAEAkY,MACA2xB,MAAA,OACAmjE,KAAA,OACAhtG,SACA,kKAKAulI,YACA17F,MAAA,eACAmjE,KAAA,aACAhtG,SACA,oYASAklI,OACAr7F,MAAA,QACAmjE,KAAA,QACAhtG,SAAA,mJAIAylI,OACA57F,MAAA,QACAmjE,KAAA,QACAhtG,SAAA,kJAIAuS,OACAs3B,MAAA,QACAmjE,KAAA,OACAhtG,SAAA,qFAEAgtI,SACAnjG,MAAA,UACAmjE,KAAA,WACAhtG,SACA,wGAEAsmH,SACAz8E,MAAA,UACAmjE,KAAA,OACAhtG,SACA,wOAKAitI,MACApjG,MAAA,OACAmjE,KAAA,OACAhtG,SACA,6FAEAkvC,KACArF,MAAA,MACA7pC,SACA,uIAGAk2H,eAAA,OACAmC,oBACA8P,kBACAlmI,KAAA,UAEAimI,oBACAjmI,KAAA,UAEA8P,IACA9P,KAAA,YACA4nC,MAAA,WAEAqjG,eACAjrI,KAAA,WACA4nC,MAAA,SACA3iC,SACAi5C,KAAA,oBACA+S,MAAA,wBAIAi6E,qBAAuBvoH,SAAA,CAAA3iB,EAAAmO,EAAAwU,KACvBA,EAAA,QAAAxU,EAAA,eAEAg9H,qBAAuBxoH,SAAA,CAAAd,EAAAszE,EAAAxyE,KACvBjoB,OAAAk0D,WAAA,KACAjsC,yCAAoDd,SACjD,OAEHupH,oBAAsBzoH,SAAA,CAAA0oH,EAAA1oH,KACtBA,GAAa/P,KAAA,4BAEb0kF,SACAz3D,OACA,OACA,SACA,OACA,eACA,eACA,aACA,cACA,OACA,SAGA28E,OACA8uB,gBACA,cACA,WACA,oBAGAC,cAAA,yBAEAtiE,SAAA","file":"ckeditor.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SectionsEditor\"] = factory();\n\telse\n\t\troot[\"SectionsEditor\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 134);\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/ckeditorerror\n */\n\n/**\n * URL to the documentation with error codes.\n */\nexport const DOCUMENTATION_URL =\n\t'https://ckeditor.com/docs/ckeditor5/latest/framework/guides/support/error-codes.html';\n\n/**\n * The CKEditor error class.\n *\n * All errors will be shortened during the minification process in order to reduce the code size.\n * Therefore, all error messages should be documented in the same way as those in {@link module:utils/log}.\n *\n * Read more in the {@link module:utils/log} module.\n *\n * @extends Error\n */\nexport default class CKEditorError extends Error {\n\t/**\n\t * Creates an instance of the CKEditorError class.\n\t *\n\t * Read more about error logging in the {@link module:utils/log} module.\n\t *\n\t * @param {String} message The error message in an `error-name: Error message.` format.\n\t * During the minification process the \"Error message\" part will be removed to limit the code size\n\t * and a link to this error documentation will be added to the `message`.\n\t * @param {Object} [data] Additional data describing the error. A stringified version of this object\n\t * will be appended to the error message, so the data are quickly visible in the console. The original\n\t * data object will also be later available under the {@link #data} property.\n\t */\n\tconstructor( message, data ) {\n\t\tmessage = attachLinkToDocumentation( message );\n\n\t\tif ( data ) {\n\t\t\tmessage += ' ' + JSON.stringify( data );\n\t\t}\n\n\t\tsuper( message );\n\n\t\t/**\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = 'CKEditorError';\n\n\t\t/**\n\t\t * The additional error data passed to the constructor. Undefined if none was passed.\n\t\t *\n\t\t * @member {Object|undefined}\n\t\t */\n\t\tthis.data = data;\n\t}\n\n\t/**\n\t * Checks if error is an instance of CKEditorError class.\n\t *\n\t * @param {Object} error Object to check.\n\t * @returns {Boolean}\n\t */\n\tstatic isCKEditorError( error ) {\n\t\treturn error instanceof CKEditorError;\n\t}\n}\n\n/**\n * Attaches link to the documentation at the end of the error message.\n *\n * @param {String} message Message to be logged.\n * @returns {String}\n */\nexport function attachLinkToDocumentation( message ) {\n\tconst matchedErrorName = message.match( /^([^:]+):/ );\n\n\tif ( !matchedErrorName ) {\n\t\treturn message;\n\t}\n\n\treturn message + ` Read more: ${ DOCUMENTATION_URL }#error-${ matchedErrorName[ 1 ] }\\n`;\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected.` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    // If there are no styles, skip unnecessary work\n    if (styles.length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    if (window.ShadyCSS.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style');\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = container instanceof ShadowRoot &&\n        compatibleShadyCSSVersion && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                // tslint:disable-next-line:no-any no symbol in index\n                return this[key];\n            },\n            set(value) {\n                // tslint:disable-next-line:no-any no symbol in index\n                const oldValue = this[name];\n                // tslint:disable-next-line:no-any no symbol in index\n                this[key] = value;\n                this.requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n            this.finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor.finalize === 'function') {\n            superCtor.finalize();\n        }\n        this.finalized = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure connection triggers an update. Updates cannot complete before\n        // connection and if one is pending connection the `_hasConnectionResolver`\n        // will exist. If so, resolve it to complete the update, otherwise\n        // requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n        else {\n            this.requestUpdate();\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // if we have a property key, perform property update steps.\n        if (name !== undefined && !this._changedProperties.has(name)) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                // track old value when changing.\n                this._changedProperties.set(name, oldValue);\n                // add to reflecting properties set\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n                // abort the request if the property should not be considered changed.\n            }\n            else {\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res) => resolve = res);\n        // Ensure any previous update has resolved before updating.\n        // This `await` also ensures that property changes are batched.\n        await previousUpdatePromise;\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        // Allow `performUpdate` to be asynchronous to enable scheduling of updates.\n        const result = this.performUpdate();\n        // Note, this is to avoid delaying an additional microtask unless we need\n        // to.\n        if (result != null &&\n            typeof result.then === 'function') {\n            await result;\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update.\n     *\n     * You can override this method to change the timing of updates. For instance,\n     * to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        if (this.shouldUpdate(this._changedProperties)) {\n            const changedProperties = this._changedProperties;\n            this.update(changedProperties);\n            this._markUpdated();\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n        else {\n            this._markUpdated();\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement.finalized = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            // tslint:disable-next-line:no-any decorator\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n */\nexport const query = _query((target, selector) => target.querySelector(selector));\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n */\nexport const queryAll = _query((target, selector) => target.querySelectorAll(selector));\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\n/**\n * Base-implementation of `@query` and `@queryAll` decorators.\n *\n * @param queryFn exectute a `selector` (ie, querySelector or querySelectorAll)\n * against `target`.\n * @suppress {visibility} The descriptor accesses an internal field on the\n * element.\n */\nfunction _query(queryFn) {\n    return (selector) => (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return queryFn(this.renderRoot, selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.0.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        super.finalize();\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot = this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n */\nLitElement.finalized = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* global console */\n\n/**\n * @module utils/log\n */\n\nimport { attachLinkToDocumentation } from './ckeditorerror';\n\n/**\n * The logging module.\n *\n * This object features two functions that should be used across CKEditor code base to log errors and warnings.\n * Despite being an overridable interface for native `console.*` this module serves also the goal to limit the\n * code size of a minified CKEditor package. During minification process the messages will be shortened and\n * links to their documentation will be logged to the console.\n *\n * All errors and warning should be documented in the following way:\n *\n *\t\t/**\n *\t\t * Error thrown when a plugin cannot be loaded due to JavaScript errors, lack of plugins with a given name, etc.\n *\t\t *\n *\t\t * @error plugin-load\n *\t\t * @param pluginName The name of the plugin that could not be loaded.\n *\t\t * @param moduleName The name of the module which tried to load this plugin.\n *\t\t * /\n *\t\tlog.error( 'plugin-load: It was not possible to load the \"{$pluginName}\" plugin in module \"{$moduleName}', {\n *\t\t\tpluginName: 'foo',\n *\t\t\tmoduleName: 'bar'\n *\t\t} );\n *\n * ### Warning vs Error vs Throw\n *\n * * Whenever a potentially incorrect situation occurs, which does not directly lead to an incorrect behavior,\n * log a warning.\n * * Whenever an incorrect situation occurs, but the app may continue working (although perhaps incorrectly),\n * log an error.\n * * Whenever it's really bad and it does not make sense to continue working, throw a {@link module:utils/ckeditorerror~CKEditorError}.\n *\n * @namespace\n */\nconst log = {\n\t/**\n\t * Logs an error to the console.\n\t *\n\t * Read more about error logging in the {@link module:utils/log} module.\n\t *\n\t * @param {String} message The error message in an `error-name: Error message.` format.\n\t * During the minification process the \"Error message\" part will be removed to limit the code size\n\t * and a link to this error documentation will be logged to the console.\n\t * @param {Object} [data] Additional data describing the error.\n\t */\n\terror( message, data ) {\n\t\tconsole.error( attachLinkToDocumentation( message ), data );\n\t},\n\n\t/**\n\t * Logs a warning to the console.\n\t *\n\t * Read more about error logging in the {@link module:utils/log} module.\n\t *\n\t * @param {String} message The warning message in a `warning-name: Warning message.` format.\n\t * During the minification process the \"Warning message\" part will be removed to limit the code size\n\t * and a link to this error documentation will be logged to the console.\n\t * @param {Object} [data] Additional data describing the warning.\n\t */\n\twarn( message, data ) {\n\t\tconsole.warn( attachLinkToDocumentation( message ), data );\n\t}\n};\n\nexport default log;\n","export const eventType = \"ckEditorOperation\";\n\nfunction createEvent(detail) {\n  return new CustomEvent(eventType, { detail });\n}\n\nexport const batch = operations =>\n  createEvent({\n    operation: \"batch\",\n    operations\n  });\n\nexport const insert = (\n  element,\n  parent,\n  position,\n  reference = null,\n  attributes = {}\n) =>\n  createEvent({\n    operation: \"insert\",\n    element,\n    parent,\n    position,\n    reference,\n    attributes\n  });\n\nexport const move = (parent, position, target, reference) =>\n  createEvent({\n    operation: \"move\",\n    parent,\n    position,\n    target,\n    reference\n  });\n\nexport const replace = (element, target) =>\n  createEvent({\n    operation: \"replace\",\n    element,\n    target\n  });\n\nexport const remove = target =>\n  createEvent({\n    operation: \"remove\",\n    target\n  });\n\nexport const attributes = (target, attr) =>\n  createEvent({\n    operation: \"attributes\",\n    target,\n    attr\n  });\n\nexport const removeAttribute = (target, key) =>\n  createEvent({\n    operation: \"removeAttribute\",\n    target,\n    key\n  });\n\nexport const swap = (source, target) =>\n  createEvent({\n    operation: \"swap\",\n    source,\n    target\n  });\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target, parent) {\n  if (parent){\n    return parent.querySelector(target);\n  }\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target, parent) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target, parent);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = require(\"./urls\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertAt.before, target);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\tif(options.attrs.nonce === undefined) {\n\t\tvar nonce = getNonce();\n\t\tif (nonce) {\n\t\t\toptions.attrs.nonce = nonce;\n\t\t}\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction getNonce() {\n\tif (typeof __webpack_nonce__ === 'undefined') {\n\t\treturn null;\n\t}\n\n\treturn __webpack_nonce__;\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = typeof options.transform === 'function'\n\t\t ? options.transform(obj.css) \n\t\t : options.transform.default(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            // Keeps track of the last index associated with a part. We try to delete\n            // unnecessary nodes, but we never want to associate two different parts\n            // to the same index. They must have a constant node between.\n            let lastPartIndex = 0;\n            while (walker.nextNode()) {\n                index++;\n                const node = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // All bound attributes have had a suffix added in\n                            // TemplateResult#getHTML to opt out of special attribute\n                            // handling. To look up the attribute value we also need to add\n                            // the suffix.\n                            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const data = node.data;\n                    if (data.indexOf(marker) >= 0) {\n                        const parent = node.parentNode;\n                        const strings = data.split(markerRegex);\n                        const lastIndex = strings.length - 1;\n                        // Generate a new text node for each literal section\n                        // These nodes are also used as the markers for node parts\n                        for (let i = 0; i < lastIndex; i++) {\n                            parent.insertBefore((strings[i] === '') ? createMarker() :\n                                document.createTextNode(strings[i]), node);\n                            this.parts.push({ type: 'node', index: ++index });\n                        }\n                        // If there's no text, we must insert a comment to mark our place.\n                        // Else, we can trust it will stick around after cloning.\n                        if (strings[lastIndex] === '') {\n                            parent.insertBefore(createMarker(), node);\n                            nodesToRemove.push(node);\n                        }\n                        else {\n                            node.data = strings[lastIndex];\n                        }\n                        // We have a part for each match found\n                        partIndex += lastIndex;\n                    }\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.data === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * The previousSibling is already the start of a previous part\n                        if (node.previousSibling === null || index === lastPartIndex) {\n                            index++;\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        lastPartIndex = index;\n                        this.parts.push({ type: 'node', index });\n                        // If we don't have a nextSibling, keep this node so we have an end.\n                        // Else, we can remove it to save future costs.\n                        if (node.nextSibling === null) {\n                            node.data = '';\n                        }\n                        else {\n                            nodesToRemove.push(node);\n                            index--;\n                        }\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.data.indexOf(marker, i + 1)) !==\n                            -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) ||\n                        // tslint:disable-next-line:no-any\n                        typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) ||\n            // tslint:disable-next-line:no-any\n            value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this._boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        if (shouldAddListener) {\n            this._options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const endIndex = this.strings.length - 1;\n        let html = '';\n        for (let i = 0; i < endIndex; i++) {\n            const s = this.strings[i];\n            // This exec() call does two things:\n            // 1) Appends a suffix to the bound attribute name to opt out of special\n            // attribute value parsing that IE11 and Edge do, like for style and\n            // many SVG attributes. The Template class also appends the same suffix\n            // when looking up attributes to create Parts.\n            // 2) Adds an unquoted-attribute-safe marker for the first expression in\n            // an attribute. Subsequent attribute expressions will use node markers,\n            // and this is safe since attributes with multiple expressions are\n            // guaranteed to be quoted.\n            const match = lastAttributeNameRegex.exec(s);\n            if (match) {\n                // We're starting a new bound attribute.\n                // Add the safe attribute suffix, and use unquoted-attribute-safe\n                // marker.\n                html += s.substr(0, match.index) + match[1] + match[2] +\n                    boundAttributeSuffix + match[3] + marker;\n            }\n            else {\n                // We're either in a bound node, or trailing bound attribute.\n                // Either way, nodeMarker is safe to use.\n                html += s + nodeMarker;\n            }\n        }\n        return html + this.strings[endIndex];\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\n// tslint:disable-next-line:no-any\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node.previousSibling);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","module.exports = \":host{\\n  --color-light-green: rgba(91, 200, 156, 0.3);\\n  --color-light-red: rgba(215, 34, 34, 0.3);\\n  --color-green: #5bc89c;\\n  --color-red: #d72222;\\n  --highlight-padding: 0px;\\n}\\n\\n.overlay {\\n  position: relative;\\n}\\n\\n.overlay.removed {\\n}\\n\\n.overlay__background {\\n  position: absolute;\\n  border: 2px solid var(--color-green);\\n  top: calc(var(--highlight-padding) * -1);\\n  left: calc(var(--highlight-padding) * -1);\\n  bottom: calc(var(--highlight-padding) * -1);\\n  right: calc(var(--highlight-padding) * -1);\\n  background: var(--color-light-green);\\n  z-index: 5;\\n}\\n\\n.removed .overlay__background {\\n  background: var(--color-light-red);\\n  border: 2px solid var(--color-red);\\n}\\n\\n.actions {\\n  visibility: hidden;\\n  opacity: 0;\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  top: 0;\\n  bottom: 0;\\n  width: 200px;\\n  height: 20px;\\n  margin: auto;\\n}\\n\\n.overlay:hover .actions {\\n  visibility: visible;\\n  opacity: 1;\\n  transition: visibility .35s linear, opacity .35s;\\n}\\n\\nbutton {\\n  border: none;\\n  color: white;\\n  cursor: pointer;\\n  font-family: inherit;\\n  font-size: inherit;\\n  padding: 5px 10px;\\n}\\n\\nbutton.accept {\\n  background-color: var(--color-green);\\n  margin-right: 20px;\\n}\\n\\nbutton.decline {\\n  background-color: var(--color-red);\\n}\\n\"","\nvar content = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./heading.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../postcss-loader/src/index.js??ref--6-1!./heading.css\", function() {\n\t\tvar newContent = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./heading.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\nvar content = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./link.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../postcss-loader/src/index.js??ref--6-1!./link.css\", function() {\n\t\tvar newContent = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./link.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","import root from './_root.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nexport default cloneBuffer;\n","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5.042 9.367l2.189 1.837a.75.75 0 0 1-.965 1.149l-3.788-3.18a.747.747 0 0 1-.21-.284.75.75 0 0 1 .17-.945L6.23 4.762a.75.75 0 1 1 .964 1.15L4.863 7.866h8.917A.75.75 0 0 1 14 7.9a4 4 0 1 1-1.477 7.718l.344-1.489a2.5 2.5 0 1 0 1.094-4.73l.008-.032H5.042z\\\"/></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M14.958 9.367l-2.189 1.837a.75.75 0 0 0 .965 1.149l3.788-3.18a.747.747 0 0 0 .21-.284.75.75 0 0 0-.17-.945L13.77 4.762a.75.75 0 1 0-.964 1.15l2.331 1.955H6.22A.75.75 0 0 0 6 7.9a4 4 0 1 0 1.477 7.718l-.344-1.489A2.5 2.5 0 1 1 6.039 9.4l-.008-.032h8.927z\\\"/></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10.187 17H5.773c-.637 0-1.092-.138-1.364-.415-.273-.277-.409-.718-.409-1.323V4.738c0-.617.14-1.062.419-1.332.279-.27.73-.406 1.354-.406h4.68c.69 0 1.288.041 1.793.124.506.083.96.242 1.36.478.341.197.644.447.906.75a3.262 3.262 0 0 1 .808 2.162c0 1.401-.722 2.426-2.167 3.075C15.05 10.175 16 11.315 16 13.01a3.756 3.756 0 0 1-2.296 3.504 6.1 6.1 0 0 1-1.517.377c-.571.073-1.238.11-2 .11zm-.217-6.217H7v4.087h3.069c1.977 0 2.965-.69 2.965-2.072 0-.707-.256-1.22-.768-1.537-.512-.319-1.277-.478-2.296-.478zM7 5.13v3.619h2.606c.729 0 1.292-.067 1.69-.2a1.6 1.6 0 0 0 .91-.765c.165-.267.247-.566.247-.897 0-.707-.26-1.176-.778-1.409-.519-.232-1.31-.348-2.375-.348H7z\\\"/></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.586 14.633l.021.004c-.036.335.095.655.393.962.082.083.173.15.274.201h1.474a.6.6 0 1 1 0 1.2H5.304a.6.6 0 0 1 0-1.2h1.15c.474-.07.809-.182 1.005-.334.157-.122.291-.32.404-.597l2.416-9.55a1.053 1.053 0 0 0-.281-.823 1.12 1.12 0 0 0-.442-.296H8.15a.6.6 0 0 1 0-1.2h6.443a.6.6 0 1 1 0 1.2h-1.195c-.376.056-.65.155-.823.296-.215.175-.423.439-.623.79l-2.366 9.347z\\\"/></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 10.423a6.5 6.5 0 0 1 6.056-6.408l.038.67C6.448 5.423 5.354 7.663 5.22 10H9c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574zm8 0a6.5 6.5 0 0 1 6.056-6.408l.038.67c-2.646.739-3.74 2.979-3.873 5.315H17c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574z\\\"/></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 10 10\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M.941 4.523a.75.75 0 1 1 1.06-1.06l3.006 3.005 3.005-3.005a.75.75 0 1 1 1.06 1.06l-3.549 3.55a.75.75 0 0 1-1.168-.136L.941 4.523z\\\"/></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM3.5 3v5H2V3.7H1v-1h2.5V3zM.343 17.857l2.59-3.257H2.92a.6.6 0 1 0-1.04 0H.302a2 2 0 1 1 3.995 0h-.001c-.048.405-.16.734-.333.988-.175.254-.59.692-1.244 1.312H4.3v1h-4l.043-.043zM7 14.75a.75.75 0 0 1 .75-.75h9.5a.75.75 0 1 1 0 1.5h-9.5a.75.75 0 0 1-.75-.75z\\\"/></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0C1 4.784 1.777 4 2.75 4c.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75C1.784 7.5 1 6.723 1 5.75zm6 9c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0c0-.966.777-1.75 1.75-1.75.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75-.966 0-1.75-.777-1.75-1.75z\\\"/></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 16 16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M4 0v1H1v3H0V.5A.5.5 0 0 1 .5 0H4zm8 0h3.5a.5.5 0 0 1 .5.5V4h-1V1h-3V0zM4 16H.5a.5.5 0 0 1-.5-.5V12h1v3h3v1zm8 0v-1h3v-3h1v3.5a.5.5 0 0 1-.5.5H12z\\\"/><path fill-opacity=\\\".256\\\" d=\\\"M1 1h14v14H1z\\\"/><g class=\\\"ck-icon__selected-indicator\\\"><path d=\\\"M7 0h2v1H7V0zM0 7h1v2H0V7zm15 0h1v2h-1V7zm-8 8h2v1H7v-1z\\\"/><path fill-opacity=\\\".254\\\" d=\\\"M1 1h14v14H1z\\\"/></g></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 6v3h4V6H3zm0 4v3h4v-3H3zm0 4v3h4v-3H3zm5 3h4v-3H8v3zm5 0h4v-3h-4v3zm4-4v-3h-4v3h4zm0-4V6h-4v3h4zm1.5 8a1.5 1.5 0 0 1-1.5 1.5H3A1.5 1.5 0 0 1 1.5 17V4c.222-.863 1.068-1.5 2-1.5h13c.932 0 1.778.637 2 1.5v13zM12 13v-3H8v3h4zm0-4V6H8v3h4z\\\"/></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M18 7v1H2V7h16zm0 5v1H2v-1h16z\\\" opacity=\\\".6\\\"/><path d=\\\"M14 1v18a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1zm-2 1H8v4h4V2zm0 6H8v4h4V8zm0 6H8v4h4v-4z\\\"/></g></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 2h1v16H7V2zm5 0h1v16h-1V2z\\\" opacity=\\\".6\\\"/><path d=\\\"M1 6h18a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1zm1 2v4h4V8H2zm6 0v4h4V8H8zm6 0v4h4V8h-4z\\\"/></g></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><g><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 2h1v16H7V2zm5 0h1v7h-1V2zm6 5v1H2V7h16zM8 12v1H2v-1h6z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 7h12a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1zm1 2v9h10V9H8z\\\"/></g></svg>\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"48\\\" height=\\\"48\\\" viewBox=\\\"0 0 48 48\\\">\\n    <path d=\\\"M6 34.5V42h7.5l22.13-22.13-7.5-7.5L6 34.5zm35.41-20.41c.78-.78.78-2.05 0-2.83l-4.67-4.67c-.78-.78-2.05-.78-2.83 0l-3.66 3.66 7.5 7.5 3.66-3.66z\\\"/>\\n</svg>\\n\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.972 16.615a.997.997 0 0 1-.744-.292l-4.596-4.596a1 1 0 1 1 1.414-1.414l3.926 3.926 9.937-9.937a1 1 0 0 1 1.414 1.415L7.717 16.323a.997.997 0 0 1-.745.292z\\\"/></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.591 10.177l4.243 4.242a1 1 0 0 1-1.415 1.415l-4.242-4.243-4.243 4.243a1 1 0 0 1-1.414-1.415l4.243-4.242L4.52 5.934A1 1 0 0 1 5.934 4.52l4.243 4.243 4.242-4.243a1 1 0 1 1 1.415 1.414l-4.243 4.243z\\\"/></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184zm4.919 10.562l-1.414 1.414a.75.75 0 1 1-1.06-1.06l1.414-1.415-1.415-1.414a.75.75 0 0 1 1.061-1.06l1.414 1.414 1.414-1.415a.75.75 0 0 1 1.061 1.061l-1.414 1.414 1.414 1.415a.75.75 0 0 1-1.06 1.06l-1.415-1.414z\\\"/></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7.3 17.37l-.061.088a1.518 1.518 0 0 1-.934.535l-4.178.663-.806-4.153a1.495 1.495 0 0 1 .187-1.058l.056-.086L8.77 2.639c.958-1.351 2.803-1.076 4.296-.03 1.497 1.047 2.387 2.693 1.433 4.055L7.3 17.37zM9.14 4.728l-5.545 8.346 3.277 2.294 5.544-8.346L9.14 4.728zM6.07 16.512l-3.276-2.295.53 2.73 2.746-.435zM9.994 3.506L13.271 5.8c.316-.452-.16-1.333-1.065-1.966-.905-.634-1.895-.78-2.212-.328zM8 18.5L9.375 17H19v1.5H8z\\\"/></svg>\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184z\\\"/></svg>\"","module.exports = \"<svg id=\\\"baseline-collections-24px\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n  <path id=\\\"Path_94\\\" data-name=\\\"Path 94\\\" d=\\\"M0,0H24V24H0Z\\\" fill=\\\"none\\\"/>\\n  <path id=\\\"Path_95\\\" data-name=\\\"Path 95\\\" d=\\\"M22,16V4a2.006,2.006,0,0,0-2-2H8A2.006,2.006,0,0,0,6,4V16a2.006,2.006,0,0,0,2,2H20A2.006,2.006,0,0,0,22,16ZM11,12l2.03,2.71L16,11l4,5H8ZM2,6V20a2.006,2.006,0,0,0,2,2H18V20H4V6Z\\\" fill=\\\"#707070\\\"/>\\n</svg>\\n\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n  <path d=\\\"M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z\\\"/>\\n</svg>\\n\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.999 2H15a1 1 0 0 1 0 2h-1.004v13a1 1 0 1 1-2 0V4H8.999v13a1 1 0 1 1-2 0v-7A4 4 0 0 1 3 6a4 4 0 0 1 3.999-4z\\\"/></svg>\"","module.exports = \":host {\\n  --color-blue: #004adc;\\n  --color-black: #222330;\\n  --color-grey-light: #B8B8B8;\\n  --align-buttons: left;\\n  display: block;\\n  font-family: var(--font-family, sans-serif);\\n}\\n\\nbutton {\\n  background: rgba(0, 0, 0, 0);\\n  border: none;\\n  cursor: pointer;\\n  font-family: inherit;\\n  font-size: inherit;\\n  padding: 0;\\n}\\n\\nul {\\n  list-style-type: none;\\n  width: 100%;\\n}\\n\\nul,\\nli {\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n.ck-placeholder__insert-wrapper {\\n  border-bottom: 1px dashed var(--color-black, #222330);\\n  margin-bottom: 1em;\\n  text-align: center;\\n  opacity: 0;\\n  transition: opacity 0.3s ease;\\n}\\n\\n.ck-placeholder__insert-wrapper:hover,\\n.ck-placeholder__insert-wrapper:focus {\\n  opacity: 1;\\n}\\n\\n.ck-placeholder__insert-button {\\n  background: #fff;\\n  color: var(--color-black, #222330);\\n  display: inline-block;\\n  font-size: 12px;\\n  font-weight: bold;\\n  letter-spacing: 0.03em;\\n  margin: 0;\\n  padding: 0 1em;\\n  position: relative;\\n  top: 0.7em;\\n}\\n\\n.ck-placeholder__insert-button:hover,\\n.ck-placeholder__insert-button:focus {\\n  color: var(--color-blue, #004adc);\\n}\\n\\n.ck-placeholder__add-wrapper {\\n  border: 1px dashed var(--color-black, #222330);\\n  box-sizing: border-box;\\n  display: flex;\\n  flex-flow: row nowrap;\\n  align-items: center;\\n  font-size: 14px;\\n  min-height: 80px;\\n  padding: 0.5em 1.8em 0.6em;\\n  height: 100%;\\n}\\n\\n.ck-placeholder__add-button {\\n  color: var(--color-black, #222330);\\n  font-weight: bold;\\n  margin-right: 40px;\\n  text-transform: uppercase;\\n}\\n\\n.ck-placeholder__add-button:hover,\\n.ck-placeholder__add-button:focus {\\n  color: var(--color-blue, #004adc);\\n}\\n\\n.ck-placeholder__sections-list {\\n  text-align: var(--align-buttons);\\n}\\n\\n.ck-placeholder__section-item {\\n  color: var(--color-black, #222330);\\n  display: inline-block;\\n  font-size: 12px;\\n  margin-right: 20px;\\n  margin-top: 10px;\\n  margin-bottom: 10px;\\n}\\n\\n.ck-placeholder__icon-wrapper {\\n  color: var(--color-grey-light, #B8B8B8);\\n  margin-bottom: 8px;\\n  width: 18px;\\n}\\n\\n.ck-placeholder__section-button {\\n  align-items: center;\\n  display: flex;\\n  flex-flow: column wrap;\\n  text-transform: uppercase;\\n}\\n\\n.ck-placeholder__section-button:hover,\\n.ck-placeholder__section-button:focus {\\n  color: var(--color-blue, #004adc);\\n}\\n\\n.ck-placeholder__section-button:hover .ck-placeholder__icon-wrapper,\\n.ck-placeholder__section-button:focus .ck-placeholder__icon-wrapper {\\n  color: var(--color-blue, #004adc);\\n}\\n\\n.ck-placeholder__close-button {\\n  margin-left: auto;\\n  position: relative;\\n}\\n\\n.ck-placeholder__close-button .ck-placeholder__icon-wrapper {\\n  margin-bottom: 0;\\n}\\n\\n.ck-placeholder__close-button:hover .ck-placeholder__icon-wrapper,\\n.ck-placeholder__close-button:focus .ck-placeholder__icon-wrapper {\\n  color: var(--color-black, #222330);\\n}\\n\\n.ck-placeholder__close-button-label {\\n  left: 0;\\n  opacity: 0;\\n  position: absolute;\\n  top: 0;\\n}\\n\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n  <path fill=\\\"currentColor\\\"\\n        d=\\\"M21,6.611,19.389,5,13,11.389,6.611,5,5,6.611,11.389,13,5,19.389,6.611,21,13,14.611,19.389,21,21,19.389,14.611,13Z\\\"\\n        transform=\\\"translate(-1 -1)\\\"/>\\n  <path d=\\\"M0,0H24V24H0Z\\\" fill=\\\"none\\\"/>\\n</svg>\\n\"","module.exports = \"<svg viewBox=\\\"0 0 18.862 15.09\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n  <g fill=\\\"currentColor\\\">\\n    <path d=\\\"m1.572 1.257h.943v12.575h-.943z\\\"/>\\n    <path d=\\\"m16.347 1.257h.943v12.575h-.943z\\\"/>\\n    <path d=\\\"m17.919 2.515h.943v10.06h-.943z\\\"/>\\n    <path d=\\\"m0 2.515h.943v10.06h-.943z\\\"/>\\n    <path d=\\\"m10 6v15.09h12.575v-15.09zm11 13.518h-9.428v-11.946h9.428z\\\" transform=\\\"translate(-6.856 -6)\\\"/>\\n  </g>\\n</svg>\\n\"","module.exports = \"<svg viewBox=\\\"0 0 26 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n  <g fill=\\\"currentColor\\\">\\n    <path d=\\\"m295.991 66.055v-.88h-3.785v.88h1.452v14.814h-1.452v.88h3.785v-.88h-1.452v-14.814z\\\"\\n          transform=\\\"translate(-269.117 -65.175)\\\"/>\\n    <path\\n        d=\\\"m.163 100.069 4.43-10a1.728 1.728 0 0 1 1.634-1.108h.163a1.7 1.7 0 0 1 1.616 1.108l4.43 10a1.363 1.363 0 0 1 .145.563 1.325 1.325 0 0 1 -1.326 1.344 1.423 1.423 0 0 1 -1.344-.962l-.853-2h-5.59l-.89 2.088a1.373 1.373 0 0 1 -1.289.871 1.286 1.286 0 0 1 -1.289-1.305 1.483 1.483 0 0 1 .163-.599zm7.862-3.522-1.761-4.195-1.764 4.195z\\\"\\n        transform=\\\"translate(0 -87.078)\\\"/>\\n    <path\\n        d=\\\"m176.011 134.837v-.037c0-2.124 1.616-3.1 3.922-3.1a6.915 6.915 0 0 1 2.379.4v-.163c0-1.144-.708-1.779-2.088-1.779a6.328 6.328 0 0 0 -1.907.272 1.168 1.168 0 0 1 -.4.073 1.124 1.124 0 0 1 -1.144-1.126 1.144 1.144 0 0 1 .744-1.071 8.474 8.474 0 0 1 3.105-.508 4.494 4.494 0 0 1 3.287 1.089 4.242 4.242 0 0 1 1.053 3.1v4.43a1.325 1.325 0 0 1 -1.344 1.326 1.236 1.236 0 0 1 -1.325-1.144v-.018a3.742 3.742 0 0 1 -2.941 1.235c-1.834-.001-3.341-1.054-3.341-2.979zm6.337-.636v-.49a4.28 4.28 0 0 0 -1.761-.363c-1.18 0-1.906.472-1.906 1.344v.036c0 .744.617 1.18 1.507 1.18 1.288 0 2.16-.708 2.16-1.708z\\\"\\n        transform=\\\"translate(-162.103 -122.844)\\\"/>\\n  </g>\\n</svg>\\n\"","module.exports = \"<svg viewBox=\\\"0 0 17.304 13.724\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n  <path\\n      d=\\\"m17.005 6h-16.705a.3.3 0 0 0 -.3.3v13.125a.3.3 0 0 0 .3.3h16.705a.3.3 0 0 0 .3-.3v-13.125a.3.3 0 0 0 -.3-.3zm-12.232 3.282a1.661 1.661 0 1 1 -1.661 1.661 1.663 1.663 0 0 1 1.661-1.661zm10.96 5.572a.3.3 0 0 1 -.422.018l-3.36-3.08-2.739 3 1.434 1.434a.3.3 0 1 1 -.422.422l-3.072-3.074-4.866 4.285a.3.3 0 1 1 -.394-.448l5.077-4.47a.3.3 0 0 1 .408.013l1.414 1.416 2.922-3.2a.3.3 0 0 1 .207-.1.307.307 0 0 1 .215.078l3.58 3.282a.3.3 0 0 1 .018.423z\\\"\\n      fill=\\\"currentColor\\\" transform=\\\"translate(0 -6)\\\"/>\\n</svg>\\n\"","module.exports = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n  <g fill=\\\"currentColor\\\">\\n    <path\\n        d=\\\"m158.2 149.935h-.733a.6.6 0 0 1 -.5-.392 5.813 5.813 0 0 0 -.244-.583.6.6 0 0 1 .078-.631l.522-.522a.939.939 0 0 0 0-1.326l-.847-.847a.937.937 0 0 0 -1.326 0l-.522.522a.535.535 0 0 1 -.373.134.6.6 0 0 1 -.258-.055 5.836 5.836 0 0 0 -.584-.244.6.6 0 0 1 -.392-.5v-.733a.939.939 0 0 0 -.937-.937h-1.2a.939.939 0 0 0 -.937.937v.733a.6.6 0 0 1 -.392.5 5.833 5.833 0 0 0 -.583.244.6.6 0 0 1 -.257.055.536.536 0 0 1 -.374-.134l-.521-.521a.938.938 0 0 0 -1.326 0l-.848.847a.937.937 0 0 0 0 1.326l.522.522a.6.6 0 0 1 .079.631 5.8 5.8 0 0 0 -.243.582.6.6 0 0 1 -.5.392h-.733a.939.939 0 0 0 -.937.937v1.2a.939.939 0 0 0 .937.937h.733a.6.6 0 0 1 .5.392 5.8 5.8 0 0 0 .244.582.6.6 0 0 1 -.079.631l-.522.522a.939.939 0 0 0 0 1.326l.848.848a.937.937 0 0 0 1.326 0l.522-.522a.536.536 0 0 1 .374-.134.594.594 0 0 1 .257.055 5.817 5.817 0 0 0 .583.244.6.6 0 0 1 .392.5v.733a.938.938 0 0 0 .937.937h1.2a.938.938 0 0 0 .937-.937v-.733a.6.6 0 0 1 .392-.5 5.834 5.834 0 0 0 .583-.244.6.6 0 0 1 .257-.055.536.536 0 0 1 .374.134l.522.522a.937.937 0 0 0 1.326 0l.847-.848a.939.939 0 0 0 0-1.326l-.521-.522a.6.6 0 0 1 -.079-.631 5.808 5.808 0 0 0 .244-.583.6.6 0 0 1 .5-.392h.733a.939.939 0 0 0 .937-.937v-1.2a.939.939 0 0 0 -.938-.936zm-3.971 1.536a2.747 2.747 0 1 1 -2.747-2.747 2.75 2.75 0 0 1 2.752 2.748z\\\"\\n        transform=\\\"translate(-139.142 -139.128)\\\"/>\\n    <path\\n        d=\\\"m6.871 5.006a.153.153 0 0 1 .1-.092h.367a.626.626 0 0 0 .625-.625v-.6a.626.626 0 0 0 -.625-.625h-.362a.152.152 0 0 1 -.1-.092 3.031 3.031 0 0 0 -.129-.307.149.149 0 0 1 .009-.137l.261-.261a.626.626 0 0 0 0-.884l-.427-.422a.625.625 0 0 0 -.884 0l-.261.261a.121.121 0 0 1 -.076.021.144.144 0 0 1 -.061-.012 3.033 3.033 0 0 0 -.308-.131.153.153 0 0 1 -.091-.1v-.369a.626.626 0 0 0 -.625-.625h-.6a.626.626 0 0 0 -.624.625v.369a.152.152 0 0 1 -.092.1 3.043 3.043 0 0 0 -.307.129.146.146 0 0 1 -.061.012.121.121 0 0 1 -.076-.021l-.261-.259a.625.625 0 0 0 -.884 0l-.423.423a.626.626 0 0 0 0 .884l.261.261a.149.149 0 0 1 .009.137 3.043 3.043 0 0 0 -.129.307.153.153 0 0 1 -.1.092h-.372a.626.626 0 0 0 -.625.626v.6a.626.626 0 0 0 .625.625h.367a.153.153 0 0 1 .1.092 3.022 3.022 0 0 0 .129.307.149.149 0 0 1 -.009.137l-.261.261a.625.625 0 0 0 0 .884l.423.423a.625.625 0 0 0 .884 0l.261-.261a.121.121 0 0 1 .081-.022.145.145 0 0 1 .061.012 3.04 3.04 0 0 0 .307.128.153.153 0 0 1 .092.1v.367a.626.626 0 0 0 .625.625h.6a.626.626 0 0 0 .625-.625v-.362a.152.152 0 0 1 .09-.105 3.041 3.041 0 0 0 .307-.129.145.145 0 0 1 .061-.012.121.121 0 0 1 .076.021l.261.261a.625.625 0 0 0 .884 0l.424-.418a.626.626 0 0 0 0-.884l-.261-.261a.149.149 0 0 1 -.009-.137 3.079 3.079 0 0 0 .128-.312zm-1.671-1.016a1.217 1.217 0 1 1 -1.216-1.218 1.219 1.219 0 0 1 1.216 1.218z\\\"\\n        transform=\\\"translate(0 -.006)\\\"/>\\n  </g>\\n</svg>\\n\"","module.exports = \"<svg viewBox=\\\"0 0 20 18\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n  <path\\n      d=\\\"m91.93 13.877a2.346 2.346 0 0 1 -1.262-.334 1.217 1.217 0 0 1 -.561-.647 6.709 6.709 0 0 1 -.151-1.856v-4.253h3.928v-2.6h-3.928v-4.187h-2.363a6.615 6.615 0 0 1 -.583 2.115 4.6 4.6 0 0 1 -1.11 1.424 4.974 4.974 0 0 1 -1.673.906v2.342h1.833v5.813a4.847 4.847 0 0 0 .237 1.737 3 3 0 0 0 .853 1.133 4.394 4.394 0 0 0 1.489.809 6.34 6.34 0 0 0 2.007.292 7.809 7.809 0 0 0 1.867-.205 9.536 9.536 0 0 0 1.921-.7v-2.61a4.5 4.5 0 0 1 -2.504.821z\\\"\\n      fill=\\\"currentColor\\\" transform=\\\"translate(-84.226)\\\"/>\\n</svg>\\n\"","module.exports = \"<svg viewBox=\\\"0 0 20.26 16.073\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n  <g fill=\\\"currentColor\\\">\\n    <path\\n        d=\\\"m9.229 136.932-2.307-2.307-2.336 2.335 1.814 1.813h1.181v.659h-1.319a.33.33 0 0 1 -.233-.1l-3.063-3.063-2.966 2.97v.852a.989.989 0 0 0 .989.989h7.251a.989.989 0 0 0 .989-.989zm0 0\\\"\\n        transform=\\\"translate(0 -131.852)\\\"/>\\n    <path d=\\\"m176.659 64.33a.33.33 0 1 1 -.33-.33.33.33 0 0 1 .33.33zm0 0\\\" transform=\\\"translate(-172.374 -62.682)\\\"/>\\n    <path\\n        d=\\\"m9.229.989a.989.989 0 0 0 -.989-.989h-7.251a.989.989 0 0 0 -.989.989v5.466l2.733-2.733a.33.33 0 0 1 .466 0l.921.921 2.568-2.569a.33.33 0 0 1 .466 0l2.075 2.074zm-5.274 1.648a.989.989 0 1 1 .989-.989.989.989 0 0 1 -.989.989zm0 0\\\"/>\\n    <path d=\\\"m11.109.102h9.151v1.141h-9.151z\\\"/>\\n    <path d=\\\"m0 11.51h20.26v1.141h-20.26z\\\"/>\\n    <path d=\\\"m11.109 3.525h9.151v1.141h-9.151z\\\"/>\\n    <path d=\\\"m0 14.932h12.275v1.141h-12.275z\\\"/>\\n    <path d=\\\"m11.109 6.947h9.151v1.141h-9.151z\\\"/>\\n  </g>\\n</svg>\\n\"","module.exports = \"<svg viewBox=\\\"0 0 19.45 13\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n  <path\\n      d=\\\"m-130.878 73.4a.585.585 0 0 0 -.21-.042.5.5 0 0 0 -.378.16l-3.382 3.374v-1.385a2.328 2.328 0 0 0 -.709-1.708 2.328 2.328 0 0 0 -1.708-.709h-10.318a2.329 2.329 0 0 0 -1.708.709 2.329 2.329 0 0 0 -.709 1.708v5.909a2.328 2.328 0 0 0 .709 1.708 2.328 2.328 0 0 0 1.708.709h10.318a2.328 2.328 0 0 0 1.708-.709 2.328 2.328 0 0 0 .709-1.708v-1.394l3.382 3.382a.5.5 0 0 0 .378.159.586.586 0 0 0 .21-.042.5.5 0 0 0 .327-.5v-9.121a.5.5 0 0 0 -.327-.5z\\\"\\n      fill=\\\"currentColor\\\" transform=\\\"translate(150 -73.09)\\\"/>\\n</svg>\\n\"","import { LitElement, html, css } from \"lit-element\";\nimport * as Operations from \"../editor/operations\";\nimport styles from \"./diffelement.css\";\n\nexport default class DiffElement extends LitElement {\n  static get properties() {\n    return {\n      added: { type: Boolean },\n      removed: { type: Boolean }\n    };\n  }\n\n  constructor() {\n    super();\n    this.added = false;\n    this.removed = false;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  handleAccept() {\n    if (this.added) {\n      this.dispatchEvent(Operations.removeAttribute(this, \"added\"));\n    } else {\n      this.dispatchEvent(Operations.remove(this));\n    }\n  }\n\n  handleDecline() {\n    if (this.removed) {\n      this.dispatchEvent(Operations.removeAttribute(this, \"removed\"));\n    } else {\n      this.dispatchEvent(Operations.remove(this));\n    }\n  }\n\n  render(children) {\n    if (this.added || this.removed) {\n      return html`\n        <style>\n          ${styles}\n        </style>\n        <div class=\"overlay ${this.added ? \"added\" : \"removed\"}\">\n          ${children}\n          <div class=\"overlay__background\">\n            <div class=\"actions\">\n              <button class=\"accept\" @click=${this.handleAccept.bind(this)}>\n                Accept\n              </button>\n              <button class=\"decline\" @click=${this.handleDecline.bind(this)}>\n                Decline\n              </button>\n            </div>\n          </div>\n        </div>\n      `;\n    }\n    return children;\n  }\n}\n\nDiffElement.styles = css([styles]);\n","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n  <g id=\\\"baseline-arrow_back-24px\\\" transform=\\\"translate(24) rotate(90)\\\">\\n    <path id=\\\"Path_91\\\" data-name=\\\"Path 91\\\" d=\\\"M20,11H7.83l5.59-5.59L12,4,4,12l8,8,1.41-1.41L7.83,13H20Z\\\" fill=\\\"#fff\\\"/>\\n  </g>\\n</svg>\\n\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n  <g id=\\\"baseline-arrow_forward-24px_1_\\\" data-name=\\\"baseline-arrow_forward-24px (1)\\\" transform=\\\"translate(24) rotate(90)\\\">\\n    <path id=\\\"Path_93\\\" data-name=\\\"Path 93\\\" d=\\\"M12,4,10.59,5.41,16.17,11H4v2H16.17l-5.58,5.59L12,20l8-8Z\\\" fill=\\\"#fff\\\"/>\\n  </g>\\n</svg>\\n\"","module.exports = \"<svg id=\\\"icon_delete\\\" data-name=\\\"icon delete\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n  <path id=\\\"Path_84\\\" data-name=\\\"Path 84\\\" d=\\\"M5.889,17.222A1.783,1.783,0,0,0,7.667,19h7.111a1.783,1.783,0,0,0,1.778-1.778V6.556H5.889ZM7.667,8.333h7.111v8.889H7.667Zm6.667-4.444L13.444,3H9l-.889.889H5V5.667H17.444V3.889Z\\\" transform=\\\"translate(1 1)\\\" fill=\\\"#fff\\\"/>\\n</svg>\\n\"","module.exports = \":host {\\n  --button-size: 3em;\\n  --button-background-color: black;\\n  --button-foreground-color: white;\\n  --outline-color: #004adc;\\n  position: relative;\\n  display: block;\\n}\\n\\n.hovered .item {\\n  outline-style: solid;\\n  outline-width: 2px;\\n  outline-color: var(--outline-color);\\n}\\n\\n.controls {\\n  z-index: 1;\\n  position: absolute;\\n  right: 0;\\n  display: flex;\\n  opacity: 0;\\n  transition: opacity 0.2s ease;\\n}\\n\\n.hovered .controls {\\n  opacity: 1;\\n}\\n\\n.controls button {\\n  border: none;\\n  background: var(--button-background-color);\\n  width: var(--button-size);\\n  height: var(--button-size);\\n  display: flex;\\n  cursor: pointer;\\n}\\n\\nsvg {\\n  width: 100%;\\n}\\nsvg * {\\n  fill: var(--button-foreground-color);\\n}\\n.disabled {\\n  opacity: 0.5;\\n  pointer-events: none;\\n  cursor: auto;\\n}\\n\"","module.exports = \":host {\\n  --color-blue: #004adc;\\n  --color-black: #222330;\\n  --color-black-80: rgba(0, 0, 0, 0.8);\\n  --color-black-60: rgba(0, 0, 0, 0.6);\\n  --color-black-30: rgba(0, 0, 0, 0.3);\\n  --color-grey-light: #CCC;\\n  --color-white: #FFF;\\n  --align-buttons: left;\\n  font-family: var(--font-family, sans-serif);\\n  font-style: initial;\\n  font-weight: initial;\\n  --gallery-position-top: auto;\\n  --gallery-position-left: 50%;\\n  --gallery-position-right: auto;\\n  --gallery-position-bottom: 40px;\\n  --gallery-transform: translate(-50%, 0);\\n}\\n\\n.ck-gallery {\\n  position: relative;\\n  width: 100%;\\n  display: inline-block;\\n  margin: auto;\\n  overflow: hidden;\\n}\\n\\n.disabled {\\n  opacity: 0.3;\\n}\\n\\n.ck-gallery__rail {\\n  display: flex;\\n  transition: transform 0.7s ease;\\n}\\n\\n::slotted(*) {\\n  display: block;\\n  width: 100%;\\n  flex-shrink: 0;\\n}\\n\\n.ck-gallery__controls {\\n  position: absolute;\\n  top: var(--gallery-position-top);\\n  bottom: var(--gallery-position-bottom);\\n  left: var(--gallery-position-left);\\n  right: var(--gallery-position-right);\\n  transform: var(--gallery-transform);\\n  background-color: var(--color-white);\\n  display: flex;\\n  min-width: 40px;\\n  max-height: 60px;\\n  justify-content: space-between;\\n  align-items: flex-end;\\n  padding: 10px 20px;\\n  border-radius: 10px;\\n}\\n\\n.ck-gallery__actions {\\n  min-width: 130px;\\n  padding-left: 20px;\\n  margin-left: 20px;\\n  border-left: 1px solid var(--color-grey-light);\\n  font-size: 14px;\\n}\\n\\n.ck-gallery__pager {\\n  display: flex;\\n  justify-content: space-between;\\n  margin-bottom: 5px;\\n}\\n\\n.ck-gallery__dots {\\n  margin-right: 10px;\\n  display: flex;\\n}\\n\\n.ck-gallery__dot-item {\\n  display: inline-block;\\n  height: 20px;\\n  width: 20px;\\n  border-radius: 100%;\\n  margin-right: 5px;\\n  background-color: var(--color-black-30);\\n  text-align: center;\\n  line-height: 20px;\\n  color: var(--color-white);\\n  cursor: pointer;\\n  font-size: 12px;\\n  transition: background-color 0.35s ease;\\n}\\n\\n.ck-gallery__add {\\n  display: inline-block;\\n  box-sizing: border-box;\\n  height: 20px;\\n  width: 20px;\\n  border-radius: 100%;\\n  margin-right: 5px;\\n  margin-left: 10px;\\n  background-color: var(--color-white);\\n  text-align: center;\\n  color: var(--color-blue);\\n  line-height: 16px;\\n  font-size: 16px;\\n  cursor: pointer;\\n  transition: background-color 0.35s ease;\\n  border: 1px solid var(--color-blue);\\n}\\n\\n.ck-gallery__dot-item.active {\\n  background-color: var(--color-black-80);\\n}\\n\\n\\n.ck-gallery__add-slide:hover {\\n  background-color: var(--color-blue);\\n  color: var(--color-white);\\n}\\n\\n.ck-gallery__icons {\\n  max-width: 110px;\\n  display: flex;\\n  justify-content: space-between;\\n  margin-top: 5px;\\n}\\n\\n.ck-gallery__icon {\\n  cursor: pointer;\\n  width: 30px;\\n  height: 30px;\\n  border-radius: 50%;\\n  transition: background-color 0.35s ease;\\n  background-color: transparent;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n\\n.ck-gallery__icon:hover {\\n  background-color: #f0f0f0;\\n}\\n\\n.ck-gallery__icon > * {\\n  width: 14px;\\n  height: 14px;\\n}\\n\\n[data-tooltip] {\\n  position: relative;\\n  cursor: pointer;\\n  text-align: center;\\n}\\n\\n/* Base styles for the entire tooltip */\\n[data-tooltip]:before,\\n[data-tooltip]:after {\\n  position: absolute;\\n  visibility: hidden;\\n  transition:\\n        opacity 0.2s ease-in-out,\\n        visibility 0.2s ease-in-out,\\n        transform 0.2s cubic-bezier(0.71, 1.7, 0.77, 1.24);\\n  transform: translate3d(0, 0, 0);\\n  pointer-events: none;\\n}\\n\\n.disabled[data-tooltip]:before,\\n.disabled[data-tooltip]:after {\\n  display: none;\\n}\\n\\n/* Show the entire tooltip on hover and focus */\\n[data-tooltip]:hover:before,\\n[data-tooltip]:hover:after,\\n[data-tooltip]:focus:before,\\n[data-tooltip]:focus:after {\\n  visibility: visible;\\n  opacity: 1;\\n}\\n\\n/* Base styles for the tooltip's directional arrow */\\n[data-tooltip]:before {\\n  z-index: 1001;\\n  border: 6px solid transparent;\\n  background: transparent;\\n  content: \\\"\\\";\\n}\\n\\n/* Base styles for the tooltip's content area */\\n[data-tooltip]:after {\\n  z-index: 1000;\\n  padding: 8px;\\n  display: inline-block;\\n  width: 160px;\\n  background-color: var(--color-black-60);\\n  color: var(--color-white);\\n  content: attr(data-tooltip);\\n  font-size: 13px;\\n  line-height: 1;\\n}\\n\\n/* Horizontally align top/bottom tooltips */\\n[data-tooltip]:after {\\n  margin-left: -80px;\\n}\\n\\n[data-tooltip]:hover:before,\\n[data-tooltip]:hover:after,\\n[data-tooltip]:focus:before,\\n[data-tooltip]:focus:after {\\n  transform: translateY(-12px);\\n}\\n\\n\\n[data-tooltip]:before,\\n[data-tooltip]:after {\\n  top: 80%;\\n  bottom: auto;\\n  left: 50%;\\n}\\n\\n[data-tooltip]:before {\\n  margin-top: -12px;\\n  margin-left: -6px;\\n  margin-bottom: 0;\\n  border-top-color: transparent;\\n  border-bottom-color: var(--color-black-60);\\n}\\n\\n[data-tooltip]:hover:before,\\n[data-tooltip]:hover:after,\\n[data-tooltip]:focus:before,\\n[data-tooltip]:focus:after {\\n  transform: translateY(12px);\\n}\\n\\n\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\">\\n  <path d=\\\"M20,11H7.83l5.59-5.59L12,4,4,12l8,8,1.41-1.41L7.83,13H20Z\\\"/>\\n</svg>\\n\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\">\\n  <path d=\\\"M12,4,10.59,5.41,16.17,11H4v2H16.17l-5.58,5.59L12,20l8-8Z\\\"/>\\n</svg>\\n\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\">\\n  <path d=\\\"M6,19a2.006,2.006,0,0,0,2,2h8a2.006,2.006,0,0,0,2-2V7H6ZM8,9h8V19H8Zm7.5-5-1-1h-5l-1,1H5V6H19V4Z\\\"/>\\n</svg>\\n\"","module.exports = \":host {\\n  --color-blue: #004adc;\\n  --color-black: #222330;\\n  --color-black-80: rgba(0, 0, 0, 0.8);\\n  --color-black-60: rgba(0, 0, 0, 0.6);\\n  --color-black-30: rgba(0, 0, 0, 0.3);\\n  --color-grey-light: #CCC;\\n  --color-white: #FFF;\\n  --font-size-text: 16px;\\n  --baseline: 8px;\\n  --baseline2: 16px;\\n  --baseline3: 24px;\\n  --baseline4: 32px;\\n  --baseline5: 40px;\\n  font-style: initial;\\n  font-weight: initial;\\n  font-family: var(--font-family, sans-serif);\\n}\\n\\n.ck-tabs {\\n  width: 100%;\\n  display: inline-block;\\n  margin: auto;\\n  overflow: hidden;\\n}\\n\\n.ck-tabs__header-tab-list {\\n  list-style: none;\\n  display: flex;\\n  padding-left: 0;\\n  border-bottom: 1px solid var(--color-grey-light);\\n}\\n\\n\\n.ck-tabs__header-tab-item {\\n  padding: 0 var(--baseline3) 0 var(--baseline3);\\n  border-bottom: 1px solid var(--color-grey-light);\\n  margin-bottom: -1px;\\n  cursor: pointer;\\n  position: relative;\\n  font-size: var(--font-size-text);\\n  position: relative;\\n}\\n\\n.ck-tabs__header-icon {\\n  height: 0;\\n  width: 0;\\n  cursor: pointer;\\n  opacity: 0;\\n  visibility: hidden;\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n}\\n\\n.ck-tabs__header-tab-item.active {\\n  border-bottom: 2px solid var(--color-blue);\\n  color: var(--color-blue);\\n  font-weight: bold;\\n  cursor: default;\\n}\\n\\n.ck-tabs__header-tab-item.active .ck-tabs__header-icon {\\n  width: var(--baseline2);\\n  height: var(--baseline2);\\n}\\n\\n.ck-tabs__header-tab-item.active:hover .ck-tabs__header-icon {\\n  opacity: 1;\\n  visibility: visible;\\n}\\n\\n.ck-tabs__header-tab-item.default:before {\\n  content: '*';\\n  margin-right: 5px;\\n  font-size: 19px;\\n  height: var(--baseline2);\\n  position: absolute;\\n  left: 5px;\\n  top: 0;\\n}\\n\\n.ck-tabs__header-tab-add {\\n  margin-left: var(--baseline3);\\n  cursor: pointer;\\n  height: 20px;\\n  width: 20px;\\n  background-color: var(--color-black-80);\\n  text-align: center;\\n  color: var(--color-white);\\n  border-radius: 50%;\\n  transition: background-color 0.35s ease;\\n  position: relative;\\n  margin-bottom: 15px;\\n}\\n\\n.ck-tabs__header-tab-add::before {\\n  content: '+';\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -54%)\\n}\\n\\n.ck-tabs__header-tab-add:hover {\\n  background-color: var(--color-blue);\\n}\\n\\n.ck-tabs__rail {\\n  display: flex;\\n}\\n\\n::slotted(*) {\\n  display: block;\\n  width: 100%;\\n  flex-shrink: 0;\\n}\\n\"","module.exports = \":host {\\n  --color-blue: #004adc;\\n  --color-blue-60: rgba(0, 74, 220, 0.6);\\n  --color-black: #222330;\\n  --color-black-80: rgba(0, 0, 0, 0.8);\\n  --color-black-60: rgba(0, 0, 0, 0.6);\\n  --color-black-30: rgba(0, 0, 0, 0.3);\\n  --color-grey-light: #CCC;\\n  --color-white: #FFF;\\n  --font-size-small: 12px;\\n  --font-size-text: 16px;\\n  --baseline: 8px;\\n  --baseline2: 16px;\\n  --baseline3: 24px;\\n  --baseline4: 32px;\\n  --baseline5: 40px;\\n  font-family: var(--font-family, sans-serif);\\n}\\n\\n.modal {\\n  position: fixed;\\n  left: 0;\\n  top: 0;\\n  width: 100%;\\n  height: 100%;\\n  background-color: var(--color-black-30);\\n  opacity: 0;\\n  visibility: hidden;\\n  transform: scale(1.1);\\n  transition: visibility 0s linear .35s,opacity .35s 0s,transform .35s;\\n  z-index: 1;\\n}\\n.visible {\\n  opacity: 1;\\n  visibility: visible;\\n  transform: scale(1);\\n  transition: visibility 0s linear 0s,opacity .35s 0s,transform .35s;\\n}\\n\\n.modal__item {\\n  background-color: var(--color-white);\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n  border-radius: 4px;\\n  min-width: 300px;\\n  box-shadow: 0px 5px 40px 1px rgba(0,0,0,0.35);\\n}\\n\\n.modal__content, .modal__actions, .modal__title {\\n  padding: var(--baseline2);\\n}\\n\\n.modal__actions {\\n  display: flex;\\n  justify-content: flex-end;\\n}\\n\\n.modal__action {\\n  text-transform: uppercase;\\n  cursor: pointer;\\n  margin-left: 20px;\\n  font-size: var(--font-size-small);\\n}\\n\\n.modal__action--primary {\\n  color: var(--color-blue);\\n}\\n\\n.modal__action-wrap-delete {\\n  flex: 1;\\n}\\n\\n.modal__action--delete {\\n  margin: 0;\\n  transition: 0.35s color ease;\\n}\\n\\n.modal__action--delete:hover {\\n  color: red;\\n}\\n\\n.modal__title {\\n  font-size: var(--font-size-text);\\n  background-color: var(--color-blue);\\n  color: var(--color-white);\\n  margin: 0;\\n  border-top-left-radius: 4px; \\n  border-top-right-radius: 4px; \\n}\\n\\n.modal__button-container {\\n  text-align: right;\\n}\\n\\n.modal__label {\\n  font-size: var(--font-size-small);\\n  color: var(--color-black-30);\\n}\\n\\n.modal__input {\\n  margin: 5px 0 20px 0;\\n  display: block;\\n  border: none;\\n  border-bottom: 1px solid  var(--color-black-30);\\n  padding: 5px 0;\\n  outline: none;\\n  width: 100%;\\n  transition: border-color 0.35s;\\n  font-size: var(--font-size-text);\\n}\\n\\n.modal__input:focus {\\n  border-color: var(--color-blue);\\n}\\n\\n.modal__toggle {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.modal__toggle-label {\\n  margin-left: 15px;\\n  font-size: var(--font-size-small);\\n}\\n\\n/* The switch - the box around the slider */\\n.switch {\\n  position: relative;\\n  display: inline-block;\\n  width: 30px;\\n  height: 8px;\\n}\\n\\n/* Hide default HTML checkbox */\\n.switch input {\\n  opacity: 0;\\n  width: 0;\\n  height: 0;\\n}\\n\\n/* The slider */\\n.slider {\\n  position: absolute;\\n  cursor: pointer;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  background-color: var(--color-black-30);\\n  transition: all 0.35s ease;\\n  border-radius: 20px;\\n}\\n\\n.slider:before {\\n  position: absolute;\\n  content: \\\"\\\";\\n  height: 15px;\\n  width: 15px;\\n  left: 0px;\\n  bottom: -3px;\\n  background-color: var(--color-white);\\n  transition: all 0.35s ease;\\n  box-shadow: 0px 3px 15px 0px rgba(0,0,0,0.3);\\n  border-radius: 50%;\\n}\\n\\ninput:checked + .slider {\\n  background-color: var(--color-blue-60);\\n}\\n\\n\\ninput:checked + .slider:before {\\n  transform: translateX(15px);\\n  background-color: var(--color-blue);\\n}\\n\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\">\\n  <path\\n      d=\\\"M3,17.25V21H6.75L17.81,9.94,14.06,6.19ZM20.71,7.04a1,1,0,0,0,0-1.41L18.37,3.29a1,1,0,0,0-1.41,0L15.13,5.12l3.75,3.75,1.83-1.83Z\\\"/>\\n</svg>\\n\"","module.exports = \":host {\\n  --color-red: #ff0000;\\n  --color-grey-light: #ccc;\\n}\\n.text-conflict {\\n  position: relative;\\n}\\nspan {\\n  cursor: pointer;\\n}\\nspan.resolve {\\n  text-decoration: underline;\\n  text-decoration-color: var(--color-red);\\n}\\n.text-conflict__options {\\n  visibility: hidden;\\n  z-index: 5;\\n  opacity: 0;\\n  max-width: 400px;\\n  background: white;\\n  box-shadow: 0px 0px 5px var(--color-grey-light);\\n  border-radius: 3px;\\n  position: absolute;\\n  top: 0;\\n}\\n.visible {\\n  opacity: 1;\\n  visibility: visible;\\n  transform: scale(1);\\n  transition: visibility 0s linear 0s,opacity .35s 0s,transform .35s;\\n}\\n\"","module.exports = \":host {\\n  --color-grey-light: #ccc;\\n  --color-grey-dark: #515151;\\n}\\n.option {\\n  display: flex;\\n  border-bottom: 1px solid var(--color-grey-light);\\n  cursor: pointer;\\n  align-items: center;\\n}\\n\\n.option:hover {\\n  background-color: #f6f6f6;\\n  transition: background-color .35s linear 0s;\\n}\\n\\n.option > span {\\n  padding: 5px;\\n  display: inline-block;\\n}\\n\\n.option > span.option__label {\\n  width: 150px;\\n  color: var(--color-grey-dark);\\n  padding: 25px 10px;\\n  font-size: 14px;\\n}\\n.option > span.option__content {\\n  padding: 0 20px;\\n  text-align: left;\\n}\\n\"","module.exports = \":host {\\n}\\n\\nbutton {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  z-index: 3;\\n  display: block;\\n  pointer-events: auto;\\n  border: none;\\n  color: white;\\n  cursor: pointer;\\n  font-family: inherit;\\n  font-size: inherit;\\n  background: rgba(0, 0, 0, 0.5);\\n  padding: 10px 20px;\\n  width: 150px;\\n}\\n\\nbutton.left {\\n  left: 0;\\n}\\n\\n::slotted {\\n  min-width: 100%;\\n}\\n\"","module.exports = \":host {\\n  display: block;\\n  width: 100%;\\n}\\n\\n.media-conflict {\\n  position: relative;\\n  overflow: hidden;\\n  background: rgba(0, 0, 0, 0.5);\\n}\\n\\n.media-conflict ::slotted(ck-conflict-media-option) {\\n  line-height: 0;\\n  display: block;\\n  pointer-events: none;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n}\\n\\n.media-conflict ::slotted(ck-conflict-media-option ::slotted) {\\n  line-height: 0;\\n  display: block;\\n  pointer-events: none;\\n}\\n\\n.media-conflict ::slotted(ck-conflict-media-option:first-child) {\\n  position: relative;\\n  overflow: hidden;\\n  z-index: 2;\\n  border-right: 3px solid rgb(255, 255, 255);\\n}\\n\\n.media-conflict ::slotted(ck-conflict-media-option:last-child) {\\n  position: absolute;\\n  right: 0px;\\n  top: 0px;\\n  z-index: 1;\\n  width: 100%;\\n}\\n\"","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/version\n */\n\n/* globals window, global */\n\nimport log from './log';\nimport { version } from 'ckeditor5/package.json';\n\nconst windowOrGlobal = typeof window === 'object' ? window : global;\n\nif ( windowOrGlobal.CKEDITOR_VERSION ) {\n\t/**\n\t * This error is thrown when the `CKEDITOR_VERSION` global is being set more than once. This happens when in\n\t * two scenarios described above.\n\t *\n\t * # Some packages were duplicated\n\t *\n\t * CKEditor 5 was built from source packages which were duplicated during installation via npm.\n\t * Normally, npm deduplicates all packages so e.g. `@ckeditor/ckeditor5-core` is installed only once in `node_modules/`.\n\t * However, subsequent `npm install` calls or conflicting version dependencies may cause npm to install some packages\n\t * more than once. Furthermore, [npm in version 5+](https://github.com/npm/npm/issues/16991)\n\t * is also known for randomly failing to deduplicate packages.\n\t *\n\t * We recommend checking if any of the below steps helps:\n\t *\n\t * * `rm -rf node_modules && npm install` to make sure you have a clean `node_modules/` – this step\n\t * is known to help in majority of cases,\n\t * * check whether all CKEditor 5 packages are up to date and reinstall them\n\t * if you changed anything (`rm -rf node_modules && npm install`),\n\t * * downgrade npm to version 4 if you use a newer version.\n\t *\n\t * If all packages are correct and compatible with each other the above steps are known to help. If not, you may\n\t * try to check with `npm ls` how many times `@ckeditor/ckeditor5-core` is installed. If more than once, verify\n\t * which package causes that.\n\t *\n\t * # Two+ builds are loaded\n\t *\n\t * If you use CKEditor 5 builds, you might have loaded two (or more) `ckeditor.js` files in one web page\n\t * – check your web page for duplicated `<script>` elements or make sure your page builder/bundler includes CKEditor only once.\n\t *\n\t * @error ckeditor-version-collision\n\t * @param {String} collidingVersion The version of the build which has already been (incorrectly) loaded.\n\t * @param {String} version The version of the build which is supposed to be loaded.\n\t */\n\tlog.error( 'ckeditor-version-collision: The global CKEDITOR_VERSION constant has already been set.', {\n\t\tcollidingVersion: windowOrGlobal.CKEDITOR_VERSION,\n\t\tversion\n\t} );\n} else {\n\twindowOrGlobal.CKEDITOR_VERSION = version;\n}\n","\nvar content = require(\"!!../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./globals.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./globals.css\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./globals.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-hidden{display:none!important}.ck.ck-reset,.ck.ck-reset_all,.ck.ck-reset_all *{box-sizing:border-box;width:auto;height:auto;position:static}:root{--ck-z-default:1;--ck-z-modal:calc(var(--ck-z-default) + 999)}:root{--ck-color-base-foreground:#fafafa;--ck-color-base-background:#fff;--ck-color-base-border:#c4c4c4;--ck-color-base-action:#61b045;--ck-color-base-focus:#6cb5f9;--ck-color-base-text:#333;--ck-color-base-active:#198cf0;--ck-color-base-active-focus:#0e7fe1;--ck-color-base-error:#db3700;--ck-color-focus-border:#47a4f5;--ck-color-focus-shadow:rgba(119,186,248,0.5);--ck-color-focus-disabled-shadow:rgba(119,186,248,0.3);--ck-color-focus-error-shadow:rgba(255,64,31,0.3);--ck-color-text:var(--ck-color-base-text);--ck-color-shadow-drop:rgba(0,0,0,0.15);--ck-color-shadow-inner:rgba(0,0,0,0.1);--ck-color-button-default-background:transparent;--ck-color-button-default-hover-background:#e6e6e6;--ck-color-button-default-active-background:#d9d9d9;--ck-color-button-default-active-shadow:#bfbfbf;--ck-color-button-default-disabled-background:transparent;--ck-color-button-on-background:#dedede;--ck-color-button-on-hover-background:#c4c4c4;--ck-color-button-on-active-background:#bababa;--ck-color-button-on-active-shadow:#a1a1a1;--ck-color-button-on-disabled-background:#dedede;--ck-color-button-action-background:var(--ck-color-base-action);--ck-color-button-action-hover-background:#579e3d;--ck-color-button-action-active-background:#53973b;--ck-color-button-action-active-shadow:#498433;--ck-color-button-action-disabled-background:#7ec365;--ck-color-button-action-text:var(--ck-color-base-background);--ck-color-button-save:#008a00;--ck-color-button-cancel:#db3700;--ck-color-switch-button-off-background:#b0b0b0;--ck-color-switch-button-on-background:var(--ck-color-button-action-background);--ck-color-switch-button-inner-background:var(--ck-color-base-background);--ck-color-dropdown-panel-background:var(--ck-color-base-background);--ck-color-dropdown-panel-border:var(--ck-color-base-border);--ck-color-input-background:var(--ck-color-base-background);--ck-color-input-border:#c7c7c7;--ck-color-input-error-border:var(--ck-color-base-error);--ck-color-input-text:var(--ck-color-base-text);--ck-color-input-disabled-background:#f2f2f2;--ck-color-input-disabled-border:#c7c7c7;--ck-color-input-disabled-text:#5c5c5c;--ck-color-list-background:var(--ck-color-base-background);--ck-color-list-button-hover-background:var(--ck-color-base-foreground);--ck-color-list-button-on-background:var(--ck-color-base-active);--ck-color-list-button-on-background-focus:var(--ck-color-base-active-focus);--ck-color-list-button-on-text:var(--ck-color-base-background);--ck-color-panel-background:var(--ck-color-base-background);--ck-color-panel-border:var(--ck-color-base-border);--ck-color-toolbar-background:var(--ck-color-base-foreground);--ck-color-toolbar-border:var(--ck-color-base-border);--ck-color-tooltip-background:var(--ck-color-base-text);--ck-color-tooltip-text:var(--ck-color-base-background);--ck-color-engine-placeholder-text:#c2c2c2;--ck-color-upload-bar-background:#6cb5f9;--ck-color-upload-infinite-background:rgba(0,0,0,0.1);--ck-color-link-default:#0000f0;--ck-color-link-selected-background:rgba(31,177,255,0.1)}:root{--ck-disabled-opacity:.5}:root{--ck-focus-outer-shadow-geometry:0 0 0 3px;--ck-focus-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-shadow);--ck-focus-disabled-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-disabled-shadow);--ck-focus-error-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-error-shadow);--ck-focus-ring:1px solid var(--ck-color-focus-border)}:root{--ck-font-size-base:13px;--ck-line-height-base:1.84615;--ck-font-face:Helvetica,Arial,Tahoma,Verdana,Sans-Serif;--ck-font-size-tiny:0.7em;--ck-font-size-small:0.75em;--ck-font-size-normal:1em;--ck-font-size-big:1.4em;--ck-font-size-large:1.8em}:root{--ck-ui-component-min-height:2.3em}.ck.ck-reset,.ck.ck-reset_all,.ck.ck-reset_all *{margin:0;padding:0;border:0;background:transparent;text-decoration:none;vertical-align:middle;transition:none;word-wrap:break-word}.ck.ck-reset_all,.ck.ck-reset_all *{border-collapse:collapse;font:normal normal normal var(--ck-font-size-base)/var(--ck-line-height-base) var(--ck-font-face);color:var(--ck-color-text);text-align:left;white-space:nowrap;cursor:auto;float:none}.ck.ck-reset_all .ck-rtl *{text-align:right}.ck.ck-reset_all iframe{vertical-align:inherit}.ck.ck-reset_all textarea{white-space:pre-wrap}.ck.ck-reset_all input[type=password],.ck.ck-reset_all input[type=text],.ck.ck-reset_all textarea{cursor:text}.ck.ck-reset_all input[type=password][disabled],.ck.ck-reset_all input[type=text][disabled],.ck.ck-reset_all textarea[disabled]{cursor:default}.ck.ck-reset_all fieldset{padding:10px;border:2px groove #dfdee3}.ck.ck-reset_all button::-moz-focus-inner{padding:0;border:0}:root{--ck-border-radius:2px}:root{--ck-inner-shadow:2px 2px 3px var(--ck-color-shadow-inner) inset;--ck-drop-shadow:0 1px 2px 1px var(--ck-color-shadow-drop)}:root{--ck-spacing-unit:0.6em;--ck-spacing-large:calc(var(--ck-spacing-unit)*1.5);--ck-spacing-standard:var(--ck-spacing-unit);--ck-spacing-medium:calc(var(--ck-spacing-unit)*0.8);--ck-spacing-small:calc(var(--ck-spacing-unit)*0.5);--ck-spacing-tiny:calc(var(--ck-spacing-unit)*0.3);--ck-spacing-extra-tiny:calc(var(--ck-spacing-unit)*0.16)}\"","\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./balloonpanel.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./balloonpanel.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./balloonpanel.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \":root{--ck-balloon-panel-arrow-z-index:calc(var(--ck-z-default) - 3)}.ck.ck-balloon-panel{display:none;position:absolute;z-index:var(--ck-z-modal)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{content:\\\"\\\";position:absolute}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_n]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_n]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_s]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_s]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel.ck-balloon-panel_visible{display:block}:root{--ck-balloon-arrow-offset:2px;--ck-balloon-arrow-height:10px;--ck-balloon-arrow-half-width:8px}.ck.ck-balloon-panel{border-radius:0}.ck-rounded-corners .ck.ck-balloon-panel,.ck.ck-balloon-panel.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-balloon-panel{box-shadow:var(--ck-drop-shadow),0 0;min-height:15px;background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{width:0;height:0;border-style:solid}.ck.ck-balloon-panel[class*=arrow_n]:after,.ck.ck-balloon-panel[class*=arrow_n]:before{border-left-width:var(--ck-balloon-arrow-half-width);border-bottom-width:var(--ck-balloon-arrow-height);border-right-width:var(--ck-balloon-arrow-half-width);border-top-width:0}.ck.ck-balloon-panel[class*=arrow_n]:before{border-left-color:transparent;border-bottom-color:var(--ck-color-panel-border);border-right-color:transparent;border-top-color:transparent}.ck.ck-balloon-panel[class*=arrow_n]:after{border-left-color:transparent;border-bottom-color:var(--ck-color-panel-background);border-right-color:transparent;border-top-color:transparent;margin-top:var(--ck-balloon-arrow-offset)}.ck.ck-balloon-panel[class*=arrow_s]:after,.ck.ck-balloon-panel[class*=arrow_s]:before{border-left-width:var(--ck-balloon-arrow-half-width);border-bottom-width:0;border-right-width:var(--ck-balloon-arrow-half-width);border-top-width:var(--ck-balloon-arrow-height)}.ck.ck-balloon-panel[class*=arrow_s]:before{border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;border-top-color:var(--ck-color-panel-border)}.ck.ck-balloon-panel[class*=arrow_s]:after{border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;border-top-color:var(--ck-color-panel-background);margin-bottom:var(--ck-balloon-arrow-offset)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:before{left:50%;margin-left:calc(-1*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:before{left:calc(2*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:before{right:calc(2*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:before{left:50%;margin-left:calc(-1*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:before{left:calc(2*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:before{right:calc(2*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./toolbar.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./toolbar.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./toolbar.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-toolbar{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-flow:row wrap;align-items:center}.ck.ck-toolbar.ck-toolbar_vertical{flex-direction:column}.ck.ck-toolbar.ck-toolbar_floating{flex-wrap:nowrap}.ck.ck-toolbar__separator{display:inline-block}.ck.ck-toolbar__newline{display:block;width:100%}.ck.ck-toolbar{border-radius:0}.ck-rounded-corners .ck.ck-toolbar,.ck.ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-toolbar{background:var(--ck-color-toolbar-background);padding:0 var(--ck-spacing-small);border:1px solid var(--ck-color-toolbar-border)}.ck.ck-toolbar>*{margin-right:var(--ck-spacing-small);margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck.ck-toolbar.ck-toolbar_vertical{padding:0}.ck.ck-toolbar.ck-toolbar_vertical>*{width:100%;margin:0;border-radius:0;border:0}.ck.ck-toolbar>:last-child{margin-right:0}.ck-toolbar-container .ck.ck-toolbar{border:0}.ck.ck-toolbar__separator{align-self:stretch;width:1px;margin-top:0;margin-bottom:0;background:var(--ck-color-toolbar-border)}.ck.ck-toolbar__newline{margin:0}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./editorui.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./editorui.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./editorui.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-editor__editable:not(.ck-editor__nested-editable){border-radius:0}.ck-rounded-corners .ck.ck-editor__editable:not(.ck-editor__nested-editable),.ck.ck-editor__editable:not(.ck-editor__nested-editable).ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-editor__editable:not(.ck-editor__nested-editable).ck-focused{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0}.ck.ck-editor__editable_inline{overflow:auto;padding:0 var(--ck-spacing-standard);border:1px solid transparent}.ck.ck-editor__editable_inline>:first-child{margin-top:var(--ck-spacing-large)}.ck.ck-editor__editable_inline>:last-child{margin-bottom:var(--ck-spacing-large)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_n]:after{border-bottom-color:var(--ck-color-base-foreground)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_s]:after{border-top-color:var(--ck-color-base-foreground)}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./icon.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./icon.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./icon.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-icon{vertical-align:middle}:root{--ck-icon-size:calc(var(--ck-line-height-base)*var(--ck-font-size-normal))}.ck.ck-icon{width:var(--ck-icon-size);height:var(--ck-icon-size);font-size:.8333350694em;will-change:transform}.ck.ck-icon,.ck.ck-icon *{color:inherit;cursor:inherit}.ck.ck-icon :not([fill]){fill:currentColor}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./tooltip.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./tooltip.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./tooltip.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-tooltip,.ck.ck-tooltip .ck-tooltip__text:after{position:absolute;pointer-events:none;-webkit-backface-visibility:hidden}.ck-tooltip{visibility:hidden;opacity:0;display:none;z-index:var(--ck-z-modal)}.ck-tooltip .ck-tooltip__text{display:inline-block}.ck-tooltip .ck-tooltip__text:after{content:\\\"\\\";width:0;height:0}:root{--ck-tooltip-arrow-size:5px}.ck.ck-tooltip{left:50%}.ck.ck-tooltip.ck-tooltip_s{bottom:calc(-1*var(--ck-tooltip-arrow-size));transform:translateY(100%)}.ck.ck-tooltip.ck-tooltip_s .ck-tooltip__text:after{top:calc(-1*var(--ck-tooltip-arrow-size));transform:translateX(-50%);border-left-color:transparent;border-bottom-color:var(--ck-color-tooltip-background);border-right-color:transparent;border-top-color:transparent;border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:var(--ck-tooltip-arrow-size);border-right-width:var(--ck-tooltip-arrow-size);border-top-width:0}.ck.ck-tooltip.ck-tooltip_n{top:calc(-1*var(--ck-tooltip-arrow-size));transform:translateY(-100%)}.ck.ck-tooltip.ck-tooltip_n .ck-tooltip__text:after{bottom:calc(-1*var(--ck-tooltip-arrow-size));transform:translateX(-50%);border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;border-top-color:var(--ck-color-tooltip-background);border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:0;border-right-width:var(--ck-tooltip-arrow-size);border-top-width:var(--ck-tooltip-arrow-size)}.ck.ck-tooltip .ck-tooltip__text{border-radius:0}.ck-rounded-corners .ck.ck-tooltip .ck-tooltip__text,.ck.ck-tooltip .ck-tooltip__text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-tooltip .ck-tooltip__text{font-size:.9em;line-height:1.5;color:var(--ck-color-tooltip-text);padding:var(--ck-spacing-small) var(--ck-spacing-medium);background:var(--ck-color-tooltip-background);position:relative;left:-50%}.ck.ck-tooltip .ck-tooltip__text:after{border-style:solid;left:50%}.ck.ck-tooltip,.ck.ck-tooltip .ck-tooltip__text:after{transition:opacity .2s ease-in-out .2s}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./button.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./button.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./button.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-button,a.ck.ck-button{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.ck.ck-button .ck-tooltip,a.ck.ck-button .ck-tooltip{display:block}@media (hover:none){.ck.ck-button .ck-tooltip,a.ck.ck-button .ck-tooltip{display:none}}.ck.ck-button,a.ck.ck-button{position:relative;display:inline-flex;align-items:center;justify-content:left}.ck.ck-button.ck-button_with-text .ck-button__label,a.ck.ck-button.ck-button_with-text .ck-button__label{display:inline-block}.ck.ck-button:not(.ck-button_with-text),a.ck.ck-button:not(.ck-button_with-text){justify-content:center}.ck.ck-button:hover .ck-tooltip,a.ck.ck-button:hover .ck-tooltip{visibility:visible;opacity:1}.ck.ck-button:focus:not(:hover) .ck-tooltip,a.ck.ck-button:focus:not(:hover) .ck-tooltip{display:none}.ck.ck-button .ck-button__label,a.ck.ck-button .ck-button__label{display:none}.ck.ck-button,a.ck.ck-button{background:var(--ck-color-button-default-background)}.ck.ck-button:not(.ck-disabled):hover,a.ck.ck-button:not(.ck-disabled):hover{background:var(--ck-color-button-default-hover-background)}.ck.ck-button:not(.ck-disabled):active,a.ck.ck-button:not(.ck-disabled):active{background:var(--ck-color-button-default-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-default-active-shadow)}.ck.ck-button.ck-disabled,a.ck.ck-button.ck-disabled{background:var(--ck-color-button-default-disabled-background)}.ck.ck-button,a.ck.ck-button{border-radius:0}.ck-rounded-corners .ck.ck-button,.ck-rounded-corners a.ck.ck-button,.ck.ck-button.ck-rounded-corners,a.ck.ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-button,a.ck.ck-button{white-space:nowrap;cursor:default;vertical-align:middle;padding:var(--ck-spacing-tiny);text-align:center;min-width:var(--ck-ui-component-min-height);min-height:var(--ck-ui-component-min-height);line-height:1;font-size:inherit;border:1px solid transparent;transition:box-shadow .2s ease-in-out;-webkit-appearance:none}.ck.ck-button:active,.ck.ck-button:focus,a.ck.ck-button:active,a.ck.ck-button:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),0 0;border-color:transparent}.ck.ck-button.ck-disabled:active,.ck.ck-button.ck-disabled:focus,a.ck.ck-button.ck-disabled:active,a.ck.ck-button.ck-disabled:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),0 0}.ck.ck-button.ck-disabled .ck-button__icon,a.ck.ck-button.ck-disabled .ck-button__icon{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-disabled .ck-button__label,a.ck.ck-button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-button_with-text,a.ck.ck-button.ck-button_with-text{padding:var(--ck-spacing-tiny) var(--ck-spacing-standard)}.ck.ck-button.ck-button_with-text .ck-button__icon,a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-left:calc(-1*var(--ck-spacing-small));margin-right:var(--ck-spacing-small)}.ck.ck-button.ck-on,a.ck.ck-button.ck-on{background:var(--ck-color-button-on-background)}.ck.ck-button.ck-on:not(.ck-disabled):hover,a.ck.ck-button.ck-on:not(.ck-disabled):hover{background:var(--ck-color-button-on-hover-background)}.ck.ck-button.ck-on:not(.ck-disabled):active,a.ck.ck-button.ck-on:not(.ck-disabled):active{background:var(--ck-color-button-on-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-on-active-shadow)}.ck.ck-button.ck-on.ck-disabled,a.ck.ck-button.ck-on.ck-disabled{background:var(--ck-color-button-on-disabled-background)}.ck.ck-button.ck-button-save,a.ck.ck-button.ck-button-save{color:var(--ck-color-button-save)}.ck.ck-button.ck-button-cancel,a.ck.ck-button.ck-button-cancel{color:var(--ck-color-button-cancel)}.ck.ck-button .ck-button__icon use,.ck.ck-button .ck-button__icon use *,a.ck.ck-button .ck-button__icon use,a.ck.ck-button .ck-button__icon use *{color:inherit}.ck.ck-button .ck-button__label,a.ck.ck-button .ck-button__label{font-size:inherit;font-weight:inherit;color:inherit;cursor:inherit;vertical-align:middle}.ck.ck-button-action,a.ck.ck-button-action{background:var(--ck-color-button-action-background)}.ck.ck-button-action:not(.ck-disabled):hover,a.ck.ck-button-action:not(.ck-disabled):hover{background:var(--ck-color-button-action-hover-background)}.ck.ck-button-action:not(.ck-disabled):active,a.ck.ck-button-action:not(.ck-disabled):active{background:var(--ck-color-button-action-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-action-active-shadow)}.ck.ck-button-action.ck-disabled,a.ck.ck-button-action.ck-disabled{background:var(--ck-color-button-action-disabled-background)}.ck.ck-button-action,a.ck.ck-button-action{color:var(--ck-color-button-action-text)}.ck.ck-button-bold,a.ck.ck-button-bold{font-weight:700}\"","\nvar content = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./blockquote.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../postcss-loader/src/index.js??ref--6-1!./blockquote.css\", function() {\n\t\tvar newContent = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./blockquote.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-content blockquote{overflow:hidden;padding-right:1.5em;padding-left:1.5em;margin-left:0;font-style:italic;border-left:5px solid #ccc}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./dropdown.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./dropdown.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./dropdown.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-dropdown{display:inline-block;position:relative}.ck.ck-dropdown .ck-dropdown__arrow{pointer-events:none;z-index:var(--ck-z-default)}.ck.ck-dropdown .ck-button.ck-dropdown__button{width:100%}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on .ck-tooltip{display:none}.ck.ck-dropdown .ck-dropdown__panel{-webkit-backface-visibility:hidden;display:none;z-index:var(--ck-z-modal);position:absolute}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel-visible{display:inline-block;will-change:transform}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw{bottom:100%}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{transform:translate3d(0,100%,0)}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se{left:0}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{right:0}:root{--ck-dropdown-arrow-size:calc(0.5*var(--ck-icon-size))}.ck.ck-dropdown{font-size:inherit}.ck.ck-dropdown .ck-dropdown__arrow{right:var(--ck-spacing-standard);width:var(--ck-dropdown-arrow-size);margin-left:var(--ck-spacing-small)}.ck.ck-dropdown.ck-disabled .ck-dropdown__arrow{opacity:var(--ck-disabled-opacity)}.ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-left:var(--ck-spacing-small)}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on{border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown .ck-button.ck-dropdown__button .ck-button__label{width:7em;overflow:hidden;text-overflow:ellipsis}.ck.ck-dropdown__panel{box-shadow:var(--ck-drop-shadow),0 0;border-radius:0}.ck-rounded-corners .ck.ck-dropdown__panel,.ck.ck-dropdown__panel.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0}.ck.ck-dropdown__panel{background:var(--ck-color-dropdown-panel-background);border:1px solid var(--ck-color-dropdown-panel-border);bottom:0;min-width:100%}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./list.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./list.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./list.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-list{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-direction:column}.ck.ck-list .ck-list__item,.ck.ck-list .ck-list__separator{display:block}.ck.ck-list .ck-list__item>:focus{position:relative;z-index:var(--ck-z-default)}.ck.ck-list{border-radius:0}.ck-rounded-corners .ck.ck-list,.ck.ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-list{list-style-type:none;background:var(--ck-color-list-background)}.ck.ck-list__item{cursor:default;min-width:12em}.ck.ck-list__item .ck-button{min-height:unset;width:100%;text-align:left;border-radius:0;border:0;padding:calc(0.2*var(--ck-line-height-base)*var(--ck-font-size-base)) calc(0.4*var(--ck-line-height-base)*var(--ck-font-size-base))}.ck.ck-list__item .ck-button .ck-button__label{line-height:calc(1.2*var(--ck-line-height-base)*var(--ck-font-size-base))}.ck.ck-list__item .ck-button:active{box-shadow:none}.ck.ck-list__item .ck-button.ck-on{background:var(--ck-color-list-button-on-background);color:var(--ck-color-list-button-on-text)}.ck.ck-list__item .ck-button.ck-on:hover:not(ck-disabled){background:var(--ck-color-list-button-on-background-focus)}.ck.ck-list__item .ck-button.ck-on:active{box-shadow:none}.ck.ck-list__item .ck-button:hover:not(.ck-disabled){background:var(--ck-color-list-button-hover-background)}.ck.ck-list__item .ck-switchbutton.ck-on{background:var(--ck-color-list-background);color:inherit}.ck.ck-list__item .ck-switchbutton.ck-on:hover:not(ck-disabled){background:var(--ck-color-list-button-hover-background);color:inherit}.ck.ck-list__separator{height:1px;width:100%;background:var(--ck-color-base-border)}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./switchbutton.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./switchbutton.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./switchbutton.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{display:block}:root{--ck-switch-button-toggle-width:2.6153846154em;--ck-switch-button-toggle-inner-size:1.0769230769em;--ck-switch-button-toggle-spacing:1px}.ck.ck-button.ck-switchbutton .ck-button__label{margin-right:calc(2*var(--ck-spacing-large))}.ck.ck-button.ck-switchbutton.ck-disabled .ck-button__toggle{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-switchbutton .ck-button__toggle{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-button.ck-switchbutton .ck-button__toggle{margin-left:auto;transition:background .4s ease;width:var(--ck-switch-button-toggle-width);background:var(--ck-color-switch-button-off-background)}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner.ck-rounded-corners{border-radius:var(--ck-border-radius);border-radius:calc(0.5*var(--ck-border-radius))}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{margin:var(--ck-switch-button-toggle-spacing);width:var(--ck-switch-button-toggle-inner-size);height:var(--ck-switch-button-toggle-inner-size);background:var(--ck-color-switch-button-inner-background);transition:transform .3s ease}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle{background:var(--ck-color-switch-button-on-background)}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(1.3846153847em)}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./toolbardropdown.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./toolbardropdown.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./toolbardropdown.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-toolbar-dropdown .ck-toolbar{flex-wrap:nowrap}.ck.ck-toolbar-dropdown .ck-dropdown__panel .ck-button:focus{z-index:calc(var(--ck-z-default) + 1)}.ck.ck-toolbar-dropdown .ck-toolbar{border:0}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./listdropdown.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./listdropdown.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./listdropdown.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-dropdown .ck-dropdown__panel .ck-list{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list,.ck.ck-dropdown .ck-dropdown__panel .ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-top-right-radius:0}\"","module.exports = \".ck.ck-heading_heading1{font-size:20px}.ck.ck-heading_heading2{font-size:17px}.ck.ck-heading_heading3{font-size:14px}.ck[class*=ck-heading_heading]{font-weight:700}.ck.ck-dropdown.ck-heading-dropdown .ck-dropdown__button .ck-button__label{width:8em}.ck.ck-dropdown.ck-heading-dropdown .ck-dropdown__panel .ck-list__item{min-width:18em}\"","\nvar content = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./tableediting.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../postcss-loader/src/index.js??ref--6-1!./tableediting.css\", function() {\n\t\tvar newContent = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./tableediting.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \":root{--ck-color-table-focused-cell-background:#f5fafe}.ck-widget.table td.ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck-widget.table th.ck-editor__nested-editable.ck-editor__nested-editable_focused{background:var(--ck-color-table-focused-cell-background);border-style:none;outline:1px solid var(--ck-color-focus-border);outline-offset:-1px}\"","\nvar content = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./inserttable.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../postcss-loader/src/index.js??ref--6-1!./inserttable.css\", function() {\n\t\tvar newContent = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./inserttable.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \":root{--ck-insert-table-dropdown-padding:10px;--ck-insert-table-dropdown-box-height:11px;--ck-insert-table-dropdown-box-width:12px;--ck-insert-table-dropdown-box-margin:1px;--ck-insert-table-dropdown-box-border-color:#bfbfbf;--ck-insert-table-dropdown-box-border-active-color:#53a0e4;--ck-insert-table-dropdown-box-active-background:#c7e5ff}.ck .ck-insert-table-dropdown__grid{display:flex;flex-direction:row;flex-wrap:wrap;width:calc(var(--ck-insert-table-dropdown-box-width)*10 + var(--ck-insert-table-dropdown-box-margin)*20 + var(--ck-insert-table-dropdown-padding)*2);padding:var(--ck-insert-table-dropdown-padding) var(--ck-insert-table-dropdown-padding) 0}.ck .ck-insert-table-dropdown__label{text-align:center}.ck .ck-insert-table-dropdown-grid-box{width:var(--ck-insert-table-dropdown-box-width);height:var(--ck-insert-table-dropdown-box-height);margin:var(--ck-insert-table-dropdown-box-margin);border:1px solid var(--ck-insert-table-dropdown-box-border-color);border-radius:1px}.ck .ck-insert-table-dropdown-grid-box.ck-on{border-color:var(--ck-insert-table-dropdown-box-border-active-color);background:var(--ck-insert-table-dropdown-box-active-background)}\"","\nvar content = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./widget.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../postcss-loader/src/index.js??ref--6-1!./widget.css\", function() {\n\t\tvar newContent = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./widget.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck .ck-widget.ck-widget_selectable{position:relative}.ck .ck-widget.ck-widget_selectable .ck-widget__selection-handler{visibility:hidden;position:absolute}.ck .ck-widget.ck-widget_selectable .ck-widget__selection-handler .ck-icon{display:block}.ck .ck-widget.ck-widget_selectable:hover .ck-widget__selection-handler{visibility:visible}.ck .ck-widget.ck-widget_selectable.ck-widget_selected .ck-widget__selection-handler{visibility:visible}:root{--ck-widget-outline-thickness:3px;--ck-widget-handler-icon-size:16px;--ck-widget-handler-animation-duration:200ms;--ck-widget-handler-animation-curve:ease;--ck-color-widget-blurred-border:#dedede;--ck-color-widget-hover-border:#ffc83d;--ck-color-widget-editable-focus-background:var(--ck-color-base-background);--ck-color-widget-drag-handler-icon-color:var(--ck-color-base-background)}.ck .ck-widget{outline-width:var(--ck-widget-outline-thickness);outline-style:solid;outline-color:transparent;transition:outline-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_selected,.ck .ck-widget.ck-widget_selected:hover{outline:var(--ck-widget-outline-thickness) solid var(--ck-color-focus-border)}.ck .ck-widget:hover{outline-color:var(--ck-color-widget-hover-border)}.ck .ck-editor__nested-editable{border:1px solid transparent}.ck .ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck .ck-editor__nested-editable:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0;background-color:var(--ck-color-widget-editable-focus-background)}.ck .ck-widget.ck-widget_selectable .ck-widget__selection-handler{padding:4px;box-sizing:border-box;background-color:transparent;opacity:0;transition:background-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),visibility var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),opacity var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve);border-radius:var(--ck-border-radius) var(--ck-border-radius) 0 0;transform:translateY(-100%);left:calc(0px - var(--ck-widget-outline-thickness))}.ck .ck-widget.ck-widget_selectable .ck-widget__selection-handler:hover .ck-icon .ck-icon__selected-indicator{opacity:1}.ck .ck-widget.ck-widget_selectable .ck-widget__selection-handler .ck-icon{width:var(--ck-widget-handler-icon-size);height:var(--ck-widget-handler-icon-size);color:var(--ck-color-widget-drag-handler-icon-color)}.ck .ck-widget.ck-widget_selectable .ck-widget__selection-handler .ck-icon .ck-icon__selected-indicator{opacity:0;transition:opacity .3s var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_selectable.ck-widget_selected .ck-widget__selection-handler,.ck .ck-widget.ck-widget_selectable.ck-widget_selected:hover .ck-widget__selection-handler{opacity:1;background-color:var(--ck-color-focus-border)}.ck .ck-widget.ck-widget_selectable.ck-widget_selected .ck-widget__selection-handler .ck-icon .ck-icon__selected-indicator,.ck .ck-widget.ck-widget_selectable.ck-widget_selected:hover .ck-widget__selection-handler .ck-icon .ck-icon__selected-indicator{opacity:1}.ck .ck-widget.ck-widget_selectable:hover .ck-widget__selection-handler{opacity:1;background-color:var(--ck-color-widget-hover-border)}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover{outline-color:var(--ck-color-widget-blurred-border)}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected .ck-widget__selection-handler,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected .ck-widget__selection-handler:hover,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover .ck-widget__selection-handler,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover .ck-widget__selection-handler:hover{background:var(--ck-color-widget-blurred-border)}.ck-editor__editable.ck-read-only .ck-widget{--ck-widget-outline-thickness:0}\"","\nvar content = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./table.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../postcss-loader/src/index.js??ref--6-1!./table.css\", function() {\n\t\tvar newContent = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./table.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-content .table{margin:1em auto;display:table}.ck-content .table table{border-collapse:collapse;border-spacing:0;border:1px double #b3b3b3}.ck-content .table table td,.ck-content .table table th{min-width:2em;padding:.4em;border-color:#d9d9d9}.ck-content .table table th{font-weight:700;background:#fafafa}\"","\nvar content = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./placeholder.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../postcss-loader/src/index.js??ref--6-1!./placeholder.css\", function() {\n\t\tvar newContent = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./placeholder.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-placeholder:before,.ck .ck-placeholder:before{content:attr(data-placeholder);pointer-events:none}.ck.ck-placeholder:before,.ck .ck-placeholder:before{cursor:text;color:var(--ck-color-engine-placeholder-text)}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./inputtext.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./inputtext.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./inputtext.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \":root{--ck-input-text-width:18em}.ck.ck-input-text{border-radius:0}.ck-rounded-corners .ck.ck-input-text,.ck.ck-input-text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-input-text{box-shadow:var(--ck-inner-shadow),0 0;background:var(--ck-color-input-background);border:1px solid var(--ck-color-input-border);padding:var(--ck-spacing-extra-tiny) var(--ck-spacing-medium);min-width:var(--ck-input-text-width);min-height:var(--ck-ui-component-min-height);transition-property:box-shadow,border;transition:.2s ease-in-out}.ck.ck-input-text:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),var(--ck-inner-shadow)}.ck.ck-input-text[readonly]{border:1px solid var(--ck-color-input-disabled-border);background:var(--ck-color-input-disabled-background);color:var(--ck-color-input-disabled-text)}.ck.ck-input-text[readonly]:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),var(--ck-inner-shadow)}.ck.ck-input-text.ck-error{border-color:var(--ck-color-input-error-border);animation:ck-text-input-shake .3s ease both}.ck.ck-input-text.ck-error:focus{box-shadow:var(--ck-focus-error-outer-shadow),var(--ck-inner-shadow)}@keyframes ck-text-input-shake{20%{transform:translateX(-2px)}40%{transform:translateX(2px)}60%{transform:translateX(-1px)}80%{transform:translateX(1px)}}\"","\nvar content = require(\"!!../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./textlimit.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./textlimit.css\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./textlimit.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck-tooltip.ck-text-limit-show{visibility:visible;opacity:1;display:inline-block}.ck.ck-tooltip.ck-text-limit{transform:translateY(var(--ck-tooltip-arrow-size));bottom:inherit}.ck-tooltip.ck-text-limit .ck-tooltip__text{left:0}:root{--ck-color-text-limit-exceeded:#a80b07}.ck-text-limit-exceeded{--ck-color-tooltip-background:var(--ck-color-text-limit-exceeded);font-size:1em;font-weight:700}.ck .ck-editor__nested-editable.ck-text-field-limit-exceeded{border-color:var(--ck-color-text-limit-exceeded)}.ck .ck-widget.ck-widget_selected.ck-required-validation-error,.ck .ck-widget.ck-widget_selected.ck-required-validation-error:hover{outline-color:red}.ck-required-validation-error{outline:2px solid red!important}\"","\nvar content = require(\"!!../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./hoveredwidget.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./hoveredwidget.css\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./hoveredwidget.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck .ck-widget:hover{outline-color:transparent}.ck .ck-widget.hovered{outline-color:var(--ck-color-widget-hover-border)}\"","\nvar content = require(\"!!../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./gallery.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./gallery.css\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./gallery.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \":root{--ck-gallery-transition:0.5s ease}ck-container,ck-container-item,ck-gallery,ck-placeholder{display:block}.ck [ck-gallery-current-item]{padding-top:var(--ck-ui-component-min-height)}.ck [ck-gallery-current-item]{display:flex;overflow:hidden}.ck [ck-gallery-current-item]>*{flex-shrink:0;width:100%;transition:transform .5s ease}.ck .ck-gallery-controls{display:flex;align-items:center}\"","module.exports = \".ck .ck-link_selected{background:var(--ck-color-link-selected-background)}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./label.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./label.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./label.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-label{display:block}.ck.ck-voice-label{display:none}.ck.ck-label{font-weight:700}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./labeledinput.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./labeledinput.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./labeledinput.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-labeled-input .ck-labeled-input__status{font-size:var(--ck-font-size-small);margin-top:var(--ck-spacing-small);white-space:normal}.ck.ck-labeled-input .ck-labeled-input__status_error{color:var(--ck-color-base-error)}\"","\nvar content = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./linkform.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../postcss-loader/src/index.js??ref--6-1!./linkform.css\", function() {\n\t\tvar newContent = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./linkform.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-link-form{display:flex;flex-direction:row;flex-wrap:nowrap}.ck.ck-link-form .ck-label{display:none}@media screen and (max-width:600px){.ck.ck-link-form{flex-wrap:wrap}.ck.ck-link-form .ck-labeled-input{flex-basis:100%}.ck.ck-link-form .ck-button{flex-basis:50%}}.ck.ck-link-form{padding:var(--ck-spacing-standard)}.ck.ck-link-form:focus{outline:none}.ck.ck-link-form>:not(:first-child){margin-left:var(--ck-spacing-standard)}@media screen and (max-width:600px){.ck.ck-link-form{padding:0;width:calc(0.8*var(--ck-input-text-width))}.ck.ck-link-form .ck-labeled-input{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) 0}.ck.ck-link-form .ck-labeled-input .ck-input-text{min-width:0;width:100%}.ck.ck-link-form .ck-button{padding:var(--ck-spacing-standard);margin-top:var(--ck-spacing-standard);margin-left:0;border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border)}.ck.ck-link-form .ck-button:first-of-type{border-right:1px solid var(--ck-color-base-border)}}\"","\nvar content = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./linkactions.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../postcss-loader/src/index.js??ref--6-1!./linkactions.css\", function() {\n\t\tvar newContent = require(\"!!../../../postcss-loader/src/index.js??ref--6-1!./linkactions.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-link-actions{display:flex;flex-direction:row;flex-wrap:nowrap}.ck.ck-link-actions .ck-link-actions__preview{display:inline-block}.ck.ck-link-actions .ck-link-actions__preview .ck-button__label{overflow:hidden}@media screen and (max-width:600px){.ck.ck-link-actions{flex-wrap:wrap}.ck.ck-link-actions .ck-link-actions__preview{flex-basis:100%}.ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){flex-basis:50%}}.ck.ck-link-actions{padding:var(--ck-spacing-standard)}.ck.ck-link-actions .ck-button.ck-link-actions__preview{padding-left:0;padding-right:0}.ck.ck-link-actions .ck-button.ck-link-actions__preview,.ck.ck-link-actions .ck-button.ck-link-actions__preview:active,.ck.ck-link-actions .ck-button.ck-link-actions__preview:focus,.ck.ck-link-actions .ck-button.ck-link-actions__preview:hover{background:none}.ck.ck-link-actions .ck-button.ck-link-actions__preview:active{box-shadow:none}.ck.ck-link-actions .ck-button.ck-link-actions__preview:focus .ck-button__label{text-decoration:underline}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label{padding:0 var(--ck-spacing-medium);color:var(--ck-color-link-default);text-overflow:ellipsis;cursor:pointer;max-width:var(--ck-input-text-width);min-width:3em;text-align:center}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label:hover{text-decoration:underline}.ck.ck-link-actions:focus{outline:none}.ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){margin-left:var(--ck-spacing-standard)}@media screen and (max-width:600px){.ck.ck-link-actions{padding:0;width:calc(0.8*var(--ck-input-text-width))}.ck.ck-link-actions .ck-button.ck-link-actions__preview{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) 0}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label{min-width:0;max-width:100%}.ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){padding:var(--ck-spacing-standard);margin-top:var(--ck-spacing-standard);margin-left:0;border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border)}.ck.ck-link-actions .ck-button:not(.ck-link-actions__preview):first-of-type{border-right:1px solid var(--ck-color-base-border)}}\"","\nvar content = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./blocktoolbar.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"singleton\":true,\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./blocktoolbar.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../node_modules/postcss-loader/src/index.js??ref--6-1!./blocktoolbar.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \".ck.ck-block-toolbar-button{position:absolute;z-index:var(--ck-z-default)}:root{--ck-color-block-toolbar-button:var(--ck-color-text);--ck-block-toolbar-button-size:var(--ck-font-size-normal)}.ck.ck-block-toolbar-button{color:var(--ck-color-block-toolbar-button);font-size:var(--ck-block-toolbar-size)}\"","import { LitElement, html, svg, customElement, css } from \"lit-element\";\nimport DiffElement from \"../diffelement/diffelement\";\nimport * as Operations from \"../editor/operations\";\nimport iconUp from \"./icons/up.svg\";\nimport iconDown from \"./icons/down.svg\";\nimport iconDelete from \"./icons/delete.svg\";\nimport itemStyles from \"./container-item.css\";\n\nclass ContainerItem extends DiffElement {\n  static get properties() {\n    return {\n      inContainer: { type: Boolean },\n      containerIndex: { type: Number },\n      containerItems: { type: Number },\n      containerSections: { type: String },\n      isHovered: { type: Boolean }\n    };\n  }\n\n  constructor() {\n    super();\n    this.inContainer = false;\n    this.containerIndex = 0;\n    this.containerItems = 0;\n    this.containerSections = false;\n    this.addEventListener(\"containerUpdate\", event => {\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      event.preventDefault();\n      this.containerUpdate(event);\n    });\n\n    this.addEventListener(\"mouseover\", event => {\n      this.isHovered = true;\n      event.stopImmediatePropagation();\n      event.stopPropagation();\n      event.preventDefault();\n    });\n\n    this.addEventListener(\"mouseout\", event => {\n      this.isHovered = false;\n    });\n  }\n\n  get containerFirst() {\n    return this.containerIndex === 0;\n  }\n\n  get containerLast() {\n    return this.containerIndex === this.containerItems - 1;\n  }\n\n  containerUpdate({\n    detail: { inContainer, containerSections, containerIndex, containerItems }\n  }) {\n    this.inContainer = inContainer;\n    this.containerSections = containerSections;\n    this.containerIndex = containerIndex;\n    this.containerItems = containerItems;\n  }\n\n  render() {\n    const upButton = html`\n      <button\n        class=\"up${this.containerFirst ? \" disabled\" : \"\"}\"\n        @click=\"${() => this.upHandler()}\"\n      >\n        ${svg([iconUp])}\n      </button>\n    `;\n\n    const downButton = html`\n      <button\n        class=\"up${this.containerLast ? \" disabled\" : \"\"}\"\n        @click=\"${() => this.downHandler()}\"\n      >\n        ${svg([iconDown])}\n      </button>\n    `;\n\n    return html`\n      <div class=\"${this.isHovered ? \"hovered\" : \"\"}\">\n        ${this.inContainer\n          ? html`\n              <ck-placeholder\n                collapsed=\"true\"\n                @ckEditorOperation=\"${event => this.insertHandler(event)}\"\n                sections=\"${this.containerSections}\"\n              ></ck-placeholder>\n              ${this.added || this.removed\n                ? null\n                : html`\n                    <div class=\"controls\">\n                      ${upButton} ${downButton}\n                      <button\n                        class=\"remove\"\n                        @click=\"${() => this.removeHandler()}\"\n                      >\n                        ${svg([iconDelete])}\n                      </button>\n                    </div>\n                  `}\n            `\n          : null}\n        <div class=\"${this.inContainer ? \"item\" : \"\"}\">\n          ${super.render(\n            html`\n              <slot></slot>\n            `\n          )}\n        </div>\n      </div>\n    `;\n  }\n\n  upHandler() {\n    if (!this.containerFirst) {\n      const diff =\n        global.window.scrollY +\n        this.parentElement.children[this.containerIndex - 1].offsetTop -\n        this.offsetTop;\n      window.scrollTo(0, diff);\n      this.dispatchEvent(\n        Operations.move(\n          this.parentElement,\n          \"before\",\n          this.containerIndex,\n          this.containerIndex - 1\n        )\n      );\n    }\n  }\n\n  downHandler() {\n    if (!this.containerLast) {\n      const diff =\n        global.window.scrollY +\n        (this.containerIndex < this.containerItems - 2\n          ? this.parentElement.children[this.containerIndex + 2].offsetTop -\n            this.parentElement.children[this.containerIndex + 1].offsetTop\n          : this.parentElement.children[this.containerIndex + 1].offsetHeight);\n      window.scrollTo(0, diff);\n      this.dispatchEvent(\n        Operations.move(\n          this.parentElement,\n          \"after\",\n          this.containerIndex,\n          this.containerIndex + 1\n        )\n      );\n    }\n  }\n\n  removeHandler() {\n    this.dispatchEvent(Operations.remove(this));\n  }\n\n  insertHandler(event) {\n    this.dispatchEvent(\n      Operations.insert(\n        event.detail.element,\n        this.parentElement,\n        \"before\",\n        this.containerIndex\n      )\n    );\n  }\n}\n\nContainerItem.styles = css([itemStyles]);\n\nexport default class Container extends LitElement {\n  static get properties() {\n    return {\n      sections: { type: String }\n    };\n  }\n\n  constructor() {\n    super();\n    this.observer = null;\n    this.observer = new MutationObserver(() => this.processChildren());\n    this.observer.observe(this, {\n      attributes: false,\n      childList: true,\n      subtree: false\n    });\n  }\n\n  firstUpdated() {\n    this.processChildren();\n  }\n\n  processChildren() {\n    Array.from(this.children).forEach((child, index) => {\n      child.dispatchEvent(\n        new CustomEvent(\"containerUpdate\", {\n          detail: {\n            inContainer: true,\n            containerSections: this.sections,\n            containerIndex: index,\n            containerItems: this.children.length\n          }\n        })\n      );\n    });\n  }\n\n  render() {\n    return html`\n      <div class=\"container\"><slot></slot></div>\n      <ck-placeholder\n        @ckEditorOperation=\"${this.appendHandler}\"\n        closed=\"true\"\n        sections=\"${this.sections}\"\n      >\n      </ck-placeholder>\n    `;\n  }\n\n  appendHandler(event) {\n    this.dispatchEvent(Operations.insert(event.detail.element, this, \"end\"));\n  }\n}\n\ncustomElement(\"ck-container\")(Container);\ncustomElement(\"ck-container-item\")(ContainerItem);\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/spy\n */\n\n/**\n * Creates a spy function (ala Sinon.js) that can be used to inspect call to it.\n *\n * The following are the present features:\n *\n * * spy.called: property set to `true` if the function has been called at least once.\n *\n * @returns {Function} The spy function.\n */\nfunction spy() {\n\treturn function spy() {\n\t\tspy.called = true;\n\t};\n}\n\nexport default spy;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/eventinfo\n */\n\nimport spy from './spy';\n\n/**\n * The event object passed to event callbacks. It is used to provide information about the event as well as a tool to\n * manipulate it.\n */\nexport default class EventInfo {\n\t/**\n\t * @param {Object} source The emitter.\n\t * @param {String} name The event name.\n\t */\n\tconstructor( source, name ) {\n\t\t/**\n\t\t * The object that fired the event.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object}\n\t\t */\n\t\tthis.source = source;\n\n\t\t/**\n\t\t * The event name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Path this event has followed. See {@link module:utils/emittermixin~EmitterMixin#delegate}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<Object>}\n\t\t */\n\t\tthis.path = [];\n\n\t\t// The following methods are defined in the constructor because they must be re-created per instance.\n\n\t\t/**\n\t\t * Stops the event emitter to call further callbacks for this event interaction.\n\t\t *\n\t\t * @method #stop\n\t\t */\n\t\tthis.stop = spy();\n\n\t\t/**\n\t\t * Removes the current callback from future interactions of this event.\n\t\t *\n\t\t * @method #off\n\t\t */\n\t\tthis.off = spy();\n\n\t\t/**\n\t\t * The value which will be returned by {@link module:utils/emittermixin~EmitterMixin#fire}.\n\t\t *\n\t\t * It's `undefined` by default and can be changed by an event listener:\n\t\t *\n\t\t *\t\tdataController.fire( 'getSelectedContent', ( evt ) => {\n\t\t *\t\t\t// This listener will make `dataController.fire( 'getSelectedContent' )`\n\t\t *\t\t\t// always return an empty DocumentFragment.\n\t\t *\t\t\tevt.return = new DocumentFragment();\n\t\t *\n\t\t *\t\t\t// Make sure no other listeners are executed.\n\t\t *\t\t\tevt.stop();\n\t\t *\t\t} );\n\t\t *\n\t\t * @member #return\n\t\t */\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/uid\n */\n\n/**\n * Returns a unique id. This id consist of an 'e' character and a randomly generated string of 32 aphanumeric characters.\n * Each character in uid string represents a hexadecimal digit (base 16).\n *\n * @returns {String} A hexadecimal number representing the id.\n */\nexport default function uid() {\n\tlet uuid = 'e'; // Make sure that id does not start with number.\n\n\tfor ( let i = 0; i < 8; i++ ) {\n\t\tuuid += Math.floor( ( 1 + Math.random() ) * 0x10000 ).toString( 16 ).substring( 1 );\n\t}\n\n\treturn uuid;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/priorities\n */\n\n/**\n * String representing a priority value.\n *\n * @typedef {'highest'|'high'|'normal'|'low'|'lowest'} module:utils/priorities~PriorityString\n */\n\n/**\n * Provides group of constants to use instead of hardcoding numeric priority values.\n *\n * @namespace\n */\nconst priorities = {\n\t/**\n\t * Converts a string with priority name to it's numeric value. If `Number` is given, it just returns it.\n\t *\n\t * @static\n\t * @param {module:utils/priorities~PriorityString|Number} priority Priority to convert.\n\t * @returns {Number} Converted priority.\n\t */\n\tget( priority ) {\n\t\tif ( typeof priority != 'number' ) {\n\t\t\treturn this[ priority ] || this.normal;\n\t\t} else {\n\t\t\treturn priority;\n\t\t}\n\t},\n\n\thighest: 100000,\n\thigh: 1000,\n\tnormal: 0,\n\tlow: -1000,\n\tlowest: -100000\n};\n\nexport default priorities;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/emittermixin\n */\n\nimport EventInfo from './eventinfo';\nimport uid from './uid';\nimport priorities from './priorities';\n\nconst _listeningTo = Symbol( 'listeningTo' );\nconst _emitterId = Symbol( 'emitterId' );\n\n/**\n * Mixin that injects the {@link ~Emitter events API} into its host.\n *\n * @mixin EmitterMixin\n * @implements module:utils/emittermixin~Emitter\n */\nconst EmitterMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\ton( event, callback, options = {} ) {\n\t\tthis.listenTo( this, event, callback, options );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tonce( event, callback, options ) {\n\t\tconst onceCallback = function( event, ...args ) {\n\t\t\t// Go off() at the first call.\n\t\t\tevent.off();\n\n\t\t\t// Go with the original callback.\n\t\t\tcallback.call( this, event, ...args );\n\t\t};\n\n\t\t// Make a similar on() call, simply replacing the callback.\n\t\tthis.listenTo( this, event, onceCallback, options );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\toff( event, callback ) {\n\t\tthis.stopListening( this, event, callback );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tlistenTo( emitter, event, callback, options = {} ) {\n\t\tlet emitterInfo, eventCallbacks;\n\n\t\t// _listeningTo contains a list of emitters that this object is listening to.\n\t\t// This list has the following format:\n\t\t//\n\t\t// _listeningTo: {\n\t\t//     emitterId: {\n\t\t//         emitter: emitter,\n\t\t//         callbacks: {\n\t\t//             event1: [ callback1, callback2, ... ]\n\t\t//             ....\n\t\t//         }\n\t\t//     },\n\t\t//     ...\n\t\t// }\n\n\t\tif ( !this[ _listeningTo ] ) {\n\t\t\tthis[ _listeningTo ] = {};\n\t\t}\n\n\t\tconst emitters = this[ _listeningTo ];\n\n\t\tif ( !_getEmitterId( emitter ) ) {\n\t\t\t_setEmitterId( emitter );\n\t\t}\n\n\t\tconst emitterId = _getEmitterId( emitter );\n\n\t\tif ( !( emitterInfo = emitters[ emitterId ] ) ) {\n\t\t\temitterInfo = emitters[ emitterId ] = {\n\t\t\t\temitter,\n\t\t\t\tcallbacks: {}\n\t\t\t};\n\t\t}\n\n\t\tif ( !( eventCallbacks = emitterInfo.callbacks[ event ] ) ) {\n\t\t\teventCallbacks = emitterInfo.callbacks[ event ] = [];\n\t\t}\n\n\t\teventCallbacks.push( callback );\n\n\t\t// Finally register the callback to the event.\n\t\tcreateEventNamespace( emitter, event );\n\t\tconst lists = getCallbacksListsForNamespace( emitter, event );\n\t\tconst priority = priorities.get( options.priority );\n\n\t\tconst callbackDefinition = {\n\t\t\tcallback,\n\t\t\tpriority\n\t\t};\n\n\t\t// Add the callback to all callbacks list.\n\t\tfor ( const callbacks of lists ) {\n\t\t\t// Add the callback to the list in the right priority position.\n\t\t\tlet added = false;\n\n\t\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\t\tif ( callbacks[ i ].priority < priority ) {\n\t\t\t\t\tcallbacks.splice( i, 0, callbackDefinition );\n\t\t\t\t\tadded = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add at the end, if right place was not found.\n\t\t\tif ( !added ) {\n\t\t\t\tcallbacks.push( callbackDefinition );\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstopListening( emitter, event, callback ) {\n\t\tconst emitters = this[ _listeningTo ];\n\t\tlet emitterId = emitter && _getEmitterId( emitter );\n\t\tconst emitterInfo = emitters && emitterId && emitters[ emitterId ];\n\t\tconst eventCallbacks = emitterInfo && event && emitterInfo.callbacks[ event ];\n\n\t\t// Stop if nothing has been listened.\n\t\tif ( !emitters || ( emitter && !emitterInfo ) || ( event && !eventCallbacks ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// All params provided. off() that single callback.\n\t\tif ( callback ) {\n\t\t\tremoveCallback( emitter, event, callback );\n\t\t}\n\t\t// Only `emitter` and `event` provided. off() all callbacks for that event.\n\t\telse if ( eventCallbacks ) {\n\t\t\twhile ( ( callback = eventCallbacks.pop() ) ) {\n\t\t\t\tremoveCallback( emitter, event, callback );\n\t\t\t}\n\n\t\t\tdelete emitterInfo.callbacks[ event ];\n\t\t}\n\t\t// Only `emitter` provided. off() all events for that emitter.\n\t\telse if ( emitterInfo ) {\n\t\t\tfor ( event in emitterInfo.callbacks ) {\n\t\t\t\tthis.stopListening( emitter, event );\n\t\t\t}\n\t\t\tdelete emitters[ emitterId ];\n\t\t}\n\t\t// No params provided. off() all emitters.\n\t\telse {\n\t\t\tfor ( emitterId in emitters ) {\n\t\t\t\tthis.stopListening( emitters[ emitterId ].emitter );\n\t\t\t}\n\t\t\tdelete this[ _listeningTo ];\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfire( eventOrInfo, ...args ) {\n\t\tconst eventInfo = eventOrInfo instanceof EventInfo ? eventOrInfo : new EventInfo( this, eventOrInfo );\n\t\tconst event = eventInfo.name;\n\t\tlet callbacks = getCallbacksForEvent( this, event );\n\n\t\t// Record that the event passed this emitter on its path.\n\t\teventInfo.path.push( this );\n\n\t\t// Handle event listener callbacks first.\n\t\tif ( callbacks ) {\n\t\t\t// Arguments passed to each callback.\n\t\t\tconst callbackArgs = [ eventInfo, ...args ];\n\n\t\t\t// Copying callbacks array is the easiest and most secure way of preventing infinite loops, when event callbacks\n\t\t\t// are added while processing other callbacks. Previous solution involved adding counters (unique ids) but\n\t\t\t// failed if callbacks were added to the queue before currently processed callback.\n\t\t\t// If this proves to be too inefficient, another method is to change `.on()` so callbacks are stored if same\n\t\t\t// event is currently processed. Then, `.fire()` at the end, would have to add all stored events.\n\t\t\tcallbacks = Array.from( callbacks );\n\n\t\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\t\tcallbacks[ i ].callback.apply( this, callbackArgs );\n\n\t\t\t\t// Remove the callback from future requests if off() has been called.\n\t\t\t\tif ( eventInfo.off.called ) {\n\t\t\t\t\t// Remove the called mark for the next calls.\n\t\t\t\t\tdelete eventInfo.off.called;\n\n\t\t\t\t\tremoveCallback( this, event, callbacks[ i ].callback );\n\t\t\t\t}\n\n\t\t\t\t// Do not execute next callbacks if stop() was called.\n\t\t\t\tif ( eventInfo.stop.called ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Delegate event to other emitters if needed.\n\t\tif ( this._delegations ) {\n\t\t\tconst destinations = this._delegations.get( event );\n\t\t\tconst passAllDestinations = this._delegations.get( '*' );\n\n\t\t\tif ( destinations ) {\n\t\t\t\tfireDelegatedEvents( destinations, eventInfo, args );\n\t\t\t}\n\n\t\t\tif ( passAllDestinations ) {\n\t\t\t\tfireDelegatedEvents( passAllDestinations, eventInfo, args );\n\t\t\t}\n\t\t}\n\n\t\treturn eventInfo.return;\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdelegate( ...events ) {\n\t\treturn {\n\t\t\tto: ( emitter, nameOrFunction ) => {\n\t\t\t\tif ( !this._delegations ) {\n\t\t\t\t\tthis._delegations = new Map();\n\t\t\t\t}\n\n\t\t\t\tfor ( const eventName of events ) {\n\t\t\t\t\tconst destinations = this._delegations.get( eventName );\n\n\t\t\t\t\tif ( !destinations ) {\n\t\t\t\t\t\tthis._delegations.set( eventName, new Map( [ [ emitter, nameOrFunction ] ] ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdestinations.set( emitter, nameOrFunction );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstopDelegating( event, emitter ) {\n\t\tif ( !this._delegations ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !event ) {\n\t\t\tthis._delegations.clear();\n\t\t} else if ( !emitter ) {\n\t\t\tthis._delegations.delete( event );\n\t\t} else {\n\t\t\tconst destinations = this._delegations.get( event );\n\n\t\t\tif ( destinations ) {\n\t\t\t\tdestinations.delete( emitter );\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default EmitterMixin;\n\n/**\n * Emitter/listener interface.\n *\n * Can be easily implemented by a class by mixing the {@link module:utils/emittermixin~EmitterMixin} mixin.\n *\n * @interface Emitter\n */\n\n/**\n * Registers a callback function to be executed when an event is fired.\n *\n * Shorthand for {@link #listenTo `this.listenTo( this, event, callback, options )`} (it makes the emitter\n * listen on itself).\n *\n * @method #on\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Registers a callback function to be executed on the next time the event is fired only. This is similar to\n * calling {@link #on} followed by {@link #off} in the callback.\n *\n * @method #once\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Stops executing the callback on the given event.\n * Shorthand for {@link #stopListening `this.stopListening( this, event, callback )`}.\n *\n * @method #off\n * @param {String} event The name of the event.\n * @param {Function} callback The function to stop being called.\n */\n\n/**\n * Registers a callback function to be executed when an event is fired in a specific (emitter) object.\n *\n * Events can be grouped in namespaces using `:`.\n * When namespaced event is fired, it additionally fires all callbacks for that namespace.\n *\n *\t\t// myEmitter.on( ... ) is a shorthand for myEmitter.listenTo( myEmitter, ... ).\n *\t\tmyEmitter.on( 'myGroup', genericCallback );\n *\t\tmyEmitter.on( 'myGroup:myEvent', specificCallback );\n *\n *\t\t// genericCallback is fired.\n *\t\tmyEmitter.fire( 'myGroup' );\n *\t\t// both genericCallback and specificCallback are fired.\n *\t\tmyEmitter.fire( 'myGroup:myEvent' );\n *\t\t// genericCallback is fired even though there are no callbacks for \"foo\".\n *\t\tmyEmitter.fire( 'myGroup:foo' );\n *\n * An event callback can {@link module:utils/eventinfo~EventInfo#stop stop the event} and\n * set the {@link module:utils/eventinfo~EventInfo#return return value} of the {@link #fire} method.\n *\n * @method #listenTo\n * @param {module:utils/emittermixin~Emitter} emitter The object that fires the event.\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Stops listening for events. It can be used at different levels:\n *\n * * To stop listening to a specific callback.\n * * To stop listening to a specific event.\n * * To stop listening to all events fired by a specific object.\n * * To stop listening to all events fired by all objects.\n *\n * @method #stopListening\n * @param {module:utils/emittermixin~Emitter} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n * for all events from `emitter`.\n * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n * `event`.\n */\n\n/**\n * Fires an event, executing all callbacks registered for it.\n *\n * The first parameter passed to callbacks is an {@link module:utils/eventinfo~EventInfo} object,\n * followed by the optional `args` provided in the `fire()` method call.\n *\n * @method #fire\n * @param {String|module:utils/eventinfo~EventInfo} eventOrInfo The name of the event or `EventInfo` object if event is delegated.\n * @param {...*} [args] Additional arguments to be passed to the callbacks.\n * @returns {*} By default the method returns `undefined`. However, the return value can be changed by listeners\n * through modification of the {@link module:utils/eventinfo~EventInfo#return `evt.return`}'s property (the event info\n * is the first param of every callback).\n */\n\n/**\n * Delegates selected events to another {@link module:utils/emittermixin~Emitter}. For instance:\n *\n *\t\temitterA.delegate( 'eventX' ).to( emitterB );\n *\t\temitterA.delegate( 'eventX', 'eventY' ).to( emitterC );\n *\n * then `eventX` is delegated (fired by) `emitterB` and `emitterC` along with `data`:\n *\n *\t\temitterA.fire( 'eventX', data );\n *\n * and `eventY` is delegated (fired by) `emitterC` along with `data`:\n *\n *\t\temitterA.fire( 'eventY', data );\n *\n * @method #delegate\n * @param {...String} events Event names that will be delegated to another emitter.\n * @returns {module:utils/emittermixin~EmitterMixinDelegateChain}\n */\n\n/**\n * Stops delegating events. It can be used at different levels:\n *\n * * To stop delegating all events.\n * * To stop delegating a specific event to all emitters.\n * * To stop delegating a specific event to a specific emitter.\n *\n * @method #stopDelegating\n * @param {String} [event] The name of the event to stop delegating. If omitted, stops it all delegations.\n * @param {module:utils/emittermixin~Emitter} [emitter] (requires `event`) The object to stop delegating a particular event to.\n * If omitted, stops delegation of `event` to all emitters.\n */\n\n/**\n * Checks if `listeningEmitter` listens to an emitter with given `listenedToEmitterId` and if so, returns that emitter.\n * If not, returns `null`.\n *\n * @protected\n * @param {module:utils/emittermixin~EmitterMixin} listeningEmitter Emitter that listens.\n * @param {String} listenedToEmitterId Unique emitter id of emitter listened to.\n * @returns {module:utils/emittermixin~EmitterMixin|null}\n */\nexport function _getEmitterListenedTo( listeningEmitter, listenedToEmitterId ) {\n\tif ( listeningEmitter[ _listeningTo ] && listeningEmitter[ _listeningTo ][ listenedToEmitterId ] ) {\n\t\treturn listeningEmitter[ _listeningTo ][ listenedToEmitterId ].emitter;\n\t}\n\n\treturn null;\n}\n\n/**\n * Sets emitter's unique id.\n *\n * **Note:** `_emitterId` can be set only once.\n *\n * @protected\n * @param {module:utils/emittermixin~EmitterMixin} emitter Emitter for which id will be set.\n * @param {String} [id] Unique id to set. If not passed, random unique id will be set.\n */\nexport function _setEmitterId( emitter, id ) {\n\tif ( !emitter[ _emitterId ] ) {\n\t\temitter[ _emitterId ] = id || uid();\n\t}\n}\n\n/**\n * Returns emitter's unique id.\n *\n * @protected\n * @param {module:utils/emittermixin~EmitterMixin} emitter Emitter which id will be returned.\n */\nexport function _getEmitterId( emitter ) {\n\treturn emitter[ _emitterId ];\n}\n\n// Gets the internal `_events` property of the given object.\n// `_events` property store all lists with callbacks for registered event names.\n// If there were no events registered on the object, empty `_events` object is created.\nfunction getEvents( source ) {\n\tif ( !source._events ) {\n\t\tObject.defineProperty( source, '_events', {\n\t\t\tvalue: {}\n\t\t} );\n\t}\n\n\treturn source._events;\n}\n\n// Creates event node for generic-specific events relation architecture.\nfunction makeEventNode() {\n\treturn {\n\t\tcallbacks: [],\n\t\tchildEvents: []\n\t};\n}\n\n// Creates an architecture for generic-specific events relation.\n// If needed, creates all events for given eventName, i.e. if the first registered event\n// is foo:bar:abc, it will create foo:bar:abc, foo:bar and foo event and tie them together.\n// It also copies callbacks from more generic events to more specific events when\n// specific events are created.\nfunction createEventNamespace( source, eventName ) {\n\tconst events = getEvents( source );\n\n\t// First, check if the event we want to add to the structure already exists.\n\tif ( events[ eventName ] ) {\n\t\t// If it exists, we don't have to do anything.\n\t\treturn;\n\t}\n\n\t// In other case, we have to create the structure for the event.\n\t// Note, that we might need to create intermediate events too.\n\t// I.e. if foo:bar:abc is being registered and we only have foo in the structure,\n\t// we need to also register foo:bar.\n\n\t// Currently processed event name.\n\tlet name = eventName;\n\t// Name of the event that is a child event for currently processed event.\n\tlet childEventName = null;\n\n\t// Array containing all newly created specific events.\n\tconst newEventNodes = [];\n\n\t// While loop can't check for ':' index because we have to handle generic events too.\n\t// In each loop, we truncate event name, going from the most specific name to the generic one.\n\t// I.e. foo:bar:abc -> foo:bar -> foo.\n\twhile ( name !== '' ) {\n\t\tif ( events[ name ] ) {\n\t\t\t// If the currently processed event name is already registered, we can be sure\n\t\t\t// that it already has all the structure created, so we can break the loop here\n\t\t\t// as no more events need to be registered.\n\t\t\tbreak;\n\t\t}\n\n\t\t// If this event is not yet registered, create a new object for it.\n\t\tevents[ name ] = makeEventNode();\n\t\t// Add it to the array with newly created events.\n\t\tnewEventNodes.push( events[ name ] );\n\n\t\t// Add previously processed event name as a child of this event.\n\t\tif ( childEventName ) {\n\t\t\tevents[ name ].childEvents.push( childEventName );\n\t\t}\n\n\t\tchildEventName = name;\n\t\t// If `.lastIndexOf()` returns -1, `.substr()` will return '' which will break the loop.\n\t\tname = name.substr( 0, name.lastIndexOf( ':' ) );\n\t}\n\n\tif ( name !== '' ) {\n\t\t// If name is not empty, we found an already registered event that was a parent of the\n\t\t// event we wanted to register.\n\n\t\t// Copy that event's callbacks to newly registered events.\n\t\tfor ( const node of newEventNodes ) {\n\t\t\tnode.callbacks = events[ name ].callbacks.slice();\n\t\t}\n\n\t\t// Add last newly created event to the already registered event.\n\t\tevents[ name ].childEvents.push( childEventName );\n\t}\n}\n\n// Gets an array containing callbacks list for a given event and it's more specific events.\n// I.e. if given event is foo:bar and there is also foo:bar:abc event registered, this will\n// return callback list of foo:bar and foo:bar:abc (but not foo).\nfunction getCallbacksListsForNamespace( source, eventName ) {\n\tconst eventNode = getEvents( source )[ eventName ];\n\n\tif ( !eventNode ) {\n\t\treturn [];\n\t}\n\n\tlet callbacksLists = [ eventNode.callbacks ];\n\n\tfor ( let i = 0; i < eventNode.childEvents.length; i++ ) {\n\t\tconst childCallbacksLists = getCallbacksListsForNamespace( source, eventNode.childEvents[ i ] );\n\n\t\tcallbacksLists = callbacksLists.concat( childCallbacksLists );\n\t}\n\n\treturn callbacksLists;\n}\n\n// Get the list of callbacks for a given event, but only if there any callbacks have been registered.\n// If there are no callbacks registered for given event, it checks if this is a specific event and looks\n// for callbacks for it's more generic version.\nfunction getCallbacksForEvent( source, eventName ) {\n\tlet event;\n\n\tif ( !source._events || !( event = source._events[ eventName ] ) || !event.callbacks.length ) {\n\t\t// There are no callbacks registered for specified eventName.\n\t\t// But this could be a specific-type event that is in a namespace.\n\t\tif ( eventName.indexOf( ':' ) > -1 ) {\n\t\t\t// If the eventName is specific, try to find callback lists for more generic event.\n\t\t\treturn getCallbacksForEvent( source, eventName.substr( 0, eventName.lastIndexOf( ':' ) ) );\n\t\t} else {\n\t\t\t// If this is a top-level generic event, return null;\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn event.callbacks;\n}\n\n// Fires delegated events for given map of destinations.\n//\n// @private\n// * @param {Map.<utils.Emitter>} destinations A map containing `[ {@link utils.Emitter}, \"event name\" ]` pair destinations.\n// * @param {utils.EventInfo} eventInfo The original event info object.\n// * @param {Array.<*>} fireArgs Arguments the original event was fired with.\nfunction fireDelegatedEvents( destinations, eventInfo, fireArgs ) {\n\tfor ( let [ emitter, name ] of destinations ) {\n\t\tif ( !name ) {\n\t\t\tname = eventInfo.name;\n\t\t} else if ( typeof name == 'function' ) {\n\t\t\tname = name( eventInfo.name );\n\t\t}\n\n\t\tconst delegatedInfo = new EventInfo( eventInfo.source, name );\n\n\t\tdelegatedInfo.path = [ ...eventInfo.path ];\n\n\t\temitter.fire( delegatedInfo, ...fireArgs );\n\t}\n}\n\n// Removes callback from emitter for given event.\n//\n// @param {module:utils/emittermixin~Emitter} emitter\n// @param {String} event\n// @param {Function} callback\nfunction removeCallback( emitter, event, callback ) {\n\tconst lists = getCallbacksListsForNamespace( emitter, event );\n\n\tfor ( const callbacks of lists ) {\n\t\tfor ( let i = 0; i < callbacks.length; i++ ) {\n\t\t\tif ( callbacks[ i ].callback == callback ) {\n\t\t\t\t// Remove the callback from the list (fixing the next index).\n\t\t\t\tcallbacks.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * The return value of {@link ~EmitterMixin#delegate}.\n *\n * @interface module:utils/emittermixin~EmitterMixinDelegateChain\n */\n\n/**\n * Selects destination for {@link module:utils/emittermixin~EmitterMixin#delegate} events.\n *\n * @method #to\n * @param {module:utils/emittermixin~Emitter} emitter An `EmitterMixin` instance which is the destination for delegated events.\n * @param {String|Function} [nameOrFunction] A custom event name or function which converts the original name string.\n */\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","import getNative from './_getNative.js';\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nexport default defineProperty;\n","import defineProperty from './_defineProperty.js';\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nexport default baseAssignValue;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nexport default eq;\n","import baseAssignValue from './_baseAssignValue.js';\nimport eq from './eq.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nexport default assignValue;\n","import assignValue from './_assignValue.js';\nimport baseAssignValue from './_baseAssignValue.js';\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nexport default copyObject;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nexport default identity;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nexport default apply;\n","import apply from './_apply.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nexport default overRest;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nexport default constant;\n","import constant from './constant.js';\nimport defineProperty from './_defineProperty.js';\nimport identity from './identity.js';\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nexport default baseSetToString;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nexport default shortOut;\n","import baseSetToString from './_baseSetToString.js';\nimport shortOut from './_shortOut.js';\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nexport default setToString;\n","import identity from './identity.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nexport default baseRest;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nexport default isIndex;\n","import eq from './eq.js';\nimport isArrayLike from './isArrayLike.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nexport default isIterateeCall;\n","import baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nexport default createAssigner;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nexport default baseTimes;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","import baseTimes from './_baseTimes.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isIndex from './_isIndex.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default arrayLikeKeys;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default nativeKeysIn;\n","import isObject from './isObject.js';\nimport isPrototype from './_isPrototype.js';\nimport nativeKeysIn from './_nativeKeysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeysIn;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeysIn from './_baseKeysIn.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nexport default keysIn;\n","import copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport keysIn from './keysIn.js';\n\n/**\n * This method is like `_.assign` except that it iterates over own and\n * inherited source properties.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias extend\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assign\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n */\nvar assignIn = createAssigner(function(object, source) {\n  copyObject(source, keysIn(source), object);\n});\n\nexport default assignIn;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/observablemixin\n */\n\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport { extend, isObject } from 'lodash-es';\n\nconst observablePropertiesSymbol = Symbol( 'observableProperties' );\nconst boundObservablesSymbol = Symbol( 'boundObservables' );\nconst boundPropertiesSymbol = Symbol( 'boundProperties' );\n\n/**\n * Mixin that injects the \"observable properties\" and data binding functionality described in the\n * {@link ~Observable} interface.\n *\n * Read more about the concept of observables in the:\n * * {@glink framework/guides/architecture/core-editor-architecture#event-system-and-observables \"Event system and observables\"}\n * section of the {@glink framework/guides/architecture/core-editor-architecture \"Core editor architecture\"} guide,\n * * {@glink framework/guides/deep-dive/observables \"Observables\" deep dive} guide.\n *\n * @mixin ObservableMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/observablemixin~Observable\n */\nconst ObservableMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tset( name, value ) {\n\t\t// If the first parameter is an Object, iterate over its properties.\n\t\tif ( isObject( name ) ) {\n\t\t\tObject.keys( name ).forEach( property => {\n\t\t\t\tthis.set( property, name[ property ] );\n\t\t\t}, this );\n\n\t\t\treturn;\n\t\t}\n\n\t\tinitObservable( this );\n\n\t\tconst properties = this[ observablePropertiesSymbol ];\n\n\t\tif ( ( name in this ) && !properties.has( name ) ) {\n\t\t\t/**\n\t\t\t * Cannot override an existing property.\n\t\t\t *\n\t\t\t * This error is thrown when trying to {@link ~Observable#set set} an property with\n\t\t\t * a name of an already existing property. For example:\n\t\t\t *\n\t\t\t *\t\tlet observable = new Model();\n\t\t\t *\t\tobservable.property = 1;\n\t\t\t *\t\tobservable.set( 'property', 2 );\t\t\t// throws\n\t\t\t *\n\t\t\t *\t\tobservable.set( 'property', 1 );\n\t\t\t *\t\tobservable.set( 'property', 2 );\t\t\t// ok, because this is an existing property.\n\t\t\t *\n\t\t\t * @error observable-set-cannot-override\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-set-cannot-override: Cannot override an existing property.' );\n\t\t}\n\n\t\tObject.defineProperty( this, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget() {\n\t\t\t\treturn properties.get( name );\n\t\t\t},\n\n\t\t\tset( value ) {\n\t\t\t\tconst oldValue = properties.get( name );\n\n\t\t\t\t// Fire `set` event before the new value will be set to make it possible\n\t\t\t\t// to override observable property without affecting `change` event.\n\t\t\t\t// See https://github.com/ckeditor/ckeditor5-utils/issues/171.\n\t\t\t\tlet newValue = this.fire( 'set:' + name, name, value, oldValue );\n\n\t\t\t\tif ( newValue === undefined ) {\n\t\t\t\t\tnewValue = value;\n\t\t\t\t}\n\n\t\t\t\t// Allow undefined as an initial value like A.define( 'x', undefined ) (#132).\n\t\t\t\t// Note: When properties map has no such own property, then its value is undefined.\n\t\t\t\tif ( oldValue !== newValue || !properties.has( name ) ) {\n\t\t\t\t\tproperties.set( name, newValue );\n\t\t\t\t\tthis.fire( 'change:' + name, name, newValue, oldValue );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tthis[ name ] = value;\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbind( ...bindProperties ) {\n\t\tif ( !bindProperties.length || !isStringArray( bindProperties ) ) {\n\t\t\t/**\n\t\t\t * All properties must be strings.\n\t\t\t *\n\t\t\t * @error observable-bind-wrong-properties\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-wrong-properties: All properties must be strings.' );\n\t\t}\n\n\t\tif ( ( new Set( bindProperties ) ).size !== bindProperties.length ) {\n\t\t\t/**\n\t\t\t * Properties must be unique.\n\t\t\t *\n\t\t\t * @error observable-bind-duplicate-properties\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-duplicate-properties: Properties must be unique.' );\n\t\t}\n\n\t\tinitObservable( this );\n\n\t\tconst boundProperties = this[ boundPropertiesSymbol ];\n\n\t\tbindProperties.forEach( propertyName => {\n\t\t\tif ( boundProperties.has( propertyName ) ) {\n\t\t\t\t/**\n\t\t\t\t * Cannot bind the same property more that once.\n\t\t\t\t *\n\t\t\t\t * @error observable-bind-rebind\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'observable-bind-rebind: Cannot bind the same property more that once.' );\n\t\t\t}\n\t\t} );\n\n\t\tconst bindings = new Map();\n\n\t\t// @typedef {Object} Binding\n\t\t// @property {Array} property Property which is bound.\n\t\t// @property {Array} to Array of observable–property components of the binding (`{ observable: ..., property: .. }`).\n\t\t// @property {Array} callback A function which processes `to` components.\n\t\tbindProperties.forEach( a => {\n\t\t\tconst binding = { property: a, to: [] };\n\n\t\t\tboundProperties.set( a, binding );\n\t\t\tbindings.set( a, binding );\n\t\t} );\n\n\t\t// @typedef {Object} BindChain\n\t\t// @property {Function} to See {@link ~ObservableMixin#_bindTo}.\n\t\t// @property {Function} toMany See {@link ~ObservableMixin#_bindToMany}.\n\t\t// @property {module:utils/observablemixin~Observable} _observable The observable which initializes the binding.\n\t\t// @property {Array} _bindProperties Array of `_observable` properties to be bound.\n\t\t// @property {Array} _to Array of `to()` observable–properties (`{ observable: toObservable, properties: ...toProperties }`).\n\t\t// @property {Map} _bindings Stores bindings to be kept in\n\t\t// {@link ~ObservableMixin#_boundProperties}/{@link ~ObservableMixin#_boundObservables}\n\t\t// initiated in this binding chain.\n\t\treturn {\n\t\t\tto: bindTo,\n\t\t\ttoMany: bindToMany,\n\n\t\t\t_observable: this,\n\t\t\t_bindProperties: bindProperties,\n\t\t\t_to: [],\n\t\t\t_bindings: bindings\n\t\t};\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tunbind( ...unbindProperties ) {\n\t\t// Nothing to do here if not inited yet.\n\t\tif ( !( observablePropertiesSymbol in this ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst boundProperties = this[ boundPropertiesSymbol ];\n\t\tconst boundObservables = this[ boundObservablesSymbol ];\n\n\t\tif ( unbindProperties.length ) {\n\t\t\tif ( !isStringArray( unbindProperties ) ) {\n\t\t\t\t/**\n\t\t\t\t * Properties must be strings.\n\t\t\t\t *\n\t\t\t\t * @error observable-unbind-wrong-properties\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'observable-unbind-wrong-properties: Properties must be strings.' );\n\t\t\t}\n\n\t\t\tunbindProperties.forEach( propertyName => {\n\t\t\t\tconst binding = boundProperties.get( propertyName );\n\n\t\t\t\t// Nothing to do if the binding is not defined\n\t\t\t\tif ( !binding ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet toObservable, toProperty, toProperties, toPropertyBindings;\n\n\t\t\t\tbinding.to.forEach( to => {\n\t\t\t\t\t// TODO: ES6 destructuring.\n\t\t\t\t\ttoObservable = to[ 0 ];\n\t\t\t\t\ttoProperty = to[ 1 ];\n\t\t\t\t\ttoProperties = boundObservables.get( toObservable );\n\t\t\t\t\ttoPropertyBindings = toProperties[ toProperty ];\n\n\t\t\t\t\ttoPropertyBindings.delete( binding );\n\n\t\t\t\t\tif ( !toPropertyBindings.size ) {\n\t\t\t\t\t\tdelete toProperties[ toProperty ];\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !Object.keys( toProperties ).length ) {\n\t\t\t\t\t\tboundObservables.delete( toObservable );\n\t\t\t\t\t\tthis.stopListening( toObservable, 'change' );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tboundProperties.delete( propertyName );\n\t\t\t} );\n\t\t} else {\n\t\t\tboundObservables.forEach( ( bindings, boundObservable ) => {\n\t\t\t\tthis.stopListening( boundObservable, 'change' );\n\t\t\t} );\n\n\t\t\tboundObservables.clear();\n\t\t\tboundProperties.clear();\n\t\t}\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdecorate( methodName ) {\n\t\tconst originalMethod = this[ methodName ];\n\n\t\tif ( !originalMethod ) {\n\t\t\t/**\n\t\t\t * Cannot decorate an undefined method.\n\t\t\t *\n\t\t\t * @error observablemixin-cannot-decorate-undefined\n\t\t\t * @param {Object} object The object which method should be decorated.\n\t\t\t * @param {String} methodName Name of the method which does not exist.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'observablemixin-cannot-decorate-undefined: Cannot decorate an undefined method.',\n\t\t\t\t{ object: this, methodName }\n\t\t\t);\n\t\t}\n\n\t\tthis.on( methodName, ( evt, args ) => {\n\t\t\tevt.return = originalMethod.apply( this, args );\n\t\t} );\n\n\t\tthis[ methodName ] = function( ...args ) {\n\t\t\treturn this.fire( methodName, args );\n\t\t};\n\t}\n};\n\nextend( ObservableMixin, EmitterMixin );\n\nexport default ObservableMixin;\n\n// Init symbol properties needed to for the observable mechanism to work.\n//\n// @private\n// @param {module:utils/observablemixin~ObservableMixin} observable\nfunction initObservable( observable ) {\n\t// Do nothing if already inited.\n\tif ( observablePropertiesSymbol in observable ) {\n\t\treturn;\n\t}\n\n\t// The internal hash containing the observable's state.\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, observablePropertiesSymbol, {\n\t\tvalue: new Map()\n\t} );\n\n\t// Map containing bindings to external observables. It shares the binding objects\n\t// (`{ observable: A, property: 'a', to: ... }`) with {@link module:utils/observablemixin~ObservableMixin#_boundProperties} and\n\t// it is used to observe external observables to update own properties accordingly.\n\t// See {@link module:utils/observablemixin~ObservableMixin#bind}.\n\t//\n\t//\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n\t//\t\tconsole.log( A._boundObservables );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\tB: {\n\t//\t\t\t\t\tx: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\ty: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t}\n\t//\t\t\t} )\n\t//\n\t//\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n\t//\t\tconsole.log( A._boundObservables );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\tB: {\n\t//\t\t\t\t\tx: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\ty: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\t\t] ),\n\t//\t\t\t\t\tz: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t},\n\t//\t\t\t\tC: {\n\t//\t\t\t\t\tw: Set( [\n\t//\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t\t\t] )\n\t//\t\t\t\t}\n\t//\t\t\t} )\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, boundObservablesSymbol, {\n\t\tvalue: new Map()\n\t} );\n\n\t// Object that stores which properties of this observable are bound and how. It shares\n\t// the binding objects (`{ observable: A, property: 'a', to: ... }`) with {@link utils.ObservableMixin#_boundObservables}.\n\t// This data structure is a reverse of {@link utils.ObservableMixin#_boundObservables} and it is helpful for\n\t// {@link utils.ObservableMixin#unbind}.\n\t//\n\t// See {@link utils.ObservableMixin#bind}.\n\t//\n\t//\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n\t//\t\tconsole.log( A._boundProperties );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n\t//\t\t\t} )\n\t//\n\t//\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n\t//\t\tconsole.log( A._boundProperties );\n\t//\n\t//\t\t\tMap( {\n\t//\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n\t//\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] },\n\t//\t\t\t\td: { observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n\t//\t\t\t} )\n\t//\n\t// @private\n\t// @type {Map}\n\tObject.defineProperty( observable, boundPropertiesSymbol, {\n\t\tvalue: new Map()\n\t} );\n}\n\n// A chaining for {@link module:utils/observablemixin~ObservableMixin#bind} providing `.to()` interface.\n//\n// @private\n// @param {...[Observable|String|Function]} args Arguments of the `.to( args )` binding.\nfunction bindTo( ...args ) {\n\tconst parsedArgs = parseBindToArgs( ...args );\n\tconst bindingsKeys = Array.from( this._bindings.keys() );\n\tconst numberOfBindings = bindingsKeys.length;\n\n\t// Eliminate A.bind( 'x' ).to( B, C )\n\tif ( !parsedArgs.callback && parsedArgs.to.length > 1 ) {\n\t\t/**\n\t\t * Binding multiple observables only possible with callback.\n\t\t *\n\t\t * @error observable-bind-no-callback\n\t\t */\n\t\tthrow new CKEditorError( 'observable-bind-to-no-callback: Binding multiple observables only possible with callback.' );\n\t}\n\n\t// Eliminate A.bind( 'x', 'y' ).to( B, callback )\n\tif ( numberOfBindings > 1 && parsedArgs.callback ) {\n\t\t/**\n\t\t * Cannot bind multiple properties and use a callback in one binding.\n\t\t *\n\t\t * @error observable-bind-to-extra-callback\n\t\t */\n\t\tthrow new CKEditorError( 'observable-bind-to-extra-callback: Cannot bind multiple properties and use a callback in one binding.' );\n\t}\n\n\tparsedArgs.to.forEach( to => {\n\t\t// Eliminate A.bind( 'x', 'y' ).to( B, 'a' )\n\t\tif ( to.properties.length && to.properties.length !== numberOfBindings ) {\n\t\t\t/**\n\t\t\t * The number of properties must match.\n\t\t\t *\n\t\t\t * @error observable-bind-to-properties-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'observable-bind-to-properties-length: The number of properties must match.' );\n\t\t}\n\n\t\t// When no to.properties specified, observing source properties instead i.e.\n\t\t// A.bind( 'x', 'y' ).to( B ) -> Observe B.x and B.y\n\t\tif ( !to.properties.length ) {\n\t\t\tto.properties = this._bindProperties;\n\t\t}\n\t} );\n\n\tthis._to = parsedArgs.to;\n\n\t// Fill {@link BindChain#_bindings} with callback. When the callback is set there's only one binding.\n\tif ( parsedArgs.callback ) {\n\t\tthis._bindings.get( bindingsKeys[ 0 ] ).callback = parsedArgs.callback;\n\t}\n\n\tattachBindToListeners( this._observable, this._to );\n\n\t// Update observable._boundProperties and observable._boundObservables.\n\tupdateBindToBound( this );\n\n\t// Set initial values of bound properties.\n\tthis._bindProperties.forEach( propertyName => {\n\t\tupdateBoundObservableProperty( this._observable, propertyName );\n\t} );\n}\n\n// Binds to an attribute in a set of iterable observables.\n//\n// @private\n// @param {Array.<Observable>} observables\n// @param {String} attribute\n// @param {Function} callback\nfunction bindToMany( observables, attribute, callback ) {\n\tif ( this._bindings.size > 1 ) {\n\t\t/**\n\t\t * Binding one attribute to many observables only possible with one attribute.\n\t\t *\n\t\t * @error observable-bind-to-many-not-one-binding\n\t\t */\n\t\tthrow new CKEditorError( 'observable-bind-to-many-not-one-binding: Cannot bind multiple properties with toMany().' );\n\t}\n\n\tthis.to(\n\t\t// Bind to #attribute of each observable...\n\t\t...getBindingTargets( observables, attribute ),\n\t\t// ...using given callback to parse attribute values.\n\t\tcallback\n\t);\n}\n\n// Returns an array of binding components for\n// {@link Observable#bind} from a set of iterable observables.\n//\n// @param {Array.<Observable>} observables\n// @param {String} attribute\n// @returns {Array.<String|Observable>}\nfunction getBindingTargets( observables, attribute ) {\n\tconst observableAndAttributePairs = observables.map( observable => [ observable, attribute ] );\n\n\t// Merge pairs to one-dimension array of observables and attributes.\n\treturn Array.prototype.concat.apply( [], observableAndAttributePairs );\n}\n\n// Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\nfunction isStringArray( arr ) {\n\treturn arr.every( a => typeof a == 'string' );\n}\n\n// Parses and validates {@link Observable#bind}`.to( args )` arguments and returns\n// an object with a parsed structure. For example\n//\n//\t\tA.bind( 'x' ).to( B, 'a', C, 'b', call );\n//\n// becomes\n//\n//\t\t{\n//\t\t\tto: [\n//\t\t\t\t{ observable: B, properties: [ 'a' ] },\n//\t\t\t\t{ observable: C, properties: [ 'b' ] },\n//\t\t\t],\n//\t\t\tcallback: call\n// \t\t}\n//\n// @private\n// @param {...*} args Arguments of {@link Observable#bind}`.to( args )`.\n// @returns {Object}\nfunction parseBindToArgs( ...args ) {\n\t// Eliminate A.bind( 'x' ).to()\n\tif ( !args.length ) {\n\t\t/**\n\t\t * Invalid argument syntax in `to()`.\n\t\t *\n\t\t * @error observable-bind-to-parse-error\n\t\t */\n\t\tthrow new CKEditorError( 'observable-bind-to-parse-error: Invalid argument syntax in `to()`.' );\n\t}\n\n\tconst parsed = { to: [] };\n\tlet lastObservable;\n\n\tif ( typeof args[ args.length - 1 ] == 'function' ) {\n\t\tparsed.callback = args.pop();\n\t}\n\n\targs.forEach( a => {\n\t\tif ( typeof a == 'string' ) {\n\t\t\tlastObservable.properties.push( a );\n\t\t} else if ( typeof a == 'object' ) {\n\t\t\tlastObservable = { observable: a, properties: [] };\n\t\t\tparsed.to.push( lastObservable );\n\t\t} else {\n\t\t\tthrow new CKEditorError( 'observable-bind-to-parse-error: Invalid argument syntax in `to()`.' );\n\t\t}\n\t} );\n\n\treturn parsed;\n}\n\n// Synchronizes {@link module:utils/observablemixin#_boundObservables} with {@link Binding}.\n//\n// @private\n// @param {Binding} binding A binding to store in {@link Observable#_boundObservables}.\n// @param {Observable} toObservable A observable, which is a new component of `binding`.\n// @param {String} toPropertyName A name of `toObservable`'s property, a new component of the `binding`.\nfunction updateBoundObservables( observable, binding, toObservable, toPropertyName ) {\n\tconst boundObservables = observable[ boundObservablesSymbol ];\n\tconst bindingsToObservable = boundObservables.get( toObservable );\n\tconst bindings = bindingsToObservable || {};\n\n\tif ( !bindings[ toPropertyName ] ) {\n\t\tbindings[ toPropertyName ] = new Set();\n\t}\n\n\t// Pass the binding to a corresponding Set in `observable._boundObservables`.\n\tbindings[ toPropertyName ].add( binding );\n\n\tif ( !bindingsToObservable ) {\n\t\tboundObservables.set( toObservable, bindings );\n\t}\n}\n\n// Synchronizes {@link Observable#_boundProperties} and {@link Observable#_boundObservables}\n// with {@link BindChain}.\n//\n// Assuming the following binding being created\n//\n// \t\tA.bind( 'a', 'b' ).to( B, 'x', 'y' );\n//\n// the following bindings were initialized by {@link Observable#bind} in {@link BindChain#_bindings}:\n//\n// \t\t{\n// \t\t\ta: { observable: A, property: 'a', to: [] },\n// \t\t\tb: { observable: A, property: 'b', to: [] },\n// \t\t}\n//\n// Iterate over all bindings in this chain and fill their `to` properties with\n// corresponding to( ... ) arguments (components of the binding), so\n//\n// \t\t{\n// \t\t\ta: { observable: A, property: 'a', to: [ B, 'x' ] },\n// \t\t\tb: { observable: A, property: 'b', to: [ B, 'y' ] },\n// \t\t}\n//\n// Then update the structure of {@link Observable#_boundObservables} with updated\n// binding, so it becomes:\n//\n// \t\tMap( {\n// \t\t\tB: {\n// \t\t\t\tx: Set( [\n// \t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] }\n// \t\t\t\t] ),\n// \t\t\t\ty: Set( [\n// \t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n// \t\t\t\t] )\n//\t\t\t}\n// \t\t} )\n//\n// @private\n// @param {BindChain} chain The binding initialized by {@link Observable#bind}.\nfunction updateBindToBound( chain ) {\n\tlet toProperty;\n\n\tchain._bindings.forEach( ( binding, propertyName ) => {\n\t\t// Note: For a binding without a callback, this will run only once\n\t\t// like in A.bind( 'x', 'y' ).to( B, 'a', 'b' )\n\t\t// TODO: ES6 destructuring.\n\t\tchain._to.forEach( to => {\n\t\t\ttoProperty = to.properties[ binding.callback ? 0 : chain._bindProperties.indexOf( propertyName ) ];\n\n\t\t\tbinding.to.push( [ to.observable, toProperty ] );\n\t\t\tupdateBoundObservables( chain._observable, binding, to.observable, toProperty );\n\t\t} );\n\t} );\n}\n\n// Updates an property of a {@link Observable} with a value\n// determined by an entry in {@link Observable#_boundProperties}.\n//\n// @private\n// @param {Observable} observable A observable which property is to be updated.\n// @param {String} propertyName An property to be updated.\nfunction updateBoundObservableProperty( observable, propertyName ) {\n\tconst boundProperties = observable[ boundPropertiesSymbol ];\n\tconst binding = boundProperties.get( propertyName );\n\tlet propertyValue;\n\n\t// When a binding with callback is created like\n\t//\n\t// \t\tA.bind( 'a' ).to( B, 'b', C, 'c', callback );\n\t//\n\t// collect B.b and C.c, then pass them to callback to set A.a.\n\tif ( binding.callback ) {\n\t\tpropertyValue = binding.callback.apply( observable, binding.to.map( to => to[ 0 ][ to[ 1 ] ] ) );\n\t} else {\n\t\tpropertyValue = binding.to[ 0 ];\n\t\tpropertyValue = propertyValue[ 0 ][ propertyValue[ 1 ] ];\n\t}\n\n\tif ( observable.hasOwnProperty( propertyName ) ) {\n\t\tobservable[ propertyName ] = propertyValue;\n\t} else {\n\t\tobservable.set( propertyName, propertyValue );\n\t}\n}\n\n// Starts listening to changes in {@link BindChain._to} observables to update\n// {@link BindChain._observable} {@link BindChain._bindProperties}. Also sets the\n// initial state of {@link BindChain._observable}.\n//\n// @private\n// @param {BindChain} chain The chain initialized by {@link Observable#bind}.\nfunction attachBindToListeners( observable, toBindings ) {\n\ttoBindings.forEach( to => {\n\t\tconst boundObservables = observable[ boundObservablesSymbol ];\n\t\tlet bindings;\n\n\t\t// If there's already a chain between the observables (`observable` listens to\n\t\t// `to.observable`), there's no need to create another `change` event listener.\n\t\tif ( !boundObservables.get( to.observable ) ) {\n\t\t\tobservable.listenTo( to.observable, 'change', ( evt, propertyName ) => {\n\t\t\t\tbindings = boundObservables.get( to.observable )[ propertyName ];\n\n\t\t\t\t// Note: to.observable will fire for any property change, react\n\t\t\t\t// to changes of properties which are bound only.\n\t\t\t\tif ( bindings ) {\n\t\t\t\t\tbindings.forEach( binding => {\n\t\t\t\t\t\tupdateBoundObservableProperty( observable, binding.property );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t} );\n}\n\n/**\n * Interface which adds \"observable properties\" and data binding functionality.\n *\n * Can be easily implemented by a class by mixing the {@link module:utils/observablemixin~ObservableMixin} mixin.\n *\n * Read more about the usage of this interface in the:\n * * {@glink framework/guides/architecture/core-editor-architecture#event-system-and-observables \"Event system and observables\"}\n * section of the {@glink framework/guides/architecture/core-editor-architecture \"Core editor architecture\"} guide,\n * * {@glink framework/guides/deep-dive/observables \"Observables\" deep dive} guide.\n *\n * @interface Observable\n * @extends module:utils/emittermixin~Emitter\n */\n\n/**\n * Fired when a property changed value.\n *\n *\t\tobservable.set( 'prop', 1 );\n *\n *\t\tobservable.on( 'change:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `${ propertyName } has changed from ${ oldValue } to ${ newValue }` );\n *\t\t} );\n *\n *\t\tobservable.prop = 2; // -> 'prop has changed from 1 to 2'\n *\n * @event change:{property}\n * @param {String} name The property name.\n * @param {*} value The new property value.\n * @param {*} oldValue The previous property value.\n */\n\n/**\n * Fired when a property value is going to be set but is not set yet (before the `change` event is fired).\n *\n * You can control the final value of the property by using\n * the {@link module:utils/eventinfo~EventInfo#return event's `return` property}.\n *\n *\t\tobservable.set( 'prop', 1 );\n *\n *\t\tobservable.on( 'set:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `Value is going to be changed from ${ oldValue } to ${ newValue }` );\n *\t\t\tconsole.log( `Current property value is ${ observable[ propertyName ] }` );\n *\n *\t\t\t// Let's override the value.\n *\t\t\tevt.return = 3;\n *\t\t} );\n *\n *\t\tobservable.on( 'change:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `Value has changed from ${ oldValue } to ${ newValue }` );\n *\t\t} );\n *\n *\t\tobservable.prop = 2; // -> 'Value is going to be changed from 1 to 2'\n *\t\t                     // -> 'Current property value is 1'\n *\t\t                     // -> 'Value has changed from 1 to 3'\n *\n * **Note:** Event is fired even when the new value is the same as the old value.\n *\n * @event set:{property}\n * @param {String} name The property name.\n * @param {*} value The new property value.\n * @param {*} oldValue The previous property value.\n */\n\n/**\n * Creates and sets the value of an observable property of this object. Such an property becomes a part\n * of the state and is be observable.\n *\n * It accepts also a single object literal containing key/value pairs with properties to be set.\n *\n * This method throws the `observable-set-cannot-override` error if the observable instance already\n * have a property with the given property name. This prevents from mistakenly overriding existing\n * properties and methods, but means that `foo.set( 'bar', 1 )` may be slightly slower than `foo.bar = 1`.\n *\n * @method #set\n * @param {String|Object} name The property's name or object with `name=>value` pairs.\n * @param {*} [value] The property's value (if `name` was passed in the first parameter).\n */\n\n/**\n * Binds {@link #set obvervable properties} to other objects implementing the\n * {@link module:utils/observablemixin~Observable} interface.\n *\n * Read more in the {@glink framework/guides/deep-dive/observables#property-bindings dedicated guide}\n * covering the topic of property bindings with some additional examples.\n *\n * Let's consider two objects: a `button` and an associated `command` (both `Observable`).\n *\n * A simple property binding could be as follows:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isEnabled' );\n *\n * or even shorter:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command );\n *\n * which works in the following way:\n *\n * * `button.isEnabled` **instantly equals** `command.isEnabled`,\n * * whenever `command.isEnabled` changes, `button.isEnabled` will immediately reflect its value.\n *\n * **Note**: To release the binding use {@link module:utils/observablemixin~Observable#unbind}.\n *\n * You can also \"rename\" the property in the binding by specifying the new name in the `to()` chain:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isWorking' );\n *\n * It is possible to bind more than one property at a time to shorten the code:\n *\n *\t\tbutton.bind( 'isEnabled', 'value' ).to( command );\n *\n * which corresponds to:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command );\n *\t\tbutton.bind( 'value' ).to( command );\n *\n * The binding can include more than one observable, combining multiple data sources in a custom callback:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isEnabled', ui, 'isVisible',\n *\t\t\t( isCommandEnabled, isUIVisible ) => isCommandEnabled && isUIVisible );\n *\n * It is also possible to bind to the same property in an array of observables.\n * To bind a `button` to multiple commands (also `Observables`) so that each and every one of them\n * must be enabled for the button to become enabled, use the following code:\n *\n *\t\tbutton.bind( 'isEnabled' ).toMany( [ commandA, commandB, commandC ], 'isEnabled',\n *\t\t\t( isAEnabled, isBEnabled, isCEnabled ) => isAEnabled && isBEnabled && isCEnabled );\n *\n * @method #bind\n * @param {...String} bindProperties Observable properties that will be bound to another observable(s).\n * @returns {Object} The bind chain with the `to()` and `toMany()` methods.\n */\n\n/**\n * Removes the binding created with {@link #bind}.\n *\n *\t\t// Removes the binding for the 'a' property.\n *\t\tA.unbind( 'a' );\n *\n *\t\t// Removes bindings for all properties.\n *\t\tA.unbind();\n *\n * @method #unbind\n * @param {...String} [unbindProperties] Observable properties to be unbound. All the bindings will\n * be released if no properties provided.\n */\n\n/**\n * Turns the given methods of this object into event-based ones. This means that the new method will fire an event\n * (named after the method) and the original action will be plugged as a listener to that event.\n *\n * Read more in the {@glink framework/guides/deep-dive/observables#decorating-object-methods dedicated guide}\n * covering the topic of decorating methods with some additional examples.\n *\n * Decorating the method does not change its behavior (it only adds an event),\n * but it allows to modify it later on by listening to the method's event.\n *\n * For example, to cancel the method execution the event can be {@link module:utils/eventinfo~EventInfo#stop stopped}:\n *\n *\t\tclass Foo {\n *\t\t\tconstructor() {\n *\t\t\t\tthis.decorate( 'method' );\n *\t\t\t}\n *\n *\t\t\tmethod() {\n *\t\t\t\tconsole.log( 'called!' );\n *\t\t\t}\n *\t\t}\n *\n *\t\tconst foo = new Foo();\n *\t\tfoo.on( 'method', ( evt ) => {\n *\t\t\tevt.stop();\n *\t\t}, { priority: 'high' } );\n *\n *\t\tfoo.method(); // Nothing is logged.\n *\n *\n * **Note**: The high {@link module:utils/priorities~PriorityString priority} listener\n * has been used to execute this particular callback before the one which calls the original method\n * (which uses the \"normal\" priority).\n *\n * It is also possible to change the returned value:\n *\n *\t\tfoo.on( 'method', ( evt ) => {\n *\t\t\tevt.return = 'Foo!';\n *\t\t} );\n *\n *\t\tfoo.method(); // -> 'Foo'\n *\n * Finally, it is possible to access and modify the arguments the method is called with:\n *\n *\t\tmethod( a, b ) {\n *\t\t\tconsole.log( `${ a }, ${ b }`  );\n *\t\t}\n *\n *\t\t// ...\n *\n *\t\tfoo.on( 'method', ( evt, args ) => {\n *\t\t\targs[ 0 ] = 3;\n *\n *\t\t\tconsole.log( args[ 1 ] ); // -> 2\n *\t\t}, { priority: 'high' } );\n *\n *\t\tfoo.method( 1, 2 ); // -> '3, 2'\n *\n * @method #decorate\n * @param {String} methodName Name of the method to decorate.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/mix\n */\n\n/**\n * Copies enumerable properties and symbols from the objects given as 2nd+ parameters to the\n * prototype of first object (a constructor).\n *\n *\t\tclass Editor {\n *\t\t\t...\n *\t\t}\n *\n *\t\tconst SomeMixin = {\n *\t\t\ta() {\n *\t\t\t\treturn 'a';\n *\t\t\t}\n *\t\t};\n *\n *\t\tmix( Editor, SomeMixin, ... );\n *\n *\t\tnew Editor().a(); // -> 'a'\n *\n * Note: Properties which already exist in the base class will not be overriden.\n *\n * @param {Function} [baseClass] Class which prototype will be extended.\n * @param {Object} [...mixins] Objects from which to get properties.\n */\nexport default function mix( baseClass, ...mixins ) {\n\tmixins.forEach( mixin => {\n\t\tObject.getOwnPropertyNames( mixin ).concat( Object.getOwnPropertySymbols( mixin ) )\n\t\t\t.forEach( key => {\n\t\t\t\tif ( key in baseClass.prototype ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sourceDescriptor = Object.getOwnPropertyDescriptor( mixin, key );\n\t\t\t\tsourceDescriptor.enumerable = false;\n\n\t\t\t\tObject.defineProperty( baseClass.prototype, key, sourceDescriptor );\n\t\t\t} );\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/plugin\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The base class for CKEditor plugin classes.\n *\n * @implements module:core/plugin~PluginInterface\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor instance.\n\t\t *\n\t\t * Note that most editors implement the {@link module:core/editor/editorwithui~EditorWithUI} interface in addition\n\t\t * to the base {@link module:core/editor/editor~Editor} interface. However, editors with an external UI\n\t\t * (i.e. Bootstrap-based) or a headless editor may not implement the {@link module:core/editor/editorwithui~EditorWithUI}\n\t\t * interface.\n\t\t *\n\t\t * Because of above, to make plugins more universal, it is recommended to split features into:\n\t\t *  - The \"editing\" part that only uses the {@link module:core/editor/editor~Editor} interface.\n\t\t *  - The \"UI\" part that uses both the {@link module:core/editor/editor~Editor} interface and\n\t\t *  the {@link module:core/editor/editorwithui~EditorWithUI} interface.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n}\n\nmix( Plugin, ObservableMixin );\n\n/**\n * The base interface for CKEditor plugins.\n *\n * In its minimal form it can be a simple function (it will be used as a constructor) that accepts\n * {@link module:core/editor/editor~Editor the editor} as a parameter.\n * It can also implement a few methods which, when present, will be used to properly initialize and destroy the plugin.\n *\n *\t\t// A simple plugin that enables a data processor.\n *\t\tfunction MyPlugin( editor ) {\n *\t\t\teditor.data.processor = new MyDataProcessor();\n *\t\t}\n *\n * In most cases, however, you will want to inherit from the {@link module:core/plugin~Plugin} class which implements the\n * {@link module:utils/observablemixin~ObservableMixin} and is, therefore, more convenient:\n *\n *\t\tclass MyPlugin extends Plugin {\n *\t\t\tinit() {\n *\t\t\t\t// `listenTo()` and `editor` are available thanks to `Plugin`.\n *\t\t\t\t// By using `listenTo()` you will ensure that the listener is removed when\n *\t\t\t\t// the plugin is destroyed.\n *\t\t\t\tthis.listenTo( this.editor, 'dataReady', () => {\n *\t\t\t\t\t// Do something when the data is ready.\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n * @interface PluginInterface\n */\n\n/**\n * Creates a new plugin instance. This is the first step of the plugin initialization.\n * See also {@link #init} and {@link #afterInit}.\n *\n * A plugin is always instantiated after its {@link module:core/plugin~PluginInterface.requires dependencies} and the\n * {@link #init} and {@link #afterInit} methods are called in the same order.\n *\n * Usually, you will want to put your plugin's initialization code in the {@link #init} method.\n * The constructor can be understood as \"before init\" and used in special cases, just like\n * {@link #afterInit} serves the special \"after init\" scenarios (e.g.the code which depends on other\n * plugins, but which does not {@link module:core/plugin~PluginInterface.requires explicitly require} them).\n *\n * @method #constructor\n * @param {module:core/editor/editor~Editor} editor\n */\n\n/**\n * An array of plugins required by this plugin.\n *\n * To keep the plugin class definition tight it is recommended to define this property as a static getter:\n *\n *\t\timport Image from './image.js';\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get requires() {\n *\t\t\t\treturn [ Image ];\n *\t\t\t}\n *\t\t}\n *\n * @static\n * @readonly\n * @member {Array.<Function>|undefined} module:core/plugin~PluginInterface.requires\n */\n\n/**\n * An optional name of the plugin. If set, the plugin will be available in\n * {@link module:core/plugincollection~PluginCollection#get} by its\n * name and its constructor. If not, then only by its constructor.\n *\n * The name should reflect the constructor name.\n *\n * To keep the plugin class definition tight it is recommended to define this property as a static getter:\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get pluginName() {\n *\t\t\t\treturn 'ImageCaption';\n *\t\t\t}\n *\t\t}\n *\n * Note: The native `Function.name` property could not be used to keep the plugin name because\n * it will be mangled during code minification.\n *\n * Naming a plugin is necessary to enable removing it through the\n * {@link module:core/editor/editorconfig~EditorConfig#removePlugins `config.removePlugins`} option.\n *\n * @static\n * @readonly\n * @member {String|undefined} module:core/plugin~PluginInterface.pluginName\n */\n\n/**\n * The second stage (after plugin {@link #constructor}) of plugin initialization.\n * Unlike the plugin constructor this method can be asynchronous.\n *\n * A plugin's `init()` method is called after its {@link module:core/plugin~PluginInterface.requires dependencies} are initialized,\n * so in the same order as constructors of these plugins.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #init\n * @returns {null|Promise}\n */\n\n/**\n * The third (and last) stage of plugin initialization. See also {@link #constructor} and {@link #init}.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #afterInit\n * @returns {null|Promise}\n */\n\n/**\n * Destroys the plugin.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #destroy\n * @returns {null|Promise}\n */\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/config\n */\n\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * Handles a configuration dictionary.\n */\nexport default class Config {\n\t/**\n\t * Creates an instance of the {@link ~Config} class.\n\t *\n\t * @param {Object} [configurations] The initial configurations to be set. Usually, provided by the user.\n\t * @param {Object} [defaultConfigurations] The default configurations. Usually, provided by the system.\n\t */\n\tconstructor( configurations, defaultConfigurations ) {\n\t\t/**\n\t\t * Store for the whole configuration.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._config = {};\n\n\t\t// Set default configuration.\n\t\tif ( defaultConfigurations ) {\n\t\t\tthis.define( defaultConfigurations );\n\t\t}\n\n\t\t// Set initial configuration.\n\t\tif ( configurations ) {\n\t\t\tthis._setObjectToTarget( this._config, configurations );\n\t\t}\n\t}\n\n\t/**\n\t * Set configuration values.\n\t *\n\t * It accepts both a name/value pair or an object, which properties and values will be used to set\n\t * configurations.\n\t *\n\t * It also accepts setting a \"deep configuration\" by using dots in the name. For example, `'resize.width'` sets\n\t * the value for the `width` configuration in the `resize` subset.\n\t *\n\t *\t\tconfig.set( 'width', 500 );\n\t *\t\tconfig.set( 'toolbar.collapsed', true );\n\t *\n\t *\t\t// Equivalent to:\n\t *\t\tconfig.set( {\n\t *\t\t\twidth: 500\n\t *\t\t\ttoolbar: {\n\t *\t\t\t\tcollapsed: true\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Passing an object as the value will amend the configuration, not replace it.\n\t *\n\t *\t\tconfig.set( 'toolbar', {\n\t *\t\t\tcollapsed: true,\n\t *\t\t} );\n\t *\n\t *\t\tconfig.set( 'toolbar', {\n\t *\t\t\tcolor: 'red',\n\t *\t\t} );\n\t *\n\t *\t\tconfig.get( 'toolbar.collapsed' ); // true\n\t *\t\tconfig.get( 'toolbar.color' ); // 'red'\n\t *\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t */\n\tset( name, value ) {\n\t\tthis._setToTarget( this._config, name, value );\n\t}\n\n\t/**\n\t * Does exactly the same as {@link #set} with one exception – passed configuration extends\n\t * existing one, but does not overwrite already defined values.\n\t *\n\t * This method is supposed to be called by plugin developers to setup plugin's configurations. It would be\n\t * rarely used for other needs.\n\t *\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t */\n\tdefine( name, value ) {\n\t\tconst isDefine = true;\n\n\t\tthis._setToTarget( this._config, name, value, isDefine );\n\t}\n\n\t/**\n\t * Gets the value for a configuration entry.\n\t *\n\t *\t\tconfig.get( 'name' );\n\t *\n\t * Deep configurations can be retrieved by separating each part with a dot.\n\t *\n\t *\t\tconfig.get( 'toolbar.collapsed' );\n\t *\n\t * @param {String} name The configuration name. Configuration names are case-sensitive.\n\t * @returns {*} The configuration value or `undefined` if the configuration entry was not found.\n\t */\n\tget( name ) {\n\t\treturn this._getFromSource( this._config, name );\n\t}\n\n\t/**\n\t * Saves passed configuration to the specified target (nested object).\n\t *\n\t * @private\n\t * @param {Object} target Nested config object.\n\t * @param {String|Object} name The configuration name or an object from which take properties as\n\t * configuration entries. Configuration names are case-sensitive.\n\t * @param {*} value The configuration value. Used if a name is passed.\n\t * @param {Boolean} [isDefine=false] Define if passed configuration should overwrite existing one.\n\t */\n\t_setToTarget( target, name, value, isDefine = false ) {\n\t\t// In case of an object, iterate through it and call `_setToTarget` again for each property.\n\t\tif ( isPlainObject( name ) ) {\n\t\t\tthis._setObjectToTarget( target, name, isDefine );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\n\t\tconst parts = name.split( '.' );\n\n\t\t// Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\n\t\tname = parts.pop();\n\n\t\t// Iterate over parts to check if currently stored configuration has proper structure.\n\t\tfor ( const part of parts ) {\n\t\t\t// If there is no object for specified part then create one.\n\t\t\tif ( !isPlainObject( target[ part ] ) ) {\n\t\t\t\ttarget[ part ] = {};\n\t\t\t}\n\n\t\t\t// Nested object becomes a target.\n\t\t\ttarget = target[ part ];\n\t\t}\n\n\t\t// In case of value is an object.\n\t\tif ( isPlainObject( value ) ) {\n\t\t\t// We take care of proper config structure.\n\t\t\tif ( !isPlainObject( target[ name ] ) ) {\n\t\t\t\ttarget[ name ] = {};\n\t\t\t}\n\n\t\t\ttarget = target[ name ];\n\n\t\t\t// And iterate through this object calling `_setToTarget` again for each property.\n\t\t\tthis._setObjectToTarget( target, value, isDefine );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Do nothing if we are defining configuration for non empty name.\n\t\tif ( isDefine && typeof target[ name ] != 'undefined' ) {\n\t\t\treturn;\n\t\t}\n\n\t\ttarget[ name ] = value;\n\t}\n\n\t/**\n\t * Get specified configuration from specified source (nested object).\n\t *\n\t * @private\n\t * @param {Object} source level of nested object.\n\t * @param {String} name The configuration name. Configuration names are case-sensitive.\n\t * @returns {*} The configuration value or `undefined` if the configuration entry was not found.\n\t */\n\t_getFromSource( source, name ) {\n\t\t// The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\n\t\tconst parts = name.split( '.' );\n\n\t\t// Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\n\t\tname = parts.pop();\n\n\t\t// Iterate over parts to check if currently stored configuration has proper structure.\n\t\tfor ( const part of parts ) {\n\t\t\tif ( !isPlainObject( source[ part ] ) ) {\n\t\t\t\tsource = null;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Nested object becomes a source.\n\t\t\tsource = source[ part ];\n\t\t}\n\n\t\t// Always returns undefined for non existing configuration\n\t\treturn source ? source[ name ] : undefined;\n\t}\n\n\t/**\n\t * Iterates through passed object and calls {@link #_setToTarget} method with object key and value for each property.\n\t *\n\t * @private\n\t * @param {Object} target Nested config object.\n\t * @param {Object} configuration Configuration data set\n\t * @param {Boolean} [isDefine] Defines if passed configuration is default configuration or not.\n\t */\n\t_setObjectToTarget( target, configuration, isDefine ) {\n\t\tObject.keys( configuration ).forEach( key => {\n\t\t\tthis._setToTarget( target, key, configuration[ key ], isDefine );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/comparearrays\n */\n\n/**\n * Compares how given arrays relate to each other. One array can be: same as another array, prefix of another array\n * or completely different. If arrays are different, first index at which they differ is returned. Otherwise,\n * a flag specifying the relation is returned. Flags are negative numbers, so whenever a number >= 0 is returned\n * it means that arrays differ.\n *\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 2 ] );\t\t// 'same'\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 2, 1 ] );\t\t// 'prefix'\n *\t\tcompareArrays( [ 0, 2 ], [ 0 ] );\t\t\t// 'extension'\n *\t\tcompareArrays( [ 0, 2 ], [ 1, 2 ] );\t\t// 0\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 1 ] );\t\t// 1\n *\n * @param {Array} a Array that is compared.\n * @param {Array} b Array to compare with.\n * @returns {module:utils/comparearrays~ArrayRelation} How array `a` is related to `b`.\n */\nexport default function compareArrays( a, b ) {\n\tconst minLen = Math.min( a.length, b.length );\n\n\tfor ( let i = 0; i < minLen; i++ ) {\n\t\tif ( a[ i ] != b[ i ] ) {\n\t\t\t// The arrays are different.\n\t\t\treturn i;\n\t\t}\n\t}\n\n\t// Both arrays were same at all points.\n\tif ( a.length == b.length ) {\n\t\t// If their length is also same, they are the same.\n\t\treturn 'same';\n\t} else if ( a.length < b.length ) {\n\t\t// Compared array is shorter so it is a prefix of the other array.\n\t\treturn 'prefix';\n\t} else {\n\t\t// Compared array is longer so it is an extension of the other array.\n\t\treturn 'extension';\n\t}\n}\n\n/**\n * @typedef {'extension'|'same'|'prefix'} module:utils/comparearrays~ArrayRelation\n */\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nexport default listCacheClear;\n","import eq from './eq.js';\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nexport default assocIndexOf;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nexport default listCacheDelete;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nexport default listCacheGet;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nexport default listCacheHas;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nexport default listCacheSet;\n","import listCacheClear from './_listCacheClear.js';\nimport listCacheDelete from './_listCacheDelete.js';\nimport listCacheGet from './_listCacheGet.js';\nimport listCacheHas from './_listCacheHas.js';\nimport listCacheSet from './_listCacheSet.js';\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nexport default ListCache;\n","import ListCache from './_ListCache.js';\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nexport default stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nexport default stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nexport default stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nexport default stackHas;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","import getNative from './_getNative.js';\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nexport default nativeCreate;\n","import nativeCreate from './_nativeCreate.js';\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nexport default hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default hashDelete;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nexport default hashGet;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nexport default hashHas;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nexport default hashSet;\n","import hashClear from './_hashClear.js';\nimport hashDelete from './_hashDelete.js';\nimport hashGet from './_hashGet.js';\nimport hashHas from './_hashHas.js';\nimport hashSet from './_hashSet.js';\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nexport default Hash;\n","import Hash from './_Hash.js';\nimport ListCache from './_ListCache.js';\nimport Map from './_Map.js';\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nexport default mapCacheClear;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nexport default isKeyable;\n","import isKeyable from './_isKeyable.js';\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nexport default getMapData;\n","import getMapData from './_getMapData.js';\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default mapCacheDelete;\n","import getMapData from './_getMapData.js';\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nexport default mapCacheGet;\n","import getMapData from './_getMapData.js';\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nexport default mapCacheHas;\n","import getMapData from './_getMapData.js';\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nexport default mapCacheSet;\n","import mapCacheClear from './_mapCacheClear.js';\nimport mapCacheDelete from './_mapCacheDelete.js';\nimport mapCacheGet from './_mapCacheGet.js';\nimport mapCacheHas from './_mapCacheHas.js';\nimport mapCacheSet from './_mapCacheSet.js';\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nexport default MapCache;\n","import ListCache from './_ListCache.js';\nimport Map from './_Map.js';\nimport MapCache from './_MapCache.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nexport default stackSet;\n","import ListCache from './_ListCache.js';\nimport stackClear from './_stackClear.js';\nimport stackDelete from './_stackDelete.js';\nimport stackGet from './_stackGet.js';\nimport stackHas from './_stackHas.js';\nimport stackSet from './_stackSet.js';\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nexport default Stack;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nexport default arrayEach;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeys from './_baseKeys.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nexport default keys;\n","import copyObject from './_copyObject.js';\nimport keys from './keys.js';\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nexport default baseAssign;\n","import copyObject from './_copyObject.js';\nimport keysIn from './keysIn.js';\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nexport default baseAssignIn;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nexport default copyArray;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default arrayFilter;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nexport default stubArray;\n","import arrayFilter from './_arrayFilter.js';\nimport stubArray from './stubArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nexport default getSymbols;\n","import copyObject from './_copyObject.js';\nimport getSymbols from './_getSymbols.js';\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nexport default copySymbols;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nexport default arrayPush;\n","import arrayPush from './_arrayPush.js';\nimport getPrototype from './_getPrototype.js';\nimport getSymbols from './_getSymbols.js';\nimport stubArray from './stubArray.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nexport default getSymbolsIn;\n","import copyObject from './_copyObject.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nexport default copySymbolsIn;\n","import arrayPush from './_arrayPush.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nexport default baseGetAllKeys;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbols from './_getSymbols.js';\nimport keys from './keys.js';\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nexport default getAllKeys;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nexport default getAllKeysIn;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nexport default initCloneArray;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nexport default Uint8Array;\n","import Uint8Array from './_Uint8Array.js';\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nexport default cloneArrayBuffer;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nexport default cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nexport default cloneRegExp;\n","import Symbol from './_Symbol.js';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nexport default cloneSymbol;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nexport default cloneTypedArray;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\nimport cloneDataView from './_cloneDataView.js';\nimport cloneRegExp from './_cloneRegExp.js';\nimport cloneSymbol from './_cloneSymbol.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nexport default initCloneByTag;\n","import isObject from './isObject.js';\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nexport default baseCreate;\n","import baseCreate from './_baseCreate.js';\nimport getPrototype from './_getPrototype.js';\nimport isPrototype from './_isPrototype.js';\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nexport default initCloneObject;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nexport default baseIsMap;\n","import baseIsMap from './_baseIsMap.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nexport default isMap;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nexport default baseIsSet;\n","import baseIsSet from './_baseIsSet.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nexport default isSet;\n","import Stack from './_Stack.js';\nimport arrayEach from './_arrayEach.js';\nimport assignValue from './_assignValue.js';\nimport baseAssign from './_baseAssign.js';\nimport baseAssignIn from './_baseAssignIn.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport copyArray from './_copyArray.js';\nimport copySymbols from './_copySymbols.js';\nimport copySymbolsIn from './_copySymbolsIn.js';\nimport getAllKeys from './_getAllKeys.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\nimport getTag from './_getTag.js';\nimport initCloneArray from './_initCloneArray.js';\nimport initCloneByTag from './_initCloneByTag.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isMap from './isMap.js';\nimport isObject from './isObject.js';\nimport isSet from './isSet.js';\nimport keys from './keys.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n\n    return result;\n  }\n\n  if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n\n    return result;\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport default baseClone;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/node\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { clone } from 'lodash-es';\n\n/**\n * Abstract tree view node class.\n *\n * This is an abstract class. Its constructor should not be used directly.\n * Use the {@link module:engine/view/element~Element} class to create view elements\n * or {@link module:engine/view/text~Text} class to create view text nodes.\n *\n * @abstract\n */\nexport default class Node {\n\t/**\n\t * Creates a tree view node.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Parent element. Null by default. Set by {@link module:engine/view/element~Element#_insertChild}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t\t */\n\t\tthis.parent = null;\n\t}\n\n\t/**\n\t * Index of the node in the parent element or null if the node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that view tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget index() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// No parent or child doesn't exist in parent's children.\n\t\tif ( ( pos = this.parent.getChildIndex( this ) ) == -1 ) {\n\t\t\t/**\n\t\t\t * The node's parent does not contain this node. It means that the document tree is corrupted.\n\t\t\t *\n\t\t\t * @error view-node-not-found-in-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-node-not-found-in-parent: The node\\'s parent does not contain this node.' );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Node's next sibling, or `null` if it is the last child.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nextSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index + 1 ) ) || null;\n\t}\n\n\t/**\n\t * Node's previous sibling, or `null` if it is the first child.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget previousSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index - 1 ) ) || null;\n\t}\n\n\t/**\n\t * Top-most ancestor of the node. If the node has no parent it is the root itself.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\tlet root = this; // eslint-disable-line consistent-this\n\n\t\twhile ( root.parent ) {\n\t\t\troot = root.parent;\n\t\t}\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/document~Document View document} that owns this node, or `null` if the node is inside\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/document~Document|null}\n\t */\n\tget document() {\n\t\t// Parent might be Node, null or DocumentFragment.\n\t\tif ( this.parent instanceof Node ) {\n\t\t\treturn this.parent.document;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Gets a path to the node. The path is an array containing indices of consecutive ancestors of this node,\n\t * beginning from {@link module:engine/view/node~Node#root root}, down to this node's index.\n\t *\n\t *\t\tconst abc = downcastWriter.createText( 'abc' );\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst h1 = downcastWriter.createElement( 'h1', null, downcastWriter.createText( 'header' ) );\n\t *\t\tconst p = downcastWriter.createElement( 'p', null, [ abc, foo ] );\n\t *\t\tconst div = downcastWriter.createElement( 'div', null, [ h1, p ] );\n\t *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n\t *\t\th1.getPath(); // Returns [ 0 ].\n\t *\t\tdiv.getPath(); // Returns [].\n\t *\n\t * @returns {Array.<Number>} The path.\n\t */\n\tgetPath() {\n\t\tconst path = [];\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\twhile ( node.parent ) {\n\t\t\tpath.unshift( node.index );\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this node.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/element~Element} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both nodes.\n\t *\n\t * @param {module:engine/view/node~Node} node The second node.\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n\t * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( node, options = {} ) {\n\t\tconst ancestorsA = this.getAncestors( options );\n\t\tconst ancestorsB = node.getAncestors( options );\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/view/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisBefore( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisPath = this.getPath();\n\t\tconst nodePath = node.getPath();\n\n\t\tconst result = compareArrays( thisPath, nodePath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn true;\n\n\t\t\tcase 'extension':\n\t\t\t\treturn false;\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < nodePath[ result ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/view/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisAfter( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// In other cases, just check if the `node` is before, and return the opposite.\n\t\treturn !this.isBefore( node );\n\t}\n\n\t/**\n\t * Removes node from parent.\n\t *\n\t * @protected\n\t */\n\t_remove() {\n\t\tthis.parent._removeChildren( this.index );\n\t}\n\n\t/**\n\t * @protected\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Changed node.\n\t * @fires change\n\t */\n\t_fireChange( type, node ) {\n\t\tthis.fire( 'change:' + type, node );\n\n\t\tif ( this.parent ) {\n\t\t\tthis.parent._fireChange( type, node );\n\t\t}\n\t}\n\n\t/**\n\t * Custom toJSON method to solve child-parent circular dependencies.\n\t *\n\t * @returns {Object} Clone of this object with the parent property removed.\n\t */\n\ttoJSON() {\n\t\tconst json = clone( this );\n\n\t\t// Due to circular references we need to remove parent reference.\n\t\tdelete json.parent;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Checks whether given view tree object is of given type.\n\t *\n\t * This method is useful when processing view tree objects that are of unknown type. For example, a function\n\t * may return {@link module:engine/view/documentfragment~DocumentFragment} or {@link module:engine/view/node~Node}\n\t * that can be either text node or element. This method can be used to check what kind of object is returned.\n\t *\n\t *\t\tobj.is( 'node' ); // true for any node, false for document fragment and text fragment\n\t *\t\tobj.is( 'documentFragment' ); // true for document fragment, false for any node\n\t *\t\tobj.is( 'element' ); // true for any element, false for text node or document fragment\n\t *\t\tobj.is( 'element', 'p' ); // true only for element which name is 'p'\n\t *\t\tobj.is( 'p' ); // shortcut for obj.is( 'element', 'p' )\n\t *\t\tobj.is( 'text' ); // true for text node, false for element and document fragment\n\t *\n\t * @method #is\n\t * @param {'element'|'containerElement'|'attributeElement'|'emptyElement'|'uiElement'|\n\t * 'rootElement'|'documentFragment'|'text'|'textProxy'} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'node';\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @method #_clone\n\t * @returns {module:engine/view/node~Node} Clone of this node.\n\t */\n\n\t/**\n\t * Checks if provided node is similar to this node.\n\t *\n\t * @method #isSimilar\n\t * @returns {Boolean} True if nodes are similar.\n\t */\n}\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} children changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:children\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} attributes changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:attributes\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when {@link module:engine/view/text~Text text nodes} data changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:text\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * @event change\n */\n\nmix( Node, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/text\n */\n\nimport Node from './node';\n\n/**\n * Tree view text node.\n *\n * The constructor of this class shouldn't be used directly. To create new Text instances\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a tree view text node.\n\t *\n\t * @protected\n\t * @param {String} data The text's data.\n\t */\n\tconstructor( data ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The text content.\n\t\t *\n\t\t * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t\t *\n\t\t * @protected\n\t\t * @member {String} module:engine/view/text~Text#_textData\n\t\t */\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type ) {\n\t\treturn type == 'text' || super.is( type );\n\t}\n\n\t/**\n\t * The text content.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._textData;\n\t}\n\n\t/**\n\t * This getter is required when using the addition assignment operator on protected property:\n\t *\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst bar = downcastWriter.createText( 'bar' );\n\t *\n\t *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n\t *\t\tconsole.log( foo.data ); // prints: 'foobar'\n\t *\n\t * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n\t *\n\t * @protected\n\t * @type {String}\n\t */\n\tget _data() {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t *\n\t * @protected\n\t * @fires change:text\n\t * @param {String} data New data for the text node.\n\t */\n\tset _data( data ) {\n\t\tthis._fireChange( 'text', this );\n\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks if this text node is similar to other text node.\n\t * Both nodes should have the same data to be considered as similar.\n\t *\n\t * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherNode ) {\n\t\tif ( !( otherNode instanceof Text ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this === otherNode || this.data === otherNode.data;\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n\t */\n\t_clone() {\n\t\treturn new Text( this.data );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/textproxy\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * TextProxy is a wrapper for substring of {@link module:engine/view/text~Text}. Instance of this class is created by\n * {@link module:engine/view/treewalker~TreeWalker} when only a part of {@link module:engine/view/text~Text} needs to be returned.\n *\n * `TextProxy` has an API similar to {@link module:engine/view/text~Text Text} and allows to do most of the common tasks performed\n * on view nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/view/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is a readonly interface.\n *\n * **Note:** `TextProxy` instances are created on the fly basing on the current state of parent {@link module:engine/view/text~Text}.\n * Because of this it is highly unrecommended to store references to `TextProxy instances because they might get\n * invalidated due to operations on Document. Also TextProxy is not a {@link module:engine/view/node~Node} so it can not be\n * inserted as a child of {@link module:engine/view/element~Element}.\n *\n * `TextProxy` instances are created by {@link module:engine/view/treewalker~TreeWalker view tree walker}. You should not need to create\n * an instance of this class by your own.\n */\nexport default class TextProxy {\n\t/**\n\t * Creates a text proxy.\n\t *\n\t * @protected\n\t * @param {module:engine/view/text~Text} textNode Text node which part is represented by this text proxy.\n\t * @param {Number} offsetInText Offset in {@link module:engine/view/textproxy~TextProxy#textNode text node}\n\t * from which the text proxy starts.\n\t * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n\t * @constructor\n\t */\n\tconstructor( textNode, offsetInText, length ) {\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/text~Text} element which TextProxy is a substring.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/text~Text} module:engine/view/textproxy~TextProxy#textNode\n\t\t */\n\t\tthis.textNode = textNode;\n\n\t\tif ( offsetInText < 0 || offsetInText > textNode.data.length ) {\n\t\t\t/**\n\t\t\t * Given offsetInText value is incorrect.\n\t\t\t *\n\t\t\t * @error view-textproxy-wrong-offsetintext\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.' );\n\t\t}\n\n\t\tif ( length < 0 || offsetInText + length > textNode.data.length ) {\n\t\t\t/**\n\t\t\t * Given length value is incorrect.\n\t\t\t *\n\t\t\t * @error view-textproxy-wrong-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-textproxy-wrong-length: Given length value is incorrect.' );\n\t\t}\n\n\t\t/**\n\t\t * Text data represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:engine/view/textproxy~TextProxy#data\n\t\t */\n\t\tthis.data = textNode.data.substring( offsetInText, offsetInText + length );\n\n\t\t/**\n\t\t * Offset in the `textNode` where this `TextProxy` instance starts.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} module:engine/view/textproxy~TextProxy#offsetInText\n\t\t */\n\t\tthis.offsetInText = offsetInText;\n\t}\n\n\t/**\n\t * Offset size of this node.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/view/text~Text text node}\n\t * (`true`) or the whole text node (`false`).\n\t *\n\t * This is `false` when text proxy starts at the very beginning of {@link module:engine/view/textproxy~TextProxy#textNode textNode}\n\t * ({@link module:engine/view/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n\t * text node size.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isPartial() {\n\t\treturn this.data.length !== this.textNode.data.length;\n\t}\n\n\t/**\n\t * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tget parent() {\n\t\treturn this.textNode.parent;\n\t}\n\n\t/**\n\t * Root of this text proxy, which is same as root of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.textNode.root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/document~Document View document} that owns this text proxy, or `null` if the text proxy is inside\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this.textNode.document;\n\t}\n\n\t/**\n\t * Checks whether given view tree object is of given type.\n\t *\n\t * Read more in {@link module:engine/view/node~Node#is}.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'textProxy';\n\t}\n\n\t/**\n\t * Returns ancestors array of this text proxy.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` {#textNode} will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to\n\t * root element, otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this.textNode : this.parent;\n\n\t\twhile ( parent !== null ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/objecttomap\n */\n\n/**\n * Transforms object to map.\n *\n *\t\tconst map = objectToMap( { 'foo': 1, 'bar': 2 } );\n *\t\tmap.get( 'foo' ); // 1\n *\n * @param {Object} obj Object to transform.\n * @returns {Map} Map created from object.\n */\nexport default function objectToMap( obj ) {\n\tconst map = new Map();\n\n\tfor ( const key in obj ) {\n\t\tmap.set( key, obj[ key ] );\n\t}\n\n\treturn map;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/isiterable\n */\n\n/**\n * Checks if value implements iterator interface.\n *\n * @param {*} value The value to check.\n * @returns {Boolean} True if value implements iterator interface.\n */\nexport default function isIterable( value ) {\n\treturn !!( value && value[ Symbol.iterator ] );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/matcher\n */\n\n/**\n * View matcher class.\n * Instance of this class can be used to find {@link module:engine/view/element~Element elements} that match given pattern.\n */\nexport default class Matcher {\n\t/**\n\t * Creates new instance of Matcher.\n\t *\n\t * @param {String|RegExp|Object} [pattern] Match patterns. See {@link module:engine/view/matcher~Matcher#add add method} for\n\t * more information.\n\t */\n\tconstructor( ...pattern ) {\n\t\t/**\n\t\t * @private\n\t\t * @type {Array<String|RegExp|Object>}\n\t\t */\n\t\tthis._patterns = [];\n\n\t\tthis.add( ...pattern );\n\t}\n\n\t/**\n\t * Adds pattern or patterns to matcher instance.\n\t *\n\t *\t\t// String.\n\t *\t\tmatcher.add( 'div' );\n\t *\n\t *\t\t// Regular expression.\n\t *\t\tmatcher.add( /^\\w/ );\n\t *\n\t *\t\t// Single class.\n\t *\t\tmatcher.add( {\n\t *\t\t\tclasses: 'foobar'\n\t *\t\t} );\n\t *\n\t * See {@link module:engine/view/matcher~MatcherPattern} for more examples.\n\t *\n\t * Multiple patterns can be added in one call:\n\t *\n\t * \t\tmatcher.add( 'div', { classes: 'foobar' } );\n\t *\n\t * @param {Object|String|RegExp|Function} pattern Object describing pattern details. If string or regular expression\n\t * is provided it will be used to match element's name. Pattern can be also provided in a form\n\t * of a function - then this function will be called with each {@link module:engine/view/element~Element element} as a parameter.\n\t * Function's return value will be stored under `match` key of the object returned from\n\t * {@link module:engine/view/matcher~Matcher#match match} or {@link module:engine/view/matcher~Matcher#matchAll matchAll} methods.\n\t * @param {String|RegExp} [pattern.name] Name or regular expression to match element's name.\n\t * @param {Object} [pattern.attributes] Object with key-value pairs representing attributes to match. Each object key\n\t * represents attribute name. Value under that key can be either:\n\t * * `true` - then attribute is just required (can be empty),\n\t * * a string - then attribute has to be equal, or\n\t * * a regular expression - then attribute has to match the expression.\n\t * @param {String|RegExp|Array} [pattern.classes] Class name or array of class names to match. Each name can be\n\t * provided in a form of string or regular expression.\n\t * @param {Object} [pattern.styles] Object with key-value pairs representing styles to match. Each object key\n\t * represents style name. Value under that key can be either a string or a regular expression and it will be used\n\t * to match style value.\n\t */\n\tadd( ...pattern ) {\n\t\tfor ( let item of pattern ) {\n\t\t\t// String or RegExp pattern is used as element's name.\n\t\t\tif ( typeof item == 'string' || item instanceof RegExp ) {\n\t\t\t\titem = { name: item };\n\t\t\t}\n\n\t\t\t// Single class name/RegExp can be provided.\n\t\t\tif ( item.classes && ( typeof item.classes == 'string' || item.classes instanceof RegExp ) ) {\n\t\t\t\titem.classes = [ item.classes ];\n\t\t\t}\n\n\t\t\tthis._patterns.push( item );\n\t\t}\n\t}\n\n\t/**\n\t * Matches elements for currently stored patterns. Returns match information about first found\n\t * {@link module:engine/view/element~Element element}, otherwise returns `null`.\n\t *\n\t * Example of returned object:\n\t *\n\t *\t\t{\n\t *\t\t\telement: <instance of found element>,\n\t *\t\t\tpattern: <pattern used to match found element>,\n\t *\t\t\tmatch: {\n\t *\t\t\t\tname: true,\n\t *\t\t\t\tattributes: [ 'title', 'href' ],\n\t *\t\t\t\tclasses: [ 'foo' ],\n\t *\t\t\t\tstyles: [ 'color', 'position' ]\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * @see module:engine/view/matcher~Matcher#add\n\t * @see module:engine/view/matcher~Matcher#matchAll\n\t * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\n\t * @returns {Object|null} result\n\t * @returns {module:engine/view/element~Element} result.element Matched view element.\n\t * @returns {Object|String|RegExp|Function} result.pattern Pattern that was used to find matched element.\n\t * @returns {Object} result.match Object representing matched element parts.\n\t * @returns {Boolean} [result.match.name] True if name of the element was matched.\n\t * @returns {Array} [result.match.attributes] Array with matched attribute names.\n\t * @returns {Array} [result.match.classes] Array with matched class names.\n\t * @returns {Array} [result.match.styles] Array with matched style names.\n\t */\n\tmatch( ...element ) {\n\t\tfor ( const singleElement of element ) {\n\t\t\tfor ( const pattern of this._patterns ) {\n\t\t\t\tconst match = isElementMatching( singleElement, pattern );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\telement: singleElement,\n\t\t\t\t\t\tpattern,\n\t\t\t\t\t\tmatch\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Matches elements for currently stored patterns. Returns array of match information with all found\n\t * {@link module:engine/view/element~Element elements}. If no element is found - returns `null`.\n\t *\n\t * @see module:engine/view/matcher~Matcher#add\n\t * @see module:engine/view/matcher~Matcher#match\n\t * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\n\t * @returns {Array.<Object>|null} Array with match information about found elements or `null`. For more information\n\t * see {@link module:engine/view/matcher~Matcher#match match method} description.\n\t */\n\tmatchAll( ...element ) {\n\t\tconst results = [];\n\n\t\tfor ( const singleElement of element ) {\n\t\t\tfor ( const pattern of this._patterns ) {\n\t\t\t\tconst match = isElementMatching( singleElement, pattern );\n\n\t\t\t\tif ( match ) {\n\t\t\t\t\tresults.push( {\n\t\t\t\t\t\telement: singleElement,\n\t\t\t\t\t\tpattern,\n\t\t\t\t\t\tmatch\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn results.length > 0 ? results : null;\n\t}\n\n\t/**\n\t * Returns the name of the element to match if there is exactly one pattern added to the matcher instance\n\t * and it matches element name defined by `string` (not `RegExp`). Otherwise, returns `null`.\n\t *\n\t * @returns {String|null} Element name trying to match.\n\t */\n\tgetElementName() {\n\t\tif ( this._patterns.length !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst pattern = this._patterns[ 0 ];\n\t\tconst name = pattern.name;\n\n\t\treturn ( typeof pattern != 'function' && name && !( name instanceof RegExp ) ) ? name : null;\n\t}\n}\n\n// Returns match information if {@link module:engine/view/element~Element element} is matching provided pattern.\n// If element cannot be matched to provided pattern - returns `null`.\n//\n// @param {module:engine/view/element~Element} element\n// @param {Object|String|RegExp|Function} pattern\n// @returns {Object|null} Returns object with match information or null if element is not matching.\nfunction isElementMatching( element, pattern ) {\n\t// If pattern is provided as function - return result of that function;\n\tif ( typeof pattern == 'function' ) {\n\t\treturn pattern( element );\n\t}\n\n\tconst match = {};\n\t// Check element's name.\n\tif ( pattern.name ) {\n\t\tmatch.name = matchName( pattern.name, element.name );\n\n\t\tif ( !match.name ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Check element's attributes.\n\tif ( pattern.attributes ) {\n\t\tmatch.attributes = matchAttributes( pattern.attributes, element );\n\n\t\tif ( !match.attributes ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Check element's classes.\n\tif ( pattern.classes ) {\n\t\tmatch.classes = matchClasses( pattern.classes, element );\n\n\t\tif ( !match.classes ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Check element's styles.\n\tif ( pattern.styles ) {\n\t\tmatch.styles = matchStyles( pattern.styles, element );\n\n\t\tif ( !match.styles ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if name can be matched by provided pattern.\n//\n// @param {String|RegExp} pattern\n// @param {String} name\n// @returns {Boolean} Returns `true` if name can be matched, `false` otherwise.\nfunction matchName( pattern, name ) {\n\t// If pattern is provided as RegExp - test against this regexp.\n\tif ( pattern instanceof RegExp ) {\n\t\treturn pattern.test( name );\n\t}\n\n\treturn pattern === name;\n}\n\n// Checks if attributes of provided element can be matched against provided patterns.\n//\n// @param {Object} patterns Object with information about attributes to match. Each key of the object will be\n// used as attribute name. Value of each key can be a string or regular expression to match against attribute value.\n// @param {module:engine/view/element~Element} element Element which attributes will be tested.\n// @returns {Array|null} Returns array with matched attribute names or `null` if no attributes were matched.\nfunction matchAttributes( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const name in patterns ) {\n\t\tconst pattern = patterns[ name ];\n\n\t\tif ( element.hasAttribute( name ) ) {\n\t\t\tconst attribute = element.getAttribute( name );\n\n\t\t\tif ( pattern === true ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else if ( pattern instanceof RegExp ) {\n\t\t\t\tif ( pattern.test( attribute ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else if ( attribute === pattern ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if classes of provided element can be matched against provided patterns.\n//\n// @param {Array.<String|RegExp>} patterns Array of strings or regular expressions to match against element's classes.\n// @param {module:engine/view/element~Element} element Element which classes will be tested.\n// @returns {Array|null} Returns array with matched class names or `null` if no classes were matched.\nfunction matchClasses( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const pattern of patterns ) {\n\t\tif ( pattern instanceof RegExp ) {\n\t\t\tconst classes = element.getClassNames();\n\n\t\t\tfor ( const name of classes ) {\n\t\t\t\tif ( pattern.test( name ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( match.length === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else if ( element.hasClass( pattern ) ) {\n\t\t\tmatch.push( pattern );\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n// Checks if styles of provided element can be matched against provided patterns.\n//\n// @param {Object} patterns Object with information about styles to match. Each key of the object will be\n// used as style name. Value of each key can be a string or regular expression to match against style value.\n// @param {module:engine/view/element~Element} element Element which styles will be tested.\n// @returns {Array|null} Returns array with matched style names or `null` if no styles were matched.\nfunction matchStyles( patterns, element ) {\n\tconst match = [];\n\n\tfor ( const name in patterns ) {\n\t\tconst pattern = patterns[ name ];\n\n\t\tif ( element.hasStyle( name ) ) {\n\t\t\tconst style = element.getStyle( name );\n\n\t\t\tif ( pattern instanceof RegExp ) {\n\t\t\t\tif ( pattern.test( style ) ) {\n\t\t\t\t\tmatch.push( name );\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else if ( style === pattern ) {\n\t\t\t\tmatch.push( name );\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn match;\n}\n\n/**\n * An entity that is a valid pattern recognized by a matcher. `MatcherPattern` is used by {@link ~Matcher} to recognize\n * if a view element fits in a group of view elements described by the pattern.\n *\n * `MatcherPattern` can be given as a `String`, a `RegExp`, an `Object` or a `Function`.\n *\n * If `MatcherPattern` is given as a `String` or `RegExp`, it will match any view element that has a matching name:\n *\n *\t\t// Match any element with name equal to 'div'.\n *\t\tconst pattern = 'div';\n *\n *\t\t// Match any element which name starts on 'p'.\n *\t\tconst pattern = /^p/;\n *\n * If `MatcherPattern` is given as an `Object`, all the object's properties will be matched with view element properties.\n *\n *\t\t// Match view element's name.\n *\t\tconst pattern = { name: /^p/ };\n *\n *\t\t// Match view element which has matching attributes.\n *\t\tconst pattern = {\n *\t\t\tattributes: {\n *\t\t\t\ttitle: 'foobar',\t// Attribute title should equal 'foobar'.\n *\t\t\t\tfoo: /^\\w+/,\t\t// Attribute foo should match /^\\w+/ regexp.\n *\t\t\t\tbar: true\t\t\t// Attribute bar should be set (can be empty).\n *\t\t\t}\n *\t\t};\n *\n *\t\t// Match view element which has given class.\n *\t\tconst pattern = {\n *\t\t\tclasses: 'foobar'\n *\t\t};\n *\n *\t\t// Match view element class using regular expression.\n *\t\tconst pattern = {\n *\t\t\tclasses: /foo.../\n *\t\t};\n *\n *\t\t// Multiple classes to match.\n *\t\tconst pattern = {\n *\t\t\tclasses: [ 'baz', 'bar', /foo.../ ]\n *\t\t};\n *\n *\t\t// Match view element which has given styles.\n *\t\tconst pattern = {\n *\t\t\tstyles: {\n *\t\t\t\tposition: 'absolute',\n *\t\t\t\tcolor: /^\\w*blue$/\n *\t\t\t}\n *\t\t};\n *\n *\t\t// Pattern with multiple properties.\n *\t\tconst pattern = {\n *\t\t\tname: 'span',\n *\t\t\tstyles: {\n *\t\t\t\t'font-weight': 'bold'\n *\t\t\t},\n *\t\t\tclasses: 'highlighted'\n *\t\t};\n *\n * If `MatcherPattern` is given as a `Function`, the function takes a view element as a first and only parameter and\n * the function should decide whether that element matches. If so, it should return what part of the view element has been matched.\n * Otherwise, the function should return `null`. The returned result will be included in `match` property of the object\n * returned by {@link ~Matcher#match} call.\n *\n *\t\t// Match an empty <div> element.\n *\t\tconst pattern = element => {\n *\t\t\tif ( element.name == 'div' && element.childCount > 0 ) {\n *\t\t\t\t// Return which part of the element was matched.\n *\t\t\t\treturn { name: true };\n *\t\t\t}\n *\n *\t\t\treturn null;\n *\t\t};\n *\n *\t\t// Match a <p> element with big font (\"heading-like\" element).\n *\t\tconst pattern = element => {\n *\t\t\tif ( element.name == 'p' ) {\n *\t\t\t\tconst fontSize = element.getStyle( 'font-size' );\n *\t\t\t\tconst size = fontSize.match( /(\\d+)/px );\n *\n *\t\t\t\tif ( size && Number( size[ 1 ] ) > 26 ) {\n *\t\t\t\t\treturn { name: true, attribute: [ 'font-size' ] };\n *\t\t\t\t}\n *\t\t\t}\n *\n *\t\t\treturn null;\n *\t\t};\n *\n * `MatcherPattern` is defined in a way that it is a superset of {@link module:engine/view/elementdefinition~ElementDefinition},\n * that is, every `ElementDefinition` also can be used as a `MatcherPattern`.\n *\n * @typedef {String|RegExp|Object|Function} module:engine/view/matcher~MatcherPattern\n *\n * @property {String|RegExp} [name] View element name to match.\n * @property {String|RegExp|Array.<String|RegExp>} [classes] View element's class name(s) to match.\n * @property {Object} [styles] Object with key-value pairs representing styles to match.\n * Each object key represents style name. Value can be given as `String` or `RegExp`.\n * @property {Object} [attributes] Object with key-value pairs representing attributes to match.\n * Each object key represents attribute name. Value can be given as `String` or `RegExp`.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/element\n */\n\nimport Node from './node';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport objectToMap from '@ckeditor/ckeditor5-utils/src/objecttomap';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Matcher from './matcher';\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * View element.\n *\n * The editing engine does not define a fixed semantics of its elements (it is \"DTD-free\").\n * This is why the type of the {@link module:engine/view/element~Element} need to\n * be defined by the feature developer. When creating an element you should use one of the following methods:\n *\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `downcastWriter#createContainerElement()`}\n * in order to create a {@link module:engine/view/containerelement~ContainerElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `downcastWriter#createAttributeElement()`}\n * in order to create a {@link module:engine/view/attributeelement~AttributeElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`}\n * in order to create a {@link module:engine/view/emptyelement~EmptyElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}\n * in order to create a {@link module:engine/view/uielement~UIElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`}\n * in order to create a {@link module:engine/view/editableelement~EditableElement}.\n *\n * Note that for view elements which are not created from the model, like elements from mutations, paste or\n * {@link module:engine/controller/datacontroller~DataController#set data.set} it is not possible to define the type of the element.\n * In such cases the {@link module:engine/view/upcastwriter~UpcastWriter#createElement `UpcastWriter#createElement()`} method\n * should be used to create generic view elements.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Element extends Node {\n\t/**\n\t * Creates a view element.\n\t *\n\t * Attributes can be passed in various formats:\n\t *\n\t *\t\tnew Element( 'div', { class: 'editor', contentEditable: 'true' } ); // object\n\t *\t\tnew Element( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n\t *\t\tnew Element( 'div', mapOfAttributes ); // map\n\t *\n\t * @protected\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attrs] Collection of attributes.\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into created element.\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Name of the element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Map of attributes, where attributes names are keys and attributes values are values.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map} #_attrs\n\t\t */\n\t\tthis._attrs = parseAttributes( attrs );\n\n\t\t/**\n\t\t * Array of child nodes.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis._children = [];\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\n\t\t/**\n\t\t * Set of classes associated with element instance.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set}\n\t\t */\n\t\tthis._classes = new Set();\n\n\t\tif ( this._attrs.has( 'class' ) ) {\n\t\t\t// Remove class attribute and handle it by class set.\n\t\t\tconst classString = this._attrs.get( 'class' );\n\t\t\tparseClasses( this._classes, classString );\n\t\t\tthis._attrs.delete( 'class' );\n\t\t}\n\n\t\t/**\n\t\t * Map of styles.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map} module:engine/view/element~Element#_styles\n\t\t */\n\t\tthis._styles = new Map();\n\n\t\tif ( this._attrs.has( 'style' ) ) {\n\t\t\t// Remove style attribute and handle it by styles map.\n\t\t\tparseInlineStyles( this._styles, this._attrs.get( 'style' ) );\n\t\t\tthis._attrs.delete( 'style' );\n\t\t}\n\n\t\t/**\n\t\t * Map of custom properties.\n\t\t * Custom properties can be added to element instance, will be cloned but not rendered into DOM.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map}\n\t\t */\n\t\tthis._customProperties = new Map();\n\t}\n\n\t/**\n\t * Number of element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this element, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this._children.length === 0;\n\t}\n\n\t/**\n\t * Checks whether given view tree object is of given type.\n\t *\n\t * Read more in {@link module:engine/view/node~Node#is}.\n\t *\n\t * @param {String} type\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'element' || type == this.name || super.is( type );\n\t\t} else {\n\t\t\treturn type == 'element' && name == this.name;\n\t\t}\n\t}\n\n\t/**\n\t * Gets child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/view/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children[ index ];\n\t}\n\n\t/**\n\t * Gets index of the given child node. Returns `-1` if child node is not found.\n\t *\n\t * @param {module:engine/view/node~Node} node Child node.\n\t * @returns {Number} Index of the child node.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.indexOf( node );\n\t}\n\n\t/**\n\t * Gets child nodes iterator.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an iterator that contains the keys for attributes. Order of inserting attributes is not preserved.\n\t *\n\t * @returns {Iterable.<String>} Keys for attributes.\n\t */\n\t* getAttributeKeys() {\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield 'class';\n\t\t}\n\n\t\tif ( this._styles.size > 0 ) {\n\t\t\tyield 'style';\n\t\t}\n\n\t\t// This is not an optimal solution because of https://github.com/ckeditor/ckeditor5-engine/issues/454.\n\t\t// It can be simplified to `yield* this._attrs.keys();`.\n\t\tfor ( const key of this._attrs.keys() ) {\n\t\t\tyield key;\n\t\t}\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this element's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getAttributes() {\n\t\tyield* this._attrs.entries();\n\n\t\tif ( this._classes.size > 0 ) {\n\t\t\tyield [ 'class', this.getAttribute( 'class' ) ];\n\t\t}\n\n\t\tif ( this._styles.size > 0 ) {\n\t\t\tyield [ 'style', this.getAttribute( 'style' ) ];\n\t\t}\n\t}\n\n\t/**\n\t * Gets attribute by key. If attribute is not present - returns undefined.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {String|undefined} Attribute value.\n\t */\n\tgetAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\treturn [ ...this._classes ].join( ' ' );\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\tif ( this._styles.size > 0 ) {\n\t\t\t\tlet styleString = '';\n\n\t\t\t\tfor ( const [ property, value ] of this._styles ) {\n\t\t\t\t\tstyleString += `${ property }:${ value };`;\n\t\t\t\t}\n\n\t\t\t\treturn styleString;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns a boolean indicating whether an attribute with the specified key exists in the element.\n\t *\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} `true` if attribute with the specified key exists in the element, false otherwise.\n\t */\n\thasAttribute( key ) {\n\t\tif ( key == 'class' ) {\n\t\t\treturn this._classes.size > 0;\n\t\t}\n\n\t\tif ( key == 'style' ) {\n\t\t\treturn this._styles.size > 0;\n\t\t}\n\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t * Both elements should have the same name and attributes to be considered as similar. Two similar elements\n\t * can contain different set of children nodes.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\tif ( !( otherElement instanceof Element ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If exactly the same Element is provided - return true immediately.\n\t\tif ( this === otherElement ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check element name.\n\t\tif ( this.name != otherElement.name ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check number of attributes, classes and styles.\n\t\tif ( this._attrs.size !== otherElement._attrs.size || this._classes.size !== otherElement._classes.size ||\n\t\t\tthis._styles.size !== otherElement._styles.size ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes are the same.\n\t\tfor ( const [ key, value ] of this._attrs ) {\n\t\t\tif ( !otherElement._attrs.has( key ) || otherElement._attrs.get( key ) !== value ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if classes are the same.\n\t\tfor ( const className of this._classes ) {\n\t\t\tif ( !otherElement._classes.has( className ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles are the same.\n\t\tfor ( const [ property, value ] of this._styles ) {\n\t\t\tif ( !otherElement._styles.has( property ) || otherElement._styles.get( property ) !== value ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns true if class is present.\n\t * If more then one class is provided - returns true only when all classes are present.\n\t *\n\t *\t\telement.hasClass( 'foo' ); // Returns true if 'foo' class is present.\n\t *\t\telement.hasClass( 'foo', 'bar' ); // Returns true if 'foo' and 'bar' classes are both present.\n\t *\n\t * @param {...String} className\n\t */\n\thasClass( ...className ) {\n\t\tfor ( const name of className ) {\n\t\t\tif ( !this._classes.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns iterator that contains all class names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetClassNames() {\n\t\treturn this._classes.keys();\n\t}\n\n\t/**\n\t * Returns style value for given property.\n\t * Undefined is returned if style does not exist.\n\t *\n\t * @param {String} property\n\t * @returns {String|undefined}\n\t */\n\tgetStyle( property ) {\n\t\treturn this._styles.get( property );\n\t}\n\n\t/**\n\t * Returns iterator that contains all style names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetStyleNames() {\n\t\treturn this._styles.keys();\n\t}\n\n\t/**\n\t * Returns true if style keys are present.\n\t * If more then one style property is provided - returns true only when all properties are present.\n\t *\n\t *\t\telement.hasStyle( 'color' ); // Returns true if 'border-top' style is present.\n\t *\t\telement.hasStyle( 'color', 'border-top' ); // Returns true if 'color' and 'border-top' styles are both present.\n\t *\n\t * @param {...String} property\n\t */\n\thasStyle( ...property ) {\n\t\tfor ( const name of property ) {\n\t\t\tif ( !this._styles.has( name ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns ancestor element that match specified pattern.\n\t * Provided patterns should be compatible with {@link module:engine/view/matcher~Matcher Matcher} as it is used internally.\n\t *\n\t * @see module:engine/view/matcher~Matcher\n\t * @param {Object|String|RegExp|Function} patterns Patterns used to match correct ancestor.\n\t * See {@link module:engine/view/matcher~Matcher}.\n\t * @returns {module:engine/view/element~Element|null} Found element or `null` if no matching ancestor was found.\n\t */\n\tfindAncestor( ...patterns ) {\n\t\tconst matcher = new Matcher( ...patterns );\n\t\tlet parent = this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( matcher.match( parent ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the custom property value for the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @returns {*}\n\t */\n\tgetCustomProperty( key ) {\n\t\treturn this._customProperties.get( key );\n\t}\n\n\t/**\n\t * Returns an iterator which iterates over this element's custom properties.\n\t * Iterator provides `[ key, value ]` pairs for each stored property.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t* getCustomProperties() {\n\t\tyield* this._customProperties.entries();\n\t}\n\n\t/**\n\t * Returns identity string based on element's name, styles, classes and other attributes.\n\t * Two elements that {@link #isSimilar are similar} will have same identity string.\n\t * It has the following format:\n\t *\n\t *\t\t'name class=\"class1,class2\" style=\"style1:value1;style2:value2\" attr1=\"val1\" attr2=\"val2\"'\n \t *\n\t * For example:\n\t *\n\t *\t\tconst element = writer.createContainerElement( 'foo', {\n\t *\t\t\tbanana: '10',\n\t *\t\t\tapple: '20',\n\t *\t\t\tstyle: 'color: red; border-color: white;',\n\t *\t\t\tclass: 'baz'\n\t *\t\t} );\n\t *\n\t *\t\t// returns 'foo class=\"baz\" style=\"border-color:white;color:red\" apple=\"20\" banana=\"10\"'\n\t *\t\telement.getIdentity();\n\t *\n\t * NOTE: Classes, styles and other attributes are sorted alphabetically.\n\t *\n\t * @returns {String}\n\t */\n\tgetIdentity() {\n\t\tconst classes = Array.from( this._classes ).sort().join( ',' );\n\t\tconst styles = Array.from( this._styles ).map( i => `${ i[ 0 ] }:${ i[ 1 ] }` ).sort().join( ';' );\n\t\tconst attributes = Array.from( this._attrs ).map( i => `${ i[ 0 ] }=\"${ i[ 1 ] }\"` ).sort().join( ' ' );\n\n\t\treturn this.name +\n\t\t\t( classes == '' ? '' : ` class=\"${ classes }\"` ) +\n\t\t\t( styles == '' ? '' : ` style=\"${ styles }\"` ) +\n\t\t\t( attributes == '' ? '' : ` ${ attributes }` );\n\t}\n\n\t/**\n\t * Clones provided element.\n\t *\n\t * @protected\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/element~Element} Clone of this element.\n\t */\n\t_clone( deep = false ) {\n\t\tconst childrenClone = [];\n\n\t\tif ( deep ) {\n\t\t\tfor ( const child of this.getChildren() ) {\n\t\t\t\tchildrenClone.push( child._clone( deep ) );\n\t\t\t}\n\t\t}\n\n\t\t// ContainerElement and AttributeElement should be also cloned properly.\n\t\tconst cloned = new this.constructor( this.name, this._attrs, childrenClone );\n\n\t\t// Classes and styles are cloned separately - this solution is faster than adding them back to attributes and\n\t\t// parse once again in constructor.\n\t\tcloned._classes = new Set( this._classes );\n\t\tcloned._styles = new Map( this._styles );\n\n\t\t// Clone custom properties.\n\t\tcloned._customProperties = new Map( this._customProperties );\n\n\t\t// Clone filler offset method.\n\t\t// We can't define this method in a prototype because it's behavior which\n\t\t// is changed by e.g. toWidget() function from ckeditor5-widget. Perhaps this should be one of custom props.\n\t\tcloned.getFillerOffset = this.getFillerOffset;\n\n\t\treturn cloned;\n\t}\n\n\t/**\n\t * {@link module:engine/view/element~Element#_insertChild Insert} a child node or a list of child nodes at the end of this node\n\t * and sets the parent of these nodes to this element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#insert\n\t * @protected\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of appended nodes.\n\t */\n\t_appendChild( items ) {\n\t\treturn this._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#insert\n\t * @protected\n\t * @param {Number} index Position where nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\t_insertChild( index, items ) {\n\t\tthis._fireChange( 'children', this );\n\t\tlet count = 0;\n\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\n\t\t\tthis._children.splice( index, 0, node );\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#remove\n\t * @protected\n\t * @param {Number} index Number of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @fires module:engine/view/node~Node#change\n\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tthis._fireChange( 'children', this );\n\n\t\tfor ( let i = index; i < index + howMany; i++ ) {\n\t\t\tthis._children[ i ].parent = null;\n\t\t}\n\n\t\treturn this._children.splice( index, howMany );\n\t}\n\n\t/**\n\t * Adds or overwrite attribute with a specified key and value.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setAttribute\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setAttribute( key, value ) {\n\t\tvalue = String( value );\n\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tif ( key == 'class' ) {\n\t\t\tparseClasses( this._classes, value );\n\t\t} else if ( key == 'style' ) {\n\t\t\tparseInlineStyles( this._styles, value );\n\t\t} else {\n\t\t\tthis._attrs.set( key, value );\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeAttribute\n\t * @protected\n\t * @param {String} key Attribute key.\n\t * @returns {Boolean} Returns true if an attribute existed and has been removed.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\t// Remove class attribute.\n\t\tif ( key == 'class' ) {\n\t\t\tif ( this._classes.size > 0 ) {\n\t\t\t\tthis._classes.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove style attribute.\n\t\tif ( key == 'style' ) {\n\t\t\tif ( this._styles.size > 0 ) {\n\t\t\t\tthis._styles.clear();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove other attributes.\n\t\treturn this._attrs.delete( key );\n\t}\n\n\t/**\n\t * Adds specified class.\n\t *\n\t *\t\telement._addClass( 'foo' ); // Adds 'foo' class.\n\t *\t\telement._addClass( [ 'foo', 'bar' ] ); // Adds 'foo' and 'bar' classes.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#addClass\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_addClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tclassName = Array.isArray( className ) ? className : [ className ];\n\t\tclassName.forEach( name => this._classes.add( name ) );\n\t}\n\n\t/**\n\t * Removes specified class.\n\t *\n\t *\t\telement._removeClass( 'foo' );  // Removes 'foo' class.\n\t *\t\telement._removeClass( [ 'foo', 'bar' ] ); // Removes both 'foo' and 'bar' classes.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeClass\n\t * @protected\n\t * @param {Array.<String>|String} className\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeClass( className ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tclassName = Array.isArray( className ) ? className : [ className ];\n\t\tclassName.forEach( name => this._classes.delete( name ) );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\telement._setStyle( 'color', 'red' );\n\t *\t\telement._setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t} );\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setStyle\n\t * @protected\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_setStyle( property, value ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tif ( isPlainObject( property ) ) {\n\t\t\tconst keys = Object.keys( property );\n\n\t\t\tfor ( const key of keys ) {\n\t\t\t\tthis._styles.set( key, property[ key ] );\n\t\t\t}\n\t\t} else {\n\t\t\tthis._styles.set( property, value );\n\t\t}\n\t}\n\n\t/**\n\t * Removes specified style.\n\t *\n\t *\t\telement._removeStyle( 'color' );  // Removes 'color' style.\n\t *\t\telement._removeStyle( [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeStyle\n\t * @protected\n\t * @param {Array.<String>|String} property\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_removeStyle( property ) {\n\t\tthis._fireChange( 'attributes', this );\n\n\t\tproperty = Array.isArray( property ) ? property : [ property ];\n\t\tproperty.forEach( name => this._styles.delete( name ) );\n\t}\n\n\t/**\n\t * Sets a custom property. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t */\n\t_setCustomProperty( key, value ) {\n\t\tthis._customProperties.set( key, value );\n\t}\n\n\t/**\n\t * Removes the custom property stored under the given key.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty\n\t * @protected\n\t * @param {String|Symbol} key\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\t_removeCustomProperty( key ) {\n\t\treturn this._customProperties.delete( key );\n\t}\n\n\t/**\n\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t *\n\t * @abstract\n\t * @method module:engine/view/element~Element#getFillerOffset\n\t */\n}\n\n// Parses attributes provided to the element constructor before they are applied to an element. If attributes are passed\n// as an object (instead of `Map`), the object is transformed to the map. Attributes with `null` value are removed.\n// Attributes with non-`String` value are converted to `String`.\n//\n// @param {Object|Map} attrs Attributes to parse.\n// @returns {Map} Parsed attributes.\nfunction parseAttributes( attrs ) {\n\tif ( isPlainObject( attrs ) ) {\n\t\tattrs = objectToMap( attrs );\n\t} else {\n\t\tattrs = new Map( attrs );\n\t}\n\n\tfor ( const [ key, value ] of attrs ) {\n\t\tif ( value === null ) {\n\t\t\tattrs.delete( key );\n\t\t} else if ( typeof value != 'string' ) {\n\t\t\tattrs.set( key, String( value ) );\n\t\t}\n\t}\n\n\treturn attrs;\n}\n\n// Parses inline styles and puts property - value pairs into styles map.\n// Styles map is cleared before insertion.\n//\n// @param {Map.<String, String>} stylesMap Map to insert parsed properties and values.\n// @param {String} stylesString Styles to parse.\nfunction parseInlineStyles( stylesMap, stylesString ) {\n\t// `null` if no quote was found in input string or last found quote was a closing quote. See below.\n\tlet quoteType = null;\n\tlet propertyNameStart = 0;\n\tlet propertyValueStart = 0;\n\tlet propertyName = null;\n\n\tstylesMap.clear();\n\n\t// Do not set anything if input string is empty.\n\tif ( stylesString === '' ) {\n\t\treturn;\n\t}\n\n\t// Fix inline styles that do not end with `;` so they are compatible with algorithm below.\n\tif ( stylesString.charAt( stylesString.length - 1 ) != ';' ) {\n\t\tstylesString = stylesString + ';';\n\t}\n\n\t// Seek the whole string for \"special characters\".\n\tfor ( let i = 0; i < stylesString.length; i++ ) {\n\t\tconst char = stylesString.charAt( i );\n\n\t\tif ( quoteType === null ) {\n\t\t\t// No quote found yet or last found quote was a closing quote.\n\t\t\tswitch ( char ) {\n\t\t\t\tcase ':':\n\t\t\t\t\t// Most of time colon means that property name just ended.\n\t\t\t\t\t// Sometimes however `:` is found inside property value (for example in background image url).\n\t\t\t\t\tif ( !propertyName ) {\n\t\t\t\t\t\t// Treat this as end of property only if property name is not already saved.\n\t\t\t\t\t\t// Save property name.\n\t\t\t\t\t\tpropertyName = stylesString.substr( propertyNameStart, i - propertyNameStart );\n\t\t\t\t\t\t// Save this point as the start of property value.\n\t\t\t\t\t\tpropertyValueStart = i + 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '\"':\n\t\t\t\tcase '\\'':\n\t\t\t\t\t// Opening quote found (this is an opening quote, because `quoteType` is `null`).\n\t\t\t\t\tquoteType = char;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ';': {\n\t\t\t\t\t// Property value just ended.\n\t\t\t\t\t// Use previously stored property value start to obtain property value.\n\t\t\t\t\tconst propertyValue = stylesString.substr( propertyValueStart, i - propertyValueStart );\n\n\t\t\t\t\tif ( propertyName ) {\n\t\t\t\t\t\t// Save parsed part.\n\t\t\t\t\t\tstylesMap.set( propertyName.trim(), propertyValue.trim() );\n\t\t\t\t\t}\n\n\t\t\t\t\tpropertyName = null;\n\n\t\t\t\t\t// Save this point as property name start. Property name starts immediately after previous property value ends.\n\t\t\t\t\tpropertyNameStart = i + 1;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( char === quoteType ) {\n\t\t\t// If a quote char is found and it is a closing quote, mark this fact by `null`-ing `quoteType`.\n\t\t\tquoteType = null;\n\t\t}\n\t}\n}\n\n// Parses class attribute and puts all classes into classes set.\n// Classes set s cleared before insertion.\n//\n// @param {Set.<String>} classesSet Set to insert parsed classes.\n// @param {String} classesString String with classes to parse.\nfunction parseClasses( classesSet, classesString ) {\n\tconst classArray = classesString.split( /\\s+/ );\n\tclassesSet.clear();\n\tclassArray.forEach( name => classesSet.add( name ) );\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/containerelement\n */\n\nimport Element from './element';\n\n/**\n * Containers are elements which define document structure. They define boundaries for\n * {@link module:engine/view/attributeelement~AttributeElement attributes}. They are mostly used for block elements like `<p>` or `<div>`.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * The container element should be your default choice when writing a converter, unless:\n *\n * * this element represents a model text attribute (then use {@link module:engine/view/attributeelement~AttributeElement}),\n * * this is an empty element like `<img>` (then use {@link module:engine/view/emptyelement~EmptyElement}),\n * * this is a root element,\n * * this is a nested editable element (then use  {@link module:engine/view/editableelement~EditableElement}).\n *\n * To create a new container element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `DowncastWriter#createContainerElement()`}\n * method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class ContainerElement extends Element {\n\t/**\n\t * Creates a container element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createContainerElement\n\t * @see module:engine/view/element~Element\n\t * @protected\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'containerElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( type == 'containerElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n}\n\n/**\n * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n *\n * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n */\nexport function getFillerOffset() {\n\tconst children = [ ...this.getChildren() ];\n\tconst lastChild = children[ this.childCount - 1 ];\n\n\t// Block filler is required after a `<br>` if it's the last element in its container. See #1422.\n\tif ( lastChild && lastChild.is( 'element', 'br' ) ) {\n\t\treturn this.childCount;\n\t}\n\n\tfor ( const child of children ) {\n\t\t// If there's any non-UI element – don't render the bogus.\n\t\tif ( !child.is( 'uiElement' ) ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// If there are only UI elements – render the bogus at the end of the element.\n\treturn this.childCount;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/editableelement\n */\n\nimport ContainerElement from './containerelement';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n\nconst documentSymbol = Symbol( 'document' );\n\n/**\n * Editable element which can be a {@link module:engine/view/rooteditableelement~RootEditableElement root}\n * or nested editable area in the editor.\n *\n * Editable is automatically read-only when its {@link module:engine/view/document~Document Document} is read-only.\n *\n * The constructor of this class shouldn't be used directly. To create new `EditableElement` use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`} method.\n *\n * @extends module:engine/view/containerelement~ContainerElement\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditableElement extends ContainerElement {\n\t/**\n\t * Creates an editable element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createEditableElement\n\t * @protected\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Whether the editable is in read-write or read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/editableelement~EditableElement#isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * Whether the editable is focused.\n\t\t *\n\t\t * This property updates when {@link module:engine/view/document~Document#isFocused document.isFocused} or view\n\t\t * selection is changed.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/editableelement~EditableElement#isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * The {@link module:engine/view/document~Document} which is an owner of this root.\n\t\t * Can only by set once.\n\t\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-editableelement-document-already-set`\n\t\t * when document is already set.\n\t\t *\n\t\t * @member {module:engine/view/document~Document} #document\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'editableElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( type == 'editableElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Returns document associated with the editable.\n\t *\n\t * @readonly\n\t * @returns {module:engine/view/document~Document}\n\t */\n\tget document() {\n\t\treturn this.getCustomProperty( documentSymbol );\n\t}\n\n\t/**\n\t * Sets document of this editable element.\n\t *\n\t * @protected\n\t * @param {module:engine/view/document~Document} document\n\t */\n\tset _document( document ) {\n\t\tif ( this.getCustomProperty( documentSymbol ) ) {\n\t\t\t/**\n\t\t\t * View document is already set. It can only be set once.\n\t\t\t *\n\t\t\t * @error view-editableelement-document-already-set\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-editableelement-document-already-set: View document is already set.' );\n\t\t}\n\n\t\tthis._setCustomProperty( documentSymbol, document );\n\n\t\tthis.bind( 'isReadOnly' ).to( document );\n\n\t\tthis.bind( 'isFocused' ).to(\n\t\t\tdocument,\n\t\t\t'isFocused',\n\t\t\tisFocused => isFocused && document.selection.editableElement == this\n\t\t);\n\n\t\t// Update focus state based on selection changes.\n\t\tthis.listenTo( document.selection, 'change', () => {\n\t\t\tthis.isFocused = document.isFocused && document.selection.editableElement == this;\n\t\t} );\n\t}\n}\n\nmix( EditableElement, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/rooteditableelement\n */\n\nimport EditableElement from './editableelement';\n\nconst rootNameSymbol = Symbol( 'rootName' );\n\n/**\n * Class representing a single root in the data view. A root can be either {@link ~RootEditableElement#isReadOnly editable or read-only},\n * but in both cases it is called \"an editable\". Roots can contain other {@link module:engine/view/editableelement~EditableElement\n * editable elements} making them \"nested editables\".\n *\n * @extends module:engine/view/editableelement~EditableElement\n */\nexport default class RootEditableElement extends EditableElement {\n\t/**\n\t * Creates root editable element.\n\t *\n\t * @param {String} name Node name.\n\t */\n\tconstructor( name ) {\n\t\tsuper( name );\n\n\t\t/**\n\t\t * Name of this root inside {@link module:engine/view/document~Document} that is an owner of this root. If no\n\t\t * other name is set, `main` name is used.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.rootName = 'main';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'rootElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( type == 'rootElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\tget rootName() {\n\t\treturn this.getCustomProperty( rootNameSymbol );\n\t}\n\n\tset rootName( rootName ) {\n\t\tthis._setCustomProperty( rootNameSymbol, rootName );\n\t}\n\n\t/**\n\t * Overrides old element name and sets new one.\n\t * This is needed because view roots are created before they are attached to the DOM.\n\t * The name of the root element is temporary at this stage. It has to be changed when the\n\t * view root element is attached to the DOM element.\n\t *\n\t * @protected\n\t * @param {String} name The new name of element.\n\t */\n\tset _name( name ) {\n\t\tthis.name = name;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/treewalker\n */\n\nimport Element from './element';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport Position from './position';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\nexport default class TreeWalker {\n\t/**\n\t * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n\t *\n\t * @constructor\n\t * @param {Object} options Object with configuration.\n\t * @param {module:engine/view/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {module:engine/view/position~Position} [options.startPosition] Starting position.\n\t * @param {'forward'|'backward'} [options.direction='forward'] Walking direction.\n\t * @param {Boolean} [options.singleCharacters=false] Flag indicating whether all characters from\n\t * {@link module:engine/view/text~Text} should be returned as one {@link module:engine/view/text~Text} (`false`) ore one by one as\n\t * {@link module:engine/view/textproxy~TextProxy} (`true`).\n\t * @param {Boolean} [options.shallow=false] Flag indicating whether iterator should enter elements or not. If the\n\t * iterator is shallow child nodes of any iterated node will not be returned along with `elementEnd` tag.\n\t * @param {Boolean} [options.ignoreElementEnd=false] Flag indicating whether iterator should ignore `elementEnd`\n\t * tags. If the option is true walker will not return a parent node of start position. If this option is `true`\n\t * each {@link module:engine/view/element~Element} will be returned once, while if the option is `false` they might be returned\n\t * twice: for `'elementStart'` and `'elementEnd'`.\n\t */\n\tconstructor( options = {} ) {\n\t\tif ( !options.boundaries && !options.startPosition ) {\n\t\t\t/**\n\t\t\t * Neither boundaries nor starting position have been defined.\n\t\t\t *\n\t\t\t * @error view-tree-walker-no-start-position\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.' );\n\t\t}\n\n\t\tif ( options.direction && options.direction != 'forward' && options.direction != 'backward' ) {\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.',\n\t\t\t\t{ direction: options.direction }\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Iterator boundaries.\n\t\t *\n\t\t * When the iterator is walking `'forward'` on the end of boundary or is walking `'backward'`\n\t\t * on the start of boundary, then `{ done: true }` is returned.\n\t\t *\n\t\t * If boundaries are not defined they are set before first and after last child of the root node.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/range~Range} module:engine/view/treewalker~TreeWalker#boundaries\n\t\t */\n\t\tthis.boundaries = options.boundaries || null;\n\n\t\t/**\n\t\t * Iterator position. If start position is not defined then position depends on {@link #direction}. If direction is\n\t\t * `'forward'` position starts form the beginning, when direction is `'backward'` position starts from the end.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position} module:engine/view/treewalker~TreeWalker#position\n\t\t */\n\t\tif ( options.startPosition ) {\n\t\t\tthis.position = Position._createAt( options.startPosition );\n\t\t} else {\n\t\t\tthis.position = Position._createAt( options.boundaries[ options.direction == 'backward' ? 'end' : 'start' ] );\n\t\t}\n\n\t\t/**\n\t\t * Walking direction. Defaults `'forward'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'backward'|'forward'} module:engine/view/treewalker~TreeWalker#direction\n\t\t */\n\t\tthis.direction = options.direction || 'forward';\n\n\t\t/**\n\t\t * Flag indicating whether all characters from {@link module:engine/view/text~Text} should be returned as one\n\t\t * {@link module:engine/view/text~Text} or one by one as {@link module:engine/view/textproxy~TextProxy}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#singleCharacters\n\t\t */\n\t\tthis.singleCharacters = !!options.singleCharacters;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should enter elements or not. If the iterator is shallow child nodes of any\n\t\t * iterated node will not be returned along with `elementEnd` tag.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#shallow\n\t\t */\n\t\tthis.shallow = !!options.shallow;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should ignore `elementEnd` tags. If set to `true`, walker will not\n\t\t * return a parent node of the start position. Each {@link module:engine/view/element~Element} will be returned once.\n\t\t * When set to `false` each element might be returned twice: for `'elementStart'` and `'elementEnd'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/view/treewalker~TreeWalker#ignoreElementEnd\n\t\t */\n\t\tthis.ignoreElementEnd = !!options.ignoreElementEnd;\n\n\t\t/**\n\t\t * Start boundary parent.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/node~Node} module:engine/view/treewalker~TreeWalker#_boundaryStartParent\n\t\t */\n\t\tthis._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n\n\t\t/**\n\t\t * End boundary parent.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/node~Node} module:engine/view/treewalker~TreeWalker#_boundaryEndParent\n\t\t */\n\t\tthis._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n\t *\n\t * For example:\n\t *\n\t * \t\twalker.skip( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n\t * \t\twalker.skip( value => true ); // Move the position to the end: <p>{}foo</p> -> <p>foo</p>[]\n\t * \t\twalker.skip( value => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t */\n\tskip( skip ) {\n\t\tlet done, value, prevPosition;\n\n\t\tdo {\n\t\t\tprevPosition = this.position;\n\n\t\t\t( { done, value } = this.next() );\n\t\t} while ( !done && skip( value ) );\n\n\t\tif ( !done ) {\n\t\t\tthis.position = prevPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the next tree walker's value.\n\t *\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} Object implementing iterator interface, returning\n\t * information about taken step.\n\t */\n\tnext() {\n\t\tif ( this.direction == 'forward' ) {\n\t\t\treturn this._next();\n\t\t} else {\n\t\t\treturn this._previous();\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step forward in view. Moves the {@link #position} to the next position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done `true` if iterator is done, `false` otherwise.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_next() {\n\t\tlet position = this.position.clone();\n\t\tconst previousPosition = this.position;\n\t\tconst parent = position.parent;\n\n\t\t// We are at the end of the root.\n\t\tif ( parent.parent === null && position.offset === parent.childCount ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just after current position.\n\t\tlet node;\n\n\t\t// Text is a specific parent because it contains string instead of child nodes.\n\t\tif ( parent instanceof Text ) {\n\t\t\tif ( position.isAtEnd ) {\n\t\t\t\t// Prevent returning \"elementEnd\" for Text node. Skip that value and return the next walker step.\n\t\t\t\tthis.position = Position._createAfter( parent );\n\n\t\t\t\treturn this._next();\n\t\t\t}\n\n\t\t\tnode = parent.data[ position.offset ];\n\t\t} else {\n\t\t\tnode = parent.getChild( position.offset );\n\t\t}\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition = new Position( node, 0 );\n\t\t\t} else {\n\t\t\t\tposition.offset++;\n\t\t\t}\n\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t} else if ( node instanceof Text ) {\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tposition = new Position( node, 0 );\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\tlet charactersCount = node.data.length;\n\t\t\t\tlet item;\n\n\t\t\t\t// If text stick out of walker range, we need to cut it and wrap by TextProxy.\n\t\t\t\tif ( node == this._boundaryEndParent ) {\n\t\t\t\t\tcharactersCount = this.boundaries.end.offset;\n\t\t\t\t\titem = new TextProxy( node, 0, charactersCount );\n\t\t\t\t\tposition = Position._createAfter( item );\n\t\t\t\t} else {\n\t\t\t\t\titem = new TextProxy( node, 0, node.data.length );\n\t\t\t\t\t// If not just keep moving forward.\n\t\t\t\t\tposition.offset++;\n\t\t\t\t}\n\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t\t}\n\t\t} else if ( typeof node == 'string' ) {\n\t\t\tlet textLength;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\ttextLength = 1;\n\t\t\t} else {\n\t\t\t\t// Check if text stick out of walker range.\n\t\t\t\tconst endOffset = parent === this._boundaryEndParent ? this.boundaries.end.offset : parent.data.length;\n\n\t\t\t\ttextLength = endOffset - position.offset;\n\t\t\t}\n\n\t\t\tconst textProxy = new TextProxy( parent, position.offset, textLength );\n\n\t\t\tposition.offset += textLength;\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'text', textProxy, previousPosition, position, textLength );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the end of current `parent`.\n\t\t\tposition = Position._createAfter( parent );\n\t\t\tthis.position = position;\n\n\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\treturn this._formatReturnValue( 'elementEnd', parent, previousPosition, position );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step backward in view. Moves the {@link #position} to the previous position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_previous() {\n\t\tlet position = this.position.clone();\n\t\tconst previousPosition = this.position;\n\t\tconst parent = position.parent;\n\n\t\t// We are at the beginning of the root.\n\t\tif ( parent.parent === null && position.offset === 0 ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just before current position.\n\t\tlet node;\n\n\t\t// Text {@link module:engine/view/text~Text} element is a specific parent because contains string instead of child nodes.\n\t\tif ( parent instanceof Text ) {\n\t\t\tif ( position.isAtStart ) {\n\t\t\t\t// Prevent returning \"elementStart\" for Text node. Skip that value and return the next walker step.\n\t\t\t\tthis.position = Position._createBefore( parent );\n\n\t\t\t\treturn this._previous();\n\t\t\t}\n\n\t\t\tnode = parent.data[ position.offset - 1 ];\n\t\t} else {\n\t\t\tnode = parent.getChild( position.offset - 1 );\n\t\t}\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition = new Position( node, node.childCount );\n\t\t\t\tthis.position = position;\n\n\t\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\t\treturn this._previous();\n\t\t\t\t} else {\n\t\t\t\t\treturn this._formatReturnValue( 'elementEnd', node, previousPosition, position );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tposition.offset--;\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t\t}\n\t\t} else if ( node instanceof Text ) {\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tposition = new Position( node, node.data.length );\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._previous();\n\t\t\t} else {\n\t\t\t\tlet charactersCount = node.data.length;\n\t\t\t\tlet item;\n\n\t\t\t\t// If text stick out of walker range, we need to cut it and wrap by TextProxy.\n\t\t\t\tif ( node == this._boundaryStartParent ) {\n\t\t\t\t\tconst offset = this.boundaries.start.offset;\n\n\t\t\t\t\titem = new TextProxy( node, offset, node.data.length - offset );\n\t\t\t\t\tcharactersCount = item.data.length;\n\t\t\t\t\tposition = Position._createBefore( item );\n\t\t\t\t} else {\n\t\t\t\t\titem = new TextProxy( node, 0, node.data.length );\n\t\t\t\t\t// If not just keep moving backward.\n\t\t\t\t\tposition.offset--;\n\t\t\t\t}\n\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn this._formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t\t}\n\t\t} else if ( typeof node == 'string' ) {\n\t\t\tlet textLength;\n\n\t\t\tif ( !this.singleCharacters ) {\n\t\t\t\t// Check if text stick out of walker range.\n\t\t\t\tconst startOffset = parent === this._boundaryStartParent ? this.boundaries.start.offset : 0;\n\n\t\t\t\ttextLength = position.offset - startOffset;\n\t\t\t} else {\n\t\t\t\ttextLength = 1;\n\t\t\t}\n\n\t\t\tposition.offset -= textLength;\n\n\t\t\tconst textProxy = new TextProxy( parent, position.offset, textLength );\n\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'text', textProxy, previousPosition, position, textLength );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the beginning of current `parent`.\n\t\t\tposition = Position._createBefore( parent );\n\t\t\tthis.position = position;\n\n\t\t\treturn this._formatReturnValue( 'elementStart', parent, previousPosition, position, 1 );\n\t\t}\n\t}\n\n\t/**\n\t * Format returned data and adjust `previousPosition` and `nextPosition` if reach the bound of the {@link module:engine/view/text~Text}.\n\t *\n\t * @private\n\t * @param {module:engine/view/treewalker~TreeWalkerValueType} type Type of step.\n\t * @param {module:engine/view/item~Item} item Item between old and new position.\n\t * @param {module:engine/view/position~Position} previousPosition Previous position of iterator.\n\t * @param {module:engine/view/position~Position} nextPosition Next position of iterator.\n\t * @param {Number} [length] Length of the item.\n\t * @returns {module:engine/view/treewalker~TreeWalkerValue}\n\t */\n\t_formatReturnValue( type, item, previousPosition, nextPosition, length ) {\n\t\t// Text is a specific parent, because contains string instead of children.\n\t\t// Walker doesn't enter to the Text except situations when walker is iterating over every single character,\n\t\t// or the bound starts/ends inside the Text. So when the position is at the beginning or at the end of the Text\n\t\t// we move it just before or just after Text.\n\t\tif ( item instanceof TextProxy ) {\n\t\t\t// Position is at the end of Text.\n\t\t\tif ( item.offsetInText + item.data.length == item.textNode.data.length ) {\n\t\t\t\tif ( this.direction == 'forward' && !( this.boundaries && this.boundaries.end.isEqual( this.position ) ) ) {\n\t\t\t\t\tnextPosition = Position._createAfter( item.textNode );\n\t\t\t\t\t// When we change nextPosition of returned value we need also update walker current position.\n\t\t\t\t\tthis.position = nextPosition;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousPosition = Position._createAfter( item.textNode );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Position is at the begining ot the text.\n\t\t\tif ( item.offsetInText === 0 ) {\n\t\t\t\tif ( this.direction == 'backward' && !( this.boundaries && this.boundaries.start.isEqual( this.position ) ) ) {\n\t\t\t\t\tnextPosition = Position._createBefore( item.textNode );\n\t\t\t\t\t// When we change nextPosition of returned value we need also update walker current position.\n\t\t\t\t\tthis.position = nextPosition;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousPosition = Position._createBefore( item.textNode );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdone: false,\n\t\t\tvalue: {\n\t\t\t\ttype,\n\t\t\t\titem,\n\t\t\t\tpreviousPosition,\n\t\t\t\tnextPosition,\n\t\t\t\tlength\n\t\t\t}\n\t\t};\n\t}\n}\n\n/**\n * Type of the step made by {@link module:engine/view/treewalker~TreeWalker}.\n * Possible values: `'elementStart'` if walker is at the beginning of a node, `'elementEnd'` if walker is at the end\n * of node, or `'text'` if walker traversed over single and multiple characters.\n * For {@link module:engine/view/text~Text} `elementStart` and `elementEnd` is not returned.\n *\n * @typedef {String} module:engine/view/treewalker~TreeWalkerValueType\n */\n\n/**\n * Object returned by {@link module:engine/view/treewalker~TreeWalker} when traversing tree view.\n *\n * @typedef {Object} module:engine/view/treewalker~TreeWalkerValue\n * @property {module:engine/view/treewalker~TreeWalkerValueType} type\n * @property {module:engine/view/item~Item} item Item between the old and the new positions\n * of the tree walker.\n * @property {module:engine/view/position~Position} previousPosition Previous position of the iterator.\n * * Forward iteration: For `'elementEnd'` it is the last position inside the element. For all other types it is the\n * position before the item.\n * * Backward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after item.\n * * If the position is at the beginning or at the end of the {@link module:engine/view/text~Text} it is always moved from the\n * inside of the text to its parent just before or just after that text.\n * @property {module:engine/view/position~Position} nextPosition Next position of the iterator.\n * * Forward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after the item.\n * * Backward iteration: For `'elementEnd'` it is last position inside element. For all other types it is the position\n * before the item.\n * * If the position is at the beginning or at the end of the {@link module:engine/view/text~Text} it is always moved from the\n * inside of the text to its parent just before or just after that text.\n * @property {Number} [length] Length of the item. For `'elementStart'` it is `1`. For `'text'` it is\n * the length of that text. For `'elementEnd'` it is `undefined`.\n */\n\n/**\n * Tree walking directions.\n *\n * @typedef {'forward'|'backward'} module:engine/view/treewalker~TreeWalkerDirection\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/position\n */\n\nimport TreeWalker from './treewalker';\n\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EditableElement from './editableelement';\n\n/**\n * Position in the view tree. Position is represented by its parent node and an offset in this parent.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@module:engine/view/view~View}\n * * {@module:engine/view/downcastwriter~DowncastWriter}\n * * {@module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Position {\n\t/**\n\t * Creates a position.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} parent Position parent.\n\t * @param {Number} offset Position offset.\n\t */\n\tconstructor( parent, offset ) {\n\t\t/**\n\t\t * Position parent.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t\t * module:engine/view/position~Position#parent\n\t\t */\n\t\tthis.parent = parent;\n\n\t\t/**\n\t\t * Position offset.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} module:engine/view/position~Position#offset\n\t\t */\n\t\tthis.offset = offset;\n\t}\n\n\t/**\n\t * Node directly after the position. Equals `null` when there is no node after position or position is located\n\t * inside text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nodeAfter() {\n\t\tif ( this.parent.is( 'text' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.parent.getChild( this.offset ) || null;\n\t}\n\n\t/**\n\t * Node directly before the position. Equals `null` when there is no node before position or position is located\n\t * inside text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|null}\n\t */\n\tget nodeBefore() {\n\t\tif ( this.parent.is( 'text' ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.parent.getChild( this.offset - 1 ) || null;\n\t}\n\n\t/**\n\t * Is `true` if position is at the beginning of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtStart() {\n\t\treturn this.offset === 0;\n\t}\n\n\t/**\n\t * Is `true` if position is at the end of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtEnd() {\n\t\tconst endOffset = this.parent.is( 'text' ) ? this.parent.data.length : this.parent.childCount;\n\n\t\treturn this.offset === endOffset;\n\t}\n\n\t/**\n\t * Position's root, that is the root of the position's parent element.\n\t *\n\t * @readonly\n\t * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.parent.root;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this position, or `null` if\n\t * position is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\tlet editable = this.parent;\n\n\t\twhile ( !( editable instanceof EditableElement ) ) {\n\t\t\tif ( editable.parent ) {\n\t\t\t\teditable = editable.parent;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\treturn editable;\n\t}\n\n\t/**\n\t * Returns a new instance of Position with offset incremented by `shift` value.\n\t *\n\t * @param {Number} shift How position offset should get changed. Accepts negative values.\n\t * @returns {module:engine/view/position~Position} Shifted position.\n\t */\n\tgetShiftedBy( shift ) {\n\t\tconst shifted = Position._createAt( this );\n\n\t\tconst offset = shifted.offset + shift;\n\t\tshifted.offset = offset < 0 ? 0 : offset;\n\n\t\treturn shifted;\n\t}\n\n\t/**\n\t * Gets the farthest position which matches the callback using\n\t * {@link module:engine/view/treewalker~TreeWalker TreeWalker}.\n\t *\n\t * For example:\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } ); // <p>foo[]</p> -> <p>{}foo</p>\n\t * \t\tgetLastMatchingPosition( value => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t *\n\t * @returns {module:engine/view/position~Position} The position after the last item which matches the `skip` callback test.\n\t */\n\tgetLastMatchingPosition( skip, options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\t\ttreeWalker.skip( skip );\n\n\t\treturn treeWalker.position;\n\t}\n\n\t/**\n\t * Returns ancestors array of this position, that is this position's parent and it's ancestors.\n\t *\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors() {\n\t\tif ( this.parent.is( 'documentFragment' ) ) {\n\t\t\treturn [ this.parent ];\n\t\t} else {\n\t\t\treturn this.parent.getAncestors( { includeSelf: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both positions.\n\t *\n\t * @param {module:engine/view/position~Position} position\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( position ) {\n\t\tconst ancestorsA = this.getAncestors();\n\t\tconst ancestorsB = position.getAncestors();\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Checks whether this position equals given position.\n\t *\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions are same.\n\t */\n\tisEqual( otherPosition ) {\n\t\treturn ( this.parent == otherPosition.parent && this.offset == otherPosition.offset );\n\t}\n\n\t/**\n\t * Checks whether this position is located before given position. When method returns `false` it does not mean that\n\t * this position is after give one. Two positions may be located inside separate roots and in that situation this\n\t * method will still return `false`.\n\t *\n\t * @see module:engine/view/position~Position#isAfter\n\t * @see module:engine/view/position~Position#compareWith\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} Returns `true` if this position is before given position.\n\t */\n\tisBefore( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'before';\n\t}\n\n\t/**\n\t * Checks whether this position is located after given position. When method returns `false` it does not mean that\n\t * this position is before give one. Two positions may be located inside separate roots and in that situation this\n\t * method will still return `false`.\n\t *\n\t * @see module:engine/view/position~Position#isBefore\n\t * @see module:engine/view/position~Position#compareWith\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} Returns `true` if this position is after given position.\n\t */\n\tisAfter( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'after';\n\t}\n\n\t/**\n\t * Checks whether this position is before, after or in same position that other position. Two positions may be also\n\t * different when they are located in separate roots.\n\t *\n\t * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n\t * @returns {module:engine/view/position~PositionRelation}\n\t */\n\tcompareWith( otherPosition ) {\n\t\tif ( this.root !== otherPosition.root ) {\n\t\t\treturn 'different';\n\t\t}\n\n\t\tif ( this.isEqual( otherPosition ) ) {\n\t\t\treturn 'same';\n\t\t}\n\n\t\t// Get path from root to position's parent element.\n\t\tconst thisPath = this.parent.is( 'node' ) ? this.parent.getPath() : [];\n\t\tconst otherPath = otherPosition.parent.is( 'node' ) ? otherPosition.parent.getPath() : [];\n\n\t\t// Add the positions' offsets to the parents offsets.\n\t\tthisPath.push( this.offset );\n\t\totherPath.push( otherPosition.offset );\n\n\t\t// Compare both path arrays to find common ancestor.\n\t\tconst result = compareArrays( thisPath, otherPath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn 'before';\n\n\t\t\tcase 'extension':\n\t\t\t\treturn 'after';\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < otherPath[ result ] ? 'before' : 'after';\n\t\t}\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this positions as a start position.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}\n\t * @param {module:engine/view/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\tclone() {\n\t\treturn new Position( this.parent, this.offset );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link module:engine/view/position~Position._createBefore},\n\t * * {@link module:engine/view/position~Position._createAfter}.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tstatic _createAt( itemOrPosition, offset ) {\n\t\tif ( itemOrPosition instanceof Position ) {\n\t\t\treturn new this( itemOrPosition.parent, itemOrPosition.offset );\n\t\t} else {\n\t\t\tconst node = itemOrPosition;\n\n\t\t\tif ( offset == 'end' ) {\n\t\t\t\toffset = node.is( 'text' ) ? node.data.length : node.childCount;\n\t\t\t} else if ( offset == 'before' ) {\n\t\t\t\treturn this._createBefore( node );\n\t\t\t} else if ( offset == 'after' ) {\n\t\t\t\treturn this._createAfter( node );\n\t\t\t} else if ( offset !== 0 && !offset ) {\n\t\t\t\t/**\n\t\t\t\t * {@link module:engine/view/view~View#createPositionAt `View#createPositionAt()`}\n\t\t\t\t * requires the offset to be specified when the first parameter is a view item.\n\t\t\t\t *\n\t\t\t\t * @error view-createPositionAt-offset-required\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-createPositionAt-offset-required: ' +\n\t\t\t\t\t'View#createPositionAt() requires the offset when the first parameter is a view item.' );\n\t\t\t}\n\n\t\t\treturn new Position( node, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic _createAfter( item ) {\n\t\t// TextProxy is not a instance of Node so we need do handle it in specific way.\n\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\treturn new Position( item.textNode, item.offsetInText + item.data.length );\n\t\t}\n\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position after a root.\n\t\t\t *\n\t\t\t * @error view-position-after-root\n\t\t\t * @param {module:engine/view/node~Node} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-position-after-root: You can not make position after root.', { root: item } );\n\t\t}\n\n\t\treturn new Position( item.parent, item.index + 1 );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tstatic _createBefore( item ) {\n\t\t// TextProxy is not a instance of Node so we need do handle it in specific way.\n\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\treturn new Position( item.textNode, item.offsetInText );\n\t\t}\n\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You cannot make a position before a root.\n\t\t\t *\n\t\t\t * @error view-position-before-root\n\t\t\t * @param {module:engine/view/node~Node} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-position-before-root: You can not make position before root.', { root: item } );\n\t\t}\n\n\t\treturn new Position( item.parent, item.index );\n\t}\n}\n\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/view/position~PositionRelation\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/range\n */\n\nimport Position from './position';\nimport TreeWalker from './treewalker';\n\n/**\n * Range in the view tree. A range is represented by its start and end {@link module:engine/view/position~Position positions}.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@module:engine/view/view~View}\n * * {@module:engine/view/downcastwriter~DowncastWriter}\n * * {@module:engine/view/upcastwriter~UpcastWriter}\n */\nexport default class Range {\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** Constructor creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at the `start` position.\n\t */\n\tconstructor( start, end = null ) {\n\t\t/**\n\t\t * Start position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position}\n\t\t */\n\t\tthis.start = start.clone();\n\n\t\t/**\n\t\t * End position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/position~Position}\n\t\t */\n\t\tthis.end = end ? end.clone() : start.clone();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n\t * them together with additional information like length or {@link module:engine/view/position~Position positions},\n\t * grouped as {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * This iterator uses {@link module:engine/view/treewalker~TreeWalker TreeWalker} with `boundaries` set to this range and\n\t * `ignoreElementEnd` option\n\t * set to `true`.\n\t *\n\t * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tyield* new TreeWalker( { boundaries: this, ignoreElementEnd: true } );\n\t}\n\n\t/**\n\t * Returns whether the range is collapsed, that is it start and end positions are equal.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.start.isEqual( this.end );\n\t}\n\n\t/**\n\t * Returns whether this range is flat, that is if {@link module:engine/view/range~Range#start start} position and\n\t * {@link module:engine/view/range~Range#end end} position are in the same {@link module:engine/view/position~Position#parent parent}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isFlat() {\n\t\treturn this.start.parent === this.end.parent;\n\t}\n\n\t/**\n\t * Range root element.\n\t *\n\t * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.start.root;\n\t}\n\n\t/**\n\t * Creates a maximal range that has the same content as this range but is expanded in both ways (at the beginning\n\t * and at the end).\n\t *\n\t * For example:\n\t *\n\t *\t\t<p>Foo</p><p><b>{Bar}</b></p> -> <p>Foo</p>[<p><b>Bar</b>]</p>\n\t *\t\t<p><b>foo</b>{bar}<span></span></p> -> <p><b>foo[</b>bar<span></span>]</p>\n\t *\n\t * Note that in the sample above:\n\t *\n\t * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n\t * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n\t * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n\t *\n\t * @returns {module:engine/view/range~Range} Enlarged range.\n\t */\n\tgetEnlarged() {\n\t\tlet start = this.start.getLastMatchingPosition( enlargeTrimSkip, { direction: 'backward' } );\n\t\tlet end = this.end.getLastMatchingPosition( enlargeTrimSkip );\n\n\t\t// Fix positions, in case if they are in Text node.\n\t\tif ( start.parent.is( 'text' ) && start.isAtStart ) {\n\t\t\tstart = Position._createBefore( start.parent );\n\t\t}\n\n\t\tif ( end.parent.is( 'text' ) && end.isAtEnd ) {\n\t\t\tend = Position._createAfter( end.parent );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a minimum range that has the same content as this range but is trimmed in both ways (at the beginning\n\t * and at the end).\n\t *\n\t * For example:\n\t *\n\t *\t\t<p>Foo</p>[<p><b>Bar</b>]</p> -> <p>Foo</p><p><b>{Bar}</b></p>\n\t *\t\t<p><b>foo[</b>bar<span></span>]</p> -> <p><b>foo</b>{bar}<span></span></p>\n\t *\n\t * Note that in the sample above:\n\t *\n\t * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n\t * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n\t * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n\t *\n\t * @returns {module:engine/view/range~Range} Shrink range.\n\t */\n\tgetTrimmed() {\n\t\tlet start = this.start.getLastMatchingPosition( enlargeTrimSkip );\n\n\t\tif ( start.isAfter( this.end ) || start.isEqual( this.end ) ) {\n\t\t\treturn new Range( start, start );\n\t\t}\n\n\t\tlet end = this.end.getLastMatchingPosition( enlargeTrimSkip, { direction: 'backward' } );\n\t\tconst nodeAfterStart = start.nodeAfter;\n\t\tconst nodeBeforeEnd = end.nodeBefore;\n\n\t\t// Because TreeWalker prefers positions next to text node, we need to move them manually into these text nodes.\n\t\tif ( nodeAfterStart && nodeAfterStart.is( 'text' ) ) {\n\t\t\tstart = new Position( nodeAfterStart, 0 );\n\t\t}\n\n\t\tif ( nodeBeforeEnd && nodeBeforeEnd.is( 'text' ) ) {\n\t\t\tend = new Position( nodeBeforeEnd, nodeBeforeEnd.data.length );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Two ranges are equal if their start and end positions are equal.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges are equal, `false` otherwise\n\t */\n\tisEqual( otherRange ) {\n\t\treturn this == otherRange || ( this.start.isEqual( otherRange.start ) && this.end.isEqual( otherRange.end ) );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/view/position~Position position}.\n\t *\n\t * @param {module:engine/view/position~Position} position Position to check.\n\t * @returns {Boolean} `true` if given {@link module:engine/view/position~Position position} is contained in this range,\n\t * `false` otherwise.\n\t */\n\tcontainsPosition( position ) {\n\t\treturn position.isAfter( this.start ) && position.isBefore( this.end );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/view/range~Range range}.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to check.\n\t * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n\t * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n\t * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n\t * @returns {Boolean} `true` if given {@link module:engine/view/range~Range range} boundaries are contained by this range, `false`\n\t * otherwise.\n\t */\n\tcontainsRange( otherRange, loose = false ) {\n\t\tif ( otherRange.isCollapsed ) {\n\t\t\tloose = false;\n\t\t}\n\n\t\tconst containsStart = this.containsPosition( otherRange.start ) || ( loose && this.start.isEqual( otherRange.start ) );\n\t\tconst containsEnd = this.containsPosition( otherRange.end ) || ( loose && this.end.isEqual( otherRange.end ) );\n\n\t\treturn containsStart && containsEnd;\n\t}\n\n\t/**\n\t * Computes which part(s) of this {@link module:engine/view/range~Range range} is not a part of given\n\t * {@link module:engine/view/range~Range range}.\n\t * Returned array contains zero, one or two {@link module:engine/view/range~Range ranges}.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet foo = downcastWriter.createText( 'foo' );\n\t *\t\tlet img = downcastWriter.createContainerElement( 'img' );\n\t *\t\tlet bar = downcastWriter.createText( 'bar' );\n\t *\t\tlet p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n\t *\n\t *\t\tlet range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n\t *\t\tlet otherRange = view.createRange( // \"oo\", img, \"ba\" are in range.\n\t *\t\t\tview.createPositionAt( foo, 1 ),\n\t *\t\t\tview.createPositionAt( bar, 2 )\n\t *\t\t);\n\t *\t\tlet transformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has no ranges because `otherRange` contains `range`\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has one range: from ( p, 2 ) to ( bar, 1 )\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( p, 1 ), view.createPositionAt( p, 2 ) ); // img is in range.\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has two ranges: from ( foo, 1 ) to ( p, 1 ) and from ( p, 2 ) to ( bar, 1 )\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to differentiate against.\n\t * @returns {Array.<module:engine/view/range~Range>} The difference between ranges.\n\t */\n\tgetDifference( otherRange ) {\n\t\tconst ranges = [];\n\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect.\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the start to the middle of this range.\n\t\t\t\tranges.push( new Range( this.start, otherRange.start ) );\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the middle of this range to the end.\n\t\t\t\tranges.push( new Range( otherRange.end, this.end ) );\n\t\t\t}\n\t\t} else {\n\t\t\t// Ranges do not intersect, return the original range.\n\t\t\tranges.push( this.clone() );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an intersection of this {@link module:engine/view/range~Range range} and given {@link module:engine/view/range~Range range}.\n\t * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet foo = downcastWriter.createText( 'foo' );\n\t *\t\tlet img = downcastWriter.createContainerElement( 'img' );\n\t *\t\tlet bar = downcastWriter.createText( 'bar' );\n\t *\t\tlet p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n\t *\n\t *\t\tlet range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n\t *\t\tlet otherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n\t *\t\tlet transformed = range.getIntersection( otherRange ); // range from ( foo, 1 ) to ( p, 2 ).\n\t *\n\t *\t\totherRange = view.createRange( view.createPositionAt( bar, 1 ), view.createPositionAt( bar, 3 ); \"ar\" is in range.\n\t *\t\ttransformed = range.getIntersection( otherRange ); // null - no common part.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to check for intersection.\n\t * @returns {module:engine/view/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\n\t */\n\tgetIntersection( otherRange ) {\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect, so a common range will be returned.\n\t\t\t// At most, it will be same as this range.\n\t\t\tlet commonRangeStart = this.start;\n\t\t\tlet commonRangeEnd = this.end;\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means thaNt we have to\n\t\t\t\t// shrink common range to the given range start.\n\t\t\t\tcommonRangeStart = otherRange.start;\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// shrink common range to the given range end.\n\t\t\t\tcommonRangeEnd = otherRange.end;\n\t\t\t}\n\n\t\t\treturn new Range( commonRangeStart, commonRangeEnd );\n\t\t}\n\n\t\t// Ranges do not intersect, so they do not have common part.\n\t\treturn null;\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @param {module:engine/view/position~Position} [options.startPosition]\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t * @returns {module:engine/view/treewalker~TreeWalker}\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n\t * which is a common ancestor of range's both ends (in which the entire range is contained).\n\t *\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor() {\n\t\treturn this.start.getCommonAncestor( this.end );\n\t}\n\n\t/**\n\t * Clones this range.\n\t *\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tclone() {\n\t\treturn new Range( this.start, this.end );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n\t * them.\n\t *\n\t * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n\t * set to `true`. However it returns only {@link module:engine/view/item~Item items},\n\t * not {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/view/item~Item>}\n\t */\n\t* getItems( options = {} ) {\n\t\toptions.boundaries = this;\n\t\toptions.ignoreElementEnd = true;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.item;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/view/position~Position positions} that are boundaries or\n\t * contained in this range.\n\t *\n\t * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n\t * {@link module:engine/view/position~Position positions}, not {@link module:engine/view/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/view/position~Position>}\n\t */\n\t* getPositions( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tyield treeWalker.position;\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.nextPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Checks and returns whether this range intersects with the given range.\n\t *\n\t * @param {module:engine/view/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} True if ranges intersect.\n\t */\n\tisIntersecting( otherRange ) {\n\t\treturn this.start.isBefore( otherRange.end ) && this.end.isAfter( otherRange.start );\n\t}\n\n\t/**\n\t * Creates a range from the given parents and offsets.\n\t *\n\t * @protected\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} startElement Start position\n\t * parent element.\n\t * @param {Number} startOffset Start position offset.\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} endElement End position\n\t * parent element.\n\t * @param {Number} endOffset End position offset.\n\t * @returns {module:engine/view/range~Range} Created range.\n\t */\n\tstatic _createFromParentsAndOffsets( startElement, startOffset, endElement, endOffset ) {\n\t\treturn new this(\n\t\t\tnew Position( startElement, startOffset ),\n\t\t\tnew Position( endElement, endOffset )\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new range, spreading from specified {@link module:engine/view/position~Position position} to a position moved by\n\t * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n\t *\n\t * @protected\n\t * @param {module:engine/view/position~Position} position Beginning of the range.\n\t * @param {Number} shift How long the range should be.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createFromPositionAndShift( position, shift ) {\n\t\tconst start = position;\n\t\tconst end = position.getShiftedBy( shift );\n\n\t\treturn shift > 0 ? new this( start, end ) : new this( end, start );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @protected\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createIn( element ) {\n\t\treturn this._createFromParentsAndOffsets( element, 0, element, element.childCount );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @protected\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tstatic _createOn( item ) {\n\t\tconst size = item.is( 'textProxy' ) ? item.offsetSize : 1;\n\n\t\treturn this._createFromPositionAndShift( Position._createBefore( item ), size );\n\t}\n}\n\n// Function used by getEnlarged and getTrimmed methods.\nfunction enlargeTrimSkip( value ) {\n\tif ( value.item.is( 'attributeElement' ) || value.item.is( 'uiElement' ) ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/count\n */\n\n/**\n * Returns the number of items return by the iterator.\n *\n *\t\tcount( [ 1, 2, 3, 4, 5 ] ); // 5;\n *\n * @param {Iterable.<*>} iterator Any iterator.\n * @returns {Number} Number of items returned by that iterator.\n */\nexport default function count( iterator ) {\n\tlet count = 0;\n\n\tfor ( const _ of iterator ) { // eslint-disable-line no-unused-vars\n\t\tcount++;\n\t}\n\n\treturn count;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/selection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Range from './range';\nimport Position from './position';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport Node from './node';\nimport Element from './element';\nimport count from '@ckeditor/ckeditor5-utils/src/count';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport DocumentSelection from './documentselection';\n\n/**\n * Class representing an arbirtary selection in the view.\n * See also {@link module:engine/view/documentselection~DocumentSelection}.\n *\n * New selection instances can be created via the constructor or one these methods:\n *\n * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n *\n * A selection can consist of {@link module:engine/view/range~Range ranges} that can be set by using\n * the {@link module:engine/view/selection~Selection#setTo `Selection#setTo()`} method.\n */\nexport default class Selection {\n\t/**\n\t * Creates new selection instance.\n\t *\n\t * **Note**: The selection constructor is available as a factory method:\n\t *\n\t * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n\t * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection|\n\t * module:engine/view/position~Position|Iterable.<module:engine/view/range~Range>|module:engine/view/range~Range|\n\t * module:engine/view/item~Item|null} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tconstructor( selectable = null, placeOrOffset, options ) {\n\t\t/**\n\t\t * Stores all ranges that are selected.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/range~Range>}\n\t\t */\n\t\tthis._ranges = [];\n\n\t\t/**\n\t\t * Specifies whether the last added range was added as a backward or forward range.\n\t\t *\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._lastRangeBackward = false;\n\n\t\t/**\n\t\t * Specifies whether selection instance is fake.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._isFake = false;\n\n\t\t/**\n\t\t * Fake selection's label.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._fakeSelectionLabel = '';\n\n\t\tthis.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Returns true if selection instance is marked as `fake`.\n\t *\n\t * @see #setTo\n\t * @returns {Boolean}\n\t */\n\tget isFake() {\n\t\treturn this._isFake;\n\t}\n\n\t/**\n\t * Returns fake selection label.\n\t *\n\t * @see #setTo\n\t * @returns {String}\n\t */\n\tget fakeSelectionLabel() {\n\t\treturn this._fakeSelectionLabel;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n\t * {@link #focus focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n\t * It may be a bit unintuitive when there are multiple ranges in selection.\n\t *\n\t * @see #focus\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget anchor() {\n\t\tif ( !this._ranges.length ) {\n\t\t\treturn null;\n\t\t}\n\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\t\tconst anchor = this._lastRangeBackward ? range.end : range.start;\n\n\t\treturn anchor.clone();\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * @see #anchor\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget focus() {\n\t\tif ( !this._ranges.length ) {\n\t\t\treturn null;\n\t\t}\n\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\t\tconst focus = this._lastRangeBackward ? range.start : range.end;\n\n\t\treturn focus.clone();\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.rangeCount === 1 && this._ranges[ 0 ].isCollapsed;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._ranges.length;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus} precedes {@link #anchor}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn !this.isCollapsed && this._lastRangeBackward;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n\t * if the selection is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\tif ( this.anchor ) {\n\t\t\treturn this.anchor.editableElement;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns an iterable that contains copies of all ranges added to the selection.\n\t *\n\t * @returns {Iterable.<module:engine/view/range~Range>}\n\t */\n\t* getRanges() {\n\t\tfor ( const range of this._ranges ) {\n\t\t\tyield range.clone();\n\t\t}\n\t}\n\n\t/**\n\t * Returns copy of the first range in the selection. First range is the one which\n\t * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n\t * position of all other ranges (not to confuse with the first range added to the selection).\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\tlet first = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !first || range.start.isBefore( first.start ) ) {\n\t\t\t\tfirst = range;\n\t\t\t}\n\t\t}\n\n\t\treturn first ? first.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n\t * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n\t * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\tlet last = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !last || range.end.isAfter( last.end ) ) {\n\t\t\t\tlast = range;\n\t\t\t}\n\t\t}\n\n\t\treturn last ? last.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the first position in the selection. First position is the position that\n\t * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\tconst firstRange = this.getFirstRange();\n\n\t\treturn firstRange ? firstRange.start.clone() : null;\n\t}\n\n\t/**\n\t * Returns copy of the last position in the selection. Last position is the position that\n\t * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\tconst lastRange = this.getLastRange();\n\n\t\treturn lastRange ? lastRange.end.clone() : null;\n\t}\n\n\t/**\n\t * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n\t * same number of ranges and all ranges from one selection equal to a range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\tif ( this.isFake != otherSelection.isFake ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.isFake && this.fakeSelectionLabel != otherSelection.fakeSelectionLabel ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.rangeCount != otherSelection.rangeCount ) {\n\t\t\treturn false;\n\t\t} else if ( this.rangeCount === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const thisRange of this._ranges ) {\n\t\t\tlet found = false;\n\n\t\t\tfor ( const otherRange of otherSelection._ranges ) {\n\t\t\t\tif ( thisRange.isEqual( otherRange ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n\t * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n\t * equal to any trimmed range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are similar, `false` otherwise.\n\t */\n\tisSimilar( otherSelection ) {\n\t\tif ( this.isBackward != otherSelection.isBackward ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst numOfRangesA = count( this.getRanges() );\n\t\tconst numOfRangesB = count( otherSelection.getRanges() );\n\n\t\t// If selections have different number of ranges, they cannot be similar.\n\t\tif ( numOfRangesA != numOfRangesB ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If both selections have no ranges, they are similar.\n\t\tif ( numOfRangesA == 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check if each range in one selection has a similar range in other selection.\n\t\tfor ( let rangeA of this.getRanges() ) {\n\t\t\trangeA = rangeA.getTrimmed();\n\n\t\t\tlet found = false;\n\n\t\t\tfor ( let rangeB of otherSelection.getRanges() ) {\n\t\t\t\trangeB = rangeB.getTrimmed();\n\n\t\t\t\tif ( rangeA.start.isEqual( rangeB.start ) && rangeA.end.isEqual( rangeB.end ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For `rangeA`, neither range in `otherSelection` was similar. So selections are not similar.\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// There were no ranges that weren't matched. Selections are similar.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/view/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\tif ( this.rangeCount !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = this.getFirstRange();\n\t\tconst nodeAfterStart = range.start.nodeAfter;\n\t\tconst nodeBeforeEnd = range.end.nodeBefore;\n\n\t\treturn ( nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ) ? nodeAfterStart : null;\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/view/documentselection~DocumentSelection document selection},\n\t * {@link module:engine/view/selection~Selection selection}, {@link module:engine/view/position~Position position},\n\t * {@link module:engine/view/item~Item item}, {@link module:engine/view/range~Range range},\n\t * an iterable of {@link module:engine/view/range~Range ranges} or null.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tselection.setTo( otherSelection );\n\t *\n\t *\t \t// Sets selection to contents of DocumentSelection.\n\t *\t\tselection.setTo( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, path );\n\t *\t\tselection.setTo( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tselection.setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t *\t\tselection.setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tselection.setTo( paragraph, 'on' );\n\t *\n\t * \t\t// Clears selection. Removes all ranges.\n\t *\t\tselection.setTo( null );\n\t *\n\t * `Selection#setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\tselection.setTo( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tselection.setTo( range, { fake: true, label: 'foo' } );\n\t *\n\t * @fires change\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection|\n\t * module:engine/view/position~Position|Iterable.<module:engine/view/range~Range>|module:engine/view/range~Range|\n\t * module:engine/view/item~Item|null} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tsetTo( selectable, placeOrOffset, options ) {\n\t\tif ( selectable === null ) {\n\t\t\tthis._setRanges( [] );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Selection || selectable instanceof DocumentSelection ) {\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t\tthis._setFakeOptions( { fake: selectable.isFake, label: selectable.fakeSelectionLabel } );\n\t\t} else if ( selectable instanceof Range ) {\n\t\t\tthis._setRanges( [ selectable ], placeOrOffset && placeOrOffset.backward );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Position ) {\n\t\t\tthis._setRanges( [ new Range( selectable ) ] );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else if ( selectable instanceof Node ) {\n\t\t\tconst backward = !!options && !!options.backward;\n\t\t\tlet range;\n\n\t\t\tif ( placeOrOffset === undefined ) {\n\t\t\t\t/**\n\t\t\t\t * selection.setTo requires the second parameter when the first parameter is a node.\n\t\t\t\t *\n\t\t\t\t * @error view-selection-setTo-required-second-parameter\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-selection-setTo-required-second-parameter: ' +\n\t\t\t\t\t'selection.setTo requires the second parameter when the first parameter is a node.'\n\t\t\t\t);\n\t\t\t} else if ( placeOrOffset == 'in' ) {\n\t\t\t\trange = Range._createIn( selectable );\n\t\t\t} else if ( placeOrOffset == 'on' ) {\n\t\t\t\trange = Range._createOn( selectable );\n\t\t\t} else {\n\t\t\t\trange = new Range( Position._createAt( selectable, placeOrOffset ) );\n\t\t\t}\n\n\t\t\tthis._setRanges( [ range ], backward );\n\t\t\tthis._setFakeOptions( options );\n\t\t} else if ( isIterable( selectable ) ) {\n\t\t\t// We assume that the selectable is an iterable of ranges.\n\t\t\t// Array.from() is used to prevent setting ranges to the old iterable\n\t\t\tthis._setRanges( selectable, placeOrOffset && placeOrOffset.backward );\n\t\t\tthis._setFakeOptions( placeOrOffset );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Cannot set selection to given place.\n\t\t\t *\n\t\t\t * @error view-selection-setTo-not-selectable\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-selection-setTo-not-selectable: Cannot set selection to given place.' );\n\t\t}\n\n\t\tthis.fire( 'change' );\n\t}\n\n\t/**\n\t * Moves {@link #focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @fires change\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tsetFocus( itemOrPosition, offset ) {\n\t\tif ( this.anchor === null ) {\n\t\t\t/**\n\t\t\t * Cannot set selection focus if there are no ranges in selection.\n\t\t\t *\n\t\t\t * @error view-selection-setFocus-no-ranges\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.'\n\t\t\t);\n\t\t}\n\n\t\tconst newFocus = Position._createAt( itemOrPosition, offset );\n\n\t\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst anchor = this.anchor;\n\n\t\tthis._ranges.pop();\n\n\t\tif ( newFocus.compareWith( anchor ) == 'before' ) {\n\t\t\tthis._addRange( new Range( newFocus, anchor ), true );\n\t\t} else {\n\t\t\tthis._addRange( new Range( anchor, newFocus ) );\n\t\t}\n\n\t\tthis.fire( 'change' );\n\t}\n\n\t/**\n\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n\t * is treated like the last added range and is used to set {@link #anchor anchor} and {@link #focus focus}.\n\t * Accepts a flag describing in which way the selection is made.\n\t *\n\t * @private\n\t * @param {Iterable.<module:engine/view/range~Range>} newRanges Iterable object of ranges to set.\n\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end\n\t * (`false`) or backward - from end to start (`true`). Defaults to `false`.\n\t */\n\t_setRanges( newRanges, isLastBackward = false ) {\n\t\t// New ranges should be copied to prevent removing them by setting them to `[]` first.\n\t\t// Only applies to situations when selection is set to the same selection or same selection's ranges.\n\t\tnewRanges = Array.from( newRanges );\n\n\t\tthis._ranges = [];\n\n\t\tfor ( const range of newRanges ) {\n\t\t\tthis._addRange( range );\n\t\t}\n\n\t\tthis._lastRangeBackward = !!isLastBackward;\n\t}\n\n\t/**\n\t * Sets this selection instance to be marked as `fake`. A fake selection does not render as browser native selection\n\t * over selected elements and is hidden to the user. This way, no native selection UI artifacts are displayed to\n\t * the user and selection over elements can be represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM (and be\n\t * properly handled by screen readers).\n\t *\n\t * @private\n\t * @param {Object} [options] Options.\n\t * @param {Boolean} [options.fake] If set to true selection will be marked as `fake`.\n\t * @param {String} [options.label=''] Fake selection label.\n\t */\n\t_setFakeOptions( options = {} ) {\n\t\tthis._isFake = !!options.fake;\n\t\tthis._fakeSelectionLabel = options.fake ? options.label || '' : '';\n\t}\n\n\t/**\n\t * Adds a range to the selection. Added range is copied. This means that passed range is not saved in the\n\t * selection instance and you can safely operate on it.\n\t *\n\t * Accepts a flag describing in which way the selection is made - passed range might be selected from\n\t * {@link module:engine/view/range~Range#start start} to {@link module:engine/view/range~Range#end end}\n\t * or from {@link module:engine/view/range~Range#end end} to {@link module:engine/view/range~Range#start start}.\n\t * The flag is used to set {@link #anchor anchor} and {@link #focus focus} properties.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n\t * with ranges already stored in Selection instance.\n\t *\n\t * @private\n\t * @fires change\n\t * @param {module:engine/view/range~Range} range\n\t * @param {Boolean} [isBackward]\n\t */\n\t_addRange( range, isBackward = false ) {\n\t\tif ( !( range instanceof Range ) ) {\n\t\t\t/**\n\t\t\t * Selection range set to an object that is not an instance of {@link module:engine/view/range~Range}.\n\t\t\t *\n\t\t\t * @error view-selection-add-range-not-range\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-selection-add-range-not-range: ' +\n\t\t\t\t'Selection range set to an object that is not an instance of view.Range'\n\t\t\t);\n\t\t}\n\n\t\tthis._pushRange( range );\n\t\tthis._lastRangeBackward = !!isBackward;\n\t}\n\n\t/**\n\t * Adds range to selection - creates copy of given range so it can be safely used and modified.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n\t * with ranges already stored in selection instance.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range\n\t */\n\t_pushRange( range ) {\n\t\tfor ( const storedRange of this._ranges ) {\n\t\t\tif ( range.isIntersecting( storedRange ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to add a range that intersects with another range from selection.\n\t\t\t\t *\n\t\t\t\t * @error view-selection-range-intersects\n\t\t\t\t * @param {module:engine/view/range~Range} addedRange Range that was added to the selection.\n\t\t\t\t * @param {module:engine/view/range~Range} intersectingRange Range from selection that intersects with `addedRange`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'view-selection-range-intersects: Trying to add a range that intersects with another range from selection.',\n\t\t\t\t\t{ addedRange: range, intersectingRange: storedRange }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._ranges.push( new Range( range.start, range.end ) );\n\t}\n\n\t/**\n\t * Fired whenever selection ranges are changed through {@link ~Selection Selection API}.\n\t *\n\t * @event change\n\t */\n}\n\nmix( Selection, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/documentselection\n */\n\nimport Selection from './selection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\n/**\n * Class representing the document selection in the view.\n *\n * Its instance is available in {@link module:engine/view/document~Document#selection `Document#selection`}.\n *\n * It is similar to {@link module:engine/view/selection~Selection} but\n * it has a read-only API and can be modified only by the writer available in\n * the {@link module:engine/view/view~View#change `View#change()`} block\n * (so via {@link module:engine/view/downcastwriter~DowncastWriter#setSelection `DowncastWriter#setSelection()`}).\n */\nexport default class DocumentSelection {\n\t/**\n\t * Creates new DocumentSelection instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = new DocumentSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = new DocumentSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\tconst selection = new DocumentSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = new DocumentSelection( otherSelection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, offset );\n\t *\t\tconst selection = new DocumentSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = new DocumentSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = new DocumentSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = new DocumentSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = new DocumentSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = new DocumentSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/position~Position|\n\t * Iterable.<module:engine/view/range~Range>|module:engine/view/range~Range|\n\t * module:engine/view/item~Item|null} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tconstructor( selectable = null, placeOrOffset, options ) {\n\t\t/**\n\t\t * Selection is used internally (`DocumentSelection` is a proxy to that selection).\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/selection~Selection}\n\t\t */\n\t\tthis._selection = new Selection();\n\n\t\t// Delegate change event to be fired on DocumentSelection instance.\n\t\tthis._selection.delegate( 'change' ).to( this );\n\n\t\t// Set selection data.\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Returns true if selection instance is marked as `fake`.\n\t *\n\t * @see #_setTo\n\t * @returns {Boolean}\n\t */\n\tget isFake() {\n\t\treturn this._selection.isFake;\n\t}\n\n\t/**\n\t * Returns fake selection label.\n\t *\n\t * @see #_setTo\n\t * @returns {String}\n\t */\n\tget fakeSelectionLabel() {\n\t\treturn this._selection.fakeSelectionLabel;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n\t * {@link #focus focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n\t * It may be a bit unintuitive when there are multiple ranges in selection.\n\t *\n\t * @see #focus\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget anchor() {\n\t\treturn this._selection.anchor;\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * @see #anchor\n\t * @type {module:engine/view/position~Position}\n\t */\n\tget focus() {\n\t\treturn this._selection.focus;\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this._selection.isCollapsed;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._selection.rangeCount;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus} precedes {@link #anchor}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn this._selection.isBackward;\n\t}\n\n\t/**\n\t * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n\t * if the selection is not inside an editable element.\n\t *\n\t * @type {module:engine/view/editableelement~EditableElement|null}\n\t */\n\tget editableElement() {\n\t\treturn this._selection.editableElement;\n\t}\n\n\t/**\n\t * Used for the compatibility with the {@link module:engine/view/selection~Selection#isEqual} method.\n\t *\n\t * @protected\n\t */\n\tget _ranges() {\n\t\treturn this._selection._ranges;\n\t}\n\n\t/**\n\t * Returns an iterable that contains copies of all ranges added to the selection.\n\t *\n\t * @returns {Iterable.<module:engine/view/range~Range>}\n\t */\n\t* getRanges() {\n\t\tyield* this._selection.getRanges();\n\t}\n\n\t/**\n\t * Returns copy of the first range in the selection. First range is the one which\n\t * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n\t * position of all other ranges (not to confuse with the first range added to the selection).\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\treturn this._selection.getFirstRange();\n\t}\n\n\t/**\n\t * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n\t * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n\t * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\treturn this._selection.getLastRange();\n\t}\n\n\t/**\n\t * Returns copy of the first position in the selection. First position is the position that\n\t * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\treturn this._selection.getFirstPosition();\n\t}\n\n\t/**\n\t * Returns copy of the last position in the selection. Last position is the position that\n\t * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n\t * Returns `null` if no ranges are added to selection.\n\t *\n\t * @returns {module:engine/view/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\treturn this._selection.getLastPosition();\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/view/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\treturn this._selection.getSelectedElement();\n\t}\n\n\t/**\n\t * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n\t * same number of ranges and all ranges from one selection equal to a range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\treturn this._selection.isEqual( otherSelection );\n\t}\n\n\t/**\n\t * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n\t * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n\t * equal to any trimmed range from other selection.\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are similar, `false` otherwise.\n\t */\n\tisSimilar( otherSelection ) {\n\t\treturn this._selection.isSimilar( otherSelection );\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/view/documentselection~DocumentSelection document selection},\n\t * {@link module:engine/view/selection~Selection selection}, {@link module:engine/view/position~Position position},\n\t * {@link module:engine/view/item~Item item}, {@link module:engine/view/range~Range range},\n\t * an iterable of {@link module:engine/view/range~Range ranges} or null.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tdocumentSelection._setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n\t *\t\tdocumentSelection._setTo( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tdocumentSelection._setTo( otherSelection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionAt( root, offset );\n\t *\t\tdocumentSelection._setTo( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tdocumentSelection._setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t *\t\tdocumentSelection._setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tdocumentSelection._setTo( paragraph, 'on' );\n\t *\n\t * \t\t// Clears selection. Removes all ranges.\n\t *\t\tdocumentSelection._setTo( null );\n\t *\n\t * `Selection#_setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\tdocumentSelection._setTo( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to des cribe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tdocumentSelection._setTo( range, { fake: true, label: 'foo' } );\n\t *\n\t * @protected\n\t * @fires change\n\t * @param {module:engine/view/selection~Selection|module:engine/view/position~Position|\n\t * Iterable.<module:engine/view/range~Range>|module:engine/view/range~Range|module:engine/view/item~Item|null} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\t_setTo( selectable, placeOrOffset, options ) {\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link #focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @protected\n\t * @fires change\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\t_setFocus( itemOrPosition, offset ) {\n\t\tthis._selection.setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Fired whenever selection ranges are changed through {@link ~DocumentSelection Selection API}.\n\t *\n\t * @event change\n\t */\n}\n\nmix( DocumentSelection, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/collection\n */\n\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport uid from './uid';\nimport mix from './mix';\n\n/**\n * Collections are ordered sets of objects. Items in the collection can be retrieved by their indexes\n * in the collection (like in an array) or by their ids.\n *\n * If an object without an `id` property is being added to the collection, the `id` property will be generated\n * automatically. Note that the automatically generated id is unique only within this single collection instance.\n *\n * By default an item in the collection is identified by its `id` property. The name of the identifier can be\n * configured through the constructor of the collection.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Collection {\n\t/**\n\t * Creates a new Collection instance.\n\t *\n\t * @param {Object} [options={}] The options object.\n\t * @param {String} [options.idProperty='id'] The name of the property which is considered to identify an item.\n\t */\n\tconstructor( options = {} ) {\n\t\t/**\n\t\t * The internal list of items in the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Object[]}\n\t\t */\n\t\tthis._items = [];\n\n\t\t/**\n\t\t * The internal map of items in the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._itemMap = new Map();\n\n\t\t/**\n\t\t * The name of the property which is considered to identify an item.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._idProperty = options.idProperty || 'id';\n\n\t\t/**\n\t\t * A helper mapping external items of a bound collection ({@link #bindTo})\n\t\t * and actual items of this collection. It provides information\n\t\t * necessary to properly remove items bound to another collection.\n\t\t *\n\t\t * See {@link #_bindToInternalToExternalMap}.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._bindToExternalToInternalMap = new WeakMap();\n\n\t\t/**\n\t\t * A helper mapping items of this collection to external items of a bound collection\n\t\t * ({@link #bindTo}). It provides information necessary to manage the bindings, e.g.\n\t\t * to avoid loops in two–way bindings.\n\t\t *\n\t\t * See {@link #_bindToExternalToInternalMap}.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._bindToInternalToExternalMap = new WeakMap();\n\n\t\t/**\n\t\t * Stores indexes of skipped items from bound external collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Array}\n\t\t */\n\t\tthis._skippedIndexesFromExternal = [];\n\n\t\t/**\n\t\t * A collection instance this collection is bound to as a result\n\t\t * of calling {@link #bindTo} method.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/collection~Collection} #_bindToCollection\n\t\t */\n\t}\n\n\t/**\n\t * The number of items available in the collection.\n\t *\n\t * @member {Number} #length\n\t */\n\tget length() {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * Returns the first item from the collection or null when collection is empty.\n\t *\n\t * @returns {Object|null} The first item or `null` if collection is empty.\n\t */\n\tget first() {\n\t\treturn this._items[ 0 ] || null;\n\t}\n\n\t/**\n\t * Returns the last item from the collection or null when collection is empty.\n\t *\n\t * @returns {Object|null} The last item or `null` if collection is empty.\n\t */\n\tget last() {\n\t\treturn this._items[ this.length - 1 ] || null;\n\t}\n\n\t/**\n\t * Adds an item into the collection.\n\t *\n\t * If the item does not have an id, then it will be automatically generated and set on the item.\n\t *\n\t * @chainable\n\t * @param {Object} item\n\t * @param {Number} [index] The position of the item in the collection. The item\n\t * is pushed to the collection when `index` not specified.\n\t * @fires add\n\t */\n\tadd( item, index ) {\n\t\tlet itemId;\n\t\tconst idProperty = this._idProperty;\n\n\t\tif ( ( idProperty in item ) ) {\n\t\t\titemId = item[ idProperty ];\n\n\t\t\tif ( typeof itemId != 'string' ) {\n\t\t\t\t/**\n\t\t\t\t * This item's id should be a string.\n\t\t\t\t *\n\t\t\t\t * @error collection-add-invalid-id\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'collection-add-invalid-id' );\n\t\t\t}\n\n\t\t\tif ( this.get( itemId ) ) {\n\t\t\t\t/**\n\t\t\t\t * This item already exists in the collection.\n\t\t\t\t *\n\t\t\t\t * @error collection-add-item-already-exists\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'collection-add-item-already-exists' );\n\t\t\t}\n\t\t} else {\n\t\t\titem[ idProperty ] = itemId = uid();\n\t\t}\n\n\t\t// TODO: Use ES6 default function argument.\n\t\tif ( index === undefined ) {\n\t\t\tindex = this._items.length;\n\t\t} else if ( index > this._items.length || index < 0 ) {\n\t\t\t/**\n\t\t\t * The index number has invalid value.\n\t\t\t *\n\t\t\t * @error collection-add-item-bad-index\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-add-item-invalid-index' );\n\t\t}\n\n\t\tthis._items.splice( index, 0, item );\n\n\t\tthis._itemMap.set( itemId, item );\n\n\t\tthis.fire( 'add', item, index );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets item by its id or index.\n\t *\n\t * @param {String|Number} idOrIndex The item id or index in the collection.\n\t * @returns {Object|null} The requested item or `null` if such item does not exist.\n\t */\n\tget( idOrIndex ) {\n\t\tlet item;\n\n\t\tif ( typeof idOrIndex == 'string' ) {\n\t\t\titem = this._itemMap.get( idOrIndex );\n\t\t} else if ( typeof idOrIndex == 'number' ) {\n\t\t\titem = this._items[ idOrIndex ];\n\t\t} else {\n\t\t\t/**\n\t\t\t * Index or id must be given.\n\t\t\t *\n\t\t\t * @error collection-get-invalid-arg\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-get-invalid-arg: Index or id must be given.' );\n\t\t}\n\n\t\treturn item || null;\n\t}\n\n\t/**\n\t * Gets index of item in the collection.\n\t * When item is not defined in the collection then index will be equal -1.\n\t *\n\t * @param {String|Object} idOrItem The item or its id in the collection.\n\t * @returns {Number} Index of given item.\n\t */\n\tgetIndex( idOrItem ) {\n\t\tlet item;\n\n\t\tif ( typeof idOrItem == 'string' ) {\n\t\t\titem = this._itemMap.get( idOrItem );\n\t\t} else {\n\t\t\titem = idOrItem;\n\t\t}\n\n\t\treturn this._items.indexOf( item );\n\t}\n\n\t/**\n\t * Removes an item from the collection.\n\t *\n\t * @param {Object|Number|String} subject The item to remove, its id or index in the collection.\n\t * @returns {Object} The removed item.\n\t * @fires remove\n\t */\n\tremove( subject ) {\n\t\tlet index, id, item;\n\t\tlet itemDoesNotExist = false;\n\t\tconst idProperty = this._idProperty;\n\n\t\tif ( typeof subject == 'string' ) {\n\t\t\tid = subject;\n\t\t\titem = this._itemMap.get( id );\n\t\t\titemDoesNotExist = !item;\n\n\t\t\tif ( item ) {\n\t\t\t\tindex = this._items.indexOf( item );\n\t\t\t}\n\t\t} else if ( typeof subject == 'number' ) {\n\t\t\tindex = subject;\n\t\t\titem = this._items[ index ];\n\t\t\titemDoesNotExist = !item;\n\n\t\t\tif ( item ) {\n\t\t\t\tid = item[ idProperty ];\n\t\t\t}\n\t\t} else {\n\t\t\titem = subject;\n\t\t\tid = item[ idProperty ];\n\t\t\tindex = this._items.indexOf( item );\n\t\t\titemDoesNotExist = ( index == -1 || !this._itemMap.get( id ) );\n\t\t}\n\n\t\tif ( itemDoesNotExist ) {\n\t\t\t/**\n\t\t\t * Item not found.\n\t\t\t *\n\t\t\t * @error collection-remove-404\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-remove-404: Item not found.' );\n\t\t}\n\n\t\tthis._items.splice( index, 1 );\n\t\tthis._itemMap.delete( id );\n\n\t\tconst externalItem = this._bindToInternalToExternalMap.get( item );\n\t\tthis._bindToInternalToExternalMap.delete( item );\n\t\tthis._bindToExternalToInternalMap.delete( externalItem );\n\n\t\tthis.fire( 'remove', item, index );\n\n\t\treturn item;\n\t}\n\n\t/**\n\t * Executes the callback for each item in the collection and composes an array or values returned by this callback.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Array} The result of mapping.\n\t */\n\tmap( callback, ctx ) {\n\t\treturn this._items.map( callback, ctx );\n\t}\n\n\t/**\n\t * Finds the first item in the collection for which the `callback` returns a true value.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Object} The item for which `callback` returned a true value.\n\t */\n\tfind( callback, ctx ) {\n\t\treturn this._items.find( callback, ctx );\n\t}\n\n\t/**\n\t * Returns an array with items for which the `callback` returned a true value.\n\t *\n\t * @param {Function} callback\n\t * @param {Object} callback.item\n\t * @param {Number} callback.index\n\t * @param {Object} ctx Context in which the `callback` will be called.\n\t * @returns {Object[]} The array with matching items.\n\t */\n\tfilter( callback, ctx ) {\n\t\treturn this._items.filter( callback, ctx );\n\t}\n\n\t/**\n\t * Removes all items from the collection and destroys the binding created using\n\t * {@link #bindTo}.\n\t */\n\tclear() {\n\t\tif ( this._bindToCollection ) {\n\t\t\tthis.stopListening( this._bindToCollection );\n\t\t\tthis._bindToCollection = null;\n\t\t}\n\n\t\twhile ( this.length ) {\n\t\t\tthis.remove( 0 );\n\t\t}\n\t}\n\n\t/**\n\t * Binds and synchronizes the collection with another one.\n\t *\n\t * The binding can be a simple factory:\n\t *\n\t *\t\tclass FactoryClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).as( FactoryClass );\n\t *\n\t *\t\tsource.add( { label: 'foo' } );\n\t *\t\tsource.add( { label: 'bar' } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 1 ).label ); // 'bar'\n\t *\n\t *\t\tsource.remove( 0 );\n\t *\t\tconsole.log( target.length ); // 1\n\t *\t\tconsole.log( target.get( 0 ).label ); // 'bar'\n\t *\n\t * or the factory driven by a custom callback:\n\t *\n\t *\t\tclass FooClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tclass BarClass {\n\t *\t\t\tconstructor( data ) {\n\t *\t\t\t\tthis.label = data.label;\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( ( item ) => {\n\t *\t\t\tif ( item.label == 'foo' ) {\n\t *\t\t\t\treturn new FooClass( item );\n\t *\t\t\t} else {\n\t *\t\t\t\treturn new BarClass( item );\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\tsource.add( { label: 'foo' } );\n\t *\t\tsource.add( { label: 'bar' } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 0 ) instanceof FooClass ); // true\n\t *\t\tconsole.log( target.get( 1 ) instanceof BarClass ); // true\n\t *\n\t * or the factory out of property name:\n\t *\n\t *\t\tconst source = new Collection( { idProperty: 'label' } );\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( 'label' );\n\t *\n\t *\t\tsource.add( { label: { value: 'foo' } } );\n\t *\t\tsource.add( { label: { value: 'bar' } } );\n\t *\n\t *\t\tconsole.log( target.length ); // 2\n\t *\t\tconsole.log( target.get( 0 ).value ); // 'foo'\n\t *\t\tconsole.log( target.get( 1 ).value ); // 'bar'\n\t *\n\t * It's possible to skip specified items by returning falsy value:\n\t *\n\t *\t\tconst source = new Collection();\n\t *\t\tconst target = new Collection();\n\t *\n\t *\t\ttarget.bindTo( source ).using( item => {\n\t *\t\t\tif ( item.hidden ) {\n\t *\t\t\t\treturn null;\n\t *\t\t\t}\n\t *\n\t *\t\t\treturn item;\n\t *\t\t} );\n\t *\n\t *\t\tsource.add( { hidden: true } );\n\t *\t\tsource.add( { hidden: false } );\n\t *\n\t *\t\tconsole.log( source.length ); // 2\n\t *\t\tconsole.log( target.length ); // 1\n\t *\n\t * **Note**: {@link #clear} can be used to break the binding.\n\t *\n\t * @param {module:utils/collection~Collection} externalCollection A collection to be bound.\n\t * @returns {Object}\n\t * @returns {module:utils/collection~Collection#bindTo#as} return.as\n\t * @returns {module:utils/collection~Collection#bindTo#using} return.using\n\t */\n\tbindTo( externalCollection ) {\n\t\tif ( this._bindToCollection ) {\n\t\t\t/**\n\t\t\t * The collection cannot be bound more than once.\n\t\t\t *\n\t\t\t * @error collection-bind-to-rebind\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'collection-bind-to-rebind: The collection cannot be bound more than once.' );\n\t\t}\n\n\t\tthis._bindToCollection = externalCollection;\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Creates the class factory binding.\n\t\t\t *\n\t\t\t * @static\n\t\t\t * @param {Function} Class Specifies which class factory is to be initialized.\n\t\t\t */\n\t\t\tas: Class => {\n\t\t\t\tthis._setUpBindToBinding( item => new Class( item ) );\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates callback or property binding.\n\t\t\t *\n\t\t\t * @static\n\t\t\t * @param {Function|String} callbackOrProperty When the function is passed, it is used to\n\t\t\t * produce the items. When the string is provided, the property value is used to create\n\t\t\t * the bound collection items.\n\t\t\t */\n\t\t\tusing: callbackOrProperty => {\n\t\t\t\tif ( typeof callbackOrProperty == 'function' ) {\n\t\t\t\t\tthis._setUpBindToBinding( item => callbackOrProperty( item ) );\n\t\t\t\t} else {\n\t\t\t\t\tthis._setUpBindToBinding( item => item[ callbackOrProperty ] );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Finalizes and activates a binding initiated by {#bindTo}.\n\t *\n\t * @protected\n\t * @param {Function} factory A function which produces collection items.\n\t */\n\t_setUpBindToBinding( factory ) {\n\t\tconst externalCollection = this._bindToCollection;\n\n\t\t// Adds the item to the collection once a change has been done to the external collection.\n\t\t//\n\t\t// @private\n\t\tconst addItem = ( evt, externalItem, index ) => {\n\t\t\tconst isExternalBoundToThis = externalCollection._bindToCollection == this;\n\t\t\tconst externalItemBound = externalCollection._bindToInternalToExternalMap.get( externalItem );\n\n\t\t\t// If an external collection is bound to this collection, which makes it a 2–way binding,\n\t\t\t// and the particular external collection item is already bound, don't add it here.\n\t\t\t// The external item has been created **out of this collection's item** and (re)adding it will\n\t\t\t// cause a loop.\n\t\t\tif ( isExternalBoundToThis && externalItemBound ) {\n\t\t\t\tthis._bindToExternalToInternalMap.set( externalItem, externalItemBound );\n\t\t\t\tthis._bindToInternalToExternalMap.set( externalItemBound, externalItem );\n\t\t\t} else {\n\t\t\t\tconst item = factory( externalItem );\n\n\t\t\t\t// When there is no item we need to remember skipped index first and then we can skip this item.\n\t\t\t\tif ( !item ) {\n\t\t\t\t\tthis._skippedIndexesFromExternal.push( index );\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Lets try to put item at the same index as index in external collection\n\t\t\t\t// but when there are a skipped items in one or both collections we need to recalculate this index.\n\t\t\t\tlet finalIndex = index;\n\n\t\t\t\t// When we try to insert item after some skipped items from external collection we need\n\t\t\t\t// to include this skipped items and decrease index.\n\t\t\t\t//\n\t\t\t\t// For the following example:\n\t\t\t\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal' ]\n\t\t\t\t// internal -> [ A ]\n\t\t\t\t//\n\t\t\t\t// Another item is been added at the end of external collection:\n\t\t\t\t// external.add( 'D' )\n\t\t\t\t// external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal', 'D' ]\n\t\t\t\t//\n\t\t\t\t// We can't just add 'D' to internal at the same index as index in external because\n\t\t\t\t// this will produce empty indexes what is invalid:\n\t\t\t\t// internal -> [ 'A', empty, empty, 'D' ]\n\t\t\t\t//\n\t\t\t\t// So we need to include skipped items and decrease index\n\t\t\t\t// internal -> [ 'A', 'D' ]\n\t\t\t\tfor ( const skipped of this._skippedIndexesFromExternal ) {\n\t\t\t\t\tif ( index > skipped ) {\n\t\t\t\t\t\tfinalIndex--;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// We need to take into consideration that external collection could skip some items from\n\t\t\t\t// internal collection.\n\t\t\t\t//\n\t\t\t\t// For the following example:\n\t\t\t\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external' ]\n\t\t\t\t// external -> [ A ]\n\t\t\t\t//\n\t\t\t\t// Another item is been added at the end of external collection:\n\t\t\t\t// external.add( 'D' )\n\t\t\t\t// external -> [ 'A', 'D' ]\n\t\t\t\t//\n\t\t\t\t// We need to include skipped items and place new item after them:\n\t\t\t\t// internal -> [ 'A', 'B - skipped for external', 'C - skipped for external', 'D' ]\n\t\t\t\tfor ( const skipped of externalCollection._skippedIndexesFromExternal ) {\n\t\t\t\t\tif ( finalIndex >= skipped ) {\n\t\t\t\t\t\tfinalIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._bindToExternalToInternalMap.set( externalItem, item );\n\t\t\t\tthis._bindToInternalToExternalMap.set( item, externalItem );\n\t\t\t\tthis.add( item, finalIndex );\n\n\t\t\t\t// After adding new element to internal collection we need update indexes\n\t\t\t\t// of skipped items in external collection.\n\t\t\t\tfor ( let i = 0; i < externalCollection._skippedIndexesFromExternal.length; i++ ) {\n\t\t\t\t\tif ( finalIndex <= externalCollection._skippedIndexesFromExternal[ i ] ) {\n\t\t\t\t\t\texternalCollection._skippedIndexesFromExternal[ i ]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Load the initial content of the collection.\n\t\tfor ( const externalItem of externalCollection ) {\n\t\t\taddItem( null, externalItem, externalCollection.getIndex( externalItem ) );\n\t\t}\n\n\t\t// Synchronize the with collection as new items are added.\n\t\tthis.listenTo( externalCollection, 'add', addItem );\n\n\t\t// Synchronize the with collection as new items are removed.\n\t\tthis.listenTo( externalCollection, 'remove', ( evt, externalItem, index ) => {\n\t\t\tconst item = this._bindToExternalToInternalMap.get( externalItem );\n\n\t\t\tif ( item ) {\n\t\t\t\tthis.remove( item );\n\t\t\t}\n\n\t\t\t// After removing element from external collection we need update/remove indexes\n\t\t\t// of skipped items in internal collection.\n\t\t\tthis._skippedIndexesFromExternal = this._skippedIndexesFromExternal.reduce( ( result, skipped ) => {\n\t\t\t\tif ( index < skipped ) {\n\t\t\t\t\tresult.push( skipped - 1 );\n\t\t\t\t}\n\n\t\t\t\tif ( index > skipped ) {\n\t\t\t\t\tresult.push( skipped );\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [] );\n\t\t} );\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._items[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Fired when an item is added to the collection.\n\t *\n\t * @event add\n\t * @param {Object} item The added item.\n\t */\n\n\t/**\n\t * Fired when an item is removed from the collection.\n\t *\n\t * @event remove\n\t * @param {Object} item The removed item.\n\t * @param {Number} index Index from which item was removed.\n\t */\n}\n\nmix( Collection, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/document\n */\n\nimport DocumentSelection from './documentselection';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n\n/**\n * Document class creates an abstract layer over the content editable area, contains a tree of view elements and\n * {@link module:engine/view/documentselection~DocumentSelection view selection} associated with this document.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Document {\n\t/**\n\t * Creates a Document instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Selection done on this document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection} module:engine/view/document~Document#selection\n\t\t */\n\t\tthis.selection = new DocumentSelection();\n\n\t\t/**\n\t\t * Roots of the view tree. Collection of the {@link module:engine/view/element~Element view elements}.\n\t\t *\n\t\t * View roots are created as a result of binding between {@link module:engine/view/document~Document#roots} and\n\t\t * {@link module:engine/model/document~Document#roots} and this is handled by\n\t\t * {@link module:engine/controller/editingcontroller~EditingController}, so to create view root we need to create\n\t\t * model root using {@link module:engine/model/document~Document#createRoot}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/collection~Collection} module:engine/view/document~Document#roots\n\t\t */\n\t\tthis.roots = new Collection( { idProperty: 'rootName' } );\n\n\t\t/**\n\t\t * Defines whether document is in read-only mode.\n\t\t *\n\t\t * When document is read-ony then all roots are read-only as well and caret placed inside this root is hidden.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * True if document is focused.\n\t\t *\n\t\t * This property is updated by the {@link module:engine/view/observer/focusobserver~FocusObserver}.\n\t\t * If the {@link module:engine/view/observer/focusobserver~FocusObserver} is disabled this property will not change.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/document~Document#isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * True if composition is in progress inside the document.\n\t\t *\n\t\t * This property is updated by the {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n\t\t * If the {@link module:engine/view/observer/compositionobserver~CompositionObserver} is disabled this property will not change.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} module:engine/view/document~Document#isComposing\n\t\t */\n\t\tthis.set( 'isComposing', false );\n\n\t\t/**\n\t\t * Post-fixer callbacks registered to the view document.\n\t\t *\n\t\t * @private\n\t\t * @member {Set}\n\t\t */\n\t\tthis._postFixers = new Set();\n\t}\n\n\t/**\n\t * Gets a {@link module:engine/view/document~Document#roots view root element} with the specified name. If the name is not\n\t * specific \"main\" root is returned.\n\t *\n\t * @param {String} [name='main'] Name of the root.\n\t * @returns {module:engine/view/rooteditableelement~RootEditableElement|null} The view root element with the specified name\n\t * or null when there is no root of given name.\n\t */\n\tgetRoot( name = 'main' ) {\n\t\treturn this.roots.get( name );\n\t}\n\n\t/**\n\t * Used to register a post-fixer callback. A post-fixers mechanism allows to update view tree just before rendering\n\t * to the DOM.\n\t *\n\t * Post-fixers are fired just after all changes from the outermost change block were applied but\n\t * before the {@link module:engine/view/view~View#event:render render event} is fired. If a post-fixer callback made\n\t * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n\t * not be fixed in the new document tree state.\n\t *\n\t * View post-fixers are useful when you wants to update view structure whenever it changes, for instance add some classes\n\t * to elements based on the view structure or selection. However, is you need DOM elements to be already updated, use\n\t * {@link module:engine/view/view~View#event:render render event}.\n\t *\n\t * As a parameter, a post-fixer callback receives a {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}\n\t * instance connected with the executed changes block.\n\t *\n\t * @param {Function} postFixer\n\t */\n\tregisterPostFixer( postFixer ) {\n\t\tthis._postFixers.add( postFixer );\n\t}\n\n\t/**\n\t * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n\t *\n\t * @protected\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\t_callPostFixers( writer ) {\n\t\tlet wasFixed = false;\n\n\t\tdo {\n\t\t\tfor ( const callback of this._postFixers ) {\n\t\t\t\twasFixed = callback( writer );\n\n\t\t\t\tif ( wasFixed ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} while ( wasFixed );\n\t}\n\n\t/**\n\t * Event fired whenever document content layout changes. It is fired whenever content is\n\t * {@link module:engine/view/view~View#event:render rendered}, but should be also fired by observers in case of\n\t * other actions which may change layout, for instance when image loads.\n\t *\n\t * @event layoutChanged\n\t */\n}\n\nmix( Document, ObservableMixin );\n\n/**\n * Enum representing type of the change.\n *\n * Possible values:\n *\n * * `children` - for child list changes,\n * * `attributes` - for element attributes changes,\n * * `text` - for text nodes changes.\n *\n * @typedef {String} module:engine/view/document~ChangeType\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/attributeelement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n// Default attribute priority.\nconst DEFAULT_PRIORITY = 10;\n\n/**\n * Attribute elements are used to represent formatting elements in the view (think – `<b>`, `<span style=\"font-size: 2em\">`, etc.).\n * Most often they are created when downcasting model text attributes.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * To create a new attribute element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `DowncastWriter#createAttributeElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class AttributeElement extends Element {\n\t/**\n\t * Creates an attribute element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createAttributeElement\n\t * @see module:engine/view/element~Element\n\t * @protected\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\n\t\t/**\n\t\t * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Number}\n\t\t */\n\t\tthis._priority = DEFAULT_PRIORITY;\n\n\t\t/**\n\t\t * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n\t\t * and then two elements are considered similar if, and only if they have the same `_id`.\n\t\t *\n\t\t * @protected\n\t\t * @member {String|Number}\n\t\t */\n\t\tthis._id = null;\n\n\t\t/**\n\t\t * Keeps all the attribute elements that have the same {@link module:engine/view/attributeelement~AttributeElement#id ids}\n\t\t * and still exist in the view tree.\n\t\t *\n\t\t * This property is managed by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set.<module:engine/view/attributeelement~AttributeElement>|null}\n\t\t */\n\t\tthis._clonesGroup = null;\n\t}\n\n\t/**\n\t * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget priority() {\n\t\treturn this._priority;\n\t}\n\n\t/**\n\t * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n\t * and then two elements are considered similar if, and only if they have the same `id`.\n\t *\n\t * @readonly\n\t * @type {String|Number}\n\t */\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Returns all {@link module:engine/view/attributeelement~AttributeElement attribute elements} that has the\n\t * same {@link module:engine/view/attributeelement~AttributeElement#id id} and are in the view tree (were not removed).\n\t *\n\t * Note: If this element has been removed from the tree, returned set will not include it.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError attribute-element-get-elements-with-same-id-no-id}\n\t * if this element has no `id`.\n\t *\n\t * @returns {Set.<module:engine/view/attributeelement~AttributeElement>} Set containing all the attribute elements\n\t * with the same `id` that were added and not removed from the view tree.\n\t */\n\tgetElementsWithSameId() {\n\t\tif ( this.id === null ) {\n\t\t\t/**\n\t\t\t * Cannot get elements with the same id for an attribute element without id.\n\t\t\t *\n\t\t\t * @error attribute-element-get-elements-with-same-id-no-id\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'attribute-element-get-elements-with-same-id-no-id: ' +\n\t\t\t\t'Cannot get elements with the same id for an attribute element without id.'\n\t\t\t);\n\t\t}\n\n\t\treturn new Set( this._clonesGroup );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'attributeElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( type == 'attributeElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Checks if this element is similar to other element.\n\t *\n\t * If none of elements has set {@link module:engine/view/attributeelement~AttributeElement#id}, then both elements\n\t * should have the same name, attributes and priority to be considered as similar. Two similar elements can contain\n\t * different set of children nodes.\n\t *\n\t * If at least one element has {@link module:engine/view/attributeelement~AttributeElement#id} set, then both\n\t * elements have to have the same {@link module:engine/view/attributeelement~AttributeElement#id} value to be\n\t * considered similar.\n\t *\n\t * Similarity is important for {@link module:engine/view/downcastwriter~DowncastWriter}. For example:\n\t *\n\t * * two following similar elements can be merged together into one, longer element,\n\t * * {@link module:engine/view/downcastwriter~DowncastWriter#unwrap} checks similarity of passed element and processed element to\n\t * decide whether processed element should be unwrapped,\n\t * * etc.\n\t *\n\t * @param {module:engine/view/element~Element} otherElement\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherElement ) {\n\t\t// If any element has an `id` set, just compare the ids.\n\t\tif ( this.id !== null || otherElement.id !== null ) {\n\t\t\treturn this.id === otherElement.id;\n\t\t}\n\n\t\treturn super.isSimilar( otherElement ) && this.priority == otherElement.priority;\n\t}\n\n\t/**\n\t * Clones provided element with priority.\n\t *\n\t * @protected\n\t * @param {Boolean} deep If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any children.\n\t * @returns {module:engine/view/attributeelement~AttributeElement} Clone of this element.\n\t */\n\t_clone( deep ) {\n\t\tconst cloned = super._clone( deep );\n\n\t\t// Clone priority too.\n\t\tcloned._priority = this._priority;\n\n\t\t// And id too.\n\t\tcloned._id = this._id;\n\n\t\treturn cloned;\n\t}\n}\n\n/**\n * Default attribute priority.\n *\n * @member {Number} module:engine/view/attributeelement~AttributeElement.DEFAULT_PRIORITY\n */\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY;\n\n// Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getFillerOffset() {\n\t// <b>foo</b> does not need filler.\n\tif ( nonUiChildrenCount( this ) ) {\n\t\treturn null;\n\t}\n\n\tlet element = this.parent;\n\n\t// <p><b></b></p> needs filler -> <p><b><br></b></p>\n\twhile ( element && element.is( 'attributeElement' ) ) {\n\t\tif ( nonUiChildrenCount( element ) > 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\telement = element.parent;\n\t}\n\n\tif ( !element || nonUiChildrenCount( element ) > 1 ) {\n\t\treturn null;\n\t}\n\n\t// Render block filler at the end of element (after all ui elements).\n\treturn this.childCount;\n}\n\n// Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\n//\n// @param {module:engine/view/element~Element} element\n// @returns {Number}\nfunction nonUiChildrenCount( element ) {\n\treturn Array.from( element.getChildren() ).filter( element => !element.is( 'uiElement' ) ).length;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/emptyelement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\n\n/**\n * Empty element class. It is used to represent elements that cannot contain any child nodes (for example `<img>` elements).\n *\n * To create a new empty element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class EmptyElement extends Element {\n\t/**\n\t * Creates new instance of EmptyElement.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` when third parameter is passed,\n\t * to inform that usage of EmptyElement is incorrect (adding child nodes to EmptyElement is forbidden).\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createEmptyElement\n\t * @protected\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attributes] Collection of attributes.\n\t */\n\tconstructor( name, attributes, children ) {\n\t\tsuper( name, attributes, children );\n\n\t\t/**\n\t\t * Returns `null` because filler is not needed for EmptyElements.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {null} Always returns null.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'emptyElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( type == 'emptyElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` to prevent\n\t * adding any child nodes to EmptyElement.\n\t *\n\t * @protected\n\t */\n\t_insertChild( index, nodes ) {\n\t\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\n\t\t\t/**\n\t\t\t * Cannot add children to {@link module:engine/view/emptyelement~EmptyElement}.\n\t\t\t *\n\t\t\t * @error view-emptyelement-cannot-add\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-emptyelement-cannot-add: Cannot add child nodes to EmptyElement instance.' );\n\t\t}\n\t}\n}\n\n// Returns `null` because block filler is not needed for EmptyElements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals navigator:false */\n\n/**\n * @module utils/env\n */\n\nconst userAgent = navigator.userAgent.toLowerCase();\n\n/**\n * A namespace containing environment and browser information.\n *\n * @namespace\n */\nconst env = {\n\t/**\n\t * Indicates that the application is running on Macintosh.\n\t *\n\t * @static\n\t * @member {Boolean} module:utils/env~env#isMac\n\t */\n\tisMac: isMac( userAgent ),\n\n\t/**\n\t * Indicates that the application is running in Microsoft Edge.\n\t *\n\t * @static\n\t * @member {Boolean} module:utils/env~env#isEdge\n\t */\n\tisEdge: isEdge( userAgent ),\n\n\t/**\n\t * Indicates that the application is running in Firefox (Gecko).\n\t *\n\t * @static\n\t * @member {Boolean} module:utils/env~env#isEdge\n\t */\n\tisGecko: isGecko( userAgent )\n};\n\nexport default env;\n\n/**\n * Checks if User Agent represented by the string is running on Macintosh.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is running on Macintosh or not.\n */\nexport function isMac( userAgent ) {\n\treturn userAgent.indexOf( 'macintosh' ) > -1;\n}\n\n/**\n * Checks if User Agent represented by the string is Microsoft Edge.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Edge or not.\n */\nexport function isEdge( userAgent ) {\n\treturn !!userAgent.match( /edge\\/(\\d+.?\\d*)/ );\n}\n\n/**\n * Checks if User Agent represented by the string is Firefox (Gecko).\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Firefox or not.\n */\nexport function isGecko( userAgent ) {\n\treturn !!userAgent.match( /gecko\\/\\d+/ );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Set of utils related to keyboard support.\n *\n * @module utils/keyboard\n */\n\nimport CKEditorError from './ckeditorerror';\nimport env from './env';\n\nconst macGlyphsToModifiers = {\n\t'⌘': 'ctrl',\n\t'⇧': 'shift',\n\t'⌥': 'alt'\n};\n\nconst modifiersToMacGlyphs = {\n\t'ctrl': '⌘',\n\t'shift': '⇧',\n\t'alt': '⌥'\n};\n\n/**\n * Object with `keyName => keyCode` pairs for a set of known keys.\n *\n * Contains:\n *\n * * `a-z`,\n * * `0-9`,\n * * `f1-f12`,\n * * `arrow(left|up|right|bottom)`,\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\n * * `ctrl`, `cmd`, `shift`, `alt`.\n */\nexport const keyCodes = generateKnownKeyCodes();\n\n/**\n * Converts a key name or a {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * @param {String|module:utils/keyboard~KeystrokeInfo} Key name (see {@link module:utils/keyboard~keyCodes})\n * or a keystroke data object.\n * @returns {Number} Key or keystroke code.\n */\nexport function getCode( key ) {\n\tlet keyCode;\n\n\tif ( typeof key == 'string' ) {\n\t\tkeyCode = keyCodes[ key.toLowerCase() ];\n\n\t\tif ( !keyCode ) {\n\t\t\t/**\n\t\t\t * Unknown key name. Only key names contained by the {@link module:utils/keyboard~keyCodes} can be used.\n\t\t\t *\n\t\t\t * @errror keyboard-unknown-key\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'keyboard-unknown-key: Unknown key name.', { key } );\n\t\t}\n\t} else {\n\t\tkeyCode = key.keyCode +\n\t\t\t( key.altKey ? keyCodes.alt : 0 ) +\n\t\t\t( key.ctrlKey ? keyCodes.ctrl : 0 ) +\n\t\t\t( key.shiftKey ? keyCodes.shift : 0 );\n\t}\n\n\treturn keyCode;\n}\n\n/**\n * Parses keystroke and returns a keystroke code that will match the code returned by\n * link {@link module:utils/keyboard.getCode} for a corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\n *\n * The keystroke can be passed in two formats:\n *\n * * as a single string – e.g. `ctrl + A`,\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\n *\n * @param {String|Array.<Number|String>} keystroke Keystroke definition.\n * @returns {Number} Keystroke code.\n */\nexport function parseKeystroke( keystroke ) {\n\tif ( typeof keystroke == 'string' ) {\n\t\tkeystroke = splitKeystrokeText( keystroke );\n\t}\n\n\treturn keystroke\n\t\t.map( key => ( typeof key == 'string' ) ? getCode( key ) : key )\n\t\t.reduce( ( key, sum ) => sum + key, 0 );\n}\n\n/**\n * It translates any keystroke string text like `\"CTRL+A\"` to an\n * environment–specific keystroke, i.e. `\"⌘A\"` on Mac OSX.\n *\n * @param {String} keystroke Keystroke text.\n * @returns {String} Keystroke text specific for the environment.\n */\nexport function getEnvKeystrokeText( keystroke ) {\n\tif ( !env.isMac ) {\n\t\treturn keystroke;\n\t}\n\n\treturn splitKeystrokeText( keystroke )\n\t\t// Replace modifiers (e.g. \"ctrl\") with Mac glyphs (e.g. \"⌘\") first.\n\t\t.map( key => modifiersToMacGlyphs[ key.toLowerCase() ] || key )\n\n\t\t// Decide whether to put \"+\" between keys in the keystroke or not.\n\t\t.reduce( ( value, key ) => {\n\t\t\tif ( value.slice( -1 ) in macGlyphsToModifiers ) {\n\t\t\t\treturn value + key;\n\t\t\t} else {\n\t\t\t\treturn value + '+' + key;\n\t\t\t}\n\t\t} );\n}\n\nfunction generateKnownKeyCodes() {\n\tconst keyCodes = {\n\t\tarrowleft: 37,\n\t\tarrowup: 38,\n\t\tarrowright: 39,\n\t\tarrowdown: 40,\n\t\tbackspace: 8,\n\t\tdelete: 46,\n\t\tenter: 13,\n\t\tspace: 32,\n\t\tesc: 27,\n\t\ttab: 9,\n\n\t\t// The idea about these numbers is that they do not collide with any real key codes, so we can use them\n\t\t// like bit masks.\n\t\tctrl: 0x110000,\n\t\t// Has the same code as ctrl, because their behaviour should be unified across the editor.\n\t\t// See http://ckeditor.github.io/editor-recommendations/general-policies#ctrl-vs-cmd\n\t\tcmd: 0x110000,\n\t\tshift: 0x220000,\n\t\talt: 0x440000\n\t};\n\n\t// a-z\n\tfor ( let code = 65; code <= 90; code++ ) {\n\t\tconst letter = String.fromCharCode( code );\n\n\t\tkeyCodes[ letter.toLowerCase() ] = code;\n\t}\n\n\t// 0-9\n\tfor ( let code = 48; code <= 57; code++ ) {\n\t\tkeyCodes[ code - 48 ] = code;\n\t}\n\n\t// F1-F12\n\tfor ( let code = 112; code <= 123; code++ ) {\n\t\tkeyCodes[ 'f' + ( code - 111 ) ] = code;\n\t}\n\n\treturn keyCodes;\n}\n\nfunction splitKeystrokeText( keystroke ) {\n\treturn keystroke.split( /\\s*\\+\\s*/ );\n}\n\n/**\n * Information about a keystroke.\n *\n * @interface module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * The [key code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode).\n *\n * @member {Number} module:utils/keyboard~KeystrokeInfo#keyCode\n */\n\n/**\n * Whether the <kbd>Alt</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#altKey\n */\n\n/**\n * Whether the <kbd>Ctrl</kbd> or <kbd>Cmd</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#ctrlKey\n */\n\n/**\n * Whether the <kbd>Shift</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#shiftKey\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/uielement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * UI element class. It should be used to represent editing UI which needs to be injected into the editing view\n * If possible, you should keep your UI outside the editing view. However, if that is not possible,\n * UI elements can be used.\n *\n * How a UI element is rendered is in your control (you pass a callback to\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}).\n * The editor will ignore your UI element – the selection cannot be placed in it, it is skipped (invisible) when\n * the user modifies the selection by using arrow keys and the editor does not listen to any mutations which\n * happen inside your UI elements.\n *\n * The limitation is that you cannot convert a model element to a UI element. UI elements need to be\n * created for {@link module:engine/model/markercollection~Marker markers} or as additinal elements\n * inside normal {@link module:engine/view/containerelement~ContainerElement container elements}.\n *\n * To create a new UI element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class UIElement extends Element {\n\t/**\n\t * Creates new instance of UIElement.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` when third parameter is passed,\n\t * to inform that usage of UIElement is incorrect (adding child nodes to UIElement is forbidden).\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createUIElement\n\t * @protected\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attributes] Collection of attributes.\n\t */\n\tconstructor( name, attributes, children ) {\n\t\tsuper( name, attributes, children );\n\n\t\t/**\n\t\t * Returns `null` because filler is not needed for UIElements.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {null} Always returns null.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'uiElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( type == 'uiElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` to prevent adding any child nodes\n\t * to UIElement.\n\t */\n\t_insertChild( index, nodes ) {\n\t\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\n\t\t\t/**\n\t\t\t * Cannot add children to {@link module:engine/view/uielement~UIElement}.\n\t\t\t *\n\t\t\t * @error view-uielement-cannot-add\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-uielement-cannot-add: Cannot add child nodes to UIElement instance.' );\n\t\t}\n\t}\n\n\t/**\n\t * Renders this {@link module:engine/view/uielement~UIElement} to DOM. This method is called by\n\t * {@link module:engine/view/domconverter~DomConverter}.\n\t * Do not use inheritance to create custom rendering method, replace `render()` method instead:\n\t *\n\t *\t\tconst myUIElement = downcastWriter.createUIElement( 'span' );\n\t *\t\tmyUIElement.render = function( domDocument ) {\n\t *\t\t\tconst domElement = this.toDomElement( domDocument );\n\t *\t\t\tdomElement.innerHTML = '<b>this is ui element</b>';\n\t *\n\t *\t\t\treturn domElement;\n\t *\t\t};\n\t *\n\t * @param {Document} domDocument\n\t * @returns {HTMLElement}\n\t */\n\trender( domDocument ) {\n\t\treturn this.toDomElement( domDocument );\n\t}\n\n\t/**\n\t * Creates DOM element based on this view UIElement.\n\t * Note that each time this method is called new DOM element is created.\n\t *\n\t * @param {Document} domDocument\n\t * @returns {HTMLElement}\n\t */\n\ttoDomElement( domDocument ) {\n\t\tconst domElement = domDocument.createElement( this.name );\n\n\t\tfor ( const key of this.getAttributeKeys() ) {\n\t\t\tdomElement.setAttribute( key, this.getAttribute( key ) );\n\t\t}\n\n\t\treturn domElement;\n\t}\n}\n\n/**\n * This function injects UI element handling to the given {@link module:engine/view/document~Document document}.\n *\n * A callback is added to {@link module:engine/view/document~Document#event:keydown document keydown event}.\n * The callback handles the situation when right arrow key is pressed and selection is collapsed before a UI element.\n * Without this handler, it would be impossible to \"jump over\" UI element using right arrow key.\n *\n * @param {module:engine/view/view~View} view View controller to which the quirks handling will be injected.\n */\nexport function injectUiElementHandling( view ) {\n\tview.document.on( 'keydown', ( evt, data ) => jumpOverUiElement( evt, data, view.domConverter ) );\n}\n\n// Returns `null` because block filler is not needed for UIElements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n\n// Selection cannot be placed in a `UIElement`. Whenever it is placed there, it is moved before it. This\n// causes a situation when it is impossible to jump over `UIElement` using right arrow key, because the selection\n// ends up in ui element (in DOM) and is moved back to the left. This handler fixes this situation.\nfunction jumpOverUiElement( evt, data, domConverter ) {\n\tif ( data.keyCode == keyCodes.arrowright ) {\n\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\t\tconst domSelectionCollapsed = domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed;\n\n\t\t// Jump over UI element if selection is collapsed or shift key is pressed. These are the cases when selection would extend.\n\t\tif ( domSelectionCollapsed || data.shiftKey ) {\n\t\t\tconst domParent = domSelection.focusNode;\n\t\t\tconst domOffset = domSelection.focusOffset;\n\n\t\t\tconst viewPosition = domConverter.domPositionToView( domParent, domOffset );\n\n\t\t\t// In case if dom element is not converted to view or is not mapped or something. Happens for example in some tests.\n\t\t\tif ( viewPosition === null ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Skip all following ui elements.\n\t\t\tlet jumpedOverAnyUiElement = false;\n\n\t\t\tconst nextViewPosition = viewPosition.getLastMatchingPosition( value => {\n\t\t\t\tif ( value.item.is( 'uiElement' ) ) {\n\t\t\t\t\t// Remember that there was at least one ui element.\n\t\t\t\t\tjumpedOverAnyUiElement = true;\n\t\t\t\t}\n\n\t\t\t\t// Jump over ui elements, jump over empty attribute elements, move up from inside of attribute element.\n\t\t\t\tif ( value.item.is( 'uiElement' ) || value.item.is( 'attributeElement' ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Don't jump over text or don't get out of container element.\n\t\t\t\treturn false;\n\t\t\t} );\n\n\t\t\t// If anything has been skipped, fix position.\n\t\t\t// This `if` could be possibly omitted but maybe it is better not to mess with DOM selection if not needed.\n\t\t\tif ( jumpedOverAnyUiElement ) {\n\t\t\t\tconst newDomPosition = domConverter.viewPositionToDom( nextViewPosition );\n\n\t\t\t\tif ( domSelectionCollapsed ) {\n\t\t\t\t\t// Selection was collapsed, so collapse it at further position.\n\t\t\t\t\tdomSelection.collapse( newDomPosition.parent, newDomPosition.offset );\n\t\t\t\t} else {\n\t\t\t\t\t// Selection was not collapse, so extend it instead of collapsing.\n\t\t\t\t\tdomSelection.extend( newDomPosition.parent, newDomPosition.offset );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/documentfragment\n */\n\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\n/**\n * Document fragment.\n *\n * To create a new document fragment instance use the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createDocumentFragment `UpcastWriter#createDocumentFragment()`}\n * method.\n */\nexport default class DocumentFragment {\n\t/**\n\t * Creates new DocumentFragment instance.\n\t *\n\t * @protected\n\t * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n\t * A list of nodes to be inserted into the created document fragment.\n\t */\n\tconstructor( children ) {\n\t\t/**\n\t\t * Array of child nodes.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/view/element~Element>} module:engine/view/documentfragment~DocumentFragment#_children\n\t\t */\n\t\tthis._children = [];\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over nodes added to this document fragment.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Number of child nodes in this document fragment.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {null}\n\t */\n\tget parent() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether given view tree object is of given type.\n\t *\n\t * Read more in {@link module:engine/view/node~Node#is}.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'documentFragment';\n\t}\n\n\t/**\n\t * {@link module:engine/view/documentfragment~DocumentFragment#_insertChild Insert} a child node or a list of child nodes at the end\n\t * and sets the parent of these nodes to this fragment.\n\t *\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @returns {Number} Number of appended nodes.\n\t */\n\t_appendChild( items ) {\n\t\treturn this._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Gets child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/view/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children[ index ];\n\t}\n\n\t/**\n\t * Gets index of the given child node. Returns `-1` if child node is not found.\n\t *\n\t * @param {module:engine/view/node~Node} node Child node.\n\t * @returns {Number} Index of the child node.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.indexOf( node );\n\t}\n\n\t/**\n\t * Gets child nodes iterator.\n\t *\n\t * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n\t * this fragment.\n\t *\n\t * @param {Number} index Position where nodes should be inserted.\n\t * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n\t * @returns {Number} Number of inserted nodes.\n\t */\n\t_insertChild( index, items ) {\n\t\tthis._fireChange( 'children', this );\n\t\tlet count = 0;\n\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\n\t\t\tthis._children.splice( index, 0, node );\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n\t *\n\t * @param {Number} index Number of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tthis._fireChange( 'children', this );\n\n\t\tfor ( let i = index; i < index + howMany; i++ ) {\n\t\t\tthis._children[ i ].parent = null;\n\t\t}\n\n\t\treturn this._children.splice( index, howMany );\n\t}\n\n\t/**\n\t * Fires `change` event with given type of the change.\n\t *\n\t * @private\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Changed node.\n\t * @fires module:engine/view/node~Node#change\n\t */\n\t_fireChange( type, node ) {\n\t\tthis.fire( 'change:' + type, node );\n\t}\n}\n\nmix( DocumentFragment, EmitterMixin );\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module module:engine/view/downcastwriter\n */\n\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\nimport ContainerElement from './containerelement';\nimport AttributeElement from './attributeelement';\nimport EmptyElement from './emptyelement';\nimport UIElement from './uielement';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport DocumentFragment from './documentfragment';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Text from './text';\nimport EditableElement from './editableelement';\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * View downcast writer.\n *\n * It provides a set of methods used to manipulate view nodes.\n *\n * Do not create an instance of this writer manually. To modify a view structure, use\n * the {@link module:engine/view/view~View#change `View#change()`} block.\n *\n * The `DowncastWriter` is designed to work with semantic views which are the views that were/are being downcasted from the model.\n * To work with ordinary views (e.g. parsed from a pasted content) use the\n * {@link module:engine/view/upcastwriter~UpcastWriter upcast writer}.\n *\n * Read more about changing the view in the {@glink framework/guides/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide.\n */\nexport default class DowncastWriter {\n\tconstructor( document ) {\n\t\t/**\n\t\t * @readonly\n\t\t * @type {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = document;\n\n\t\t/**\n\t\t * Holds references to the attribute groups that share the same {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t\t * The keys are `id`s, the values are `Set`s holding {@link module:engine/view/attributeelement~AttributeElement}s.\n\t\t *\n\t\t * @private\n\t\t * @type {Map.<String,Set>}\n\t\t */\n\t\tthis._cloneGroups = new Map();\n\t}\n\n\t/**\n\t * Sets {@link module:engine/view/documentselection~DocumentSelection selection's} ranges and direction to the\n\t * specified location based on the given {@link module:engine/view/documentselection~DocumentSelection document selection},\n\t * {@link module:engine/view/selection~Selection selection}, {@link module:engine/view/position~Position position},\n\t * {@link module:engine/view/item~Item item}, {@link module:engine/view/range~Range range},\n\t * an iterable of {@link module:engine/view/range~Range ranges} or null.\n\t *\n\t * Usage:\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets backward selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\twriter.setSelection( otherSelection );\n\t *\n\t * \t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\twriter.setSelection( position );\n\t *\n\t * \t\t// Sets collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\twriter.setSelection( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t * \t\twriter.setSelection( paragraph, 'in' );\n\t *\n\t * Creates a range on the {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'on' );\n\t *\n\t * \t\t// Removes all ranges.\n\t *\t\twriter.setSelection( null );\n\t *\n\t * `DowncastWriter#setSelection()` allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\twriter.setSelection( range, { backward: true } );\n\t *\n\t *\t\t// Sets selection as fake.\n\t *\t\t// Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * \t\t// This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * \t\t// represented in other way, for example by applying proper CSS class.\n\t *\t\twriter.setSelection( range, { fake: true } );\n\t *\n\t * \t\t// Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * \t\t// (and be  properly handled by screen readers).\n\t *\t\twriter.setSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/position~Position|\n\t * Iterable.<module:engine/view/range~Range>|module:engine/view/range~Range|module:engine/view/item~Item|null} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t */\n\tsetSelection( selectable, placeOrOffset, options ) {\n\t\tthis.document.selection._setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/view/documentselection~DocumentSelection#focus selection's focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n\t * parameters.\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tsetSelectionFocus( itemOrPosition, offset ) {\n\t\tthis.document.selection._setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/view/text~Text text node}.\n\t *\n\t *\t\twriter.createText( 'foo' );\n\t *\n\t * @param {String} data The text's data.\n\t * @returns {module:engine/view/text~Text} The created text node.\n\t */\n\tcreateText( data ) {\n\t\treturn new Text( data );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/attributeelement~AttributeElement}.\n\t *\n\t *\t\twriter.createAttributeElement( 'strong' );\n\t *\t\twriter.createAttributeElement( 'strong', { alignment: 'center' } );\n\t *\n\t *\t\t// Make `<a>` element contain other attributes element so the `<a>` element is not broken.\n\t *\t\twriter.createAttributeElement( 'a', { href: 'foo.bar' }, { priority: 5 } );\n\t *\n\t *\t\t// Set `id` of a marker element so it is not joined or merged with \"normal\" elements.\n\t *\t\twriter.createAttributeElement( 'span', { class: 'myMarker' }, { id: 'marker:my' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Element's attributes.\n\t * @param {Object} [options] Element's options.\n\t * @param {Number} [options.priority] Element's {@link module:engine/view/attributeelement~AttributeElement#priority priority}.\n\t * @param {Number|String} [options.id] Element's {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t * @returns {module:engine/view/attributeelement~AttributeElement} Created element.\n\t */\n\tcreateAttributeElement( name, attributes, options = {} ) {\n\t\tconst attributeElement = new AttributeElement( name, attributes );\n\n\t\tif ( options.priority ) {\n\t\t\tattributeElement._priority = options.priority;\n\t\t}\n\n\t\tif ( options.id ) {\n\t\t\tattributeElement._id = options.id;\n\t\t}\n\n\t\treturn attributeElement;\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/containerelement~ContainerElement}.\n\t *\n\t *\t\twriter.createContainerElement( 'paragraph' );\n\t *\t\twriter.createContainerElement( 'paragraph', { alignment: 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/containerelement~ContainerElement} Created element.\n\t */\n\tcreateContainerElement( name, attributes ) {\n\t\treturn new ContainerElement( name, attributes );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/editableelement~EditableElement}.\n\t *\n\t *\t\twriter.createEditableElement( 'div' );\n\t *\t\twriter.createEditableElement( 'div', { alignment: 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/editableelement~EditableElement} Created element.\n\t */\n\tcreateEditableElement( name, attributes ) {\n\t\tconst editableElement = new EditableElement( name, attributes );\n\t\teditableElement._document = this.document;\n\n\t\treturn editableElement;\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/emptyelement~EmptyElement}.\n\t *\n\t *\t\twriter.createEmptyElement( 'img' );\n\t *\t\twriter.createEmptyElement( 'img', { alignment: 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/view/emptyelement~EmptyElement} Created element.\n\t */\n\tcreateEmptyElement( name, attributes ) {\n\t\treturn new EmptyElement( name, attributes );\n\t}\n\n\t/**\n\t * Creates new {@link module:engine/view/uielement~UIElement}.\n\t *\n\t *\t\twriter.createUIElement( 'span' );\n\t *\t\twriter.createUIElement( 'span', { alignment: 'center' } );\n\t *\n\t * Custom render function can be provided as third parameter:\n\t *\n\t *\t\twriter.createUIElement( 'span', null, function( domDocument ) {\n\t *\t\t\tconst domElement = this.toDomElement( domDocument );\n\t *\t\t\tdomElement.innerHTML = '<b>this is ui element</b>';\n\t *\n\t *\t\t\treturn domElement;\n\t *\t\t} );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {Function} [renderFunction] Custom render function.\n\t * @returns {module:engine/view/uielement~UIElement} Created element.\n\t */\n\tcreateUIElement( name, attributes, renderFunction ) {\n\t\tconst uiElement = new UIElement( name, attributes );\n\n\t\tif ( renderFunction ) {\n\t\t\tuiElement.render = renderFunction;\n\t\t}\n\n\t\treturn uiElement;\n\t}\n\n\t/**\n\t * Adds or overwrite element's attribute with a specified key and value.\n\t *\n\t *\t\twriter.setAttribute( 'href', 'http://ckeditor.com', linkElement );\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {String} value Attribute value.\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tsetAttribute( key, value, element ) {\n\t\telement._setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes attribute from the element.\n\t *\n\t *\t\twriter.removeAttribute( 'href', linkElement );\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveAttribute( key, element ) {\n\t\telement._removeAttribute( key );\n\t}\n\n\t/**\n\t * Adds specified class to the element.\n\t *\n\t *\t\twriter.addClass( 'foo', linkElement );\n\t *\t\twriter.addClass( [ 'foo', 'bar' ], linkElement );\n\t *\n\t * @param {Array.<String>|String} className\n\t * @param {module:engine/view/element~Element} element\n\t */\n\taddClass( className, element ) {\n\t\telement._addClass( className );\n\t}\n\n\t/**\n\t * Removes specified class from the element.\n\t *\n\t *\t\twriter.removeClass( 'foo', linkElement );\n\t *\t\twriter.removeClass( [ 'foo', 'bar' ], linkElement );\n\t *\n\t * @param {Array.<String>|String} className\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveClass( className, element ) {\n\t\telement._removeClass( className );\n\t}\n\n\t/**\n\t * Adds style to the element.\n\t *\n\t *\t\twriter.setStyle( 'color', 'red', element );\n\t *\t\twriter.setStyle( {\n\t *\t\t\tcolor: 'red',\n\t *\t\t\tposition: 'fixed'\n\t *\t\t}, element );\n\t *\n\t * @param {String|Object} property Property name or object with key - value pairs.\n\t * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n\t * @param {module:engine/view/element~Element} element Element to set styles on.\n\t */\n\tsetStyle( property, value, element ) {\n\t\tif ( isPlainObject( property ) && element === undefined ) {\n\t\t\telement = value;\n\t\t}\n\n\t\telement._setStyle( property, value );\n\t}\n\n\t/**\n\t * Removes specified style from the element.\n\t *\n\t *\t\twriter.removeStyle( 'color', element );  // Removes 'color' style.\n\t *\t\twriter.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.\n\t *\n\t * @param {Array.<String>|String} property\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tremoveStyle( property, element ) {\n\t\telement._removeStyle( property );\n\t}\n\n\t/**\n\t * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n\t * so they can be used to add special data to elements.\n\t *\n\t * @param {String|Symbol} key\n\t * @param {*} value\n\t * @param {module:engine/view/element~Element} element\n\t */\n\tsetCustomProperty( key, value, element ) {\n\t\telement._setCustomProperty( key, value );\n\t}\n\n\t/**\n\t * Removes a custom property stored under the given key.\n\t *\n\t * @param {String|Symbol} key\n\t * @param {module:engine/view/element~Element} element\n\t * @returns {Boolean} Returns true if property was removed.\n\t */\n\tremoveCustomProperty( key, element ) {\n\t\treturn element._removeCustomProperty( key );\n\t}\n\n\t/**\n\t * Breaks attribute nodes at provided position or at boundaries of provided range. It breaks attribute elements inside\n\t * up to a container element.\n\t *\n\t * In following examples `<p>` is a container, `<b>` and `<u>` are attribute nodes:\n\t *\n\t *        <p>foo<b><u>bar{}</u></b></p> -> <p>foo<b><u>bar</u></b>[]</p>\n\t *        <p>foo<b><u>{}bar</u></b></p> -> <p>foo{}<b><u>bar</u></b></p>\n\t *        <p>foo<b><u>b{}ar</u></b></p> -> <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n\t *        <p><b>fo{o</b><u>ba}r</u></p> -> <p><b>fo</b><b>o</b><u>ba</u><u>r</u></b></p>\n\t *\n\t * **Note:** {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer} is that `breakAttributes` breaks all\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\n\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n\t * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container`\n\t * when {@link module:engine/view/range~Range#start start}\n\t * and {@link module:engine/view/range~Range#end end} positions of a passed range are not placed inside same parent container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element`\n\t * when trying to break attributes\n\t * inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element`\n\t * when trying to break attributes\n\t * inside {@link module:engine/view/uielement~UIElement UIElement}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#breakContainer\n\t * @param {module:engine/view/position~Position|module:engine/view/range~Range} positionOrRange Position where\n\t * to break attribute elements.\n\t * @returns {module:engine/view/position~Position|module:engine/view/range~Range} New position or range, after breaking the attribute\n\t * elements.\n\t */\n\tbreakAttributes( positionOrRange ) {\n\t\tif ( positionOrRange instanceof Position ) {\n\t\t\treturn this._breakAttributes( positionOrRange );\n\t\t} else {\n\t\t\treturn this._breakAttributesRange( positionOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Breaks {@link module:engine/view/containerelement~ContainerElement container view element} into two, at the given position. Position\n\t * has to be directly inside container element and cannot be in root. Does not break if position is at the beginning\n\t * or at the end of it's parent element.\n\t *\n\t *        <p>foo^bar</p> -> <p>foo</p><p>bar</p>\n\t *        <div><p>foo</p>^<p>bar</p></div> -> <div><p>foo</p></div><div><p>bar</p></div>\n\t *        <p>^foobar</p> -> ^<p>foobar</p>\n\t *        <p>foobar^</p> -> <p>foobar</p>^\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer} is that `breakAttributes` breaks all\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\n\t * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n\t * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#breakAttributes\n\t * @param {module:engine/view/position~Position} position Position where to break element.\n\t * @returns {module:engine/view/position~Position} Position between broken elements. If element has not been broken,\n\t * the returned position is placed either before it or after it.\n\t */\n\tbreakContainer( position ) {\n\t\tconst element = position.parent;\n\n\t\tif ( !( element.is( 'containerElement' ) ) ) {\n\t\t\t/**\n\t\t\t * Trying to break an element which is not a container element.\n\t\t\t *\n\t\t\t * @error view-writer-break-non-container-element\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-writer-break-non-container-element: Trying to break an element which is not a container element.'\n\t\t\t);\n\t\t}\n\n\t\tif ( !element.parent ) {\n\t\t\t/**\n\t\t\t * Trying to break root element.\n\t\t\t *\n\t\t\t * @error view-writer-break-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-break-root: Trying to break root element.' );\n\t\t}\n\n\t\tif ( position.isAtStart ) {\n\t\t\treturn Position._createBefore( element );\n\t\t} else if ( !position.isAtEnd ) {\n\t\t\tconst newElement = element._clone( false );\n\n\t\t\tthis.insert( Position._createAfter( element ), newElement );\n\n\t\t\tconst sourceRange = new Range( position, Position._createAt( element, 'end' ) );\n\t\t\tconst targetPosition = new Position( newElement, 0 );\n\n\t\t\tthis.move( sourceRange, targetPosition );\n\t\t}\n\n\t\treturn Position._createAfter( element );\n\t}\n\n\t/**\n\t * Merges {@link module:engine/view/attributeelement~AttributeElement attribute elements}. It also merges text nodes if needed.\n\t * Only {@link module:engine/view/attributeelement~AttributeElement#isSimilar similar} attribute elements can be merged.\n\t *\n\t * In following examples `<p>` is a container and `<b>` is an attribute element:\n\t *\n\t *        <p>foo[]bar</p> -> <p>foo{}bar</p>\n\t *        <p><b>foo</b>[]<b>bar</b></p> -> <p><b>foo{}bar</b></p>\n\t *        <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p> -> <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p>\n\t *\n\t * It will also take care about empty attributes when merging:\n\t *\n\t *        <p><b>[]</b></p> -> <p>[]</p>\n\t *        <p><b>foo</b><i>[]</i><b>bar</b></p> -> <p><b>foo{}bar</b></p>\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#mergeContainers\n\t * @param {module:engine/view/position~Position} position Merge position.\n\t * @returns {module:engine/view/position~Position} Position after merge.\n\t */\n\tmergeAttributes( position ) {\n\t\tconst positionOffset = position.offset;\n\t\tconst positionParent = position.parent;\n\n\t\t// When inside text node - nothing to merge.\n\t\tif ( positionParent.is( 'text' ) ) {\n\t\t\treturn position;\n\t\t}\n\n\t\t// When inside empty attribute - remove it.\n\t\tif ( positionParent.is( 'attributeElement' ) && positionParent.childCount === 0 ) {\n\t\t\tconst parent = positionParent.parent;\n\t\t\tconst offset = positionParent.index;\n\n\t\t\tpositionParent._remove();\n\t\t\tthis._removeFromClonedElementsGroup( positionParent );\n\n\t\t\treturn this.mergeAttributes( new Position( parent, offset ) );\n\t\t}\n\n\t\tconst nodeBefore = positionParent.getChild( positionOffset - 1 );\n\t\tconst nodeAfter = positionParent.getChild( positionOffset );\n\n\t\t// Position should be placed between two nodes.\n\t\tif ( !nodeBefore || !nodeAfter ) {\n\t\t\treturn position;\n\t\t}\n\n\t\t// When position is between two text nodes.\n\t\tif ( nodeBefore.is( 'text' ) && nodeAfter.is( 'text' ) ) {\n\t\t\treturn mergeTextNodes( nodeBefore, nodeAfter );\n\t\t}\n\t\t// When position is between two same attribute elements.\n\t\telse if ( nodeBefore.is( 'attributeElement' ) && nodeAfter.is( 'attributeElement' ) && nodeBefore.isSimilar( nodeAfter ) ) {\n\t\t\t// Move all children nodes from node placed after selection and remove that node.\n\t\t\tconst count = nodeBefore.childCount;\n\t\t\tnodeBefore._appendChild( nodeAfter.getChildren() );\n\n\t\t\tnodeAfter._remove();\n\t\t\tthis._removeFromClonedElementsGroup( nodeAfter );\n\n\t\t\t// New position is located inside the first node, before new nodes.\n\t\t\t// Call this method recursively to merge again if needed.\n\t\t\treturn this.mergeAttributes( new Position( nodeBefore, count ) );\n\t\t}\n\n\t\treturn position;\n\t}\n\n\t/**\n\t * Merges two {@link module:engine/view/containerelement~ContainerElement container elements} that are before and after given position.\n\t * Precisely, the element after the position is removed and it's contents are moved to element before the position.\n\t *\n\t *        <p>foo</p>^<p>bar</p> -> <p>foo^bar</p>\n\t *        <div>foo</div>^<p>bar</p> -> <div>foo^bar</div>\n\t *\n\t * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n\t * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n\t * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n\t * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n\t *\n\t * @see module:engine/view/attributeelement~AttributeElement\n\t * @see module:engine/view/containerelement~ContainerElement\n\t * @see module:engine/view/downcastwriter~DowncastWriter#mergeAttributes\n\t * @param {module:engine/view/position~Position} position Merge position.\n\t * @returns {module:engine/view/position~Position} Position after merge.\n\t */\n\tmergeContainers( position ) {\n\t\tconst prev = position.nodeBefore;\n\t\tconst next = position.nodeAfter;\n\n\t\tif ( !prev || !next || !prev.is( 'containerElement' ) || !next.is( 'containerElement' ) ) {\n\t\t\t/**\n\t\t\t * Element before and after given position cannot be merged.\n\t\t\t *\n\t\t\t * @error view-writer-merge-containers-invalid-position\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-merge-containers-invalid-position: ' +\n\t\t\t\t'Element before and after given position cannot be merged.' );\n\t\t}\n\n\t\tconst lastChild = prev.getChild( prev.childCount - 1 );\n\t\tconst newPosition = lastChild instanceof Text ? Position._createAt( lastChild, 'end' ) : Position._createAt( prev, 'end' );\n\n\t\tthis.move( Range._createIn( next ), Position._createAt( prev, 'end' ) );\n\t\tthis.remove( Range._createOn( next ) );\n\n\t\treturn newPosition;\n\t}\n\n\t/**\n\t * Insert node or nodes at specified position. Takes care about breaking attributes before insertion\n\t * and merging them afterwards.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n\t * contains instances that are not {@link module:engine/view/text~Text Texts},\n\t * {@link module:engine/view/attributeelement~AttributeElement AttributeElements},\n\t * {@link module:engine/view/containerelement~ContainerElement ContainerElements},\n\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElements} or\n\t * {@link module:engine/view/uielement~UIElement UIElements}.\n\t *\n\t * @param {module:engine/view/position~Position} position Insertion position.\n\t * @param {module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement|\n\t * module:engine/view/containerelement~ContainerElement|module:engine/view/emptyelement~EmptyElement|\n\t * module:engine/view/uielement~UIElement|Iterable.<module:engine/view/text~Text|\n\t * module:engine/view/attributeelement~AttributeElement|module:engine/view/containerelement~ContainerElement|\n\t * module:engine/view/emptyelement~EmptyElement|module:engine/view/uielement~UIElement>} nodes Node or nodes to insert.\n\t * @returns {module:engine/view/range~Range} Range around inserted nodes.\n\t */\n\tinsert( position, nodes ) {\n\t\tnodes = isIterable( nodes ) ? [ ...nodes ] : [ nodes ];\n\n\t\t// Check if nodes to insert are instances of AttributeElements, ContainerElements, EmptyElements, UIElements or Text.\n\t\tvalidateNodesToInsert( nodes );\n\n\t\tconst container = getParentContainer( position );\n\n\t\tif ( !container ) {\n\t\t\t/**\n\t\t\t * Position's parent container cannot be found.\n\t\t\t *\n\t\t\t * @error view-writer-invalid-position-container\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-invalid-position-container' );\n\t\t}\n\n\t\tconst insertionPosition = this._breakAttributes( position, true );\n\t\tconst length = container._insertChild( insertionPosition.offset, nodes );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tthis._addToClonedElementsGroup( node );\n\t\t}\n\n\t\tconst endPosition = insertionPosition.getShiftedBy( length );\n\t\tconst start = this.mergeAttributes( insertionPosition );\n\n\t\t// When no nodes were inserted - return collapsed range.\n\t\tif ( length === 0 ) {\n\t\t\treturn new Range( start, start );\n\t\t} else {\n\t\t\t// If start position was merged - move end position.\n\t\t\tif ( !start.isEqual( insertionPosition ) ) {\n\t\t\t\tendPosition.offset--;\n\t\t\t}\n\n\t\t\tconst end = this.mergeAttributes( endPosition );\n\n\t\t\treturn new Range( start, end );\n\t\t}\n\t}\n\n\t/**\n\t * Removes provided range from the container.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range|module:engine/view/item~Item} rangeOrItem Range to remove from container\n\t * or an {@link module:engine/view/item~Item item} to remove. If range is provided, after removing, it will be updated\n\t * to a collapsed range showing the new position.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} Document fragment containing removed nodes.\n\t */\n\tremove( rangeOrItem ) {\n\t\tconst range = rangeOrItem instanceof Range ? rangeOrItem : Range._createOn( rangeOrItem );\n\n\t\tvalidateRangeContainer( range );\n\n\t\t// If range is collapsed - nothing to remove.\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn new DocumentFragment();\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\t\tconst parentContainer = breakStart.parent;\n\n\t\tconst count = breakEnd.offset - breakStart.offset;\n\n\t\t// Remove nodes in range.\n\t\tconst removed = parentContainer._removeChildren( breakStart.offset, count );\n\n\t\tfor ( const node of removed ) {\n\t\t\tthis._removeFromClonedElementsGroup( node );\n\t\t}\n\n\t\t// Merge after removing.\n\t\tconst mergePosition = this.mergeAttributes( breakStart );\n\t\trange.start = mergePosition;\n\t\trange.end = mergePosition.clone();\n\n\t\t// Return removed nodes.\n\t\treturn new DocumentFragment( removed );\n\t}\n\n\t/**\n\t * Removes matching elements from given range.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range Range to clear.\n\t * @param {module:engine/view/element~Element} element Element to remove.\n\t */\n\tclear( range, element ) {\n\t\tvalidateRangeContainer( range );\n\n\t\t// Create walker on given range.\n\t\t// We walk backward because when we remove element during walk it modifies range end position.\n\t\tconst walker = range.getWalker( {\n\t\t\tdirection: 'backward',\n\t\t\tignoreElementEnd: true\n\t\t} );\n\n\t\t// Let's walk.\n\t\tfor ( const current of walker ) {\n\t\t\tconst item = current.item;\n\t\t\tlet rangeToRemove;\n\n\t\t\t// When current item matches to the given element.\n\t\t\tif ( item.is( 'element' ) && element.isSimilar( item ) ) {\n\t\t\t\t// Create range on this element.\n\t\t\t\trangeToRemove = Range._createOn( item );\n\t\t\t\t// When range starts inside Text or TextProxy element.\n\t\t\t} else if ( !current.nextPosition.isAfter( range.start ) && item.is( 'textProxy' ) ) {\n\t\t\t\t// We need to check if parent of this text matches to given element.\n\t\t\t\tconst parentElement = item.getAncestors().find( ancestor => {\n\t\t\t\t\treturn ancestor.is( 'element' ) && element.isSimilar( ancestor );\n\t\t\t\t} );\n\n\t\t\t\t// If it is then create range inside this element.\n\t\t\t\tif ( parentElement ) {\n\t\t\t\t\trangeToRemove = Range._createIn( parentElement );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we have found element to remove.\n\t\t\tif ( rangeToRemove ) {\n\t\t\t\t// We need to check if element range stick out of the given range and truncate if it is.\n\t\t\t\tif ( rangeToRemove.end.isAfter( range.end ) ) {\n\t\t\t\t\trangeToRemove.end = range.end;\n\t\t\t\t}\n\n\t\t\t\tif ( rangeToRemove.start.isBefore( range.start ) ) {\n\t\t\t\t\trangeToRemove.start = range.start;\n\t\t\t\t}\n\n\t\t\t\t// At the end we remove range with found element.\n\t\t\t\tthis.remove( rangeToRemove );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Moves nodes from provided range to target position.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} sourceRange Range containing nodes to move.\n\t * @param {module:engine/view/position~Position} targetPosition Position to insert.\n\t * @returns {module:engine/view/range~Range} Range in target container. Inserted nodes are placed between\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions.\n\t */\n\tmove( sourceRange, targetPosition ) {\n\t\tlet nodes;\n\n\t\tif ( targetPosition.isAfter( sourceRange.end ) ) {\n\t\t\ttargetPosition = this._breakAttributes( targetPosition, true );\n\n\t\t\tconst parent = targetPosition.parent;\n\t\t\tconst countBefore = parent.childCount;\n\n\t\t\tsourceRange = this._breakAttributesRange( sourceRange, true );\n\n\t\t\tnodes = this.remove( sourceRange );\n\n\t\t\ttargetPosition.offset += ( parent.childCount - countBefore );\n\t\t} else {\n\t\t\tnodes = this.remove( sourceRange );\n\t\t}\n\n\t\treturn this.insert( targetPosition, nodes );\n\t}\n\n\t/**\n     * Wraps elements within range with provided {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     * If a collapsed range is provided, it will be wrapped only if it is equal to view selection.\n     *\n     * If a collapsed range was passed and is same as selection, the selection\n     * will be moved to the inside of the wrapped attribute element.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-invalid-range-container`\n     * when {@link module:engine/view/range~Range#start}\n     * and {@link module:engine/view/range~Range#end} positions are not placed inside same parent container.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n     * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n     *\n     * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-nonselection-collapsed-range` when passed range\n     * is collapsed and different than view selection.\n     *\n     * @param {module:engine/view/range~Range} range Range to wrap.\n     * @param {module:engine/view/attributeelement~AttributeElement} attribute Attribute element to use as wrapper.\n     * @returns {module:engine/view/range~Range} range Range after wrapping, spanning over wrapping attribute element.\n    */\n\twrap( range, attribute ) {\n\t\tif ( !( attribute instanceof AttributeElement ) ) {\n\t\t\tthrow new CKEditorError( 'view-writer-wrap-invalid-attribute' );\n\t\t}\n\n\t\tvalidateRangeContainer( range );\n\n\t\tif ( !range.isCollapsed ) {\n\t\t\t// Non-collapsed range. Wrap it with the attribute element.\n\t\t\treturn this._wrapRange( range, attribute );\n\t\t} else {\n\t\t\t// Collapsed range. Wrap position.\n\t\t\tlet position = range.start;\n\n\t\t\tif ( position.parent.is( 'element' ) && !_hasNonUiChildren( position.parent ) ) {\n\t\t\t\tposition = position.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\n\t\t\t}\n\n\t\t\tposition = this._wrapPosition( position, attribute );\n\t\t\tconst viewSelection = this.document.selection;\n\n\t\t\t// If wrapping position is equal to view selection, move view selection inside wrapping attribute element.\n\t\t\tif ( viewSelection.isCollapsed && viewSelection.getFirstPosition().isEqual( range.start ) ) {\n\t\t\t\tthis.setSelection( position );\n\t\t\t}\n\n\t\t\treturn new Range( position );\n\t\t}\n\t}\n\n\t/**\n\t * Unwraps nodes within provided range from attribute element.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n\t * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n\t * same parent container.\n\t *\n\t * @param {module:engine/view/range~Range} range\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t */\n\tunwrap( range, attribute ) {\n\t\tif ( !( attribute instanceof AttributeElement ) ) {\n\t\t\t/**\n\t\t\t * Attribute element need to be instance of attribute element.\n\t\t\t *\n\t\t\t * @error view-writer-unwrap-invalid-attribute\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-unwrap-invalid-attribute' );\n\t\t}\n\n\t\tvalidateRangeContainer( range );\n\n\t\t// If range is collapsed - nothing to unwrap.\n\t\tif ( range.isCollapsed ) {\n\t\t\treturn range;\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\n\t\t// Range around one element - check if AttributeElement can be unwrapped partially when it's not similar.\n\t\t// For example:\n\t\t// <b class=\"foo bar\" title=\"baz\"></b> unwrap with:\t<b class=\"foo\"></p> result: <b class\"bar\" title=\"baz\"></b>\n\t\tif ( breakEnd.isEqual( breakStart.getShiftedBy( 1 ) ) ) {\n\t\t\tconst node = breakStart.nodeAfter;\n\n\t\t\t// Unwrap single attribute element.\n\t\t\tif ( !attribute.isSimilar( node ) && node instanceof AttributeElement && this._unwrapAttributeElement( attribute, node ) ) {\n\t\t\t\tconst start = this.mergeAttributes( breakStart );\n\n\t\t\t\tif ( !start.isEqual( breakStart ) ) {\n\t\t\t\t\tbreakEnd.offset--;\n\t\t\t\t}\n\n\t\t\t\tconst end = this.mergeAttributes( breakEnd );\n\n\t\t\t\treturn new Range( start, end );\n\t\t\t}\n\t\t}\n\n\t\tconst parentContainer = breakStart.parent;\n\n\t\t// Unwrap children located between break points.\n\t\tconst newRange = this._unwrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\n\n\t\t// Merge attributes at the both ends and return a new range.\n\t\tconst start = this.mergeAttributes( newRange.start );\n\n\t\t// If start position was merged - move end position back.\n\t\tif ( !start.isEqual( newRange.start ) ) {\n\t\t\tnewRange.end.offset--;\n\t\t}\n\n\t\tconst end = this.mergeAttributes( newRange.end );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Renames element by creating a copy of renamed element but with changed name and then moving contents of the\n\t * old element to the new one. Keep in mind that this will invalidate all {@link module:engine/view/position~Position positions} which\n\t * has renamed element as {@link module:engine/view/position~Position#parent a parent}.\n\t *\n\t * New element has to be created because `Element#tagName` property in DOM is readonly.\n\t *\n\t * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n\t *\n\t * @param {String} newName New name for element.\n\t * @param {module:engine/view/containerelement~ContainerElement} viewElement Element to be renamed.\n\t */\n\trename( newName, viewElement ) {\n\t\tconst newElement = new ContainerElement( newName, viewElement.getAttributes() );\n\n\t\tthis.insert( Position._createAfter( viewElement ), newElement );\n\t\tthis.move( Range._createIn( viewElement ), Position._createAt( newElement, 0 ) );\n\t\tthis.remove( Range._createOn( viewElement ) );\n\n\t\treturn newElement;\n\t}\n\n\t/**\n\t * Cleans up memory by removing obsolete cloned elements group from the writer.\n\t *\n\t * Should be used whenever all {@link module:engine/view/attributeelement~AttributeElement attribute elements}\n\t * with the same {@link module:engine/view/attributeelement~AttributeElement#id id} are going to be removed from the view and\n\t * the group will no longer be needed.\n\t *\n\t * Cloned elements group are not removed automatically in case if the group is still needed after all its elements\n\t * were removed from the view.\n\t *\n\t * Keep in mind that group names are equal to the `id` property of the attribute element.\n\t *\n\t * @param {String} groupName Name of the group to clear.\n\t */\n\tclearClonedElementsGroup( groupName ) {\n\t\tthis._cloneGroups.delete( groupName );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t Creates new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection|\n\t * module:engine/view/position~Position|Iterable.<module:engine/view/range~Range>|module:engine/view/range~Range|\n\t * module:engine/view/item~Item|null} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Wraps children with provided `attribute`. Only children contained in `parent` element between\n\t * `startOffset` and `endOffset` will be wrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} parent\n\t * @param {Number} startOffset\n\t * @param {Number} endOffset\n\t * @param {module:engine/view/element~Element} attribute\n\t */\n\t_wrapChildren( parent, startOffset, endOffset, attribute ) {\n\t\tlet i = startOffset;\n\t\tconst wrapPositions = [];\n\n\t\twhile ( i < endOffset ) {\n\t\t\tconst child = parent.getChild( i );\n\t\t\tconst isText = child.is( 'text' );\n\t\t\tconst isAttribute = child.is( 'attributeElement' );\n\t\t\tconst isEmpty = child.is( 'emptyElement' );\n\t\t\tconst isUI = child.is( 'uiElement' );\n\n\t\t\t// Wrap text, empty elements, ui elements or attributes with higher or equal priority.\n\t\t\tif ( isText || isEmpty || isUI || ( isAttribute && shouldABeOutsideB( attribute, child ) ) ) {\n\t\t\t\t// Clone attribute.\n\t\t\t\tconst newAttribute = attribute._clone();\n\n\t\t\t\t// Wrap current node with new attribute.\n\t\t\t\tchild._remove();\n\t\t\t\tnewAttribute._appendChild( child );\n\n\t\t\t\tparent._insertChild( i, newAttribute );\n\t\t\t\tthis._addToClonedElementsGroup( newAttribute );\n\n\t\t\t\twrapPositions.push(\tnew Position( parent, i ) );\n\t\t\t}\n\t\t\t// If other nested attribute is found start wrapping there.\n\t\t\telse if ( isAttribute ) {\n\t\t\t\tthis._wrapChildren( child, 0, child.childCount, attribute );\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\t// Merge at each wrap.\n\t\tlet offsetChange = 0;\n\n\t\tfor ( const position of wrapPositions ) {\n\t\t\tposition.offset -= offsetChange;\n\n\t\t\t// Do not merge with elements outside selected children.\n\t\t\tif ( position.offset == startOffset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newPosition = this.mergeAttributes( position );\n\n\t\t\t// If nodes were merged - other merge offsets will change.\n\t\t\tif ( !newPosition.isEqual( position ) ) {\n\t\t\t\toffsetChange++;\n\t\t\t\tendOffset--;\n\t\t\t}\n\t\t}\n\n\t\treturn Range._createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\n\t}\n\n\t/**\n\t * Unwraps children from provided `attribute`. Only children contained in `parent` element between\n\t * `startOffset` and `endOffset` will be unwrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} parent\n\t * @param {Number} startOffset\n\t * @param {Number} endOffset\n\t * @param {module:engine/view/element~Element} attribute\n\t */\n\t_unwrapChildren( parent, startOffset, endOffset, attribute ) {\n\t\tlet i = startOffset;\n\t\tconst unwrapPositions = [];\n\n\t\t// Iterate over each element between provided offsets inside parent.\n\t\twhile ( i < endOffset ) {\n\t\t\tconst child = parent.getChild( i );\n\n\t\t\t// If attributes are the similar, then unwrap.\n\t\t\tif ( child.isSimilar( attribute ) ) {\n\t\t\t\tconst unwrapped = child.getChildren();\n\t\t\t\tconst count = child.childCount;\n\n\t\t\t\t// Replace wrapper element with its children\n\t\t\t\tchild._remove();\n\t\t\t\tparent._insertChild( i, unwrapped );\n\n\t\t\t\tthis._removeFromClonedElementsGroup( child );\n\n\t\t\t\t// Save start and end position of moved items.\n\t\t\t\tunwrapPositions.push(\n\t\t\t\t\tnew Position( parent, i ),\n\t\t\t\t\tnew Position( parent, i + count )\n\t\t\t\t);\n\n\t\t\t\t// Skip elements that were unwrapped. Assuming that there won't be another element to unwrap in child\n\t\t\t\t// elements.\n\t\t\t\ti += count;\n\t\t\t\tendOffset += count - 1;\n\t\t\t} else {\n\t\t\t\t// If other nested attribute is found start unwrapping there.\n\t\t\t\tif ( child.is( 'attributeElement' ) ) {\n\t\t\t\t\tthis._unwrapChildren( child, 0, child.childCount, attribute );\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t// Merge at each unwrap.\n\t\tlet offsetChange = 0;\n\n\t\tfor ( const position of unwrapPositions ) {\n\t\t\tposition.offset -= offsetChange;\n\n\t\t\t// Do not merge with elements outside selected children.\n\t\t\tif ( position.offset == startOffset || position.offset == endOffset ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newPosition = this.mergeAttributes( position );\n\n\t\t\t// If nodes were merged - other merge offsets will change.\n\t\t\tif ( !newPosition.isEqual( position ) ) {\n\t\t\t\toffsetChange++;\n\t\t\t\tendOffset--;\n\t\t\t}\n\t\t}\n\n\t\treturn Range._createFromParentsAndOffsets( parent, startOffset, parent, endOffset );\n\t}\n\n\t/**\n\t * Helper function for `view.writer.wrap`. Wraps range with provided attribute element.\n\t * This method will also merge newly added attribute element with its siblings whenever possible.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t * @returns {module:engine/view/range~Range} New range after wrapping, spanning over wrapping attribute element.\n\t */\n\t_wrapRange( range, attribute ) {\n\t\t// Range is inside single attribute and spans on all children.\n\t\tif ( rangeSpansOnAllChildren( range ) && this._wrapAttributeElement( attribute, range.start.parent ) ) {\n\t\t\tconst parent = range.start.parent;\n\n\t\t\tconst end = this.mergeAttributes( Position._createAfter( parent ) );\n\t\t\tconst start = this.mergeAttributes( Position._createBefore( parent ) );\n\n\t\t\treturn new Range( start, end );\n\t\t}\n\n\t\t// Break attributes at range start and end.\n\t\tconst { start: breakStart, end: breakEnd } = this._breakAttributesRange( range, true );\n\n\t\t// Range around one element.\n\t\tif ( breakEnd.isEqual( breakStart.getShiftedBy( 1 ) ) ) {\n\t\t\tconst node = breakStart.nodeAfter;\n\n\t\t\tif ( node instanceof AttributeElement && this._wrapAttributeElement( attribute, node ) ) {\n\t\t\t\tconst start = this.mergeAttributes( breakStart );\n\n\t\t\t\tif ( !start.isEqual( breakStart ) ) {\n\t\t\t\t\tbreakEnd.offset--;\n\t\t\t\t}\n\n\t\t\t\tconst end = this.mergeAttributes( breakEnd );\n\n\t\t\t\treturn new Range( start, end );\n\t\t\t}\n\t\t}\n\n\t\tconst parentContainer = breakStart.parent;\n\n\t\t// Unwrap children located between break points.\n\t\tconst unwrappedRange = this._unwrapChildren( parentContainer, breakStart.offset, breakEnd.offset, attribute );\n\n\t\t// Wrap all children with attribute.\n\t\tconst newRange = this._wrapChildren( parentContainer, unwrappedRange.start.offset, unwrappedRange.end.offset, attribute );\n\n\t\t// Merge attributes at the both ends and return a new range.\n\t\tconst start = this.mergeAttributes( newRange.start );\n\n\t\t// If start position was merged - move end position back.\n\t\tif ( !start.isEqual( newRange.start ) ) {\n\t\t\tnewRange.end.offset--;\n\t\t}\n\t\tconst end = this.mergeAttributes( newRange.end );\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Helper function for {@link #wrap}. Wraps position with provided attribute element.\n\t * This method will also merge newly added attribute element with its siblings whenever possible.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n\t * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} position\n\t * @param {module:engine/view/attributeelement~AttributeElement} attribute\n\t * @returns {module:engine/view/position~Position} New position after wrapping.\n\t */\n\t_wrapPosition( position, attribute ) {\n\t\t// Return same position when trying to wrap with attribute similar to position parent.\n\t\tif ( attribute.isSimilar( position.parent ) ) {\n\t\t\treturn movePositionToTextNode( position.clone() );\n\t\t}\n\n\t\t// When position is inside text node - break it and place new position between two text nodes.\n\t\tif ( position.parent.is( 'text' ) ) {\n\t\t\tposition = breakTextNode( position );\n\t\t}\n\n\t\t// Create fake element that will represent position, and will not be merged with other attributes.\n\t\tconst fakePosition = this.createAttributeElement();\n\t\tfakePosition._priority = Number.POSITIVE_INFINITY;\n\t\tfakePosition.isSimilar = () => false;\n\n\t\t// Insert fake element in position location.\n\t\tposition.parent._insertChild( position.offset, fakePosition );\n\n\t\t// Range around inserted fake attribute element.\n\t\tconst wrapRange = new Range( position, position.getShiftedBy( 1 ) );\n\n\t\t// Wrap fake element with attribute (it will also merge if possible).\n\t\tthis.wrap( wrapRange, attribute );\n\n\t\t// Remove fake element and place new position there.\n\t\tconst newPosition = new Position( fakePosition.parent, fakePosition.index );\n\t\tfakePosition._remove();\n\n\t\t// If position is placed between text nodes - merge them and return position inside.\n\t\tconst nodeBefore = newPosition.nodeBefore;\n\t\tconst nodeAfter = newPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof Text && nodeAfter instanceof Text ) {\n\t\t\treturn mergeTextNodes( nodeBefore, nodeAfter );\n\t\t}\n\n\t\t// If position is next to text node - move position inside.\n\t\treturn movePositionToTextNode( newPosition );\n\t}\n\n\t/**\n\t * \tWraps one {@link module:engine/view/attributeelement~AttributeElement AttributeElement} into another by\n\t * \tmerging them if possible. When merging is possible - all attributes, styles and classes are moved from wrapper\n\t * \telement to element being wrapped.\n\t *\n\t * \t@private\n\t * \t@param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n\t * \t@param {module:engine/view/attributeelement~AttributeElement} toWrap AttributeElement to wrap using wrapper element.\n\t * \t@returns {Boolean} Returns `true` if elements are merged.\n\t */\n\t_wrapAttributeElement( wrapper, toWrap ) {\n\t\tif ( !canBeJoined( wrapper, toWrap ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can't merge if name or priority differs.\n\t\tif ( wrapper.name !== toWrap.name || wrapper.priority !== toWrap.priority ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if attributes can be merged.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If some attributes are different we cannot wrap.\n\t\t\tif ( toWrap.hasAttribute( key ) && toWrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if styles can be merged.\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\tif ( toWrap.hasStyle( key ) && toWrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Move all attributes/classes/styles from wrapper to wrapped AttributeElement.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Move only these attributes that are not present - other are similar.\n\t\t\tif ( !toWrap.hasAttribute( key ) ) {\n\t\t\t\tthis.setAttribute( key, wrapper.getAttribute( key ), toWrap );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\tif ( !toWrap.hasStyle( key ) ) {\n\t\t\t\tthis.setStyle( key, wrapper.getStyle( key ), toWrap );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of wrapper.getClassNames() ) {\n\t\t\tif ( !toWrap.hasClass( key ) ) {\n\t\t\t\tthis.addClass( key, toWrap );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Unwraps {@link module:engine/view/attributeelement~AttributeElement AttributeElement} from another by removing\n\t * corresponding attributes, classes and styles. All attributes, classes and styles from wrapper should be present\n\t * inside element being unwrapped.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n\t * @param {module:engine/view/attributeelement~AttributeElement} toUnwrap AttributeElement to unwrap using wrapper element.\n\t * @returns {Boolean} Returns `true` if elements are unwrapped.\n\t **/\n\t_unwrapAttributeElement( wrapper, toUnwrap ) {\n\t\tif ( !canBeJoined( wrapper, toUnwrap ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can't unwrap if name or priority differs.\n\t\tif ( wrapper.name !== toUnwrap.name || wrapper.priority !== toUnwrap.priority ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper attributes.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If some attributes are missing or different we cannot unwrap.\n\t\t\tif ( !toUnwrap.hasAttribute( key ) || toUnwrap.getAttribute( key ) !== wrapper.getAttribute( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper classes.\n\t\tif ( !toUnwrap.hasClass( ...wrapper.getClassNames() ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if AttributeElement has all wrapper styles.\n\t\tfor ( const key of wrapper.getStyleNames() ) {\n\t\t\t// If some styles are missing or different we cannot unwrap.\n\t\t\tif ( !toUnwrap.hasStyle( key ) || toUnwrap.getStyle( key ) !== wrapper.getStyle( key ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Remove all wrapper's attributes from unwrapped element.\n\t\tfor ( const key of wrapper.getAttributeKeys() ) {\n\t\t\t// Classes and styles should be checked separately.\n\t\t\tif ( key === 'class' || key === 'style' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.removeAttribute( key, toUnwrap );\n\t\t}\n\n\t\t// Remove all wrapper's classes from unwrapped element.\n\t\tthis.removeClass( Array.from( wrapper.getClassNames() ), toUnwrap );\n\n\t\t// Remove all wrapper's styles from unwrapped element.\n\t\tthis.removeStyle( Array.from( wrapper.getStyleNames() ), toUnwrap );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at the boundaries of given range.\n\t *\n\t * @private\n\t * @param {module:engine/view/range~Range} range Range which `start` and `end` positions will be used to break attributes.\n\t * @param {Boolean} [forceSplitText=false] If set to `true`, will break text nodes even if they are directly in container element.\n\t * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n\t * @returns {module:engine/view/range~Range} New range with located at break positions.\n\t */\n\t_breakAttributesRange( range, forceSplitText = false ) {\n\t\tconst rangeStart = range.start;\n\t\tconst rangeEnd = range.end;\n\n\t\tvalidateRangeContainer( range );\n\n\t\t// Break at the collapsed position. Return new collapsed range.\n\t\tif ( range.isCollapsed ) {\n\t\t\tconst position = this._breakAttributes( range.start, forceSplitText );\n\n\t\t\treturn new Range( position, position );\n\t\t}\n\n\t\tconst breakEnd = this._breakAttributes( rangeEnd, forceSplitText );\n\t\tconst count = breakEnd.parent.childCount;\n\t\tconst breakStart = this._breakAttributes( rangeStart, forceSplitText );\n\n\t\t// Calculate new break end offset.\n\t\tbreakEnd.offset += breakEnd.parent.childCount - count;\n\n\t\treturn new Range( breakStart, breakEnd );\n\t}\n\n\t/**\n\t * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at given position.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element` when break position\n\t * is placed inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element` when break position\n\t * is placed inside {@link module:engine/view/uielement~UIElement UIElement}.\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} position Position where to break attributes.\n\t * @param {Boolean} [forceSplitText=false] If set to `true`, will break text nodes even if they are directly in container element.\n\t * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n\t * @returns {module:engine/view/position~Position} New position after breaking the attributes.\n\t */\n\t_breakAttributes( position, forceSplitText = false ) {\n\t\tconst positionOffset = position.offset;\n\t\tconst positionParent = position.parent;\n\n\t\t// If position is placed inside EmptyElement - throw an exception as we cannot break inside.\n\t\tif ( position.parent.is( 'emptyElement' ) ) {\n\t\t\t/**\n\t\t\t * Cannot break inside EmptyElement instance.\n\t\t\t *\n\t\t\t * @error view-writer-cannot-break-empty-element\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-cannot-break-empty-element' );\n\t\t}\n\n\t\t// If position is placed inside UIElement - throw an exception as we cannot break inside.\n\t\tif ( position.parent.is( 'uiElement' ) ) {\n\t\t\t/**\n\t\t\t * Cannot break inside UIElement instance.\n\t\t\t *\n\t\t\t * @error view-writer-cannot-break-ui-element\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-cannot-break-ui-element' );\n\t\t}\n\n\t\t// There are no attributes to break and text nodes breaking is not forced.\n\t\tif ( !forceSplitText && positionParent.is( 'text' ) && isContainerOrFragment( positionParent.parent ) ) {\n\t\t\treturn position.clone();\n\t\t}\n\n\t\t// Position's parent is container, so no attributes to break.\n\t\tif ( isContainerOrFragment( positionParent ) ) {\n\t\t\treturn position.clone();\n\t\t}\n\n\t\t// Break text and start again in new position.\n\t\tif ( positionParent.is( 'text' ) ) {\n\t\t\treturn this._breakAttributes( breakTextNode( position ), forceSplitText );\n\t\t}\n\n\t\tconst length = positionParent.childCount;\n\n\t\t// <p>foo<b><u>bar{}</u></b></p>\n\t\t// <p>foo<b><u>bar</u>[]</b></p>\n\t\t// <p>foo<b><u>bar</u></b>[]</p>\n\t\tif ( positionOffset == length ) {\n\t\t\tconst newPosition = new Position( positionParent.parent, positionParent.index + 1 );\n\n\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t} else\n\t\t// <p>foo<b><u>{}bar</u></b></p>\n\t\t// <p>foo<b>[]<u>bar</u></b></p>\n\t\t// <p>foo{}<b><u>bar</u></b></p>\n\t\tif ( positionOffset === 0 ) {\n\t\t\tconst newPosition = new Position( positionParent.parent, positionParent.index );\n\n\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t}\n\t\t// <p>foo<b><u>b{}ar</u></b></p>\n\t\t// <p>foo<b><u>b[]ar</u></b></p>\n\t\t// <p>foo<b><u>b</u>[]<u>ar</u></b></p>\n\t\t// <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n\t\telse {\n\t\t\tconst offsetAfter = positionParent.index + 1;\n\n\t\t\t// Break element.\n\t\t\tconst clonedNode = positionParent._clone();\n\n\t\t\t// Insert cloned node to position's parent node.\n\t\t\tpositionParent.parent._insertChild( offsetAfter, clonedNode );\n\t\t\tthis._addToClonedElementsGroup( clonedNode );\n\n\t\t\t// Get nodes to move.\n\t\t\tconst count = positionParent.childCount - positionOffset;\n\t\t\tconst nodesToMove = positionParent._removeChildren( positionOffset, count );\n\n\t\t\t// Move nodes to cloned node.\n\t\t\tclonedNode._appendChild( nodesToMove );\n\n\t\t\t// Create new position to work on.\n\t\t\tconst newPosition = new Position( positionParent.parent, offsetAfter );\n\n\t\t\treturn this._breakAttributes( newPosition, forceSplitText );\n\t\t}\n\t}\n\n\t/**\n\t * Stores the information that an {@link module:engine/view/attributeelement~AttributeElement attribute element} was\n\t * added to the tree. Saves the reference to the group in the given element and updates the group, so other elements\n\t * from the group now keep a reference to the given attribute element.\n\t *\n\t * The clones group can be obtained using {@link module:engine/view/attributeelement~AttributeElement#getElementsWithSameId}.\n\t *\n\t * Does nothing if added element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} element Attribute element to save.\n\t */\n\t_addToClonedElementsGroup( element ) {\n\t\t// Add only if the element is in document tree.\n\t\tif ( !element.root.is( 'rootElement' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Traverse the element's children recursively to find other attribute elements that also might got inserted.\n\t\t// The loop is at the beginning so we can make fast returns later in the code.\n\t\tif ( element.is( 'element' ) ) {\n\t\t\tfor ( const child of element.getChildren() ) {\n\t\t\t\tthis._addToClonedElementsGroup( child );\n\t\t\t}\n\t\t}\n\n\t\tconst id = element.id;\n\n\t\tif ( !id ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet group = this._cloneGroups.get( id );\n\n\t\tif ( !group ) {\n\t\t\tgroup = new Set();\n\t\t\tthis._cloneGroups.set( id, group );\n\t\t}\n\n\t\tgroup.add( element );\n\t\telement._clonesGroup = group;\n\t}\n\n\t/**\n\t * Removes all the information about the given {@link module:engine/view/attributeelement~AttributeElement attribute element}\n\t * from its clones group.\n\t *\n\t * Keep in mind, that the element will still keep a reference to the group (but the group will not keep a reference to it).\n\t * This allows to reference the whole group even if the element was already removed from the tree.\n\t *\n\t * Does nothing if the element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n\t *\n\t * @private\n\t * @param {module:engine/view/attributeelement~AttributeElement} element Attribute element to remove.\n\t */\n\t_removeFromClonedElementsGroup( element ) {\n\t\t// Traverse the element's children recursively to find other attribute elements that also got removed.\n\t\t// The loop is at the beginning so we can make fast returns later in the code.\n\t\tif ( element.is( 'element' ) ) {\n\t\t\tfor ( const child of element.getChildren() ) {\n\t\t\t\tthis._removeFromClonedElementsGroup( child );\n\t\t\t}\n\t\t}\n\n\t\tconst id = element.id;\n\n\t\tif ( !id ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst group = this._cloneGroups.get( id );\n\n\t\tif ( !group ) {\n\t\t\treturn;\n\t\t}\n\n\t\tgroup.delete( element );\n\t\t// Not removing group from element on purpose!\n\t\t// If other parts of code have reference to this element, they will be able to get references to other elements from the group.\n\t}\n}\n\n// Helper function for `view.writer.wrap`. Checks if given element has any children that are not ui elements.\nfunction _hasNonUiChildren( parent ) {\n\treturn Array.from( parent.getChildren() ).some( child => !child.is( 'uiElement' ) );\n}\n\n/**\n * Attribute element need to be instance of attribute element.\n *\n * @error view-writer-wrap-invalid-attribute\n */\n\n// Returns first parent container of specified {@link module:engine/view/position~Position Position}.\n// Position's parent node is checked as first, then next parents are checked.\n// Note that {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n//\n// @param {module:engine/view/position~Position} position Position used as a start point to locate parent container.\n// @returns {module:engine/view/containerelement~ContainerElement|module:engine/view/documentfragment~DocumentFragment|undefined}\n// Parent container element or `undefined` if container is not found.\nfunction getParentContainer( position ) {\n\tlet parent = position.parent;\n\n\twhile ( !isContainerOrFragment( parent ) ) {\n\t\tif ( !parent ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tparent = parent.parent;\n\t}\n\n\treturn parent;\n}\n\n// Checks if first {@link module:engine/view/attributeelement~AttributeElement AttributeElement} provided to the function\n// can be wrapped otuside second element. It is done by comparing elements'\n// {@link module:engine/view/attributeelement~AttributeElement#priority priorities}, if both have same priority\n// {@link module:engine/view/element~Element#getIdentity identities} are compared.\n//\n// @param {module:engine/view/attributeelement~AttributeElement} a\n// @param {module:engine/view/attributeelement~AttributeElement} b\n// @returns {Boolean}\nfunction shouldABeOutsideB( a, b ) {\n\tif ( a.priority < b.priority ) {\n\t\treturn true;\n\t} else if ( a.priority > b.priority ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use identities.\n\treturn a.getIdentity() < b.getIdentity();\n}\n\n// Returns new position that is moved to near text node. Returns same position if there is no text node before of after\n// specified position.\n//\n//\t\t<p>foo[]</p>  ->  <p>foo{}</p>\n//\t\t<p>[]foo</p>  ->  <p>{}foo</p>\n//\n// @param {module:engine/view/position~Position} position\n// @returns {module:engine/view/position~Position} Position located inside text node or same position if there is no text nodes\n// before or after position location.\nfunction movePositionToTextNode( position ) {\n\tconst nodeBefore = position.nodeBefore;\n\n\tif ( nodeBefore && nodeBefore.is( 'text' ) ) {\n\t\treturn new Position( nodeBefore, nodeBefore.data.length );\n\t}\n\n\tconst nodeAfter = position.nodeAfter;\n\n\tif ( nodeAfter && nodeAfter.is( 'text' ) ) {\n\t\treturn new Position( nodeAfter, 0 );\n\t}\n\n\treturn position;\n}\n\n// Breaks text node into two text nodes when possible.\n//\n//\t\t<p>foo{}bar</p> -> <p>foo[]bar</p>\n//\t\t<p>{}foobar</p> -> <p>[]foobar</p>\n//\t\t<p>foobar{}</p> -> <p>foobar[]</p>\n//\n// @param {module:engine/view/position~Position} position Position that need to be placed inside text node.\n// @returns {module:engine/view/position~Position} New position after breaking text node.\nfunction breakTextNode( position ) {\n\tif ( position.offset == position.parent.data.length ) {\n\t\treturn new Position( position.parent.parent, position.parent.index + 1 );\n\t}\n\n\tif ( position.offset === 0 ) {\n\t\treturn new Position( position.parent.parent, position.parent.index );\n\t}\n\n\t// Get part of the text that need to be moved.\n\tconst textToMove = position.parent.data.slice( position.offset );\n\n\t// Leave rest of the text in position's parent.\n\tposition.parent._data = position.parent.data.slice( 0, position.offset );\n\n\t// Insert new text node after position's parent text node.\n\tposition.parent.parent._insertChild( position.parent.index + 1, new Text( textToMove ) );\n\n\t// Return new position between two newly created text nodes.\n\treturn new Position( position.parent.parent, position.parent.index + 1 );\n}\n\n// Merges two text nodes into first node. Removes second node and returns merge position.\n//\n// @param {module:engine/view/text~Text} t1 First text node to merge. Data from second text node will be moved at the end of\n// this text node.\n// @param {module:engine/view/text~Text} t2 Second text node to merge. This node will be removed after merging.\n// @returns {module:engine/view/position~Position} Position after merging text nodes.\nfunction mergeTextNodes( t1, t2 ) {\n\t// Merge text data into first text node and remove second one.\n\tconst nodeBeforeLength = t1.data.length;\n\tt1._data += t2.data;\n\tt2._remove();\n\n\treturn new Position( t1, nodeBeforeLength );\n}\n\n// Returns `true` if range is located in same {@link module:engine/view/attributeelement~AttributeElement AttributeElement}\n// (`start` and `end` positions are located inside same {@link module:engine/view/attributeelement~AttributeElement AttributeElement}),\n// starts on 0 offset and ends after last child node.\n//\n// @param {module:engine/view/range~Range} Range\n// @returns {Boolean}\nfunction rangeSpansOnAllChildren( range ) {\n\treturn range.start.parent == range.end.parent && range.start.parent.is( 'attributeElement' ) &&\n\t\trange.start.offset === 0 && range.end.offset === range.start.parent.childCount;\n}\n\n// Checks if provided nodes are valid to insert. Checks if each node is an instance of\n// {@link module:engine/view/text~Text Text} or {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n// {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElement} or\n// {@link module:engine/view/uielement~UIElement UIElement}.\n//\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n// contains instances that are not {@link module:engine/view/text~Text Texts},\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElements},\n// {@link module:engine/view/uielement~UIElement UIElements},\n// {@link module:engine/view/attributeelement~AttributeElement AttributeElements} or\n// {@link module:engine/view/containerelement~ContainerElement ContainerElements}.\n//\n// @param Iterable.<module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement\n// |module:engine/view/containerelement~ContainerElement> nodes\nfunction validateNodesToInsert( nodes ) {\n\tfor ( const node of nodes ) {\n\t\tif ( !validNodesToInsert.some( ( validNode => node instanceof validNode ) ) ) { // eslint-disable-line no-use-before-define\n\t\t\t/**\n\t\t\t * Inserted nodes should be valid to insert. of {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n\t\t\t * {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n\t\t\t * {@link module:engine/view/emptyelement~EmptyElement EmptyElement},\n\t\t\t * {@link module:engine/view/uielement~UIElement UIElement}, {@link module:engine/view/text~Text Text}.\n\t\t\t *\n\t\t\t * @error view-writer-insert-invalid-node\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-writer-insert-invalid-node' );\n\t\t}\n\n\t\tif ( !node.is( 'text' ) ) {\n\t\t\tvalidateNodesToInsert( node.getChildren() );\n\t\t}\n\t}\n}\n\nconst validNodesToInsert = [ Text, AttributeElement, ContainerElement, EmptyElement, UIElement ];\n\n// Checks if node is ContainerElement or DocumentFragment, because in most cases they should be treated the same way.\n//\n// @param {module:engine/view/node~Node} node\n// @returns {Boolean} Returns `true` if node is instance of ContainerElement or DocumentFragment.\nfunction isContainerOrFragment( node ) {\n\treturn node && ( node.is( 'containerElement' ) || node.is( 'documentFragment' ) );\n}\n\n// Checks if {@link module:engine/view/range~Range#start range start} and {@link module:engine/view/range~Range#end range end} are placed\n// inside same {@link module:engine/view/containerelement~ContainerElement container element}.\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when validation fails.\n//\n// @param {module:engine/view/range~Range} range\nfunction validateRangeContainer( range ) {\n\tconst startContainer = getParentContainer( range.start );\n\tconst endContainer = getParentContainer( range.end );\n\n\tif ( !startContainer || !endContainer || startContainer !== endContainer ) {\n\t\t/**\n\t\t * Range container is invalid. This can happen if {@link module:engine/view/range~Range#start range start} and\n\t\t * {@link module:engine/view/range~Range#end range end} positions are not placed inside same container or\n\t\t * parent container for these positions cannot be found.\n\t\t *\n\t\t * @error view-writer-invalid-range-container\n\t\t */\n\t\tthrow new CKEditorError( 'view-writer-invalid-range-container' );\n\t}\n}\n\n// Checks if two attribute elements can be joined together. Elements can be joined together if, and only if\n// they do not have ids specified.\n//\n// @private\n// @param {module:engine/view/element~Element} a\n// @param {module:engine/view/element~Element} b\n// @returns {Boolean}\nfunction canBeJoined( a, b ) {\n\treturn a.id === null && b.id === null;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/istext\n */\n\n/**\n * Checks if the object is a native DOM Text node.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isText( obj ) {\n\treturn Object.prototype.toString.call( obj ) == '[object Text]';\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals window */\n\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\n\n/**\n * Set of utils related to block and inline fillers handling.\n *\n * Browsers do not allow to put caret in elements which does not have height. Because of it, we need to fill all\n * empty elements which should be selectable with elements or characters called \"fillers\". Unfortunately there is no one\n * universal filler, this is why two types are uses:\n *\n * * Block filler is an element which fill block elements, like `<p>`. CKEditor uses `<br>` as a block filler during the editing,\n * as browsers do natively. So instead of an empty `<p>` there will be `<p><br></p>`. The advantage of block filler is that\n * it is transparent for the selection, so when the caret is before the `<br>` and user presses right arrow he will be\n * moved to the next paragraph, not after the `<br>`. The disadvantage is that it breaks a block, so it can not be used\n * in the middle of a line of text. The {@link module:engine/view/filler~BR_FILLER `<br>` filler} can be replaced with any other\n * character in the data output, for instance {@link module:engine/view/filler~NBSP_FILLER non-breaking space}.\n *\n * * Inline filler is a filler which does not break a line of text, so it can be used inside the text, for instance in the empty\n * `<b>` surrendered by text: `foo<b></b>bar`, if we want to put the caret there. CKEditor uses a sequence of the zero-width\n * spaces as an {@link module:engine/view/filler~INLINE_FILLER inline filler} having the predetermined\n * {@link module:engine/view/filler~INLINE_FILLER_LENGTH length}. A sequence is used, instead of a single character to\n * avoid treating random zero-width spaces as the inline filler. Disadvantage of the inline filler is that it is not\n * transparent for the selection. The arrow key moves the caret between zero-width spaces characters, so the additional\n * code is needed to handle the caret.\n *\n * Both inline and block fillers are handled by the {@link module:engine/view/renderer~Renderer renderer} and are not present in the\n * view.\n *\n * @module engine/view/filler\n */\n\n/**\n * `<br>` filler creator. This is a function which creates `<br data-cke-filler=\"true\">` element.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~NBSP_FILLER\n * @function\n */\nexport const BR_FILLER = domDocument => {\n\tconst fillerBr = domDocument.createElement( 'br' );\n\tfillerBr.dataset.ckeFiller = true;\n\n\treturn fillerBr;\n};\n\n/**\n * Non-breaking space filler creator. This is a function which creates `&nbsp;` text node.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~BR_FILLER\n * @function\n */\nexport const NBSP_FILLER = domDocument => domDocument.createTextNode( '\\u00A0' );\n\n/**\n * Length of the {@link module:engine/view/filler~INLINE_FILLER INLINE_FILLER}.\n */\nexport const INLINE_FILLER_LENGTH = 7;\n\n/**\n * Inline filler which is sequence of the zero width spaces.\n */\nexport let INLINE_FILLER = '';\n\nfor ( let i = 0; i < INLINE_FILLER_LENGTH; i++ ) {\n\tINLINE_FILLER += '\\u200b';\n}\n\n/**\n * Checks if the node is a text node which starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n *\t\tstartsWithFiller( document.createTextNode( INLINE_FILLER ) ); // true\n *\t\tstartsWithFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // true\n *\t\tstartsWithFiller( document.createTextNode( 'foo' ) ); // false\n *\t\tstartsWithFiller( document.createElement( 'p' ) ); // false\n *\n * @param {Node} domNode DOM node.\n * @returns {Boolean} True if the text node starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function startsWithFiller( domNode ) {\n\treturn isText( domNode ) && ( domNode.data.substr( 0, INLINE_FILLER_LENGTH ) === INLINE_FILLER );\n}\n\n/**\n * Checks if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n *\t\tisInlineFiller( document.createTextNode( INLINE_FILLER ) ); // true\n *\t\tisInlineFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // false\n *\n * @param {Text} domText DOM text node.\n * @returns {Boolean} True if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function isInlineFiller( domText ) {\n\treturn domText.data.length == INLINE_FILLER_LENGTH && startsWithFiller( domText );\n}\n\n/**\n * Get string data from the text node, removing an {@link module:engine/view/filler~INLINE_FILLER inline filler} from it,\n * if text node contains it.\n *\n *\t\tgetDataWithoutFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ) == 'foo' // true\n *\t\tgetDataWithoutFiller( document.createTextNode( 'foo' ) ) == 'foo' // true\n *\n * @param {Text} domText DOM text node, possible with inline filler.\n * @returns {String} Data without filler.\n */\nexport function getDataWithoutFiller( domText ) {\n\tif ( startsWithFiller( domText ) ) {\n\t\treturn domText.data.slice( INLINE_FILLER_LENGTH );\n\t} else {\n\t\treturn domText.data;\n\t}\n}\n\n// Cache block fillers templates to improve performance.\nconst templateBlockFillers = new WeakMap();\n\n/**\n * Checks if the node is an instance of the block filler of the given type.\n *\n *\t\tconst brFillerInstance = BR_FILLER( document );\n *\t\tisBlockFiller( brFillerInstance, BR_FILLER ); // true\n *\n * @param {Node} domNode DOM node to check.\n * @param {Function} blockFiller Block filler creator.\n * @returns {Boolean} True if text node contains only {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\nexport function isBlockFiller( domNode, blockFiller ) {\n\tlet templateBlockFiller = templateBlockFillers.get( blockFiller );\n\n\tif ( !templateBlockFiller ) {\n\t\ttemplateBlockFiller = blockFiller( window.document );\n\t\ttemplateBlockFillers.set( blockFiller, templateBlockFiller );\n\t}\n\n\treturn domNode.isEqualNode( templateBlockFiller );\n}\n\n/**\n * Assign key observer which move cursor from the end of the inline filler to the beginning of it when\n * the left arrow is pressed, so the filler does not break navigation.\n *\n * @param {module:engine/view/view~View} view View controller instance we should inject quirks handling on.\n */\nexport function injectQuirksHandling( view ) {\n\tview.document.on( 'keydown', jumpOverInlineFiller );\n}\n\n// Move cursor from the end of the inline filler to the beginning of it when, so the filler does not break navigation.\nfunction jumpOverInlineFiller( evt, data ) {\n\tif ( data.keyCode == keyCodes.arrowleft ) {\n\t\tconst domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n\t\tif ( domSelection.rangeCount == 1 && domSelection.getRangeAt( 0 ).collapsed ) {\n\t\t\tconst domParent = domSelection.getRangeAt( 0 ).startContainer;\n\t\t\tconst domOffset = domSelection.getRangeAt( 0 ).startOffset;\n\n\t\t\tif ( startsWithFiller( domParent ) && domOffset <= INLINE_FILLER_LENGTH ) {\n\t\t\t\tdomSelection.collapse( domParent, 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/diff\n */\n\n// The following code is based on the \"O(NP) Sequence Comparison Algorithm\"\n// by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n\n/**\n * Calculates the difference between two arrays or strings producing an array containing a list of changes\n * necessary to transform input into output.\n *\n *\t\tdiff( 'aba', 'acca' ); // [ 'equal', 'insert', 'insert', 'delete', 'equal' ]\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Output array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default === is used.\n * @returns {Array} Array of changes.\n */\nexport default function diff( a, b, cmp ) {\n\t// Set the comparator function.\n\tcmp = cmp || function( a, b ) {\n\t\treturn a === b;\n\t};\n\n\t// Temporary action type statics.\n\tlet _insert, _delete;\n\n\t// Swapped the arrays to use the shorter one as the first one.\n\tif ( b.length < a.length ) {\n\t\tconst tmp = a;\n\n\t\ta = b;\n\t\tb = tmp;\n\n\t\t// We swap the action types as well.\n\t\t_insert = 'delete';\n\t\t_delete = 'insert';\n\t} else {\n\t\t_insert = 'insert';\n\t\t_delete = 'delete';\n\t}\n\n\tconst m = a.length;\n\tconst n = b.length;\n\tconst delta = n - m;\n\n\t// Edit scripts, for each diagonal.\n\tconst es = {};\n\t// Furthest points, the furthest y we can get on each diagonal.\n\tconst fp = {};\n\n\tfunction snake( k ) {\n\t\t// We use -1 as an alternative below to handle initial values ( instead of filling the fp with -1 first ).\n\t\t// Furthest points (y) on the diagonal below k.\n\t\tconst y1 = ( fp[ k - 1 ] !== undefined ? fp[ k - 1 ] : -1 ) + 1;\n\t\t// Furthest points (y) on the diagonal above k.\n\t\tconst y2 = fp[ k + 1 ] !== undefined ? fp[ k + 1 ] : -1;\n\t\t// The way we should go to get further.\n\t\tconst dir = y1 > y2 ? -1 : 1;\n\n\t\t// Clone previous changes array (if any).\n\t\tif ( es[ k + dir ] ) {\n\t\t\tes[ k ] = es[ k + dir ].slice( 0 );\n\t\t}\n\n\t\t// Create changes array.\n\t\tif ( !es[ k ] ) {\n\t\t\tes[ k ] = [];\n\t\t}\n\n\t\t// Push the action.\n\t\tes[ k ].push( y1 > y2 ? _insert : _delete );\n\n\t\t// Set the beginning coordinates.\n\t\tlet y = Math.max( y1, y2 );\n\t\tlet x = y - k;\n\n\t\t// Traverse the diagonal as long as the values match.\n\t\twhile ( x < m && y < n && cmp( a[ x ], b[ y ] ) ) {\n\t\t\tx++;\n\t\t\ty++;\n\t\t\t// Push no change action.\n\t\t\tes[ k ].push( 'equal' );\n\t\t}\n\n\t\treturn y;\n\t}\n\n\tlet p = 0;\n\tlet k;\n\n\t// Traverse the graph until we reach the end of the longer string.\n\tdo {\n\t\t// Updates furthest points and edit scripts for diagonals below delta.\n\t\tfor ( k = -p; k < delta; k++ ) {\n\t\t\tfp[ k ] = snake( k );\n\t\t}\n\n\t\t// Updates furthest points and edit scripts for diagonals above delta.\n\t\tfor ( k = delta + p; k > delta; k-- ) {\n\t\t\tfp[ k ] = snake( k );\n\t\t}\n\n\t\t// Updates furthest point and edit script for the delta diagonal.\n\t\t// note that the delta diagonal is the one which goes through the sink (m, n).\n\t\tfp[ delta ] = snake( delta );\n\n\t\tp++;\n\t} while ( fp[ delta ] !== n );\n\n\t// Return the final list of edit changes.\n\t// We remove the first item that represents the action for the injected nulls.\n\treturn es[ delta ].slice( 1 );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/insertat\n */\n\n/**\n * Inserts node to the parent at given index.\n *\n * @param {Element} parentElement Parent element.\n * @param {Number} index Insertions index.\n * @param {Node} nodeToInsert Node to insert.\n */\nexport default function insertAt( parentElement, index, nodeToInsert ) {\n\tparentElement.insertBefore( nodeToInsert, parentElement.childNodes[ index ] || null );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/remove\n */\n\n/**\n * Removes given node from parent.\n *\n * @param {Node} node Node to remove.\n */\nexport default function remove( node ) {\n\tconst parent = node.parentNode;\n\n\tif ( parent ) {\n\t\tparent.removeChild( node );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/isnode\n */\n\n/**\n * Checks if the object is a native DOM Node.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isNode( obj ) {\n\tif ( obj ) {\n\t\tif ( obj.defaultView ) {\n\t\t\treturn obj instanceof obj.defaultView.Document;\n\t\t} else if ( obj.ownerDocument && obj.ownerDocument.defaultView ) {\n\t\t\treturn obj instanceof obj.ownerDocument.defaultView.Node;\n\t\t}\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/fastdiff\n */\n\n/**\n * Finds position of the first and last change in the given strings and generates set of changes. Set of changes\n * can be applied to the input text in order to transform it into the output text, for example:\n *\n *\t\tfastDiff( '12a', '12xyza' );\n *\t\t// [ { index: 2, type: 'insert', values: [ 'x', 'y', 'z' ] } ]\n *\n *\t\tfastDiff( '12a', '12aa' );\n *\t\t// [ { index: 3, type: 'insert', values: [ 'a' ] } ]\n *\n *\t\tfastDiff( '12xyza', '12a' );\n *\t\t// [ { index: 2, type: 'delete', howMany: 3 } ]\n *\n *\t\tfastDiff( '12aa', '12a' );\n *\t\t// [ { index: 3, type: 'delete', howMany: 1 } ]\n *\n *\t\tfastDiff( '12abc3', '2ab' );\n *\t\t// [ { index: 0, type: 'insert', values: [ '2', 'a', 'b' ] }, { index: 3, type: 'delete', howMany: 6 } ]\n *\n * Using returned results you can modify `oldText` to transform it into `newText`:\n *\n * \t\tlet input = '12abc3';\n * \t\tconst output = '2ab';\n * \t\tconst changes = fastDiff( input, output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput = input.substring( 0, change.index ) + change.values.join( '' ) + input.substring( change.index );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput = input.substring( 0, change.index ) + input.substring( change.index + change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\tinput === output; // -> true\n *\n * The output format of this function is compatible with {@link module:utils/difftochanges~diffToChanges} output format.\n *\n * @param {String} oldText Input string.\n * @param {String} newText Input string.\n * @returns {Array} Array of changes.\n */\nexport default function fastDiff( oldText, newText ) {\n\t// Check if both texts are equal.\n\tif ( oldText === newText ) {\n\t\treturn [];\n\t}\n\n\tconst changeIndexes = findChangeBoundaryIndexes( oldText, newText );\n\n\treturn changeIndexesToChanges( newText, changeIndexes );\n}\n\n// Finds position of the first and last change in the given strings. For example:\n//\n//\t\tconst indexes = findChangeBoundaryIndexes( '1234', '13424' );\n//\t\tconsole.log( indexes ); // { firstIndex: 1, lastIndexOld: 3, lastIndexNew: 4 }\n//\n// The above indexes means that in `oldText` modified part is `1[23]4` and in the `newText` it is `1[342]4`.\n// Based on such indexes, array with `insert`/`delete` operations which allows transforming\n// old text to the new one can be generated.\n//\n// It is expected that `oldText` and `newText` are different.\n//\n// @param {String} oldText\n// @param {String} newText\n// @returns {Object}\n// @returns {Number} return.firstIndex Index of the first change in both strings (always the same for both).\n// @returns {Number} result.lastIndexOld Index of the last common character in `oldText` string.\n// @returns {Number} result.lastIndexNew Index of the last common character in `newText` string.\nfunction findChangeBoundaryIndexes( oldText, newText ) {\n\t// Find the first difference between texts.\n\tconst firstIndex = findFirstDifferenceIndex( oldText, newText );\n\n\t// Remove the common part of texts and reverse them to make it simpler to find the last difference between texts.\n\tconst oldTextReversed = cutAndReverse( oldText, firstIndex );\n\tconst newTextReversed = cutAndReverse( newText, firstIndex );\n\n\t// Find the first difference between reversed texts.\n\t// It should be treated as \"how many characters from the end the last difference occurred\".\n\t//\n\t// For example:\n\t//\n\t// \t\t\tinitial\t->\tafter cut\t-> reversed:\n\t// oldText:\t'321ba'\t->\t'21ba'\t\t-> 'ab12'\n\t// newText:\t'31xba'\t->\t'1xba'\t\t-> 'abx1'\n\t// lastIndex:\t\t\t\t\t\t->    2\n\t//\n\t// So the last change occurred two characters from the end of the texts.\n\tconst lastIndex = findFirstDifferenceIndex( oldTextReversed, newTextReversed );\n\n\t// Use `lastIndex` to calculate proper offset, starting from the beginning (`lastIndex` kind of starts from the end).\n\tconst lastIndexOld = oldText.length - lastIndex;\n\tconst lastIndexNew = newText.length - lastIndex;\n\n\treturn { firstIndex, lastIndexOld, lastIndexNew };\n}\n\n// Returns a first index on which `oldText` and `newText` differ.\n//\n// @param {String} oldText\n// @param {String} newText\n// @returns {Number}\nfunction findFirstDifferenceIndex( oldText, newText ) {\n\tfor ( let i = 0; i < Math.max( oldText.length, newText.length ); i++ ) {\n\t\tif ( oldText[ i ] !== newText[ i ] ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\t// No \"backup\" return cause we assume that `oldText` and `newText` differ. This means that they either have a\n\t// difference or they have a different lengths. This means that the `if` condition will always be met eventually.\n}\n\n// Removes `howMany` characters from the given `text` string starting from the beginning, then reverses and returns it.\n//\n// @param {String} text Text to be processed.\n// @param {Number} howMany How many characters from text beginning to cut.\n// @returns {String} Shortened and reversed text.\nfunction cutAndReverse( text, howMany ) {\n\treturn text.substring( howMany ).split( '' ).reverse().join( '' );\n}\n\n// Generates changes array based on change indexes from `findChangeBoundaryIndexes` function. This function will\n// generate array with 0 (no changes), 1 (deletion or insertion) or 2 records (insertion and deletion).\n//\n// @param {String} newText New text for which change indexes were calculated.\n// @param {Object} changeIndexes Change indexes object from `findChangeBoundaryIndexes` function.\n// @returns {Array.<Object>} Array of changes compatible with {@link module:utils/difftochanges~diffToChanges} format.\nfunction changeIndexesToChanges( newText, changeIndexes ) {\n\tconst result = [];\n\tconst { firstIndex, lastIndexOld, lastIndexNew } = changeIndexes;\n\n\t// Order operations as 'insert', 'delete' array to keep compatibility with {@link module:utils/difftochanges~diffToChanges}\n\t// in most cases. However, 'diffToChanges' does not stick to any order so in some cases\n\t// (for example replacing '12345' with 'abcd') it will generate 'delete', 'insert' order.\n\tif ( lastIndexNew - firstIndex > 0 ) {\n\t\tresult.push( {\n\t\t\tindex: firstIndex,\n\t\t\ttype: 'insert',\n\t\t\tvalues: newText.substring( firstIndex, lastIndexNew ).split( '' )\n\t\t} );\n\t}\n\n\tif ( lastIndexOld - firstIndex > 0 ) {\n\t\tresult.push( {\n\t\t\tindex: firstIndex + ( lastIndexNew - firstIndex ), // Increase index of what was inserted.\n\t\t\ttype: 'delete',\n\t\t\thowMany: lastIndexOld - firstIndex\n\t\t} );\n\t}\n\n\treturn result;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals Node */\n\n/**\n * @module engine/view/renderer\n */\n\nimport ViewText from './text';\nimport ViewPosition from './position';\nimport { INLINE_FILLER, INLINE_FILLER_LENGTH, startsWithFiller, isInlineFiller, isBlockFiller } from './filler';\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport insertAt from '@ckeditor/ckeditor5-utils/src/dom/insertat';\nimport remove from '@ckeditor/ckeditor5-utils/src/dom/remove';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\nimport fastDiff from '@ckeditor/ckeditor5-utils/src/fastdiff';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Renderer is responsible for updating the DOM structure and the DOM selection based on\n * the {@link module:engine/view/renderer~Renderer#markToSync information about updated view nodes}.\n * In other words, it renders the view to the DOM.\n *\n * Its main responsibility is to make only the necessary, minimal changes to the DOM. However, unlike in many\n * virtual DOM implementations, the primary reason for doing minimal changes is not the performance but ensuring\n * that native editing features such as text composition, autocompletion, spell checking, selection's x-index are\n * affected as little as possible.\n *\n * Renderer uses {@link module:engine/view/domconverter~DomConverter} to transform view nodes and positions\n * to and from the DOM.\n */\nexport default class Renderer {\n\t/**\n\t * Creates a renderer instance.\n\t *\n\t * @param {module:engine/view/domconverter~DomConverter} domConverter Converter instance.\n\t * @param {module:engine/view/documentselection~DocumentSelection} selection View selection.\n\t */\n\tconstructor( domConverter, selection ) {\n\t\t/**\n\t\t * Set of DOM Documents instances.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<Document>}\n\t\t */\n\t\tthis.domDocuments = new Set();\n\n\t\t/**\n\t\t * Converter instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = domConverter;\n\n\t\t/**\n\t\t * Set of nodes which attributes changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedAttributes = new Set();\n\n\t\t/**\n\t\t * Set of elements which child lists changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedChildren = new Set();\n\n\t\t/**\n\t\t * Set of text nodes which text data changed and may need to be rendered.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set.<module:engine/view/node~Node>}\n\t\t */\n\t\tthis.markedTexts = new Set();\n\n\t\t/**\n\t\t * View selection. Renderer updates DOM selection based on the view selection.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection}\n\t\t */\n\t\tthis.selection = selection;\n\n\t\t/**\n\t\t * Indicates if the view document is focused and selection can be rendered. Selection will not be rendered if\n\t\t * this is set to `false`.\n\t\t *\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.isFocused = false;\n\n\t\t/**\n\t\t * The text node in which the inline filler was rendered.\n\t\t *\n\t\t * @private\n\t\t * @member {Text}\n\t\t */\n\t\tthis._inlineFiller = null;\n\n\t\t/**\n\t\t * DOM element containing fake selection.\n\t\t *\n\t\t * @private\n\t\t * @type {null|HTMLElement}\n\t\t */\n\t\tthis._fakeSelectionContainer = null;\n\t}\n\n\t/**\n\t * Marks a view node to be updated in the DOM by {@link #render `render()`}.\n\t *\n\t * Note that only view nodes whose parents have corresponding DOM elements need to be marked to be synchronized.\n\t *\n\t * @see #markedAttributes\n\t * @see #markedChildren\n\t * @see #markedTexts\n\t *\n\t * @param {module:engine/view/document~ChangeType} type Type of the change.\n\t * @param {module:engine/view/node~Node} node Node to be marked.\n\t */\n\tmarkToSync( type, node ) {\n\t\tif ( type === 'text' ) {\n\t\t\tif ( this.domConverter.mapViewToDom( node.parent ) ) {\n\t\t\t\tthis.markedTexts.add( node );\n\t\t\t}\n\t\t} else {\n\t\t\t// If the node has no DOM element it is not rendered yet,\n\t\t\t// its children/attributes do not need to be marked to be sync.\n\t\t\tif ( !this.domConverter.mapViewToDom( node ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( type === 'attributes' ) {\n\t\t\t\tthis.markedAttributes.add( node );\n\t\t\t} else if ( type === 'children' ) {\n\t\t\t\tthis.markedChildren.add( node );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * Unknown type passed to Renderer.markToSync.\n\t\t\t\t *\n\t\t\t\t * @error renderer-unknown-type\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'view-renderer-unknown-type: Unknown type passed to Renderer.markToSync.' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Renders all buffered changes ({@link #markedAttributes}, {@link #markedChildren} and {@link #markedTexts}) and\n\t * the current view selection (if needed) to the DOM by applying a minimal set of changes to it.\n\t *\n\t * Renderer tries not to break the text composition (e.g. IME) and x-index of the selection,\n\t * so it does as little as it is needed to update the DOM.\n\t *\n\t * Renderer also handles {@link module:engine/view/filler fillers}. Especially, it checks if the inline filler is needed\n\t * at the selection position and adds or removes it. To prevent breaking text composition inline filler will not be\n\t * removed as long as the selection is in the text node which needed it at first.\n\t */\n\trender() {\n\t\tlet inlineFillerPosition;\n\n\t\t// Refresh mappings.\n\t\tfor ( const element of this.markedChildren ) {\n\t\t\tthis._updateChildrenMappings( element );\n\t\t}\n\n\t\t// There was inline filler rendered in the DOM but it's not\n\t\t// at the selection position any more, so we can remove it\n\t\t// (cause even if it's needed, it must be placed in another location).\n\t\tif ( this._inlineFiller && !this._isSelectionInInlineFiller() ) {\n\t\t\tthis._removeInlineFiller();\n\t\t}\n\n\t\t// If we've got the filler, let's try to guess its position in the view.\n\t\tif ( this._inlineFiller ) {\n\t\t\tinlineFillerPosition = this._getInlineFillerPosition();\n\t\t}\n\t\t// Otherwise, if it's needed, create it at the selection position.\n\t\telse if ( this._needsInlineFillerAtSelection() ) {\n\t\t\tinlineFillerPosition = this.selection.getFirstPosition();\n\n\t\t\t// Do not use `markToSync` so it will be added even if the parent is already added.\n\t\t\tthis.markedChildren.add( inlineFillerPosition.parent );\n\t\t}\n\n\t\tfor ( const element of this.markedAttributes ) {\n\t\t\tthis._updateAttrs( element );\n\t\t}\n\n\t\tfor ( const element of this.markedChildren ) {\n\t\t\tthis._updateChildren( element, { inlineFillerPosition } );\n\t\t}\n\n\t\tfor ( const node of this.markedTexts ) {\n\t\t\tif ( !this.markedChildren.has( node.parent ) && this.domConverter.mapViewToDom( node.parent ) ) {\n\t\t\t\tthis._updateText( node, { inlineFillerPosition } );\n\t\t\t}\n\t\t}\n\n\t\t// Check whether the inline filler is required and where it really is in the DOM.\n\t\t// At this point in most cases it will be in the DOM, but there are exceptions.\n\t\t// For example, if the inline filler was deep in the created DOM structure, it will not be created.\n\t\t// Similarly, if it was removed at the beginning of this function and then neither text nor children were updated,\n\t\t// it will not be present.\n\t\t// Fix those and similar scenarios.\n\t\tif ( inlineFillerPosition ) {\n\t\t\tconst fillerDomPosition = this.domConverter.viewPositionToDom( inlineFillerPosition );\n\t\t\tconst domDocument = fillerDomPosition.parent.ownerDocument;\n\n\t\t\tif ( !startsWithFiller( fillerDomPosition.parent ) ) {\n\t\t\t\t// Filler has not been created at filler position. Create it now.\n\t\t\t\tthis._inlineFiller = addInlineFiller( domDocument, fillerDomPosition.parent, fillerDomPosition.offset );\n\t\t\t} else {\n\t\t\t\t// Filler has been found, save it.\n\t\t\t\tthis._inlineFiller = fillerDomPosition.parent;\n\t\t\t}\n\t\t} else {\n\t\t\t// There is no filler needed.\n\t\t\tthis._inlineFiller = null;\n\t\t}\n\n\t\tthis._updateSelection();\n\t\tthis._updateFocus();\n\n\t\tthis.markedTexts.clear();\n\t\tthis.markedAttributes.clear();\n\t\tthis.markedChildren.clear();\n\t}\n\n\t/**\n\t * Updates mappings of view element's children.\n\t *\n\t * Children that were replaced in the view structure by similar elements (same tag name) are treated as 'replaced'.\n\t * This means that their mappings can be updated so the new view elements are mapped to the existing DOM elements.\n\t * Thanks to that these elements do not need to be re-rendered completely.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewElement The view element whose children mappings will be updated.\n\t */\n\t_updateChildrenMappings( viewElement ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that it was already removed from DOM and there is no need to process it.\n\t\t\treturn;\n\t\t}\n\n\t\tconst actualDomChildren = this.domConverter.mapViewToDom( viewElement ).childNodes;\n\t\tconst expectedDomChildren = Array.from(\n\t\t\tthis.domConverter.viewChildrenToDom( viewElement, domElement.ownerDocument, { withChildren: false } )\n\t\t);\n\t\tconst diff = this._diffNodeLists( actualDomChildren, expectedDomChildren );\n\t\tconst actions = this._findReplaceActions( diff, actualDomChildren, expectedDomChildren );\n\n\t\tif ( actions.indexOf( 'replace' ) !== -1 ) {\n\t\t\tconst counter = { equal: 0, insert: 0, delete: 0 };\n\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action === 'replace' ) {\n\t\t\t\t\tconst insertIndex = counter.equal + counter.insert;\n\t\t\t\t\tconst deleteIndex = counter.equal + counter.delete;\n\t\t\t\t\tconst viewChild = viewElement.getChild( insertIndex );\n\n\t\t\t\t\t// The 'uiElement' is a special one and its children are not stored in a view (#799),\n\t\t\t\t\t// so we cannot use it with replacing flow (since it uses view children during rendering\n\t\t\t\t\t// which will always result in rendering empty element).\n\t\t\t\t\tif ( viewChild && !viewChild.is( 'uiElement' ) ) {\n\t\t\t\t\t\tthis._updateElementMappings( viewChild, actualDomChildren[ deleteIndex ] );\n\t\t\t\t\t}\n\n\t\t\t\t\tremove( expectedDomChildren[ insertIndex ] );\n\t\t\t\t\tcounter.equal++;\n\t\t\t\t} else {\n\t\t\t\t\tcounter[ action ]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Updates mappings of a given view element.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewElement The view element whose mappings will be updated.\n\t * @param {Node} domElement The DOM element representing the given view element.\n\t */\n\t_updateElementMappings( viewElement, domElement ) {\n\t\t// Remap 'DomConverter' bindings.\n\t\tthis.domConverter.unbindDomElement( domElement );\n\t\tthis.domConverter.bindElements( domElement, viewElement );\n\n\t\t// View element may have children which needs to be updated, but are not marked, mark them to update.\n\t\tthis.markedChildren.add( viewElement );\n\n\t\t// Because we replace new view element mapping with the existing one, the corresponding DOM element\n\t\t// will not be rerendered. The new view element may have different attributes than the previous one.\n\t\t// Since its corresponding DOM element will not be rerendered, new attributes will not be added\n\t\t// to the DOM, so we need to mark it here to make sure its attributes gets updated. See #1427 for more\n\t\t// detailed case study.\n\t\t// Also there are cases where replaced element is removed from the view structure and then has\n\t\t// its attributes changed or removed. In such cases the element will not be present in `markedAttributes`\n\t\t// and also may be the same (`element.isSimilar()`) as the reused element not having its attributes updated.\n\t\t// To prevent such situations we always mark reused element to have its attributes rerenderd (#1560).\n\t\tthis.markedAttributes.add( viewElement );\n\t}\n\n\t/**\n\t * Gets the position of the inline filler based on the current selection.\n\t * Here, we assume that we know that the filler is needed and\n\t * {@link #_isSelectionInInlineFiller is at the selection position}, and, since it is needed,\n\t * it is somewhere at the selection position.\n\t *\n\t * Note: The filler position cannot be restored based on the filler's DOM text node, because\n\t * when this method is called (before rendering), the bindings will often be broken. View-to-DOM\n\t * bindings are only dependable after rendering.\n\t *\n\t * @private\n\t * @returns {module:engine/view/position~Position}\n\t */\n\t_getInlineFillerPosition() {\n\t\tconst firstPos = this.selection.getFirstPosition();\n\n\t\tif ( firstPos.parent.is( 'text' ) ) {\n\t\t\treturn ViewPosition._createBefore( this.selection.getFirstPosition().parent );\n\t\t} else {\n\t\t\treturn firstPos;\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` if the selection has not left the inline filler's text node.\n\t * If it is `true`, it means that the filler had been added for a reason and the selection did not\n\t * leave the filler's text node. For example, the user can be in the middle of a composition so it should not be touched.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if the inline filler and selection are in the same place.\n\t */\n\t_isSelectionInInlineFiller() {\n\t\tif ( this.selection.rangeCount != 1 || !this.selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Note, we can't check if selection's position equals position of the\n\t\t// this._inlineFiller node, because of #663. We may not be able to calculate\n\t\t// the filler's position in the view at this stage.\n\t\t// Instead, we check it the other way – whether selection is anchored in\n\t\t// that text node or next to it.\n\n\t\t// Possible options are:\n\t\t// \"FILLER{}\"\n\t\t// \"FILLERadded-text{}\"\n\t\tconst selectionPosition = this.selection.getFirstPosition();\n\t\tconst position = this.domConverter.viewPositionToDom( selectionPosition );\n\n\t\tif ( position && isText( position.parent ) && startsWithFiller( position.parent ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Removes the inline filler.\n\t *\n\t * @private\n\t */\n\t_removeInlineFiller() {\n\t\tconst domFillerNode = this._inlineFiller;\n\n\t\t// Something weird happened and the stored node doesn't contain the filler's text.\n\t\tif ( !startsWithFiller( domFillerNode ) ) {\n\t\t\t/**\n\t\t\t * The inline filler node was lost. Most likely, something overwrote the filler text node\n\t\t\t * in the DOM.\n\t\t\t *\n\t\t\t * @error view-renderer-filler-was-lost\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-renderer-filler-was-lost: The inline filler node was lost.' );\n\t\t}\n\n\t\tif ( isInlineFiller( domFillerNode ) ) {\n\t\t\tdomFillerNode.parentNode.removeChild( domFillerNode );\n\t\t} else {\n\t\t\tdomFillerNode.data = domFillerNode.data.substr( INLINE_FILLER_LENGTH );\n\t\t}\n\n\t\tthis._inlineFiller = null;\n\t}\n\n\t/**\n\t * Checks if the inline {@link module:engine/view/filler filler} should be added.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if the inline filler should be added.\n\t */\n\t_needsInlineFillerAtSelection() {\n\t\tif ( this.selection.rangeCount != 1 || !this.selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst selectionPosition = this.selection.getFirstPosition();\n\t\tconst selectionParent = selectionPosition.parent;\n\t\tconst selectionOffset = selectionPosition.offset;\n\n\t\t// If there is no DOM root we do not care about fillers.\n\t\tif ( !this.domConverter.mapViewToDom( selectionParent.root ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !( selectionParent.is( 'element' ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Prevent adding inline filler inside elements with contenteditable=false.\n\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/1170\n\t\tif ( !isEditable( selectionParent ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// We have block filler, we do not need inline one.\n\t\tif ( selectionOffset === selectionParent.getFillerOffset() ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst nodeBefore = selectionPosition.nodeBefore;\n\t\tconst nodeAfter = selectionPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof ViewText || nodeAfter instanceof ViewText ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks if text needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} viewText View text to update.\n\t * @param {Object} options\n\t * @param {module:engine/view/position~Position} options.inlineFillerPosition The position where the inline\n\t * filler should be rendered.\n\t */\n\t_updateText( viewText, options ) {\n\t\tconst domText = this.domConverter.findCorrespondingDomText( viewText );\n\t\tconst newDomText = this.domConverter.viewToDom( viewText, domText.ownerDocument );\n\n\t\tconst actualText = domText.data;\n\t\tlet expectedText = newDomText.data;\n\n\t\tconst filler = options.inlineFillerPosition;\n\n\t\tif ( filler && filler.parent == viewText.parent && filler.offset == viewText.index ) {\n\t\t\texpectedText = INLINE_FILLER + expectedText;\n\t\t}\n\n\t\tif ( actualText != expectedText ) {\n\t\t\tconst actions = fastDiff( actualText, expectedText );\n\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action.type === 'insert' ) {\n\t\t\t\t\tdomText.insertData( action.index, action.values.join( '' ) );\n\t\t\t\t} else { // 'delete'\n\t\t\t\t\tdomText.deleteData( action.index, action.howMany );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if attribute list needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewElement The view element to update.\n\t */\n\t_updateAttrs( viewElement ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that 'viewElement' is outdated as its mapping was updated\n\t\t\t// in 'this._updateChildrenMappings()'. There is no need to process it as new view element which\n\t\t\t// replaced old 'viewElement' mapping was also added to 'this.markedAttributes'\n\t\t\t// in 'this._updateChildrenMappings()' so it will be processed separately.\n\t\t\treturn;\n\t\t}\n\n\t\tconst domAttrKeys = Array.from( domElement.attributes ).map( attr => attr.name );\n\t\tconst viewAttrKeys = viewElement.getAttributeKeys();\n\n\t\t// Add or overwrite attributes.\n\t\tfor ( const key of viewAttrKeys ) {\n\t\t\tdomElement.setAttribute( key, viewElement.getAttribute( key ) );\n\t\t}\n\n\t\t// Remove from DOM attributes which do not exists in the view.\n\t\tfor ( const key of domAttrKeys ) {\n\t\t\tif ( !viewElement.hasAttribute( key ) ) {\n\t\t\t\tdomElement.removeAttribute( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if elements child list needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewElement View element to update.\n\t * @param {Object} options\n\t * @param {module:engine/view/position~Position} options.inlineFillerPosition The position where the inline\n\t * filler should be rendered.\n\t */\n\t_updateChildren( viewElement, options ) {\n\t\tconst domElement = this.domConverter.mapViewToDom( viewElement );\n\n\t\tif ( !domElement ) {\n\t\t\t// If there is no `domElement` it means that it was already removed from DOM.\n\t\t\t// There is no need to process it. It will be processed when re-inserted.\n\t\t\treturn;\n\t\t}\n\n\t\tconst inlineFillerPosition = options.inlineFillerPosition;\n\t\tconst actualDomChildren = this.domConverter.mapViewToDom( viewElement ).childNodes;\n\t\tconst expectedDomChildren = Array.from(\n\t\t\tthis.domConverter.viewChildrenToDom( viewElement, domElement.ownerDocument, { bind: true, inlineFillerPosition } )\n\t\t);\n\n\t\t// Inline filler element has to be created as it is present in the DOM, but not in the view. It is required\n\t\t// during diffing so text nodes could be compared correctly and also during rendering to maintain\n\t\t// proper order and indexes while updating the DOM.\n\t\tif ( inlineFillerPosition && inlineFillerPosition.parent === viewElement ) {\n\t\t\taddInlineFiller( domElement.ownerDocument, expectedDomChildren, inlineFillerPosition.offset );\n\t\t}\n\n\t\tconst diff = this._diffNodeLists( actualDomChildren, expectedDomChildren );\n\n\t\tlet i = 0;\n\t\tconst nodesToUnbind = new Set();\n\n\t\tfor ( const action of diff ) {\n\t\t\tif ( action === 'insert' ) {\n\t\t\t\tinsertAt( domElement, i, expectedDomChildren[ i ] );\n\t\t\t\ti++;\n\t\t\t} else if ( action === 'delete' ) {\n\t\t\t\tnodesToUnbind.add( actualDomChildren[ i ] );\n\t\t\t\tremove( actualDomChildren[ i ] );\n\t\t\t} else { // 'equal'\n\t\t\t\t// Force updating text nodes inside elements which did not change and do not need to be re-rendered (#1125).\n\t\t\t\tthis._markDescendantTextToSync( this.domConverter.domToView( expectedDomChildren[ i ] ) );\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t// Unbind removed nodes. When node does not have a parent it means that it was removed from DOM tree during\n\t\t// comparision with the expected DOM. We don't need to check child nodes, because if child node was reinserted,\n\t\t// it was moved to DOM tree out of the removed node.\n\t\tfor ( const node of nodesToUnbind ) {\n\t\t\tif ( !node.parentNode ) {\n\t\t\t\tthis.domConverter.unbindDomElement( node );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shorthand for diffing two arrays or node lists of DOM nodes.\n\t *\n\t * @private\n\t * @param {Array.<Node>|NodeList} actualDomChildren Actual DOM children\n\t * @param {Array.<Node>|NodeList} expectedDomChildren Expected DOM children.\n\t * @returns {Array.<String>} The list of actions based on the {@link module:utils/diff~diff} function.\n\t */\n\t_diffNodeLists( actualDomChildren, expectedDomChildren ) {\n\t\treturn diff( actualDomChildren, expectedDomChildren, sameNodes.bind( null, this.domConverter.blockFiller ) );\n\t}\n\n\t/**\n\t * Finds DOM nodes that were replaced with the similar nodes (same tag name) in the view. All nodes are compared\n\t * within one `insert`/`delete` action group, for example:\n\t *\n\t * \t\tActual DOM:\t\t<p><b>Foo</b>Bar<i>Baz</i><b>Bax</b></p>\n\t * \t\tExpected DOM:\t<p>Bar<b>123</b><i>Baz</i><b>456</b></p>\n\t * \t\tInput actions:\t[ insert, insert, delete, delete, equal, insert, delete ]\n\t * \t\tOutput actions:\t[ insert, replace, delete, equal, replace ]\n\t *\n\t * @private\n\t * @param {Array.<String>} actions Actions array which is a result of the {@link module:utils/diff~diff} function.\n\t * @param {Array.<Node>|NodeList} actualDom Actual DOM children\n\t * @param {Array.<Node>} expectedDom Expected DOM children.\n\t * @returns {Array.<String>} Actions array modified with the `replace` actions.\n\t */\n\t_findReplaceActions( actions, actualDom, expectedDom ) {\n\t\t// If there is no both 'insert' and 'delete' actions, no need to check for replaced elements.\n\t\tif ( actions.indexOf( 'insert' ) === -1 || actions.indexOf( 'delete' ) === -1 ) {\n\t\t\treturn actions;\n\t\t}\n\n\t\tlet newActions = [];\n\t\tlet actualSlice = [];\n\t\tlet expectedSlice = [];\n\n\t\tconst counter = { equal: 0, insert: 0, delete: 0 };\n\n\t\tfor ( const action of actions ) {\n\t\t\tif ( action === 'insert' ) {\n\t\t\t\texpectedSlice.push( expectedDom[ counter.equal + counter.insert ] );\n\t\t\t} else if ( action === 'delete' ) {\n\t\t\t\tactualSlice.push( actualDom[ counter.equal + counter.delete ] );\n\t\t\t} else { // equal\n\t\t\t\tnewActions = newActions.concat( diff( actualSlice, expectedSlice, areSimilar ).map( x => x === 'equal' ? 'replace' : x ) );\n\t\t\t\tnewActions.push( 'equal' );\n\t\t\t\t// Reset stored elements on 'equal'.\n\t\t\t\tactualSlice = [];\n\t\t\t\texpectedSlice = [];\n\t\t\t}\n\t\t\tcounter[ action ]++;\n\t\t}\n\n\t\treturn newActions.concat( diff( actualSlice, expectedSlice, areSimilar ).map( x => x === 'equal' ? 'replace' : x ) );\n\t}\n\n\t/**\n\t * Marks text nodes to be synchronized.\n\t *\n\t * If a text node is passed, it will be marked. If an element is passed, all descendant text nodes inside it will be marked.\n\t *\n\t * @private\n\t * @param {module:engine/view/node~Node} viewNode View node to sync.\n\t */\n\t_markDescendantTextToSync( viewNode ) {\n\t\tif ( !viewNode ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( viewNode.is( 'text' ) ) {\n\t\t\tthis.markedTexts.add( viewNode );\n\t\t} else if ( viewNode.is( 'element' ) ) {\n\t\t\tfor ( const child of viewNode.getChildren() ) {\n\t\t\t\tthis._markDescendantTextToSync( child );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the selection needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t */\n\t_updateSelection() {\n\t\t// If there is no selection - remove DOM and fake selections.\n\t\tif ( this.selection.rangeCount === 0 ) {\n\t\t\tthis._removeDomSelection();\n\t\t\tthis._removeFakeSelection();\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst domRoot = this.domConverter.mapViewToDom( this.selection.editableElement );\n\n\t\t// Do nothing if there is no focus, or there is no DOM element corresponding to selection's editable element.\n\t\tif ( !this.isFocused || !domRoot ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Render selection.\n\t\tif ( this.selection.isFake ) {\n\t\t\tthis._updateFakeSelection( domRoot );\n\t\t} else {\n\t\t\tthis._removeFakeSelection();\n\t\t\tthis._updateDomSelection( domRoot );\n\t\t}\n\t}\n\n\t/**\n\t * Updates the fake selection.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot A valid DOM root where the fake selection container should be added.\n\t */\n\t_updateFakeSelection( domRoot ) {\n\t\tconst domDocument = domRoot.ownerDocument;\n\t\tlet container = this._fakeSelectionContainer;\n\n\t\t// Create fake selection container if one does not exist.\n\t\tif ( !container ) {\n\t\t\tthis._fakeSelectionContainer = container = domDocument.createElement( 'div' );\n\n\t\t\tObject.assign( container.style, {\n\t\t\t\tposition: 'fixed',\n\t\t\t\ttop: 0,\n\t\t\t\tleft: '-9999px',\n\t\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/752.\n\t\t\t\twidth: '42px'\n\t\t\t} );\n\n\t\t\t// Fill it with a text node so we can update it later.\n\t\t\tcontainer.appendChild( domDocument.createTextNode( '\\u00A0' ) );\n\t\t}\n\n\t\t// Add fake container if not already added.\n\t\tif ( !container.parentElement ) {\n\t\t\tdomRoot.appendChild( container );\n\t\t}\n\n\t\t// Update contents.\n\t\tcontainer.firstChild.data = this.selection.fakeSelectionLabel || '\\u00A0';\n\n\t\t// Update selection.\n\t\tconst domSelection = domDocument.getSelection();\n\t\tconst domRange = domDocument.createRange();\n\n\t\tdomSelection.removeAllRanges();\n\t\tdomRange.selectNodeContents( container );\n\t\tdomSelection.addRange( domRange );\n\n\t\t// Bind fake selection container with current selection.\n\t\tthis.domConverter.bindFakeSelection( container, this.selection );\n\t}\n\n\t/**\n\t * Updates the DOM selection.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot A valid DOM root where the DOM selection should be rendered.\n\t */\n\t_updateDomSelection( domRoot ) {\n\t\tconst domSelection = domRoot.ownerDocument.defaultView.getSelection();\n\n\t\t// Let's check whether DOM selection needs updating at all.\n\t\tif ( !this._domSelectionNeedsUpdate( domSelection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Multi-range selection is not available in most browsers, and, at least in Chrome, trying to\n\t\t// set such selection, that is not continuous, throws an error. Because of that, we will just use anchor\n\t\t// and focus of view selection.\n\t\t// Since we are not supporting multi-range selection, we also do not need to check if proper editable is\n\t\t// selected. If there is any editable selected, it is okay (editable is taken from selection anchor).\n\t\tconst anchor = this.domConverter.viewPositionToDom( this.selection.anchor );\n\t\tconst focus = this.domConverter.viewPositionToDom( this.selection.focus );\n\n\t\t// Focus the new editing host.\n\t\t// Otherwise, FF may throw an error (https://github.com/ckeditor/ckeditor5/issues/721).\n\t\tdomRoot.focus();\n\n\t\tdomSelection.collapse( anchor.parent, anchor.offset );\n\t\tdomSelection.extend( focus.parent, focus.offset );\n\n\t\t// Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n\t\tif ( env.isGecko ) {\n\t\t\tfixGeckoSelectionAfterBr( focus, domSelection );\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether a given DOM selection needs to be updated.\n\t *\n\t * @private\n\t * @param {Selection} domSelection The DOM selection to check.\n\t * @returns {Boolean}\n\t */\n\t_domSelectionNeedsUpdate( domSelection ) {\n\t\tif ( !this.domConverter.isDomSelectionCorrect( domSelection ) ) {\n\t\t\t// Current DOM selection is in incorrect position. We need to update it.\n\t\t\treturn true;\n\t\t}\n\n\t\tconst oldViewSelection = domSelection && this.domConverter.domSelectionToView( domSelection );\n\n\t\tif ( oldViewSelection && this.selection.isEqual( oldViewSelection ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If selection is not collapsed, it does not need to be updated if it is similar.\n\t\tif ( !this.selection.isCollapsed && this.selection.isSimilar( oldViewSelection ) ) {\n\t\t\t// Selection did not changed and is correct, do not update.\n\t\t\treturn false;\n\t\t}\n\n\t\t// Selections are not similar.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Removes the DOM selection.\n\t *\n\t * @private\n\t */\n\t_removeDomSelection() {\n\t\tfor ( const doc of this.domDocuments ) {\n\t\t\tconst domSelection = doc.getSelection();\n\n\t\t\tif ( domSelection.rangeCount ) {\n\t\t\t\tconst activeDomElement = doc.activeElement;\n\t\t\t\tconst viewElement = this.domConverter.mapDomToView( activeDomElement );\n\n\t\t\t\tif ( activeDomElement && viewElement ) {\n\t\t\t\t\tdoc.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes the fake selection.\n\t *\n\t * @private\n\t */\n\t_removeFakeSelection() {\n\t\tconst container = this._fakeSelectionContainer;\n\n\t\tif ( container ) {\n\t\t\tcontainer.remove();\n\t\t}\n\t}\n\n\t/**\n\t * Checks if focus needs to be updated and possibly updates it.\n\t *\n\t * @private\n\t */\n\t_updateFocus() {\n\t\tif ( this.isFocused ) {\n\t\t\tconst editable = this.selection.editableElement;\n\n\t\t\tif ( editable ) {\n\t\t\t\tthis.domConverter.focus( editable );\n\t\t\t}\n\t\t}\n\t}\n}\n\nmix( Renderer, ObservableMixin );\n\n// Checks if provided element is editable.\n//\n// @private\n// @param {module:engine/view/element~Element} element\n// @returns {Boolean}\nfunction isEditable( element ) {\n\tif ( element.getAttribute( 'contenteditable' ) == 'false' ) {\n\t\treturn false;\n\t}\n\n\tconst parent = element.findAncestor( element => element.hasAttribute( 'contenteditable' ) );\n\n\treturn !parent || parent.getAttribute( 'contenteditable' ) == 'true';\n}\n\n// Adds inline filler at a given position.\n//\n// The position can be given as an array of DOM nodes and an offset in that array,\n// or a DOM parent element and an offset in that element.\n//\n// @private\n// @param {Document} domDocument\n// @param {Element|Array.<Node>} domParentOrArray\n// @param {Number} offset\n// @returns {Text} The DOM text node that contains an inline filler.\nfunction addInlineFiller( domDocument, domParentOrArray, offset ) {\n\tconst childNodes = domParentOrArray instanceof Array ? domParentOrArray : domParentOrArray.childNodes;\n\tconst nodeAfterFiller = childNodes[ offset ];\n\n\tif ( isText( nodeAfterFiller ) ) {\n\t\tnodeAfterFiller.data = INLINE_FILLER + nodeAfterFiller.data;\n\n\t\treturn nodeAfterFiller;\n\t} else {\n\t\tconst fillerNode = domDocument.createTextNode( INLINE_FILLER );\n\n\t\tif ( Array.isArray( domParentOrArray ) ) {\n\t\t\tchildNodes.splice( offset, 0, fillerNode );\n\t\t} else {\n\t\t\tinsertAt( domParentOrArray, offset, fillerNode );\n\t\t}\n\n\t\treturn fillerNode;\n\t}\n}\n\n// Whether two DOM nodes should be considered as similar.\n// Nodes are considered similar if they have the same tag name.\n//\n// @private\n// @param {Node} node1\n// @param {Node} node2\n// @returns {Boolean}\nfunction areSimilar( node1, node2 ) {\n\treturn isNode( node1 ) && isNode( node2 ) &&\n\t\t!isText( node1 ) && !isText( node2 ) &&\n\t\tnode1.tagName.toLowerCase() === node2.tagName.toLowerCase();\n}\n\n// Whether two dom nodes should be considered as the same.\n// Two nodes which are considered the same are:\n//\n//\t\t* Text nodes with the same text.\n//\t\t* Element nodes represented by the same object.\n//\t\t* Two block filler elements.\n//\n// @private\n// @param {Function} blockFiller Block filler creator function, see {@link module:engine/view/domconverter~DomConverter#blockFiller}.\n// @param {Node} node1\n// @param {Node} node2\n// @returns {Boolean}\nfunction sameNodes( blockFiller, actualDomChild, expectedDomChild ) {\n\t// Elements.\n\tif ( actualDomChild === expectedDomChild ) {\n\t\treturn true;\n\t}\n\t// Texts.\n\telse if ( isText( actualDomChild ) && isText( expectedDomChild ) ) {\n\t\treturn actualDomChild.data === expectedDomChild.data;\n\t}\n\t// Block fillers.\n\telse if ( isBlockFiller( actualDomChild, blockFiller ) &&\n\t\tisBlockFiller( expectedDomChild, blockFiller ) ) {\n\t\treturn true;\n\t}\n\n\t// Not matching types.\n\treturn false;\n}\n\n// The following is a Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n// When the native DOM selection is at the end of the block and preceded by <br /> e.g.\n//\n//\t\t<p>foo<br/>[]</p>\n//\n// which happens a lot when using the soft line break, the browser fails to (visually) move the\n// caret to the new line. A quick fix is as simple as force–refreshing the selection with the same range.\nfunction fixGeckoSelectionAfterBr( focus, domSelection ) {\n\tconst parent = focus.parent;\n\n\t// This fix works only when the focus point is at the very end of an element.\n\t// There is no point in running it in cases unrelated to the browser bug.\n\tif ( parent.nodeType != Node.ELEMENT_NODE || focus.offset != parent.childNodes.length - 1 ) {\n\t\treturn;\n\t}\n\n\tconst childAtOffset = parent.childNodes[ focus.offset ];\n\n\t// To stay on the safe side, the fix being as specific as possible, it targets only the\n\t// selection which is at the very end of the element and preceded by <br />.\n\tif ( childAtOffset && childAtOffset.tagName == 'BR' ) {\n\t\tdomSelection.addRange( domSelection.getRangeAt( 0 ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals window, document */\n\n/**\n * @module utils/dom/global\n */\n\n/**\n * A helper (module) giving an access to the global DOM objects such as `window` and\n * `document`. Accessing these objects using this helper allows easy and bulletproof\n * testing, i.e. stubbing native properties:\n *\n *\t\timport global from 'ckeditor5/utils/dom/global.js';\n *\n *\t\t// This stub will work for any code using global module.\n *\t\ttestUtils.sinon.stub( global, 'window', {\n *\t\t\tinnerWidth: 10000\n *\t\t} );\n *\n *\t\tconsole.log( global.window.innerWidth );\n */\nexport default { window, document };\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/indexof\n */\n\n/**\n * Returns index of the node in the parent element.\n *\n * @param {Node} node Node which index is tested.\n * @returns {Number} Index of the node in the parent element. Returns 0 if node has no parent.\n */\nexport default function indexOf( node ) {\n\tlet index = 0;\n\n\twhile ( node.previousSibling ) {\n\t\tnode = node.previousSibling;\n\t\tindex++;\n\t}\n\n\treturn index;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals Node */\n\n/**\n * @module utils/dom/getancestors\n */\n\n/**\n * Returns all ancestors of given DOM node, starting from the top-most (root). Includes the given node itself. If the\n * node is a part of `DocumentFragment` that `DocumentFragment` will be returned. In contrary, if the node is\n * appended to a `Document`, that `Document` will not be returned (algorithms operating on DOM tree care for `Document#documentElement`\n * at most, which will be returned).\n *\n * @param {Node} node DOM node.\n * @returns {Array.<Node|DocumentFragment>} Array of given `node` parents.\n */\nexport default function getAncestors( node ) {\n\tconst nodes = [];\n\n\t// We are interested in `Node`s `DocumentFragment`s only.\n\twhile ( node && node.nodeType != Node.DOCUMENT_NODE ) {\n\t\tnodes.unshift( node );\n\t\tnode = node.parentNode;\n\t}\n\n\treturn nodes;\n}\n","import isObjectLike from './isObjectLike.js';\nimport isPlainObject from './isPlainObject.js';\n\n/**\n * Checks if `value` is likely a DOM element.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n * @example\n *\n * _.isElement(document.body);\n * // => true\n *\n * _.isElement('<body>');\n * // => false\n */\nfunction isElement(value) {\n  return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n}\n\nexport default isElement;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/domconverter\n */\n\n/* globals document, Node, NodeFilter, Text */\n\nimport ViewText from './text';\nimport ViewElement from './element';\nimport ViewPosition from './position';\nimport ViewRange from './range';\nimport ViewSelection from './selection';\nimport ViewDocumentFragment from './documentfragment';\nimport ViewTreeWalker from './treewalker';\nimport { BR_FILLER, INLINE_FILLER_LENGTH, isBlockFiller, isInlineFiller, startsWithFiller, getDataWithoutFiller } from './filler';\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport indexOf from '@ckeditor/ckeditor5-utils/src/dom/indexof';\nimport getAncestors from '@ckeditor/ckeditor5-utils/src/dom/getancestors';\nimport getCommonAncestor from '@ckeditor/ckeditor5-utils/src/dom/getcommonancestor';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\nimport { isElement } from 'lodash-es';\n\n/**\n * DomConverter is a set of tools to do transformations between DOM nodes and view nodes. It also handles\n * {@link module:engine/view/domconverter~DomConverter#bindElements binding} these nodes.\n *\n * DomConverter does not check which nodes should be rendered (use {@link module:engine/view/renderer~Renderer}), does not keep a\n * state of a tree nor keeps synchronization between tree view and DOM tree (use {@link module:engine/view/document~Document}).\n *\n * DomConverter keeps DOM elements to View element bindings, so when the converter will be destroyed, the binding will\n * be lost. Two converters will keep separate binding maps, so one tree view can be bound with two DOM trees.\n */\nexport default class DomConverter {\n\t/**\n\t * Creates DOM converter.\n\t *\n\t * @param {Object} options Object with configuration options.\n\t * @param {Function} [options.blockFiller=module:engine/view/filler~BR_FILLER] Block filler creator.\n\t */\n\tconstructor( options = {} ) {\n\t\t// Using WeakMap prevent memory leaks: when the converter will be destroyed all referenced between View and DOM\n\t\t// will be removed. Also because it is a *Weak*Map when both view and DOM elements will be removed referenced\n\t\t// will be also removed, isn't it brilliant?\n\t\t//\n\t\t// Yes, PJ. It is.\n\t\t//\n\t\t// You guys so smart.\n\t\t//\n\t\t// I've been here. Seen stuff. Afraid of code now.\n\n\t\t/**\n\t\t * Block {@link module:engine/view/filler filler} creator, which is used to create all block fillers during the\n\t\t * view to DOM conversion and to recognize block fillers during the DOM to view conversion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Function} module:engine/view/domconverter~DomConverter#blockFiller\n\t\t */\n\t\tthis.blockFiller = options.blockFiller || BR_FILLER;\n\n\t\t/**\n\t\t * Tag names of DOM `Element`s which are considered pre-formatted elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#preElements\n\t\t */\n\t\tthis.preElements = [ 'pre' ];\n\n\t\t/**\n\t\t * Tag names of DOM `Element`s which are considered block elements.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>} module:engine/view/domconverter~DomConverter#blockElements\n\t\t */\n\t\tthis.blockElements = [ 'p', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ];\n\n\t\t/**\n\t\t * DOM to View mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_domToViewMapping\n\t\t */\n\t\tthis._domToViewMapping = new WeakMap();\n\n\t\t/**\n\t\t * View to DOM mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_viewToDomMapping\n\t\t */\n\t\tthis._viewToDomMapping = new WeakMap();\n\n\t\t/**\n\t\t * Holds mapping between fake selection containers and corresponding view selections.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap} module:engine/view/domconverter~DomConverter#_fakeSelectionMapping\n\t\t */\n\t\tthis._fakeSelectionMapping = new WeakMap();\n\t}\n\n\t/**\n\t * Binds given DOM element that represents fake selection to {@link module:engine/view/documentselection~DocumentSelection\n\t * document selection}. Document selection copy is stored and can be retrieved by\n\t * {@link module:engine/view/domconverter~DomConverter#fakeSelectionToView} method.\n\t *\n\t * @param {HTMLElement} domElement\n\t * @param {module:engine/view/documentselection~DocumentSelection} viewDocumentSelection\n\t */\n\tbindFakeSelection( domElement, viewDocumentSelection ) {\n\t\tthis._fakeSelectionMapping.set( domElement, new ViewSelection( viewDocumentSelection ) );\n\t}\n\n\t/**\n\t * Returns {@link module:engine/view/selection~Selection view selection} instance corresponding to\n\t * given DOM element that represents fake selection. Returns `undefined` if binding to given DOM element does not exists.\n\t *\n\t * @param {HTMLElement} domElement\n\t * @returns {module:engine/view/selection~Selection|undefined}\n\t */\n\tfakeSelectionToView( domElement ) {\n\t\treturn this._fakeSelectionMapping.get( domElement );\n\t}\n\n\t/**\n\t * Binds DOM and View elements, so it will be possible to get corresponding elements using\n\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n\t *\n\t * @param {HTMLElement} domElement DOM element to bind.\n\t * @param {module:engine/view/element~Element} viewElement View element to bind.\n\t */\n\tbindElements( domElement, viewElement ) {\n\t\tthis._domToViewMapping.set( domElement, viewElement );\n\t\tthis._viewToDomMapping.set( viewElement, domElement );\n\t}\n\n\t/**\n\t * Unbinds given `domElement` from the view element it was bound to. Unbinding is deep, meaning that all children of\n\t * `domElement` will be unbound too.\n\t *\n\t * @param {HTMLElement} domElement DOM element to unbind.\n\t */\n\tunbindDomElement( domElement ) {\n\t\tconst viewElement = this._domToViewMapping.get( domElement );\n\n\t\tif ( viewElement ) {\n\t\t\tthis._domToViewMapping.delete( domElement );\n\t\t\tthis._viewToDomMapping.delete( viewElement );\n\n\t\t\t// Use Array.from because of MS Edge (#923).\n\t\t\tfor ( const child of Array.from( domElement.childNodes ) ) {\n\t\t\t\tthis.unbindDomElement( child );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Binds DOM and View document fragments, so it will be possible to get corresponding document fragments using\n\t * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n\t * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n\t *\n\t * @param {DocumentFragment} domFragment DOM document fragment to bind.\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment View document fragment to bind.\n\t */\n\tbindDocumentFragments( domFragment, viewFragment ) {\n\t\tthis._domToViewMapping.set( domFragment, viewFragment );\n\t\tthis._viewToDomMapping.set( viewFragment, domFragment );\n\t}\n\n\t/**\n\t * Converts view to DOM. For all text nodes, not bound elements and document fragments new items will\n\t * be created. For bound elements and document fragments function will return corresponding items.\n\t *\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} viewNode\n\t * View node or document fragment to transform.\n\t * @param {Document} domDocument Document which will be used to create DOM nodes.\n\t * @param {Object} [options] Conversion options.\n\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n\t * @returns {Node|DocumentFragment} Converted node or DocumentFragment.\n\t */\n\tviewToDom( viewNode, domDocument, options = {} ) {\n\t\tif ( viewNode.is( 'text' ) ) {\n\t\t\tconst textData = this._processDataFromViewText( viewNode );\n\n\t\t\treturn domDocument.createTextNode( textData );\n\t\t} else {\n\t\t\tif ( this.mapViewToDom( viewNode ) ) {\n\t\t\t\treturn this.mapViewToDom( viewNode );\n\t\t\t}\n\n\t\t\tlet domElement;\n\n\t\t\tif ( viewNode.is( 'documentFragment' ) ) {\n\t\t\t\t// Create DOM document fragment.\n\t\t\t\tdomElement = domDocument.createDocumentFragment();\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindDocumentFragments( domElement, viewNode );\n\t\t\t\t}\n\t\t\t} else if ( viewNode.is( 'uiElement' ) ) {\n\t\t\t\t// UIElement has its own render() method (see #799).\n\t\t\t\tdomElement = viewNode.render( domDocument );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domElement, viewNode );\n\t\t\t\t}\n\n\t\t\t\treturn domElement;\n\t\t\t} else {\n\t\t\t\t// Create DOM element.\n\t\t\t\tdomElement = domDocument.createElement( viewNode.name );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domElement, viewNode );\n\t\t\t\t}\n\n\t\t\t\t// Copy element's attributes.\n\t\t\t\tfor ( const key of viewNode.getAttributeKeys() ) {\n\t\t\t\t\tdomElement.setAttribute( key, viewNode.getAttribute( key ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( options.withChildren || options.withChildren === undefined ) {\n\t\t\t\tfor ( const child of this.viewChildrenToDom( viewNode, domDocument, options ) ) {\n\t\t\t\t\tdomElement.appendChild( child );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn domElement;\n\t\t}\n\t}\n\n\t/**\n\t * Converts children of the view element to DOM using the\n\t * {@link module:engine/view/domconverter~DomConverter#viewToDom} method.\n\t * Additionally, this method adds block {@link module:engine/view/filler filler} to the list of children, if needed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElement Parent view element.\n\t * @param {Document} domDocument Document which will be used to create DOM nodes.\n\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#viewToDom} options parameter.\n\t * @returns {Iterable.<Node>} DOM nodes.\n\t */\n\t* viewChildrenToDom( viewElement, domDocument, options = {} ) {\n\t\tconst fillerPositionOffset = viewElement.getFillerOffset && viewElement.getFillerOffset();\n\t\tlet offset = 0;\n\n\t\tfor ( const childView of viewElement.getChildren() ) {\n\t\t\tif ( fillerPositionOffset === offset ) {\n\t\t\t\tyield this.blockFiller( domDocument );\n\t\t\t}\n\n\t\t\tyield this.viewToDom( childView, domDocument, options );\n\n\t\t\toffset++;\n\t\t}\n\n\t\tif ( fillerPositionOffset === offset ) {\n\t\t\tyield this.blockFiller( domDocument );\n\t\t}\n\t}\n\n\t/**\n\t * Converts view {@link module:engine/view/range~Range} to DOM range.\n\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n\t *\n\t * @param {module:engine/view/range~Range} viewRange View range.\n\t * @returns {Range} DOM range.\n\t */\n\tviewRangeToDom( viewRange ) {\n\t\tconst domStart = this.viewPositionToDom( viewRange.start );\n\t\tconst domEnd = this.viewPositionToDom( viewRange.end );\n\n\t\tconst domRange = document.createRange();\n\t\tdomRange.setStart( domStart.parent, domStart.offset );\n\t\tdomRange.setEnd( domEnd.parent, domEnd.offset );\n\n\t\treturn domRange;\n\t}\n\n\t/**\n\t * Converts view {@link module:engine/view/position~Position} to DOM parent and offset.\n\t *\n\t * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n\t * If the converted position is directly before inline filler it is moved inside the filler.\n\t *\n\t * @param {module:engine/view/position~Position} viewPosition View position.\n\t * @returns {Object|null} position DOM position or `null` if view position could not be converted to DOM.\n\t * @returns {Node} position.parent DOM position parent.\n\t * @returns {Number} position.offset DOM position offset.\n\t */\n\tviewPositionToDom( viewPosition ) {\n\t\tconst viewParent = viewPosition.parent;\n\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\tconst domParent = this.findCorrespondingDomText( viewParent );\n\n\t\t\tif ( !domParent ) {\n\t\t\t\t// Position is in a view text node that has not been rendered to DOM yet.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlet offset = viewPosition.offset;\n\n\t\t\tif ( startsWithFiller( domParent ) ) {\n\t\t\t\toffset += INLINE_FILLER_LENGTH;\n\t\t\t}\n\n\t\t\treturn { parent: domParent, offset };\n\t\t} else {\n\t\t\t// viewParent is instance of ViewElement.\n\t\t\tlet domParent, domBefore, domAfter;\n\n\t\t\tif ( viewPosition.offset === 0 ) {\n\t\t\t\tdomParent = this.mapViewToDom( viewParent );\n\n\t\t\t\tif ( !domParent ) {\n\t\t\t\t\t// Position is in a view element that has not been rendered to DOM yet.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tdomAfter = domParent.childNodes[ 0 ];\n\t\t\t} else {\n\t\t\t\tconst nodeBefore = viewPosition.nodeBefore;\n\n\t\t\t\tdomBefore = nodeBefore.is( 'text' ) ?\n\t\t\t\t\tthis.findCorrespondingDomText( nodeBefore ) :\n\t\t\t\t\tthis.mapViewToDom( viewPosition.nodeBefore );\n\n\t\t\t\tif ( !domBefore ) {\n\t\t\t\t\t// Position is after a view element that has not been rendered to DOM yet.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tdomParent = domBefore.parentNode;\n\t\t\t\tdomAfter = domBefore.nextSibling;\n\t\t\t}\n\n\t\t\t// If there is an inline filler at position return position inside the filler. We should never return\n\t\t\t// the position before the inline filler.\n\t\t\tif ( isText( domAfter ) && startsWithFiller( domAfter ) ) {\n\t\t\t\treturn { parent: domAfter, offset: INLINE_FILLER_LENGTH };\n\t\t\t}\n\n\t\t\tconst offset = domBefore ? indexOf( domBefore ) + 1 : 0;\n\n\t\t\treturn { parent: domParent, offset };\n\t\t}\n\t}\n\n\t/**\n\t * Converts DOM to view. For all text nodes, not bound elements and document fragments new items will\n\t * be created. For bound elements and document fragments function will return corresponding items. For\n\t * {@link module:engine/view/filler fillers} `null` will be returned.\n\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * @param {Node|DocumentFragment} domNode DOM node or document fragment to transform.\n\t * @param {Object} [options] Conversion options.\n\t * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n\t * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n\t * @param {Boolean} [options.keepOriginalCase=false] If `false`, node's tag name will be converter to lower case.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} Converted node or document fragment\n\t * or `null` if DOM node is a {@link module:engine/view/filler filler} or the given node is an empty text node.\n\t */\n\tdomToView( domNode, options = {} ) {\n\t\tif ( isBlockFiller( domNode, this.blockFiller ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// When node is inside UIElement return that UIElement as it's view representation.\n\t\tconst uiElement = this.getParentUIElement( domNode, this._domToViewMapping );\n\n\t\tif ( uiElement ) {\n\t\t\treturn uiElement;\n\t\t}\n\n\t\tif ( isText( domNode ) ) {\n\t\t\tif ( isInlineFiller( domNode ) ) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tconst textData = this._processDataFromDomText( domNode );\n\n\t\t\t\treturn textData === '' ? null : new ViewText( textData );\n\t\t\t}\n\t\t} else if ( this.isComment( domNode ) ) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tif ( this.mapDomToView( domNode ) ) {\n\t\t\t\treturn this.mapDomToView( domNode );\n\t\t\t}\n\n\t\t\tlet viewElement;\n\n\t\t\tif ( this.isDocumentFragment( domNode ) ) {\n\t\t\t\t// Create view document fragment.\n\t\t\t\tviewElement = new ViewDocumentFragment();\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindDocumentFragments( domNode, viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Create view element.\n\t\t\t\tconst viewName = options.keepOriginalCase ? domNode.tagName : domNode.tagName.toLowerCase();\n\t\t\t\tviewElement = new ViewElement( viewName );\n\n\t\t\t\tif ( options.bind ) {\n\t\t\t\t\tthis.bindElements( domNode, viewElement );\n\t\t\t\t}\n\n\t\t\t\t// Copy element's attributes.\n\t\t\t\tconst attrs = domNode.attributes;\n\n\t\t\t\tfor ( let i = attrs.length - 1; i >= 0; i-- ) {\n\t\t\t\t\tviewElement._setAttribute( attrs[ i ].name, attrs[ i ].value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( options.withChildren || options.withChildren === undefined ) {\n\t\t\t\tfor ( const child of this.domChildrenToView( domNode, options ) ) {\n\t\t\t\t\tviewElement._appendChild( child );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn viewElement;\n\t\t}\n\t}\n\n\t/**\n\t * Converts children of the DOM element to view nodes using\n\t * the {@link module:engine/view/domconverter~DomConverter#domToView} method.\n\t * Additionally this method omits block {@link module:engine/view/filler filler}, if it exists in the DOM parent.\n\t *\n\t * @param {HTMLElement} domElement Parent DOM element.\n\t * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\n\t * @returns {Iterable.<module:engine/view/node~Node>} View nodes.\n\t */\n\t* domChildrenToView( domElement, options = {} ) {\n\t\tfor ( let i = 0; i < domElement.childNodes.length; i++ ) {\n\t\t\tconst domChild = domElement.childNodes[ i ];\n\t\t\tconst viewChild = this.domToView( domChild, options );\n\n\t\t\tif ( viewChild !== null ) {\n\t\t\t\tyield viewChild;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Converts DOM selection to view {@link module:engine/view/selection~Selection}.\n\t * Ranges which cannot be converted will be omitted.\n\t *\n\t * @param {Selection} domSelection DOM selection.\n\t * @returns {module:engine/view/selection~Selection} View selection.\n\t */\n\tdomSelectionToView( domSelection ) {\n\t\t// DOM selection might be placed in fake selection container.\n\t\t// If container contains fake selection - return corresponding view selection.\n\t\tif ( domSelection.rangeCount === 1 ) {\n\t\t\tlet container = domSelection.getRangeAt( 0 ).startContainer;\n\n\t\t\t// The DOM selection might be moved to the text node inside the fake selection container.\n\t\t\tif ( isText( container ) ) {\n\t\t\t\tcontainer = container.parentNode;\n\t\t\t}\n\n\t\t\tconst viewSelection = this.fakeSelectionToView( container );\n\n\t\t\tif ( viewSelection ) {\n\t\t\t\treturn viewSelection;\n\t\t\t}\n\t\t}\n\n\t\tconst isBackward = this.isDomSelectionBackward( domSelection );\n\n\t\tconst viewRanges = [];\n\n\t\tfor ( let i = 0; i < domSelection.rangeCount; i++ ) {\n\t\t\t// DOM Range have correct start and end, no matter what is the DOM Selection direction. So we don't have to fix anything.\n\t\t\tconst domRange = domSelection.getRangeAt( i );\n\t\t\tconst viewRange = this.domRangeToView( domRange );\n\n\t\t\tif ( viewRange ) {\n\t\t\t\tviewRanges.push( viewRange );\n\t\t\t}\n\t\t}\n\n\t\treturn new ViewSelection( viewRanges, { backward: isBackward } );\n\t}\n\n\t/**\n\t * Converts DOM Range to view {@link module:engine/view/range~Range}.\n\t * If the start or end position can not be converted `null` is returned.\n\t *\n\t * @param {Range} domRange DOM range.\n\t * @returns {module:engine/view/range~Range|null} View range.\n\t */\n\tdomRangeToView( domRange ) {\n\t\tconst viewStart = this.domPositionToView( domRange.startContainer, domRange.startOffset );\n\t\tconst viewEnd = this.domPositionToView( domRange.endContainer, domRange.endOffset );\n\n\t\tif ( viewStart && viewEnd ) {\n\t\t\treturn new ViewRange( viewStart, viewEnd );\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Converts DOM parent and offset to view {@link module:engine/view/position~Position}.\n\t *\n\t * If the position is inside a {@link module:engine/view/filler filler} which has no corresponding view node,\n\t * position of the filler will be converted and returned.\n\t *\n\t * If the position is inside DOM element rendered by {@link module:engine/view/uielement~UIElement}\n\t * that position will be converted to view position before that UIElement.\n\t *\n\t * If structures are too different and it is not possible to find corresponding position then `null` will be returned.\n\t *\n\t * @param {Node} domParent DOM position parent.\n\t * @param {Number} domOffset DOM position offset.\n\t * @returns {module:engine/view/position~Position} viewPosition View position.\n\t */\n\tdomPositionToView( domParent, domOffset ) {\n\t\tif ( isBlockFiller( domParent, this.blockFiller ) ) {\n\t\t\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\n\t\t}\n\n\t\t// If position is somewhere inside UIElement - return position before that element.\n\t\tconst viewElement = this.mapDomToView( domParent );\n\n\t\tif ( viewElement && viewElement.is( 'uiElement' ) ) {\n\t\t\treturn ViewPosition._createBefore( viewElement );\n\t\t}\n\n\t\tif ( isText( domParent ) ) {\n\t\t\tif ( isInlineFiller( domParent ) ) {\n\t\t\t\treturn this.domPositionToView( domParent.parentNode, indexOf( domParent ) );\n\t\t\t}\n\n\t\t\tconst viewParent = this.findCorrespondingViewText( domParent );\n\t\t\tlet offset = domOffset;\n\n\t\t\tif ( !viewParent ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( startsWithFiller( domParent ) ) {\n\t\t\t\toffset -= INLINE_FILLER_LENGTH;\n\t\t\t\toffset = offset < 0 ? 0 : offset;\n\t\t\t}\n\n\t\t\treturn new ViewPosition( viewParent, offset );\n\t\t}\n\t\t// domParent instanceof HTMLElement.\n\t\telse {\n\t\t\tif ( domOffset === 0 ) {\n\t\t\t\tconst viewParent = this.mapDomToView( domParent );\n\n\t\t\t\tif ( viewParent ) {\n\t\t\t\t\treturn new ViewPosition( viewParent, 0 );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst domBefore = domParent.childNodes[ domOffset - 1 ];\n\t\t\t\tconst viewBefore = isText( domBefore ) ?\n\t\t\t\t\tthis.findCorrespondingViewText( domBefore ) :\n\t\t\t\t\tthis.mapDomToView( domBefore );\n\n\t\t\t\t// TODO #663\n\t\t\t\tif ( viewBefore && viewBefore.parent ) {\n\t\t\t\t\treturn new ViewPosition( viewBefore.parent, viewBefore.index + 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Returns corresponding view {@link module:engine/view/element~Element Element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment} for provided DOM element or\n\t * document fragment. If there is no view item {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * to the given DOM - `undefined` is returned.\n\t * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * @param {DocumentFragment|Element} domElementOrDocumentFragment DOM element or document fragment.\n\t * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|undefined}\n\t * Corresponding view element, document fragment or `undefined` if no element was bound.\n\t */\n\tmapDomToView( domElementOrDocumentFragment ) {\n\t\treturn this.getParentUIElement( domElementOrDocumentFragment ) || this._domToViewMapping.get( domElementOrDocumentFragment );\n\t}\n\n\t/**\n\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n\t * corresponding text node is returned based on the sibling or parent.\n\t *\n\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n\t * to find the corresponding text node.\n\t *\n\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * element, it is used to find the corresponding text node.\n\t *\n\t * For all text nodes rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n\t *\n\t * Otherwise `null` is returned.\n\t *\n\t * Note that for the block or inline {@link module:engine/view/filler filler} this method returns `null`.\n\t *\n\t * @param {Text} domText DOM text node.\n\t * @returns {module:engine/view/text~Text|null} Corresponding view text node or `null`, if it was not possible to find a\n\t * corresponding node.\n\t */\n\tfindCorrespondingViewText( domText ) {\n\t\tif ( isInlineFiller( domText ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If DOM text was rendered by UIElement - return that element.\n\t\tconst uiElement = this.getParentUIElement( domText );\n\n\t\tif ( uiElement ) {\n\t\t\treturn uiElement;\n\t\t}\n\n\t\tconst previousSibling = domText.previousSibling;\n\n\t\t// Try to use previous sibling to find the corresponding text node.\n\t\tif ( previousSibling ) {\n\t\t\tif ( !( this.isElement( previousSibling ) ) ) {\n\t\t\t\t// The previous is text or comment.\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst viewElement = this.mapDomToView( previousSibling );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tconst nextSibling = viewElement.nextSibling;\n\n\t\t\t\t// It might be filler which has no corresponding view node.\n\t\t\t\tif ( nextSibling instanceof ViewText ) {\n\t\t\t\t\treturn viewElement.nextSibling;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Try to use parent to find the corresponding text node.\n\t\telse {\n\t\t\tconst viewElement = this.mapDomToView( domText.parentNode );\n\n\t\t\tif ( viewElement ) {\n\t\t\t\tconst firstChild = viewElement.getChild( 0 );\n\n\t\t\t\t// It might be filler which has no corresponding view node.\n\t\t\t\tif ( firstChild instanceof ViewText ) {\n\t\t\t\t\treturn firstChild;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns corresponding DOM item for provided {@link module:engine/view/element~Element Element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment}.\n\t * To find a corresponding text for {@link module:engine/view/text~Text view Text instance}\n\t * use {@link #findCorrespondingDomText}.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewNode\n\t * View element or document fragment.\n\t * @returns {Node|DocumentFragment|undefined} Corresponding DOM node or document fragment.\n\t */\n\tmapViewToDom( documentFragmentOrElement ) {\n\t\treturn this._viewToDomMapping.get( documentFragmentOrElement );\n\t}\n\n\t/**\n\t * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n\t * corresponding text node is returned based on the sibling or parent.\n\t *\n\t * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n\t * to find the corresponding text node.\n\t *\n\t * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n\t * element, it is used to find the corresponding text node.\n\t *\n\t * Otherwise `null` is returned.\n\t *\n\t * @param {module:engine/view/text~Text} viewText View text node.\n\t * @returns {Text|null} Corresponding DOM text node or `null`, if it was not possible to find a corresponding node.\n\t */\n\tfindCorrespondingDomText( viewText ) {\n\t\tconst previousSibling = viewText.previousSibling;\n\n\t\t// Try to use previous sibling to find the corresponding text node.\n\t\tif ( previousSibling && this.mapViewToDom( previousSibling ) ) {\n\t\t\treturn this.mapViewToDom( previousSibling ).nextSibling;\n\t\t}\n\n\t\t// If this is a first node, try to use parent to find the corresponding text node.\n\t\tif ( !previousSibling && viewText.parent && this.mapViewToDom( viewText.parent ) ) {\n\t\t\treturn this.mapViewToDom( viewText.parent ).childNodes[ 0 ];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Focuses DOM editable that is corresponding to provided {@link module:engine/view/editableelement~EditableElement}.\n\t *\n\t * @param {module:engine/view/editableelement~EditableElement} viewEditable\n\t */\n\tfocus( viewEditable ) {\n\t\tconst domEditable = this.mapViewToDom( viewEditable );\n\n\t\tif ( domEditable && domEditable.ownerDocument.activeElement !== domEditable ) {\n\t\t\t// Save the scrollX and scrollY positions before the focus.\n\t\t\tconst { scrollX, scrollY } = global.window;\n\t\t\tconst scrollPositions = [];\n\n\t\t\t// Save all scrollLeft and scrollTop values starting from domEditable up to\n\t\t\t// document#documentElement.\n\t\t\tforEachDomNodeAncestor( domEditable, node => {\n\t\t\t\tconst { scrollLeft, scrollTop } = node;\n\n\t\t\t\tscrollPositions.push( [ scrollLeft, scrollTop ] );\n\t\t\t} );\n\n\t\t\tdomEditable.focus();\n\n\t\t\t// Restore scrollLeft and scrollTop values starting from domEditable up to\n\t\t\t// document#documentElement.\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/957\n\t\t\tforEachDomNodeAncestor( domEditable, node => {\n\t\t\t\tconst [ scrollLeft, scrollTop ] = scrollPositions.shift();\n\n\t\t\t\tnode.scrollLeft = scrollLeft;\n\t\t\t\tnode.scrollTop = scrollTop;\n\t\t\t} );\n\n\t\t\t// Restore the scrollX and scrollY positions after the focus.\n\t\t\t// https://github.com/ckeditor/ckeditor5-engine/issues/951\n\t\t\tglobal.window.scrollTo( scrollX, scrollY );\n\t\t}\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.ELEMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisElement( node ) {\n\t\treturn node && node.nodeType == Node.ELEMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.DOCUMENT_FRAGMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisDocumentFragment( node ) {\n\t\treturn node && node.nodeType == Node.DOCUMENT_FRAGMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` when `node.nodeType` equals `Node.COMMENT_NODE`.\n\t *\n\t * @param {Node} node Node to check.\n\t * @returns {Boolean}\n\t */\n\tisComment( node ) {\n\t\treturn node && node.nodeType == Node.COMMENT_NODE;\n\t}\n\n\t/**\n\t * Returns `true` if given selection is a backward selection, that is, if it's `focus` is before `anchor`.\n\t *\n\t * @param {Selection} DOM Selection instance to check.\n\t * @returns {Boolean}\n\t */\n\tisDomSelectionBackward( selection ) {\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Since it takes multiple lines of code to check whether a \"DOM Position\" is before/after another \"DOM Position\",\n\t\t// we will use the fact that range will collapse if it's end is before it's start.\n\t\tconst range = document.createRange();\n\n\t\trange.setStart( selection.anchorNode, selection.anchorOffset );\n\t\trange.setEnd( selection.focusNode, selection.focusOffset );\n\n\t\tconst backward = range.collapsed;\n\n\t\trange.detach();\n\n\t\treturn backward;\n\t}\n\n\t/**\n\t * Returns parent {@link module:engine/view/uielement~UIElement} for provided DOM node. Returns `null` if there is no\n\t * parent UIElement.\n\t *\n\t * @param {Node} domNode\n\t * @returns {module:engine/view/uielement~UIElement|null}\n\t */\n\tgetParentUIElement( domNode ) {\n\t\tconst ancestors = getAncestors( domNode );\n\n\t\t// Remove domNode from the list.\n\t\tancestors.pop();\n\n\t\twhile ( ancestors.length ) {\n\t\t\tconst domNode = ancestors.pop();\n\t\t\tconst viewNode = this._domToViewMapping.get( domNode );\n\n\t\t\tif ( viewNode && viewNode.is( 'uiElement' ) ) {\n\t\t\t\treturn viewNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks if given selection's boundaries are at correct places.\n\t *\n\t * The following places are considered as incorrect for selection boundaries:\n\t * * before or in the middle of the inline filler sequence,\n\t * * inside the DOM element which represents {@link module:engine/view/uielement~UIElement a view ui element}.\n\t *\n\t * @param {Selection} domSelection DOM Selection object to be checked.\n\t * @returns {Boolean} `true` if the given selection is at a correct place, `false` otherwise.\n\t */\n\tisDomSelectionCorrect( domSelection ) {\n\t\treturn this._isDomSelectionPositionCorrect( domSelection.anchorNode, domSelection.anchorOffset ) &&\n\t\t\tthis._isDomSelectionPositionCorrect( domSelection.focusNode, domSelection.focusOffset );\n\t}\n\n\t/**\n\t * Checks if the given DOM position is a correct place for selection boundary. See {@link #isDomSelectionCorrect}.\n\t *\n\t * @private\n\t * @param {Element} domParent Position parent.\n\t * @param {Number} offset Position offset.\n\t * @returns {Boolean} `true` if given position is at a correct place for selection boundary, `false` otherwise.\n\t */\n\t_isDomSelectionPositionCorrect( domParent, offset ) {\n\t\t// If selection is before or in the middle of inline filler string, it is incorrect.\n\t\tif ( isText( domParent ) && startsWithFiller( domParent ) && offset < INLINE_FILLER_LENGTH ) {\n\t\t\t// Selection in a text node, at wrong position (before or in the middle of filler).\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this.isElement( domParent ) && startsWithFiller( domParent.childNodes[ offset ] ) ) {\n\t\t\t// Selection in an element node, before filler text node.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst viewParent = this.mapDomToView( domParent );\n\n\t\t// If selection is in `view.UIElement`, it is incorrect. Note that `mapDomToView()` returns `view.UIElement`\n\t\t// also for any dom element that is inside the view ui element (so we don't need to perform any additional checks).\n\t\tif ( viewParent && viewParent.is( 'uiElement' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Takes text data from a given {@link module:engine/view/text~Text#data} and processes it so\n\t * it is correctly displayed in the DOM.\n\t *\n\t * Following changes are done:\n\t *\n\t * * a space at the beginning is changed to `&nbsp;` if this is the first text node in its container\n\t * element or if a previous text node ends with a space character,\n\t * * space at the end of the text node is changed to `&nbsp;` if this is the last text node in its container,\n\t * * remaining spaces are replaced to a chain of spaces and `&nbsp;` (e.g. `'x   x'` becomes `'x &nbsp; x'`).\n\t *\n\t * Content of {@link #preElements} is not processed.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} node View text node to process.\n\t * @returns {String} Processed text data.\n\t */\n\t_processDataFromViewText( node ) {\n\t\tlet data = node.data;\n\n\t\t// If any of node ancestors has a name which is in `preElements` array, then currently processed\n\t\t// view text node is (will be) in preformatted element. We should not change whitespaces then.\n\t\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\n\t\t\treturn data;\n\t\t}\n\n\t\t// 1. Replace the first space with a nbsp if the previous node ends with a space or there is no previous node\n\t\t// (container element boundary).\n\t\tif ( data.charAt( 0 ) == ' ' ) {\n\t\t\tconst prevNode = this._getTouchingViewTextNode( node, false );\n\t\t\tconst prevEndsWithSpace = prevNode && this._nodeEndsWithSpace( prevNode );\n\n\t\t\tif ( prevEndsWithSpace || !prevNode ) {\n\t\t\t\tdata = '\\u00A0' + data.substr( 1 );\n\t\t\t}\n\t\t}\n\n\t\t// 2. Replace the last space with a nbsp if this is the last text node (container element boundary).\n\t\tif ( data.charAt( data.length - 1 ) == ' ' ) {\n\t\t\tconst nextNode = this._getTouchingViewTextNode( node, true );\n\n\t\t\tif ( !nextNode ) {\n\t\t\t\tdata = data.substr( 0, data.length - 1 ) + '\\u00A0';\n\t\t\t}\n\t\t}\n\n\t\treturn data.replace( / {2}/g, ' \\u00A0' );\n\t}\n\n\t/**\n\t * Checks whether given node ends with a space character after changing appropriate space characters to `&nbsp;`s.\n\t *\n\t * @private\n\t * @param {module:engine/view/text~Text} node Node to check.\n\t * @returns {Boolean} `true` if given `node` ends with space, `false` otherwise.\n\t */\n\t_nodeEndsWithSpace( node ) {\n\t\tif ( node.getAncestors().some( parent => this.preElements.includes( parent.name ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst data = this._processDataFromViewText( node );\n\n\t\treturn data.charAt( data.length - 1 ) == ' ';\n\t}\n\n\t/**\n\t * Takes text data from native `Text` node and processes it to a correct {@link module:engine/view/text~Text view text node} data.\n\t *\n\t * Following changes are done:\n\t *\n\t * * multiple whitespaces are replaced to a single space,\n\t * * space at the beginning of a text node is removed if it is the first text node in its container\n\t * element or if the previous text node ends with a space character,\n\t * * space at the end of the text node is removed, if it is the last text node in its container.\n\t *\n\t * @param {Node} node DOM text node to process.\n\t * @returns {String} Processed data.\n\t * @private\n\t */\n\t_processDataFromDomText( node ) {\n\t\tlet data = node.data;\n\n\t\tif ( _hasDomParentOfType( node, this.preElements ) ) {\n\t\t\treturn getDataWithoutFiller( node );\n\t\t}\n\n\t\t// Change all consecutive whitespace characters (from the [ \\n\\t\\r] set –\n\t\t// see https://github.com/ckeditor/ckeditor5-engine/issues/822#issuecomment-311670249) to a single space character.\n\t\t// That's how multiple whitespaces are treated when rendered, so we normalize those whitespaces.\n\t\t// We're replacing 1+ (and not 2+) to also normalize singular \\n\\t\\r characters (#822).\n\t\tdata = data.replace( /[ \\n\\t\\r]{1,}/g, ' ' );\n\n\t\tconst prevNode = this._getTouchingInlineDomNode( node, false );\n\t\tconst nextNode = this._getTouchingInlineDomNode( node, true );\n\n\t\tconst shouldLeftTrim = this._checkShouldLeftTrimDomText( prevNode );\n\t\tconst shouldRightTrim = this._checkShouldRightTrimDomText( node, nextNode );\n\n\t\t// If the previous dom text node does not exist or it ends by whitespace character, remove space character from the beginning\n\t\t// of this text node. Such space character is treated as a whitespace.\n\t\tif ( shouldLeftTrim ) {\n\t\t\tdata = data.replace( /^ /, '' );\n\t\t}\n\n\t\t// If the next text node does not exist remove space character from the end of this text node.\n\t\tif ( shouldRightTrim ) {\n\t\t\tdata = data.replace( / $/, '' );\n\t\t}\n\n\t\t// At the beginning and end of a block element, Firefox inserts normal space + <br> instead of non-breaking space.\n\t\t// This means that the text node starts/end with normal space instead of non-breaking space.\n\t\t// This causes a problem because the normal space would be removed in `.replace` calls above. To prevent that,\n\t\t// the inline filler is removed only after the data is initially processed (by the `.replace` above). See ckeditor5#692.\n\t\tdata = getDataWithoutFiller( new Text( data ) );\n\n\t\t// At this point we should have removed all whitespaces from DOM text data.\n\n\t\t// Now we have to change &nbsp; chars, that were in DOM text data because of rendering reasons, to spaces.\n\t\t// First, change all ` \\u00A0` pairs (space + &nbsp;) to two spaces. DOM converter changes two spaces from model/view as\n\t\t// ` \\u00A0` to ensure proper rendering. Since here we convert back, we recognize those pairs and change them\n\t\t// to `  ` which is what we expect to have in model/view.\n\t\tdata = data.replace( / \\u00A0/g, '  ' );\n\n\t\t// Then, change &nbsp; character that is at the beginning of the text node to space character.\n\t\t// As above, that &nbsp; was created for rendering reasons but it's real meaning is just a space character.\n\t\t// We do that replacement only if this is the first node or the previous node ends on whitespace character.\n\t\tif ( shouldLeftTrim ) {\n\t\t\tdata = data.replace( /^\\u00A0/, ' ' );\n\t\t}\n\n\t\t// Since input text data could be: `x_ _`, we would not replace the first &nbsp; after `x` character.\n\t\t// We have to fix it. Since we already change all ` &nbsp;`, we will have something like this at the end of text data:\n\t\t// `x_ _ _` -> `x_    `. Find &nbsp; at the end of string (can be followed only by spaces).\n\t\t// We do that replacement only if this is the last node or the next node starts with &nbsp; or is a <br>.\n\t\tif ( isText( nextNode ) ? nextNode.data.charAt( 0 ) == '\\u00A0' : true ) {\n\t\t\tdata = data.replace( /\\u00A0( *)$/, ' $1' );\n\t\t}\n\n\t\t// At this point, all whitespaces should be removed and all &nbsp; created for rendering reasons should be\n\t\t// changed to normal space. All left &nbsp; are &nbsp; inserted intentionally.\n\t\treturn data;\n\t}\n\n\t/**\n\t * Helper function which checks if a DOM text node, preceded by the given `prevNode` should\n\t * be trimmed from the left side.\n\t *\n\t * @param {Node} prevNode\n\t */\n\t_checkShouldLeftTrimDomText( prevNode ) {\n\t\tif ( !prevNode ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( isElement( prevNode ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn /[^\\S\\u00A0]/.test( prevNode.data.charAt( prevNode.data.length - 1 ) );\n\t}\n\n\t/**\n\t * Helper function which checks if a DOM text node, succeeded by the given `nextNode` should\n\t * be trimmed from the right side.\n\t *\n\t * @param {Node} node\n\t * @param {Node} prevNode\n\t */\n\t_checkShouldRightTrimDomText( node, nextNode ) {\n\t\tif ( nextNode ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !startsWithFiller( node );\n\t}\n\n\t/**\n\t * Helper function. For given {@link module:engine/view/text~Text view text node}, it finds previous or next sibling\n\t * that is contained in the same container element. If there is no such sibling, `null` is returned.\n\t *\n\t * @param {module:engine/view/text~Text} node Reference node.\n\t * @param {Boolean} getNext\n\t * @returns {module:engine/view/text~Text|null} Touching text node or `null` if there is no next or previous touching text node.\n\t */\n\t_getTouchingViewTextNode( node, getNext ) {\n\t\tconst treeWalker = new ViewTreeWalker( {\n\t\t\tstartPosition: getNext ? ViewPosition._createAfter( node ) : ViewPosition._createBefore( node ),\n\t\t\tdirection: getNext ? 'forward' : 'backward'\n\t\t} );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\t// ViewContainerElement is found on a way to next ViewText node, so given `node` was first/last\n\t\t\t// text node in its container element.\n\t\t\tif ( value.item.is( 'containerElement' ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// <br> found – it works like a block boundary, so do not scan further.\n\t\t\telse if ( value.item.is( 'br' ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// Found a text node in the same container element.\n\t\t\telse if ( value.item.is( 'textProxy' ) ) {\n\t\t\t\treturn value.item;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Helper function. For the given text node, it finds the closest touching node which is either\n\t * a text node or a `<br>`. The search is terminated at block element boundaries and if a matching node\n\t * wasn't found so far, `null` is returned.\n\t *\n\t * In the following DOM structure:\n\t *\n\t *\t\t<p>foo<b>bar</b><br>bom</p>\n\t *\n\t * * `foo` doesn't have its previous touching inline node (`null` is returned),\n\t * * `foo`'s next touching inline node is `bar`\n\t * * `bar`'s next touching inline node is `<br>`\n\t *\n\t * This method returns text nodes and `<br>` elements because these types of nodes affect how\n\t * spaces in the given text node need to be converted.\n\t *\n\t * @private\n\t * @param {Text} node\n\t * @param {Boolean} getNext\n\t * @returns {Text|Element|null}\n\t */\n\t_getTouchingInlineDomNode( node, getNext ) {\n\t\tif ( !node.parentNode ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst direction = getNext ? 'nextNode' : 'previousNode';\n\t\tconst document = node.ownerDocument;\n\t\tconst topmostParent = getAncestors( node )[ 0 ];\n\n\t\tconst treeWalker = document.createTreeWalker( topmostParent, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, {\n\t\t\tacceptNode( node ) {\n\t\t\t\tif ( isText( node ) ) {\n\t\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\n\t\t\t\t}\n\n\t\t\t\tif ( node.tagName == 'BR' ) {\n\t\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\n\t\t\t\t}\n\n\t\t\t\treturn NodeFilter.FILTER_SKIP;\n\t\t\t}\n\t\t} );\n\n\t\ttreeWalker.currentNode = node;\n\n\t\tconst touchingNode = treeWalker[ direction ]();\n\n\t\tif ( touchingNode !== null ) {\n\t\t\tconst lca = getCommonAncestor( node, touchingNode );\n\n\t\t\t// If there is common ancestor between the text node and next/prev text node,\n\t\t\t// and there are no block elements on a way from the text node to that ancestor,\n\t\t\t// and there are no block elements on a way from next/prev text node to that ancestor...\n\t\t\tif (\n\t\t\t\tlca &&\n\t\t\t\t!_hasDomParentOfType( node, this.blockElements, lca ) &&\n\t\t\t\t!_hasDomParentOfType( touchingNode, this.blockElements, lca )\n\t\t\t) {\n\t\t\t\t// Then they are in the same container element.\n\t\t\t\treturn touchingNode;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n// Helper function.\n// Used to check if given native `Element` or `Text` node has parent with tag name from `types` array.\n//\n// @param {Node} node\n// @param {Array.<String>} types\n// @param {Boolean} [boundaryParent] Can be given if parents should be checked up to a given element (excluding that element).\n// @returns {Boolean} `true` if such parent exists or `false` if it does not.\nfunction _hasDomParentOfType( node, types, boundaryParent ) {\n\tlet parents = getAncestors( node );\n\n\tif ( boundaryParent ) {\n\t\tparents = parents.slice( parents.indexOf( boundaryParent ) + 1 );\n\t}\n\n\treturn parents.some( parent => parent.tagName && types.includes( parent.tagName.toLowerCase() ) );\n}\n\n// A helper that executes given callback for each DOM node's ancestor, starting from the given node\n// and ending in document#documentElement.\n//\n// @param {Node} node\n// @param {Function} callback A callback to be executed for each ancestor.\nfunction forEachDomNodeAncestor( node, callback ) {\n\twhile ( node && node != global.document ) {\n\t\tcallback( node );\n\t\tnode = node.parentNode;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/getcommonancestor\n */\n\nimport getAncestors from './getancestors';\n\n/**\n * Searches and returns the lowest common ancestor of two given nodes.\n *\n * @param {Node} nodeA First node.\n * @param {Node} nodeB Second node.\n * @returns {Node|DocumentFragment|Document|null} Lowest common ancestor of both nodes or `null` if nodes do not have a common ancestor.\n */\nexport default function getCommonAncestor( nodeA, nodeB ) {\n\tconst ancestorsA = getAncestors( nodeA );\n\tconst ancestorsB = getAncestors( nodeB );\n\n\tlet i = 0;\n\n\t// It does not matter which array is shorter.\n\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\ti++;\n\t}\n\n\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/iswindow\n */\n\n/**\n * Checks if the object is a native DOM Window.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isWindow( obj ) {\n\tconst stringifiedObject = Object.prototype.toString.apply( obj );\n\n\t// Returns `true` for the `window` object in browser environments.\n\tif ( stringifiedObject == '[object Window]' ) {\n\t\treturn true;\n\t}\n\n\t// Returns `true` for the `window` object in the Electron environment.\n\tif ( stringifiedObject == '[object global]' ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/emittermixin\n */\n\nimport { default as EmitterMixin, _getEmitterListenedTo, _setEmitterId } from '../emittermixin';\nimport uid from '../uid';\nimport isNode from './isnode';\nimport isWindow from './iswindow';\nimport { extend } from 'lodash-es';\n\n/**\n * Mixin that injects the DOM events API into its host. It provides the API\n * compatible with {@link module:utils/emittermixin~EmitterMixin}.\n *\n * DOM emitter mixin is by default available in the {@link module:ui/view~View} class,\n * but it can also be mixed into any other class:\n *\n *\t\timport mix from '../utils/mix.js';\n *\t\timport DomEmitterMixin from '../utils/dom/emittermixin.js';\n *\n *\t\tclass SomeView {}\n *\t\tmix( SomeView, DomEmitterMixin );\n *\n *\t\tconst view = new SomeView();\n *\t\tview.listenTo( domElement, ( evt, domEvt ) => {\n *\t\t\tconsole.log( evt, domEvt );\n *\t\t} );\n *\n * @mixin EmitterMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n */\nconst DomEmitterMixin = extend( {}, EmitterMixin, {\n\t/**\n\t * Registers a callback function to be executed when an event is fired in a specific Emitter or DOM Node.\n\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n\t *\n\t * @param {module:utils/emittermixin~Emitter|Node} emitter The object that fires the event.\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n\t * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n\t * order they were added.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t */\n\tlistenTo( emitter, ...rest ) {\n\t\t// Check if emitter is an instance of DOM Node. If so, replace the argument with\n\t\t// corresponding ProxyEmitter (or create one if not existing).\n\t\tif ( isNode( emitter ) || isWindow( emitter ) ) {\n\t\t\tconst proxy = this._getProxyEmitter( emitter ) || new ProxyEmitter( emitter );\n\n\t\t\tproxy.attach( ...rest );\n\n\t\t\temitter = proxy;\n\t\t}\n\n\t\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\n\t\tEmitterMixin.listenTo.call( this, emitter, ...rest );\n\t},\n\n\t/**\n\t * Stops listening for events. It can be used at different levels:\n\t * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n\t *\n\t * * To stop listening to a specific callback.\n\t * * To stop listening to a specific event.\n\t * * To stop listening to all events fired by a specific object.\n\t * * To stop listening to all events fired by all object.\n\t *\n\t * @param {module:utils/emittermixin~Emitter|Node} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n\t * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n\t * for all events from `emitter`.\n\t * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n\t * `event`.\n\t */\n\tstopListening( emitter, event, callback ) {\n\t\t// Check if emitter is an instance of DOM Node. If so, replace the argument with corresponding ProxyEmitter.\n\t\tif ( isNode( emitter ) || isWindow( emitter ) ) {\n\t\t\tconst proxy = this._getProxyEmitter( emitter );\n\n\t\t\t// Element has no listeners.\n\t\t\tif ( !proxy ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\temitter = proxy;\n\t\t}\n\n\t\t// Execute parent class method with Emitter (or ProxyEmitter) instance.\n\t\tEmitterMixin.stopListening.call( this, emitter, event, callback );\n\n\t\tif ( emitter instanceof ProxyEmitter ) {\n\t\t\temitter.detach( event );\n\t\t}\n\t},\n\n\t/**\n\t * Retrieves ProxyEmitter instance for given DOM Node residing in this Host.\n\t *\n\t * @pivate\n\t * @param {Node} node DOM Node of the ProxyEmitter.\n\t * @returns {module:utils/dom/emittermixin~ProxyEmitter} ProxyEmitter instance or null.\n\t */\n\t_getProxyEmitter( node ) {\n\t\treturn _getEmitterListenedTo( this, getNodeUID( node ) );\n\t}\n} );\n\nexport default DomEmitterMixin;\n\n/**\n * Creates a ProxyEmitter instance. Such an instance is a bridge between a DOM Node firing events\n * and any Host listening to them. It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#on}.\n *\n *                                  listenTo( click, ... )\n *                    +-----------------------------------------+\n *                    |              stopListening( ... )       |\n *     +----------------------------+                           |             addEventListener( click, ... )\n *     | Host                       |                           |   +---------------------------------------------+\n *     +----------------------------+                           |   |       removeEventListener( click, ... )     |\n *     | _listeningTo: {            |                +----------v-------------+                                   |\n *     |   UID: {                   |                | ProxyEmitter           |                                   |\n *     |     emitter: ProxyEmitter, |                +------------------------+                      +------------v----------+\n *     |     callbacks: {           |                | events: {              |                      | Node (HTMLElement)    |\n *     |       click: [ callbacks ] |                |   click: [ callbacks ] |                      +-----------------------+\n *     |     }                      |                | },                     |                      | data-ck-expando: UID  |\n *     |   }                        |                | _domNode: Node,        |                      +-----------------------+\n *     | }                          |                | _domListeners: {},     |                                   |\n *     | +------------------------+ |                | _emitterId: UID        |                                   |\n *     | | DomEmitterMixin        | |                +--------------^---------+                                   |\n *     | +------------------------+ |                           |   |                                             |\n *     +--------------^-------------+                           |   +---------------------------------------------+\n *                    |                                         |                  click (DOM Event)\n *                    +-----------------------------------------+\n *                                fire( click, DOM Event )\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n * @private\n */\nclass ProxyEmitter {\n\t/**\n\t * @param {Node} node DOM Node that fires events.\n\t * @returns {Object} ProxyEmitter instance bound to the DOM Node.\n\t */\n\tconstructor( node ) {\n\t\t// Set emitter ID to match DOM Node \"expando\" property.\n\t\t_setEmitterId( this, getNodeUID( node ) );\n\n\t\t// Remember the DOM Node this ProxyEmitter is bound to.\n\t\tthis._domNode = node;\n\t}\n}\n\nextend( ProxyEmitter.prototype, EmitterMixin, {\n\t/**\n\t * Collection of native DOM listeners.\n\t *\n\t * @private\n\t * @member {Object} module:utils/dom/emittermixin~ProxyEmitter#_domListeners\n\t */\n\n\t/**\n\t * Registers a callback function to be executed when an event is fired.\n\t *\n\t * It attaches a native DOM listener to the DOM Node. When fired,\n\t * a corresponding Emitter event will also fire with DOM Event object as an argument.\n\t *\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#attach\n\t * @param {String} event The name of the event.\n\t * @param {Function} callback The function to be called on event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n\t * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n\t */\n\tattach( event, callback, options = {} ) {\n\t\t// If the DOM Listener for given event already exist it is pointless\n\t\t// to attach another one.\n\t\tif ( this._domListeners && this._domListeners[ event ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domListener = this._createDomListener( event, !!options.useCapture );\n\n\t\t// Attach the native DOM listener to DOM Node.\n\t\tthis._domNode.addEventListener( event, domListener, !!options.useCapture );\n\n\t\tif ( !this._domListeners ) {\n\t\t\tthis._domListeners = {};\n\t\t}\n\n\t\t// Store the native DOM listener in this ProxyEmitter. It will be helpful\n\t\t// when stopping listening to the event.\n\t\tthis._domListeners[ event ] = domListener;\n\t},\n\n\t/**\n\t * Stops executing the callback on the given event.\n\t *\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#detach\n\t * @param {String} event The name of the event.\n\t */\n\tdetach( event ) {\n\t\tlet events;\n\n\t\t// Remove native DOM listeners which are orphans. If no callbacks\n\t\t// are awaiting given event, detach native DOM listener from DOM Node.\n\t\t// See: {@link attach}.\n\n\t\tif ( this._domListeners[ event ] && ( !( events = this._events[ event ] ) || !events.callbacks.length ) ) {\n\t\t\tthis._domListeners[ event ].removeListener();\n\t\t}\n\t},\n\n\t/**\n\t * Creates a native DOM listener callback. When the native DOM event\n\t * is fired it will fire corresponding event on this ProxyEmitter.\n\t * Note: A native DOM Event is passed as an argument.\n\t *\n\t * @private\n\t * @method module:utils/dom/emittermixin~ProxyEmitter#_createDomListener\n\t * @param {String} event The name of the event.\n\t * @param {Boolean} useCapture Indicates whether the listener was created for capturing event.\n\t * @returns {Function} The DOM listener callback.\n\t */\n\t_createDomListener( event, useCapture ) {\n\t\tconst domListener = domEvt => {\n\t\t\tthis.fire( event, domEvt );\n\t\t};\n\n\t\t// Supply the DOM listener callback with a function that will help\n\t\t// detach it from the DOM Node, when it is no longer necessary.\n\t\t// See: {@link detach}.\n\t\tdomListener.removeListener = () => {\n\t\t\tthis._domNode.removeEventListener( event, domListener, useCapture );\n\t\t\tdelete this._domListeners[ event ];\n\t\t};\n\n\t\treturn domListener;\n\t}\n} );\n\n// Gets an unique DOM Node identifier. The identifier will be set if not defined.\n//\n// @private\n// @param {Node} node\n// @returns {String} UID for given DOM Node.\nfunction getNodeUID( node ) {\n\treturn node[ 'data-ck-expando' ] || ( node[ 'data-ck-expando' ] = uid() );\n}\n\n/**\n * Interface representing classes which mix in {@link module:utils/dom/emittermixin~EmitterMixin}.\n *\n * @interface Emitter\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/observer\n */\n\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Abstract base observer class. Observers are classes which listen to DOM events, do the preliminary\n * processing and fire events on the {@link module:engine/view/document~Document} objects.\n * Observers can also add features to the view, for instance by updating its status or marking elements\n * which need refresh on DOM events.\n *\n * @abstract\n */\nexport default class Observer {\n\t/**\n\t * Creates an instance of the observer.\n\t *\n\t * @param {module:engine/view/view~View} view\n\t */\n\tconstructor( view ) {\n\t\t/**\n\t\t * Instance of the view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View}\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/document~Document} object.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document}\n\t\t */\n\t\tthis.document = view.document;\n\n\t\t/**\n\t\t * State of the observer. If it is disabled events will not be fired.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.isEnabled = false;\n\t}\n\n\t/**\n\t * Enables the observer. This method is called when the observer is registered to the\n\t * {@link module:engine/view/view~View} and after {@link module:engine/view/view~View#render rendering}\n\t * (all observers are {@link #disable disabled} before rendering).\n\t *\n\t * A typical use case for disabling observers is that mutation observers need to be disabled for the rendering.\n\t * However, a child class may not need to be disabled, so it can implement an empty method.\n\t *\n\t * @see module:engine/view/observer/observer~Observer#disable\n\t */\n\tenable() {\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Disables the observer. This method is called before\n\t * {@link module:engine/view/view~View#render rendering} to prevent firing events during rendering.\n\t *\n\t * @see module:engine/view/observer/observer~Observer#enable\n\t */\n\tdisable() {\n\t\tthis.isEnabled = false;\n\t}\n\n\t/**\n\t * Disables and destroys the observer, among others removes event listeners created by the observer.\n\t */\n\tdestroy() {\n\t\tthis.disable();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Starts observing the given root element.\n\t *\n\t * @method #observe\n\t * @param {HTMLElement} domElement\n\t * @param {String} name The name of the root element.\n\t */\n}\n\nmix( Observer, DomEmitterMixin );\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nexport default setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nexport default setCacheHas;\n","import MapCache from './_MapCache.js';\nimport setCacheAdd from './_setCacheAdd.js';\nimport setCacheHas from './_setCacheHas.js';\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nexport default SetCache;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport default arraySome;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nexport default cacheHas;\n","import SetCache from './_SetCache.js';\nimport arraySome from './_arraySome.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalArrays;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nexport default mapToArray;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nexport default setToArray;\n","import Symbol from './_Symbol.js';\nimport Uint8Array from './_Uint8Array.js';\nimport eq from './eq.js';\nimport equalArrays from './_equalArrays.js';\nimport mapToArray from './_mapToArray.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n","import getAllKeys from './_getAllKeys.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalObjects;\n","import Stack from './_Stack.js';\nimport equalArrays from './_equalArrays.js';\nimport equalByTag from './_equalByTag.js';\nimport equalObjects from './_equalObjects.js';\nimport getTag from './_getTag.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nexport default baseIsEqualDeep;\n","import baseIsEqualDeep from './_baseIsEqualDeep.js';\nimport isObjectLike from './isObjectLike.js';\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nexport default baseIsEqual;\n","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * This method is like `_.isEqual` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with up to\n * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true;\n *   }\n * }\n *\n * var array = ['hello', 'goodbye'];\n * var other = ['hi', 'goodbye'];\n *\n * _.isEqualWith(array, other, customizer);\n * // => true\n */\nfunction isEqualWith(value, other, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  var result = customizer ? customizer(value, other) : undefined;\n  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n}\n\nexport default isEqualWith;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/mutationobserver\n */\n\n/* globals window */\n\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { startsWithFiller, getDataWithoutFiller } from '../filler';\nimport { isEqualWith } from 'lodash-es';\n\n/**\n * Mutation observer class observes changes in the DOM, fires {@link module:engine/view/document~Document#event:mutations} event, mark view\n * elements as changed and call {@link module:engine/view/renderer~Renderer#render}.\n * Because all mutated nodes are marked as \"to be rendered\" and the\n * {@link module:engine/view/renderer~Renderer#render} is called, all changes will be reverted, unless the mutation will be handled by the\n * {@link module:engine/view/document~Document#event:mutations} event listener. It means user will see only handled changes, and the editor\n * will block all changes which are not handled.\n *\n * Mutation Observer also take care of reducing number of mutations which are fired. It removes duplicates and\n * mutations on elements which do not have corresponding view elements. Also\n * {@link module:engine/view/observer/mutationobserver~MutatedText text mutation} is fired only if parent element do not change child list.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class MutationObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Native mutation observer config.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._config = {\n\t\t\tchildList: true,\n\t\t\tcharacterData: true,\n\t\t\tcharacterDataOldValue: true,\n\t\t\tsubtree: true\n\t\t};\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#domConverter}.\n\t\t *\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis.domConverter = view.domConverter;\n\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#renderer}.\n\t\t *\n\t\t * @member {module:engine/view/renderer~Renderer}\n\t\t */\n\t\tthis.renderer = view._renderer;\n\n\t\t/**\n\t\t * Observed DOM elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<HTMLElement>}\n\t\t */\n\t\tthis._domElements = [];\n\n\t\t/**\n\t\t * Native mutation observer.\n\t\t *\n\t\t * @private\n\t\t * @member {MutationObserver}\n\t\t */\n\t\tthis._mutationObserver = new window.MutationObserver( this._onMutations.bind( this ) );\n\t}\n\n\t/**\n\t * Synchronously fires {@link module:engine/view/document~Document#event:mutations} event with all mutations in record queue.\n\t * At the same time empties the queue so mutations will not be fired twice.\n\t */\n\tflush() {\n\t\tthis._onMutations( this._mutationObserver.takeRecords() );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tthis._domElements.push( domElement );\n\n\t\tif ( this.isEnabled ) {\n\t\t\tthis._mutationObserver.observe( domElement, this._config );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tenable() {\n\t\tsuper.enable();\n\n\t\tfor ( const domElement of this._domElements ) {\n\t\t\tthis._mutationObserver.observe( domElement, this._config );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisable() {\n\t\tsuper.disable();\n\n\t\tthis._mutationObserver.disconnect();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._mutationObserver.disconnect();\n\t}\n\n\t/**\n\t * Handles mutations. Deduplicates, mark view elements to sync, fire event and call render.\n\t *\n\t * @private\n\t * @param {Array.<Object>} domMutations Array of native mutations.\n\t */\n\t_onMutations( domMutations ) {\n\t\t// As a result of this.flush() we can have an empty collection.\n\t\tif ( domMutations.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domConverter = this.domConverter;\n\n\t\t// Use map and set for deduplication.\n\t\tconst mutatedTexts = new Map();\n\t\tconst mutatedElements = new Set();\n\n\t\t// Handle `childList` mutations first, so we will be able to check if the `characterData` mutation is in the\n\t\t// element with changed structure anyway.\n\t\tfor ( const mutation of domMutations ) {\n\t\t\tif ( mutation.type === 'childList' ) {\n\t\t\t\tconst element = domConverter.mapDomToView( mutation.target );\n\n\t\t\t\t// Do not collect mutations from UIElements.\n\t\t\t\tif ( element && element.is( 'uiElement' ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( element && !this._isBogusBrMutation( mutation ) ) {\n\t\t\t\t\tmutatedElements.add( element );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle `characterData` mutations later, when we have the full list of nodes which changed structure.\n\t\tfor ( const mutation of domMutations ) {\n\t\t\tconst element = domConverter.mapDomToView( mutation.target );\n\n\t\t\t// Do not collect mutations from UIElements.\n\t\t\tif ( element && element.is( 'uiElement' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( mutation.type === 'characterData' ) {\n\t\t\t\tconst text = domConverter.findCorrespondingViewText( mutation.target );\n\n\t\t\t\tif ( text && !mutatedElements.has( text.parent ) ) {\n\t\t\t\t\t// Use text as a key, for deduplication. If there will be another mutation on the same text element\n\t\t\t\t\t// we will have only one in the map.\n\t\t\t\t\tmutatedTexts.set( text, {\n\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\toldText: text.data,\n\t\t\t\t\t\tnewText: getDataWithoutFiller( mutation.target ),\n\t\t\t\t\t\tnode: text\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\t// When we added first letter to the text node which had only inline filler, for the DOM it is mutation\n\t\t\t\t// on text, but for the view, where filler text node did not existed, new text node was created, so we\n\t\t\t\t// need to fire 'children' mutation instead of 'text'.\n\t\t\t\telse if ( !text && startsWithFiller( mutation.target ) ) {\n\t\t\t\t\tmutatedElements.add( domConverter.mapDomToView( mutation.target.parentNode ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Now we build the list of mutations to fire and mark elements. We did not do it earlier to avoid marking the\n\t\t// same node multiple times in case of duplication.\n\n\t\t// List of mutations we will fire.\n\t\tconst viewMutations = [];\n\n\t\tfor ( const mutatedText of mutatedTexts.values() ) {\n\t\t\tthis.renderer.markToSync( 'text', mutatedText.node );\n\t\t\tviewMutations.push( mutatedText );\n\t\t}\n\n\t\tfor ( const viewElement of mutatedElements ) {\n\t\t\tconst domElement = domConverter.mapViewToDom( viewElement );\n\t\t\tconst viewChildren = Array.from( viewElement.getChildren() );\n\t\t\tconst newViewChildren = Array.from( domConverter.domChildrenToView( domElement, { withChildren: false } ) );\n\n\t\t\t// It may happen that as a result of many changes (sth was inserted and then removed),\n\t\t\t// both elements haven't really changed. #1031\n\t\t\tif ( !isEqualWith( viewChildren, newViewChildren, sameNodes ) ) {\n\t\t\t\tthis.renderer.markToSync( 'children', viewElement );\n\n\t\t\t\tviewMutations.push( {\n\t\t\t\t\ttype: 'children',\n\t\t\t\t\toldChildren: viewChildren,\n\t\t\t\t\tnewChildren: newViewChildren,\n\t\t\t\t\tnode: viewElement\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\t// Retrieve `domSelection` using `ownerDocument` of one of mutated nodes.\n\t\t// There should not be simultaneous mutation in multiple documents, so it's fine.\n\t\tconst domSelection = domMutations[ 0 ].target.ownerDocument.getSelection();\n\n\t\tlet viewSelection = null;\n\n\t\tif ( domSelection && domSelection.anchorNode ) {\n\t\t\t// If `domSelection` is inside a dom node that is already bound to a view node from view tree, get\n\t\t\t// corresponding selection in the view and pass it together with `viewMutations`. The `viewSelection` may\n\t\t\t// be used by features handling mutations.\n\t\t\t// Only one range is supported.\n\n\t\t\tconst viewSelectionAnchor = domConverter.domPositionToView( domSelection.anchorNode, domSelection.anchorOffset );\n\t\t\tconst viewSelectionFocus = domConverter.domPositionToView( domSelection.focusNode, domSelection.focusOffset );\n\n\t\t\t// Anchor and focus has to be properly mapped to view.\n\t\t\tif ( viewSelectionAnchor && viewSelectionFocus ) {\n\t\t\t\tviewSelection = new ViewSelection( viewSelectionAnchor );\n\t\t\t\tviewSelection.setFocus( viewSelectionFocus );\n\t\t\t}\n\t\t}\n\n\t\tthis.document.fire( 'mutations', viewMutations, viewSelection );\n\n\t\t// If nothing changes on `mutations` event, at this point we have \"dirty DOM\" (changed) and de-synched\n\t\t// view (which has not been changed). In order to \"reset DOM\" we render the view again.\n\t\tthis.view.render();\n\n\t\tfunction sameNodes( child1, child2 ) {\n\t\t\t// First level of comparison (array of children vs array of children) – use the Lodash's default behavior.\n\t\t\tif ( Array.isArray( child1 ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Elements.\n\t\t\tif ( child1 === child2 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// Texts.\n\t\t\telse if ( child1.is( 'text' ) && child2.is( 'text' ) ) {\n\t\t\t\treturn child1.data === child2.data;\n\t\t\t}\n\n\t\t\t// Not matching types.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if mutation was generated by the browser inserting bogus br on the end of the block element.\n\t * Such mutations are generated while pressing space or performing native spellchecker correction\n\t * on the end of the block element in Firefox browser.\n\t *\n\t * @private\n\t * @param {Object} mutation Native mutation object.\n\t * @returns {Boolean}\n\t */\n\t_isBogusBrMutation( mutation ) {\n\t\tlet addedNode = null;\n\n\t\t// Check if mutation added only one node on the end of its parent.\n\t\tif ( mutation.nextSibling === null && mutation.removedNodes.length === 0 && mutation.addedNodes.length == 1 ) {\n\t\t\taddedNode = this.domConverter.domToView( mutation.addedNodes[ 0 ], {\n\t\t\t\twithChildren: false\n\t\t\t} );\n\t\t}\n\n\t\treturn addedNode && addedNode.is( 'element', 'br' );\n\t}\n}\n\n/**\n * Fired when mutation occurred. If tree view is not changed on this event, DOM will be reverted to the state before\n * mutation, so all changes which should be applied, should be handled on this event.\n *\n * Introduced by {@link module:engine/view/observer/mutationobserver~MutationObserver}.\n *\n * Note that because {@link module:engine/view/observer/mutationobserver~MutationObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/mutationobserver~MutationObserver\n * @event module:engine/view/document~Document#event:mutations\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|module:engine/view/observer/mutationobserver~MutatedChildren>}\n * viewMutations Array of mutations.\n * For mutated texts it will be {@link module:engine/view/observer/mutationobserver~MutatedText} and for mutated elements it will be\n * {@link module:engine/view/observer/mutationobserver~MutatedChildren}. You can recognize the type based on the `type` property.\n * @param {module:engine/view/selection~Selection|null} viewSelection View selection that is a result of converting DOM selection to view.\n * Keep in\n * mind that the DOM selection is already \"updated\", meaning that it already acknowledges changes done in mutation.\n */\n\n/**\n * Mutation item for text.\n *\n * @see module:engine/view/document~Document#event:mutations\n * @see module:engine/view/observer/mutationobserver~MutatedChildren\n *\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedText\n *\n * @property {String} type For text mutations it is always 'text'.\n * @property {module:engine/view/text~Text} node Mutated text node.\n * @property {String} oldText Old text.\n * @property {String} newText New text.\n */\n\n/**\n * Mutation item for child nodes.\n *\n * @see module:engine/view/document~Document#event:mutations\n * @see module:engine/view/observer/mutationobserver~MutatedText\n *\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedChildren\n *\n * @property {String} type For child nodes mutations it is always 'children'.\n * @property {module:engine/view/element~Element} node Parent of the mutated children.\n * @property {Array.<module:engine/view/node~Node>} oldChildren Old child nodes.\n * @property {Array.<module:engine/view/node~Node>} newChildren New child nodes.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/domeventdata\n */\n\nimport { extend } from 'lodash-es';\n\n/**\n * Information about a DOM event in context of the {@link module:engine/view/document~Document}.\n * It wraps the native event, which usually should not be used as the wrapper contains\n * additional data (like key code for keyboard events).\n */\nexport default class DomEventData {\n\t/**\n\t * @param {module:engine/view/view~View} view The instance of the view controller.\n\t * @param {Event} domEvent The DOM event.\n\t * @param {Object} [additionalData] Additional properties that the instance should contain.\n\t */\n\tconstructor( view, domEvent, additionalData ) {\n\t\t/**\n\t\t * Instance of the view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View} module:engine/view/observer/observer~Observer.DomEvent#view\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * The instance of the document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document} module:engine/view/observer/observer~Observer.DomEvent#document\n\t\t */\n\t\tthis.document = view.document;\n\n\t\t/**\n\t\t * The DOM event.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Event} module:engine/view/observer/observer~Observer.DomEvent#domEvent\n\t\t */\n\t\tthis.domEvent = domEvent;\n\n\t\t/**\n\t\t * The DOM target.\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement} module:engine/view/observer/observer~Observer.DomEvent#target\n\t\t */\n\t\tthis.domTarget = domEvent.target;\n\n\t\textend( this, additionalData );\n\t}\n\n\t/**\n\t * The tree view element representing the target.\n\t *\n\t * @readonly\n\t * @type module:engine/view/element~Element\n\t */\n\tget target() {\n\t\treturn this.view.domConverter.mapDomToView( this.domTarget );\n\t}\n\n\t/**\n\t * Prevents the native's event default action.\n\t */\n\tpreventDefault() {\n\t\tthis.domEvent.preventDefault();\n\t}\n\n\t/**\n\t * Stops native event propagation.\n\t */\n\tstopPropagation() {\n\t\tthis.domEvent.stopPropagation();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/domeventobserver\n */\n\nimport Observer from './observer';\nimport DomEventData from './domeventdata';\n\n/**\n * Base class for DOM event observers. This class handles\n * {@link module:engine/view/observer/observer~Observer#observe adding} listeners to DOM elements,\n * {@link module:engine/view/observer/observer~Observer#disable disabling} and\n * {@link module:engine/view/observer/observer~Observer#enable re-enabling} events.\n * Child class needs to define\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#domEventType DOM event type} and\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#onDomEvent callback}.\n *\n * For instance:\n *\n *\t\tclass ClickObserver extends DomEventObserver {\n *\t\t\t// It can also be defined as a normal property in the constructor.\n *\t\t\tget domEventType() {\n *\t\t\t\treturn 'click';\n *\t\t\t}\n *\n *\t\t\tonDomEvent( domEvent ) {\n *\t\t\t\tthis.fire( 'click', domEvent );\n *\t\t\t}\n *\t\t}\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class DomEventObserver extends Observer {\n\t/**\n\t * Type of the DOM event the observer should listen on. Array of types can be defined\n\t * if the obsever should listen to multiple DOM events.\n\t *\n\t * @readonly\n\t * @member {String|Array.<String>} #domEventType\n\t */\n\n\t/**\n\t * Callback which should be called when the DOM event occurred. Note that the callback will not be called if\n\t * observer {@link #isEnabled is not enabled}.\n\t *\n\t * @see #domEventType\n\t * @abstract\n\t * @method #onDomEvent\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * If set to `true` DOM events will be listened on the capturing phase.\n\t\t * Default value is `false`.\n\t\t *\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.useCapture = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tconst types = typeof this.domEventType == 'string' ? [ this.domEventType ] : this.domEventType;\n\n\t\ttypes.forEach( type => {\n\t\t\tthis.listenTo( domElement, type, ( eventInfo, domEvent ) => {\n\t\t\t\tif ( this.isEnabled ) {\n\t\t\t\t\tthis.onDomEvent( domEvent );\n\t\t\t\t}\n\t\t\t}, { useCapture: this.useCapture } );\n\t\t} );\n\t}\n\n\t/**\n\t * Calls `Document#fire()` if observer {@link #isEnabled is enabled}.\n\t *\n\t * @see module:utils/emittermixin~EmitterMixin#fire\n\t * @param {String} eventType The event type (name).\n\t * @param {Event} domEvent The DOM event.\n\t * @param {Object} [additionalData] The additional data which should extend the\n\t * {@link module:engine/view/observer/domeventdata~DomEventData event data} object.\n\t */\n\tfire( eventType, domEvent, additionalData ) {\n\t\tif ( this.isEnabled ) {\n\t\t\tthis.document.fire( eventType, new DomEventData( this.view, domEvent, additionalData ) );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/keyobserver\n */\n\nimport DomEventObserver from './domeventobserver';\nimport { getCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * {@link module:engine/view/document~Document#event:keydown Key down} event observer.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class KeyObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'keydown', 'keyup' ];\n\t}\n\n\tonDomEvent( domEvt ) {\n\t\tthis.fire( domEvt.type, domEvt, {\n\t\t\tkeyCode: domEvt.keyCode,\n\n\t\t\taltKey: domEvt.altKey,\n\t\t\tctrlKey: domEvt.ctrlKey || domEvt.metaKey,\n\t\t\tshiftKey: domEvt.shiftKey,\n\n\t\t\tget keystroke() {\n\t\t\t\treturn getCode( this );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * Fired when a key has been pressed.\n *\n * Introduced by {@link module:engine/view/observer/keyobserver~KeyObserver}.\n *\n * Note that because {@link module:engine/view/observer/keyobserver~KeyObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/keyobserver~KeyObserver\n * @event module:engine/view/document~Document#event:keydown\n * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEventData\n */\n\n/**\n * Fired when a key has been released.\n *\n * Introduced by {@link module:engine/view/observer/keyobserver~KeyObserver}.\n *\n * Note that because {@link module:engine/view/observer/keyobserver~KeyObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/keyobserver~KeyObserver\n * @event module:engine/view/document~Document#event:keyup\n * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEventData\n */\n\n/**\n * The value of both events - {@link module:engine/view/document~Document#event:keydown} and\n * {@link module:engine/view/document~Document#event:keyup}.\n *\n * @class module:engine/view/observer/keyobserver~KeyEventData\n * @extends module:engine/view/observer/domeventdata~DomEventData\n * @implements module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * Code of the whole keystroke. See {@link module:utils/keyboard~getCode}.\n *\n * @readonly\n * @member {Number} module:engine/view/observer/keyobserver~KeyEventData#keystroke\n */\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","import isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/fakeselectionobserver\n */\n\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport { debounce } from 'lodash-es';\n\n/**\n * Fake selection observer class. If view selection is fake it is placed in dummy DOM container. This observer listens\n * on {@link module:engine/view/document~Document#event:keydown keydown} events and handles moving fake view selection to the correct place\n * if arrow keys are pressed.\n * Fires {@link module:engine/view/document~Document#event:selectionChange selectionChange event} simulating natural behaviour of\n * {@link module:engine/view/observer/selectionobserver~SelectionObserver SelectionObserver}.\n *\n * @extends module:engine/view/observer/observer~Observer.Observer\n */\nexport default class FakeSelectionObserver extends Observer {\n\t/**\n\t * Creates new FakeSelectionObserver instance.\n\t *\n\t * @param {module:engine/view/view~View} view\n\t */\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n\t\t *\n\t\t * @private\n\t\t * @param {Object} data Selection change data.\n\t\t * @method #_fireSelectionChangeDoneDebounced\n\t\t */\n\t\tthis._fireSelectionChangeDoneDebounced = debounce( data => this.document.fire( 'selectionChangeDone', data ), 200 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'keydown', ( eventInfo, data ) => {\n\t\t\tconst selection = document.selection;\n\n\t\t\tif ( selection.isFake && _isArrowKeyCode( data.keyCode ) && this.isEnabled ) {\n\t\t\t\t// Prevents default key down handling - no selection change will occur.\n\t\t\t\tdata.preventDefault();\n\n\t\t\t\tthis._handleSelectionMove( data.keyCode );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._fireSelectionChangeDoneDebounced.cancel();\n\t}\n\n\t/**\n\t * Handles collapsing view selection according to given key code. If left or up key is provided - new selection will be\n\t * collapsed to left. If right or down key is pressed - new selection will be collapsed to right.\n\t *\n\t * This method fires {@link module:engine/view/document~Document#event:selectionChange} and\n\t * {@link module:engine/view/document~Document#event:selectionChangeDone} events imitating behaviour of\n\t * {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n\t *\n\t * @private\n\t * @param {Number} keyCode\n\t * @fires module:engine/view/document~Document#event:selectionChange\n\t * @fires module:engine/view/document~Document#event:selectionChangeDone\n\t */\n\t_handleSelectionMove( keyCode ) {\n\t\tconst selection = this.document.selection;\n\t\tconst newSelection = new ViewSelection( selection.getRanges(), { backward: selection.isBackward, fake: false } );\n\n\t\t// Left or up arrow pressed - move selection to start.\n\t\tif ( keyCode == keyCodes.arrowleft || keyCode == keyCodes.arrowup ) {\n\t\t\tnewSelection.setTo( newSelection.getFirstPosition() );\n\t\t}\n\n\t\t// Right or down arrow pressed - move selection to end.\n\t\tif ( keyCode == keyCodes.arrowright || keyCode == keyCodes.arrowdown ) {\n\t\t\tnewSelection.setTo( newSelection.getLastPosition() );\n\t\t}\n\n\t\tconst data = {\n\t\t\toldSelection: selection,\n\t\t\tnewSelection,\n\t\t\tdomSelection: null\n\t\t};\n\n\t\t// Fire dummy selection change event.\n\t\tthis.document.fire( 'selectionChange', data );\n\n\t\t// Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n\t\t// This function is debounced what means that `selectionChangeDone` event will be fired only when\n\t\t// defined int the function time will elapse since the last time the function was called.\n\t\t// So `selectionChangeDone` will be fired when selection will stop changing.\n\t\tthis._fireSelectionChangeDoneDebounced( data );\n\t}\n}\n\n// Checks if one of the arrow keys is pressed.\n//\n// @private\n// @param {Number} keyCode\n// @returns {Boolean}\nfunction _isArrowKeyCode( keyCode ) {\n\treturn keyCode == keyCodes.arrowright ||\n\t\tkeyCode == keyCodes.arrowleft ||\n\t\tkeyCode == keyCodes.arrowup ||\n\t\tkeyCode == keyCodes.arrowdown;\n}\n\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/selectionobserver\n */\n\n/* global setInterval, clearInterval */\n\nimport Observer from './observer';\nimport MutationObserver from './mutationobserver';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\nimport { debounce } from 'lodash-es';\n\n/**\n * Selection observer class observes selection changes in the document. If selection changes on the document this\n * observer checks if there are any mutations and if DOM selection is different than the\n * {@link module:engine/view/document~Document#selection view selection}. Selection observer fires\n * {@link module:engine/view/document~Document#event:selectionChange} event only if selection change was the only change in the document\n * and DOM selection is different then the view selection.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @see module:engine/view/observer/mutationobserver~MutationObserver\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class SelectionObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * Instance of the mutation observer. Selection observer calls\n\t\t * {@link module:engine/view/observer/mutationobserver~MutationObserver#flush} to ensure that the mutations will be handled\n\t\t * before the {@link module:engine/view/document~Document#event:selectionChange} event is fired.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/observer/mutationobserver~MutationObserver}\n\t\t * module:engine/view/observer/selectionobserver~SelectionObserver#mutationObserver\n\t\t */\n\t\tthis.mutationObserver = view.getObserver( MutationObserver );\n\n\t\t/**\n\t\t * Reference to the view {@link module:engine/view/documentselection~DocumentSelection} object used to compare\n\t\t * new selection with it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/documentselection~DocumentSelection}\n\t\t * module:engine/view/observer/selectionobserver~SelectionObserver#selection\n\t\t */\n\t\tthis.selection = this.document.selection;\n\n\t\t/* eslint-disable max-len */\n\t\t/**\n\t\t * Reference to the {@link module:engine/view/view~View#domConverter}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/domconverter~DomConverter} module:engine/view/observer/selectionobserver~SelectionObserver#domConverter\n\t\t */\n\t\t/* eslint-enable max-len */\n\t\tthis.domConverter = view.domConverter;\n\n\t\t/**\n\t\t * Set of documents which have added \"selectionchange\" listener to avoid adding listener twice to the same\n\t\t * document.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakSet.<Document>} module:engine/view/observer/selectionobserver~SelectionObserver#_documents\n\t\t */\n\t\tthis._documents = new WeakSet();\n\n\t\t/**\n\t\t * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n\t\t *\n\t\t * @private\n\t\t * @param {Object} data Selection change data.\n\t\t * @method #_fireSelectionChangeDoneDebounced\n\t\t */\n\t\tthis._fireSelectionChangeDoneDebounced = debounce( data => this.document.fire( 'selectionChangeDone', data ), 200 );\n\n\t\tthis._clearInfiniteLoopInterval = setInterval( () => this._clearInfiniteLoop(), 1000 );\n\n\t\t/**\n\t\t * Private property to check if the code does not enter infinite loop.\n\t\t *\n\t\t * @private\n\t\t * @member {Number} module:engine/view/observer/selectionobserver~SelectionObserver#_loopbackCounter\n\t\t */\n\t\tthis._loopbackCounter = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domElement ) {\n\t\tconst domDocument = domElement.ownerDocument;\n\n\t\t// Add listener once per each document.\n\t\tif ( this._documents.has( domDocument ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.listenTo( domDocument, 'selectionchange', () => {\n\t\t\tthis._handleSelectionChange( domDocument );\n\t\t} );\n\n\t\tthis._documents.add( domDocument );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tclearInterval( this._clearInfiniteLoopInterval );\n\t\tthis._fireSelectionChangeDoneDebounced.cancel();\n\t}\n\n\t/**\n\t * Selection change listener. {@link module:engine/view/observer/mutationobserver~MutationObserver#flush Flush} mutations, check if\n\t * selection changes and fires {@link module:engine/view/document~Document#event:selectionChange} event on every change\n\t * and {@link module:engine/view/document~Document#event:selectionChangeDone} when selection stop changing.\n\t *\n\t * @private\n\t * @param {Document} domDocument DOM document.\n\t */\n\t_handleSelectionChange( domDocument ) {\n\t\t// Selection is handled when document is not focused but is read-only. This is because in read-only\n\t\t// mode contenteditable is set as false and editor won't receive focus but we still need to know\n\t\t// selection position.\n\t\tif ( !this.isEnabled || ( !this.document.isFocused && !this.document.isReadOnly ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure the mutation event will be before selection event on all browsers.\n\t\tthis.mutationObserver.flush();\n\n\t\t// If there were mutations then the view will be re-rendered by the mutation observer and selection\n\t\t// will be updated, so selections will equal and event will not be fired, as expected.\n\t\tconst domSelection = domDocument.defaultView.getSelection();\n\t\tconst newViewSelection = this.domConverter.domSelectionToView( domSelection );\n\n\t\tif ( this.selection.isEqual( newViewSelection ) && this.domConverter.isDomSelectionCorrect( domSelection ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure we are not in the infinite loop (#400).\n\t\t// This counter is reset each second. 60 selection changes in 1 second is enough high number\n\t\t// to be very difficult (impossible) to achieve using just keyboard keys (during normal editor use).\n\t\tif ( ++this._loopbackCounter > 60 ) {\n\t\t\t/**\n\t\t\t * Selection change observer detected an infinite rendering loop.\n\t\t\t * Most probably you try to put the selection in the position which is not allowed\n\t\t\t * by the browser and browser fixes it automatically what causes `selectionchange` event on\n\t\t\t * which a loopback through a model tries to re-render the wrong selection and again.\n\t\t\t *\n\t\t\t * @error selectionchange-infinite-loop\n\t\t\t */\n\t\t\tlog.warn( 'selectionchange-infinite-loop: Selection change observer detected an infinite rendering loop.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.selection.isSimilar( newViewSelection ) ) {\n\t\t\t// If selection was equal and we are at this point of algorithm, it means that it was incorrect.\n\t\t\t// Just re-render it, no need to fire any events, etc.\n\t\t\tthis.view.render();\n\t\t} else {\n\t\t\tconst data = {\n\t\t\t\toldSelection: this.selection,\n\t\t\t\tnewSelection: newViewSelection,\n\t\t\t\tdomSelection\n\t\t\t};\n\n\t\t\t// Prepare data for new selection and fire appropriate events.\n\t\t\tthis.document.fire( 'selectionChange', data );\n\n\t\t\t// Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n\t\t\t// This function is debounced what means that `selectionChangeDone` event will be fired only when\n\t\t\t// defined int the function time will elapse since the last time the function was called.\n\t\t\t// So `selectionChangeDone` will be fired when selection will stop changing.\n\t\t\tthis._fireSelectionChangeDoneDebounced( data );\n\t\t}\n\t}\n\n\t/**\n\t * Clears `SelectionObserver` internal properties connected with preventing infinite loop.\n\t *\n\t * @protected\n\t */\n\t_clearInfiniteLoop() {\n\t\tthis._loopbackCounter = 0;\n\t}\n}\n\n/**\n * Fired when selection has changed. This event is fired only when the selection change was the only change that happened\n * in the document, and old selection is different then the new selection.\n *\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n *\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\n * @event module:engine/view/document~Document#event:selectionChange\n * @param {Object} data\n * @param {module:engine/view/documentselection~DocumentSelection} data.oldSelection Old View selection which is\n * {@link module:engine/view/document~Document#selection}.\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\n * @param {Selection} data.domSelection Native DOM selection.\n */\n\n/**\n * Fired when selection stops changing.\n *\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n *\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\n * @event module:engine/view/document~Document#event:selectionChangeDone\n * @param {Object} data\n * @param {module:engine/view/documentselection~DocumentSelection} data.oldSelection Old View selection which is\n * {@link module:engine/view/document~Document#selection}.\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\n * @param {Selection} data.domSelection Native DOM selection.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/focusobserver\n */\n\n/* globals setTimeout, clearTimeout */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:focus Focus}\n * and {@link module:engine/view/document~Document#event:blur blur} events observer.\n * Focus observer handle also {@link module:engine/view/rooteditableelement~RootEditableElement#isFocused isFocused} property of the\n * {@link module:engine/view/rooteditableelement~RootEditableElement root elements}.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class FocusObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'focus', 'blur' ];\n\t\tthis.useCapture = true;\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'focus', () => {\n\t\t\tdocument.isFocused = true;\n\n\t\t\t// Unfortunately native `selectionchange` event is fired asynchronously.\n\t\t\t// We need to wait until `SelectionObserver` handle the event and then render. Otherwise rendering will\n\t\t\t// overwrite new DOM selection with selection from the view.\n\t\t\t// See https://github.com/ckeditor/ckeditor5-engine/issues/795 for more details.\n\t\t\t// Long timeout is needed to solve #676 and https://github.com/ckeditor/ckeditor5-engine/issues/1157 issues.\n\t\t\tthis._renderTimeoutId = setTimeout( () => view.render(), 50 );\n\t\t} );\n\n\t\tdocument.on( 'blur', ( evt, data ) => {\n\t\t\tconst selectedEditable = document.selection.editableElement;\n\n\t\t\tif ( selectedEditable === null || selectedEditable === data.target ) {\n\t\t\t\tdocument.isFocused = false;\n\n\t\t\t\t// Re-render the document to update view elements.\n\t\t\t\tview.render();\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Identifier of the timeout currently used by focus listener to delay rendering execution.\n\t\t *\n\t\t * @private\n\t\t * @member {Number} #_renderTimeoutId\n\t\t */\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tif ( this._renderTimeoutId ) {\n\t\t\tclearTimeout( this._renderTimeoutId );\n\t\t}\n\n\t\tsuper.destroy();\n\t}\n}\n\n/**\n * Fired when one of the editables gets focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:focus\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when one of the editables loses focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:blur\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/compositionobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:compositionstart Compositionstart},\n * {@link module:engine/view/document~Document#event:compositionupdate compositionupdate} and\n * {@link module:engine/view/document~Document#event:compositionend compositionend} events observer.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class CompositionObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = [ 'compositionstart', 'compositionupdate', 'compositionend' ];\n\t\tconst document = this.document;\n\n\t\tdocument.on( 'compositionstart', () => {\n\t\t\tdocument.isComposing = true;\n\t\t} );\n\n\t\tdocument.on( 'compositionend', () => {\n\t\t\tdocument.isComposing = false;\n\t\t} );\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when composition starts inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionstart\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when composition is updated inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionupdate\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when composition ends inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionend\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/isrange\n */\n\n/**\n * Checks if the object is a native DOM Range.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isRange( obj ) {\n\treturn Object.prototype.toString.apply( obj ) == '[object Range]';\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/getborderwidths\n */\n\n/**\n * Returns an object containing CSS border widths of a specified HTML element.\n *\n * @param {HTMLElement} element An element which has CSS borders.\n * @returns {Object} An object containing `top`, `left`, `right` and `bottom` properties\n * with numerical values of the `border-[top,left,right,bottom]-width` CSS styles.\n */\nexport default function getBorderWidths( element ) {\n\t// Call getComputedStyle on the window the element document belongs to.\n\tconst style = element.ownerDocument.defaultView.getComputedStyle( element );\n\n\treturn {\n\t\ttop: parseInt( style.borderTopWidth, 10 ),\n\t\tright: parseInt( style.borderRightWidth, 10 ),\n\t\tbottom: parseInt( style.borderBottomWidth, 10 ),\n\t\tleft: parseInt( style.borderLeftWidth, 10 )\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/rect\n */\n\nimport isRange from './isrange';\nimport isWindow from './iswindow';\nimport getBorderWidths from './getborderwidths';\nimport log from '../log';\nimport isText from './istext';\nimport { isElement } from 'lodash-es';\n\nconst rectProperties = [ 'top', 'right', 'bottom', 'left', 'width', 'height' ];\n\n/**\n * A helper class representing a `ClientRect` object, e.g. value returned by\n * the native `object.getBoundingClientRect()` method. Provides a set of methods\n * to manipulate the rect and compare it against other rect instances.\n */\nexport default class Rect {\n\t/**\n\t * Creates an instance of rect.\n\t *\n\t *\t\t// Rect of an HTMLElement.\n\t *\t\tconst rectA = new Rect( document.body );\n\t *\n\t *\t\t// Rect of a DOM Range.\n\t *\t\tconst rectB = new Rect( document.getSelection().getRangeAt( 0 ) );\n\t *\n\t *\t\t// Rect of a window (web browser viewport).\n\t *\t\tconst rectC = new Rect( window );\n\t *\n\t *\t\t// Rect out of an object.\n\t *\t\tconst rectD = new Rect( { top: 0, right: 10, bottom: 10, left: 0, width: 10, height: 10 } );\n\t *\n\t *\t\t// Rect out of another Rect instance.\n\t *\t\tconst rectE = new Rect( rectD );\n\t *\n\t *\t\t// Rect out of a ClientRect.\n\t *\t\tconst rectF = new Rect( document.body.getClientRects().item( 0 ) );\n\t *\n\t * **Note**: By default a rect of an HTML element includes its CSS borders and scrollbars (if any)\n\t * ant the rect of a `window` includes scrollbars too. Use {@link #excludeScrollbarsAndBorders}\n\t * to get the inner part of the rect.\n\t *\n\t * @param {HTMLElement|Range|Window|ClientRect|module:utils/dom/rect~Rect|Object} source A source object to create the rect.\n\t */\n\tconstructor( source ) {\n\t\tconst isSourceRange = isRange( source );\n\n\t\t/**\n\t\t * The object this rect is for.\n\t\t *\n\t\t * @protected\n\t\t * @readonly\n\t\t * @member {HTMLElement|Range|ClientRect|module:utils/dom/rect~Rect|Object} #_source\n\t\t */\n\t\tObject.defineProperty( this, '_source', {\n\t\t\t// If the source is a Rect instance, copy it's #_source.\n\t\t\tvalue: source._source || source,\n\t\t\twritable: true,\n\t\t\tenumerable: false\n\t\t} );\n\n\t\tif ( isElement( source ) || isSourceRange ) {\n\t\t\tconst sourceNode = isSourceRange ? source.startContainer : source;\n\n\t\t\tif ( !sourceNode.ownerDocument || !sourceNode.ownerDocument.body.contains( sourceNode ) ) {\n\t\t\t\t/**\n\t\t\t\t * The `Rect` class depends on `getBoundingClientRect` and `getClientRects` DOM methods.\n\t\t\t\t * If the {@link #constructor source} of a rect in an HTML element or a DOM range but it does\n\t\t\t\t * not belong to any rendered DOM tree, these methods will fail to obtain the geometry and\n\t\t\t\t * the rect instance makes little sense to the features using it.\n\t\t\t\t *\n\t\t\t\t * To get rid of this warning make sure the source passed to the constructor\n\t\t\t\t * is a descendant of `window.document.body`.\n\t\t\t\t *\n\t\t\t\t * @error rect-source-not-in-dom\n\t\t\t\t * @param {String} source The source of the Rect instance.\n\t\t\t\t */\n\t\t\t\tlog.warn(\n\t\t\t\t\t'rect-source-not-in-dom: The source of this rect does not belong to any rendered DOM tree.',\n\t\t\t\t\t{ source }\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( isSourceRange ) {\n\t\t\t\tcopyRectProperties( this, Rect.getDomRangeRects( source )[ 0 ] );\n\t\t\t} else {\n\t\t\t\tcopyRectProperties( this, source.getBoundingClientRect() );\n\t\t\t}\n\t\t} else if ( isWindow( source ) ) {\n\t\t\tconst { innerWidth, innerHeight } = source;\n\n\t\t\tcopyRectProperties( this, {\n\t\t\t\ttop: 0,\n\t\t\t\tright: innerWidth,\n\t\t\t\tbottom: innerHeight,\n\t\t\t\tleft: 0,\n\t\t\t\twidth: innerWidth,\n\t\t\t\theight: innerHeight\n\t\t\t} );\n\t\t} else {\n\t\t\tcopyRectProperties( this, source );\n\t\t}\n\n\t\t/**\n\t\t * The \"top\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #top\n\t\t */\n\n\t\t/**\n\t\t * The \"right\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #right\n\t\t */\n\n\t\t/**\n\t\t * The \"bottom\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #bottom\n\t\t */\n\n\t\t/**\n\t\t * The \"left\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #left\n\t\t */\n\n\t\t/**\n\t\t * The \"width\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #width\n\t\t */\n\n\t\t/**\n\t\t * The \"height\" value of the rect.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #height\n\t\t */\n\t}\n\n\t/**\n\t * Returns a clone of the rect.\n\t *\n\t * @returns {module:utils/dom/rect~Rect} A cloned rect.\n\t */\n\tclone() {\n\t\treturn new Rect( this );\n\t}\n\n\t/**\n\t * Moves the rect so that its upper–left corner lands in desired `[ x, y ]` location.\n\t *\n\t * @param {Number} x Desired horizontal location.\n\t * @param {Number} y Desired vertical location.\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been moved.\n\t */\n\tmoveTo( x, y ) {\n\t\tthis.top = y;\n\t\tthis.right = x + this.width;\n\t\tthis.bottom = y + this.height;\n\t\tthis.left = x;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves the rect in–place by a dedicated offset.\n\t *\n\t * @param {Number} x A horizontal offset.\n\t * @param {Number} y A vertical offset\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been moved.\n\t */\n\tmoveBy( x, y ) {\n\t\tthis.top += y;\n\t\tthis.right += x;\n\t\tthis.left += x;\n\t\tthis.bottom += y;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a new rect a a result of intersection with another rect.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect\n\t * @returns {module:utils/dom/rect~Rect}\n\t */\n\tgetIntersection( anotherRect ) {\n\t\tconst rect = {\n\t\t\ttop: Math.max( this.top, anotherRect.top ),\n\t\t\tright: Math.min( this.right, anotherRect.right ),\n\t\t\tbottom: Math.min( this.bottom, anotherRect.bottom ),\n\t\t\tleft: Math.max( this.left, anotherRect.left )\n\t\t};\n\n\t\trect.width = rect.right - rect.left;\n\t\trect.height = rect.bottom - rect.top;\n\n\t\tif ( rect.width < 0 || rect.height < 0 ) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn new Rect( rect );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the area of intersection with another rect.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect [description]\n\t * @returns {Number} Area of intersection.\n\t */\n\tgetIntersectionArea( anotherRect ) {\n\t\tconst rect = this.getIntersection( anotherRect );\n\n\t\tif ( rect ) {\n\t\t\treturn rect.getArea();\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the area of the rect.\n\t *\n\t * @returns {Number}\n\t */\n\tgetArea() {\n\t\treturn this.width * this.height;\n\t}\n\n\t/**\n\t * Returns a new rect, a part of the original rect, which is actually visible to the user,\n\t * e.g. an original rect cropped by parent element rects which have `overflow` set in CSS\n\t * other than `\"visible\"`.\n\t *\n\t * If there's no such visible rect, which is when the rect is limited by one or many of\n\t * the ancestors, `null` is returned.\n\t *\n\t * @returns {module:utils/dom/rect~Rect|null} A visible rect instance or `null`, if there's none.\n\t */\n\tgetVisible() {\n\t\tconst source = this._source;\n\t\tlet visibleRect = this.clone();\n\n\t\t// There's no ancestor to crop <body> with the overflow.\n\t\tif ( !isBody( source ) ) {\n\t\t\tlet parent = source.parentNode || source.commonAncestorContainer;\n\n\t\t\t// Check the ancestors all the way up to the <body>.\n\t\t\twhile ( parent && !isBody( parent ) ) {\n\t\t\t\tconst parentRect = new Rect( parent );\n\t\t\t\tconst intersectionRect = visibleRect.getIntersection( parentRect );\n\n\t\t\t\tif ( intersectionRect ) {\n\t\t\t\t\tif ( intersectionRect.getArea() < visibleRect.getArea() ) {\n\t\t\t\t\t\t// Reduce the visible rect to the intersection.\n\t\t\t\t\t\tvisibleRect = intersectionRect;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// There's no intersection, the rect is completely invisible.\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tparent = parent.parentNode;\n\t\t\t}\n\t\t}\n\n\t\treturn visibleRect;\n\t}\n\n\t/**\n\t * Checks if all property values ({@link #top}, {@link #left}, {@link #right},\n\t * {@link #bottom}, {@link #width} and {@link #height}) are the equal in both rect\n\t * instances.\n\t *\n\t * @param {module:utils/dom/rect~Rect} rect A rect instance to compare with.\n\t * @returns {Boolean} `true` when Rects are equal. `false` otherwise.\n\t */\n\tisEqual( anotherRect ) {\n\t\tfor ( const prop of rectProperties ) {\n\t\t\tif ( this[ prop ] !== anotherRect[ prop ] ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks whether a rect fully contains another rect instance.\n\t *\n\t * @param {module:utils/dom/rect~Rect} anotherRect\n\t * @returns {Boolean} `true` if contains, `false` otherwise.\n\t */\n\tcontains( anotherRect ) {\n\t\tconst intersectRect = this.getIntersection( anotherRect );\n\n\t\treturn !!( intersectRect && intersectRect.isEqual( anotherRect ) );\n\t}\n\n\t/**\n\t * Excludes scrollbars and CSS borders from the rect.\n\t *\n\t * * Borders are removed when {@link #_source} is an HTML element.\n\t * * Scrollbars are excluded from HTML elements and the `window`.\n\t *\n\t * @returns {module:utils/dom/rect~Rect} A rect which has been updated.\n\t */\n\texcludeScrollbarsAndBorders() {\n\t\tconst source = this._source;\n\t\tlet scrollBarWidth, scrollBarHeight;\n\n\t\tif ( isWindow( source ) ) {\n\t\t\tscrollBarWidth = source.innerWidth - source.document.documentElement.clientWidth;\n\t\t\tscrollBarHeight = source.innerHeight - source.document.documentElement.clientHeight;\n\t\t} else {\n\t\t\tconst borderWidths = getBorderWidths( this._source );\n\n\t\t\tscrollBarWidth = source.offsetWidth - source.clientWidth;\n\t\t\tscrollBarHeight = source.offsetHeight - source.clientHeight;\n\n\t\t\tthis.moveBy( borderWidths.left, borderWidths.top );\n\t\t}\n\n\t\t// Assuming LTR scrollbars. TODO: RTL.\n\t\tthis.width -= scrollBarWidth;\n\t\tthis.right -= scrollBarWidth;\n\n\t\tthis.height -= scrollBarHeight;\n\t\tthis.bottom -= scrollBarHeight;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns an array of rects of the given native DOM Range.\n\t *\n\t * @param {Range} range A native DOM range.\n\t * @returns {Array.<module:utils/dom/rect~Rect>} DOM Range rects.\n\t */\n\tstatic getDomRangeRects( range ) {\n\t\tconst rects = [];\n\t\t// Safari does not iterate over ClientRectList using for...of loop.\n\t\tconst clientRects = Array.from( range.getClientRects() );\n\n\t\tif ( clientRects.length ) {\n\t\t\tfor ( const rect of clientRects ) {\n\t\t\t\trects.push( new Rect( rect ) );\n\t\t\t}\n\t\t}\n\t\t// If there's no client rects for the Range, use parent container's bounding rect\n\t\t// instead and adjust rect's width to simulate the actual geometry of such range.\n\t\t// https://github.com/ckeditor/ckeditor5-utils/issues/153\n\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/317\n\t\telse {\n\t\t\tlet startContainer = range.startContainer;\n\n\t\t\tif ( isText( startContainer ) ) {\n\t\t\t\tstartContainer = startContainer.parentNode;\n\t\t\t}\n\n\t\t\tconst rect = new Rect( startContainer.getBoundingClientRect() );\n\t\t\trect.right = rect.left;\n\t\t\trect.width = 0;\n\n\t\t\trects.push( rect );\n\t\t}\n\n\t\treturn rects;\n\t}\n}\n\n// Acquires all the rect properties from the passed source.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} rect\n// @param {ClientRect|module:utils/dom/rect~Rect|Object} source\nfunction copyRectProperties( rect, source ) {\n\tfor ( const p of rectProperties ) {\n\t\trect[ p ] = source[ p ];\n\t}\n}\n\n// Checks if provided object is a <body> HTML element.\n//\n// @private\n// @param {HTMLElement|Range} elementOrRange\n// @returns {Boolean}\nfunction isBody( elementOrRange ) {\n\tif ( !isElement( elementOrRange ) ) {\n\t\treturn false;\n\t}\n\n\treturn elementOrRange === elementOrRange.ownerDocument.body;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/scroll\n */\n\nimport isRange from './isrange';\nimport Rect from './rect';\nimport isText from './istext';\n\nconst utils = {};\n\n/**\n * Makes any page `HTMLElement` or `Range` (`target`) visible inside the browser viewport.\n * This helper will scroll all `target` ancestors and the web browser viewport to reveal the target to\n * the user. If the `target` is already visible, nothing will happen.\n *\n * @param {HTMLElement|Range} options.target A target, which supposed to become visible to the user.\n * @param {Number} [options.viewportOffset] An offset from the edge of the viewport (in pixels)\n * the `target` will be moved by when the viewport is scrolled. It enhances the user experience\n * by keeping the `target` some distance from the edge of the viewport and thus making it easier to\n * read or edit by the user.\n */\nexport function scrollViewportToShowTarget( { target, viewportOffset = 0 } ) {\n\tconst targetWindow = getWindow( target );\n\tlet currentWindow = targetWindow;\n\tlet currentFrame = null;\n\n\t// Iterate over all windows, starting from target's parent window up to window#top.\n\twhile ( currentWindow ) {\n\t\tlet firstAncestorToScroll;\n\n\t\t// Let's scroll target's ancestors first to reveal it. Then, once the ancestor scrolls\n\t\t// settled down, the algorithm can eventually scroll the viewport of the current window.\n\t\t//\n\t\t// Note: If the current window is target's **original** window (e.g. the first one),\n\t\t// start scrolling the closest parent of the target. If not, scroll the closest parent\n\t\t// of an iframe that resides in the current window.\n\t\tif ( currentWindow == targetWindow ) {\n\t\t\tfirstAncestorToScroll = getParentElement( target );\n\t\t} else {\n\t\t\tfirstAncestorToScroll = getParentElement( currentFrame );\n\t\t}\n\n\t\t// Scroll the target's ancestors first. Once done, scrolling the viewport is easy.\n\t\tscrollAncestorsToShowRect( firstAncestorToScroll, () => {\n\t\t\t// Note: If the target does not belong to the current window **directly**,\n\t\t\t// i.e. it resides in an iframe belonging to the window, obtain the target's rect\n\t\t\t// in the coordinates of the current window. By default, a Rect returns geometry\n\t\t\t// relative to the current window's viewport. To make it work in a parent window,\n\t\t\t// it must be shifted.\n\t\t\treturn getRectRelativeToWindow( target, currentWindow );\n\t\t} );\n\n\t\t// Obtain the rect of the target after it has been scrolled within its ancestors.\n\t\t// It's time to scroll the viewport.\n\t\tconst targetRect = getRectRelativeToWindow( target, currentWindow );\n\n\t\tscrollWindowToShowRect( currentWindow, targetRect, viewportOffset );\n\n\t\tif ( currentWindow.parent != currentWindow ) {\n\t\t\t// Keep the reference to the <iframe> element the \"previous current window\" was\n\t\t\t// rendered within. It will be useful to re–calculate the rect of the target\n\t\t\t// in the parent window's relative geometry. The target's rect must be shifted\n\t\t\t// by it's iframe's position.\n\t\t\tcurrentFrame = currentWindow.frameElement;\n\t\t\tcurrentWindow = currentWindow.parent;\n\n\t\t\t// If the current window has some parent but frameElement is inaccessible, then they have\n\t\t\t// different domains/ports and, due to security reasons, accessing and scrolling\n\t\t\t// the parent window won't be possible.\n\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/930.\n\t\t\tif ( !currentFrame ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentWindow = null;\n\t\t}\n\t}\n}\n\n/**\n * Makes any page `HTMLElement` or `Range` (target) visible within its scrollable ancestors,\n * e.g. if they have `overflow: scroll` CSS style.\n *\n * @param {HTMLElement|Range} target A target, which supposed to become visible to the user.\n */\nexport function scrollAncestorsToShowTarget( target ) {\n\tconst targetParent = getParentElement( target );\n\n\tscrollAncestorsToShowRect( targetParent, () => {\n\t\treturn new Rect( target );\n\t} );\n}\n\n// TODO: Using a property value shorthand in the top of the file\n// causes JSDoc to throw errors. See https://github.com/cksource/docs-builder/issues/75.\nObject.assign( utils, {\n\tscrollViewportToShowTarget,\n\tscrollAncestorsToShowTarget\n} );\n\n// Makes a given rect visible within its parent window.\n//\n// Note: Avoid the situation where the caret is still in the viewport, but totally\n// at the edge of it. In such situation, if it moved beyond the viewport in the next\n// action e.g. after paste, the scrolling would move it to the viewportOffset level\n// and it all would look like the caret visually moved up/down:\n//\n// 1.\n//\t\t| foo[]\n//\t\t|                                    <--- N px of space below the caret\n//\t\t+---------------------------------...\n//\n// 2. *paste*\n// 3.\n//\t\t|\n//\t\t|\n//\t\t+-foo-----------------------------...\n//\t\t  bar[]                              <--- caret below viewport, scrolling...\n//\n// 4. *scrolling*\n// 5.\n//\t\t|\n//\t\t| foo\n//\t\t| bar[]                              <--- caret precisely at the edge\n//\t\t+---------------------------------...\n//\n// To prevent this, this method checks the rects moved by the viewportOffset to cover\n// the upper/lower edge of the viewport. It makes sure if the action repeats, there's\n// no twitching – it's a purely visual improvement:\n//\n// 5. (after fix)\n//\t\t|\n//\t\t| foo\n//\t\t| bar[]\n//\t\t|                                    <--- N px of space below the caret\n//\t\t+---------------------------------...\n//\n// @private\n// @param {Window} window A window which is scrolled to reveal the rect.\n// @param {module:utils/dom/rect~Rect} rect A rect which is to be revealed.\n// @param {Number} viewportOffset See scrollViewportToShowTarget.\nfunction scrollWindowToShowRect( window, rect, viewportOffset ) {\n\tconst targetShiftedDownRect = rect.clone().moveBy( 0, viewportOffset );\n\tconst targetShiftedUpRect = rect.clone().moveBy( 0, -viewportOffset );\n\tconst viewportRect = new Rect( window ).excludeScrollbarsAndBorders();\n\n\tconst rects = [ targetShiftedUpRect, targetShiftedDownRect ];\n\n\tif ( !rects.every( rect => viewportRect.contains( rect ) ) ) {\n\t\tlet { scrollX, scrollY } = window;\n\n\t\tif ( isAbove( targetShiftedUpRect, viewportRect ) ) {\n\t\t\tscrollY -= viewportRect.top - rect.top + viewportOffset;\n\t\t} else if ( isBelow( targetShiftedDownRect, viewportRect ) ) {\n\t\t\tscrollY += rect.bottom - viewportRect.bottom + viewportOffset;\n\t\t}\n\n\t\t// TODO: Web browsers scroll natively to place the target in the middle\n\t\t// of the viewport. It's not a very popular case, though.\n\t\tif ( isLeftOf( rect, viewportRect ) ) {\n\t\t\tscrollX -= viewportRect.left - rect.left + viewportOffset;\n\t\t} else if ( isRightOf( rect, viewportRect ) ) {\n\t\t\tscrollX += rect.right - viewportRect.right + viewportOffset;\n\t\t}\n\n\t\twindow.scrollTo( scrollX, scrollY );\n\t}\n}\n\n// Recursively scrolls element ancestors to visually reveal a rect.\n//\n// @private\n// @param {HTMLElement} A parent The first ancestors to start scrolling.\n// @param {Function} getRect A function which returns the Rect, which is to be revealed.\nfunction scrollAncestorsToShowRect( parent, getRect ) {\n\tconst parentWindow = getWindow( parent );\n\tlet parentRect, targetRect;\n\n\twhile ( parent != parentWindow.document.body ) {\n\t\ttargetRect = getRect();\n\t\tparentRect = new Rect( parent ).excludeScrollbarsAndBorders();\n\n\t\tif ( !parentRect.contains( targetRect ) ) {\n\t\t\tif ( isAbove( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollTop -= parentRect.top - targetRect.top;\n\t\t\t} else if ( isBelow( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollTop += targetRect.bottom - parentRect.bottom;\n\t\t\t}\n\n\t\t\tif ( isLeftOf( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollLeft -= parentRect.left - targetRect.left;\n\t\t\t} else if ( isRightOf( targetRect, parentRect ) ) {\n\t\t\t\tparent.scrollLeft += targetRect.right - parentRect.right;\n\t\t\t}\n\t\t}\n\n\t\tparent = parent.parentNode;\n\t}\n}\n\n// Determines if a given `Rect` extends beyond the bottom edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isBelow( firstRect, secondRect ) {\n\treturn firstRect.bottom > secondRect.bottom;\n}\n\n// Determines if a given `Rect` extends beyond the top edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isAbove( firstRect, secondRect ) {\n\treturn firstRect.top < secondRect.top;\n}\n\n// Determines if a given `Rect` extends beyond the left edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isLeftOf( firstRect, secondRect ) {\n\treturn firstRect.left < secondRect.left;\n}\n\n// Determines if a given `Rect` extends beyond the right edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\nfunction isRightOf( firstRect, secondRect ) {\n\treturn firstRect.right > secondRect.right;\n}\n\n// Returns the closest window of an element or range.\n//\n// @private\n// @param {HTMLElement|Range} firstRect\n// @returns {Window}\nfunction getWindow( elementOrRange ) {\n\tif ( isRange( elementOrRange ) ) {\n\t\treturn elementOrRange.startContainer.ownerDocument.defaultView;\n\t} else {\n\t\treturn elementOrRange.ownerDocument.defaultView;\n\t}\n}\n\n// Returns the closest parent of an element or DOM range.\n//\n// @private\n// @param {HTMLElement|Range} firstRect\n// @returns {HTMLelement}\nfunction getParentElement( elementOrRange ) {\n\tif ( isRange( elementOrRange ) ) {\n\t\tlet parent = elementOrRange.commonAncestorContainer;\n\n\t\t// If a Range is attached to the Text, use the closest element ancestor.\n\t\tif ( isText( parent ) ) {\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\treturn parent;\n\t} else {\n\t\treturn elementOrRange.parentNode;\n\t}\n}\n\n// Returns the rect of an element or range residing in an iframe.\n// The result rect is relative to the geometry of the passed window instance.\n//\n// @private\n// @param {HTMLElement|Range} target Element or range which rect should be returned.\n// @param {Window} relativeWindow A window the rect should be relative to.\n// @returns {module:utils/dom/rect~Rect}\nfunction getRectRelativeToWindow( target, relativeWindow ) {\n\tconst targetWindow = getWindow( target );\n\tconst rect = new Rect( target );\n\n\tif ( targetWindow === relativeWindow ) {\n\t\treturn rect;\n\t} else {\n\t\tlet currentWindow = targetWindow;\n\n\t\twhile ( currentWindow != relativeWindow ) {\n\t\t\tconst frame = currentWindow.frameElement;\n\t\t\tconst frameRect = new Rect( frame ).excludeScrollbarsAndBorders();\n\n\t\t\trect.moveBy( frameRect.left, frameRect.top );\n\n\t\t\tcurrentWindow = currentWindow.parent;\n\t\t}\n\t}\n\n\treturn rect;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/view\n */\n\nimport Document from './document';\nimport DowncastWriter from './downcastwriter';\nimport Renderer from './renderer';\nimport DomConverter from './domconverter';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\n\nimport MutationObserver from './observer/mutationobserver';\nimport KeyObserver from './observer/keyobserver';\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\nimport SelectionObserver from './observer/selectionobserver';\nimport FocusObserver from './observer/focusobserver';\nimport CompositionObserver from './observer/compositionobserver';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\nimport { injectUiElementHandling } from './uielement';\nimport { injectQuirksHandling } from './filler';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/downcastwriter~DowncastWriter}:\n *\n *\t\tview.change( writer => {\n *\t\t\twriter.insert( position, writer.createText( 'foo' ) );\n *\t\t} );\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/mutationobserver~MutationObserver},\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot binds the DOM and the view elements}.\n *\n * If you do not need full a DOM - view management, and only want to transform a tree of view elements to a tree of DOM\n * elements you do not need this controller. You can use the {@link module:engine/view/domconverter~DomConverter DomConverter} instead.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View {\n\tconstructor() {\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/document~Document} associated with this view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/document~Document} module:engine/view/view~View#document\n\t\t */\n\t\tthis.document = new Document();\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/domconverter~DomConverter domConverter} use by\n\t\t * {@link module:engine/view/view~View#renderer renderer}\n\t\t * and {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/domconverter~DomConverter} module:engine/view/view~View#domConverter\n\t\t */\n\t\tthis.domConverter = new DomConverter();\n\n\t\t/**\n\t\t * Instance of the {@link module:engine/view/renderer~Renderer renderer}.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:engine/view/renderer~Renderer} module:engine/view/view~View#renderer\n\t\t */\n\t\tthis._renderer = new Renderer( this.domConverter, this.document.selection );\n\t\tthis._renderer.bind( 'isFocused' ).to( this.document );\n\n\t\t/**\n\t\t * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Map} module:engine/view/view~View#domRoots\n\t\t */\n\t\tthis.domRoots = new Map();\n\n\t\t/**\n\t\t * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n\t\t *\n\t\t * @private\n\t\t * @member {Map.<Function, module:engine/view/observer/observer~Observer>} module:engine/view/view~View#_observers\n\t\t */\n\t\tthis._observers = new Map();\n\n\t\t/**\n\t\t * Is set to `true` when {@link #change view changes} are currently in progress.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean} module:engine/view/view~View#_ongoingChange\n\t\t */\n\t\tthis._ongoingChange = false;\n\n\t\t/**\n\t\t * Used to prevent calling {@link #render} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean} module:engine/view/view~View#_renderingInProgress\n\t\t */\n\t\tthis._renderingInProgress = false;\n\n\t\t/**\n\t\t * Used to prevent calling {@link #render} and {@link #change} during rendering view to the DOM.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean} module:engine/view/view~View#_renderingInProgress\n\t\t */\n\t\tthis._postFixersInProgress = false;\n\n\t\t/**\n\t\t * Internal flag to temporary disable rendering. See usage in the editing controller.\n\t\t *\n\t\t * @protected\n\t\t * @member {Boolean} module:engine/view/view~View#_renderingDisabled\n\t\t */\n\t\tthis._renderingDisabled = false;\n\n\t\t/**\n\t\t * DowncastWriter instance used in {@link #change change method) callbacks.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/downcastwriter~DowncastWriter} module:engine/view/view~View#_writer\n\t\t */\n\t\tthis._writer = new DowncastWriter( this.document );\n\n\t\t// Add default observers.\n\t\tthis.addObserver( MutationObserver );\n\t\tthis.addObserver( SelectionObserver );\n\t\tthis.addObserver( FocusObserver );\n\t\tthis.addObserver( KeyObserver );\n\t\tthis.addObserver( FakeSelectionObserver );\n\t\tthis.addObserver( CompositionObserver );\n\n\t\t// Inject quirks handlers.\n\t\tinjectQuirksHandling( this );\n\t\tinjectUiElementHandling( this );\n\n\t\t// Use 'normal' priority so that rendering is performed as first when using that priority.\n\t\tthis.on( 'render', () => {\n\t\t\tthis._render();\n\n\t\t\t// Informs that layout has changed after render.\n\t\t\tthis.document.fire( 'layoutChanged' );\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches DOM root element to the view element and enable all observers on that element.\n\t * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized with the view\n\t * what means that all child nodes will be removed and replaced with content of the view root.\n\t *\n\t * This method also will change view element name as the same as tag name of given dom root.\n\t * Name is always transformed to lower case.\n\t *\n\t * @param {Element} domRoot DOM root element.\n\t * @param {String} [name='main'] Name of the root.\n\t */\n\tattachDomRoot( domRoot, name = 'main' ) {\n\t\tconst viewRoot = this.document.getRoot( name );\n\n\t\t// Set view root name the same as DOM root tag name.\n\t\tviewRoot._name = domRoot.tagName.toLowerCase();\n\n\t\tthis.domRoots.set( name, domRoot );\n\t\tthis.domConverter.bindElements( domRoot, viewRoot );\n\t\tthis._renderer.markToSync( 'children', viewRoot );\n\t\tthis._renderer.domDocuments.add( domRoot.ownerDocument );\n\n\t\tviewRoot.on( 'change:children', ( evt, node ) => this._renderer.markToSync( 'children', node ) );\n\t\tviewRoot.on( 'change:attributes', ( evt, node ) => this._renderer.markToSync( 'attributes', node ) );\n\t\tviewRoot.on( 'change:text', ( evt, node ) => this._renderer.markToSync( 'text', node ) );\n\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.observe( domRoot, name );\n\t\t}\n\t}\n\n\t/**\n\t * Gets DOM root element.\n\t *\n\t * @param {String} [name='main']  Name of the root.\n\t * @returns {Element} DOM root element instance.\n\t */\n\tgetDomRoot( name = 'main' ) {\n\t\treturn this.domRoots.get( name );\n\t}\n\n\t/**\n\t * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n\t * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n\t * {@link #domRoots DOM roots}.\n\t *\n\t * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n\t * when registered for the first time. This means that features and other components can register a single observer\n\t * multiple times without caring whether it has been already added or not.\n\t *\n\t * @param {Function} Observer The constructor of an observer to add.\n\t * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n\t * @returns {module:engine/view/observer/observer~Observer} Added observer instance.\n\t */\n\taddObserver( Observer ) {\n\t\tlet observer = this._observers.get( Observer );\n\n\t\tif ( observer ) {\n\t\t\treturn observer;\n\t\t}\n\n\t\tobserver = new Observer( this );\n\n\t\tthis._observers.set( Observer, observer );\n\n\t\tfor ( const [ name, domElement ] of this.domRoots ) {\n\t\t\tobserver.observe( domElement, name );\n\t\t}\n\n\t\tobserver.enable();\n\n\t\treturn observer;\n\t}\n\n\t/**\n\t * Returns observer of the given type or `undefined` if such observer has not been added yet.\n\t *\n\t * @param {Function} Observer The constructor of an observer to get.\n\t * @returns {module:engine/view/observer/observer~Observer|undefined} Observer instance or undefined.\n\t */\n\tgetObserver( Observer ) {\n\t\treturn this._observers.get( Observer );\n\t}\n\n\t/**\n\t * Disables all added observers.\n\t */\n\tdisableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.disable();\n\t\t}\n\t}\n\n\t/**\n\t * Enables all added observers.\n\t */\n\tenableObservers() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.enable();\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n\t * caret, if not already visible to the user.\n\t */\n\tscrollToTheSelection() {\n\t\tconst range = this.document.selection.getFirstRange();\n\n\t\tif ( range ) {\n\t\t\tscrollViewportToShowTarget( {\n\t\t\t\ttarget: this.domConverter.viewRangeToDom( range ),\n\t\t\t\tviewportOffset: 20\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n\t * that is currently having selection inside.\n\t */\n\tfocus() {\n\t\tif ( !this.document.isFocused ) {\n\t\t\tconst editable = this.document.selection.editableElement;\n\n\t\t\tif ( editable ) {\n\t\t\t\tthis.domConverter.focus( editable );\n\t\t\t\tthis.render();\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * Before focusing view document, selection should be placed inside one of the view's editables.\n\t\t\t\t * Normally its selection will be converted from model document (which have default selection), but\n\t\t\t\t * when using view document on its own, we need to manually place selection before focusing it.\n\t\t\t\t *\n\t\t\t\t * @error view-focus-no-selection\n\t\t\t\t */\n\t\t\t\tlog.warn( 'view-focus-no-selection: There is no selection in any editable to focus.' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.\n\t * It makes sure that after all changes are made the view is rendered to the DOM. It prevents situations when the DOM is updated\n\t * when the view state is not yet correct. It allows to nest calls one inside another and still performs a single rendering\n\t * after all those changes are made. It also returns the return value of its callback.\n\t *\n\t *\t\tconst text = view.change( writer => {\n\t *\t\t\tconst newText = writer.createText( 'foo' );\n\t *\t\t\twriter.insert( position1, newText );\n\t *\n\t *\t\t\tview.change( writer => {\n\t *\t\t\t\twriter.insert( position2, writer.createText( 'bar' ) );\n\t *\t\t\t} );\n\t *\n\t * \t\t\twriter.remove( range );\n\t *\n\t * \t\t\treturn newText;\n\t *\t\t} );\n\t *\n\t * When the outermost change block is done and rendering to the DOM is over the\n\t * {@link module:engine/view/view~View#event:render `View#render`} event is fired.\n\t *\n\t * This method throws a `applying-view-changes-on-rendering` error when\n\t * the change block is used after rendering to the DOM has started.\n\t *\n\t * @param {Function} callback Callback function which may modify the view.\n\t * @returns {*} Value returned by the callback.\n\t */\n\tchange( callback ) {\n\t\tif ( this._renderingInProgress || this._postFixersInProgress ) {\n\t\t\t/**\n\t\t\t * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n\t\t\t * cause some unexpected behaviour and inconsistency between the DOM and the view.\n\t\t\t * This may be caused by:\n\t\t\t *\n\t\t\t * * calling {@link #change} or {@link #render} during rendering process,\n\t\t\t * * calling {@link #change} or {@link #render} inside of\n\t\t\t *   {@link module:engine/view/document~Document#registerPostFixer post-fixer function}.\n\t\t\t *\n\t\t\t * @error cannot-change-view-tree\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'cannot-change-view-tree: ' +\n\t\t\t\t'Attempting to make changes to the view when it is in an incorrect state: rendering or post-fixers are in progress. ' +\n\t\t\t\t'This may cause some unexpected behavior and inconsistency between the DOM and the view.'\n\t\t\t);\n\t\t}\n\n\t\t// Recursive call to view.change() method - execute listener immediately.\n\t\tif ( this._ongoingChange ) {\n\t\t\treturn callback( this._writer );\n\t\t}\n\n\t\t// This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n\t\t// event for all nested calls.\n\t\tthis._ongoingChange = true;\n\t\tconst callbackResult = callback( this._writer );\n\t\tthis._ongoingChange = false;\n\n\t\t// This lock is used by editing controller to render changes from outer most model.change() once. As plugins might call\n\t\t// view.change() inside model.change() block - this will ensures that postfixers and rendering are called once after all changes.\n\t\tif ( !this._renderingDisabled ) {\n\t\t\tthis._postFixersInProgress = true;\n\t\t\tthis.document._callPostFixers( this._writer );\n\t\t\tthis._postFixersInProgress = false;\n\n\t\t\tthis.fire( 'render' );\n\t\t}\n\n\t\treturn callbackResult;\n\t}\n\n\t/**\n\t * Renders {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n\t * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n\t * trying to re-render when rendering to DOM has already started.\n\t */\n\trender() {\n\t\tthis.change( () => {} );\n\t}\n\n\t/**\n\t * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n\t */\n\tdestroy() {\n\t\tfor ( const observer of this._observers.values() ) {\n\t\t\tobserver.destroy();\n\t\t}\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/view/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n\t *\n\t * This method is a shortcut to other constructors such as:\n\t *\n\t * * {@link #createPositionBefore},\n\t * * {@link #createPositionAfter},\n\t *\n\t * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/view/item~Item view item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn Position._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item after which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn Position._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before given view item.\n\t *\n\t * @param {module:engine/view/item~Item} item View item before which the position should be located.\n\t * @returns {module:engine/view/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn Position._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n\t *\n\t * @param {module:engine/view/position~Position} start Start position.\n\t * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n\t *\n\t * @param {module:engine/view/item~Item} item\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn Range._createOn( item );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/view/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn Range._createIn( element );\n\t}\n\n\t/**\n\t Creates new {@link module:engine/view/selection~Selection} instance.\n\t *\n\t * \t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = view.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = view.createRange( start, end );\n\t *\t\tconst selection = view.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t * \t\tconst ranges = [ view.createRange( start1, end2 ), view.createRange( star2, end2 ) ];\n\t *\t\tconst selection = view.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\tconst otherSelection = view.createSelection();\n\t *\t\tconst selection = view.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the document selection.\n\t *\t\tconst selection = view.createSelection( editor.editing.view.document.selection );\n\t *\n\t * \t\t// Creates selection at the given position.\n\t *\t\tconst position = view.createPositionFromPath( root, path );\n\t *\t\tconst selection = view.createSelection( position );\n\t *\n\t *\t\t// Creates collapsed selection at the position of given item and offset.\n\t *\t\tconst paragraph = view.createContainerElement( 'paragraph' );\n\t *\t\tconst selection = view.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = view.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = view.createSelection( paragraph, 'on' );\n\t *\n\t * `Selection`'s factory method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = view.createSelection( range, { backward: true } );\n\t *\n\t * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n\t * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n\t * represented in other way, for example by applying proper CSS class.\n\t *\n\t * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n\t * (and be  properly handled by screen readers).\n\t *\n\t *\t\t// Creates fake selection with label.\n\t *\t\tconst selection = view.createSelection( range, { fake: true, label: 'foo' } );\n\t *\n\t * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection|\n\t * module:engine/view/position~Position|Iterable.<module:engine/view/range~Range>|module:engine/view/range~Range|\n\t * module:engine/view/item~Item|null} [selectable=null]\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n\t * @param {String} [options.label] Label for the fake selection.\n\t * @returns {module:engine/view/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new Selection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Renders all changes. In order to avoid triggering the observers (e.g. mutations) all observers are disabled\n\t * before rendering and re-enabled after that.\n\t *\n\t * @private\n\t */\n\t_render() {\n\t\tthis._renderingInProgress = true;\n\t\tthis.disableObservers();\n\t\tthis._renderer.render();\n\t\tthis.enableObservers();\n\t\tthis._renderingInProgress = false;\n\t}\n\n\t/**\n\t * Fired after a topmost {@link module:engine/view/view~View#change change block} and all\n\t * {@link module:engine/view/document~Document#registerPostFixer post-fixers} are executed.\n\t *\n\t * Actual rendering is performed as a first listener on 'normal' priority.\n\t *\n\t *\t\tview.on( 'render', () => {\n\t *\t\t\t// Rendering to the DOM is complete.\n\t *\t\t} );\n\t *\n\t * This event is useful when you want to update interface elements after the rendering, e.g. position of the\n\t * balloon panel. If you wants to change view structure use\n\t * {@link module:engine/view/document~Document#registerPostFixer post-fixers}.\n\t *\n\t * @event module:engine/view/view~View#event:render\n\t */\n}\n\nmix( View, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/tomap\n */\n\nimport objectToMap from './objecttomap';\nimport { isPlainObject } from 'lodash-es';\n\n/**\n * Transforms object or iterable to map. Iterable needs to be in the format acceptable by the `Map` constructor.\n *\n *\t\tmap = toMap( { 'foo': 1, 'bar': 2 } );\n *\t\tmap = toMap( [ [ 'foo', 1 ], [ 'bar', 2 ] ] );\n *\t\tmap = toMap( anotherMap );\n *\n * @param {Object|Iterable} data Object or iterable to transform.\n * @returns {Map} Map created from data.\n */\nexport default function toMap( data ) {\n\tif ( isPlainObject( data ) ) {\n\t\treturn objectToMap( data );\n\t} else {\n\t\treturn new Map( data );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/node\n */\n\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\n/**\n * Model node. Most basic structure of model tree.\n *\n * This is an abstract class that is a base for other classes representing different nodes in model.\n *\n * **Note:** If a node is detached from the model tree, you can manipulate it using it's API.\n * However, it is **very important** that nodes already attached to model tree should be only changed through\n * {@link module:engine/model/writer~Writer Writer API}.\n *\n * Changes done by `Node` methods, like {@link module:engine/model/element~Element#_insertChild _insertChild} or\n * {@link module:engine/model/node~Node#_setAttribute _setAttribute}\n * do not generate {@link module:engine/model/operation/operation~Operation operations}\n * which are essential for correct editor work if you modify nodes in {@link module:engine/model/document~Document document} root.\n *\n * The flow of working on `Node` (and classes that inherits from it) is as such:\n * 1. You can create a `Node` instance, modify it using it's API.\n * 2. Add `Node` to the model using `Batch` API.\n * 3. Change `Node` that was already added to the model using `Batch` API.\n *\n * Similarly, you cannot use `Batch` API on a node that has not been added to the model tree, with the exception\n * of {@link module:engine/model/writer~Writer#insert inserting} that node to the model tree.\n *\n * Be aware that using {@link module:engine/model/writer~Writer#remove remove from Batch API} does not allow to use `Node` API because\n * the information about `Node` is still kept in model document.\n *\n * In case of {@link module:engine/model/element~Element element node}, adding and removing children also counts as changing a node and\n * follows same rules.\n */\nexport default class Node {\n\t/**\n\t * Creates a model node.\n\t *\n\t * This is an abstract class, so this constructor should not be used directly.\n\t *\n\t * @abstract\n\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tconstructor( attrs ) {\n\t\t/**\n\t\t * Parent of this node. It could be {@link module:engine/model/element~Element}\n\t\t * or {@link module:engine/model/documentfragment~DocumentFragment}.\n\t\t * Equals to `null` if the node has no parent.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t\t */\n\t\tthis.parent = null;\n\n\t\t/**\n\t\t * Attributes set on this node.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/model/node~Node#_attrs\n\t\t */\n\t\tthis._attrs = toMap( attrs );\n\t}\n\n\t/**\n\t * Index of this node in it's parent or `null` if the node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that model tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget index() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( ( pos = this.parent.getChildIndex( this ) ) === null ) {\n\t\t\tthrow new CKEditorError( 'model-node-not-found-in-parent: The node\\'s parent does not contain this node.' );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Offset at which this node starts in it's parent. It is equal to the sum of {@link #offsetSize offsetSize}\n\t * of all it's previous siblings. Equals to `null` if node has no parent.\n\t *\n\t * Accessing this property throws an error if this node's parent element does not contain it.\n\t * This means that model tree got broken.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget startOffset() {\n\t\tlet pos;\n\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( ( pos = this.parent.getChildStartOffset( this ) ) === null ) {\n\t\t\tthrow new CKEditorError( 'model-node-not-found-in-parent: The node\\'s parent does not contain this node.' );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Offset size of this node. Represents how much \"offset space\" is occupied by the node in it's parent.\n\t * It is important for {@link module:engine/model/position~Position position}. When node has `offsetSize` greater than `1`, position\n\t * can be placed between that node start and end. `offsetSize` greater than `1` is for nodes that represents more\n\t * than one entity, i.e. {@link module:engine/model/text~Text text node}.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget offsetSize() {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Offset at which this node ends in it's parent. It is equal to the sum of this node's\n\t * {@link module:engine/model/node~Node#startOffset start offset} and {@link #offsetSize offset size}.\n\t * Equals to `null` if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget endOffset() {\n\t\tif ( !this.parent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.startOffset + this.offsetSize;\n\t}\n\n\t/**\n\t * Node's next sibling or `null` if the node is a last child of it's parent or if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget nextSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index + 1 ) ) || null;\n\t}\n\n\t/**\n\t * Node's previous sibling or `null` if the node is a first child of it's parent or if the node has no parent.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget previousSibling() {\n\t\tconst index = this.index;\n\n\t\treturn ( index !== null && this.parent.getChild( index - 1 ) ) || null;\n\t}\n\n\t/**\n\t * The top-most ancestor of the node. If node has no parent it is the root itself. If the node is a part\n\t * of {@link module:engine/model/documentfragment~DocumentFragment}, it's `root` is equal to that `DocumentFragment`.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\tlet root = this; // eslint-disable-line consistent-this\n\n\t\twhile ( root.parent ) {\n\t\t\troot = root.parent;\n\t\t}\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns this node or `null` if the node has no parent or is inside\n\t * a {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\t// This is a top element of a sub-tree.\n\t\tif ( this.root == this ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Root may be `DocumentFragment` which does not have document property.\n\t\treturn this.root.document || null;\n\t}\n\n\t/**\n\t * Gets path to the node. The path is an array containing starting offsets of consecutive ancestors of this node,\n\t * beginning from {@link module:engine/model/node~Node#root root}, down to this node's starting offset. The path can be used to\n\t * create {@link module:engine/model/position~Position Position} instance.\n\t *\n\t *\t\tconst abc = new Text( 'abc' );\n\t *\t\tconst foo = new Text( 'foo' );\n\t *\t\tconst h1 = new Element( 'h1', null, new Text( 'header' ) );\n\t *\t\tconst p = new Element( 'p', null, [ abc, foo ] );\n\t *\t\tconst div = new Element( 'div', null, [ h1, p ] );\n\t *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n\t *\t\th1.getPath(); // Returns [ 0 ].\n\t *\t\tdiv.getPath(); // Returns [].\n\t *\n\t * @returns {Array.<Number>} The path.\n\t */\n\tgetPath() {\n\t\tconst path = [];\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\twhile ( node.parent ) {\n\t\t\tpath.unshift( node.startOffset );\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this node.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Returns a {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both nodes.\n\t *\n\t * @param {module:engine/model/node~Node} node The second node.\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n\t * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( node, options = {} ) {\n\t\tconst ancestorsA = this.getAncestors( options );\n\t\tconst ancestorsB = node.getAncestors( options );\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/model/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisBefore( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisPath = this.getPath();\n\t\tconst nodePath = node.getPath();\n\n\t\tconst result = compareArrays( thisPath, nodePath );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'prefix':\n\t\t\t\treturn true;\n\n\t\t\tcase 'extension':\n\t\t\t\treturn false;\n\n\t\t\tdefault:\n\t\t\t\treturn thisPath[ result ] < nodePath[ result ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n\t * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n\t *\n\t * @param {module:engine/model/node~Node} node Node to compare with.\n\t * @returns {Boolean}\n\t */\n\tisAfter( node ) {\n\t\t// Given node is not before this node if they are same.\n\t\tif ( this == node ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Return `false` if it is impossible to compare nodes.\n\t\tif ( this.root !== node.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// In other cases, just check if the `node` is before, and return the opposite.\n\t\treturn !this.isBefore( node );\n\t}\n\n\t/**\n\t * Checks if the node has an attribute with given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on node, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on node.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._attrs.entries();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._attrs.keys();\n\t}\n\n\t/**\n\t * Converts `Node` to plain object and returns it.\n\t *\n\t * @returns {Object} `Node` converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = {};\n\n\t\t// Serializes attributes to the object.\n\t\t// attributes = { a: 'foo', b: 1, c: true }.\n\t\tif ( this._attrs.size ) {\n\t\t\tjson.attributes = Array.from( this._attrs ).reduce( ( result, attr ) => {\n\t\t\t\tresult[ attr[ 0 ] ] = attr[ 1 ];\n\n\t\t\t\treturn result;\n\t\t\t}, {} );\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a copy of this node, that is a node with exactly same attributes, and returns it.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/node~Node} Node with same attributes as this node.\n\t */\n\t_clone() {\n\t\treturn new Node( this._attrs );\n\t}\n\n\t/**\n\t * Removes this node from it's parent.\n\t *\n\t * @see module:engine/model/writer~Writer#remove\n\t * @protected\n\t */\n\t_remove() {\n\t\tthis.parent._removeChildren( this.index );\n\t}\n\n\t/**\n\t * Sets attribute on the node. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * @see module:engine/model/writer~Writer#setAttribute\n\t * @protected\n\t * @param {String} key Key of attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\t_setAttribute( key, value ) {\n\t\tthis._attrs.set( key, value );\n\t}\n\n\t/**\n\t * Removes all attributes from the node and sets given attributes.\n\t *\n\t * @see module:engine/model/writer~Writer#setAttributes\n\t * @protected\n\t * @param {Object} [attrs] Attributes to set. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\t_setAttributesTo( attrs ) {\n\t\tthis._attrs = toMap( attrs );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the node.\n\t *\n\t * @see module:engine/model/writer~Writer#removeAttribute\n\t * @protected\n\t * @param {String} key Key of attribute to remove.\n\t * @returns {Boolean} `true` if the attribute was set on the element, `false` otherwise.\n\t */\n\t_removeAttribute( key ) {\n\t\treturn this._attrs.delete( key );\n\t}\n\n\t/**\n\t * Removes all attributes from the node.\n\t *\n\t * @see module:engine/model/writer~Writer#clearAttributes\n\t * @protected\n\t */\n\t_clearAttributes() {\n\t\tthis._attrs.clear();\n\t}\n\n\t/**\n\t * Checks whether given model tree object is of given type.\n\t *\n\t * This method is useful when processing model tree objects that are of unknown type. For example, a function\n\t * may return {@link module:engine/model/documentfragment~DocumentFragment} or {@link module:engine/model/node~Node}\n\t * that can be either text node or element. This method can be used to check what kind of object is returned.\n\t *\n\t *\t\tobj.is( 'node' ); // true for any node, false for document fragment and text fragment\n\t *\t\tobj.is( 'documentFragment' ); // true for document fragment, false for any node\n\t *\t\tobj.is( 'element' ); // true for any element, false for text node or document fragment\n\t *\t\tobj.is( 'element', 'paragraph' ); // true only for element which name is 'paragraph'\n\t *\t\tobj.is( 'paragraph' ); // shortcut for obj.is( 'element', 'paragraph' )\n\t *\t\tobj.is( 'text' ); // true for text node, false for element and document fragment\n\t *\t\tobj.is( 'textProxy' ); // true for text proxy object\n\t *\n\t * @method #is\n\t * @param {'element'|'rootElement'|'text'|'textProxy'|'documentFragment'} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'node';\n\t}\n}\n\n/**\n * The node's parent does not contain this node.\n *\n * This error may be thrown from corrupted trees.\n *\n * @error model-node-not-found-in-parent\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/text\n */\n\nimport Node from './node';\n\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n *\n * @extends {module:engine/model/node~Node}\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a text node.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createText} method instead.\n\t *\n\t * @protected\n\t * @param {String} data Node's text.\n\t * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t */\n\tconstructor( data, attrs ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Text data contained in this text node.\n\t\t *\n\t\t * @protected\n\t\t * @type {String}\n\t\t */\n\t\tthis._data = data || '';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Returns a text data contained in the node.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type ) {\n\t\treturn type == 'text' || super.is( type );\n\t}\n\n\t/**\n\t * Converts `Text` instance to plain object and returns it.\n\t *\n\t * @returns {Object} `Text` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.data = this.data;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\t_clone() {\n\t\treturn new Text( this.data, this.getAttributes() );\n\t}\n\n\t/**\n\t * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Text`.\n\t * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\treturn new Text( json.data, json.attributes );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/textproxy\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * `TextProxy` represents a part of {@link module:engine/model/text~Text text node}.\n *\n * Since {@link module:engine/model/position~Position positions} can be placed between characters of a text node,\n * {@link module:engine/model/range~Range ranges} may contain only parts of text nodes. When {@link module:engine/model/range~Range#getItems\n * getting items}\n * contained in such range, we need to represent a part of that text node, since returning the whole text node would be incorrect.\n * `TextProxy` solves this issue.\n *\n * `TextProxy` has an API similar to {@link module:engine/model/text~Text Text} and allows to do most of the common tasks performed\n * on model nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/model/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is not an instance of {@link module:engine/model/node~Node node}. Keep this in mind when using it as a\n * parameter of methods.\n *\n * **Note:** `TextProxy` is a readonly interface. If you want to perform changes on model data represented by a `TextProxy`\n * use {@link module:engine/model/writer~Writer model writer API}.\n *\n * **Note:** `TextProxy` instances are created on the fly, basing on the current state of model. Because of this, it is\n * highly unrecommended to store references to `TextProxy` instances. `TextProxy` instances are not refreshed when\n * model changes, so they might get invalidated. Instead, consider creating {@link module:engine/model/liveposition~LivePosition live\n * position}.\n *\n * `TextProxy` instances are created by {@link module:engine/model/treewalker~TreeWalker model tree walker}. You should not need to create\n * an instance of this class by your own.\n */\nexport default class TextProxy {\n\t/**\n\t * Creates a text proxy.\n\t *\n\t * @protected\n\t * @param {module:engine/model/text~Text} textNode Text node which part is represented by this text proxy.\n\t * @param {Number} offsetInText Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy\n\t * starts.\n\t * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n\t * @constructor\n\t */\n\tconstructor( textNode, offsetInText, length ) {\n\t\t/**\n\t\t * Text node which part is represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/text~Text}\n\t\t */\n\t\tthis.textNode = textNode;\n\n\t\tif ( offsetInText < 0 || offsetInText > textNode.offsetSize ) {\n\t\t\t/**\n\t\t\t * Given `offsetInText` value is incorrect.\n\t\t\t *\n\t\t\t * @error model-textproxy-wrong-offsetintext\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.' );\n\t\t}\n\n\t\tif ( length < 0 || offsetInText + length > textNode.offsetSize ) {\n\t\t\t/**\n\t\t\t * Given `length` value is incorrect.\n\t\t\t *\n\t\t\t * @error model-textproxy-wrong-length\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-textproxy-wrong-length: Given length value is incorrect.' );\n\t\t}\n\n\t\t/**\n\t\t * Text data represented by this text proxy.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.data = textNode.data.substring( offsetInText, offsetInText + length );\n\n\t\t/**\n\t\t * Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy starts.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.offsetInText = offsetInText;\n\t}\n\n\t/**\n\t * Offset at which this text proxy starts in it's parent.\n\t *\n\t * @see module:engine/model/node~Node#startOffset\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget startOffset() {\n\t\treturn this.textNode.startOffset !== null ? this.textNode.startOffset + this.offsetInText : null;\n\t}\n\n\t/**\n\t * Offset size of this text proxy. Equal to the number of characters represented by the text proxy.\n\t *\n\t * @see module:engine/model/node~Node#offsetSize\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget offsetSize() {\n\t\treturn this.data.length;\n\t}\n\n\t/**\n\t * Offset at which this text proxy ends in it's parent.\n\t *\n\t * @see module:engine/model/node~Node#endOffset\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget endOffset() {\n\t\treturn this.startOffset !== null ? this.startOffset + this.offsetSize : null;\n\t}\n\n\t/**\n\t * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/model/text~Text text node}\n\t * (`true`) or the whole text node (`false`).\n\t *\n\t * This is `false` when text proxy starts at the very beginning of {@link module:engine/model/textproxy~TextProxy#textNode textNode}\n\t * ({@link module:engine/model/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n\t * text node size.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isPartial() {\n\t\treturn this.offsetSize !== this.textNode.offsetSize;\n\t}\n\n\t/**\n\t * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tget parent() {\n\t\treturn this.textNode.parent;\n\t}\n\n\t/**\n\t * Root of this text proxy, which is same as root of text node represented by this text proxy.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.textNode.root;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns text node represented by this text proxy or `null` if the text node\n\t * has no parent or is inside a {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this.textNode.document;\n\t}\n\n\t/**\n\t * Checks whether given model tree object is of given type.\n\t *\n\t * Read more in {@link module:engine/model/node~Node#is}.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'textProxy';\n\t}\n\n\t/**\n\t * Gets path to this text proxy.\n\t *\n\t * @see module:engine/model/node~Node#getPath\n\t * @returns {Array.<Number>}\n\t */\n\tgetPath() {\n\t\tconst path = this.textNode.getPath();\n\n\t\tif ( path.length > 0 ) {\n\t\t\tpath[ path.length - 1 ] += this.offsetInText;\n\t\t}\n\n\t\treturn path;\n\t}\n\n\t/**\n\t * Returns ancestors array of this text proxy.\n\t *\n\t * @param {Object} options Options object.\n\t * @param {Boolean} [options.includeSelf=false] When set to `true` this text proxy will be also included in parent's array.\n\t * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to root element,\n\t * otherwise root element will be the first item in the array.\n\t * @returns {Array} Array with ancestors.\n\t */\n\tgetAncestors( options = { includeSelf: false, parentFirst: false } ) {\n\t\tconst ancestors = [];\n\t\tlet parent = options.includeSelf ? this : this.parent;\n\n\t\twhile ( parent ) {\n\t\t\tancestors[ options.parentFirst ? 'push' : 'unshift' ]( parent );\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Checks if this text proxy has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on text proxy, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this.textNode.hasAttribute( key );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on text proxy.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this.textNode.getAttribute( key );\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attributes. Attributes are returned as arrays containing two\n\t * items. First one is attribute key and second is attribute value.\n\t *\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this.textNode.getAttributes();\n\t}\n\n\t/**\n\t * Returns iterator that iterates over this node's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this.textNode.getAttributeKeys();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/nodelist\n */\n\nimport Node from './node';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Provides an interface to operate on a list of {@link module:engine/model/node~Node nodes}. `NodeList` is used internally\n * in classes like {@link module:engine/model/element~Element Element}\n * or {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n */\nexport default class NodeList {\n\t/**\n\t * Creates an empty node list.\n\t *\n\t * @protected\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes contained in this node list.\n\t */\n\tconstructor( nodes ) {\n\t\t/**\n\t\t * Nodes contained in this node list.\n\t\t *\n\t\t * @private\n\t\t * @member {Array.<module:engine/model/node~Node>}\n\t\t */\n\t\tthis._nodes = [];\n\n\t\tif ( nodes ) {\n\t\t\tthis._insertNodes( 0, nodes );\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all nodes contained inside this node list.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._nodes[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Number of nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._nodes.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes contained inside this node list.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Gets the node at the given index. Returns `null` if incorrect index was passed.\n\t *\n\t * @param {Number} index Index of node.\n\t * @returns {module:engine/model/node~Node|null} Node at given index.\n\t */\n\tgetNode( index ) {\n\t\treturn this._nodes[ index ] || null;\n\t}\n\n\t/**\n\t * Returns an index of the given node. Returns `null` if given node is not inside this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's index.\n\t */\n\tgetNodeIndex( node ) {\n\t\tconst index = this._nodes.indexOf( node );\n\n\t\treturn index == -1 ? null : index;\n\t}\n\n\t/**\n\t * Returns the starting offset of given node. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes that are before this node in this node list.\n\t *\n\t * @param {module:engine/model/node~Node} node Node to look for.\n\t * @returns {Number|null} Node's starting offset.\n\t */\n\tgetNodeStartOffset( node ) {\n\t\tconst index = this.getNodeIndex( node );\n\n\t\treturn index === null ? null : this._nodes.slice( 0, index ).reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\t}\n\n\t/**\n\t * Converts index to offset in node list.\n\t *\n\t * Returns starting offset of a node that is at given index. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-index-out-of-bounds` if given index is less than `0` or more than {@link #length}.\n\t *\n\t * @param {Number} index Node's index.\n\t * @returns {Number} Node's starting offset.\n\t */\n\tindexToOffset( index ) {\n\t\tif ( index == this._nodes.length ) {\n\t\t\treturn this.maxOffset;\n\t\t}\n\n\t\tconst node = this._nodes[ index ];\n\n\t\tif ( !node ) {\n\t\t\t/**\n\t\t\t * Given index cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error nodelist-index-out-of-bounds\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-index-out-of-bounds: Given index cannot be found in the node list.' );\n\t\t}\n\n\t\treturn this.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Converts offset in node list to index.\n\t *\n\t * Returns index of a node that occupies given offset. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n\t * `model-nodelist-offset-out-of-bounds` if given offset is less than `0` or more than {@link #maxOffset}.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number} Index of a node that occupies given offset.\n\t */\n\toffsetToIndex( offset ) {\n\t\tlet totalOffset = 0;\n\n\t\tfor ( const node of this._nodes ) {\n\t\t\tif ( offset >= totalOffset && offset < totalOffset + node.offsetSize ) {\n\t\t\t\treturn this.getNodeIndex( node );\n\t\t\t}\n\n\t\t\ttotalOffset += node.offsetSize;\n\t\t}\n\n\t\tif ( totalOffset != offset ) {\n\t\t\t/**\n\t\t\t * Given offset cannot be found in the node list.\n\t\t\t *\n\t\t\t * @error model-nodelist-offset-out-of-bounds\n\t\t\t * @param {Number} offset\n\t\t\t * @param {module:engine/model/nodelist~NodeList} nodeList Stringified node list.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-nodelist-offset-out-of-bounds: Given offset cannot be found in the node list.', {\n\t\t\t\toffset,\n\t\t\t\tnodeList: this\n\t\t\t} );\n\t\t}\n\n\t\treturn this.length;\n\t}\n\n\t/**\n\t * Inserts given nodes at given index.\n\t *\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to be inserted.\n\t */\n\t_insertNodes( index, nodes ) {\n\t\t// Validation.\n\t\tfor ( const node of nodes ) {\n\t\t\tif ( !( node instanceof Node ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to insert an object which is not a Node instance.\n\t\t\t\t *\n\t\t\t\t * @error nodelist-insertNodes-not-node\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'model-nodelist-insertNodes-not-node: Trying to insert an object which is not a Node instance.' );\n\t\t\t}\n\t\t}\n\n\t\tthis._nodes.splice( index, 0, ...nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index.\n\t *\n\t * @protected\n\t * @param {Number} indexStart Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeNodes( indexStart, howMany = 1 ) {\n\t\treturn this._nodes.splice( indexStart, howMany );\n\t}\n\n\t/**\n\t * Converts `NodeList` instance to an array containing nodes that were inserted in the node list. Nodes\n\t * are also converted to their plain object representation.\n\t *\n\t * @returns {Array.<module:engine/model/node~Node>} `NodeList` instance converted to `Array`.\n\t */\n\ttoJSON() {\n\t\treturn this._nodes.map( node => node.toJSON() );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/element\n */\n\nimport Node from './node';\nimport NodeList from './nodelist';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * Model element. Type of {@link module:engine/model/node~Node node} that has a {@link module:engine/model/element~Element#name name} and\n * {@link module:engine/model/element~Element#getChildren child nodes}.\n *\n * **Important**: see {@link module:engine/model/node~Node} to read about restrictions using `Element` and `Node` API.\n *\n * @extends {module:engine/model/node~Node}\n */\nexport default class Element extends Node {\n\t/**\n\t * Creates a model element.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createElement} method instead.\n\t *\n\t * @protected\n\t * @param {String} name Element's name.\n\t * @param {Object} [attrs] Element's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n\t * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\n\t * One or more nodes to be inserted as children of created element.\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( attrs );\n\n\t\t/**\n\t\t * Element name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:engine/model/element~Element#name\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * List of children nodes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/element~Element#_children\n\t\t */\n\t\tthis._children = new NodeList();\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Number of this element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this element's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._children.maxOffset;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this element, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Checks whether given model tree object is of given type.\n\t *\n\t *\t\tobj.name; // 'listItem'\n\t *\t\tobj instanceof Element; // true\n\t *\n\t *\t\tobj.is( 'element' ); // true\n\t *\t\tobj.is( 'listItem' ); // true\n\t *\t\tobj.is( 'element', 'listItem' ); // true\n\t *\t\tobj.is( 'text' ); // false\n\t *\t\tobj.is( 'element', 'image' ); // false\n\t *\n\t * Read more in {@link module:engine/model/node~Node#is}.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'element' || type == this.name || super.is( type );\n\t\t} else {\n\t\t\treturn type == 'element' && name == this.name;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the child at the given index.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/model/node~Node} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children.getNode( index );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all of this element's children.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an index of the given child node. Returns `null` if given node is not a child of this element.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number} Child node's index in this element.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.getNodeIndex( node );\n\t}\n\n\t/**\n\t * Returns the starting offset of given child. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n\t * given node is not a child of this element.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number} Child node's starting offset.\n\t */\n\tgetChildStartOffset( node ) {\n\t\treturn this._children.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n\t * too high, returns {@link module:engine/model/element~Element#getChildIndex index after last child}.\n\t *\n\t *\t\tconst textNode = new Text( 'foo' );\n\t *\t\tconst pElement = new Element( 'p' );\n\t *\t\tconst divElement = new Element( [ textNode, pElement ] );\n\t *\t\tdivElement.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n\t *\t\tdivElement.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n\t *\t\tdivElement.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n\t *\t\tdivElement.offsetToIndex( 2 ); // Returns 0.\n\t *\t\tdivElement.offsetToIndex( 3 ); // Returns 1.\n\t *\t\tdivElement.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number}\n\t */\n\toffsetToIndex( offset ) {\n\t\treturn this._children.offsetToIndex( offset );\n\t}\n\n\t/**\n\t * Returns a descendant node by its path relative to this element.\n\t *\n\t *\t\t// <this>a<b>c</b></this>\n\t *\t\tthis.getNodeByPath( [ 0 ] );     // -> \"a\"\n\t *\t\tthis.getNodeByPath( [ 1 ] );     // -> <b>\n\t *\t\tthis.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n\t *\n\t * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\n\t * @returns {module:engine/model/node~Node}\n\t */\n\tgetNodeByPath( relativePath ) {\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\tfor ( const index of relativePath ) {\n\t\t\tnode = node.getChild( node.offsetToIndex( index ) );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Converts `Element` instance to plain object and returns it. Takes care of converting all of this element's children.\n\t *\n\t * @returns {Object} `Element` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.name = this.name;\n\n\t\tif ( this._children.length > 0 ) {\n\t\t\tjson.children = [];\n\n\t\t\tfor ( const node of this._children ) {\n\t\t\t\tjson.children.push( node.toJSON() );\n\t\t\t}\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a copy of this element and returns it. Created element has the same name and attributes as the original element.\n\t * If clone is deep, the original element's children are also cloned. If not, then empty element is removed.\n\t *\n\t * @protected\n\t * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n\t * element will be cloned without any child.\n\t */\n\t_clone( deep = false ) {\n\t\tconst children = deep ? Array.from( this._children ).map( node => node._clone( true ) ) : null;\n\n\t\treturn new Element( this.name, this.getAttributes(), children );\n\t}\n\n\t/**\n\t * {@link module:engine/model/element~Element#_insertChild Inserts} one or more nodes at the end of this element.\n\t *\n\t * @see module:engine/model/writer~Writer#append\n\t * @protected\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} nodes Nodes to be inserted.\n\t */\n\t_appendChild( nodes ) {\n\t\tthis._insertChild( this.childCount, nodes );\n\t}\n\n\t/**\n\t * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n\t * to this element.\n\t *\n\t * @see module:engine/model/writer~Writer#insert\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\t_insertChild( index, items ) {\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\t\t}\n\n\t\tthis._children._insertNodes( index, nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index and sets\n\t * {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n\t *\n\t * @see module:engine/model/writer~Writer#remove\n\t * @protected\n\t * @param {Number} index Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tconst nodes = this._children._removeNodes( index, howMany );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tnode.parent = null;\n\t\t}\n\n\t\treturn nodes;\n\t}\n\n\t/**\n\t * Creates an `Element` instance from given plain object (i.e. parsed JSON string).\n\t * Converts `Element` children to proper nodes.\n\t *\n\t * @param {Object} json Plain object to be converted to `Element`.\n\t * @returns {module:engine/model/element~Element} `Element` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\tlet children = null;\n\n\t\tif ( json.children ) {\n\t\t\tchildren = [];\n\n\t\t\tfor ( const child of json.children ) {\n\t\t\t\tif ( child.name ) {\n\t\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new Element( json.name, json.attributes, children );\n\t}\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/model/item~Item|Iterable.<String|module:engine/model/item~Item>}\n// @returns {Iterable.<module:engine/model/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data, node.getAttributes() );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/treewalker\n */\n\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport Element from './element';\nimport Position from './position';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\nexport default class TreeWalker {\n\t/**\n\t * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n\t *\n\t * @constructor\n\t * @param {Object} [options={}] Object with configuration.\n\t * @param {'forward'|'backward'} [options.direction='forward'] Walking direction.\n\t * @param {module:engine/model/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n\t * @param {module:engine/model/position~Position} [options.startPosition] Starting position.\n\t * @param {Boolean} [options.singleCharacters=false] Flag indicating whether all consecutive characters with the same attributes\n\t * should be returned one by one as multiple {@link module:engine/model/textproxy~TextProxy} (`true`) objects or as one\n\t * {@link module:engine/model/textproxy~TextProxy} (`false`).\n\t * @param {Boolean} [options.shallow=false] Flag indicating whether iterator should enter elements or not. If the\n\t * iterator is shallow child nodes of any iterated node will not be returned along with `elementEnd` tag.\n\t * @param {Boolean} [options.ignoreElementEnd=false] Flag indicating whether iterator should ignore `elementEnd`\n\t * tags. If the option is true walker will not return a parent node of start position. If this option is `true`\n\t * each {@link module:engine/model/element~Element} will be returned once, while if the option is `false` they might be returned\n\t * twice: for `'elementStart'` and `'elementEnd'`.\n\t */\n\tconstructor( options = {} ) {\n\t\tif ( !options.boundaries && !options.startPosition ) {\n\t\t\t/**\n\t\t\t * Neither boundaries nor starting position of a `TreeWalker` have been defined.\n\t\t\t *\n\t\t\t * @error model-tree-walker-no-start-position\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.' );\n\t\t}\n\n\t\tconst direction = options.direction || 'forward';\n\n\t\tif ( direction != 'forward' && direction != 'backward' ) {\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.',\n\t\t\t\t{ direction }\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Walking direction. Defaults `'forward'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'backward'|'forward'} module:engine/model/treewalker~TreeWalker#direction\n\t\t */\n\t\tthis.direction = direction;\n\n\t\t/**\n\t\t * Iterator boundaries.\n\t\t *\n\t\t * When the iterator is walking `'forward'` on the end of boundary or is walking `'backward'`\n\t\t * on the start of boundary, then `{ done: true }` is returned.\n\t\t *\n\t\t * If boundaries are not defined they are set before first and after last child of the root node.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range} module:engine/model/treewalker~TreeWalker#boundaries\n\t\t */\n\t\tthis.boundaries = options.boundaries || null;\n\n\t\t/**\n\t\t * Iterator position. This is always static position, even if the initial position was a\n\t\t * {@link module:engine/model/liveposition~LivePosition live position}. If start position is not defined then position depends\n\t\t * on {@link #direction}. If direction is `'forward'` position starts form the beginning, when direction\n\t\t * is `'backward'` position starts from the end.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position} module:engine/model/treewalker~TreeWalker#position\n\t\t */\n\t\tif ( options.startPosition ) {\n\t\t\tthis.position = options.startPosition.clone();\n\t\t} else {\n\t\t\tthis.position = Position._createAt( this.boundaries[ this.direction == 'backward' ? 'end' : 'start' ] );\n\t\t}\n\n\t\t// Reset position stickiness in case it was set to other value, as the stickiness is kept after cloning.\n\t\tthis.position.stickiness = 'toNone';\n\n\t\t/**\n\t\t * Flag indicating whether all consecutive characters with the same attributes should be\n\t\t * returned as one {@link module:engine/model/textproxy~TextProxy} (`true`) or one by one (`false`).\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#singleCharacters\n\t\t */\n\t\tthis.singleCharacters = !!options.singleCharacters;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should enter elements or not. If the iterator is shallow child nodes of any\n\t\t * iterated node will not be returned along with `elementEnd` tag.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#shallow\n\t\t */\n\t\tthis.shallow = !!options.shallow;\n\n\t\t/**\n\t\t * Flag indicating whether iterator should ignore `elementEnd` tags. If the option is true walker will not\n\t\t * return a parent node of the start position. If this option is `true` each {@link module:engine/model/element~Element} will\n\t\t * be returned once, while if the option is `false` they might be returned twice:\n\t\t * for `'elementStart'` and `'elementEnd'`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} module:engine/model/treewalker~TreeWalker#ignoreElementEnd\n\t\t */\n\t\tthis.ignoreElementEnd = !!options.ignoreElementEnd;\n\n\t\t/**\n\t\t * Start boundary cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element} module:engine/model/treewalker~TreeWalker#_boundaryStartParent\n\t\t */\n\t\tthis._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n\n\t\t/**\n\t\t * End boundary cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element} module:engine/model/treewalker~TreeWalker#_boundaryEndParent\n\t\t */\n\t\tthis._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n\n\t\t/**\n\t\t * Parent of the most recently visited node. Cached for optimization purposes.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t\t * module:engine/model/treewalker~TreeWalker#_visitedParent\n\t\t */\n\t\tthis._visitedParent = this.position.parent;\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n\t *\n\t * For example:\n\t *\n\t * \t\twalker.skip( value => value.type == 'text' ); // <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n\t * \t\twalker.skip( () => true ); // Move the position to the end: <paragraph>[]foo</paragraph> -> <paragraph>foo</paragraph>[]\n\t * \t\twalker.skip( () => false ); // Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t */\n\tskip( skip ) {\n\t\tlet done, value, prevPosition, prevVisitedParent;\n\n\t\tdo {\n\t\t\tprevPosition = this.position;\n\t\t\tprevVisitedParent = this._visitedParent;\n\n\t\t\t( { done, value } = this.next() );\n\t\t} while ( !done && skip( value ) );\n\n\t\tif ( !done ) {\n\t\t\tthis.position = prevPosition;\n\t\t\tthis._visitedParent = prevVisitedParent;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the next tree walker's value.\n\t *\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} Next tree walker's value.\n\t */\n\tnext() {\n\t\tif ( this.direction == 'forward' ) {\n\t\t\treturn this._next();\n\t\t} else {\n\t\t\treturn this._previous();\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step forward in model. Moves the {@link #position} to the next position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_next() {\n\t\tconst previousPosition = this.position;\n\t\tconst position = this.position.clone();\n\t\tconst parent = this._visitedParent;\n\n\t\t// We are at the end of the root.\n\t\tif ( parent.parent === null && position.offset === parent.maxOffset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\tconst node = position.textNode ? position.textNode : position.nodeAfter;\n\n\t\tif ( node instanceof Element ) {\n\t\t\tif ( !this.shallow ) {\n\t\t\t\t// Manual operations on path internals for optimization purposes. Here and in the rest of the method.\n\t\t\t\tposition.path.push( 0 );\n\t\t\t\tthis._visitedParent = node;\n\t\t\t} else {\n\t\t\t\tposition.offset++;\n\t\t\t}\n\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t} else if ( node instanceof Text ) {\n\t\t\tlet charactersCount;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tcharactersCount = 1;\n\t\t\t} else {\n\t\t\t\tlet offset = node.endOffset;\n\n\t\t\t\tif ( this._boundaryEndParent == parent && this.boundaries.end.offset < offset ) {\n\t\t\t\t\toffset = this.boundaries.end.offset;\n\t\t\t\t}\n\n\t\t\t\tcharactersCount = offset - position.offset;\n\t\t\t}\n\n\t\t\tconst offsetInTextNode = position.offset - node.startOffset;\n\t\t\tconst item = new TextProxy( node, offsetInTextNode, charactersCount );\n\n\t\t\tposition.offset += charactersCount;\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the end of current `parent`.\n\t\t\tposition.path.pop();\n\t\t\tposition.offset++;\n\t\t\tthis.position = position;\n\t\t\tthis._visitedParent = parent.parent;\n\n\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\treturn this._next();\n\t\t\t} else {\n\t\t\t\treturn formatReturnValue( 'elementEnd', parent, previousPosition, position );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Makes a step backward in model. Moves the {@link #position} to the previous position and returns the encountered value.\n\t *\n\t * @private\n\t * @returns {Object}\n\t * @returns {Boolean} return.done True if iterator is done.\n\t * @returns {module:engine/model/treewalker~TreeWalkerValue} return.value Information about taken step.\n\t */\n\t_previous() {\n\t\tconst previousPosition = this.position;\n\t\tconst position = this.position.clone();\n\t\tconst parent = this._visitedParent;\n\n\t\t// We are at the beginning of the root.\n\t\tif ( parent.parent === null && position.offset === 0 ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// We reached the walker boundary.\n\t\tif ( parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Get node just before current position\n\t\tconst node = position.textNode ? position.textNode : position.nodeBefore;\n\n\t\tif ( node instanceof Element ) {\n\t\t\tposition.offset--;\n\n\t\t\tif ( !this.shallow ) {\n\t\t\t\tposition.path.push( node.maxOffset );\n\t\t\t\tthis.position = position;\n\t\t\t\tthis._visitedParent = node;\n\n\t\t\t\tif ( this.ignoreElementEnd ) {\n\t\t\t\t\treturn this._previous();\n\t\t\t\t} else {\n\t\t\t\t\treturn formatReturnValue( 'elementEnd', node, previousPosition, position );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.position = position;\n\n\t\t\t\treturn formatReturnValue( 'elementStart', node, previousPosition, position, 1 );\n\t\t\t}\n\t\t} else if ( node instanceof Text ) {\n\t\t\tlet charactersCount;\n\n\t\t\tif ( this.singleCharacters ) {\n\t\t\t\tcharactersCount = 1;\n\t\t\t} else {\n\t\t\t\tlet offset = node.startOffset;\n\n\t\t\t\tif ( this._boundaryStartParent == parent && this.boundaries.start.offset > offset ) {\n\t\t\t\t\toffset = this.boundaries.start.offset;\n\t\t\t\t}\n\n\t\t\t\tcharactersCount = position.offset - offset;\n\t\t\t}\n\n\t\t\tconst offsetInTextNode = position.offset - node.startOffset;\n\t\t\tconst item = new TextProxy( node, offsetInTextNode - charactersCount, charactersCount );\n\n\t\t\tposition.offset -= charactersCount;\n\t\t\tthis.position = position;\n\n\t\t\treturn formatReturnValue( 'text', item, previousPosition, position, charactersCount );\n\t\t} else {\n\t\t\t// `node` is not set, we reached the beginning of current `parent`.\n\t\t\tposition.path.pop();\n\t\t\tthis.position = position;\n\t\t\tthis._visitedParent = parent.parent;\n\n\t\t\treturn formatReturnValue( 'elementStart', parent, previousPosition, position, 1 );\n\t\t}\n\t}\n}\n\nfunction formatReturnValue( type, item, previousPosition, nextPosition, length ) {\n\treturn {\n\t\tdone: false,\n\t\tvalue: {\n\t\t\ttype,\n\t\t\titem,\n\t\t\tpreviousPosition,\n\t\t\tnextPosition,\n\t\t\tlength\n\t\t}\n\t};\n}\n\n/**\n * Type of the step made by {@link module:engine/model/treewalker~TreeWalker}.\n * Possible values: `'elementStart'` if walker is at the beginning of a node, `'elementEnd'` if walker is at the end of node,\n * `'character'` if walker traversed over a character, or `'text'` if walker traversed over multiple characters (available in\n * character merging mode, see {@link module:engine/model/treewalker~TreeWalker#constructor}).\n *\n * @typedef {'elementStart'|'elementEnd'|'character'|'text'} module:engine/model/treewalker~TreeWalkerValueType\n */\n\n/**\n * Object returned by {@link module:engine/model/treewalker~TreeWalker} when traversing tree model.\n *\n * @typedef {Object} module:engine/model/treewalker~TreeWalkerValue\n * @property {module:engine/model/treewalker~TreeWalkerValueType} type\n * @property {module:engine/model/item~Item} item Item between old and new positions of {@link module:engine/model/treewalker~TreeWalker}.\n * @property {module:engine/model/position~Position} previousPosition Previous position of the iterator.\n * * Forward iteration: For `'elementEnd'` it is the last position inside the element. For all other types it is the\n * position before the item.\n * * Backward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after item.\n * @property {module:engine/model/position~Position} nextPosition Next position of the iterator.\n * * Forward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after the item.\n * * Backward iteration: For `'elementEnd'` it is last position inside element. For all other types it is the position\n * before the item.\n * @property {Number} [length] Length of the item. For `'elementStart'` and `'character'` it is 1. For `'text'` it is\n * the length of the text. For `'elementEnd'` it is `undefined`.\n */\n\n/**\n * Tree walking directions.\n *\n * @typedef {'forward'|'backward'} module:engine/view/treewalker~TreeWalkerDirection\n */\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/position\n */\n\nimport TreeWalker from './treewalker';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Text from './text';\nimport { last } from 'lodash-es';\n\n/**\n * Represents a position in the model tree.\n *\n * A position is represented by its {@link module:engine/model/position~Position#root} and\n * a {@link module:engine/model/position~Position#path} in that root.\n *\n * You can create position instances via its constructor or the `createPosition*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n *\n * **Note:** Position is based on offsets, not indexes. This means that a position between two text nodes\n * `foo` and `bar` has offset `3`, not `1`. See {@link module:engine/model/position~Position#path} for more information.\n *\n * Since a position in the model is represented by a {@link module:engine/model/position~Position#root position root} and\n * {@link module:engine/model/position~Position#path position path} it is possible to create positions placed in non-existing places.\n * This requirement is important for operational transformation algorithms.\n *\n * Also, {@link module:engine/model/operation/operation~Operation operations}\n * kept in the {@link module:engine/model/document~Document#history document history}\n * are storing positions (and ranges) which were correct when those operations were applied, but may not be correct\n * after the document has changed.\n *\n * When changes are applied to the model, it may also happen that {@link module:engine/model/position~Position#parent position parent}\n * will change even if position path has not changed. Keep in mind, that if a position leads to non-existing element,\n * {@link module:engine/model/position~Position#parent} and some other properties and methods will throw errors.\n *\n * In most cases, position with wrong path is caused by an error in code, but it is sometimes needed, as described above.\n */\nexport default class Position {\n\t/**\n\t * Creates a position.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t */\n\tconstructor( root, path, stickiness = 'toNone' ) {\n\t\tif ( !root.is( 'element' ) && !root.is( 'documentFragment' ) ) {\n\t\t\t/**\n\t\t\t * Position root is invalid.\n\t\t\t *\n\t\t\t * Positions can only be anchored in elements or document fragments.\n\t\t\t *\n\t\t\t * @error model-position-root-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-position-root-invalid: Position root invalid.' );\n\t\t}\n\n\t\tif ( !( path instanceof Array ) || path.length === 0 ) {\n\t\t\t/**\n\t\t\t * Position path must be an array with at least one item.\n\t\t\t *\n\t\t\t * @error model-position-path-incorrect\n\t\t\t * @param path\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-position-path-incorrect: Position path must be an array with at least one item.', { path } );\n\t\t}\n\n\t\t// Normalize the root and path (if element was passed).\n\t\tpath = root.getPath().concat( path );\n\t\troot = root.root;\n\n\t\t/**\n\t\t * Root of the position path.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t\t * module:engine/model/position~Position#root\n\t\t */\n\t\tthis.root = root;\n\n\t\t/**\n\t\t * Position of the node in the tree. **Path contains offsets, not indexes.**\n\t\t *\n\t\t * Position can be placed before, after or in a {@link module:engine/model/node~Node node} if that node has\n\t\t * {@link module:engine/model/node~Node#offsetSize} greater than `1`. Items in position path are\n\t\t * {@link module:engine/model/node~Node#startOffset starting offsets} of position ancestors, starting from direct root children,\n\t\t * down to the position offset in it's parent.\n\t\t *\n\t\t *\t\t ROOT\n\t\t *\t\t  |- P            before: [ 0 ]         after: [ 1 ]\n\t\t *\t\t  |- UL           before: [ 1 ]         after: [ 2 ]\n\t\t *\t\t     |- LI        before: [ 1, 0 ]      after: [ 1, 1 ]\n\t\t *\t\t     |  |- foo    before: [ 1, 0, 0 ]   after: [ 1, 0, 3 ]\n\t\t *\t\t     |- LI        before: [ 1, 1 ]      after: [ 1, 2 ]\n\t\t *\t\t        |- bar    before: [ 1, 1, 0 ]   after: [ 1, 1, 3 ]\n\t\t *\n\t\t * `foo` and `bar` are representing {@link module:engine/model/text~Text text nodes}. Since text nodes has offset size\n\t\t * greater than `1` you can place position offset between their start and end:\n\t\t *\n\t\t *\t\t ROOT\n\t\t *\t\t  |- P\n\t\t *\t\t  |- UL\n\t\t *\t\t     |- LI\n\t\t *\t\t     |  |- f^o|o  ^ has path: [ 1, 0, 1 ]   | has path: [ 1, 0, 2 ]\n\t\t *\t\t     |- LI\n\t\t *\t\t        |- b^a|r  ^ has path: [ 1, 1, 1 ]   | has path: [ 1, 1, 2 ]\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<Number>} module:engine/model/position~Position#path\n\t\t */\n\t\tthis.path = path;\n\n\t\t/**\n\t\t * Position stickiness. See {@link module:engine/model/position~PositionStickiness}.\n\t\t *\n\t\t * @member {module:engine/model/position~PositionStickiness} module:engine/model/position~Position#stickiness\n\t\t */\n\t\tthis.stickiness = stickiness;\n\t}\n\n\t/**\n\t * Offset at which this position is located in its {@link module:engine/model/position~Position#parent parent}. It is equal\n\t * to the last item in position {@link module:engine/model/position~Position#path path}.\n\t *\n\t * @type {Number}\n\t */\n\tget offset() {\n\t\treturn last( this.path );\n\t}\n\n\t/**\n\t * @param {Number} newOffset\n\t */\n\tset offset( newOffset ) {\n\t\tthis.path[ this.path.length - 1 ] = newOffset;\n\t}\n\n\t/**\n\t * Parent element of this position.\n\t *\n\t * Keep in mind that `parent` value is calculated when the property is accessed.\n\t * If {@link module:engine/model/position~Position#path position path}\n\t * leads to a non-existing element, `parent` property will throw error.\n\t *\n\t * Also it is a good idea to cache `parent` property if it is used frequently in an algorithm (i.e. in a long loop).\n\t *\n\t * @readonly\n\t * @type {module:engine/model/element~Element}\n\t */\n\tget parent() {\n\t\tlet parent = this.root;\n\n\t\tfor ( let i = 0; i < this.path.length - 1; i++ ) {\n\t\t\tparent = parent.getChild( parent.offsetToIndex( this.path[ i ] ) );\n\t\t}\n\n\t\treturn parent;\n\t}\n\n\t/**\n\t * Position {@link module:engine/model/position~Position#offset offset} converted to an index in position's parent node. It is\n\t * equal to the {@link module:engine/model/node~Node#index index} of a node after this position. If position is placed\n\t * in text node, position index is equal to the index of that text node.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget index() {\n\t\treturn this.parent.offsetToIndex( this.offset );\n\t}\n\n\t/**\n\t * Returns {@link module:engine/model/text~Text text node} instance in which this position is placed or `null` if this\n\t * position is not in a text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/text~Text|null}\n\t */\n\tget textNode() {\n\t\tconst node = this.parent.getChild( this.index );\n\n\t\treturn ( node instanceof Text && node.startOffset < this.offset ) ? node : null;\n\t}\n\n\t/**\n\t * Node directly after this position or `null` if this position is in text node.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/node~Node|null}\n\t */\n\tget nodeAfter() {\n\t\treturn this.textNode === null ? this.parent.getChild( this.index ) : null;\n\t}\n\n\t/**\n\t * Node directly before this position or `null` if this position is in text node.\n\t *\n\t * @readonly\n\t * @type {Node}\n\t */\n\tget nodeBefore() {\n\t\treturn this.textNode === null ? this.parent.getChild( this.index - 1 ) : null;\n\t}\n\n\t/**\n\t * Is `true` if position is at the beginning of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtStart() {\n\t\treturn this.offset === 0;\n\t}\n\n\t/**\n\t * Is `true` if position is at the end of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isAtEnd() {\n\t\treturn this.offset == this.parent.maxOffset;\n\t}\n\n\t/**\n\t * Checks whether this position is before or after given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {module:engine/model/position~PositionRelation}\n\t */\n\tcompareWith( otherPosition ) {\n\t\tif ( this.root != otherPosition.root ) {\n\t\t\treturn 'different';\n\t\t}\n\n\t\tconst result = compareArrays( this.path, otherPosition.path );\n\n\t\tswitch ( result ) {\n\t\t\tcase 'same':\n\t\t\t\treturn 'same';\n\n\t\t\tcase 'prefix':\n\t\t\t\treturn 'before';\n\n\t\t\tcase 'extension':\n\t\t\t\treturn 'after';\n\n\t\t\tdefault:\n\t\t\t\treturn this.path[ result ] < otherPosition.path[ result ] ? 'before' : 'after';\n\t\t}\n\t}\n\n\t/**\n\t * Gets the farthest position which matches the callback using\n\t * {@link module:engine/model/treewalker~TreeWalker TreeWalker}.\n\t *\n\t * For example:\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text' );\n\t * \t\t// <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n\t *\n\t * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } );\n\t * \t\t// <paragraph>foo[]</paragraph> -> <paragraph>[]foo</paragraph>\n\t *\n\t * \t\tgetLastMatchingPosition( value => false );\n\t * \t\t// Do not move the position.\n\t *\n\t * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n\t * return `true` if the value should be skipped or `false` if not.\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t *\n\t * @returns {module:engine/model/position~Position} The position after the last item which matches the `skip` callback test.\n\t */\n\tgetLastMatchingPosition( skip, options = {} ) {\n\t\toptions.startPosition = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\t\ttreeWalker.skip( skip );\n\n\t\treturn treeWalker.position;\n\t}\n\n\t/**\n\t * Returns a path to this position's parent. Parent path is equal to position {@link module:engine/model/position~Position#path path}\n\t * but without the last item.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @returns {Array.<Number>} Path to the parent.\n\t */\n\tgetParentPath() {\n\t\treturn this.path.slice( 0, -1 );\n\t}\n\n\t/**\n\t * Returns ancestors array of this position, that is this position's parent and its ancestors.\n\t *\n\t * @returns {Array.<module:engine/model/item~Item>} Array with ancestors.\n\t */\n\tgetAncestors() {\n\t\tif ( this.parent.is( 'documentFragment' ) ) {\n\t\t\treturn [ this.parent ];\n\t\t} else {\n\t\t\treturn this.parent.getAncestors( { includeSelf: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the slice of two position {@link #path paths} which is identical. The {@link #root roots}\n\t * of these two paths must be identical.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} position The second position.\n\t * @returns {Array.<Number>} The common path.\n\t */\n\tgetCommonPath( position ) {\n\t\tif ( this.root != position.root ) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// We find on which tree-level start and end have the lowest common ancestor\n\t\tconst cmp = compareArrays( this.path, position.path );\n\t\t// If comparison returned string it means that arrays are same.\n\t\tconst diffAt = ( typeof cmp == 'string' ) ? Math.min( this.path.length, position.path.length ) : cmp;\n\n\t\treturn this.path.slice( 0, diffAt );\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of both positions. The {@link #root roots} of these two positions must be identical.\n\t *\n\t * @param {module:engine/model/position~Position} position The second position.\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor( position ) {\n\t\tconst ancestorsA = this.getAncestors();\n\t\tconst ancestorsB = position.getAncestors();\n\n\t\tlet i = 0;\n\n\t\twhile ( ancestorsA[ i ] == ancestorsB[ i ] && ancestorsA[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i === 0 ? null : ancestorsA[ i - 1 ];\n\t}\n\n\t/**\n\t * Returns a new instance of `Position`, that has same {@link #parent parent} but it's offset\n\t * is shifted by `shift` value (can be a negative value).\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {Number} shift Offset shift. Can be a negative value.\n\t * @returns {module:engine/model/position~Position} Shifted position.\n\t */\n\tgetShiftedBy( shift ) {\n\t\tconst shifted = this.clone();\n\n\t\tconst offset = shifted.offset + shift;\n\t\tshifted.offset = offset < 0 ? 0 : offset;\n\n\t\treturn shifted;\n\t}\n\n\t/**\n\t * Checks whether this position is after given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @see module:engine/model/position~Position#isBefore\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if this position is after given position.\n\t */\n\tisAfter( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'after';\n\t}\n\n\t/**\n\t * Checks whether this position is before given position.\n\t *\n\t * **Note:** watch out when using negation of the value returned by this method, because the negation will also\n\t * be `true` if positions are in different roots and you might not expect this. You should probably use\n\t * `a.isAfter( b ) || a.isEqual( b )` or `!a.isBefore( p ) && a.root == b.root` in most scenarios. If your\n\t * condition uses multiple `isAfter` and `isBefore` checks, build them so they do not use negated values, i.e.:\n\t *\n\t *\t\tif ( a.isBefore( b ) && c.isAfter( d ) ) {\n\t *\t\t\t// do A.\n\t *\t\t} else {\n\t *\t\t\t// do B.\n\t *\t\t}\n\t *\n\t * or, if you have only one if-branch:\n\t *\n\t *\t\tif ( !( a.isBefore( b ) && c.isAfter( d ) ) {\n\t *\t\t\t// do B.\n\t *\t\t}\n\t *\n\t * rather than:\n\t *\n\t *\t\tif ( !a.isBefore( b ) || && !c.isAfter( d ) ) {\n\t *\t\t\t// do B.\n\t *\t\t} else {\n\t *\t\t\t// do A.\n\t *\t\t}\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if this position is before given position.\n\t */\n\tisBefore( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'before';\n\t}\n\n\t/**\n\t * Checks whether this position is equal to given position.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions are same.\n\t */\n\tisEqual( otherPosition ) {\n\t\treturn this.compareWith( otherPosition ) == 'same';\n\t}\n\n\t/**\n\t * Checks whether this position is touching given position. Positions touch when there are no text nodes\n\t * or empty nodes in a range between them. Technically, those positions are not equal but in many cases\n\t * they are very similar or even indistinguishable.\n\t *\n\t * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n\t * @returns {Boolean} True if positions touch.\n\t */\n\tisTouching( otherPosition ) {\n\t\tlet left = null;\n\t\tlet right = null;\n\t\tconst compare = this.compareWith( otherPosition );\n\n\t\tswitch ( compare ) {\n\t\t\tcase 'same':\n\t\t\t\treturn true;\n\n\t\t\tcase 'before':\n\t\t\t\tleft = Position._createAt( this );\n\t\t\t\tright = Position._createAt( otherPosition );\n\t\t\t\tbreak;\n\n\t\t\tcase 'after':\n\t\t\t\tleft = Position._createAt( otherPosition );\n\t\t\t\tright = Position._createAt( this );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\n\t\t// Cached for optimization purposes.\n\t\tlet leftParent = left.parent;\n\n\t\twhile ( left.path.length + right.path.length ) {\n\t\t\tif ( left.isEqual( right ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ( left.path.length > right.path.length ) {\n\t\t\t\tif ( left.offset !== leftParent.maxOffset ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tleft.path = left.path.slice( 0, -1 );\n\t\t\t\tleftParent = leftParent.parent;\n\t\t\t\tleft.offset++;\n\t\t\t} else {\n\t\t\t\tif ( right.offset !== 0 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tright.path = right.path.slice( 0, -1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two positions are in the same parent.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/position~Position} position Position to compare with.\n\t * @returns {Boolean} `true` if positions have the same parent, `false` otherwise.\n\t */\n\thasSameParentAs( position ) {\n\t\tif ( this.root !== position.root ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst thisParentPath = this.getParentPath();\n\t\tconst posParentPath = position.getParentPath();\n\n\t\treturn compareArrays( thisParentPath, posParentPath ) == 'same';\n\t}\n\n\t/**\n\t * Returns a copy of this position that is transformed by given `operation`.\n\t *\n\t * The new position's parameters are updated accordingly to the effect of the `operation`.\n\t *\n\t * For example, if `n` nodes are inserted before the position, the returned position {@link ~Position#offset} will be\n\t * increased by `n`. If the position was in a merged element, it will be accordingly moved to the new element, etc.\n\t *\n\t * This method is safe to use it on non-existing positions (for example during operational transformation).\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to transform by.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\tgetTransformedByOperation( operation ) {\n\t\tlet result;\n\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert':\n\t\t\t\tresult = this._getTransformedByInsertOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'move':\n\t\t\tcase 'remove':\n\t\t\tcase 'reinsert':\n\t\t\t\tresult = this._getTransformedByMoveOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'split':\n\t\t\t\tresult = this._getTransformedBySplitOperation( operation );\n\t\t\t\tbreak;\n\t\t\tcase 'merge':\n\t\t\t\tresult = this._getTransformedByMergeOperation( operation );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresult = Position._createAt( this );\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by an insert operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/insertoperation~InsertOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByInsertOperation( operation ) {\n\t\treturn this._getTransformedByInsertion( operation.position, operation.howMany );\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by a move operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/moveoperation~MoveOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByMoveOperation( operation ) {\n\t\treturn this._getTransformedByMove( operation.sourcePosition, operation.targetPosition, operation.howMany );\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by a split operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/splitoperation~SplitOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedBySplitOperation( operation ) {\n\t\tconst movedRange = operation.movedRange;\n\n\t\tconst isContained = movedRange.containsPosition( this ) ||\n\t\t\t( movedRange.start.isEqual( this ) && this.stickiness == 'toNext' );\n\n\t\tif ( isContained ) {\n\t\t\treturn this._getCombined( operation.splitPosition, operation.moveTargetPosition );\n\t\t} else {\n\t\t\tif ( operation.graveyardPosition ) {\n\t\t\t\treturn this._getTransformedByMove( operation.graveyardPosition, operation.insertionPosition, 1 );\n\t\t\t} else {\n\t\t\t\treturn this._getTransformedByInsertion( operation.insertionPosition, 1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of this position transformed by merge operation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/mergeoperation~MergeOperation} operation\n\t * @returns {module:engine/model/position~Position}\n\t */\n\t_getTransformedByMergeOperation( operation ) {\n\t\tconst movedRange = operation.movedRange;\n\t\tconst isContained = movedRange.containsPosition( this ) || movedRange.start.isEqual( this );\n\n\t\tlet pos;\n\n\t\tif ( isContained ) {\n\t\t\tpos = this._getCombined( operation.sourcePosition, operation.targetPosition );\n\n\t\t\tif ( operation.sourcePosition.isBefore( operation.targetPosition ) ) {\n\t\t\t\t// Above happens during OT when the merged element is moved before the merged-to element.\n\t\t\t\tpos = pos._getTransformedByDeletion( operation.deletionPosition, 1 );\n\t\t\t}\n\t\t} else if ( this.isEqual( operation.deletionPosition ) ) {\n\t\t\tpos = Position._createAt( operation.deletionPosition );\n\t\t} else {\n\t\t\tpos = this._getTransformedByMove( operation.deletionPosition, operation.graveyardPosition, 1 );\n\t\t}\n\n\t\treturn pos;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by removing `howMany` nodes starting from `deletePosition`.\n\t * It may happen that this position is in a removed node. If that is the case, `null` is returned instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} deletePosition Position before the first removed node.\n\t * @param {Number} howMany How many nodes are removed.\n\t * @returns {module:engine/model/position~Position|null} Transformed position or `null`.\n\t */\n\t_getTransformedByDeletion( deletePosition, howMany ) {\n\t\tconst transformed = Position._createAt( this );\n\n\t\t// This position can't be affected if deletion was in a different root.\n\t\tif ( this.root != deletePosition.root ) {\n\t\t\treturn transformed;\n\t\t}\n\n\t\tif ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'same' ) {\n\t\t\t// If nodes are removed from the node that is pointed by this position...\n\t\t\tif ( deletePosition.offset < this.offset ) {\n\t\t\t\t// And are removed from before an offset of that position...\n\t\t\t\tif ( deletePosition.offset + howMany > this.offset ) {\n\t\t\t\t\t// Position is in removed range, it's no longer in the tree.\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\t// Decrement the offset accordingly.\n\t\t\t\t\ttransformed.offset -= howMany;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( compareArrays( deletePosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\n\t\t\t// If nodes are removed from a node that is on a path to this position...\n\t\t\tconst i = deletePosition.path.length - 1;\n\n\t\t\tif ( deletePosition.offset <= this.path[ i ] ) {\n\t\t\t\t// And are removed from before next node of that path...\n\t\t\t\tif ( deletePosition.offset + howMany > this.path[ i ] ) {\n\t\t\t\t\t// If the next node of that path is removed return null\n\t\t\t\t\t// because the node containing this position got removed.\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, decrement index on that path.\n\t\t\t\t\ttransformed.path[ i ] -= howMany;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by inserting `howMany` nodes at `insertPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n\t * @param {Number} howMany How many nodes are inserted.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\t_getTransformedByInsertion( insertPosition, howMany ) {\n\t\tconst transformed = Position._createAt( this );\n\n\t\t// This position can't be affected if insertion was in a different root.\n\t\tif ( this.root != insertPosition.root ) {\n\t\t\treturn transformed;\n\t\t}\n\n\t\tif ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'same' ) {\n\t\t\t// If nodes are inserted in the node that is pointed by this position...\n\t\t\tif ( insertPosition.offset < this.offset || ( insertPosition.offset == this.offset && this.stickiness != 'toPrevious' ) ) {\n\t\t\t\t// And are inserted before an offset of that position...\n\t\t\t\t// \"Push\" this positions offset.\n\t\t\t\ttransformed.offset += howMany;\n\t\t\t}\n\t\t} else if ( compareArrays( insertPosition.getParentPath(), this.getParentPath() ) == 'prefix' ) {\n\t\t\t// If nodes are inserted in a node that is on a path to this position...\n\t\t\tconst i = insertPosition.path.length - 1;\n\n\t\t\tif ( insertPosition.offset <= this.path[ i ] ) {\n\t\t\t\t// And are inserted before next node of that path...\n\t\t\t\t// \"Push\" the index on that path.\n\t\t\t\ttransformed.path[ i ] += howMany;\n\t\t\t}\n\t\t}\n\n\t\treturn transformed;\n\t}\n\n\t/**\n\t * Returns a copy of this position that is updated by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} sourcePosition Position before the first element to move.\n\t * @param {module:engine/model/position~Position} targetPosition Position where moved elements will be inserted.\n\t * @param {Number} howMany How many consecutive nodes to move, starting from `sourcePosition`.\n\t * @returns {module:engine/model/position~Position} Transformed position.\n\t */\n\t_getTransformedByMove( sourcePosition, targetPosition, howMany ) {\n\t\t// Update target position, as it could be affected by nodes removal.\n\t\ttargetPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tif ( sourcePosition.isEqual( targetPosition ) ) {\n\t\t\t// If `targetPosition` is equal to `sourcePosition` this isn't really any move. Just return position as it is.\n\t\t\treturn Position._createAt( this );\n\t\t}\n\n\t\t// Moving a range removes nodes from their original position. We acknowledge this by proper transformation.\n\t\tconst transformed = this._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tconst isMoved = transformed === null ||\n\t\t\t( sourcePosition.isEqual( this ) && this.stickiness == 'toNext' ) ||\n\t\t\t( sourcePosition.getShiftedBy( howMany ).isEqual( this ) && this.stickiness == 'toPrevious' );\n\n\t\tif ( isMoved ) {\n\t\t\t// This position is inside moved range (or sticks to it).\n\t\t\t// In this case, we calculate a combination of this position, move source position and target position.\n\t\t\treturn this._getCombined( sourcePosition, targetPosition );\n\t\t} else {\n\t\t\t// This position is not inside a removed range.\n\t\t\t//\n\t\t\t// In next step, we simply reflect inserting `howMany` nodes, which might further affect the position.\n\t\t\treturn transformed._getTransformedByInsertion( targetPosition, howMany );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a new position that is a combination of this position and given positions.\n\t *\n\t * The combined position is a copy of this position transformed by moving a range starting at `source` position\n\t * to the `target` position. It is expected that this position is inside the moved range.\n\t *\n\t * Example:\n\t *\n\t *\t\tlet original = model.createPositionFromPath( root, [ 2, 3, 1 ] );\n\t *\t\tlet source = model.createPositionFromPath( root, [ 2, 2 ] );\n\t *\t\tlet target = model.createPositionFromPath( otherRoot, [ 1, 1, 3 ] );\n\t *\t\toriginal._getCombined( source, target ); // path is [ 1, 1, 4, 1 ], root is `otherRoot`\n\t *\n\t * Explanation:\n\t *\n\t * We have a position `[ 2, 3, 1 ]` and move some nodes from `[ 2, 2 ]` to `[ 1, 1, 3 ]`. The original position\n\t * was inside moved nodes and now should point to the new place. The moved nodes will be after\n\t * positions `[ 1, 1, 3 ]`, `[ 1, 1, 4 ]`, `[ 1, 1, 5 ]`. Since our position was in the second moved node,\n\t * the transformed position will be in a sub-tree of a node at `[ 1, 1, 4 ]`. Looking at original path, we\n\t * took care of `[ 2, 3 ]` part of it. Now we have to add the rest of the original path to the transformed path.\n\t * Finally, the transformed position will point to `[ 1, 1, 4, 1 ]`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} source Beginning of the moved range.\n\t * @param {module:engine/model/position~Position} target Position where the range is moved.\n\t * @returns {module:engine/model/position~Position} Combined position.\n\t */\n\t_getCombined( source, target ) {\n\t\tconst i = source.path.length - 1;\n\n\t\t// The first part of a path to combined position is a path to the place where nodes were moved.\n\t\tconst combined = Position._createAt( target );\n\t\tcombined.stickiness = this.stickiness;\n\n\t\t// Then we have to update the rest of the path.\n\n\t\t// Fix the offset because this position might be after `from` position and we have to reflect that.\n\t\tcombined.offset = combined.offset + this.path[ i ] - source.offset;\n\n\t\t// Then, add the rest of the path.\n\t\t// If this position is at the same level as `from` position nothing will get added.\n\t\tcombined.path = combined.path.concat( this.path.slice( i + 1 ) );\n\n\t\treturn combined;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\treturn {\n\t\t\troot: this.root.toJSON(),\n\t\t\tpath: Array.from( this.path ),\n\t\t\tstickiness: this.stickiness\n\t\t};\n\t}\n\n\t/**\n\t * Returns a new position that is equal to current position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.root, this.path, this.stickiness );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/model/position~Position position},\n\t * * parent element and offset (offset defaults to `0`),\n\t * * parent element and `'end'` (sets position at the end of that element),\n\t * * {@link module:engine/model/item~Item model item} and `'before'` or `'after'` (sets position before or after given model item).\n\t *\n\t * This method is a shortcut to other factory methods such as:\n\t *\n\t * * {@link module:engine/model/position~Position._createBefore},\n\t * * {@link module:engine/model/position~Position._createAfter}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @protected\n\t */\n\tstatic _createAt( itemOrPosition, offset ) {\n\t\tif ( itemOrPosition instanceof Position ) {\n\t\t\treturn new Position( itemOrPosition.root, itemOrPosition.path, itemOrPosition.stickiness );\n\t\t} else {\n\t\t\tconst node = itemOrPosition;\n\n\t\t\tif ( offset == 'end' ) {\n\t\t\t\toffset = node.maxOffset;\n\t\t\t} else if ( offset == 'before' ) {\n\t\t\t\treturn this._createBefore( node );\n\t\t\t} else if ( offset == 'after' ) {\n\t\t\t\treturn this._createAfter( node );\n\t\t\t} else if ( offset !== 0 && !offset ) {\n\t\t\t\t/**\n\t\t\t\t * {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}\n\t\t\t\t * requires the offset to be specified when the first parameter is a model item.\n\t\t\t\t *\n\t\t\t\t * @error model-createPositionAt-offset-required\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-createPositionAt-offset-required: ' +\n\t\t\t\t\t'Model#createPositionAt() requires the offset when the first parameter is a model item.' );\n\t\t\t}\n\n\t\t\tif ( !node.is( 'element' ) && !node.is( 'documentFragment' ) ) {\n\t\t\t\t/**\n\t\t\t\t * Position parent have to be a model element or model document fragment.\n\t\t\t\t *\n\t\t\t\t * @error model-position-parent-incorrect\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'model-position-parent-incorrect: Position parent have to be a element or document fragment.' );\n\t\t\t}\n\n\t\t\tconst path = node.getPath();\n\n\t\t\tpath.push( offset );\n\n\t\t\treturn new this( node.root, path );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new position, after given {@link module:engine/model/item~Item model item}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t * @protected\n\t */\n\tstatic _createAfter( item ) {\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position after a root element.\n\t\t\t *\n\t\t\t * @error model-position-after-root\n\t\t\t * @param {module:engine/model/item~Item} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-position-after-root: You cannot make a position after root.', { root: item } );\n\t\t}\n\n\t\treturn this._createAt( item.parent, item.endOffset );\n\t}\n\n\t/**\n\t * Creates a new position, before the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item before which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t * @protected\n\t */\n\tstatic _createBefore( item ) {\n\t\tif ( !item.parent ) {\n\t\t\t/**\n\t\t\t * You can not make a position before a root element.\n\t\t\t *\n\t\t\t * @error model-position-before-root\n\t\t\t * @param {module:engine/model/item~Item} root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-position-before-root: You cannot make a position before root.', { root: item } );\n\t\t}\n\n\t\treturn this._createAt( item.parent, item.startOffset );\n\t}\n\n\t/**\n\t * Creates a `Position` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Position`.\n\t * @param {module:engine/model/document~Document} doc Document object that will be position owner.\n\t * @returns {module:engine/model/position~Position} `Position` instance created using given plain object.\n\t */\n\tstatic fromJSON( json, doc ) {\n\t\tif ( json.root === '$graveyard' ) {\n\t\t\tconst pos = new Position( doc.graveyard, json.path );\n\t\t\tpos.stickiness = json.stickiness;\n\n\t\t\treturn pos;\n\t\t}\n\n\t\tif ( !doc.getRoot( json.root ) ) {\n\t\t\t/**\n\t\t\t * Cannot create position for document. Root with specified name does not exist.\n\t\t\t *\n\t\t\t * @error model-position-fromjson-no-root\n\t\t\t * @param {String} rootName\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-position-fromjson-no-root: Cannot create position for document. Root with specified name does not exist.',\n\t\t\t\t{ rootName: json.root }\n\t\t\t);\n\t\t}\n\n\t\tconst pos = new Position( doc.getRoot( json.root ), json.path );\n\t\tpos.stickiness = json.stickiness;\n\n\t\treturn pos;\n\t}\n}\n\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/model/position~PositionRelation\n */\n\n/**\n * Represents how position is \"sticking\" with neighbour nodes. Used to define how position should be transformed (moved)\n * in edge cases. Possible values: `'toNone'`, `'toNext'`, `'toPrevious'`.\n *\n * Examples:\n *\n *\t\tInsert. Position is at | and nodes are inserted at the same position, marked as ^:\n *\n *\t\t- sticks to none:           <p>f^|oo</p>  ->  <p>fbar|oo</p>\n *\t\t- sticks to next node:      <p>f^|oo</p>  ->  <p>fbar|oo</p>\n *\t\t- sticks to previous node:  <p>f|^oo</p>  ->  <p>f|baroo</p>\n *\n *\n *\t\tMove. Position is at | and range [oo] is moved to position ^:\n *\n *\t\t- sticks to none:           <p>f|[oo]</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\t\t- sticks to none:           <p>f[oo]|</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\n *\t\t- sticks to next node:      <p>f|[oo]</p><p>b^ar</p>  ->  <p>f</p><p>b|ooar</p>\n *\t\t- sticks to next node:      <p>f[oo]|</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\n *\t\t- sticks to previous node:  <p>f|[oo]</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\t\t- sticks to previous node:  <p>f[oo]|</p><p>b^ar</p>  ->  <p>f</p><p>boo|ar</p>\n *\n * @typedef {String} module:engine/model/position~PositionStickiness\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/range\n */\n\nimport Position from './position';\nimport TreeWalker from './treewalker';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n\n/**\n * Represents a range in the model tree.\n *\n * A range is defined by its {@link module:engine/model/range~Range#start} and {@link module:engine/model/range~Range#end}\n * positions.\n *\n * You can create range instances via its constructor or the `createRange*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n */\nexport default class Range {\n\t/**\n\t * Creates a range spanning from `start` position to `end` position.\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t */\n\tconstructor( start, end = null ) {\n\t\t/**\n\t\t * Start position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position}\n\t\t */\n\t\tthis.start = Position._createAt( start );\n\n\t\t/**\n\t\t * End position.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position}\n\t\t */\n\t\tthis.end = end ? Position._createAt( end ) : Position._createAt( start );\n\n\t\t// If the range is collapsed, treat in a similar way as a position and set its boundaries stickiness to 'toNone'.\n\t\t// In other case, make the boundaries stick to the \"inside\" of the range.\n\t\tthis.start.stickiness = this.isCollapsed ? 'toNone' : 'toNext';\n\t\tthis.end.stickiness = this.isCollapsed ? 'toNone' : 'toPrevious';\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n\t * them together with additional information like length or {@link module:engine/model/position~Position positions},\n\t * grouped as {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t * It iterates over all {@link module:engine/model/textproxy~TextProxy text contents} that are inside the range\n\t * and all the {@link module:engine/model/element~Element}s that are entered into when iterating over this range.\n\t *\n\t * This iterator uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range\n\t * and `ignoreElementEnd` option set to `true`.\n\t *\n\t * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tyield* new TreeWalker( { boundaries: this, ignoreElementEnd: true } );\n\t}\n\n\t/**\n\t * Returns whether the range is collapsed, that is if {@link #start} and\n\t * {@link #end} positions are equal.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this.start.isEqual( this.end );\n\t}\n\n\t/**\n\t * Returns whether this range is flat, that is if {@link #start} position and\n\t * {@link #end} position are in the same {@link module:engine/model/position~Position#parent}.\n\t *\n\t * @type {Boolean}\n\t */\n\tget isFlat() {\n\t\tconst startParentPath = this.start.getParentPath();\n\t\tconst endParentPath = this.end.getParentPath();\n\n\t\treturn compareArrays( startParentPath, endParentPath ) == 'same';\n\t}\n\n\t/**\n\t * Range root element.\n\t *\n\t * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this.start.root;\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link module:engine/model/position~Position position}.\n\t *\n\t * @param {module:engine/model/position~Position} position Position to check.\n\t * @returns {Boolean} `true` if given {@link module:engine/model/position~Position position} is contained\n\t * in this range,`false` otherwise.\n\t */\n\tcontainsPosition( position ) {\n\t\treturn position.isAfter( this.start ) && position.isBefore( this.end );\n\t}\n\n\t/**\n\t * Checks whether this range contains given {@link ~Range range}.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to check.\n\t * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n\t * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n\t * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n\t * @returns {Boolean} `true` if given {@link ~Range range} boundaries are contained by this range, `false` otherwise.\n\t */\n\tcontainsRange( otherRange, loose = false ) {\n\t\tif ( otherRange.isCollapsed ) {\n\t\t\tloose = false;\n\t\t}\n\n\t\tconst containsStart = this.containsPosition( otherRange.start ) || ( loose && this.start.isEqual( otherRange.start ) );\n\t\tconst containsEnd = this.containsPosition( otherRange.end ) || ( loose && this.end.isEqual( otherRange.end ) );\n\n\t\treturn containsStart && containsEnd;\n\t}\n\n\t/**\n\t * Checks whether given {@link module:engine/model/item~Item} is inside this range.\n\t *\n\t * @param {module:engine/model/item~Item} item Model item to check.\n\t */\n\tcontainsItem( item ) {\n\t\tconst pos = Position._createBefore( item );\n\n\t\treturn this.containsPosition( pos ) || this.start.isEqual( pos );\n\t}\n\n\t/**\n\t * Two ranges are equal if their {@link #start} and {@link #end} positions are equal.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges are equal, `false` otherwise.\n\t */\n\tisEqual( otherRange ) {\n\t\treturn this.start.isEqual( otherRange.start ) && this.end.isEqual( otherRange.end );\n\t}\n\n\t/**\n\t * Checks and returns whether this range intersects with given range.\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to compare with.\n\t * @returns {Boolean} `true` if ranges intersect, `false` otherwise.\n\t */\n\tisIntersecting( otherRange ) {\n\t\treturn this.start.isBefore( otherRange.end ) && this.end.isAfter( otherRange.start );\n\t}\n\n\t/**\n\t * Computes which part(s) of this {@link ~Range range} is not a part of given {@link ~Range range}.\n\t * Returned array contains zero, one or two {@link ~Range ranges}.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n\t *\t\tlet transformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has no ranges because `otherRange` contains `range`\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 3 ] ) );\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has one range: from [ 3 ] to [ 4, 0, 1 ]\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 4 ] ) );\n\t *\t\ttransformed = range.getDifference( otherRange );\n\t *\t\t// transformed array has two ranges: from [ 2, 7 ] to [ 3 ] and from [ 4 ] to [ 4, 0, 1 ]\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to differentiate against.\n\t * @returns {Array.<module:engine/model/range~Range>} The difference between ranges.\n\t */\n\tgetDifference( otherRange ) {\n\t\tconst ranges = [];\n\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect.\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the start to the middle of this range.\n\t\t\t\tranges.push( new Range( this.start, otherRange.start ) );\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// add shrunken range - from the middle of this range to the end.\n\t\t\t\tranges.push( new Range( otherRange.end, this.end ) );\n\t\t\t}\n\t\t} else {\n\t\t\t// Ranges do not intersect, return the original range.\n\t\t\tranges.push( new Range( this.start, this.end ) );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an intersection of this {@link ~Range range} and given {@link ~Range range}.\n\t * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 2 ] ) );\n\t *\t\tlet transformed = range.getIntersection( otherRange ); // null - ranges have no common part\n\t *\n\t *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n\t *\t\ttransformed = range.getIntersection( otherRange ); // range from [ 3 ] to [ 4, 0, 1 ]\n\t *\n\t * @param {module:engine/model/range~Range} otherRange Range to check for intersection.\n\t * @returns {module:engine/model/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\n\t */\n\tgetIntersection( otherRange ) {\n\t\tif ( this.isIntersecting( otherRange ) ) {\n\t\t\t// Ranges intersect, so a common range will be returned.\n\t\t\t// At most, it will be same as this range.\n\t\t\tlet commonRangeStart = this.start;\n\t\t\tlet commonRangeEnd = this.end;\n\n\t\t\tif ( this.containsPosition( otherRange.start ) ) {\n\t\t\t\t// Given range start is inside this range. This means thaNt we have to\n\t\t\t\t// shrink common range to the given range start.\n\t\t\t\tcommonRangeStart = otherRange.start;\n\t\t\t}\n\n\t\t\tif ( this.containsPosition( otherRange.end ) ) {\n\t\t\t\t// Given range end is inside this range. This means that we have to\n\t\t\t\t// shrink common range to the given range end.\n\t\t\t\tcommonRangeEnd = otherRange.end;\n\t\t\t}\n\n\t\t\treturn new Range( commonRangeStart, commonRangeEnd );\n\t\t}\n\n\t\t// Ranges do not intersect, so they do not have common part.\n\t\treturn null;\n\t}\n\n\t/**\n\t * Computes and returns the smallest set of {@link #isFlat flat} ranges, that covers this range in whole.\n\t *\n\t * See an example of a model structure (`[` and `]` are range boundaries):\n\t *\n\t *\t\troot                                                            root\n\t *\t\t |- element DIV                         DIV             P2              P3             DIV\n\t *\t\t |   |- element H                   H        P1        f o o           b a r       H         P4\n\t *\t\t |   |   |- \"fir[st\"             fir[st     lorem                               se]cond     ipsum\n\t *\t\t |   |- element P1\n\t *\t\t |   |   |- \"lorem\"                                              ||\n\t *\t\t |- element P2                                                   ||\n\t *\t\t |   |- \"foo\"                                                    VV\n\t *\t\t |- element P3\n\t *\t\t |   |- \"bar\"                                                   root\n\t *\t\t |- element DIV                         DIV             [P2             P3]             DIV\n\t *\t\t |   |- element H                   H       [P1]       f o o           b a r        H         P4\n\t *\t\t |   |   |- \"se]cond\"            fir[st]    lorem                               [se]cond     ipsum\n\t *\t\t |   |- element P4\n\t *\t\t |   |   |- \"ipsum\"\n\t *\n\t * As it can be seen, letters contained in the range are: `stloremfoobarse`, spread across different parents.\n\t * We are looking for minimal set of flat ranges that contains the same nodes.\n\t *\n\t * Minimal flat ranges for above range `( [ 0, 0, 3 ], [ 3, 0, 2 ] )` will be:\n\t *\n\t *\t\t( [ 0, 0, 3 ], [ 0, 0, 5 ] ) = \"st\"\n\t *\t\t( [ 0, 1 ], [ 0, 2 ] ) = element P1 (\"lorem\")\n\t *\t\t( [ 1 ], [ 3 ] ) = element P2, element P3 (\"foobar\")\n\t *\t\t( [ 3, 0, 0 ], [ 3, 0, 2 ] ) = \"se\"\n\t *\n\t * **Note:** if an {@link module:engine/model/element~Element element} is not wholly contained in this range, it won't be returned\n\t * in any of the returned flat ranges. See in the example how `H` elements at the beginning and at the end of the range\n\t * were omitted. Only their parts that were wholly in the range were returned.\n\t *\n\t * **Note:** this method is not returning flat ranges that contain no nodes.\n\t *\n\t * @returns {Array.<module:engine/model/range~Range>} Array of flat ranges covering this range.\n\t */\n\tgetMinimalFlatRanges() {\n\t\tconst ranges = [];\n\t\tconst diffAt = this.start.getCommonPath( this.end ).length;\n\n\t\tconst pos = Position._createAt( this.start );\n\t\tlet posParent = pos.parent;\n\n\t\t// Go up.\n\t\twhile ( pos.path.length > diffAt + 1 ) {\n\t\t\tconst howMany = posParent.maxOffset - pos.offset;\n\n\t\t\tif ( howMany !== 0 ) {\n\t\t\t\tranges.push( new Range( pos, pos.getShiftedBy( howMany ) ) );\n\t\t\t}\n\n\t\t\tpos.path = pos.path.slice( 0, -1 );\n\t\t\tpos.offset++;\n\t\t\tposParent = posParent.parent;\n\t\t}\n\n\t\t// Go down.\n\t\twhile ( pos.path.length <= this.end.path.length ) {\n\t\t\tconst offset = this.end.path[ pos.path.length - 1 ];\n\t\t\tconst howMany = offset - pos.offset;\n\n\t\t\tif ( howMany !== 0 ) {\n\t\t\t\tranges.push( new Range( pos, pos.getShiftedBy( howMany ) ) );\n\t\t\t}\n\n\t\t\tpos.offset = offset;\n\t\t\tpos.path.push( 0 );\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @param {module:engine/model/position~Position} [options.startPosition]\n\t * @param {Boolean} [options.singleCharacters=false]\n\t * @param {Boolean} [options.shallow=false]\n\t * @param {Boolean} [options.ignoreElementEnd=false]\n\t */\n\tgetWalker( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\treturn new TreeWalker( options );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n\t * them.\n\t *\n\t * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n\t * set to `true`. However it returns only {@link module:engine/model/item~Item model items},\n\t * not {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @method getItems\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/model/item~Item>}\n\t */\n\t* getItems( options = {} ) {\n\t\toptions.boundaries = this;\n\t\toptions.ignoreElementEnd = true;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.item;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all {@link module:engine/model/position~Position positions} that are boundaries or\n\t * contained in this range.\n\t *\n\t * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n\t * {@link module:engine/model/position~Position positions}, not {@link module:engine/model/treewalker~TreeWalkerValue}.\n\t *\n\t * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n\t * a full list of available options.\n\t *\n\t * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n\t * @returns {Iterable.<module:engine/model/position~Position>}\n\t */\n\t* getPositions( options = {} ) {\n\t\toptions.boundaries = this;\n\n\t\tconst treeWalker = new TreeWalker( options );\n\n\t\tyield treeWalker.position;\n\n\t\tfor ( const value of treeWalker ) {\n\t\t\tyield value.nextPosition;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a range that is a result of transforming this range by given `operation`.\n\t *\n\t * **Note:** transformation may break one range into multiple ranges (for example, when a part of the range is\n\t * moved to a different part of document tree). For this reason, an array is returned by this method and it\n\t * may contain one or more `Range` instances.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to transform range by.\n\t * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\n\t */\n\tgetTransformedByOperation( operation ) {\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert':\n\t\t\t\treturn this._getTransformedByInsertOperation( operation );\n\t\t\tcase 'move':\n\t\t\tcase 'remove':\n\t\t\tcase 'reinsert':\n\t\t\t\treturn this._getTransformedByMoveOperation( operation );\n\t\t\tcase 'split':\n\t\t\t\treturn [ this._getTransformedBySplitOperation( operation ) ];\n\t\t\tcase 'merge':\n\t\t\t\treturn [ this._getTransformedByMergeOperation( operation ) ];\n\t\t}\n\n\t\treturn [ new Range( this.start, this.end ) ];\n\t}\n\n\t/**\n\t * Returns a range that is a result of transforming this range by multiple `operations`.\n\t *\n\t * @see ~Range#getTransformedByOperation\n\t * @param {Iterable.<module:engine/model/operation/operation~Operation>} operations Operations to transform the range by.\n\t * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\n\t */\n\tgetTransformedByOperations( operations ) {\n\t\tconst ranges = [ new Range( this.start, this.end ) ];\n\n\t\tfor ( const operation of operations ) {\n\t\t\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t\t\tconst result = ranges[ i ].getTransformedByOperation( operation );\n\n\t\t\t\tranges.splice( i, 1, ...result );\n\t\t\t\ti += result.length - 1;\n\t\t\t}\n\t\t}\n\n\t\t// It may happen that a range is split into two, and then the part of second \"piece\" is moved into first\n\t\t// \"piece\". In this case we will have incorrect third range, which should not be included in the result --\n\t\t// because it is already included in the first \"piece\". In this loop we are looking for all such ranges that\n\t\t// are inside other ranges and we simply remove them.\n\t\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t\tconst range = ranges[ i ];\n\n\t\t\tfor ( let j = i + 1; j < ranges.length; j++ ) {\n\t\t\t\tconst next = ranges[ j ];\n\n\t\t\t\tif ( range.containsRange( next ) || next.containsRange( range ) || range.isEqual( next ) ) {\n\t\t\t\t\tranges.splice( j, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ranges;\n\t}\n\n\t/**\n\t * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n\t * which is a common ancestor of the range's both ends (in which the entire range is contained).\n\t *\n\t * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n\t */\n\tgetCommonAncestor() {\n\t\treturn this.start.getCommonAncestor( this.end );\n\t}\n\n\t/**\n\t * Converts `Range` to plain object and returns it.\n\t *\n\t * @returns {Object} `Node` converted to plain object.\n\t */\n\ttoJSON() {\n\t\treturn {\n\t\t\tstart: this.start.toJSON(),\n\t\t\tend: this.end.toJSON()\n\t\t};\n\t}\n\n\t/**\n\t * Returns a new range that is equal to current range.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.start, this.end );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by insert operation.\n\t *\n\t * One or more ranges may be returned as a result of this transformation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/insertoperation~InsertOperation} operation\n\t * @returns {Array.<module:engine/model/range~Range>}\n\t */\n\t_getTransformedByInsertOperation( operation, spread = false ) {\n\t\treturn this._getTransformedByInsertion( operation.position, operation.howMany, spread );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by move operation.\n\t *\n\t * One or more ranges may be returned as a result of this transformation.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/moveoperation~MoveOperation} operation\n\t * @returns {Array.<module:engine/model/range~Range>}\n\t */\n\t_getTransformedByMoveOperation( operation, spread = false ) {\n\t\tconst sourcePosition = operation.sourcePosition;\n\t\tconst howMany = operation.howMany;\n\t\tconst targetPosition = operation.targetPosition;\n\n\t\treturn this._getTransformedByMove( sourcePosition, targetPosition, howMany, spread );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by split operation.\n\t *\n\t * Always one range is returned. The transformation is done in a way to not break the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/splitoperation~SplitOperation} operation\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getTransformedBySplitOperation( operation ) {\n\t\tconst start = this.start._getTransformedBySplitOperation( operation );\n\t\tlet end = this.end._getTransformedBySplitOperation( operation );\n\n\t\tif ( this.end.isEqual( operation.insertionPosition ) ) {\n\t\t\tend = this.end.getShiftedBy( 1 );\n\t\t}\n\n\t\t// Below may happen when range contains graveyard element used by split operation.\n\t\tif ( start.root != end.root ) {\n\t\t\t// End position was next to the moved graveyard element and was moved with it.\n\t\t\t// Fix it by using old `end` which has proper `root`.\n\t\t\tend = this.end.getShiftedBy( -1 );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Returns a result of transforming a copy of this range by merge operation.\n\t *\n\t * Always one range is returned. The transformation is done in a way to not break the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/operation/mergeoperation~MergeOperation} operation\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getTransformedByMergeOperation( operation ) {\n\t\tlet start = this.start._getTransformedByMergeOperation( operation );\n\t\tlet end = this.end._getTransformedByMergeOperation( operation );\n\n\t\tif ( start.root != end.root ) {\n\t\t\t// This happens when the end position was next to the merged (deleted) element.\n\t\t\t// Then, the end position was moved to the graveyard root. In this case we need to fix\n\t\t\t// the range cause its boundaries would be in different roots.\n\t\t\tend = this.end.getShiftedBy( -1 );\n\t\t}\n\n\t\tif ( start.isAfter( end ) ) {\n\t\t\t// This happens in three following cases:\n\t\t\t//\n\t\t\t// Case 1: Merge operation source position is before the target position (due to some transformations, OT, etc.)\n\t\t\t//         This means that start can be moved before the end of the range.\n\t\t\t//\n\t\t\t// Before: <p>a{a</p><p>b}b</p><p>cc</p>\n\t\t\t// Merge:  <p>b}b</p><p>cca{a</p>\n\t\t\t// Fix:    <p>{b}b</p><p>ccaa</p>\n\t\t\t//\n\t\t\t// Case 2: Range start is before merged node but not directly.\n\t\t\t//         Result should include all nodes that were in the original range.\n\t\t\t//\n\t\t\t// Before: <p>aa</p>{<p>cc</p><p>b}b</p>\n\t\t\t// Merge:  <p>aab}b</p>{<p>cc</p>\n\t\t\t// Fix:    <p>aa{bb</p><p>cc</p>}\n\t\t\t//\n\t\t\t//         The range is expanded by an additional `b` letter but it is better than dropping the whole `cc` paragraph.\n\t\t\t//\n\t\t\t// Case 3: Range start is directly before merged node.\n\t\t\t//         Resulting range should include only nodes from the merged element:\n\t\t\t//\n\t\t\t// Before: <p>aa</p>{<p>b}b</p><p>cc</p>\n\t\t\t// Merge:  <p>aab}b</p>{<p>cc</p>\n\t\t\t// Fix:    <p>aa{b}b</p><p>cc</p>\n\t\t\t//\n\n\t\t\tif ( operation.sourcePosition.isBefore( operation.targetPosition ) ) {\n\t\t\t\t// Case 1.\n\t\t\t\tstart = Position._createAt( end );\n\t\t\t\tstart.offset = 0;\n\t\t\t} else {\n\t\t\t\tif ( !operation.deletionPosition.isEqual( start ) ) {\n\t\t\t\t\t// Case 2.\n\t\t\t\t\tend = operation.deletionPosition;\n\t\t\t\t}\n\n\t\t\t\t// In both case 2 and 3 start is at the end of the merge-to element.\n\t\t\t\tstart = operation.targetPosition;\n\t\t\t}\n\n\t\t\treturn new Range( start, end );\n\t\t}\n\n\t\treturn new Range( start, end );\n\t}\n\n\t/**\n\t * Returns an array containing one or two {@link ~Range ranges} that are a result of transforming this\n\t * {@link ~Range range} by inserting `howMany` nodes at `insertPosition`. Two {@link ~Range ranges} are\n\t * returned if the insertion was inside this {@link ~Range range} and `spread` is set to `true`.\n\t *\n\t * Examples:\n\t *\n\t *\t\tlet range = model.createRange(\n\t *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n\t *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n\t *\t\t);\n\t *\t\tlet transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 1 ] ), 2 );\n\t *\t\t// transformed array has one range from [ 4, 7 ] to [ 6, 0, 1 ]\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 4, 0, 0 ] ), 4 );\n\t *\t\t// transformed array has one range from [ 2, 7 ] to [ 4, 0, 5 ]\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4 );\n\t *\t\t// transformed array has one range, which is equal to original range\n\t *\n\t *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4, true );\n\t *\t\t// transformed array has two ranges: from [ 2, 7 ] to [ 3, 2 ] and from [ 3, 6 ] to [ 4, 0, 1 ]\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n\t * @param {Number} howMany How many nodes are inserted.\n\t * @param {Boolean} [spread] Flag indicating whether this {~Range range} should be spread if insertion\n\t * was inside the range. Defaults to `false`.\n\t * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\n\t */\n\t_getTransformedByInsertion( insertPosition, howMany, spread = false ) {\n\t\tif ( spread && this.containsPosition( insertPosition ) ) {\n\t\t\t// Range has to be spread. The first part is from original start to the spread point.\n\t\t\t// The other part is from spread point to the original end, but transformed by\n\t\t\t// insertion to reflect insertion changes.\n\n\t\t\treturn [\n\t\t\t\tnew Range( this.start, insertPosition ),\n\t\t\t\tnew Range(\n\t\t\t\t\tinsertPosition.getShiftedBy( howMany ),\n\t\t\t\t\tthis.end._getTransformedByInsertion( insertPosition, howMany )\n\t\t\t\t)\n\t\t\t];\n\t\t} else {\n\t\t\tconst range = new Range( this.start, this.end );\n\n\t\t\trange.start = range.start._getTransformedByInsertion( insertPosition, howMany );\n\t\t\trange.end = range.end._getTransformedByInsertion( insertPosition, howMany );\n\n\t\t\treturn [ range ];\n\t\t}\n\t}\n\n\t/**\n\t * Returns an array containing {@link ~Range ranges} that are a result of transforming this\n\t * {@link ~Range range} by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} sourcePosition Position from which nodes are moved.\n\t * @param {module:engine/model/position~Position} targetPosition Position to where nodes are moved.\n\t * @param {Number} howMany How many nodes are moved.\n\t * @param {Boolean} [spread=false] Whether the range should be spread if the move points inside the range.\n\t * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\n\t */\n\t_getTransformedByMove( sourcePosition, targetPosition, howMany, spread = false ) {\n\t\t// Special case for transforming a collapsed range. Just transform it like a position.\n\t\tif ( this.isCollapsed ) {\n\t\t\tconst newPos = this.start._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\n\t\t\treturn [ new Range( newPos ) ];\n\t\t}\n\n\t\t// Special case for transformation when a part of the range is moved towards the range.\n\t\t//\n\t\t// Examples:\n\t\t//\n\t\t// <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p></div><p>c[d</p><p>e]f</p>\n\t\t// <p>e[f</p><div><p>a]b</p><p>cd</p></div> --> <p>e[f</p><p>a]b</p><div><p>cd</p></div>\n\t\t//\n\t\t// Without this special condition, the default algorithm leaves an \"artifact\" range from one of `differenceSet` parts:\n\t\t//\n\t\t// <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p>{</div>}<p>c[d</p><p>e]f</p>\n\t\t//\n\t\t// This special case is applied only if the range is to be kept together (not spread).\n\t\tconst moveRange = Range._createFromPositionAndShift( sourcePosition, howMany );\n\t\tconst insertPosition = targetPosition._getTransformedByDeletion( sourcePosition, howMany );\n\n\t\tif ( this.containsPosition( targetPosition ) && !spread ) {\n\t\t\tif ( moveRange.containsPosition( this.start ) || moveRange.containsPosition( this.end ) ) {\n\t\t\t\tconst start = this.start._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\t\t\t\tconst end = this.end._getTransformedByMove( sourcePosition, targetPosition, howMany );\n\n\t\t\t\treturn [ new Range( start, end ) ];\n\t\t\t}\n\t\t}\n\n\t\t// Default algorithm.\n\t\tlet result;\n\n\t\tconst differenceSet = this.getDifference( moveRange );\n\t\tlet difference = null;\n\n\t\tconst common = this.getIntersection( moveRange );\n\n\t\tif ( differenceSet.length == 1 ) {\n\t\t\t// `moveRange` and this range may intersect but may be separate.\n\t\t\tdifference = new Range(\n\t\t\t\tdifferenceSet[ 0 ].start._getTransformedByDeletion( sourcePosition, howMany ),\n\t\t\t\tdifferenceSet[ 0 ].end._getTransformedByDeletion( sourcePosition, howMany )\n\t\t\t);\n\t\t} else if ( differenceSet.length == 2 ) {\n\t\t\t// `moveRange` is inside this range.\n\t\t\tdifference = new Range(\n\t\t\t\tthis.start,\n\t\t\t\tthis.end._getTransformedByDeletion( sourcePosition, howMany )\n\t\t\t);\n\t\t} // else, `moveRange` contains this range.\n\n\t\tif ( difference ) {\n\t\t\tresult = difference._getTransformedByInsertion( insertPosition, howMany, common !== null || spread );\n\t\t} else {\n\t\t\tresult = [];\n\t\t}\n\n\t\tif ( common ) {\n\t\t\tconst transformedCommon = new Range(\n\t\t\t\tcommon.start._getCombined( moveRange.start, insertPosition ),\n\t\t\t\tcommon.end._getCombined( moveRange.start, insertPosition )\n\t\t\t);\n\n\t\t\tif ( result.length == 2 ) {\n\t\t\t\tresult.splice( 1, 0, transformedCommon );\n\t\t\t} else {\n\t\t\t\tresult.push( transformedCommon );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns a copy of this range that is transformed by deletion of `howMany` nodes from `deletePosition`.\n\t *\n\t * If the deleted range is intersecting with the transformed range, the transformed range will be shrank.\n\t *\n\t * If the deleted range contains transformed range, `null` will be returned.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} deletionPosition Position from which nodes are removed.\n\t * @param {Number} howMany How many nodes are removed.\n\t * @returns {module:engine/model/range~Range|null} Result of the transformation.\n\t */\n\t_getTransformedByDeletion( deletePosition, howMany ) {\n\t\tlet newStart = this.start._getTransformedByDeletion( deletePosition, howMany );\n\t\tlet newEnd = this.end._getTransformedByDeletion( deletePosition, howMany );\n\n\t\tif ( newStart == null && newEnd == null ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( newStart == null ) {\n\t\t\tnewStart = deletePosition;\n\t\t}\n\n\t\tif ( newEnd == null ) {\n\t\t\tnewEnd = deletePosition;\n\t\t}\n\n\t\treturn new Range( newStart, newEnd );\n\t}\n\n\t/**\n\t * Creates a new range, spreading from specified {@link module:engine/model/position~Position position} to a position moved by\n\t * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n\t *\n\t * @protected\n\t * @param {module:engine/model/position~Position} position Beginning of the range.\n\t * @param {Number} shift How long the range should be.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createFromPositionAndShift( position, shift ) {\n\t\tconst start = position;\n\t\tconst end = position.getShiftedBy( shift );\n\n\t\treturn shift > 0 ? new this( start, end ) : new this( end, start );\n\t}\n\n\t/**\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * @protected\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createIn( element ) {\n\t\treturn new this( Position._createAt( element, 0 ), Position._createAt( element, element.maxOffset ) );\n\t}\n\n\t/**\n\t * Creates a range that starts before given {@link module:engine/model/item~Item model item} and ends after it.\n\t *\n\t * @protected\n\t * @param {module:engine/model/item~Item} item\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tstatic _createOn( item ) {\n\t\treturn this._createFromPositionAndShift( Position._createBefore( item ), item.offsetSize );\n\t}\n\n\t/**\n\t * Combines all ranges from the passed array into a one range. At least one range has to be passed.\n\t * Passed ranges must not have common parts.\n\t *\n\t * The first range from the array is a reference range. If other ranges start or end on the exactly same position where\n\t * the reference range, they get combined into one range.\n\t *\n\t *\t\t[  ][]  [    ][ ][             ][ ][]  [  ]  // Passed ranges, shown sorted\n\t *\t\t[    ]                                       // The result of the function if the first range was a reference range.\n\t *\t            [                           ]        // The result of the function if the third-to-seventh range was a reference range.\n\t *\t                                           [  ]  // The result of the function if the last range was a reference range.\n\t *\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to combine.\n\t * @returns {module:engine/model/range~Range} Combined range.\n\t */\n\tstatic _createFromRanges( ranges ) {\n\t\tif ( ranges.length === 0 ) {\n\t\t\t/**\n\t\t\t * At least one range has to be passed to\n\t\t\t * {@link module:engine/model/range~Range._createFromRanges `Range._createFromRanges()`}.\n\t\t\t *\n\t\t\t * @error range-create-from-ranges-empty-array\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'range-create-from-ranges-empty-array: At least one range has to be passed.' );\n\t\t} else if ( ranges.length == 1 ) {\n\t\t\treturn ranges[ 0 ].clone();\n\t\t}\n\n\t\t// 1. Set the first range in `ranges` array as a reference range.\n\t\t// If we are going to return just a one range, one of the ranges need to be the reference one.\n\t\t// Other ranges will be stuck to that range, if possible.\n\t\tconst ref = ranges[ 0 ];\n\n\t\t// 2. Sort all the ranges so it's easier to process them.\n\t\tranges.sort( ( a, b ) => {\n\t\t\treturn a.start.isAfter( b.start ) ? 1 : -1;\n\t\t} );\n\n\t\t// 3. Check at which index the reference range is now.\n\t\tconst refIndex = ranges.indexOf( ref );\n\n\t\t// 4. At this moment we don't need the original range.\n\t\t// We are going to modify the result and we need to return a new instance of Range.\n\t\t// We have to create a copy of the reference range.\n\t\tconst result = new this( ref.start, ref.end );\n\n\t\t// 5. Ranges should be checked and glued starting from the range that is closest to the reference range.\n\t\t// Since ranges are sorted, start with the range with index that is closest to reference range index.\n\t\tif ( refIndex > 0 ) {\n\t\t\tfor ( let i = refIndex - 1; true; i++ ) {\n\t\t\t\tif ( ranges[ i ].end.isEqual( result.start ) ) {\n\t\t\t\t\tresult.start = Position._createAt( ranges[ i ].start );\n\t\t\t\t} else {\n\t\t\t\t\t// If ranges are not starting/ending at the same position there is no point in looking further.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 6. Ranges should be checked and glued starting from the range that is closest to the reference range.\n\t\t// Since ranges are sorted, start with the range with index that is closest to reference range index.\n\t\tfor ( let i = refIndex + 1; i < ranges.length; i++ ) {\n\t\t\tif ( ranges[ i ].start.isEqual( result.end ) ) {\n\t\t\t\tresult.end = Position._createAt( ranges[ i ].end );\n\t\t\t} else {\n\t\t\t\t// If ranges are not starting/ending at the same position there is no point in looking further.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates a `Range` instance from given plain object (i.e. parsed JSON string).\n\t *\n\t * @param {Object} json Plain object to be converted to `Range`.\n\t * @param {module:engine/model/document~Document} doc Document object that will be range owner.\n\t * @returns {module:engine/model/element~Element} `Range` instance created using given plain object.\n\t */\n\tstatic fromJSON( json, doc ) {\n\t\treturn new this( Position.fromJSON( json.start, doc ), Position.fromJSON( json.end, doc ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/conversion/mapper\n */\n\nimport ModelPosition from '../model/position';\nimport ModelRange from '../model/range';\n\nimport ViewPosition from '../view/position';\nimport ViewRange from '../view/range';\nimport ViewText from '../view/text';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Maps elements, positions and markers between {@link module:engine/view/document~Document the view} and\n * {@link module:engine/model/model the model}.\n *\n * Mapper use bound elements to find corresponding elements and positions, so, to get proper results,\n * all model elements should be {@link module:engine/conversion/mapper~Mapper#bindElements bound}.\n *\n * To map complex model to/from view relations, you may provide custom callbacks for\n * {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition modelToViewPosition event} and\n * {@link module:engine/conversion/mapper~Mapper#event:viewToModelPosition viewToModelPosition event} that are fired whenever\n * a position mapping request occurs.\n * Those events are fired by {@link module:engine/conversion/mapper~Mapper#toViewPosition toViewPosition}\n * and {@link module:engine/conversion/mapper~Mapper#toModelPosition toModelPosition} methods. `Mapper` adds it's own default callbacks\n * with `'lowest'` priority. To override default `Mapper` mapping, add custom callback with higher priority and\n * stop the event.\n */\nexport default class Mapper {\n\t/**\n\t * Creates an instance of the mapper.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Model element to view element mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._modelToViewMapping = new WeakMap();\n\n\t\t/**\n\t\t * View element to model element mapping.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakMap}\n\t\t */\n\t\tthis._viewToModelMapping = new WeakMap();\n\n\t\t/**\n\t\t * A map containing callbacks between view element names and functions evaluating length of view elements\n\t\t * in model.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._viewToModelLengthCallbacks = new Map();\n\n\t\t/**\n\t\t * Model marker name to view elements mapping.\n\t\t *\n\t\t * Keys are `String`s while values are `Set`s with {@link module:engine/view/element~Element view elements}.\n\t\t * One marker (name) can be mapped to multiple elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._markerNameToElements = new Map();\n\n\t\t// Default mapper algorithm for mapping model position to view position.\n\t\tthis.on( 'modelToViewPosition', ( evt, data ) => {\n\t\t\tif ( data.viewPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewContainer = this._modelToViewMapping.get( data.modelPosition.parent );\n\n\t\t\tdata.viewPosition = this._findPositionIn( viewContainer, data.modelPosition.offset );\n\t\t}, { priority: 'low' } );\n\n\t\t// Default mapper algorithm for mapping view position to model position.\n\t\tthis.on( 'viewToModelPosition', ( evt, data ) => {\n\t\t\tif ( data.modelPosition ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet viewBlock = data.viewPosition.parent;\n\t\t\tlet modelParent = this._viewToModelMapping.get( viewBlock );\n\n\t\t\twhile ( !modelParent ) {\n\t\t\t\tviewBlock = viewBlock.parent;\n\t\t\t\tmodelParent = this._viewToModelMapping.get( viewBlock );\n\t\t\t}\n\n\t\t\tconst modelOffset = this._toModelOffset( data.viewPosition.parent, data.viewPosition.offset, viewBlock );\n\n\t\t\tdata.modelPosition = ModelPosition._createAt( modelParent, modelOffset );\n\t\t}, { priority: 'low' } );\n\t}\n\n\t/**\n\t * Marks model and view elements as corresponding. Corresponding elements can be retrieved by using\n\t * the {@link module:engine/conversion/mapper~Mapper#toModelElement toModelElement} and\n\t * {@link module:engine/conversion/mapper~Mapper#toViewElement toViewElement} methods.\n\t * The information that elements are bound is also used to translate positions.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element.\n\t * @param {module:engine/view/element~Element} viewElement View element.\n\t */\n\tbindElements( modelElement, viewElement ) {\n\t\tthis._modelToViewMapping.set( modelElement, viewElement );\n\t\tthis._viewToModelMapping.set( viewElement, modelElement );\n\t}\n\n\t/**\n\t * Unbinds given {@link module:engine/view/element~Element view element} from the map.\n\t *\n\t * **Note:** view-to-model binding will be removed, if it existed. However, corresponding model-to-view binding\n\t * will be removed only if model element is still bound to passed `viewElement`.\n\t *\n\t * This behavior lets for re-binding model element to another view element without fear of losing the new binding\n\t * when the previously bound view element is unbound.\n\t *\n\t * @param {module:engine/view/element~Element} viewElement View element to unbind.\n\t */\n\tunbindViewElement( viewElement ) {\n\t\tconst modelElement = this.toModelElement( viewElement );\n\n\t\tthis._viewToModelMapping.delete( viewElement );\n\n\t\tif ( this._modelToViewMapping.get( modelElement ) == viewElement ) {\n\t\t\tthis._modelToViewMapping.delete( modelElement );\n\t\t}\n\t}\n\n\t/**\n\t * Unbinds given {@link module:engine/model/element~Element model element} from the map.\n\t *\n\t * **Note:** model-to-view binding will be removed, if it existed. However, corresponding view-to-model binding\n\t * will be removed only if view element is still bound to passed `modelElement`.\n\t *\n\t * This behavior lets for re-binding view element to another model element without fear of losing the new binding\n\t * when the previously bound model element is unbound.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element to unbind.\n\t */\n\tunbindModelElement( modelElement ) {\n\t\tconst viewElement = this.toViewElement( modelElement );\n\n\t\tthis._modelToViewMapping.delete( modelElement );\n\n\t\tif ( this._viewToModelMapping.get( viewElement ) == modelElement ) {\n\t\t\tthis._viewToModelMapping.delete( viewElement );\n\t\t}\n\t}\n\n\t/**\n\t * Binds given marker name with given {@link module:engine/view/element~Element view element}. The element\n\t * will be added to the current set of elements bound with given marker name.\n\t *\n\t * @param {module:engine/view/element~Element} element Element to bind.\n\t * @param {String} name Marker name.\n\t */\n\tbindElementToMarker( element, name ) {\n\t\tconst elements = this._markerNameToElements.get( name ) || new Set();\n\n\t\telements.add( element );\n\n\t\tthis._markerNameToElements.set( name, elements );\n\t}\n\n\t/**\n\t * Unbinds all elements from given marker name.\n\t *\n\t * @param {String} name Marker name.\n\t */\n\tunbindElementsFromMarkerName( name ) {\n\t\tthis._markerNameToElements.delete( name );\n\t}\n\n\t/**\n\t * Removes all model to view and view to model bindings.\n\t */\n\tclearBindings() {\n\t\tthis._modelToViewMapping = new WeakMap();\n\t\tthis._viewToModelMapping = new WeakMap();\n\t\tthis._markerNameToElements = new Map();\n\t}\n\n\t/**\n\t * Gets the corresponding model element.\n\t *\n\t * **Note:** {@link module:engine/view/uielement~UIElement} does not have corresponding element in model.\n\t *\n\t * @param {module:engine/view/element~Element} viewElement View element.\n\t * @returns {module:engine/model/element~Element|undefined} Corresponding model element or `undefined` if not found.\n\t */\n\ttoModelElement( viewElement ) {\n\t\treturn this._viewToModelMapping.get( viewElement );\n\t}\n\n\t/**\n\t * Gets the corresponding view element.\n\t *\n\t * @param {module:engine/model/element~Element} modelElement Model element.\n\t * @returns {module:engine/view/element~Element|undefined} Corresponding view element or `undefined` if not found.\n\t */\n\ttoViewElement( modelElement ) {\n\t\treturn this._modelToViewMapping.get( modelElement );\n\t}\n\n\t/**\n\t * Gets the corresponding model range.\n\t *\n\t * @param {module:engine/view/range~Range} viewRange View range.\n\t * @returns {module:engine/model/range~Range} Corresponding model range.\n\t */\n\ttoModelRange( viewRange ) {\n\t\treturn new ModelRange( this.toModelPosition( viewRange.start ), this.toModelPosition( viewRange.end ) );\n\t}\n\n\t/**\n\t * Gets the corresponding view range.\n\t *\n\t * @param {module:engine/model/range~Range} modelRange Model range.\n\t * @returns {module:engine/view/range~Range} Corresponding view range.\n\t */\n\ttoViewRange( modelRange ) {\n\t\treturn new ViewRange( this.toViewPosition( modelRange.start ), this.toViewPosition( modelRange.end ) );\n\t}\n\n\t/**\n\t * Gets the corresponding model position.\n\t *\n\t * @fires viewToModelPosition\n\t * @param {module:engine/view/position~Position} viewPosition View position.\n\t * @returns {module:engine/model/position~Position} Corresponding model position.\n\t */\n\ttoModelPosition( viewPosition ) {\n\t\tconst data = {\n\t\t\tviewPosition,\n\t\t\tmapper: this\n\t\t};\n\n\t\tthis.fire( 'viewToModelPosition', data );\n\n\t\treturn data.modelPosition;\n\t}\n\n\t/**\n\t * Gets the corresponding view position.\n\t *\n\t * @fires modelToViewPosition\n\t * @param {module:engine/model/position~Position} modelPosition Model position.\n\t * @param {Object} [options] Additional options for position mapping process.\n\t * @param {Boolean} [options.isPhantom=false] Should be set to `true` if the model position to map is pointing to a place\n\t * in model tree which no longer exists. For example, it could be an end of a removed model range.\n\t * @returns {module:engine/view/position~Position} Corresponding view position.\n\t */\n\ttoViewPosition( modelPosition, options = { isPhantom: false } ) {\n\t\tconst data = {\n\t\t\tmodelPosition,\n\t\t\tmapper: this,\n\t\t\tisPhantom: options.isPhantom\n\t\t};\n\n\t\tthis.fire( 'modelToViewPosition', data );\n\n\t\treturn data.viewPosition;\n\t}\n\n\t/**\n\t * Gets all view elements bound to the given marker name.\n\t *\n\t * @param {String} name Marker name.\n\t * @returns {Set.<module:engine/view/element~Element>|null} View elements bound with given marker name or `null`\n\t * if no elements are bound to given marker name.\n\t */\n\tmarkerNameToElements( name ) {\n\t\tconst boundElements = this._markerNameToElements.get( name );\n\n\t\tif ( !boundElements ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements = new Set();\n\n\t\tfor ( const element of boundElements ) {\n\t\t\tif ( element.is( 'attributeElement' ) ) {\n\t\t\t\tfor ( const clone of element.getElementsWithSameId() ) {\n\t\t\t\t\telements.add( clone );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\telements.add( element );\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Registers a callback that evaluates the length in the model of a view element with given name.\n\t *\n\t * The callback is fired with one argument, which is a view element instance. The callback is expected to return\n\t * a number representing the length of view element in model.\n\t *\n\t *\t\t// List item in view may contain nested list, which have other list items. In model though,\n\t *\t\t// the lists are represented by flat structure. Because of those differences, length of list view element\n\t *\t\t// may be greater than one. In the callback it's checked how many nested list items are in evaluated list item.\n\t *\n\t *\t\tfunction getViewListItemLength( element ) {\n\t *\t\t\tlet length = 1;\n\t *\n\t *\t\t\tfor ( let child of element.getChildren() ) {\n\t *\t\t\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t *\t\t\t\t\tfor ( let item of child.getChildren() ) {\n\t *\t\t\t\t\t\tlength += getViewListItemLength( item );\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\n\t *\t\t\treturn length;\n\t *\t\t}\n\t *\n\t *\t\tmapper.registerViewToModelLength( 'li', getViewListItemLength );\n\t *\n\t * @param {String} viewElementName Name of view element for which callback is registered.\n\t * @param {Function} lengthCallback Function return a length of view element instance in model.\n\t */\n\tregisterViewToModelLength( viewElementName, lengthCallback ) {\n\t\tthis._viewToModelLengthCallbacks.set( viewElementName, lengthCallback );\n\t}\n\n\t/**\n\t * Calculates model offset based on the view position and the block element.\n\t *\n\t * Example:\n\t *\n\t *\t\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, p ) -> 5\n\t *\n\t * Is a sum of:\n\t *\n\t *\t\t<p>foo|<b>bar</b></p> // _toModelOffset( p, 3, p ) -> 3\n\t *\t\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, b ) -> 2\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewParent Position parent.\n\t * @param {Number} viewOffset Position offset.\n\t * @param {module:engine/view/element~Element} viewBlock Block used as a base to calculate offset.\n\t * @returns {Number} Offset in the model.\n\t */\n\t_toModelOffset( viewParent, viewOffset, viewBlock ) {\n\t\tif ( viewBlock != viewParent ) {\n\t\t\t// See example.\n\t\t\tconst offsetToParentStart = this._toModelOffset( viewParent.parent, viewParent.index, viewBlock );\n\t\t\tconst offsetInParent = this._toModelOffset( viewParent, viewOffset, viewParent );\n\n\t\t\treturn offsetToParentStart + offsetInParent;\n\t\t}\n\n\t\t// viewBlock == viewParent, so we need to calculate the offset in the parent element.\n\n\t\t// If the position is a text it is simple (\"ba|r\" -> 2).\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\treturn viewOffset;\n\t\t}\n\n\t\t// If the position is in an element we need to sum lengths of siblings ( <b> bar </b> foo | -> 3 + 3 = 6 ).\n\t\tlet modelOffset = 0;\n\n\t\tfor ( let i = 0; i < viewOffset; i++ ) {\n\t\t\tmodelOffset += this.getModelLength( viewParent.getChild( i ) );\n\t\t}\n\n\t\treturn modelOffset;\n\t}\n\n\t/**\n\t * Gets the length of the view element in the model.\n\t *\n\t * The length is calculated as follows:\n\t * * if {@link #registerViewToModelLength length mapping callback} is provided for given `viewNode` it is used to\n\t * evaluate model length (`viewNode` is used as first and only parameter passed to the callback),\n\t * * length of a {@link module:engine/view/text~Text text node} is equal to the length of it's\n\t * {@link module:engine/view/text~Text#data data},\n\t * * length of a {@link module:engine/view/uielement~UIElement ui element} is equal to 0,\n\t * * length of a mapped {@link module:engine/view/element~Element element} is equal to 1,\n\t * * length of a not-mapped {@link module:engine/view/element~Element element} is equal to the length of it's children.\n\t *\n\t * Examples:\n\t *\n\t *\t\tfoo                          -> 3 // Text length is equal to it's data length.\n\t *\t\t<p>foo</p>                   -> 1 // Length of an element which is mapped is by default equal to 1.\n\t *\t\t<b>foo</b>                   -> 3 // Length of an element which is not mapped is a length of its children.\n\t *\t\t<div><p>x</p><p>y</p></div>  -> 2 // Assuming that <div> is not mapped and <p> are mapped.\n\t *\n\t * @param {module:engine/view/element~Element} viewNode View node.\n\t * @returns {Number} Length of the node in the tree model.\n\t */\n\tgetModelLength( viewNode ) {\n\t\tif ( this._viewToModelLengthCallbacks.get( viewNode.name ) ) {\n\t\t\tconst callback = this._viewToModelLengthCallbacks.get( viewNode.name );\n\n\t\t\treturn callback( viewNode );\n\t\t} else if ( this._viewToModelMapping.has( viewNode ) ) {\n\t\t\treturn 1;\n\t\t} else if ( viewNode.is( 'text' ) ) {\n\t\t\treturn viewNode.data.length;\n\t\t} else if ( viewNode.is( 'uiElement' ) ) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tlet len = 0;\n\n\t\t\tfor ( const child of viewNode.getChildren() ) {\n\t\t\t\tlen += this.getModelLength( child );\n\t\t\t}\n\n\t\t\treturn len;\n\t\t}\n\t}\n\n\t/**\n\t * Finds the position in the view node (or its children) with the expected model offset.\n\t *\n\t * Example:\n\t *\n\t *\t\t<p>fo<b>bar</b>bom</p> -> expected offset: 4\n\t *\n\t *\t\t_findPositionIn( p, 4 ):\n\t *\t\t<p>|fo<b>bar</b>bom</p> -> expected offset: 4, actual offset: 0\n\t *\t\t<p>fo|<b>bar</b>bom</p> -> expected offset: 4, actual offset: 2\n\t *\t\t<p>fo<b>bar</b>|bom</p> -> expected offset: 4, actual offset: 5 -> we are too far\n\t *\n\t *\t\t_findPositionIn( b, 4 - ( 5 - 3 ) ):\n\t *\t\t<p>fo<b>|bar</b>bom</p> -> expected offset: 2, actual offset: 0\n\t *\t\t<p>fo<b>bar|</b>bom</p> -> expected offset: 2, actual offset: 3 -> we are too far\n\t *\n\t *\t\t_findPositionIn( bar, 2 - ( 3 - 3 ) ):\n\t *\t\tWe are in the text node so we can simple find the offset.\n\t *\t\t<p>fo<b>ba|r</b>bom</p> -> expected offset: 2, actual offset: 2 -> position found\n\t *\n\t * @private\n\t * @param {module:engine/view/element~Element} viewParent Tree view element in which we are looking for the position.\n\t * @param {Number} expectedOffset Expected offset.\n\t * @returns {module:engine/view/position~Position} Found position.\n\t */\n\t_findPositionIn( viewParent, expectedOffset ) {\n\t\t// Last scanned view node.\n\t\tlet viewNode;\n\t\t// Length of the last scanned view node.\n\t\tlet lastLength = 0;\n\n\t\tlet modelOffset = 0;\n\t\tlet viewOffset = 0;\n\n\t\t// In the text node it is simple: offset in the model equals offset in the text.\n\t\tif ( viewParent.is( 'text' ) ) {\n\t\t\treturn new ViewPosition( viewParent, expectedOffset );\n\t\t}\n\n\t\t// In other cases we add lengths of child nodes to find the proper offset.\n\n\t\t// If it is smaller we add the length.\n\t\twhile ( modelOffset < expectedOffset ) {\n\t\t\tviewNode = viewParent.getChild( viewOffset );\n\t\t\tlastLength = this.getModelLength( viewNode );\n\t\t\tmodelOffset += lastLength;\n\t\t\tviewOffset++;\n\t\t}\n\n\t\t// If it equals we found the position.\n\t\tif ( modelOffset == expectedOffset ) {\n\t\t\treturn this._moveViewPositionToTextNode( new ViewPosition( viewParent, viewOffset ) );\n\t\t}\n\t\t// If it is higher we need to enter last child.\n\t\telse {\n\t\t\t// ( modelOffset - lastLength ) is the offset to the child we enter,\n\t\t\t// so we subtract it from the expected offset to fine the offset in the child.\n\t\t\treturn this._findPositionIn( viewNode, expectedOffset - ( modelOffset - lastLength ) );\n\t\t}\n\t}\n\n\t/**\n\t * Because we prefer positions in text nodes over positions next to text node moves view position to the text node\n\t * if it was next to it.\n\t *\n\t *\t\t<p>[]<b>foo</b></p> -> <p>[]<b>foo</b></p> // do not touch if position is not directly next to text\n\t *\t\t<p>foo[]<b>foo</b></p> -> <p>foo{}<b>foo</b></p> // move to text node\n\t *\t\t<p><b>[]foo</b></p> -> <p><b>{}foo</b></p> // move to text node\n\t *\n\t * @private\n\t * @param {module:engine/view/position~Position} viewPosition Position potentially next to text node.\n\t * @returns {module:engine/view/position~Position} Position in text node if possible.\n\t */\n\t_moveViewPositionToTextNode( viewPosition ) {\n\t\t// If the position is just after text node, put it at the end of that text node.\n\t\t// If the position is just before text node, put it at the beginning of that text node.\n\t\tconst nodeBefore = viewPosition.nodeBefore;\n\t\tconst nodeAfter = viewPosition.nodeAfter;\n\n\t\tif ( nodeBefore instanceof ViewText ) {\n\t\t\treturn new ViewPosition( nodeBefore, nodeBefore.data.length );\n\t\t} else if ( nodeAfter instanceof ViewText ) {\n\t\t\treturn new ViewPosition( nodeAfter, 0 );\n\t\t}\n\n\t\t// Otherwise, just return the given position.\n\t\treturn viewPosition;\n\t}\n\n\t/**\n\t * Fired for each model-to-view position mapping request. The purpose of this event is to enable custom model-to-view position\n\t * mapping. Callbacks added to this event take {@link module:engine/model/position~Position model position} and are expected to\n\t * calculate {@link module:engine/view/position~Position view position}. Calculated view position should be added as `viewPosition`\n\t * value in `data` object that is passed as one of parameters to the event callback.\n\t *\n\t * \t\t// Assume that \"captionedImage\" model element is converted to <img> and following <span> elements in view,\n\t * \t\t// and the model element is bound to <img> element. Force mapping model positions inside \"captionedImage\" to that\n\t * \t\t// <span> element.\n\t *\t\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\n\t *\t\t\tconst positionParent = modelPosition.parent;\n\t *\n\t *\t\t\tif ( positionParent.name == 'captionedImage' ) {\n\t *\t\t\t\tconst viewImg = data.mapper.toViewElement( positionParent );\n\t *\t\t\t\tconst viewCaption = viewImg.nextSibling; // The <span> element.\n\t *\n\t *\t\t\t\tdata.viewPosition = new ViewPosition( viewCaption, modelPosition.offset );\n\t *\n\t *\t\t\t\t// Stop the event if other callbacks should not modify calculated value.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** keep in mind that sometimes a \"phantom\" model position is being converted. \"Phantom\" model position is\n\t * a position that points to a non-existing place in model. Such position might still be valid for conversion, though\n\t * (it would point to a correct place in view when converted). One example of such situation is when a range is\n\t * removed from model, there may be a need to map the range's end (which is no longer valid model position). To\n\t * handle such situation, check `data.isPhantom` flag:\n\t *\n\t * \t\t// Assume that there is \"customElement\" model element and whenever position is before it, we want to move it\n\t * \t\t// to the inside of the view element bound to \"customElement\".\n\t *\t\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\n\t *\t\t\tif ( data.isPhantom ) {\n\t *\t\t\t\treturn;\n\t *\t\t\t}\n\t *\n\t *\t\t\t// Below line might crash for phantom position that does not exist in model.\n\t *\t\t\tconst sibling = data.modelPosition.nodeBefore;\n\t *\n\t *\t\t\t// Check if this is the element we are interested in.\n\t *\t\t\tif ( !sibling.is( 'customElement' ) ) {\n\t *\t\t\t\treturn;\n\t *\t\t\t}\n\t *\n\t *\t\t\tconst viewElement = data.mapper.toViewElement( sibling );\n\t *\n\t *\t\t\tdata.viewPosition = new ViewPosition( sibling, 0 );\n\t *\n\t *\t\t\tevt.stop();\n\t *\t\t} );\n\t *\n\t * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\n\t * attach a custom callback after default callback and also use `data.viewPosition` calculated by default callback\n\t * (for example to fix it).\n\t *\n\t * **Note:** default mapping callback will not fire if `data.viewPosition` is already set.\n\t *\n\t * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\n\t * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\n\t * the condition that checks if special case scenario happened should be as simple as possible.\n\t *\n\t * @event modelToViewPosition\n\t * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\n\t * `viewPosition` value to that object with calculated {@link module:engine/view/position~Position view position}.\n\t * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\n\t */\n\n\t/**\n\t * Fired for each view-to-model position mapping request. See {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition}.\n\t *\n\t * \t\t// See example in `modelToViewPosition` event description.\n\t * \t\t// This custom mapping will map positions from <span> element next to <img> to the \"captionedImage\" element.\n\t *\t\tmapper.on( 'viewToModelPosition', ( evt, data ) => {\n\t *\t\t\tconst positionParent = viewPosition.parent;\n\t *\n\t *\t\t\tif ( positionParent.hasClass( 'image-caption' ) ) {\n\t *\t\t\t\tconst viewImg = positionParent.previousSibling;\n\t *\t\t\t\tconst modelImg = data.mapper.toModelElement( viewImg );\n\t *\n\t *\t\t\t\tdata.modelPosition = new ModelPosition( modelImg, viewPosition.offset );\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\n\t * attach a custom callback after default callback and also use `data.modelPosition` calculated by default callback\n\t * (for example to fix it).\n\t *\n\t * **Note:** default mapping callback will not fire if `data.modelPosition` is already set.\n\t *\n\t * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\n\t * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\n\t * the condition that checks if special case scenario happened should be as simple as possible.\n\t *\n\t * @event viewToModelPosition\n\t * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\n\t * `modelPosition` value to that object with calculated {@link module:engine/model/position~Position model position}.\n\t * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\n\t */\n}\n\nmix( Mapper, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/conversion/modelconsumable\n */\n\nimport TextProxy from '../model/textproxy';\n\n/**\n * Manages a list of consumable values for {@link module:engine/model/item~Item model items}.\n *\n * Consumables are various aspects of the model. A model item can be broken down into singular properties that might be\n * taken into consideration when converting that item.\n *\n * `ModelConsumable` is used by {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} while analyzing changed\n * parts of {@link module:engine/model/document~Document the document}. The added / changed / removed model items are broken down\n * into singular properties (the item itself and it's attributes). All those parts are saved in `ModelConsumable`. Then,\n * during conversion, when given part of model item is converted (i.e. the view element has been inserted into the view,\n * but without attributes), consumable value is removed from `ModelConsumable`.\n *\n * For model items, `ModelConsumable` stores consumable values of one of following types: `insert`, `addattribute:<attributeKey>`,\n * `changeattributes:<attributeKey>`, `removeattributes:<attributeKey>`.\n *\n * In most cases, it is enough to let {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * gather consumable values, so there is no need to use\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#add add method} directly.\n * However, it is important to understand how consumable values can be\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n * See {@link module:engine/conversion/downcast-selection-converters default downcast converters} for more information.\n *\n * Keep in mind, that one conversion event may have multiple callbacks (converters) attached to it. Each of those is\n * able to convert one or more parts of the model. However, when one of those callbacks actually converts\n * something, other should not, because they would duplicate the results. Using `ModelConsumable` helps avoiding\n * this situation, because callbacks should only convert those values, which were not yet consumed from `ModelConsumable`.\n *\n * Consuming multiple values in a single callback:\n *\n *\t\t// Converter for custom `image` element that might have a `caption` element inside which changes\n *\t\t// how the image is displayed in the view:\n *\t\t//\n *\t\t// Model:\n *\t\t//\n *\t\t// [image]\n *\t\t//   └─ [caption]\n *\t\t//       └─ foo\n *\t\t//\n *\t\t// View:\n *\t\t//\n *\t\t// <figure>\n *\t\t//   ├─ <img />\n *\t\t//   └─ <caption>\n *\t\t//       └─ foo\n *\t\tmodelConversionDispatcher.on( 'insert:image', ( evt, data, conversionApi ) => {\n *\t\t\t// First, consume the `image` element.\n *\t\t\tconversionApi.consumable.consume( data.item, 'insert' );\n *\n *\t\t\t// Just create normal image element for the view.\n *\t\t\t// Maybe it will be \"decorated\" later.\n *\t\t\tconst viewImage = new ViewElement( 'img' );\n *\t\t\tconst insertPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\t\t\tconst viewWriter = conversionApi.writer;\n *\n *\t\t\t// Check if the `image` element has children.\n *\t\t\tif ( data.item.childCount > 0 ) {\n *\t\t\t\tconst modelCaption = data.item.getChild( 0 );\n *\n *\t\t\t\t// `modelCaption` insertion change is consumed from consumable values.\n *\t\t\t\t// It will not be converted by other converters, but it's children (probably some text) will be.\n *\t\t\t\t// Through mapping, converters for text will know where to insert contents of `modelCaption`.\n *\t\t\t\tif ( conversionApi.consumable.consume( modelCaption, 'insert' ) ) {\n *\t\t\t\t\tconst viewCaption = new ViewElement( 'figcaption' );\n *\n *\t\t\t\t\tconst viewImageHolder = new ViewElement( 'figure', null, [ viewImage, viewCaption ] );\n *\n *\t\t\t\t\tconversionApi.mapper.bindElements( modelCaption, viewCaption );\n *\t\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImageHolder );\n *\t\t\t\t\tviewWriter.insert( insertPosition, viewImageHolder );\n *\t\t\t\t}\n *\t\t\t} else {\n *\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImage );\n *\t\t\t\tviewWriter.insert( insertPosition, viewImage );\n *\t\t\t}\n *\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class ModelConsumable {\n\t/**\n\t * Creates an empty consumables list.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Contains list of consumable values.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_consumable\n\t\t */\n\t\tthis._consumable = new Map();\n\n\t\t/**\n\t\t * For each {@link module:engine/model/textproxy~TextProxy} added to `ModelConsumable`, this registry holds parent\n\t\t * of that `TextProxy` and start and end indices of that `TextProxy`. This allows identification of `TextProxy`\n\t\t * instances that points to the same part of the model but are different instances. Each distinct `TextProxy`\n\t\t * is given unique `Symbol` which is then registered as consumable. This process is transparent for `ModelConsumable`\n\t\t * API user because whenever `TextProxy` is added, tested, consumed or reverted, internal mechanisms of\n\t\t * `ModelConsumable` translates `TextProxy` to that unique `Symbol`.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_textProxyRegistry\n\t\t */\n\t\tthis._textProxyRegistry = new Map();\n\t}\n\n\t/**\n\t * Adds a consumable value to the consumables list and links it with given model item.\n\t *\n\t *\t\tmodelConsumable.add( modelElement, 'insert' ); // Add `modelElement` insertion change to consumable values.\n\t *\t\tmodelConsumable.add( modelElement, 'addAttribute:bold' ); // Add `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.add( modelElement, 'removeAttribute:bold' ); // Add `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.add( modelSelection, 'selection' ); // Add `modelSelection` to consumable values.\n\t *\t\tmodelConsumable.add( modelRange, 'range' ); // Add `modelRange` to consumable values.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection that has the consumable.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t */\n\tadd( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tif ( !this._consumable.has( item ) ) {\n\t\t\tthis._consumable.set( item, new Map() );\n\t\t}\n\n\t\tthis._consumable.get( item ).set( type, true );\n\t}\n\n\t/**\n\t * Removes given consumable value from given model item.\n\t *\n\t *\t\tmodelConsumable.consume( modelElement, 'insert' ); // Remove `modelElement` insertion change from consumable values.\n\t *\t\tmodelConsumable.consume( modelElement, 'addAttribute:bold' ); // Remove `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.consume( modelElement, 'removeAttribute:bold' ); // Remove `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.consume( modelSelection, 'selection' ); // Remove `modelSelection` from consumable values.\n\t *\t\tmodelConsumable.consume( modelRange, 'range' ); // Remove 'modelRange' from consumable values.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection from which consumable will be consumed.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t * @returns {Boolean} `true` if consumable value was available and was consumed, `false` otherwise.\n\t */\n\tconsume( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tif ( this.test( item, type ) ) {\n\t\t\tthis._consumable.get( item ).set( type, false );\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Tests whether there is a consumable value of given type connected with given model item.\n\t *\n\t *\t\tmodelConsumable.test( modelElement, 'insert' ); // Check for `modelElement` insertion change.\n\t *\t\tmodelConsumable.test( modelElement, 'addAttribute:bold' ); // Check for `bold` attribute insertion on `modelElement` change.\n\t *\t\tmodelConsumable.test( modelElement, 'removeAttribute:bold' ); // Check for `bold` attribute removal on `modelElement` change.\n\t *\t\tmodelConsumable.test( modelSelection, 'selection' ); // Check if `modelSelection` is consumable.\n\t *\t\tmodelConsumable.test( modelRange, 'range' ); // Check if `modelRange` is consumable.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection to be tested.\n\t * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n\t * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n\t * @returns {null|Boolean} `null` if such consumable was never added, `false` if the consumable values was\n\t * already consumed or `true` if it was added and not consumed yet.\n\t */\n\ttest( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tconst itemConsumables = this._consumable.get( item );\n\n\t\tif ( itemConsumables === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst value = itemConsumables.get( type );\n\n\t\tif ( value === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Reverts consuming of consumable value.\n\t *\n\t *\t\tmodelConsumable.revert( modelElement, 'insert' ); // Revert consuming `modelElement` insertion change.\n\t *\t\tmodelConsumable.revert( modelElement, 'addAttribute:bold' ); // Revert consuming `bold` attribute insert from `modelElement`.\n\t *\t\tmodelConsumable.revert( modelElement, 'removeAttribute:bold' ); // Revert consuming `bold` attribute remove from `modelElement`.\n\t *\t\tmodelConsumable.revert( modelSelection, 'selection' ); // Revert consuming `modelSelection`.\n\t *\t\tmodelConsumable.revert( modelRange, 'range' ); // Revert consuming `modelRange`.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n\t * Model item, range or selection to be reverted.\n\t * @param {String} type Consumable type.\n\t * @returns {null|Boolean} `true` if consumable has been reversed, `false` otherwise. `null` if the consumable has\n\t * never been added.\n\t */\n\trevert( item, type ) {\n\t\ttype = _normalizeConsumableType( type );\n\n\t\tif ( item instanceof TextProxy ) {\n\t\t\titem = this._getSymbolForTextProxy( item );\n\t\t}\n\n\t\tconst test = this.test( item, type );\n\n\t\tif ( test === false ) {\n\t\t\tthis._consumable.get( item ).set( type, true );\n\n\t\t\treturn true;\n\t\t} else if ( test === true ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets a unique symbol for passed {@link module:engine/model/textproxy~TextProxy} instance. All `TextProxy` instances that\n\t * have same parent, same start index and same end index will get the same symbol.\n\t *\n\t * Used internally to correctly consume `TextProxy` instances.\n\t *\n\t * @private\n\t * @param {module:engine/model/textproxy~TextProxy} textProxy `TextProxy` instance to get a symbol for.\n\t * @returns {Symbol} Symbol representing all equal instances of `TextProxy`.\n\t */\n\t_getSymbolForTextProxy( textProxy ) {\n\t\tlet symbol = null;\n\n\t\tconst startMap = this._textProxyRegistry.get( textProxy.startOffset );\n\n\t\tif ( startMap ) {\n\t\t\tconst endMap = startMap.get( textProxy.endOffset );\n\n\t\t\tif ( endMap ) {\n\t\t\t\tsymbol = endMap.get( textProxy.parent );\n\t\t\t}\n\t\t}\n\n\t\tif ( !symbol ) {\n\t\t\tsymbol = this._addSymbolForTextProxy( textProxy.startOffset, textProxy.endOffset, textProxy.parent );\n\t\t}\n\n\t\treturn symbol;\n\t}\n\n\t/**\n\t * Adds a symbol for given properties that characterizes a {@link module:engine/model/textproxy~TextProxy} instance.\n\t *\n\t * Used internally to correctly consume `TextProxy` instances.\n\t *\n\t * @private\n\t * @param {Number} startIndex Text proxy start index in it's parent.\n\t * @param {Number} endIndex Text proxy end index in it's parent.\n\t * @param {module:engine/model/element~Element} parent Text proxy parent.\n\t * @returns {Symbol} Symbol generated for given properties.\n\t */\n\t_addSymbolForTextProxy( start, end, parent ) {\n\t\tconst symbol = Symbol( 'textProxySymbol' );\n\t\tlet startMap, endMap;\n\n\t\tstartMap = this._textProxyRegistry.get( start );\n\n\t\tif ( !startMap ) {\n\t\t\tstartMap = new Map();\n\t\t\tthis._textProxyRegistry.set( start, startMap );\n\t\t}\n\n\t\tendMap = startMap.get( end );\n\n\t\tif ( !endMap ) {\n\t\t\tendMap = new Map();\n\t\t\tstartMap.set( end, endMap );\n\t\t}\n\n\t\tendMap.set( parent, symbol );\n\n\t\treturn symbol;\n\t}\n}\n\n// Returns a normalized consumable type name from given string. A normalized consumable type name is a string that has\n// at most one colon, for example: `insert` or `addMarker:highlight`. If string to normalize has more \"parts\" (more colons),\n// the other parts are dropped, for example: `addattribute:bold:$text` -> `addattributes:bold`.\n//\n// @param {String} type Consumable type.\n// @returns {String} Normalized consumable type.\nfunction _normalizeConsumableType( type ) {\n\tconst parts = type.split( ':' );\n\n\treturn parts.length > 1 ? parts[ 0 ] + ':' + parts[ 1 ] : parts[ 0 ];\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/conversion/downcastdispatcher\n */\n\nimport Consumable from './modelconsumable';\nimport Range from '../model/range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { extend } from 'lodash-es';\n\n/**\n * `DowncastDispatcher` is a central point of downcasting (conversion from model to view), which is a process of reacting to changes\n * in the model and firing a set of events. Callbacks listening to those events are called converters. Those\n * converters role is to convert the model changes to changes in view (for example, adding view nodes or\n * changing attributes on view elements).\n *\n * During conversion process, `DowncastDispatcher` fires events, basing on state of the model and prepares\n * data for those events. It is important to understand that those events are connected with changes done on model,\n * for example: \"node has been inserted\" or \"attribute has changed\". This is in a contrary to upcasting (view to model conversion),\n * where we convert view state (view nodes) to a model tree.\n *\n * The events are prepared basing on a diff created by {@link module:engine/model/differ~Differ Differ}, which buffers them\n * and then passes to `DowncastDispatcher` as a diff between old model state and new model state.\n *\n * Note, that because changes are converted there is a need to have a mapping between model structure and view structure.\n * To map positions and elements during downcast (model to view conversion) use {@link module:engine/conversion/mapper~Mapper}.\n *\n * `DowncastDispatcher` fires following events for model tree changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\n * if a range of nodes has been inserted to the model tree,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove remove}\n * if a range of nodes has been removed from the model tree,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute}\n * if attribute has been added, changed or removed from a model node.\n *\n * For {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\n * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute},\n * `DowncastDispatcher` generates {@link module:engine/conversion/modelconsumable~ModelConsumable consumables}.\n * These are used to have a control over which changes has been already consumed. It is useful when some converters\n * overwrite other or converts multiple changes (for example converts insertion of an element and also converts that\n * element's attributes during insertion).\n *\n * Additionally, `DowncastDispatcher` fires events for {@link module:engine/model/markercollection~Marker marker} changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} if a marker has been added,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} if a marker has been removed.\n *\n * Note, that changing a marker is done through removing the marker from the old range, and adding on the new range,\n * so both those events are fired.\n *\n * Finally, `DowncastDispatcher` also handles firing events for {@link module:engine/model/selection model selection}\n * conversion:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:selection}\n * which converts selection from model to view,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute}\n * which is fired for every selection attribute,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}\n * which is fired for every marker which contains selection.\n *\n * Unlike model tree and markers, events for selection are not fired for changes but for selection state.\n *\n * When providing custom listeners for `DowncastDispatcher` remember to check whether given change has not been\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} yet.\n *\n * When providing custom listeners for `DowncastDispatcher` keep in mind that any callback that had\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} a value from a consumable and\n * converted the change should also stop the event (for efficiency purposes).\n *\n * When providing custom listeners for `DowncastDispatcher` remember to use provided\n * {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer} to apply changes to the view document.\n *\n * Example of a custom converter for `DowncastDispatcher`:\n *\n *\t\t// We will convert inserting \"paragraph\" model element into the model.\n *\t\tdowncastDispatcher.on( 'insert:paragraph', ( evt, data, conversionApi ) => {\n *\t\t\t// Remember to check whether the change has not been consumed yet and consume it.\n *\t\t\tif ( conversionApi.consumable.consume( data.item, 'insert' ) ) {\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\t// Translate position in model to position in view.\n *\t\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\n *\t\t\t// Create <p> element that will be inserted in view at `viewPosition`.\n *\t\t\tconst viewElement = conversionApi.writer.createContainerElement( 'p' );\n *\n *\t\t\t// Bind the newly created view element to model element so positions will map accordingly in future.\n *\t\t\tconversionApi.mapper.bindElements( data.item, viewElement );\n *\n *\t\t\t// Add the newly created view element to the view.\n *\t\t\tconversionApi.writer.insert( viewPosition, viewElement );\n *\n *\t\t\t// Remember to stop the event propagation.\n *\t\t\tevt.stop();\n *\t\t} );\n */\nexport default class DowncastDispatcher {\n\t/**\n\t * Creates a `DowncastDispatcher` instance.\n\t *\n\t * @param {Object} [conversionApi] Interface passed by dispatcher to the events calls.\n\t */\n\tconstructor( conversionApi = {} ) {\n\t\t/**\n\t\t * Interface passed by dispatcher to the events callbacks.\n\t\t *\n\t\t * @member {Object}\n\t\t */\n\t\tthis.conversionApi = extend( { dispatcher: this }, conversionApi );\n\t}\n\n\t/**\n\t * Takes {@link module:engine/model/differ~Differ model differ} object with buffered changes and fires conversion basing on it.\n\t *\n\t * @param {module:engine/model/differ~Differ} differ Differ object with buffered changes.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertChanges( differ, writer ) {\n\t\t// Before the view is updated, remove markers which have changed.\n\t\tfor ( const change of differ.getMarkersToRemove() ) {\n\t\t\tthis.convertMarkerRemove( change.name, change.range, writer );\n\t\t}\n\n\t\t// Convert changes that happened on model tree.\n\t\tfor ( const entry of differ.getChanges() ) {\n\t\t\tif ( entry.type == 'insert' ) {\n\t\t\t\tthis.convertInsert( Range._createFromPositionAndShift( entry.position, entry.length ), writer );\n\t\t\t} else if ( entry.type == 'remove' ) {\n\t\t\t\tthis.convertRemove( entry.position, entry.length, entry.name, writer );\n\t\t\t} else {\n\t\t\t\t// entry.type == 'attribute'.\n\t\t\t\tthis.convertAttribute( entry.range, entry.attributeKey, entry.attributeOldValue, entry.attributeNewValue, writer );\n\t\t\t}\n\t\t}\n\n\t\t// After the view is updated, convert markers which have changed.\n\t\tfor ( const change of differ.getMarkersToAdd() ) {\n\t\t\tthis.convertMarkerAdd( change.name, change.range, writer );\n\t\t}\n\t}\n\n\t/**\n\t * Starts conversion of a range insertion.\n\t *\n\t * For each node in the range, {@link #event:insert insert event is fired}. For each attribute on each node,\n\t * {@link #event:attribute attribute event is fired}.\n\t *\n\t * @fires insert\n\t * @fires attribute\n\t * @param {module:engine/model/range~Range} range Inserted range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertInsert( range, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list of things that can be consumed, consisting of nodes and their attributes.\n\t\tthis.conversionApi.consumable = this._createInsertConsumable( range );\n\n\t\t// Fire a separate insert event for each node and text fragment contained in the range.\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\t\t\tconst itemRange = Range._createFromPositionAndShift( value.previousPosition, value.length );\n\t\t\tconst data = {\n\t\t\t\titem,\n\t\t\t\trange: itemRange\n\t\t\t};\n\n\t\t\tthis._testAndFire( 'insert', data );\n\n\t\t\t// Fire a separate addAttribute event for each attribute that was set on inserted items.\n\t\t\t// This is important because most attributes converters will listen only to add/change/removeAttribute events.\n\t\t\t// If we would not add this part, attributes on inserted nodes would not be converted.\n\t\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\t\tdata.attributeKey = key;\n\t\t\t\tdata.attributeOldValue = null;\n\t\t\t\tdata.attributeNewValue = item.getAttribute( key );\n\n\t\t\t\tthis._testAndFire( `attribute:${ key }`, data );\n\t\t\t}\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Fires conversion of a single node removal. Fires {@link #event:remove remove event} with provided data.\n\t *\n\t * @param {module:engine/model/position~Position} position Position from which node was removed.\n\t * @param {Number} length Offset size of removed node.\n\t * @param {String} name Name of removed node.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertRemove( position, length, name, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\tthis.fire( 'remove:' + name, { position, length }, this.conversionApi );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts conversion of attribute change on given `range`.\n\t *\n\t * For each node in the given `range`, {@link #event:attribute attribute event} is fired with the passed data.\n\t *\n\t * @fires attribute\n\t * @param {module:engine/model/range~Range} range Changed range.\n\t * @param {String} key Key of the attribute that has changed.\n\t * @param {*} oldValue Attribute value before the change or `null` if the attribute has not been set before.\n\t * @param {*} newValue New attribute value or `null` if the attribute has been removed.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertAttribute( range, key, oldValue, newValue, writer ) {\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create a list with attributes to consume.\n\t\tthis.conversionApi.consumable = this._createConsumableForRange( range, `attribute:${ key }` );\n\n\t\t// Create a separate attribute event for each node in the range.\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\t\t\tconst itemRange = Range._createFromPositionAndShift( value.previousPosition, value.length );\n\t\t\tconst data = {\n\t\t\t\titem,\n\t\t\t\trange: itemRange,\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: oldValue,\n\t\t\t\tattributeNewValue: newValue\n\t\t\t};\n\n\t\t\tthis._testAndFire( `attribute:${ key }`, data );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Starts model selection conversion.\n\t *\n\t * Fires events for given {@link module:engine/model/selection~Selection selection} to start selection conversion.\n\t *\n\t * @fires selection\n\t * @fires addMarker\n\t * @fires attribute\n\t * @param {module:engine/model/selection~Selection} selection Selection to convert.\n\t * @param {Array.<module:engine/model/markercollection~Marker>} markers Array of markers containing model markers.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertSelection( selection, markers, writer ) {\n\t\tconst markersAtSelection = Array.from( markers.getMarkersAtPosition( selection.getFirstPosition() ) );\n\n\t\tthis.conversionApi.writer = writer;\n\t\tthis.conversionApi.consumable = this._createSelectionConsumable( selection, markersAtSelection );\n\n\t\tthis.fire( 'selection', { selection }, this.conversionApi );\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const marker of markersAtSelection ) {\n\t\t\tconst markerRange = marker.getRange();\n\n\t\t\tif ( !shouldMarkerChangeBeConverted( selection.getFirstPosition(), marker, this.conversionApi.mapper ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst data = {\n\t\t\t\titem: selection,\n\t\t\t\tmarkerName: marker.name,\n\t\t\t\tmarkerRange\n\t\t\t};\n\n\t\t\tif ( this.conversionApi.consumable.test( selection, 'addMarker:' + marker.name ) ) {\n\t\t\t\tthis.fire( 'addMarker:' + marker.name, data, this.conversionApi );\n\t\t\t}\n\t\t}\n\n\t\tfor ( const key of selection.getAttributeKeys() ) {\n\t\t\tconst data = {\n\t\t\t\titem: selection,\n\t\t\t\trange: selection.getFirstRange(),\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: null,\n\t\t\t\tattributeNewValue: selection.getAttribute( key )\n\t\t\t};\n\n\t\t\t// Do not fire event if the attribute has been consumed.\n\t\t\tif ( this.conversionApi.consumable.test( selection, 'attribute:' + data.attributeKey ) ) {\n\t\t\t\tthis.fire( 'attribute:' + data.attributeKey, data, this.conversionApi );\n\t\t\t}\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Converts added marker. Fires {@link #event:addMarker addMarker} event for each item\n\t * in marker's range. If range is collapsed single event is dispatched. See event description for more details.\n\t *\n\t * @fires addMarker\n\t * @param {String} markerName Marker name.\n\t * @param {module:engine/model/range~Range} markerRange Marker range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertMarkerAdd( markerName, markerRange, writer ) {\n\t\t// Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\n\t\tif ( !markerRange.root.document || markerRange.root.rootName == '$graveyard' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// In markers' case, event name == consumable name.\n\t\tconst eventName = 'addMarker:' + markerName;\n\n\t\t// When range is collapsed - fire single event with collapsed range in consumable.\n\t\tif ( markerRange.isCollapsed ) {\n\t\t\tconst consumable = new Consumable();\n\t\t\tconsumable.add( markerRange, eventName );\n\n\t\t\tthis.conversionApi.consumable = consumable;\n\n\t\t\tthis.fire( eventName, { markerName, markerRange }, this.conversionApi );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Create consumable for each item in range.\n\t\tthis.conversionApi.consumable = this._createConsumableForRange( markerRange, eventName );\n\n\t\t// Create separate event for each node in the range.\n\t\tfor ( const item of markerRange.getItems() ) {\n\t\t\t// Do not fire event for already consumed items.\n\t\t\tif ( !this.conversionApi.consumable.test( item, eventName ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst data = { item, range: Range._createOn( item ), markerName, markerRange };\n\n\t\t\tthis.fire( eventName, data, this.conversionApi );\n\t\t}\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Fires conversion of marker removal. Fires {@link #event:removeMarker removeMarker} event with provided data.\n\t *\n\t * @fires removeMarker\n\t * @param {String} markerName Marker name.\n\t * @param {module:engine/model/range~Range} markerRange Marker range.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n\t */\n\tconvertMarkerRemove( markerName, markerRange, writer ) {\n\t\t// Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\n\t\tif ( !markerRange.root.document || markerRange.root.rootName == '$graveyard' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.conversionApi.writer = writer;\n\n\t\tthis.fire( 'removeMarker:' + markerName, { markerName, markerRange }, this.conversionApi );\n\n\t\tthis._clearConversionApi();\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume from given range,\n\t * assuming that the range has just been inserted to the model.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Inserted range.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createInsertConsumable( range ) {\n\t\tconst consumable = new Consumable();\n\n\t\tfor ( const value of range ) {\n\t\t\tconst item = value.item;\n\n\t\t\tconsumable.add( item, 'insert' );\n\n\t\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\t\tconsumable.add( item, 'attribute:' + key );\n\t\t\t}\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume for given range.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Affected range.\n\t * @param {String} type Consumable type.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createConsumableForRange( range, type ) {\n\t\tconst consumable = new Consumable();\n\n\t\tfor ( const item of range.getItems() ) {\n\t\t\tconsumable.add( item, type );\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with selection consumable values.\n\t *\n\t * @private\n\t * @param {module:engine/model/selection~Selection} selection Selection to create consumable from.\n\t * @param {Iterable.<module:engine/model/markercollection~Marker>} markers Markers which contains selection.\n\t * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n\t */\n\t_createSelectionConsumable( selection, markers ) {\n\t\tconst consumable = new Consumable();\n\n\t\tconsumable.add( selection, 'selection' );\n\n\t\tfor ( const marker of markers ) {\n\t\t\tconsumable.add( selection, 'addMarker:' + marker.name );\n\t\t}\n\n\t\tfor ( const key of selection.getAttributeKeys() ) {\n\t\t\tconsumable.add( selection, 'attribute:' + key );\n\t\t}\n\n\t\treturn consumable;\n\t}\n\n\t/**\n\t * Tests passed `consumable` to check whether given event can be fired and if so, fires it.\n\t *\n\t * @private\n\t * @fires insert\n\t * @fires attribute\n\t * @param {String} type Event type.\n\t * @param {Object} data Event data.\n\t */\n\t_testAndFire( type, data ) {\n\t\tif ( !this.conversionApi.consumable.test( data.item, type ) ) {\n\t\t\t// Do not fire event if the item was consumed.\n\t\t\treturn;\n\t\t}\n\n\t\tconst name = data.item.name || '$text';\n\n\t\tthis.fire( type + ':' + name, data, this.conversionApi );\n\t}\n\n\t/**\n\t * Clears conversion API object.\n\t *\n\t * @private\n\t */\n\t_clearConversionApi() {\n\t\tdelete this.conversionApi.writer;\n\t\tdelete this.conversionApi.consumable;\n\t}\n\n\t/**\n\t * Fired for inserted nodes.\n\t *\n\t * `insert` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `insert:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been inserted,\n\t * or {@link module:engine/model/element~Element#name name} of inserted element.\n\t *\n\t * This way listeners can either listen to a general `insert` event or specific event (for example `insert:paragraph`).\n\t *\n\t * @event insert\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item} data.item Inserted item.\n\t * @param {module:engine/model/range~Range} data.range Range spanning over inserted item.\n\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired for removed nodes.\n\t *\n\t * `remove` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `remove:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been removed,\n\t * or the {@link module:engine/model/element~Element#name name} of removed element.\n\t *\n\t * This way listeners can either listen to a general `remove` event or specific event (for example `remove:paragraph`).\n\t *\n\t * @event remove\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/position~Position} data.position Position from which the node has been removed.\n\t * @param {Number} data.length Offset size of the removed node.\n\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired in the following cases:\n\t *\n\t * * when an attribute has been added, changed, or removed from a node,\n\t * * when a node with an attribute is inserted,\n\t * * when collapsed model selection attribute is converted.\n\t *\n\t * `attribute` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `attribute:attributeKey:name`. `attributeKey` is the key of added/changed/removed attribute.\n\t * `name` is either `'$text'` if change was on {@link module:engine/model/text~Text a text node},\n\t * or the {@link module:engine/model/element~Element#name name} of element which attribute has changed.\n\t *\n\t * This way listeners can either listen to a general `attribute:bold` event or specific event (for example `attribute:src:image`).\n\t *\n\t * @event attribute\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item|module:engine/model/documentselection~DocumentSelection} data.item Changed item\n\t * or converted selection.\n\t * @param {module:engine/model/range~Range} data.range Range spanning over changed item or selection range.\n\t * @param {String} data.attributeKey Attribute key.\n\t * @param {*} data.attributeOldValue Attribute value before the change. This is `null` when selection attribute is converted.\n\t * @param {*} data.attributeNewValue New attribute value.\n\t * @param {module:engine/conversion/modelconsumable~ModelConsumable} consumable Values to consume.\n\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired for {@link module:engine/model/selection~Selection selection} changes.\n\t *\n\t * @event selection\n\t * @param {module:engine/model/selection~Selection} selection Selection that is converted.\n\t * @param {module:engine/conversion/modelconsumable~ModelConsumable} consumable Values to consume.\n\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when a new marker is added to the model. Also fired when collapsed model selection that is inside marker is converted.\n\t *\n\t * `addMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `addMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `addMarker:foo` or `addMarker:foo:abc` and\n\t * `addMarker:foo:bar` events.\n\t *\n\t * If the marker range is not collapsed:\n\t *\n\t * * the event is fired for each item in the marker range one by one,\n\t * * consumables object includes each item of the marker range and the consumable value is same as event name.\n\t *\n\t * If the marker range is collapsed:\n\t *\n\t * * there is only one event,\n\t * * consumables object includes marker range with event name.\n\t *\n\t * If selection inside a marker is converted:\n\t *\n\t * * there is only one event,\n\t * * consumables object includes selection instance with event name.\n\t *\n\t * @event addMarker\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/item~Item|module:engine/model/selection~Selection} data.item Item inside the new marker or\n\t * the selection that is being converted.\n\t * @param {module:engine/model/range~Range} [data.range] Range spanning over converted item. Available only in marker conversion, if\n\t * the marker range was not collapsed.\n\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\n\t * @param {String} data.markerName Marker name.\n\t * @param {module:engine/conversion/modelconsumable~ModelConsumable} consumable Values to consume.\n\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n\n\t/**\n\t * Fired when marker is removed from the model.\n\t *\n\t * `removeMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n\t * `removeMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n\t * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `removeMarker:foo` or `removeMarker:foo:abc` and\n\t * `removeMarker:foo:bar` events.\n\t *\n\t * @event removeMarker\n\t * @param {Object} data Additional information about the change.\n\t * @param {module:engine/model/range~Range} data.markerRange Marker range.\n\t * @param {String} data.markerName Marker name.\n\t * @param {Object} conversionApi Conversion interface to be used by callback, passed in `DowncastDispatcher` constructor.\n\t */\n}\n\nmix( DowncastDispatcher, EmitterMixin );\n\n// Helper function, checks whether change of `marker` at `modelPosition` should be converted. Marker changes are not\n// converted if they happen inside an element with custom conversion method.\n//\n// @param {module:engine/model/position~Position} modelPosition\n// @param {module:engine/model/markercollection~Marker} marker\n// @param {module:engine/conversion/mapper~Mapper} mapper\n// @returns {Boolean}\nfunction shouldMarkerChangeBeConverted( modelPosition, marker, mapper ) {\n\tconst range = marker.getRange();\n\tconst ancestors = Array.from( modelPosition.getAncestors() );\n\tancestors.shift(); // Remove root element. It cannot be passed to `model.Range#containsItem`.\n\tancestors.reverse();\n\n\tconst hasCustomHandling = ancestors.some( element => {\n\t\tif ( range.containsItem( element ) ) {\n\t\t\tconst viewElement = mapper.toViewElement( element );\n\n\t\t\treturn !!viewElement.getCustomProperty( 'addHighlight' );\n\t\t}\n\t} );\n\n\treturn !hasCustomHandling;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/selection\n */\n\nimport Position from './position';\nimport Element from './element';\nimport Node from './node';\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * Selection is a set of {@link module:engine/model/range~Range ranges}. It has a direction specified by its\n * {@link module:engine/model/selection~Selection#anchor anchor} and {@link module:engine/model/selection~Selection#focus focus}\n * (it can be {@link module:engine/model/selection~Selection#isBackward forward or backward}).\n * Additionally, selection may have its own attributes (think – whether text typed in in this selection\n * should have those attributes – e.g. whether you type a bolded text).\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Selection {\n\t/**\n\t * Creates a new selection instance\n\t * based on the given {@link module:engine/model/selection~Selection selection},\n\t * or based on the given {@link module:engine/model/range~Range range},\n\t * or based on an iterable collection of {@link module:engine/model/range~Range ranges}\n\t * or at the given {@link module:engine/model/position~Position position},\n\t * or on the given {@link module:engine/model/element~Element element},\n\t * or creates an empty selection if no arguments were passed.\n\t *\n\t *\t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\tconst selection = writer.createSelection( documentSelection );\n\t *\n\t *\t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates selection at the given offset in the given element.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t * Selection's constructor allow passing additional options (`'backward'`) as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/position~Position|module:engine/model/element~Element|\n\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tconstructor( selectable, placeOrOffset, options ) {\n\t\t/**\n\t\t * Specifies whether the last added range was added as a backward or forward range.\n\t\t *\n\t\t * @private\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._lastRangeBackward = false;\n\n\t\t/**\n\t\t * Stores selection ranges.\n\t\t *\n\t\t * @protected\n\t\t * @type {Array.<module:engine/model/range~Range>}\n\t\t */\n\t\tthis._ranges = [];\n\n\t\t/**\n\t\t * List of attributes set on current selection.\n\t\t *\n\t\t * @protected\n\t\t * @type {Map.<String,*>}\n\t\t */\n\t\tthis._attrs = new Map();\n\n\t\tif ( selectable ) {\n\t\t\tthis.setTo( selectable, placeOrOffset, options );\n\t\t}\n\t}\n\n\t/**\n\t * Selection anchor. Anchor is the position from which the selection was started. If a user is making a selection\n\t * by dragging the mouse, the anchor is where the user pressed the mouse button (the beggining of the selection).\n\t *\n\t * Anchor and {@link #focus} define the direction of the selection, which is important\n\t * when expanding/shrinking selection. The focus moves, while the anchor should remain in the same place.\n\t *\n\t * Anchor is always set to the {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the last of selection's ranges. Whether it is\n\t * the `start` or `end` depends on the specified `options.backward`. See the {@link #setTo `setTo()`} method.\n\t *\n\t * May be set to `null` if there are no ranges in the selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.end : range.start;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Selection focus. Focus is the position where the selection ends. If a user is making a selection\n\t * by dragging the mouse, the focus is where the mouse cursor is.\n\t *\n\t * May be set to `null` if there are no ranges in the selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\tif ( this._ranges.length > 0 ) {\n\t\t\tconst range = this._ranges[ this._ranges.length - 1 ];\n\n\t\t\treturn this._lastRangeBackward ? range.start : range.end;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Whether the selection is collapsed. Selection is collapsed when there is exactly one range in it\n\t * and it is collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\tif ( length === 1 ) {\n\t\t\treturn this._ranges[ 0 ].isCollapsed;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the number of ranges in the selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._ranges.length;\n\t}\n\n\t/**\n\t * Specifies whether the selection's {@link #focus} precedes the selection's {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn !this.isCollapsed && this._lastRangeBackward;\n\t}\n\n\t/**\n\t * Checks whether this selection is equal to the given selection. Selections are equal if they have the same directions,\n\t * the same number of ranges and all ranges from one selection equal to ranges from the another selection.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} otherSelection\n\t * Selection to compare with.\n\t * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n\t */\n\tisEqual( otherSelection ) {\n\t\tif ( this.rangeCount != otherSelection.rangeCount ) {\n\t\t\treturn false;\n\t\t} else if ( this.rangeCount === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( !this.anchor.isEqual( otherSelection.anchor ) || !this.focus.isEqual( otherSelection.focus ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const thisRange of this._ranges ) {\n\t\t\tlet found = false;\n\n\t\t\tfor ( const otherRange of otherSelection._ranges ) {\n\t\t\t\tif ( thisRange.isEqual( otherRange ) ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( !found ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns an iterable object that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\t* getRanges() {\n\t\tfor ( const range of this._ranges ) {\n\t\t\tyield new Range( range.start, range.end );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\tlet first = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !first || range.start.isBefore( first.start ) ) {\n\t\t\t\tfirst = range;\n\t\t\t}\n\t\t}\n\n\t\treturn first ? new Range( first.start, first.end ) : null;\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\tlet last = null;\n\n\t\tfor ( const range of this._ranges ) {\n\t\t\tif ( !last || range.end.isAfter( last.end ) ) {\n\t\t\t\tlast = range;\n\t\t\t}\n\t\t}\n\n\t\treturn last ? new Range( last.start, last.end ) : null;\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\tconst first = this.getFirstRange();\n\n\t\treturn first ? first.start.clone() : null;\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\tconst lastRange = this.getLastRange();\n\n\t\treturn lastRange ? lastRange.end.clone() : null;\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selection selection}, {@link module:engine/model/position~Position position},\n\t * {@link module:engine/model/element~Element element}, {@link module:engine/model/position~Position position},\n\t * {@link module:engine/model/range~Range range}, an iterable of {@link module:engine/model/range~Range ranges} or null.\n\t *\n\t *\t\t// Removes all selection's ranges.\n\t *\t\tselection.setTo( null );\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tselection.setTo( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tselection.setTo( ranges );\n\t *\n\t *\t\t// Sets selection to other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tselection.setTo( otherSelection );\n\t *\n\t *\t\t// Sets selection to the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = new DocumentSelection( doc );\n\t *\t\tselection.setTo( documentSelection );\n\t *\n\t *\t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tselection.setTo( position );\n\t *\n\t *\t\t// Sets collapsed selection at the position of the given node and an offset.\n\t *\t\tselection.setTo( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t *\t\tselection.setTo( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\tselection.setTo( paragraph, 'on' );\n\t *\n\t * `Selection#setTo()`' method allow passing additional options (`backward`) as the last argument.\n\t *\n\t *\t\t// Sets backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/position~Position|module:engine/model/node~Node|\n\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tsetTo( selectable, placeOrOffset, options ) {\n\t\tif ( selectable === null ) {\n\t\t\tthis._setRanges( [] );\n\t\t} else if ( selectable instanceof Selection ) {\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable && typeof selectable.getRanges == 'function' ) {\n\t\t\t// We assume that the selectable is a DocumentSelection.\n\t\t\t// It can't be imported here, because it would lead to circular imports.\n\t\t\tthis._setRanges( selectable.getRanges(), selectable.isBackward );\n\t\t} else if ( selectable instanceof Range ) {\n\t\t\tthis._setRanges( [ selectable ], !!placeOrOffset && !!placeOrOffset.backward );\n\t\t} else if ( selectable instanceof Position ) {\n\t\t\tthis._setRanges( [ new Range( selectable ) ] );\n\t\t} else if ( selectable instanceof Node ) {\n\t\t\tconst backward = !!options && !!options.backward;\n\t\t\tlet range;\n\n\t\t\tif ( placeOrOffset == 'in' ) {\n\t\t\t\trange = Range._createIn( selectable );\n\t\t\t} else if ( placeOrOffset == 'on' ) {\n\t\t\t\trange = Range._createOn( selectable );\n\t\t\t} else if ( placeOrOffset !== undefined ) {\n\t\t\t\trange = new Range( Position._createAt( selectable, placeOrOffset ) );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * selection.setTo requires the second parameter when the first parameter is a node.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-setTo-required-second-parameter\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-setTo-required-second-parameter: ' +\n\t\t\t\t\t'selection.setTo requires the second parameter when the first parameter is a node.' );\n\t\t\t}\n\n\t\t\tthis._setRanges( [ range ], backward );\n\t\t} else if ( isIterable( selectable ) ) {\n\t\t\t// We assume that the selectable is an iterable of ranges.\n\t\t\tthis._setRanges( selectable, placeOrOffset && !!placeOrOffset.backward );\n\t\t} else {\n\t\t\t/**\n\t\t\t * Cannot set selection to given place.\n\t\t\t *\n\t\t\t * @error model-selection-setTo-not-selectable\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'model-selection-setTo-not-selectable: Cannot set selection to given place.' );\n\t\t}\n\t}\n\n\t/**\n\t * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n\t * is treated like the last added range and is used to set {@link module:engine/model/selection~Selection#anchor} and\n\t * {@link module:engine/model/selection~Selection#focus}. Accepts a flag describing in which direction the selection is made.\n\t *\n\t * @protected\n\t * @fires change:range\n\t * @param {Iterable.<module:engine/model/range~Range>} newRanges Ranges to set.\n\t * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end (`false`)\n\t * or backward - from end to start (`true`).\n\t */\n\t_setRanges( newRanges, isLastBackward = false ) {\n\t\tnewRanges = Array.from( newRanges );\n\n\t\t// Check whether there is any range in new ranges set that is different than all already added ranges.\n\t\tconst anyNewRange = newRanges.some( newRange => {\n\t\t\tif ( !( newRange instanceof Range ) ) {\n\t\t\t\t/**\n\t\t\t\t * Selection range set to an object that is not an instance of {@link module:engine/model/range~Range}.\n\t\t\t\t *\n\t\t\t\t * Only {@link module:engine/model/range~Range} instances can be used to set a selection.\n\t\t\t\t * Common mistakes leading to this error are:\n\t\t\t\t *\n\t\t\t\t * * using DOM `Range` object,\n\t\t\t\t * * incorrect CKEditor 5 installation with multiple `ckeditor5-engine` packages having different versions.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-set-ranges-not-range\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-set-ranges-not-range: ' +\n\t\t\t\t\t'Selection range set to an object that is not an instance of model.Range.'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn this._ranges.every( oldRange => {\n\t\t\t\treturn !oldRange.isEqual( newRange );\n\t\t\t} );\n\t\t} );\n\n\t\t// Don't do anything if nothing changed.\n\t\tif ( newRanges.length === this._ranges.length && !anyNewRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._removeAllRanges();\n\n\t\tfor ( const range of newRanges ) {\n\t\t\tthis._pushRange( range );\n\t\t}\n\n\t\tthis._lastRangeBackward = !!isLastBackward;\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/selection~Selection#focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n\t *\n\t * @fires change:range\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tsetFocus( itemOrPosition, offset ) {\n\t\tif ( this.anchor === null ) {\n\t\t\t/**\n\t\t\t * Cannot set selection focus if there are no ranges in selection.\n\t\t\t *\n\t\t\t * @error model-selection-setFocus-no-ranges\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.'\n\t\t\t);\n\t\t}\n\n\t\tconst newFocus = Position._createAt( itemOrPosition, offset );\n\n\t\tif ( newFocus.compareWith( this.focus ) == 'same' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst anchor = this.anchor;\n\n\t\tif ( this._ranges.length ) {\n\t\t\tthis._popRange();\n\t\t}\n\n\t\tif ( newFocus.compareWith( anchor ) == 'before' ) {\n\t\t\tthis._pushRange( new Range( newFocus, anchor ) );\n\t\t\tthis._lastRangeBackward = true;\n\t\t} else {\n\t\t\tthis._pushRange( new Range( anchor, newFocus ) );\n\t\t\tthis._lastRangeBackward = false;\n\t\t}\n\n\t\tthis.fire( 'change:range', { directChange: true } );\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._attrs.get( key );\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._attrs.entries();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._attrs.keys();\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._attrs.has( key );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t *\n\t * If given attribute was set on the selection, fires the {@link #event:change:range} event with\n\t * removed attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to remove.\n\t */\n\tremoveAttribute( key ) {\n\t\tif ( this.hasAttribute( key ) ) {\n\t\t\tthis._attrs.delete( key );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * If the attribute value has changed, fires the {@link #event:change:range} event with\n\t * the attribute key.\n\t *\n\t * @fires change:attribute\n\t * @param {String} key Key of attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\tsetAttribute( key, value ) {\n\t\tif ( this.getAttribute( key ) !== value ) {\n\t\t\tthis._attrs.set( key, value );\n\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: [ key ], directChange: true } );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\tif ( this.rangeCount !== 1 ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = this.getFirstRange();\n\t\tconst nodeAfterStart = range.start.nodeAfter;\n\t\tconst nodeBeforeEnd = range.end.nodeBefore;\n\n\t\treturn ( nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ) ? nodeAfterStart : null;\n\t}\n\n\t/**\n\t * Gets elements of type \"block\" touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` always returns the deepest block.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs:\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<quote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</quote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterable.<module:engine/model/element~Element>}\n\t */\n\t* getSelectedBlocks() {\n\t\tconst visited = new WeakSet();\n\n\t\tfor ( const range of this.getRanges() ) {\n\t\t\tconst startBlock = getParentBlock( range.start, visited );\n\n\t\t\tif ( startBlock ) {\n\t\t\t\tyield startBlock;\n\t\t\t}\n\n\t\t\tfor ( const value of range.getWalker() ) {\n\t\t\t\tif ( value.type == 'elementEnd' && isUnvisitedBlockContainer( value.item, visited ) ) {\n\t\t\t\t\tyield value.item;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst endBlock = getParentBlock( range.end, visited );\n\n\t\t\t// #984. Don't return the end block if the range ends right at its beginning.\n\t\t\tif ( endBlock && !range.end.isTouching( Position._createAt( endBlock, 0 ) ) ) {\n\t\t\t\tyield endBlock;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element = this.anchor.root ) {\n\t\tconst limitStartPosition = Position._createAt( element, 0 );\n\t\tconst limitEndPosition = Position._createAt( element, 'end' );\n\n\t\treturn limitStartPosition.isTouching( this.getFirstPosition() ) &&\n\t\t\tlimitEndPosition.isTouching( this.getLastPosition() );\n\t}\n\n\t/**\n\t * Adds given range to internal {@link #_ranges ranges array}. Throws an error\n\t * if given range is intersecting with any range that is already stored in this selection.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to add.\n\t */\n\t_pushRange( range ) {\n\t\tthis._checkRange( range );\n\t\tthis._ranges.push( new Range( range.start, range.end ) );\n\t}\n\n\t/**\n\t * Checks if given range intersects with ranges that are already in the selection. Throws an error if it does.\n\t *\n\t * @protected\n\t * @param {module:engine/model/range~Range} range Range to check.\n\t */\n\t_checkRange( range ) {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tif ( range.isIntersecting( this._ranges[ i ] ) ) {\n\t\t\t\t/**\n\t\t\t\t * Trying to add a range that intersects with another range in the selection.\n\t\t\t\t *\n\t\t\t\t * @error model-selection-range-intersects\n\t\t\t\t * @param {module:engine/model/range~Range} addedRange Range that was added to the selection.\n\t\t\t\t * @param {module:engine/model/range~Range} intersectingRange Range in the selection that intersects with `addedRange`.\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-selection-range-intersects: Trying to add a range that intersects with another range in the selection.',\n\t\t\t\t\t{ addedRange: range, intersectingRange: this._ranges[ i ] }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Deletes ranges from internal range array. Uses {@link #_popRange _popRange} to\n\t * ensure proper ranges removal.\n\t *\n\t * @protected\n\t */\n\t_removeAllRanges() {\n\t\twhile ( this._ranges.length > 0 ) {\n\t\t\tthis._popRange();\n\t\t}\n\t}\n\n\t/**\n\t * Removes most recently added range from the selection.\n\t *\n\t * @protected\n\t */\n\t_popRange() {\n\t\tthis._ranges.pop();\n\t}\n\n\t/**\n\t * Fired when selection range(s) changed.\n\t *\n\t * @event change:range\n\t * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n\t * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n\t * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n\t * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n\t * changed because the structure of the model has been changed (which means an indirect change).\n\t * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n\t * which mean that they are not updated once the document changes.\n\t */\n\n\t/**\n\t * Fired when selection attribute changed.\n\t *\n\t * @event change:attribute\n\t * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n\t * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n\t * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n\t * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n\t * changed in the model and its attributes were refreshed (which means an indirect change).\n\t * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n\t * which mean that they are not updated once the document changes.\n\t * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n\t */\n}\n\nmix( Selection, EmitterMixin );\n\n// Checks whether the given element extends $block in the schema and has a parent (is not a root).\n// Marks it as already visited.\nfunction isUnvisitedBlockContainer( element, visited ) {\n\tif ( visited.has( element ) ) {\n\t\treturn false;\n\t}\n\n\tvisited.add( element );\n\n\treturn element.document.model.schema.isBlock( element ) && element.parent;\n}\n\n// Finds the lowest element in position's ancestors which is a block.\n// Marks all ancestors as already visited to not include any of them later on.\nfunction getParentBlock( position, visited ) {\n\tconst ancestors = position.parent.getAncestors( { parentFirst: true, includeSelf: true } );\n\tconst block = ancestors.find( element => isUnvisitedBlockContainer( element, visited ) );\n\n\t// Mark all ancestors of this position's parent, because find() might've stopped early and\n\t// the found block may be a child of another block.\n\tancestors.forEach( element => visited.add( element ) );\n\n\treturn block;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/liverange\n */\n\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * `LiveRange` is a type of {@link module:engine/model/range~Range Range}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Be very careful when dealing with `LiveRange`. Each `LiveRange` instance bind events that might\n * have to be unbound. Use {@link module:engine/model/liverange~LiveRange#detach detach} whenever you don't need `LiveRange` anymore.\n */\nexport default class LiveRange extends Range {\n\t/**\n\t * Creates a live range.\n\t *\n\t * @see module:engine/model/range~Range\n\t */\n\tconstructor( start, end ) {\n\t\tsuper( start, end );\n\n\t\tbindWithDocument.call( this );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by `LiveRange`. Use it whenever you don't need `LiveRange` instance\n\t * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n\t * referring to it).\n\t */\n\tdetach() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/range~Range range instance} that is equal to this live range.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\ttoRange() {\n\t\treturn new Range( this.start, this.end );\n\t}\n\n\t/**\n\t * Creates a `LiveRange` instance that is equal to the given range.\n\t *\n\t * @param {module:engine/model/range~Range} range\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\tstatic fromRange( range ) {\n\t\treturn new LiveRange( range.start, range.end );\n\t}\n\n\t/**\n\t * @see module:engine/model/range~Range._createIn\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liverange~LiveRange._createIn\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * @see module:engine/model/range~Range._createOn\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liverange~LiveRange._createOn\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * @see module:engine/model/range~Range._createFromPositionAndShift\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liverange~LiveRange._createFromPositionAndShift\n\t * @param {module:engine/model/position~Position} position\n\t * @param {Number} shift\n\t * @returns {module:engine/model/liverange~LiveRange}\n\t */\n\n\t/**\n\t * Fired when `LiveRange` instance boundaries have changed due to changes in the\n\t * {@link module:engine/model/document~Document document}.\n\t *\n\t * @event change:range\n\t * @param {module:engine/model/range~Range} oldRange Range with start and end position equal to start and end position of this live\n\t * range before it got changed.\n\t * @param {Object} data Object with additional information about the change.\n\t * @param {module:engine/model/position~Position|null} data.deletionPosition Source position for remove and merge changes.\n\t * Available if the range was moved to the graveyard root, `null` otherwise.\n\t */\n\n\t/**\n\t * Fired when `LiveRange` instance boundaries have not changed after a change in {@link module:engine/model/document~Document document}\n\t * but the change took place inside the range, effectively changing its content.\n\t *\n\t * @event change:content\n\t * @param {module:engine/model/range~Range} range Range with start and end position equal to start and end position of\n\t * change range.\n\t * @param {Object} data Object with additional information about the change.\n\t * @param {null} data.deletionPosition Due to the nature of this event, this property is always set to `null`. It is passed\n\t * for compatibility with the {@link module:engine/model/liverange~LiveRange#event:change:range} event.\n\t */\n}\n\n// Binds this `LiveRange` to the {@link module:engine/model/document~Document document}\n// that owns this range's {@link module:engine/model/range~Range#root root}.\n//\n// @private\nfunction bindWithDocument() {\n\tthis.listenTo(\n\t\tthis.root.document.model,\n\t\t'applyOperation',\n\t\t( event, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransform.call( this, operation );\n\t\t},\n\t\t{ priority: 'low' }\n\t);\n}\n\n// Updates this range accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\nfunction transform( operation ) {\n\t// Transform the range by the operation. Join the result ranges if needed.\n\tconst ranges = this.getTransformedByOperation( operation );\n\tconst result = Range._createFromRanges( ranges );\n\n\tconst boundariesChanged = !result.isEqual( this );\n\tconst contentChanged = doesOperationChangeRangeContent( this, operation );\n\n\tlet deletionPosition = null;\n\n\tif ( boundariesChanged ) {\n\t\t// If range boundaries have changed, fire `change:range` event.\n\t\t//\n\t\tif ( result.root.rootName == '$graveyard' ) {\n\t\t\t// If the range was moved to the graveyard root, set `deletionPosition`.\n\t\t\tif ( operation.type == 'remove' ) {\n\t\t\t\tdeletionPosition = operation.sourcePosition;\n\t\t\t} else {\n\t\t\t\t// Merge operation.\n\t\t\t\tdeletionPosition = operation.deletionPosition;\n\t\t\t}\n\t\t}\n\n\t\tconst oldRange = this.toRange();\n\n\t\tthis.start = result.start;\n\t\tthis.end = result.end;\n\n\t\tthis.fire( 'change:range', oldRange, { deletionPosition } );\n\t} else if ( contentChanged ) {\n\t\t// If range boundaries have not changed, but there was change inside the range, fire `change:content` event.\n\t\tthis.fire( 'change:content', this.toRange(), { deletionPosition } );\n\t}\n}\n\n// Checks whether given operation changes something inside the range (even if it does not change boundaries).\n//\n// @private\n// @param {module:engine/model/range~Range} range Range to check.\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\n// @returns {Boolean}\nfunction doesOperationChangeRangeContent( range, operation ) {\n\tswitch ( operation.type ) {\n\t\tcase 'insert':\n\t\t\treturn range.containsPosition( operation.position );\n\t\tcase 'move':\n\t\tcase 'remove':\n\t\tcase 'reinsert':\n\t\tcase 'merge':\n\t\t\treturn range.containsPosition( operation.sourcePosition ) ||\n\t\t\t\trange.start.isEqual( operation.sourcePosition ) ||\n\t\t\t\trange.containsPosition( operation.targetPosition );\n\t\tcase 'split':\n\t\t\treturn range.containsPosition( operation.splitPosition ) || range.containsPosition( operation.insertionPosition );\n\t}\n\n\treturn false;\n}\n\nmix( LiveRange, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/documentselection\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n\nimport Selection from './selection';\nimport LiveRange from './liverange';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\n\nconst storePrefix = 'selection:';\n\n/**\n * `DocumentSelection` is a special selection which is used as the\n * {@link module:engine/model/document~Document#selection document's selection}.\n * There can be only one instance of `DocumentSelection` per document.\n *\n * Document selection can only be changed by using the {@link module:engine/model/writer~Writer} instance\n * inside the {@link module:engine/model/model~Model#change `change()`} block, as it provides a secure way to modify model.\n *\n * `DocumentSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n * to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n *\n * Differences between {@link module:engine/model/selection~Selection} and `DocumentSelection` are:\n * * there is always a range in `DocumentSelection` - even if no ranges were added there is a \"default range\"\n * present in the selection,\n * * ranges added to this selection updates automatically when the document changes,\n * * attributes of `DocumentSelection` are updated automatically according to selection ranges.\n *\n * Since `DocumentSelection` uses {@link module:engine/model/liverange~LiveRange live ranges}\n * and is updated when {@link module:engine/model/document~Document document}\n * changes, it cannot be set on {@link module:engine/model/node~Node nodes}\n * that are inside {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n * If you need to represent a selection in document fragment,\n * use {@link module:engine/model/selection~Selection Selection class} instead.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class DocumentSelection {\n\t/**\n\t * Creates an empty live selection for given {@link module:engine/model/document~Document}.\n\t *\n\t * @param {module:engine/model/document~Document} doc Document which owns this selection.\n\t */\n\tconstructor( doc ) {\n\t\t/**\n\t\t * Selection used internally by that class (`DocumentSelection` is a proxy to that selection).\n\t\t *\n\t\t * @protected\n\t\t */\n\t\tthis._selection = new LiveSelection( doc );\n\n\t\tthis._selection.delegate( 'change:range' ).to( this );\n\t\tthis._selection.delegate( 'change:attribute' ).to( this );\n\t}\n\n\t/**\n\t * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n\t * collapsed.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isCollapsed() {\n\t\treturn this._selection.isCollapsed;\n\t}\n\n\t/**\n\t * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.\n\t * Together with {@link #focus} they define the direction of selection, which is important\n\t * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or\n\t * {@link module:engine/model/range~Range#end end} position of the most recently added range.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #focus\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget anchor() {\n\t\treturn this._selection.anchor;\n\t}\n\n\t/**\n\t * Selection focus. Focus is a position where the selection ends.\n\t *\n\t * Is set to `null` if there are no ranges in selection.\n\t *\n\t * @see #anchor\n\t * @readonly\n\t * @type {module:engine/model/position~Position|null}\n\t */\n\tget focus() {\n\t\treturn this._selection.focus;\n\t}\n\n\t/**\n\t * Returns number of ranges in selection.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget rangeCount() {\n\t\treturn this._selection.rangeCount;\n\t}\n\n\t/**\n\t * Describes whether `Documentselection` has own range(s) set, or if it is defaulted to\n\t * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget hasOwnRange() {\n\t\treturn this._selection.hasOwnRange;\n\t}\n\n\t/**\n\t * Specifies whether the {@link #focus}\n\t * precedes {@link #anchor}.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isBackward() {\n\t\treturn this._selection.isBackward;\n\t}\n\n\t/**\n\t * Describes whether the gravity is overridden (using {@link module:engine/model/writer~Writer#overrideSelectionGravity}) or not.\n\t *\n\t * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.\n\t *\n\t * @readonly\n\t * @returns {Boolean}\n\t */\n\tget isGravityOverridden() {\n\t\treturn this._selection.isGravityOverridden;\n\t}\n\n\t/**\n\t * Used for the compatibility with the {@link module:engine/model/selection~Selection#isEqual} method.\n\t *\n\t * @protected\n\t */\n\tget _ranges() {\n\t\treturn this._selection._ranges;\n\t}\n\n\t/**\n\t * Returns an iterable that iterates over copies of selection ranges.\n\t *\n\t * @returns {Iterable.<module:engine/model/range~Range>}\n\t */\n\tgetRanges() {\n\t\treturn this._selection.getRanges();\n\t}\n\n\t/**\n\t * Returns the first position in the selection.\n\t * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetFirstPosition() {\n\t\treturn this._selection.getFirstPosition();\n\t}\n\n\t/**\n\t * Returns the last position in the selection.\n\t * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n\t * any other position in the selection.\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/position~Position|null}\n\t */\n\tgetLastPosition() {\n\t\treturn this._selection.getLastPosition();\n\t}\n\n\t/**\n\t * Returns a copy of the first range in the selection.\n\t * First range is the one which {@link module:engine/model/range~Range#start start} position\n\t * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n\t * (not to confuse with the first range added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetFirstRange() {\n\t\treturn this._selection.getFirstRange();\n\t}\n\n\t/**\n\t * Returns a copy of the last range in the selection.\n\t * Last range is the one which {@link module:engine/model/range~Range#end end} position\n\t * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n\t * recently added to the selection).\n\t *\n\t * Returns `null` if there are no ranges in selection.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetLastRange() {\n\t\treturn this._selection.getLastRange();\n\t}\n\n\t/**\n\t * Gets elements of type \"block\" touched by the selection.\n\t *\n\t * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n\t *\n\t * **Note:** `getSelectedBlocks()` always returns the deepest block.\n\t *\n\t * In this case the function will return exactly all 3 paragraphs:\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<quote>\n\t *\t\t\t<paragraph>b</paragraph>\n\t *\t\t</quote>\n\t *\t\t<paragraph>c]d</paragraph>\n\t *\n\t * In this case the paragraph will also be returned, despite the collapsed selection:\n\t *\n\t *\t\t<paragraph>[]a</paragraph>\n\t *\n\t * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n\t * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n\t *\n\t *\t\t<paragraph>[a</paragraph>\n\t *\t\t<paragraph>b</paragraph>\n\t *\t\t<paragraph>]c</paragraph> // this block will not be returned\n\t *\n\t * @returns {Iterator.<module:engine/model/element~Element>}\n\t */\n\tgetSelectedBlocks() {\n\t\treturn this._selection.getSelectedBlocks();\n\t}\n\n\t/**\n\t * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n\t * one range in the selection, and that range contains exactly one element.\n\t * Returns `null` if there is no selected element.\n\t *\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\tgetSelectedElement() {\n\t\treturn this._selection.getSelectedElement();\n\t}\n\n\t/**\n\t * Checks whether the selection contains the entire content of the given element. This means that selection must start\n\t * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n\t * touching the element's end.\n\t *\n\t * By default, this method will check whether the entire content of the selection's current root is selected.\n\t * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n\t *\n\t * @param {module:engine/model/element~Element} [element=this.anchor.root]\n\t * @returns {Boolean}\n\t */\n\tcontainsEntireContent( element ) {\n\t\treturn this._selection.containsEntireContent( element );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by document selection.\n\t */\n\tdestroy() {\n\t\tthis._selection.destroy();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attribute keys.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\tgetAttributeKeys() {\n\t\treturn this._selection.getAttributeKeys();\n\t}\n\n\t/**\n\t * Returns iterable that iterates over this selection's attributes.\n\t *\n\t * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n\t * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n\t *\n\t * @returns {Iterable.<*>}\n\t */\n\tgetAttributes() {\n\t\treturn this._selection.getAttributes();\n\t}\n\n\t/**\n\t * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n\t *\n\t * @param {String} key Key of attribute to look for.\n\t * @returns {*} Attribute value or `undefined`.\n\t */\n\tgetAttribute( key ) {\n\t\treturn this._selection.getAttribute( key );\n\t}\n\n\t/**\n\t * Checks if the selection has an attribute for given key.\n\t *\n\t * @param {String} key Key of attribute to check.\n\t * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n\t */\n\thasAttribute( key ) {\n\t\treturn this._selection.hasAttribute( key );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionFocus} method.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelectionFocus\n\t * @protected\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\t_setFocus( itemOrPosition, offset ) {\n\t\tthis._selection.setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Sets this selection's ranges and direction to the specified location based on the given\n\t * {@link module:engine/model/selection~Selection selection}, {@link module:engine/model/position~Position position},\n\t * {@link module:engine/model/node~Node node}, {@link module:engine/model/position~Position position},\n\t * {@link module:engine/model/range~Range range}, an iterable of {@link module:engine/model/range~Range ranges} or null.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelection} method.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelection\n\t * @protected\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/position~Position|module:engine/model/node~Node|\n\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\t_setTo( selectable, placeOrOffset, options ) {\n\t\tthis._selection.setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionAttribute} method.\n\t *\n\t * @see module:engine/model/writer~Writer#setSelectionAttribute\n\t * @protected\n\t * @param {String} key Key of the attribute to set.\n\t * @param {*} value Attribute value.\n\t */\n\t_setAttribute( key, value ) {\n\t\tthis._selection.setAttribute( key, value );\n\t}\n\n\t/**\n\t * Removes an attribute with given key from the selection.\n\t * If the given attribute was set on the selection, fires the {@link module:engine/model/selection~Selection#event:change:range}\n\t * event with removed attribute key.\n\t * Should be used only within the {@link module:engine/model/writer~Writer#removeSelectionAttribute} method.\n\t *\n\t * @see module:engine/model/writer~Writer#removeSelectionAttribute\n\t * @protected\n\t * @param {String} key Key of the attribute to remove.\n\t */\n\t_removeAttribute( key ) {\n\t\tthis._selection.removeAttribute( key );\n\t}\n\n\t/**\n\t * Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n\t *\n\t * @protected\n\t * @returns {Iterable.<*>}\n\t */\n\t_getStoredAttributes() {\n\t\treturn this._selection._getStoredAttributes();\n\t}\n\n\t/**\n\t * Temporarily changes the gravity of the selection from the left to the right.\n\t *\n\t * The gravity defines from which direction the selection inherits its attributes. If it's the default left\n\t * gravity, the selection (after being moved by the the user) inherits attributes from its left hand side.\n\t * This method allows to temporarily override this behavior by forcing the gravity to the right.\n\t *\n\t * It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n\t * of the process.\n\t *\n\t * @see module:engine/model/writer~Writer#overrideSelectionGravity\n\t * @protected\n\t * @returns {String} The unique id which allows restoring the gravity.\n\t */\n\t_overrideGravity() {\n\t\treturn this._selection.overrideGravity();\n\t}\n\n\t/**\n\t * Restores the {@link ~DocumentSelection#_overrideGravity overridden gravity}.\n\t *\n\t * Restoring the gravity is only possible using the unique identifier returned by\n\t * {@link ~DocumentSelection#_overrideGravity}. Note that the gravity remains overridden as long as won't be restored\n\t * the same number of times it was overridden.\n\t *\n\t * @see module:engine/model/writer~Writer#restoreSelectionGravity\n\t * @protected\n\t * @param {String} uid The unique id returned by {@link #_overrideGravity}.\n\t */\n\t_restoreGravity( uid ) {\n\t\tthis._selection.restoreGravity( uid );\n\t}\n\n\t/**\n\t * Generates and returns an attribute key for selection attributes store, basing on original attribute key.\n\t *\n\t * @protected\n\t * @param {String} key Attribute key to convert.\n\t * @returns {String} Converted attribute key, applicable for selection store.\n\t */\n\tstatic _getStoreAttributeKey( key ) {\n\t\treturn storePrefix + key;\n\t}\n\n\t/**\n\t * Checks whether the given attribute key is an attribute stored on an element.\n\t *\n\t * @protected\n\t * @param {String} key\n\t * @returns {Boolean}\n\t */\n\tstatic _isStoreAttributeKey( key ) {\n\t\treturn key.startsWith( storePrefix );\n\t}\n}\n\nmix( DocumentSelection, EmitterMixin );\n\n/**\n * Fired when selection range(s) changed.\n *\n * @event change:range\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed because the structure of the model has been changed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n */\n\n/**\n * Fired when selection attribute changed.\n *\n * @event change:attribute\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed in the model and its attributes were refreshed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n */\n\n// `LiveSelection` is used internally by {@link module:engine/model/documentselection~DocumentSelection} and shouldn't be used directly.\n//\n// LiveSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n// to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n//\n// Differences between {@link module:engine/model/selection~Selection} and `LiveSelection` are:\n// * there is always a range in `LiveSelection` - even if no ranges were added there is a \"default range\"\n// present in the selection,\n// * ranges added to this selection updates automatically when the document changes,\n// * attributes of `LiveSelection` are updated automatically according to selection ranges.\n//\n// @extends module:engine/model/selection~Selection\n//\n\nclass LiveSelection extends Selection {\n\t// Creates an empty live selection for given {@link module:engine/model/document~Document}.\n\t// @param {module:engine/model/document~Document} doc Document which owns this selection.\n\tconstructor( doc ) {\n\t\tsuper();\n\n\t\t// Document which owns this selection.\n\t\t//\n\t\t// @protected\n\t\t// @member {module:engine/model/model~Model}\n\t\tthis._model = doc.model;\n\n\t\t// Document which owns this selection.\n\t\t//\n\t\t// @protected\n\t\t// @member {module:engine/model/document~Document}\n\t\tthis._document = doc;\n\n\t\t// Keeps mapping of attribute name to priority with which the attribute got modified (added/changed/removed)\n\t\t// last time. Possible values of priority are: `'low'` and `'normal'`.\n\t\t//\n\t\t// Priorities are used by internal `LiveSelection` mechanisms. All attributes set using `LiveSelection`\n\t\t// attributes API are set with `'normal'` priority.\n\t\t//\n\t\t// @private\n\t\t// @member {Map} module:engine/model/liveselection~LiveSelection#_attributePriority\n\t\tthis._attributePriority = new Map();\n\n\t\t// Contains data required to fix ranges which have been moved to the graveyard.\n\t\t// @private\n\t\t// @member {Array} module:engine/model/liveselection~LiveSelection#_fixGraveyardRangesData\n\t\tthis._fixGraveyardRangesData = [];\n\n\t\t// Flag that informs whether the selection ranges have changed. It is changed on true when `LiveRange#change:range` event is fired.\n\t\t// @private\n\t\t// @member {Array} module:engine/model/liveselection~LiveSelection#_hasChangedRange\n\t\tthis._hasChangedRange = false;\n\n\t\t// Each overriding gravity adds an UID to the set and each removal removes it.\n\t\t// Gravity is overridden when there's at least one UID in the set.\n\t\t// Gravity is restored when the set is empty.\n\t\t// This is to prevent conflicts when gravity is overridden by more than one feature at the same time.\n\t\t// @private\n\t\t// @type {Set}\n\t\tthis._overriddenGravityRegister = new Set();\n\n\t\t// Add events that will ensure selection correctness.\n\t\tthis.on( 'change:range', () => {\n\t\t\tfor ( const range of this.getRanges() ) {\n\t\t\t\tif ( !this._document._validateSelectionRange( range ) ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Range from {@link module:engine/model/documentselection~DocumentSelection document selection}\n\t\t\t\t\t * starts or ends at incorrect position.\n\t\t\t\t\t *\n\t\t\t\t\t * @error document-selection-wrong-position\n\t\t\t\t\t * @param {module:engine/model/range~Range} range\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'document-selection-wrong-position: Range from document selection starts or ends at incorrect position.',\n\t\t\t\t\t\t{ range }\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\tthis.listenTo( this._document, 'change', ( evt, batch ) => {\n\t\t\t// Update selection's attributes.\n\t\t\tthis._updateAttributes( false );\n\n\t\t\t// Clear selection attributes from element if no longer empty.\n\t\t\tclearAttributesStoredInElement( this._model, batch );\n\t\t} );\n\n\t\tthis.listenTo( this._model, 'applyOperation', () => {\n\t\t\twhile ( this._fixGraveyardRangesData.length ) {\n\t\t\t\tconst { liveRange, sourcePosition } = this._fixGraveyardRangesData.shift();\n\n\t\t\t\tthis._fixGraveyardSelection( liveRange, sourcePosition );\n\t\t\t}\n\n\t\t\tif ( this._hasChangedRange ) {\n\t\t\t\tthis._hasChangedRange = false;\n\n\t\t\t\tthis.fire( 'change:range', { directChange: false } );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\tget isCollapsed() {\n\t\tconst length = this._ranges.length;\n\n\t\treturn length === 0 ? this._document._getDefaultRange().isCollapsed : super.isCollapsed;\n\t}\n\n\tget anchor() {\n\t\treturn super.anchor || this._document._getDefaultRange().start;\n\t}\n\n\tget focus() {\n\t\treturn super.focus || this._document._getDefaultRange().end;\n\t}\n\n\tget rangeCount() {\n\t\treturn this._ranges.length ? this._ranges.length : 1;\n\t}\n\n\t// Describes whether `LiveSelection` has own range(s) set, or if it is defaulted to\n\t// {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n\t//\n\t// @readonly\n\t// @type {Boolean}\n\tget hasOwnRange() {\n\t\treturn this._ranges.length > 0;\n\t}\n\n\t// When set to `true` then selection attributes on node before the caret won't be taken\n\t// into consideration while updating selection attributes.\n\t//\n\t// @protected\n\t// @type {Boolean}\n\tget isGravityOverridden() {\n\t\treturn !!this._overriddenGravityRegister.size;\n\t}\n\n\t// Unbinds all events previously bound by live selection.\n\tdestroy() {\n\t\tfor ( let i = 0; i < this._ranges.length; i++ ) {\n\t\t\tthis._ranges[ i ].detach();\n\t\t}\n\n\t\tthis.stopListening();\n\t}\n\n\t* getRanges() {\n\t\tif ( this._ranges.length ) {\n\t\t\tyield* super.getRanges();\n\t\t} else {\n\t\t\tyield this._document._getDefaultRange();\n\t\t}\n\t}\n\n\tgetFirstRange() {\n\t\treturn super.getFirstRange() || this._document._getDefaultRange();\n\t}\n\n\tgetLastRange() {\n\t\treturn super.getLastRange() || this._document._getDefaultRange();\n\t}\n\n\tsetTo( selectable, optionsOrPlaceOrOffset, options ) {\n\t\tsuper.setTo( selectable, optionsOrPlaceOrOffset, options );\n\t\tthis._refreshAttributes();\n\t}\n\n\tsetFocus( itemOrPosition, offset ) {\n\t\tsuper.setFocus( itemOrPosition, offset );\n\t\tthis._refreshAttributes();\n\t}\n\n\tsetAttribute( key, value ) {\n\t\tif ( this._setAttribute( key, value ) ) {\n\t\t\t// Fire event with exact data.\n\t\t\tconst attributeKeys = [ key ];\n\t\t\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\n\t\t}\n\t}\n\n\tremoveAttribute( key ) {\n\t\tif ( this._removeAttribute( key ) ) {\n\t\t\t// Fire event with exact data.\n\t\t\tconst attributeKeys = [ key ];\n\t\t\tthis.fire( 'change:attribute', { attributeKeys, directChange: true } );\n\t\t}\n\t}\n\n\toverrideGravity() {\n\t\tconst overrideUid = uid();\n\n\t\t// Remember that another overriding has been requested. It will need to be removed\n\t\t// before the gravity is to be restored.\n\t\tthis._overriddenGravityRegister.add( overrideUid );\n\n\t\tif ( this._overriddenGravityRegister.size === 1 ) {\n\t\t\tthis._refreshAttributes();\n\t\t}\n\n\t\treturn overrideUid;\n\t}\n\n\trestoreGravity( uid ) {\n\t\tif ( !this._overriddenGravityRegister.has( uid ) ) {\n\t\t\t/**\n\t\t\t * Restoring gravity for an unknown UID is not possible. Make sure you are using a correct\n\t\t\t * UID obtained from the {@link module:engine/model/writer~Writer#overrideSelectionGravity} to restore.\n\t\t\t *\n\t\t\t * @error document-selection-gravity-wrong-restore\n\t\t\t * @param {String} uid The unique identifier returned by {@link #overrideGravity}.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'document-selection-gravity-wrong-restore: Attempting to restore the selection gravity for an unknown UID.',\n\t\t\t\t{ uid }\n\t\t\t);\n\t\t}\n\n\t\tthis._overriddenGravityRegister.delete( uid );\n\n\t\t// Restore gravity only when all overriding have been restored.\n\t\tif ( !this.isGravityOverridden ) {\n\t\t\tthis._refreshAttributes();\n\t\t}\n\t}\n\n\t// Removes all attributes from the selection and sets attributes according to the surrounding nodes.\n\t_refreshAttributes() {\n\t\tthis._updateAttributes( true );\n\t}\n\n\t_popRange() {\n\t\tthis._ranges.pop().detach();\n\t}\n\n\t_pushRange( range ) {\n\t\tconst liveRange = this._prepareRange( range );\n\n\t\t// `undefined` is returned when given `range` is in graveyard root.\n\t\tif ( liveRange ) {\n\t\t\tthis._ranges.push( liveRange );\n\t\t}\n\t}\n\n\t// Prepares given range to be added to selection. Checks if it is correct,\n\t// converts it to {@link module:engine/model/liverange~LiveRange LiveRange}\n\t// and sets listeners listening to the range's change event.\n\t//\n\t// @private\n\t// @param {module:engine/model/range~Range} range\n\t_prepareRange( range ) {\n\t\tthis._checkRange( range );\n\n\t\tif ( range.root == this._document.graveyard ) {\n\t\t\t/**\n\t\t\t * Trying to add a Range that is in the graveyard root. Range rejected.\n\t\t\t *\n\t\t\t * @warning model-selection-range-in-graveyard\n\t\t\t */\n\t\t\tlog.warn( 'model-selection-range-in-graveyard: Trying to add a Range that is in the graveyard root. Range rejected.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst liveRange = LiveRange.fromRange( range );\n\n\t\tliveRange.on( 'change:range', ( evt, oldRange, data ) => {\n\t\t\tthis._hasChangedRange = true;\n\n\t\t\t// If `LiveRange` is in whole moved to the graveyard, save necessary data. It will be fixed on `Model#applyOperation` event.\n\t\t\tif ( liveRange.root == this._document.graveyard ) {\n\t\t\t\tthis._fixGraveyardRangesData.push( {\n\t\t\t\t\tliveRange,\n\t\t\t\t\tsourcePosition: data.deletionPosition\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\treturn liveRange;\n\t}\n\n\t// Updates this selection attributes according to its ranges and the {@link module:engine/model/document~Document model document}.\n\t//\n\t// @protected\n\t// @param {Boolean} clearAll\n\t// @fires change:attribute\n\t_updateAttributes( clearAll ) {\n\t\tconst newAttributes = toMap( this._getSurroundingAttributes() );\n\t\tconst oldAttributes = toMap( this.getAttributes() );\n\n\t\tif ( clearAll ) {\n\t\t\t// If `clearAll` remove all attributes and reset priorities.\n\t\t\tthis._attributePriority = new Map();\n\t\t\tthis._attrs = new Map();\n\t\t} else {\n\t\t\t// If not, remove only attributes added with `low` priority.\n\t\t\tfor ( const [ key, priority ] of this._attributePriority ) {\n\t\t\t\tif ( priority == 'low' ) {\n\t\t\t\t\tthis._attrs.delete( key );\n\t\t\t\t\tthis._attributePriority.delete( key );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._setAttributesTo( newAttributes );\n\n\t\t// Let's evaluate which attributes really changed.\n\t\tconst changed = [];\n\n\t\t// First, loop through all attributes that are set on selection right now.\n\t\t// Check which of them are different than old attributes.\n\t\tfor ( const [ newKey, newValue ] of this.getAttributes() ) {\n\t\t\tif ( !oldAttributes.has( newKey ) || oldAttributes.get( newKey ) !== newValue ) {\n\t\t\t\tchanged.push( newKey );\n\t\t\t}\n\t\t}\n\n\t\t// Then, check which of old attributes got removed.\n\t\tfor ( const [ oldKey ] of oldAttributes ) {\n\t\t\tif ( !this.hasAttribute( oldKey ) ) {\n\t\t\t\tchanged.push( oldKey );\n\t\t\t}\n\t\t}\n\n\t\t// Fire event with exact data (fire only if anything changed).\n\t\tif ( changed.length > 0 ) {\n\t\t\tthis.fire( 'change:attribute', { attributeKeys: changed, directChange: false } );\n\t\t}\n\t}\n\n\t// Internal method for setting `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n\t// parameter).\n\t//\n\t// @private\n\t// @param {String} key Attribute key.\n\t// @param {*} value Attribute value.\n\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n\t// is caused by `Batch` API.\n\t// @returns {Boolean} Whether value has changed.\n\t_setAttribute( key, value, directChange = true ) {\n\t\tconst priority = directChange ? 'normal' : 'low';\n\n\t\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\n\t\t\t// Priority too low.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst oldValue = super.getAttribute( key );\n\n\t\t// Don't do anything if value has not changed.\n\t\tif ( oldValue === value ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._attrs.set( key, value );\n\n\t\t// Update priorities map.\n\t\tthis._attributePriority.set( key, priority );\n\n\t\treturn true;\n\t}\n\n\t// Internal method for removing `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n\t// parameter).\n\t//\n\t// NOTE: Even if attribute is not present in the selection but is provided to this method, it's priority will\n\t// be changed according to `directChange` parameter.\n\t//\n\t// @private\n\t// @param {String} key Attribute key.\n\t// @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n\t// is caused by `Batch` API.\n\t// @returns {Boolean} Whether attribute was removed. May not be true if such attributes didn't exist or the\n\t// existing attribute had higher priority.\n\t_removeAttribute( key, directChange = true ) {\n\t\tconst priority = directChange ? 'normal' : 'low';\n\n\t\tif ( priority == 'low' && this._attributePriority.get( key ) == 'normal' ) {\n\t\t\t// Priority too low.\n\t\t\treturn false;\n\t\t}\n\n\t\t// Update priorities map.\n\t\tthis._attributePriority.set( key, priority );\n\n\t\t// Don't do anything if value has not changed.\n\t\tif ( !super.hasAttribute( key ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._attrs.delete( key );\n\n\t\treturn true;\n\t}\n\n\t// Internal method for setting multiple `LiveSelection` attributes. Supports attribute priorities (through\n\t// `directChange` parameter).\n\t//\n\t// @private\n\t// @param {Map.<String,*>} attrs Iterable object containing attributes to be set.\n\t// @returns {Set.<String>} Changed attribute keys.\n\t_setAttributesTo( attrs ) {\n\t\tconst changed = new Set();\n\n\t\tfor ( const [ oldKey, oldValue ] of this.getAttributes() ) {\n\t\t\t// Do not remove attribute if attribute with same key and value is about to be set.\n\t\t\tif ( attrs.get( oldKey ) === oldValue ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// All rest attributes will be removed so changed attributes won't change .\n\t\t\tthis._removeAttribute( oldKey, false );\n\t\t}\n\n\t\tfor ( const [ key, value ] of attrs ) {\n\t\t\t// Attribute may not be set because of attributes or because same key/value is already added.\n\t\t\tconst gotAdded = this._setAttribute( key, value, false );\n\n\t\t\tif ( gotAdded ) {\n\t\t\t\tchanged.add( key );\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\t// Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n\t//\n\t// @protected\n\t// @returns {Iterable.<*>}\n\t* _getStoredAttributes() {\n\t\tconst selectionParent = this.getFirstPosition().parent;\n\n\t\tif ( this.isCollapsed && selectionParent.isEmpty ) {\n\t\t\tfor ( const key of selectionParent.getAttributeKeys() ) {\n\t\t\t\tif ( key.startsWith( storePrefix ) ) {\n\t\t\t\t\tconst realKey = key.substr( storePrefix.length );\n\n\t\t\t\t\tyield [ realKey, selectionParent.getAttribute( key ) ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Checks model text nodes that are closest to the selection's first position and returns attributes of first\n\t// found element. If there are no text nodes in selection's first position parent, it returns selection\n\t// attributes stored in that parent.\n\t//\n\t// @private\n\t// @returns {Iterable.<*>} Collection of attributes.\n\t_getSurroundingAttributes() {\n\t\tconst position = this.getFirstPosition();\n\t\tconst schema = this._model.schema;\n\n\t\tlet attrs = null;\n\n\t\tif ( !this.isCollapsed ) {\n\t\t\t// 1. If selection is a range...\n\t\t\tconst range = this.getFirstRange();\n\n\t\t\t// ...look for a first character node in that range and take attributes from it.\n\t\t\tfor ( const value of range ) {\n\t\t\t\t// If the item is an object, we don't want to get attributes from its children.\n\t\t\t\tif ( value.item.is( 'element' ) && schema.isObject( value.item ) ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// This is not an optimal solution because of https://github.com/ckeditor/ckeditor5-engine/issues/454.\n\t\t\t\t// It can be done better by using `break;` instead of checking `attrs === null`.\n\t\t\t\tif ( value.type == 'text' && attrs === null ) {\n\t\t\t\t\tattrs = value.item.getAttributes();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// 2. If the selection is a caret or the range does not contain a character node...\n\n\t\t\tconst nodeBefore = position.textNode ? position.textNode : position.nodeBefore;\n\t\t\tconst nodeAfter = position.textNode ? position.textNode : position.nodeAfter;\n\n\t\t\t// When gravity is overridden then don't take node before into consideration.\n\t\t\tif ( !this.isGravityOverridden ) {\n\t\t\t\t// ...look at the node before caret and take attributes from it if it is a character node.\n\t\t\t\tattrs = getAttrsIfCharacter( nodeBefore );\n\t\t\t}\n\n\t\t\t// 3. If not, look at the node after caret...\n\t\t\tif ( !attrs ) {\n\t\t\t\tattrs = getAttrsIfCharacter( nodeAfter );\n\t\t\t}\n\n\t\t\t// 4. If not, try to find the first character on the left, that is in the same node.\n\t\t\t// When gravity is overridden then don't take node before into consideration.\n\t\t\tif ( !this.isGravityOverridden && !attrs ) {\n\t\t\t\tlet node = nodeBefore;\n\n\t\t\t\twhile ( node && !attrs ) {\n\t\t\t\t\tnode = node.previousSibling;\n\t\t\t\t\tattrs = getAttrsIfCharacter( node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 5. If not found, try to find the first character on the right, that is in the same node.\n\t\t\tif ( !attrs ) {\n\t\t\t\tlet node = nodeAfter;\n\n\t\t\t\twhile ( node && !attrs ) {\n\t\t\t\t\tnode = node.nextSibling;\n\t\t\t\t\tattrs = getAttrsIfCharacter( node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 6. If not found, selection should retrieve attributes from parent.\n\t\t\tif ( !attrs ) {\n\t\t\t\tattrs = this._getStoredAttributes();\n\t\t\t}\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\t// Fixes a selection range after it ends up in graveyard root.\n\t//\n\t// @private\n\t// @param {module:engine/model/liverange~LiveRange} liveRange The range from selection, that ended up in the graveyard root.\n\t// @param {module:engine/model/position~Position} removedRangeStart Start position of a range which was removed.\n\t_fixGraveyardSelection( liveRange, removedRangeStart ) {\n\t\t// The start of the removed range is the closest position to the `liveRange` - the original selection range.\n\t\t// This is a good candidate for a fixed selection range.\n\t\tconst positionCandidate = removedRangeStart.clone();\n\n\t\t// Find a range that is a correct selection range and is closest to the start of removed range.\n\t\tconst selectionRange = this._model.schema.getNearestSelectionRange( positionCandidate );\n\n\t\t// Remove the old selection range before preparing and adding new selection range. This order is important,\n\t\t// because new range, in some cases, may intersect with old range (it depends on `getNearestSelectionRange()` result).\n\t\tconst index = this._ranges.indexOf( liveRange );\n\t\tthis._ranges.splice( index, 1 );\n\t\tliveRange.detach();\n\n\t\t// If nearest valid selection range has been found - add it in the place of old range.\n\t\tif ( selectionRange ) {\n\t\t\t// Check the range, convert it to live range, bind events, etc.\n\t\t\tconst newRange = this._prepareRange( selectionRange );\n\n\t\t\t// Add new range in the place of old range.\n\t\t\tthis._ranges.splice( index, 0, newRange );\n\t\t}\n\t\t// If nearest valid selection range cannot be found - just removing the old range is fine.\n\t}\n}\n\n// Helper function for {@link module:engine/model/liveselection~LiveSelection#_updateAttributes}.\n//\n// It takes model item, checks whether it is a text node (or text proxy) and, if so, returns it's attributes. If not, returns `null`.\n//\n// @param {module:engine/model/item~Item|null}  node\n// @returns {Boolean}\nfunction getAttrsIfCharacter( node ) {\n\tif ( node instanceof TextProxy || node instanceof Text ) {\n\t\treturn node.getAttributes();\n\t}\n\n\treturn null;\n}\n\n// Removes selection attributes from element which is not empty anymore.\n//\n// @private\n// @param {module:engine/model/model~Model} model\n// @param {module:engine/model/batch~Batch} batch\nfunction clearAttributesStoredInElement( model, batch ) {\n\tconst differ = model.document.differ;\n\n\tfor ( const entry of differ.getChanges() ) {\n\t\tif ( entry.type != 'insert' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst changeParent = entry.position.parent;\n\t\tconst isNoLongerEmpty = entry.length === changeParent.maxOffset;\n\n\t\tif ( isNoLongerEmpty ) {\n\t\t\tmodel.enqueueChange( batch, writer => {\n\t\t\t\tconst storedAttributes = Array.from( changeParent.getAttributeKeys() )\n\t\t\t\t\t.filter( key => key.startsWith( storePrefix ) );\n\n\t\t\t\tfor ( const key of storedAttributes ) {\n\t\t\t\t\twriter.removeAttribute( key, changeParent );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport ModelRange from '../model/range';\nimport ModelSelection from '../model/selection';\nimport ModelElement from '../model/element';\n\nimport ViewAttributeElement from '../view/attributeelement';\nimport DocumentSelection from '../model/documentselection';\n\nimport log from '@ckeditor/ckeditor5-utils/src/log';\nimport { cloneDeep } from 'lodash-es';\n\n/**\n * Contains downcast (model-to-view) converters for {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}.\n *\n * @module engine/conversion/downcast-converters\n */\n\n/**\n * Model element to view element conversion helper.\n *\n * This conversion results in creating a view element. For example, model `<paragraph>Foo</paragraph>` becomes `<p>Foo</p>` in the view.\n *\n *\t\tdowncastElementToElement( { model: 'paragraph', view: 'p' } );\n *\n *\t\tdowncastElementToElement( { model: 'paragraph', view: 'div', converterPriority: 'high' } );\n *\n *\t\tdowncastElementToElement( {\n *\t\t\tmodel: 'fancyParagraph',\n *\t\t\tview: {\n *\t\t\t\tname: 'p',\n *\t\t\t\tclasses: 'fancy'\n *\t\t\t}\n *\t\t} );\n *\n * \t\tdowncastElementToElement( {\n * \t\t\tmodel: 'heading',\n * \t\t\tview: ( modelElement, viewWriter ) => viewWriter.createContainerElement( 'h' + modelElement.getAttribute( 'level' ) )\n * \t\t} );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n * to the conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {String} config.model The name of the model element to convert.\n * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n * that takes the model element and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n * as parameters and returns a view container element.\n * @returns {Function} Conversion helper.\n */\nexport function downcastElementToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconfig.view = _normalizeToElementConfig( config.view, 'container' );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'insert:' + config.model, insertElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n/**\n * Model attribute to view element conversion helper.\n *\n * This conversion results in wrapping view nodes with a view attribute element. For example, a model text node with\n * `\"Foo\"` as data and the `bold` attribute becomes `<strong>Foo</strong>` in the view.\n *\n *\t\tdowncastAttributeToElement( { model: 'bold', view: 'strong' } );\n *\n *\t\tdowncastAttributeToElement( { model: 'bold', view: 'b', converterPriority: 'high' } );\n *\n *\t\tdowncastAttributeToElement( {\n *\t\t\tmodel: 'invert',\n *\t\t\tview: {\n *\t\t\t\tname: 'span',\n *\t\t\t\tclasses: [ 'font-light', 'bg-dark' ]\n *\t\t\t}\n *\t\t} );\n *\n *\t\tdowncastAttributeToElement( {\n *\t\t\tmodel: {\n *\t\t\t\tkey: 'fontSize',\n *\t\t\t\tvalues: [ 'big', 'small' ]\n *\t\t\t},\n *\t\t\tview: {\n *\t\t\t\tbig: {\n *\t\t\t\t\tname: 'span',\n *\t\t\t\t\tstyles: {\n *\t\t\t\t\t\t'font-size': '1.2em'\n *\t\t\t\t\t}\n *\t\t\t\t},\n *\t\t\t\tsmall: {\n *\t\t\t\t\tname: 'span',\n *\t\t\t\t\tstyles: {\n *\t\t\t\t\t\t'font-size': '0.8em'\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * \t\tdowncastAttributeToElement( {\n * \t\t\tmodel: 'bold',\n * \t\t\tview: ( modelAttributeValue, viewWriter ) => {\n * \t\t\t\treturn viewWriter.createAttributeElement( 'span', { style: 'font-weight:' + modelAttributeValue } );\n * \t\t\t}\n * \t\t} );\n *\n *\t\tdowncastAttributeToElement( {\n *\t\t\tmodel: {\n *\t\t\t\tkey: 'color',\n *\t\t\t\tname: '$text'\n *\t\t\t},\n *\t\t\tview: ( modelAttributeValue, viewWriter ) => {\n *\t\t\t\treturn viewWriter.createAttributeElement( 'span', { style: 'color:' + modelAttributeValue } );\n *\t\t\t}\n *\t\t} );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n * to the conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n * of `String`s with possible values if the model attribute is an enumerable.\n * @param {module:engine/view/elementdefinition~ElementDefinition|Function|Object} config.view A view element definition or a function\n * that takes the model attribute value and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n * as parameters and returns a view attribute element. If `config.model.values` is\n * given, `config.view` should be an object assigning values from `config.model.values` to view element definitions or functions.\n * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function downcastAttributeToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst modelKey = config.model.key ? config.model.key : config.model;\n\tlet eventName = 'attribute:' + modelKey;\n\n\tif ( config.model.name ) {\n\t\teventName += ':' + config.model.name;\n\t}\n\n\tif ( config.model.values ) {\n\t\tfor ( const modelValue of config.model.values ) {\n\t\t\tconfig.view[ modelValue ] = _normalizeToElementConfig( config.view[ modelValue ], 'attribute' );\n\t\t}\n\t} else {\n\t\tconfig.view = _normalizeToElementConfig( config.view, 'attribute' );\n\t}\n\n\tconst elementCreator = _getFromAttributeCreator( config );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, wrap( elementCreator ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n/**\n * Model attribute to view attribute conversion helper.\n *\n * This conversion results in adding an attribute to a view node, basing on an attribute from a model node. For example,\n * `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>`.\n *\n *\t\tdowncastAttributeToAttribute( { model: 'source', view: 'src' } );\n *\n *\t\tdowncastAttributeToAttribute( { model: 'source', view: 'href', converterPriority: 'high' } );\n *\n *\t\tdowncastAttributeToAttribute( {\n *\t\t\tmodel: {\n *\t\t\t\tname: 'image',\n *\t\t\t\tkey: 'source'\n *\t\t\t},\n *\t\t\tview: 'src'\n *\t\t} );\n *\n *\t\tdowncastAttributeToAttribute( {\n *\t\t\tmodel: {\n *\t\t\t\tname: 'styled',\n *\t\t\t\tvalues: [ 'dark', 'light' ]\n *\t\t\t},\n *\t\t\tview: {\n *\t\t\t\tdark: {\n *\t\t\t\t\tkey: 'class',\n *\t\t\t\t\tvalue: [ 'styled', 'styled-dark' ]\n *\t\t\t\t},\n *\t\t\t\tlight: {\n *\t\t\t\t\tkey: 'class',\n *\t\t\t\t\tvalue: [ 'styled', 'styled-light' ]\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n *\t\tdowncastAttributeToAttribute( {\n *\t\t\tmodel: 'styled',\n *\t\t\tview: modelAttributeValue => ( { key: 'class', value: 'styled-' + modelAttributeValue } )\n *\t\t} );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n * to the conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n * the attribute key, possible values and, optionally, an element name to convert from.\n * @param {String|Object|Function} config.view A view attribute key, or a `{ key, value }` object or a function that takes\n * the model attribute value and returns a `{ key, value }` object. If `key` is `'class'`, `value` can be a `String` or an\n * array of `String`s. If `key` is `'style'`, `value` is an object with key-value pairs. In other cases, `value` is a `String`.\n * If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n * `{ key, value }` objects or a functions.\n * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function downcastAttributeToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst modelKey = config.model.key ? config.model.key : config.model;\n\tlet eventName = 'attribute:' + modelKey;\n\n\tif ( config.model.name ) {\n\t\teventName += ':' + config.model.name;\n\t}\n\n\tif ( config.model.values ) {\n\t\tfor ( const modelValue of config.model.values ) {\n\t\t\tconfig.view[ modelValue ] = _normalizeToAttributeConfig( config.view[ modelValue ] );\n\t\t}\n\t} else {\n\t\tconfig.view = _normalizeToAttributeConfig( config.view );\n\t}\n\n\tconst elementCreator = _getFromAttributeCreator( config );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, changeAttribute( elementCreator ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n/**\n * Model marker to view element conversion helper.\n *\n * This conversion results in creating a view element on the boundaries of the converted marker. If the converted marker\n * is collapsed, only one element is created. For example, model marker set like this: `<paragraph>F[oo b]ar</paragraph>`\n * becomes `<p>F<span data-marker=\"search\"></span>oo b<span data-marker=\"search\"></span>ar</p>` in the view.\n *\n *\t\tdowncastMarkerToElement( { model: 'search', view: 'marker-search' } );\n *\n *\t\tdowncastMarkerToElement( { model: 'search', view: 'search-result', converterPriority: 'high' } );\n *\n *\t\tdowncastMarkerToElement( {\n *\t\t\tmodel: 'search',\n *\t\t\tview: {\n *\t\t\t\tname: 'span',\n *\t\t\t\tattributes: {\n *\t\t\t\t\t'data-marker': 'search'\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * \t\tdowncastMarkerToElement( {\n * \t\t\tmodel: 'search',\n * \t\t\tview: ( markerData, viewWriter ) => {\n *\t \t\t\treturn viewWriter.createUIElement( 'span', { 'data-marker': 'search', 'data-start': markerData.isOpening } );\n * \t\t\t}\n * \t\t} );\n *\n * If a function is passed as the `config.view` parameter, it will be used to generate both boundary elements. The function\n * receives the `data` object as a parameter and should return an instance of the\n * {@link module:engine/view/uielement~UIElement view UI element}. The `data` and `conversionApi` objects are passed from\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}. Additionally,\n * the `data.isOpening` parameter is passed, which is set to `true` for the marker start boundary element, and `false` to\n * the marker end boundary element.\n *\n * This kind of conversion is useful for saving data into the database, so it should be used in the data conversion pipeline.\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add a converter to the conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {String} config.model The name of the model marker (or model marker group) to convert.\n * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n * that takes the model marker data as a parameter and returns a view UI element.\n * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function downcastMarkerToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconfig.view = _normalizeToElementConfig( config.view, 'ui' );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'addMarker:' + config.model, insertUIElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'removeMarker:' + config.model, removeUIElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n/**\n * Model marker to highlight conversion helper.\n *\n * This conversion results in creating a highlight on view nodes. For this kind of conversion,\n * {@link module:engine/conversion/downcast-converters~HighlightDescriptor} should be provided.\n *\n * For text nodes, a `<span>` {@link module:engine/view/attributeelement~AttributeElement} is created and it wraps all text nodes\n * in the converted marker range. For example, a model marker set like this: `<paragraph>F[oo b]ar</paragraph>` becomes\n * `<p>F<span class=\"comment\">oo b</span>ar</p>` in the view.\n *\n * {@link module:engine/view/containerelement~ContainerElement} may provide a custom way of handling highlight. Most often,\n * the element itself is given classes and attributes described in the highlight descriptor (instead of being wrapped in `<span>`).\n * For example, a model marker set like this: `[<image src=\"foo.jpg\"></image>]` becomes `<img src=\"foo.jpg\" class=\"comment\"></img>`\n * in the view.\n *\n * For container elements, the conversion is two-step. While the converter processes the highlight descriptor and passes it\n * to a container element, it is the container element instance itself that applies values from the highlight descriptor.\n * So, in a sense, the converter takes care of stating what should be applied on what, while the element decides how to apply that.\n *\n *\t\tdowncastMarkerToHighlight( { model: 'comment', view: { classes: 'comment' } } );\n *\n *\t\tdowncastMarkerToHighlight( { model: 'comment', view: { classes: 'new-comment' }, converterPriority: 'high' } );\n *\n * \t\tdowncastMarkerToHighlight( {\n * \t\t\tmodel: 'comment',\n * \t\t\tview: data => {\n * \t\t\t\t// Assuming that the marker name is in a form of comment:commentType.\n *\t \t\t\tconst commentType = data.markerName.split( ':' )[ 1 ];\n *\n *\t \t\t\treturn {\n *\t \t\t\t\tclasses: [ 'comment', 'comment-' + commentType ]\n *\t \t\t\t};\n * \t\t\t}\n * \t\t} );\n *\n * If a function is passed as the `config.view` parameter, it will be used to generate the highlight descriptor. The function\n * receives the `data` object as a parameter and should return a\n * {@link module:engine/conversion/downcast-converters~HighlightDescriptor highlight descriptor}.\n * The `data` object properties are passed from {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}.\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add a converter to the conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {String} config.model The name of the model marker (or model marker group) to convert.\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor|Function} config.view A highlight descriptor\n * that will be used for highlighting or a function that takes the model marker data as a parameter and returns a highlight descriptor.\n * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function downcastMarkerToHighlight( config ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'addMarker:' + config.model, highlightText( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'addMarker:' + config.model, highlightElement( config.view ), { priority: config.converterPriority || 'normal' } );\n\t\tdispatcher.on( 'removeMarker:' + config.model, removeHighlight( config.view ), { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n// Takes `config.view`, and if it is an {@link module:engine/view/elementdefinition~ElementDefinition}, converts it\n// to a function (because lower level converters accept only element creator functions).\n//\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} view View configuration.\n// @param {'container'|'attribute'|'ui'} viewElementType View element type to create.\n// @returns {Function} Element creator function to use in lower level converters.\nfunction _normalizeToElementConfig( view, viewElementType ) {\n\tif ( typeof view == 'function' ) {\n\t\t// If `view` is already a function, don't do anything.\n\t\treturn view;\n\t}\n\n\treturn ( modelData, viewWriter ) => _createViewElementFromDefinition( view, viewWriter, viewElementType );\n}\n\n// Creates a view element instance from the provided {@link module:engine/view/elementdefinition~ElementDefinition} and class.\n//\n// @param {module:engine/view/elementdefinition~ElementDefinition} viewElementDefinition\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @param {'container'|'attribute'|'ui'} viewElementType\n// @returns {module:engine/view/element~Element}\nfunction _createViewElementFromDefinition( viewElementDefinition, viewWriter, viewElementType ) {\n\tif ( typeof viewElementDefinition == 'string' ) {\n\t\t// If `viewElementDefinition` is given as a `String`, normalize it to an object with `name` property.\n\t\tviewElementDefinition = { name: viewElementDefinition };\n\t}\n\n\tlet element;\n\tconst attributes = Object.assign( {}, viewElementDefinition.attributes );\n\n\tif ( viewElementType == 'container' ) {\n\t\telement = viewWriter.createContainerElement( viewElementDefinition.name, attributes );\n\t} else if ( viewElementType == 'attribute' ) {\n\t\tconst options = {\n\t\t\tpriority: viewElementDefinition.priority || ViewAttributeElement.DEFAULT_PRIORITY\n\t\t};\n\n\t\telement = viewWriter.createAttributeElement( viewElementDefinition.name, attributes, options );\n\t} else {\n\t\t// 'ui'.\n\t\telement = viewWriter.createUIElement( viewElementDefinition.name, attributes );\n\t}\n\n\tif ( viewElementDefinition.styles ) {\n\t\tconst keys = Object.keys( viewElementDefinition.styles );\n\n\t\tfor ( const key of keys ) {\n\t\t\tviewWriter.setStyle( key, viewElementDefinition.styles[ key ], element );\n\t\t}\n\t}\n\n\tif ( viewElementDefinition.classes ) {\n\t\tconst classes = viewElementDefinition.classes;\n\n\t\tif ( typeof classes == 'string' ) {\n\t\t\tviewWriter.addClass( classes, element );\n\t\t} else {\n\t\t\tfor ( const className of classes ) {\n\t\t\t\tviewWriter.addClass( className, element );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn element;\n}\n\nfunction _getFromAttributeCreator( config ) {\n\tif ( config.model.values ) {\n\t\treturn ( modelAttributeValue, viewWriter ) => {\n\t\t\tconst view = config.view[ modelAttributeValue ];\n\n\t\t\tif ( view ) {\n\t\t\t\treturn view( modelAttributeValue, viewWriter );\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t} else {\n\t\treturn config.view;\n\t}\n}\n\n// Takes the configuration, adds default parameters if they do not exist and normalizes other parameters to be used in downcast converters\n// for generating a view attribute.\n//\n// @param {Object} view View configuration.\nfunction _normalizeToAttributeConfig( view ) {\n\tif ( typeof view == 'string' ) {\n\t\treturn modelAttributeValue => ( { key: view, value: modelAttributeValue } );\n\t} else if ( typeof view == 'object' ) {\n\t\t// { key, value, ... }\n\t\tif ( view.value ) {\n\t\t\treturn () => view;\n\t\t}\n\t\t// { key, ... }\n\t\telse {\n\t\t\treturn modelAttributeValue => ( { key: view.key, value: modelAttributeValue } );\n\t\t}\n\t} else {\n\t\t// function.\n\t\treturn view;\n\t}\n}\n\n/**\n * Function factory that creates a converter which converts node insertion changes from the model to the view.\n * The function passed will be provided with all the parameters of the dispatcher's\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert `insert` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be inserted into the view.\n *\n * The converter automatically consumes the corresponding value from the consumables list, stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}) and binds the model and view elements.\n *\n *\t\tdowncastDispatcher.on(\n *\t\t\t'insert:myElem',\n *\t\t\tinsertElement( ( modelItem, viewWriter ) => {\n *\t\t\t\tconst text = viewWriter.createText( 'myText' );\n *\t\t\t\tconst myElem = viewWriter.createElement( 'myElem', { myAttr: 'my-' + modelItem.getAttribute( 'myAttr' ) }, text );\n *\n *\t\t\t\t// Do something fancy with `myElem` using `modelItem` or other parameters.\n *\n *\t\t\t\treturn myElem;\n *\t\t\t}\n *\t\t) );\n *\n * @param {Function} elementCreator Function returning a view element, which will be inserted.\n * @returns {Function} Insert element event converter.\n */\nexport function insertElement( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewElement = elementCreator( data.item, conversionApi.writer );\n\n\t\tif ( !viewElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconversionApi.mapper.bindElements( data.item, viewElement );\n\t\tconversionApi.writer.insert( viewPosition, viewElement );\n\t};\n}\n\n/**\n * Function factory that creates a default downcast converter for text insertion changes.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'insert:$text', insertText() );\n *\n * @returns {Function} Insert text event converter.\n */\nexport function insertText() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\t\tconst viewText = viewWriter.createText( data.item.data );\n\n\t\tviewWriter.insert( viewPosition, viewText );\n\t};\n}\n\n/**\n * Function factory that creates a default downcast converter for node remove changes.\n *\n *\t\tmodelDispatcher.on( 'remove', remove() );\n *\n * @returns {Function} Remove event converter.\n */\nexport function remove() {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Find view range start position by mapping model position at which the remove happened.\n\t\tconst viewStart = conversionApi.mapper.toViewPosition( data.position );\n\n\t\tconst modelEnd = data.position.getShiftedBy( data.length );\n\t\tconst viewEnd = conversionApi.mapper.toViewPosition( modelEnd, { isPhantom: true } );\n\n\t\tconst viewRange = conversionApi.writer.createRange( viewStart, viewEnd );\n\n\t\t// Trim the range to remove in case some UI elements are on the view range boundaries.\n\t\tconst removed = conversionApi.writer.remove( viewRange.getTrimmed() );\n\n\t\t// After the range is removed, unbind all view elements from the model.\n\t\t// Range inside view document fragment is used to unbind deeply.\n\t\tfor ( const child of conversionApi.writer.createRangeIn( removed ).getItems() ) {\n\t\t\tconversionApi.mapper.unbindViewElement( child );\n\t\t}\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts marker adding change to the\n * {@link module:engine/view/uielement~UIElement view UI element}.\n *\n * The view UI element that will be added to the view depends on the passed parameter. See {@link ~insertElement}.\n * In case of a non-collapsed range, the UI element will not wrap nodes but separate elements will be placed at the beginning\n * and at the end of the range.\n *\n * This converter binds created UI elements with the marker name using {@link module:engine/conversion/mapper~Mapper#bindElementToMarker}.\n *\n * @param {module:engine/view/uielement~UIElement|Function} elementCreator A view UI element or a function returning the view element\n * that will be inserted.\n * @returns {Function} Insert element event converter.\n */\nexport function insertUIElement( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Create two view elements. One will be inserted at the beginning of marker, one at the end.\n\t\t// If marker is collapsed, only \"opening\" element will be inserted.\n\t\tdata.isOpening = true;\n\t\tconst viewStartElement = elementCreator( data, conversionApi.writer );\n\n\t\tdata.isOpening = false;\n\t\tconst viewEndElement = elementCreator( data, conversionApi.writer );\n\n\t\tif ( !viewStartElement || !viewEndElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst markerRange = data.markerRange;\n\n\t\t// Marker that is collapsed has consumable build differently that non-collapsed one.\n\t\t// For more information see `addMarker` event description.\n\t\t// If marker's range is collapsed - check if it can be consumed.\n\t\tif ( markerRange.isCollapsed && !conversionApi.consumable.consume( markerRange, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If marker's range is not collapsed - consume all items inside.\n\t\tfor ( const value of markerRange ) {\n\t\t\tif ( !conversionApi.consumable.consume( value.item, evt.name ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst mapper = conversionApi.mapper;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// Add \"opening\" element.\n\t\tviewWriter.insert( mapper.toViewPosition( markerRange.start ), viewStartElement );\n\t\tconversionApi.mapper.bindElementToMarker( viewStartElement, data.markerName );\n\n\t\t// Add \"closing\" element only if range is not collapsed.\n\t\tif ( !markerRange.isCollapsed ) {\n\t\t\tviewWriter.insert( mapper.toViewPosition( markerRange.end ), viewEndElement );\n\t\t\tconversionApi.mapper.bindElementToMarker( viewEndElement, data.markerName );\n\t\t}\n\n\t\tevt.stop();\n\t};\n}\n\n/**\n * Function factory that returns a default downcast converter for removing a {@link module:engine/view/uielement~UIElement UI element}\n * basing on marker remove change.\n *\n * This converter unbinds elements from the marker name.\n *\n * @returns {Function} Removed UI element converter.\n */\nexport function removeUIElement() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst elements = conversionApi.mapper.markerNameToElements( data.markerName );\n\n\t\tif ( !elements ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconversionApi.mapper.unbindElementsFromMarkerName( data.markerName );\n\n\t\tfor ( const element of elements ) {\n\t\t\tconversionApi.writer.clear( conversionApi.writer.createRangeOn( element ), element );\n\t\t}\n\n\t\tconversionApi.writer.clearClonedElementsGroup( data.markerName );\n\n\t\tevt.stop();\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts set/change/remove attribute changes from the model to the view.\n *\n * Attributes from the model are converted to the view element attributes in the view. You may provide a custom function to generate\n * a key-value attribute pair to add/change/remove. If not provided, model attributes will be converted to view element\n * attributes on a one-to-one basis.\n *\n * **Note:** The provided attribute creator should always return the same `key` for a given attribute from the model.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'attribute:customAttr:myElem', changeAttribute( ( value, data ) => {\n *\t\t\t// Change attribute key from `customAttr` to `class` in the view.\n *\t\t\tconst key = 'class';\n *\t\t\tlet value = data.attributeNewValue;\n *\n *\t\t\t// Force attribute value to 'empty' if the model element is empty.\n *\t\t\tif ( data.item.childCount === 0 ) {\n *\t\t\t\tvalue = 'empty';\n *\t\t\t}\n *\n *\t\t\t// Return the key-value pair.\n *\t\t\treturn { key, value };\n *\t\t} ) );\n *\n * @param {Function} [attributeCreator] Function returning an object with two properties: `key` and `value`, which\n * represent the attribute key and attribute value to be set on a {@link module:engine/view/element~Element view element}.\n * The function is passed the model attribute value as the first parameter and additional data about the change as the second parameter.\n * @returns {Function} Set/change attribute converter.\n */\nexport function changeAttribute( attributeCreator ) {\n\tattributeCreator = attributeCreator || ( ( value, data ) => ( { value, key: data.attributeKey } ) );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst oldAttribute = attributeCreator( data.attributeOldValue, data );\n\t\tconst newAttribute = attributeCreator( data.attributeNewValue, data );\n\n\t\tif ( !oldAttribute && !newAttribute ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// If model item cannot be mapped to a view element, it means item is not an `Element` instance but a `TextProxy` node.\n\t\t// Only elements can have attributes in a view so do not proceed for anything else (#1587).\n\t\tif ( !viewElement ) {\n\t\t\t/**\n\t\t\t * This error occurs when a {@link module:engine/model/textproxy~TextProxy text node's} attribute is to be downcasted\n\t\t\t * by {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `Attribute to Attribute converter`}.\n\t\t\t * In most cases it is caused by converters misconfiguration when only \"generic\" converter is defined:\n\t\t\t *\n\t\t\t *\t\teditor.conversion.for( 'downcast' ).add( downcastAttributeToAttribute( {\n\t\t\t *\t\t\tmodel: 'attribute-name',\n\t\t\t *\t\t\tview: 'attribute-name'\n\t\t\t *\t\t} ) );\n\t\t\t *\n\t\t\t * and given attribute is used on text node, for example:\n\t\t\t *\n\t\t\t *\t\tmodel.change( writer => {\n\t\t\t *\t\t\twriter.insertText( 'Foo', { 'attribute-name': 'bar' }, parent, 0 );\n\t\t\t *\t\t} );\n\t\t\t *\n\t\t\t * In such cases, to convert the same attribute for both {@link module:engine/model/element~Element}\n\t\t\t * and {@link module:engine/model/textproxy~TextProxy `Text`} nodes, text specific\n\t\t\t * {@link module:engine/conversion/conversion~Conversion#attributeToElement `Attribute to Element converter`}\n\t\t\t * with higher {@link module:utils/priorities~PriorityString priority} must also be defined:\n\t\t\t *\n\t\t\t *\t\tconversion.for( 'downcast' ).add( downcastAttributeToElement( {\n\t\t\t *\t\t\tmodel: {\n\t\t\t *\t\t\t\tkey: 'attribute-name',\n\t\t\t *\t\t\t\tname: '$text'\n\t\t\t *\t\t\t},\n\t\t\t *\t\t\tview: ( value, writer ) => {\n\t\t\t *\t\t\t\treturn writer.createAttributeElement( 'span', { 'attribute-name': value } );\n\t\t\t *\t\t\t},\n\t\t\t *\t\t\tconverterPriority: 'high'\n\t\t\t *\t\t} ) );\n\t\t\t *\n\t\t\t * @error conversion-attribute-to-attribute-on-text\n\t\t\t */\n\t\t\tlog.warn( 'conversion-attribute-to-attribute-on-text: ' +\n\t\t\t\t'Trying to convert text node\\'s attribute with attribute-to-attribute converter.' );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// First remove the old attribute if there was one.\n\t\tif ( data.attributeOldValue !== null && oldAttribute ) {\n\t\t\tif ( oldAttribute.key == 'class' ) {\n\t\t\t\tconst classes = Array.isArray( oldAttribute.value ) ? oldAttribute.value : [ oldAttribute.value ];\n\n\t\t\t\tfor ( const className of classes ) {\n\t\t\t\t\tviewWriter.removeClass( className, viewElement );\n\t\t\t\t}\n\t\t\t} else if ( oldAttribute.key == 'style' ) {\n\t\t\t\tconst keys = Object.keys( oldAttribute.value );\n\n\t\t\t\tfor ( const key of keys ) {\n\t\t\t\t\tviewWriter.removeStyle( key, viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewWriter.removeAttribute( oldAttribute.key, viewElement );\n\t\t\t}\n\t\t}\n\n\t\t// Then set the new attribute.\n\t\tif ( data.attributeNewValue !== null && newAttribute ) {\n\t\t\tif ( newAttribute.key == 'class' ) {\n\t\t\t\tconst classes = Array.isArray( newAttribute.value ) ? newAttribute.value : [ newAttribute.value ];\n\n\t\t\t\tfor ( const className of classes ) {\n\t\t\t\t\tviewWriter.addClass( className, viewElement );\n\t\t\t\t}\n\t\t\t} else if ( newAttribute.key == 'style' ) {\n\t\t\t\tconst keys = Object.keys( newAttribute.value );\n\n\t\t\t\tfor ( const key of keys ) {\n\t\t\t\t\tviewWriter.setStyle( key, newAttribute.value[ key ], viewElement );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewWriter.setAttribute( newAttribute.key, newAttribute.value, viewElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts set/change/remove attribute changes from the model to the view.\n * It can also be used to convert selection attributes. In that case, an empty attribute element will be created and the\n * selection will be put inside it.\n *\n * Attributes from the model are converted to a view element that will be wrapping these view nodes that are bound to\n * model elements having the given attribute. This is useful for attributes like `bold` that may be set on text nodes in the model\n * but are represented as an element in the view:\n *\n *\t\t[paragraph]              MODEL ====> VIEW        <p>\n *\t\t\t|- a {bold: true}                             |- <b>\n *\t\t\t|- b {bold: true}                             |   |- ab\n *\t\t\t|- c                                          |- c\n *\n * Passed `Function` will be provided with the attribute value and then all the parameters of the\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be the wrapping element.\n * When the provided `Function` does not return any element, no conversion will take place.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'attribute:bold', wrapItem( ( modelAttributeValue, viewWriter ) => {\n *\t\t\treturn viewWriter.createAttributeElement( 'strong' );\n *\t\t} );\n *\n * @param {Function} elementCreator Function returning a view element that will be used for wrapping.\n * @returns {Function} Set/change attribute converter.\n */\nexport function wrap( elementCreator ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Recreate current wrapping node. It will be used to unwrap view range if the attribute value has changed\n\t\t// or the attribute was removed.\n\t\tconst oldViewElement = elementCreator( data.attributeOldValue, conversionApi.writer );\n\n\t\t// Create node to wrap with.\n\t\tconst newViewElement = elementCreator( data.attributeNewValue, conversionApi.writer );\n\n\t\tif ( !oldViewElement && !newViewElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tif ( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) {\n\t\t\t// Selection attribute conversion.\n\t\t\tviewWriter.wrap( viewSelection.getFirstRange(), newViewElement );\n\t\t} else {\n\t\t\t// Node attribute conversion.\n\t\t\tlet viewRange = conversionApi.mapper.toViewRange( data.range );\n\n\t\t\t// First, unwrap the range from current wrapper.\n\t\t\tif ( data.attributeOldValue !== null && oldViewElement ) {\n\t\t\t\tviewRange = viewWriter.unwrap( viewRange, oldViewElement );\n\t\t\t}\n\n\t\t\tif ( data.attributeNewValue !== null && newViewElement ) {\n\t\t\t\tviewWriter.wrap( viewRange, newViewElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts the text inside marker's range. The converter wraps the text with\n * {@link module:engine/view/attributeelement~AttributeElement} created from the provided descriptor.\n * See {link module:engine/conversion/downcast-converters~createViewElementFromHighlightDescriptor}.\n *\n * It can also be used to convert the selection that is inside a marker. In that case, an empty attribute element will be\n * created and the selection will be put inside it.\n *\n * If the highlight descriptor does not provide the `priority` property, `10` will be used.\n *\n * If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n *\n * This converter binds the created {@link module:engine/view/attributeelement~AttributeElement attribute elemens} with the marker name\n * using the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n *\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor|Function} highlightDescriptor\n * @returns {Function}\n */\nexport function highlightText( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( data.markerRange.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) && !data.item.is( 'textProxy' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = _prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = createViewElementFromHighlightDescriptor( descriptor );\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tif ( data.item instanceof ModelSelection || data.item instanceof DocumentSelection ) {\n\t\t\tviewWriter.wrap( viewSelection.getFirstRange(), viewElement, viewSelection );\n\t\t} else {\n\t\t\tconst viewRange = conversionApi.mapper.toViewRange( data.range );\n\t\t\tconst rangeAfterWrap = viewWriter.wrap( viewRange, viewElement );\n\n\t\t\tfor ( const element of rangeAfterWrap.getItems() ) {\n\t\t\t\tif ( element.is( 'attributeElement' ) && element.isSimilar( viewElement ) ) {\n\t\t\t\t\tconversionApi.mapper.bindElementToMarker( element, data.markerName );\n\n\t\t\t\t\t// One attribute element is enough, because all of them are bound together by the view writer.\n\t\t\t\t\t// Mapper uses this binding to get all the elements no matter how many of them are registered in the mapper.\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Converter function factory. It creates a function which applies the marker's highlight to an element inside the marker's range.\n *\n * The converter checks if an element has the `addHighlight` function stored as a\n * {@link module:engine/view/element~Element#_setCustomProperty custom property} and, if so, uses it to apply the highlight.\n * In such case the converter will consume all element's children, assuming that they were handled by the element itself.\n *\n * When the `addHighlight` custom property is not present, the element is not converted in any special way.\n * This means that converters will proceed to convert the element's child nodes.\n *\n * If the highlight descriptor does not provide the `priority` property, `10` will be used.\n *\n * If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n *\n * This converter binds altered {@link module:engine/view/containerelement~ContainerElement container elements} with the marker name using\n * the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n *\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor|Function} highlightDescriptor\n * @returns {Function}\n */\nexport function highlightElement( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( data.markerRange.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !( data.item instanceof ModelElement ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = _prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.test( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\n\t\tif ( viewElement && viewElement.getCustomProperty( 'addHighlight' ) ) {\n\t\t\t// Consume element itself.\n\t\t\tconversionApi.consumable.consume( data.item, evt.name );\n\n\t\t\t// Consume all children nodes.\n\t\t\tfor ( const value of ModelRange._createIn( data.item ) ) {\n\t\t\t\tconversionApi.consumable.consume( value.item, evt.name );\n\t\t\t}\n\n\t\t\tviewElement.getCustomProperty( 'addHighlight' )( viewElement, descriptor, conversionApi.writer );\n\n\t\t\tconversionApi.mapper.bindElementToMarker( viewElement, data.markerName );\n\t\t}\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts the removing model marker to the view.\n *\n * Both text nodes and elements are handled by this converter but they are handled a bit differently.\n *\n * Text nodes are unwrapped using the {@link module:engine/view/attributeelement~AttributeElement attribute element} created from the\n * provided highlight descriptor. See {link module:engine/conversion/downcast-converters~HighlightDescriptor}.\n *\n * For elements, the converter checks if an element has the `removeHighlight` function stored as a\n * {@link module:engine/view/element~Element#_setCustomProperty custom property}. If so, it uses it to remove the highlight.\n * In such case, the children of that element will not be converted.\n *\n * When `removeHighlight` is not present, the element is not converted in any special way.\n * The converter will proceed to convert the element's child nodes instead.\n *\n * If the highlight descriptor does not provide the `priority` property, `10` will be used.\n *\n * If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n *\n * This converter unbinds elements from the marker name.\n *\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor|Function} highlightDescriptor\n * @returns {Function}\n */\nexport function removeHighlight( highlightDescriptor ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// This conversion makes sense only for non-collapsed range.\n\t\tif ( data.markerRange.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst descriptor = _prepareDescriptor( highlightDescriptor, data, conversionApi );\n\n\t\tif ( !descriptor ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// View element that will be used to unwrap `AttributeElement`s.\n\t\tconst viewHighlightElement = createViewElementFromHighlightDescriptor( descriptor );\n\n\t\t// Get all elements bound with given marker name.\n\t\tconst elements = conversionApi.mapper.markerNameToElements( data.markerName );\n\n\t\tif ( !elements ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconversionApi.mapper.unbindElementsFromMarkerName( data.markerName );\n\n\t\tfor ( const element of elements ) {\n\t\t\tif ( element.is( 'attributeElement' ) ) {\n\t\t\t\tconversionApi.writer.unwrap( conversionApi.writer.createRangeOn( element ), viewHighlightElement );\n\t\t\t} else {\n\t\t\t\t// if element.is( 'containerElement' ).\n\t\t\t\telement.getCustomProperty( 'removeHighlight' )( element, descriptor.id, conversionApi.writer );\n\t\t\t}\n\t\t}\n\n\t\tconversionApi.writer.clearClonedElementsGroup( data.markerName );\n\n\t\tevt.stop();\n\t};\n}\n\n// Helper function for `highlight`. Prepares the actual descriptor object using value passed to the converter.\nfunction _prepareDescriptor( highlightDescriptor, data, conversionApi ) {\n\t// If passed descriptor is a creator function, call it. If not, just use passed value.\n\tconst descriptor = typeof highlightDescriptor == 'function' ?\n\t\thighlightDescriptor( data, conversionApi ) :\n\t\thighlightDescriptor;\n\n\tif ( !descriptor ) {\n\t\treturn null;\n\t}\n\n\t// Apply default descriptor priority.\n\tif ( !descriptor.priority ) {\n\t\tdescriptor.priority = 10;\n\t}\n\n\t// Default descriptor id is marker name.\n\tif ( !descriptor.id ) {\n\t\tdescriptor.id = data.markerName;\n\t}\n\n\treturn descriptor;\n}\n\n/**\n * Creates a `<span>` {@link module:engine/view/attributeelement~AttributeElement view attribute element} from the information\n * provided by the {@link module:engine/conversion/downcast-converters~HighlightDescriptor highlight descriptor} object. If a priority\n * is not provided in the descriptor, the default priority will be used.\n *\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} descriptor\n * @returns {module:engine/view/attributeelement~AttributeElement}\n */\nexport function createViewElementFromHighlightDescriptor( descriptor ) {\n\tconst viewElement = new ViewAttributeElement( 'span', descriptor.attributes );\n\n\tif ( descriptor.classes ) {\n\t\tviewElement._addClass( descriptor.classes );\n\t}\n\n\tif ( descriptor.priority ) {\n\t\tviewElement._priority = descriptor.priority;\n\t}\n\n\tviewElement._id = descriptor.id;\n\n\treturn viewElement;\n}\n\n/**\n * An object describing how the marker highlight should be represented in the view.\n *\n * Each text node contained in a highlighted range will be wrapped in a `<span>`\n * {@link module:engine/view/attributeelement~AttributeElement view attribute element} with CSS class(es), attributes and a priority\n * described by this object.\n *\n * Additionally, each {@link module:engine/view/containerelement~ContainerElement container element} can handle displaying the highlight\n * separately by providing the `addHighlight` and `removeHighlight` custom properties. In this case:\n *\n *  * The `HighlightDescriptor` object is passed to the `addHighlight` function upon conversion and should be used to apply the highlight to\n *  the element.\n *  * The descriptor `id` is passed to the `removeHighlight` function upon conversion and should be used to remove the highlight with the\n *  given ID from the element.\n *\n * @typedef {Object} module:engine/conversion/downcast-converters~HighlightDescriptor\n *\n * @property {String|Array.<String>} classes A CSS class or an array of classes to set. If the descriptor is used to\n * create an {@link module:engine/view/attributeelement~AttributeElement attribute element} over text nodes, these classes will be set\n * on that attribute element. If the descriptor is applied to an element, usually these classes will be set on that element, however,\n * this depends on how the element converts the descriptor.\n *\n * @property {String} [id] Descriptor identifier. If not provided, it defaults to the converted marker's name.\n *\n * @property {Number} [priority] Descriptor priority. If not provided, it defaults to `10`. If the descriptor is used to create\n * an {@link module:engine/view/attributeelement~AttributeElement attribute element}, it will be that element's\n * {@link module:engine/view/attributeelement~AttributeElement#priority priority}. If the descriptor is applied to an element,\n * the priority will be used to determine which descriptor is more important.\n *\n * @property {Object} [attributes] Attributes to set. If the descriptor is used to create\n * an {@link module:engine/view/attributeelement~AttributeElement attribute element} over text nodes, these attributes will be set on that\n * attribute element. If the descriptor is applied to an element, usually these attributes will be set on that element, however,\n * this depends on how the element converts the descriptor.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/controller/editingcontroller\n */\n\nimport RootEditableElement from '../view/rooteditableelement';\nimport View from '../view/view';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { insertText, remove } from '../conversion/downcast-converters';\nimport { convertSelectionChange } from '../conversion/upcast-selection-converters';\nimport { clearAttributes, convertCollapsedSelection, convertRangeSelection } from '../conversion/downcast-selection-converters';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Controller for the editing pipeline. The editing pipeline controls {@link ~EditingController#model model} rendering,\n * including selection handling. It also creates the {@link ~EditingController#view view} which builds a\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class EditingController {\n\t/**\n\t * Creates an editing controller instance.\n\t *\n\t * @param {module:engine/model/model~Model} model Editing model.\n\t */\n\tconstructor( model ) {\n\t\t/**\n\t\t * Editor model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Editing view controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/view/view~View}\n\t\t */\n\t\tthis.view = new View();\n\n\t\t/**\n\t\t * Mapper which describes the model-view binding.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/mapper~Mapper}\n\t\t */\n\t\tthis.mapper = new Mapper();\n\n\t\t/**\n\t\t * Downcast dispatcher that converts changes from the model to {@link #view the editing view}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #downcastDispatcher\n\t\t */\n\t\tthis.downcastDispatcher = new DowncastDispatcher( {\n\t\t\tmapper: this.mapper\n\t\t} );\n\n\t\tconst doc = this.model.document;\n\t\tconst selection = doc.selection;\n\t\tconst markers = this.model.markers;\n\n\t\t// When plugins listen on model changes (on selection change, post fixers, etc) and change the view as a result of\n\t\t// model's change, they might trigger view rendering before the conversion is completed (e.g. before the selection\n\t\t// is converted). We disable rendering for the length of the outermost model change() block to prevent that.\n\t\t//\n\t\t// See  https://github.com/ckeditor/ckeditor5-engine/issues/1528\n\t\tthis.listenTo( this.model, '_beforeChanges', () => {\n\t\t\tthis.view._renderingDisabled = true;\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( this.model, '_afterChanges', () => {\n\t\t\tthis.view._renderingDisabled = false;\n\t\t\tthis.view.render();\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Whenever model document is changed, convert those changes to the view (using model.Document#differ).\n\t\t// Do it on 'low' priority, so changes are converted after other listeners did their job.\n\t\t// Also convert model selection.\n\t\tthis.listenTo( doc, 'change', () => {\n\t\t\tthis.view.change( writer => {\n\t\t\t\tthis.downcastDispatcher.convertChanges( doc.differ, writer );\n\t\t\t\tthis.downcastDispatcher.convertSelection( selection, markers, writer );\n\t\t\t} );\n\t\t}, { priority: 'low' } );\n\n\t\t// Convert selection from the view to the model when it changes in the view.\n\t\tthis.listenTo( this.view.document, 'selectionChange', convertSelectionChange( this.model, this.mapper ) );\n\n\t\t// Attach default model converters.\n\t\tthis.downcastDispatcher.on( 'insert:$text', insertText(), { priority: 'lowest' } );\n\t\tthis.downcastDispatcher.on( 'remove', remove(), { priority: 'low' } );\n\n\t\t// Attach default model selection converters.\n\t\tthis.downcastDispatcher.on( 'selection', clearAttributes(), { priority: 'low' } );\n\t\tthis.downcastDispatcher.on( 'selection', convertRangeSelection(), { priority: 'low' } );\n\t\tthis.downcastDispatcher.on( 'selection', convertCollapsedSelection(), { priority: 'low' } );\n\n\t\t// Binds {@link module:engine/view/document~Document#roots view roots collection} to\n\t\t// {@link module:engine/model/document~Document#roots model roots collection} so creating\n\t\t// model root automatically creates corresponding view root.\n\t\tthis.view.document.roots.bindTo( this.model.document.roots ).using( root => {\n\t\t\t// $graveyard is a special root that has no reflection in the view.\n\t\t\tif ( root.rootName == '$graveyard' ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst viewRoot = new RootEditableElement( root.name );\n\n\t\t\tviewRoot.rootName = root.rootName;\n\t\t\tviewRoot._document = this.view.document;\n\t\t\tthis.mapper.bindElements( root, viewRoot );\n\n\t\t\treturn viewRoot;\n\t\t} );\n\t}\n\n\t/**\n\t * Removes all event listeners attached to the `EditingController`. Destroys all objects created\n\t * by `EditingController` that need to be destroyed.\n\t */\n\tdestroy() {\n\t\tthis.view.destroy();\n\t\tthis.stopListening();\n\t}\n}\n\nmix( EditingController, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Contains {@link module:engine/view/documentselection~DocumentSelection view selection}\n * to {@link module:engine/model/selection~Selection model selection} conversion helpers.\n *\n * @module engine/conversion/upcast-selection-converters\n */\n\nimport ModelSelection from '../model/selection';\n\n/**\n * Function factory, creates a callback function which converts a {@link module:engine/view/selection~Selection\n * view selection} taken from the {@link module:engine/view/document~Document#event:selectionChange} event\n * and sets in on the {@link module:engine/model/document~Document#selection model}.\n *\n * **Note**: because there is no view selection change dispatcher nor any other advanced view selection to model\n * conversion mechanism, the callback should be set directly on view document.\n *\n *\t\tview.document.on( 'selectionChange', convertSelectionChange( modelDocument, mapper ) );\n *\n * @param {module:engine/model/model~Model} model Data model.\n * @param {module:engine/conversion/mapper~Mapper} mapper Conversion mapper.\n * @returns {Function} {@link module:engine/view/document~Document#event:selectionChange} callback function.\n */\nexport function convertSelectionChange( model, mapper ) {\n\treturn ( evt, data ) => {\n\t\tconst viewSelection = data.newSelection;\n\t\tconst modelSelection = new ModelSelection();\n\n\t\tconst ranges = [];\n\n\t\tfor ( const viewRange of viewSelection.getRanges() ) {\n\t\t\tranges.push( mapper.toModelRange( viewRange ) );\n\t\t}\n\n\t\tmodelSelection.setTo( ranges, { backward: viewSelection.isBackward } );\n\n\t\tif ( !modelSelection.isEqual( model.document.selection ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( modelSelection );\n\t\t\t} );\n\t\t}\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Contains {@link module:engine/model/selection~Selection model selection} to\n * {@link module:engine/view/documentselection~DocumentSelection view selection} converters for\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast dispatcher}.\n *\n * @module engine/conversion/downcast-selection-converters\n */\n\n/**\n * Function factory that creates a converter which converts a non-collapsed {@link module:engine/model/selection~Selection model selection}\n * to a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object and maps model positions from the selection to view positions.\n *\n *\t\tmodelDispatcher.on( 'selection', convertRangeSelection() );\n *\n * @returns {Function} Selection converter.\n */\nexport function convertRangeSelection() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst selection = data.selection;\n\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( selection, 'selection' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewRanges = [];\n\n\t\tfor ( const range of selection.getRanges() ) {\n\t\t\tconst viewRange = conversionApi.mapper.toViewRange( range );\n\t\t\tviewRanges.push( viewRange );\n\t\t}\n\n\t\tconversionApi.writer.setSelection( viewRanges, { backward: selection.isBackward } );\n\t};\n}\n\n/**\n * Function factory that creates a converter which converts a collapsed {@link module:engine/model/selection~Selection model selection} to\n * a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object, maps the model selection position to the view position and breaks\n * {@link module:engine/view/attributeelement~AttributeElement attribute elements} at the selection position.\n *\n *\t\tmodelDispatcher.on( 'selection', convertCollapsedSelection() );\n *\n * An example of the view state before and after converting the collapsed selection:\n *\n *\t\t   <p><strong>f^oo<strong>bar</p>\n *\t\t-> <p><strong>f</strong>^<strong>oo</strong>bar</p>\n *\n * By breaking attribute elements like `<strong>`, the selection is in a correct element. Then, when the selection attribute is\n * converted, broken attributes might be merged again, or the position where the selection is may be wrapped\n * with different, appropriate attribute elements.\n *\n * See also {@link module:engine/conversion/downcast-selection-converters~clearAttributes} which does a clean-up\n * by merging attributes.\n *\n * @returns {Function} Selection converter.\n */\nexport function convertCollapsedSelection() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst selection = data.selection;\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !conversionApi.consumable.consume( selection, 'selection' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst modelPosition = selection.getFirstPosition();\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( modelPosition );\n\t\tconst brokenPosition = viewWriter.breakAttributes( viewPosition );\n\n\t\tviewWriter.setSelection( brokenPosition );\n\t};\n}\n\n/**\n * Function factory that creates a converter which clears artifacts after the previous\n * {@link module:engine/model/selection~Selection model selection} conversion. It removes all empty\n * {@link module:engine/view/attributeelement~AttributeElement view attribute elements} and merges sibling attributes at all start and end\n * positions of all ranges.\n *\n *\t\t   <p><strong>^</strong></p>\n *\t\t-> <p>^</p>\n *\n *\t\t   <p><strong>foo</strong>^<strong>bar</strong>bar</p>\n *\t\t-> <p><strong>foo^bar<strong>bar</p>\n *\n *\t\t   <p><strong>foo</strong><em>^</em><strong>bar</strong>bar</p>\n *\t\t-> <p><strong>foo^bar<strong>bar</p>\n *\n * This listener should be assigned before any converter for the new selection:\n *\n *\t\tmodelDispatcher.on( 'selection', clearAttributes() );\n *\n * See {@link module:engine/conversion/downcast-selection-converters~convertCollapsedSelection}\n * which does the opposite by breaking attributes in the selection position.\n *\n * @returns {Function} Selection converter.\n */\nexport function clearAttributes() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst viewSelection = viewWriter.document.selection;\n\n\t\tfor ( const range of viewSelection.getRanges() ) {\n\t\t\t// Not collapsed selection should not have artifacts.\n\t\t\tif ( range.isCollapsed ) {\n\t\t\t\t// Position might be in the node removed by the view writer.\n\t\t\t\tif ( range.end.parent.document ) {\n\t\t\t\t\tconversionApi.writer.mergeAttributes( range.start );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tviewWriter.setSelection( null );\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/plugincollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\n\n/**\n * Manages a list of CKEditor plugins, including loading, resolving dependencies and initialization.\n */\nexport default class PluginCollection {\n\t/**\n\t * Creates an instance of the PluginCollection class.\n\t * Allows loading and initializing plugins and their dependencies.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Array.<Function>} [availablePlugins] Plugins (constructors) which the collection will be able to use\n\t * when {@link module:core/plugincollection~PluginCollection#load} is used with plugin names (strings, instead of constructors).\n\t * Usually, the editor will pass its built-in plugins to the collection so they can later be\n\t * used in `config.plugins` or `config.removePlugins` by names.\n\t */\n\tconstructor( editor, availablePlugins = [] ) {\n\t\t/**\n\t\t * @protected\n\t\t * @member {module:core/editor/editor~Editor} module:core/plugin~PluginCollection#_editor\n\t\t */\n\t\tthis._editor = editor;\n\n\t\t/**\n\t\t * Map of plugin constructors which can be retrieved by their names.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<String|Function,Function>} module:core/plugin~PluginCollection#_availablePlugins\n\t\t */\n\t\tthis._availablePlugins = new Map();\n\n\t\t/**\n\t\t * @protected\n\t\t * @member {Map} module:core/plugin~PluginCollection#_plugins\n\t\t */\n\t\tthis._plugins = new Map();\n\n\t\tfor ( const PluginConstructor of availablePlugins ) {\n\t\t\tthis._availablePlugins.set( PluginConstructor, PluginConstructor );\n\n\t\t\tif ( PluginConstructor.pluginName ) {\n\t\t\t\tthis._availablePlugins.set( PluginConstructor.pluginName, PluginConstructor );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Returns `[ PluginConstructor, pluginInstance ]` pairs.\n\t *\n\t * @returns {Iterable.<Array>}\n\t */\n\t* [ Symbol.iterator ]() {\n\t\tfor ( const entry of this._plugins ) {\n\t\t\tif ( typeof entry[ 0 ] == 'function' ) {\n\t\t\t\tyield entry;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the plugin instance by its constructor or name.\n\t *\n\t * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\n\t * @returns {module:core/plugin~PluginInterface}\n\t */\n\tget( key ) {\n\t\treturn this._plugins.get( key );\n\t}\n\n\t/**\n\t * Loads a set of plugins and adds them to the collection.\n\t *\n\t * @param {Array.<Function|String>} plugins An array of {@link module:core/plugin~PluginInterface plugin constructors}\n\t * or {@link module:core/plugin~PluginInterface.pluginName plugin names}. The second option (names) works only if\n\t * `availablePlugins` were passed to the {@link #constructor}.\n\t * @param {Array.<String|Function>} [removePlugins] Names of plugins or plugin constructors\n\t * that should not be loaded (despite being specified in the `plugins` array).\n\t * @returns {Promise} A promise which gets resolved once all plugins are loaded and available in the\n\t * collection.\n\t * @returns {Promise.<Array.<module:core/plugin~PluginInterface>>} returns.loadedPlugins The array of loaded plugins.\n\t */\n\tload( plugins, removePlugins = [] ) {\n\t\tconst that = this;\n\t\tconst editor = this._editor;\n\t\tconst loading = new Set();\n\t\tconst loaded = [];\n\n\t\tconst pluginConstructors = mapToAvailableConstructors( plugins );\n\t\tconst removePluginConstructors = mapToAvailableConstructors( removePlugins );\n\t\tconst missingPlugins = getMissingPluginNames( plugins );\n\n\t\tif ( missingPlugins ) {\n\t\t\t/**\n\t\t\t * Some plugins are not available and could not be loaded.\n\t\t\t *\n\t\t\t * Plugin classes (constructors) need to be provided to the editor before they can be loaded by name.\n\t\t\t * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n\t\t\t * property.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}**, it means\n\t\t\t * that you try to enable a plugin which was not included in that build. This may be due to a typo\n\t\t\t * in the plugin name or simply because that plugin is not a part of this build. In the latter scenario,\n\t\t\t * read more about {@glink builds/guides/development/custom-builds custom builds}.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the editor creators directly** (not a build), then it means\n\t\t\t * that you tried loading plugins by name. However, unlike CKEditor 4, CKEditor 5 does not implement a \"plugin loader\".\n\t\t\t * This means that CKEditor 5 does not know where to load the plugin modules from. Therefore, you need to\n\t\t\t * provide each plugin through reference (as a constructor function). Check out the examples in\n\t\t\t * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \"Building from source\"}.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-not-found\n\t\t\t * @param {Array.<String>} plugins The name of the plugins which could not be loaded.\n\t\t\t */\n\t\t\tconst errorMsg = 'plugincollection-plugin-not-found: Some plugins are not available and could not be loaded.';\n\n\t\t\t// Log the error so it's more visible on the console. Hopefully, for better DX.\n\t\t\tlog.error( errorMsg, { plugins: missingPlugins } );\n\n\t\t\treturn Promise.reject( new CKEditorError( errorMsg, { plugins: missingPlugins } ) );\n\t\t}\n\n\t\treturn Promise.all( pluginConstructors.map( loadPlugin ) )\n\t\t\t.then( () => loaded );\n\n\t\tfunction loadPlugin( PluginConstructor ) {\n\t\t\tif ( removePluginConstructors.includes( PluginConstructor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The plugin is already loaded or being loaded - do nothing.\n\t\t\tif ( that.get( PluginConstructor ) || loading.has( PluginConstructor ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn instantiatePlugin( PluginConstructor )\n\t\t\t\t.catch( err => {\n\t\t\t\t\t/**\n\t\t\t\t\t * It was not possible to load the plugin.\n\t\t\t\t\t *\n\t\t\t\t\t * This is a generic error logged to the console when a JavaSript error is thrown during the initialization\n\t\t\t\t\t * of one of the plugins.\n\t\t\t\t\t *\n\t\t\t\t\t * If you correctly handled the promise returned by the editor's `create()` method (like shown below)\n\t\t\t\t\t * you will find the original error logged to the console, too:\n\t\t\t\t\t *\n\t\t\t\t\t *\t\tClassicEditor.create( document.getElementById( 'editor' ) )\n\t\t\t\t\t *\t\t\t.then( editor => {\n\t\t\t\t\t *\t\t\t\t// ...\n\t\t\t\t\t * \t\t\t} )\n\t\t\t\t\t *\t\t\t.catch( error => {\n\t\t\t\t\t *\t\t\t\tconsole.error( error );\n\t\t\t\t\t *\t\t\t} );\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-load\n\t\t\t\t\t * @param {String} plugin The name of the plugin that could not be loaded.\n\t\t\t\t\t */\n\t\t\t\t\tlog.error( 'plugincollection-load: It was not possible to load the plugin.', { plugin: PluginConstructor } );\n\n\t\t\t\t\tthrow err;\n\t\t\t\t} );\n\t\t}\n\n\t\tfunction instantiatePlugin( PluginConstructor ) {\n\t\t\treturn new Promise( resolve => {\n\t\t\t\tloading.add( PluginConstructor );\n\n\t\t\t\tif ( PluginConstructor.requires ) {\n\t\t\t\t\tPluginConstructor.requires.forEach( RequiredPluginConstructorOrName => {\n\t\t\t\t\t\tconst RequiredPluginConstructor = getPluginConstructor( RequiredPluginConstructorOrName );\n\n\t\t\t\t\t\tif ( removePlugins.includes( RequiredPluginConstructor ) ) {\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Cannot load a plugin because one of its dependencies is listed in the `removePlugins` option.\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @error plugincollection-required\n\t\t\t\t\t\t\t * @param {Function} plugin The required plugin.\n\t\t\t\t\t\t\t * @param {Function} requiredBy The parent plugin.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t\t\t'plugincollection-required: Cannot load a plugin because one of its dependencies is listed in' +\n\t\t\t\t\t\t\t\t'the `removePlugins` option.',\n\t\t\t\t\t\t\t\t{ plugin: RequiredPluginConstructor, requiredBy: PluginConstructor }\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tloadPlugin( RequiredPluginConstructor );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tconst plugin = new PluginConstructor( editor );\n\t\t\t\tthat._add( PluginConstructor, plugin );\n\t\t\t\tloaded.push( plugin );\n\n\t\t\t\tresolve();\n\t\t\t} );\n\t\t}\n\n\t\tfunction getPluginConstructor( PluginConstructorOrName ) {\n\t\t\tif ( typeof PluginConstructorOrName == 'function' ) {\n\t\t\t\treturn PluginConstructorOrName;\n\t\t\t}\n\n\t\t\treturn that._availablePlugins.get( PluginConstructorOrName );\n\t\t}\n\n\t\tfunction getMissingPluginNames( plugins ) {\n\t\t\tconst missingPlugins = [];\n\n\t\t\tfor ( const pluginNameOrConstructor of plugins ) {\n\t\t\t\tif ( !getPluginConstructor( pluginNameOrConstructor ) ) {\n\t\t\t\t\tmissingPlugins.push( pluginNameOrConstructor );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn missingPlugins.length ? missingPlugins : null;\n\t\t}\n\n\t\tfunction mapToAvailableConstructors( plugins ) {\n\t\t\treturn plugins\n\t\t\t\t.map( pluginNameOrConstructor => getPluginConstructor( pluginNameOrConstructor ) )\n\t\t\t\t.filter( PluginConstructor => !!PluginConstructor );\n\t\t}\n\t}\n\n\t/**\n\t * Destroys all loaded plugins.\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\tconst promises = Array.from( this )\n\t\t\t.map( ( [ , pluginInstance ] ) => pluginInstance )\n\t\t\t.filter( pluginInstance => typeof pluginInstance.destroy == 'function' )\n\t\t\t.map( pluginInstance => pluginInstance.destroy() );\n\n\t\treturn Promise.all( promises );\n\t}\n\n\t/**\n\t * Adds the plugin to the collection. Exposed mainly for testing purposes.\n\t *\n\t * @protected\n\t * @param {Function} PluginConstructor The plugin constructor.\n\t * @param {module:core/plugin~PluginInterface} plugin The instance of the plugin.\n\t */\n\t_add( PluginConstructor, plugin ) {\n\t\tthis._plugins.set( PluginConstructor, plugin );\n\n\t\tconst pluginName = PluginConstructor.pluginName;\n\n\t\tif ( !pluginName ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this._plugins.has( pluginName ) ) {\n\t\t\t/**\n\t\t\t * Two plugins with the same {@link module:core/plugin~PluginInterface.pluginName} were loaded.\n\t\t\t * This will lead to runtime conflicts between these plugins.\n\t\t\t *\n\t\t\t * In practice, this warning usually means that new plugins were added to an existing CKEditor 5 build.\n\t\t\t * Plugins should always be added to a source version of the editor (`@ckeditor/ckeditor5-editor-*`),\n\t\t\t * not to an editor imported from one of the `@ckeditor/ckeditor5-build-*` packages.\n\t\t\t *\n\t\t\t * Check your import paths and the list of plugins passed to\n\t\t\t * {@link module:core/editor/editor~Editor.create `Editor.create()`}\n\t\t\t * or specified in {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n\t\t\t *\n\t\t\t * The second option is that your `node_modules/` directory contains duplicated versions of the same\n\t\t\t * CKEditor 5 packages. Normally, on clean installations, npm deduplicates packages in `node_modules/`, so\n\t\t\t * it may be enough to call `rm -rf node_modules && npm i`. However, if you installed conflicting versions\n\t\t\t * of packages, their dependencies may need to be installed in more than one version which may lead to this\n\t\t\t * warning.\n\t\t\t *\n\t\t\t * Technically speaking, this error occurs because after adding a plugin to an existing editor build\n\t\t\t * dependencies of this plugin are being duplicated.\n\t\t\t * They are already built into that editor build and now get added for the second time as dependencies\n\t\t\t * of the plugin you are installing.\n\t\t\t *\n\t\t\t * Read more about {@glink builds/guides/integration/installing-plugins installing plugins}.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-name-conflict\n\t\t\t * @param {String} pluginName The duplicated plugin name.\n\t\t\t * @param {Function} plugin1 The first plugin constructor.\n\t\t\t * @param {Function} plugin2 The second plugin constructor.\n\t\t\t */\n\t\t\tlog.warn(\n\t\t\t\t'plugincollection-plugin-name-conflict: Two plugins with the same name were loaded.',\n\t\t\t\t{ pluginName, plugin1: this._plugins.get( pluginName ).constructor, plugin2: PluginConstructor }\n\t\t\t);\n\t\t} else {\n\t\t\tthis._plugins.set( pluginName, plugin );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/commandcollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Collection of commands. Its instance is available in {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n */\nexport default class CommandCollection {\n\t/**\n\t * Creates collection instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Command map.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._commands = new Map();\n\t}\n\n\t/**\n\t * Registers a new command.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @param {module:core/command~Command} command\n\t */\n\tadd( commandName, command ) {\n\t\tthis._commands.set( commandName, command );\n\t}\n\n\t/**\n\t * Retrieves a command from the collection.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @returns {module:core/command~Command}\n\t */\n\tget( commandName ) {\n\t\treturn this._commands.get( commandName );\n\t}\n\n\t/**\n\t * Executes a command.\n\t *\n\t * @param {String} commandName The name of the command.\n\t * @param {*} [...commandParams] Command parameters.\n\t */\n\texecute( commandName, ...args ) {\n\t\tconst command = this.get( commandName );\n\n\t\tif ( !command ) {\n\t\t\t/**\n\t\t\t * Command does not exist.\n\t\t\t *\n\t\t\t * @error commandcollection-command-not-found\n\t\t\t * @param {String} commandName Name of the command.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'commandcollection-command-not-found: Command does not exist.', { commandName } );\n\t\t}\n\n\t\tcommand.execute( ...args );\n\t}\n\n\t/**\n\t * Returns iterator of command names.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* names() {\n\t\tyield* this._commands.keys();\n\t}\n\n\t/**\n\t * Returns iterator of command instances.\n\t *\n\t * @returns {Iterable.<module:core/command~Command>}\n\t */\n\t* commands() {\n\t\tyield* this._commands.values();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Returns `[ commandName, commandInstance ]` pairs.\n\t *\n\t * @returns {Iterable.<Array>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._commands[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Destroys all collection commands.\n\t */\n\tdestroy() {\n\t\tfor ( const command of this.commands() ) {\n\t\t\tcommand.destroy();\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals window */\n\n/**\n * @module utils/translation-service\n */\n\n/* istanbul ignore else */\nif ( !window.CKEDITOR_TRANSLATIONS ) {\n\twindow.CKEDITOR_TRANSLATIONS = {};\n}\n\n/**\n * Adds translations to existing ones.\n * These translations will later be available for the {@link module:utils/translation-service~translate `translate()`} function.\n *\n *\t\tadd( 'pl', {\n *\t\t\t'OK': 'OK',\n *\t\t\t'Cancel [context: reject]': 'Anuluj'\n *\t\t} );\n *\n * If you cannot import this function from this module (e.g. because you use a CKEditor 5 build), then you can\n * still add translations by extending the global `window.CKEDITOR_TRANSLATIONS` object by using a function like\n * the one below:\n *\n *\t\tfunction addTranslations( language, translations ) {\n *\t\t\tif ( !window.CKEDITOR_TRANSLATIONS ) {\n *\t\t\t\twindow.CKEDITOR_TRANSLATIONS = {};\n *\t\t\t}\n *\n *\t\t\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ] || ( window.CKEDITOR_TRANSLATIONS[ language ] = {} );\n *\n *\t\t\t// Extend the dictionary for the given language.\n *\t\t\tObject.assign( dictionary, translations );\n *\t\t}\n *\n * @param {String} language Target language.\n * @param {Object.<String, String>} translations Translations which will be added to the dictionary.\n */\nexport function add( language, translations ) {\n\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ] || ( window.CKEDITOR_TRANSLATIONS[ language ] = {} );\n\n\tObject.assign( dictionary, translations );\n}\n\n/**\n * Translates string if the translation of the string was previously added to the dictionary.\n * See {@link module:utils/translation-service Translation Service}.\n * This happens in a multi-language mode were translation modules are created by the bundler.\n *\n * When no translation is defined in the dictionary or the dictionary doesn't exist this function returns\n * the original string without the `'[context: ]'` (happens in development and single-language modes).\n *\n * In a single-language mode (when values passed to `t()` were replaced with target language strings) the dictionary\n * is left empty, so this function will return the original strings always.\n *\n *\t\ttranslate( 'pl', 'Cancel [context: reject]' );\n *\n * @param {String} language Target language.\n * @param {String} translationKey String that will be translated.\n * @returns {String} Translated sentence.\n */\nexport function translate( language, translationKey ) {\n\tconst numberOfLanguages = getNumberOfLanguages();\n\n\tif ( numberOfLanguages === 1 ) {\n\t\t// Override the language to the only supported one.\n\t\t// This can't be done in the `Locale` class, because the translations comes after the `Locale` class initialization.\n\t\tlanguage = Object.keys( window.CKEDITOR_TRANSLATIONS )[ 0 ];\n\t}\n\n\tif ( numberOfLanguages === 0 || !hasTranslation( language, translationKey ) ) {\n\t\treturn translationKey.replace( / \\[context: [^\\]]+\\]$/, '' );\n\t}\n\n\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ];\n\n\t// In case of missing translations we still need to cut off the `[context: ]` parts.\n\treturn dictionary[ translationKey ].replace( / \\[context: [^\\]]+\\]$/, '' );\n}\n\n/**\n * Clears dictionaries for test purposes.\n *\n * @protected\n */\nexport function _clear() {\n\twindow.CKEDITOR_TRANSLATIONS = {};\n}\n\n// Checks whether the dictionary exists and translation in that dictionary exists.\nfunction hasTranslation( language, translationKey ) {\n\treturn (\n\t\t( language in window.CKEDITOR_TRANSLATIONS ) &&\n\t\t( translationKey in window.CKEDITOR_TRANSLATIONS[ language ] )\n\t);\n}\n\nfunction getNumberOfLanguages() {\n\treturn Object.keys( window.CKEDITOR_TRANSLATIONS ).length;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/locale\n */\n\nimport { translate } from './translation-service';\n\n/**\n * Represents the localization services.\n */\nexport default class Locale {\n\t/**\n\t * Creates a new instance of the Locale class.\n\t *\n\t * @param {String} [language='en'] The language code in [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t */\n\tconstructor( language ) {\n\t\t/**\n\t\t * The language code in [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.language = language || 'en';\n\n\t\t/**\n\t\t * Translates the given string to the {@link #language}. This method is also available in {@link module:core/editor/editor~Editor#t}\n\t\t * and {@link module:ui/view~View#t}.\n\t\t *\n\t\t * The strings may contain placeholders (`%<index>`) for values which are passed as the second argument.\n\t\t * `<index>` is the index in the `values` array.\n\t\t *\n\t\t *\t\teditor.t( 'Created file \"%0\" in %1ms.', [ fileName, timeTaken ] );\n\t\t *\n\t\t * This method's context is statically bound to Locale instance,\n\t\t * so it can be called as a function:\n\t\t *\n\t\t *\t\tconst t = this.t;\n\t\t *\t\tt( 'Label' );\n\t\t *\n\t\t * @method #t\n\t\t * @param {String} str The string to translate.\n\t\t * @param {String[]} [values] Values that should be used to interpolate the string.\n\t\t */\n\t\tthis.t = ( ...args ) => this._t( ...args );\n\t}\n\n\t/**\n\t * Base for the {@link #t} method.\n\t *\n\t * @private\n\t */\n\t_t( str, values ) {\n\t\tlet translatedString = translate( this.language, str );\n\n\t\tif ( values ) {\n\t\t\ttranslatedString = translatedString.replace( /%(\\d+)/g, ( match, index ) => {\n\t\t\t\treturn ( index < values.length ) ? values[ index ] : match;\n\t\t\t} );\n\t\t}\n\n\t\treturn translatedString;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/conversion/viewconsumable\n */\n\nimport { isArray } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Class used for handling consumption of view {@link module:engine/view/element~Element elements},\n * {@link module:engine/view/text~Text text nodes} and {@link module:engine/view/documentfragment~DocumentFragment document fragments}.\n * Element's name and its parts (attributes, classes and styles) can be consumed separately. Consuming an element's name\n * does not consume its attributes, classes and styles.\n * To add items for consumption use {@link module:engine/conversion/viewconsumable~ViewConsumable#add add method}.\n * To test items use {@link module:engine/conversion/viewconsumable~ViewConsumable#test test method}.\n * To consume items use {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consume method}.\n * To revert already consumed items use {@link module:engine/conversion/viewconsumable~ViewConsumable#revert revert method}.\n *\n *\t\tviewConsumable.add( element, { name: true } ); // Adds element's name as ready to be consumed.\n *\t\tviewConsumable.add( textNode ); // Adds text node for consumption.\n *\t\tviewConsumable.add( docFragment ); // Adds document fragment for consumption.\n *\t\tviewConsumable.test( element, { name: true }  ); // Tests if element's name can be consumed.\n *\t\tviewConsumable.test( textNode ); // Tests if text node can be consumed.\n *\t\tviewConsumable.test( docFragment ); // Tests if document fragment can be consumed.\n *\t\tviewConsumable.consume( element, { name: true }  ); // Consume element's name.\n *\t\tviewConsumable.consume( textNode ); // Consume text node.\n *\t\tviewConsumable.consume( docFragment ); // Consume document fragment.\n *\t\tviewConsumable.revert( element, { name: true }  ); // Revert already consumed element's name.\n *\t\tviewConsumable.revert( textNode ); // Revert already consumed text node.\n *\t\tviewConsumable.revert( docFragment ); // Revert already consumed document fragment.\n */\nexport default class ViewConsumable {\n\t/**\n\t * Creates new ViewConsumable.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Map of consumable elements. If {@link module:engine/view/element~Element element} is used as a key,\n\t\t * {@link module:engine/conversion/viewconsumable~ViewElementConsumables ViewElementConsumables} instance is stored as value.\n\t\t * For {@link module:engine/view/text~Text text nodes} and\n\t\t * {@link module:engine/view/documentfragment~DocumentFragment document fragments} boolean value is stored as value.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<module:engine/conversion/viewconsumable~ViewElementConsumables|Boolean>}\n\t\t*/\n\t\tthis._consumables = new Map();\n\t}\n\n\t/**\n\t * Adds {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} as ready to be consumed.\n\t *\n\t *\t\tviewConsumable.add( p, { name: true } ); // Adds element's name to consume.\n\t *\t\tviewConsumable.add( p, { attributes: 'name' } ); // Adds element's attribute.\n\t *\t\tviewConsumable.add( p, { classes: 'foobar' } ); // Adds element's class.\n\t *\t\tviewConsumable.add( p, { styles: 'color' } ); // Adds element's style\n\t *\t\tviewConsumable.add( p, { attributes: 'name', styles: 'color' } ); // Adds attribute and style.\n\t *\t\tviewConsumable.add( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be provided.\n\t *\t\tviewConsumable.add( textNode ); // Adds text node to consume.\n\t *\t\tviewConsumable.add( docFragment ); // Adds document fragment to consume.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * attribute is provided - it should be handled separately by providing actual style/class.\n\t *\n\t *\t\tviewConsumable.add( p, { attributes: 'style' } ); // This call will throw an exception.\n\t *\t\tviewConsumable.add( p, { styles: 'color' } ); // This is properly handled style.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t */\n\tadd( element, consumables ) {\n\t\tlet elementConsumables;\n\n\t\t// For text nodes and document fragments just mark them as consumable.\n\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\tthis._consumables.set( element, true );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// For elements create new ViewElementConsumables or update already existing one.\n\t\tif ( !this._consumables.has( element ) ) {\n\t\t\telementConsumables = new ViewElementConsumables();\n\t\t\tthis._consumables.set( element, elementConsumables );\n\t\t} else {\n\t\t\telementConsumables = this._consumables.get( element );\n\t\t}\n\n\t\telementConsumables.add( consumables );\n\t}\n\n\t/**\n\t * Tests if {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} can be consumed.\n\t * It returns `true` when all items included in method's call can be consumed. Returns `false` when\n\t * first already consumed item is found and `null` when first non-consumable item is found.\n\t *\n\t *\t\tviewConsumable.test( p, { name: true } ); // Tests element's name.\n\t *\t\tviewConsumable.test( p, { attributes: 'name' } ); // Tests attribute.\n\t *\t\tviewConsumable.test( p, { classes: 'foobar' } ); // Tests class.\n\t *\t\tviewConsumable.test( p, { styles: 'color' } ); // Tests style.\n\t *\t\tviewConsumable.test( p, { attributes: 'name', styles: 'color' } ); // Tests attribute and style.\n\t *\t\tviewConsumable.test( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be tested.\n\t *\t\tviewConsumable.test( textNode ); // Tests text node.\n\t *\t\tviewConsumable.test( docFragment ); // Tests document fragment.\n\t *\n\t * Testing classes and styles as attribute will test if all added classes/styles can be consumed.\n\t *\n\t *\t\tviewConsumable.test( p, { attributes: 'class' } ); // Tests if all added classes can be consumed.\n\t *\t\tviewConsumable.test( p, { attributes: 'style' } ); // Tests if all added styles can be consumed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t * @returns {Boolean|null} Returns `true` when all items included in method's call can be consumed. Returns `false`\n\t * when first already consumed item is found and `null` when first non-consumable item is found.\n\t */\n\ttest( element, consumables ) {\n\t\tconst elementConsumables = this._consumables.get( element );\n\n\t\tif ( elementConsumables === undefined ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// For text nodes and document fragments return stored boolean value.\n\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\treturn elementConsumables;\n\t\t}\n\n\t\t// For elements test consumables object.\n\t\treturn elementConsumables.test( consumables );\n\t}\n\n\t/**\n\t * Consumes {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t * It returns `true` when all items included in method's call can be consumed, otherwise returns `false`.\n\t *\n\t *\t\tviewConsumable.consume( p, { name: true } ); // Consumes element's name.\n\t *\t\tviewConsumable.consume( p, { attributes: 'name' } ); // Consumes element's attribute.\n\t *\t\tviewConsumable.consume( p, { classes: 'foobar' } ); // Consumes element's class.\n\t *\t\tviewConsumable.consume( p, { styles: 'color' } ); // Consumes element's style.\n\t *\t\tviewConsumable.consume( p, { attributes: 'name', styles: 'color' } ); // Consumes attribute and style.\n\t *\t\tviewConsumable.consume( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be consumed.\n\t *\t\tviewConsumable.consume( textNode ); // Consumes text node.\n\t *\t\tviewConsumable.consume( docFragment ); // Consumes document fragment.\n\t *\n\t * Consuming classes and styles as attribute will test if all added classes/styles can be consumed.\n\t *\n\t *\t\tviewConsumable.consume( p, { attributes: 'class' } ); // Consume only if all added classes can be consumed.\n\t *\t\tviewConsumable.consume( p, { attributes: 'style' } ); // Consume only if all added styles can be consumed.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t * @returns {Boolean} Returns `true` when all items included in method's call can be consumed,\n\t * otherwise returns `false`.\n\t */\n\tconsume( element, consumables ) {\n\t\tif ( this.test( element, consumables ) ) {\n\t\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\t\t// For text nodes and document fragments set value to false.\n\t\t\t\tthis._consumables.set( element, false );\n\t\t\t} else {\n\t\t\t\t// For elements - consume consumables object.\n\t\t\t\tthis._consumables.get( element ).consume( consumables );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Reverts {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment document fragment} so they can be consumed once again.\n\t * Method does not revert items that were never previously added for consumption, even if they are included in\n\t * method's call.\n\t *\n\t *\t\tviewConsumable.revert( p, { name: true } ); // Reverts element's name.\n\t *\t\tviewConsumable.revert( p, { attributes: 'name' } ); // Reverts element's attribute.\n\t *\t\tviewConsumable.revert( p, { classes: 'foobar' } ); // Reverts element's class.\n\t *\t\tviewConsumable.revert( p, { styles: 'color' } ); // Reverts element's style.\n\t *\t\tviewConsumable.revert( p, { attributes: 'name', styles: 'color' } ); // Reverts attribute and style.\n\t *\t\tviewConsumable.revert( p, { classes: [ 'baz', 'bar' ] } ); // Multiple names can be reverted.\n\t *\t\tviewConsumable.revert( textNode ); // Reverts text node.\n\t *\t\tviewConsumable.revert( docFragment ); // Reverts document fragment.\n\t *\n\t * Reverting classes and styles as attribute will revert all classes/styles that were previously added for\n\t * consumption.\n\t *\n\t *\t\tviewConsumable.revert( p, { attributes: 'class' } ); // Reverts all classes added for consumption.\n\t *\t\tviewConsumable.revert( p, { attributes: 'style' } ); // Reverts all styles added for consumption.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n\t * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n\t * @param {Boolean} consumables.name If set to true element's name will be included.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n\t */\n\trevert( element, consumables ) {\n\t\tconst elementConsumables = this._consumables.get( element );\n\n\t\tif ( elementConsumables !== undefined ) {\n\t\t\tif ( element.is( 'text' ) || element.is( 'documentFragment' ) ) {\n\t\t\t\t// For text nodes and document fragments - set consumable to true.\n\t\t\t\tthis._consumables.set( element, true );\n\t\t\t} else {\n\t\t\t\t// For elements - revert items from consumables object.\n\t\t\t\telementConsumables.revert( consumables );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates consumable object from {@link module:engine/view/element~Element view element}. Consumable object will include\n\t * element's name and all its attributes, classes and styles.\n\t *\n\t * @static\n\t * @param {module:engine/view/element~Element} element\n\t * @returns {Object} consumables\n\t */\n\tstatic consumablesFromElement( element ) {\n\t\tconst consumables = {\n\t\t\tname: true,\n\t\t\tattributes: [],\n\t\t\tclasses: [],\n\t\t\tstyles: []\n\t\t};\n\n\t\tconst attributes = element.getAttributeKeys();\n\n\t\tfor ( const attribute of attributes ) {\n\t\t\t// Skip classes and styles - will be added separately.\n\t\t\tif ( attribute == 'style' || attribute == 'class' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconsumables.attributes.push( attribute );\n\t\t}\n\n\t\tconst classes = element.getClassNames();\n\n\t\tfor ( const className of classes ) {\n\t\t\tconsumables.classes.push( className );\n\t\t}\n\n\t\tconst styles = element.getStyleNames();\n\n\t\tfor ( const style of styles ) {\n\t\t\tconsumables.styles.push( style );\n\t\t}\n\n\t\treturn consumables;\n\t}\n\n\t/**\n\t * Creates {@link module:engine/conversion/viewconsumable~ViewConsumable ViewConsumable} instance from\n\t * {@link module:engine/view/node~Node node} or {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n\t * Instance will contain all elements, child nodes, attributes, styles and classes added for consumption.\n\t *\n\t * @static\n\t * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} from View node or document fragment\n\t * from which `ViewConsumable` will be created.\n\t * @param {module:engine/conversion/viewconsumable~ViewConsumable} [instance] If provided, given `ViewConsumable` instance will be used\n\t * to add all consumables. It will be returned instead of a new instance.\n\t */\n\tstatic createFrom( from, instance ) {\n\t\tif ( !instance ) {\n\t\t\tinstance = new ViewConsumable();\n\t\t}\n\n\t\tif ( from.is( 'text' ) ) {\n\t\t\tinstance.add( from );\n\n\t\t\treturn instance;\n\t\t}\n\n\t\t// Add `from` itself, if it is an element.\n\t\tif ( from.is( 'element' ) ) {\n\t\t\tinstance.add( from, ViewConsumable.consumablesFromElement( from ) );\n\t\t}\n\n\t\tif ( from.is( 'documentFragment' ) ) {\n\t\t\tinstance.add( from );\n\t\t}\n\n\t\tfor ( const child of from.getChildren() ) {\n\t\t\tinstance = ViewConsumable.createFrom( child, instance );\n\t\t}\n\n\t\treturn instance;\n\t}\n}\n\n/**\n * This is a private helper-class for {@link module:engine/conversion/viewconsumable~ViewConsumable}.\n * It represents and manipulates consumable parts of a single {@link module:engine/view/element~Element}.\n *\n * @private\n */\nclass ViewElementConsumables {\n\t/**\n\t * Creates ViewElementConsumables instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Flag indicating if name of the element can be consumed.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._canConsumeName = null;\n\n\t\t/**\n\t\t * Contains maps of element's consumables: attributes, classes and styles.\n\t\t *\n\t\t * @private\n\t\t * @member {Object}\n\t\t */\n\t\tthis._consumables = {\n\t\t\tattributes: new Map(),\n\t\t\tstyles: new Map(),\n\t\t\tclasses: new Map()\n\t\t};\n\t}\n\n\t/**\n\t * Adds consumable parts of the {@link module:engine/view/element~Element view element}.\n\t * Element's name itself can be marked to be consumed (when element's name is consumed its attributes, classes and\n\t * styles still could be consumed):\n\t *\n\t *\t\tconsumables.add( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.add( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.add( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * attribute is provided - it should be handled separately by providing `style` and `class` in consumables object.\n\t *\n\t * @param {Object} consumables Object describing which parts of the element can be consumed.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be added as consumable.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to add as consumable.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to add as consumable.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to add as consumable.\n\t */\n\tadd( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = true;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._add( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Tests if parts of the {@link module:engine/view/node~Node view node} can be consumed.\n\t *\n\t * Element's name can be tested:\n\t *\n\t *\t\tconsumables.test( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.test( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.test( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be tested.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be tested.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to test.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to test.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to test.\n\t * @returns {Boolean|null} `true` when all tested items can be consumed, `null` when even one of the items\n\t * was never marked for consumption and `false` when even one of the items was already consumed.\n\t */\n\ttest( consumables ) {\n\t\t// Check if name can be consumed.\n\t\tif ( consumables.name && !this._canConsumeName ) {\n\t\t\treturn this._canConsumeName;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tconst value = this._test( type, consumables[ type ] );\n\n\t\t\t\tif ( value !== true ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return true only if all can be consumed.\n\t\treturn true;\n\t}\n\n\t/**\n\t * Consumes parts of {@link module:engine/view/element~Element view element}. This function does not check if consumable item\n\t * is already consumed - it consumes all consumable items provided.\n\t * Element's name can be consumed:\n\t *\n\t *\t\tconsumables.consume( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.consume( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.consume( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be consumed.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be consumed.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to consume.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to consume.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to consume.\n\t */\n\tconsume( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = false;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._consume( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Revert already consumed parts of {@link module:engine/view/element~Element view Element}, so they can be consumed once again.\n\t * Element's name can be reverted:\n\t *\n\t *\t\tconsumables.revert( { name: true } );\n\t *\n\t * Attributes classes and styles:\n\t *\n\t *\t\tconsumables.revert( { attributes: 'title', classes: 'foo', styles: 'color' } );\n\t *\t\tconsumables.revert( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n\t *\n\t * @param {Object} consumables Object describing which parts of the element should be reverted.\n\t * @param {Boolean} consumables.name If set to `true` element's name will be reverted.\n\t * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to revert.\n\t * @param {String|Array.<String>} consumables.classes Class name or array of class names to revert.\n\t * @param {String|Array.<String>} consumables.styles Style name or array of style names to revert.\n\t */\n\trevert( consumables ) {\n\t\tif ( consumables.name ) {\n\t\t\tthis._canConsumeName = true;\n\t\t}\n\n\t\tfor ( const type in this._consumables ) {\n\t\t\tif ( type in consumables ) {\n\t\t\t\tthis._revert( type, consumables[ type ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that adds consumables of a given type: attribute, class or style.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n\t * type is provided - it should be handled separately by providing actual style/class type.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_add( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\t/**\n\t\t\t\t * Class and style attributes should be handled separately in\n\t\t\t\t * {@link module:engine/conversion/viewconsumable~ViewConsumable#add `ViewConsumable#add()`}.\n\t\t\t\t *\n\t\t\t\t * What you have done is trying to use:\n\t\t\t\t *\n\t\t\t\t *\t\tconsumables.add( { attributes: [ 'class', 'style' ] } );\n\t\t\t\t *\n\t\t\t\t * While each class and style should be registered separately:\n\t\t\t\t *\n\t\t\t\t *\t\tconsumables.add( { classes: 'some-class', styles: 'font-weight' } );\n\t\t\t\t *\n\t\t\t\t * @error viewconsumable-invalid-attribute\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'viewconsumable-invalid-attribute: Classes and styles should be handled separately.' );\n\t\t\t}\n\n\t\t\tconsumables.set( name, true );\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that tests consumables of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t * @returns {Boolean|null} Returns `true` if all items can be consumed, `null` when one of the items cannot be\n\t * consumed and `false` when one of the items is already consumed.\n\t */\n\t_test( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// Check all classes/styles if class/style attribute is tested.\n\t\t\t\tconst value = this._test( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\n\t\t\t\tif ( value !== true ) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst value = consumables.get( name );\n\t\t\t\t// Return null if attribute is not found.\n\t\t\t\tif ( value === undefined ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif ( !value ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Helper method that consumes items of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_consume( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// If class or style is provided for consumption - consume them all.\n\t\t\t\tthis._consume( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\t\t\t} else {\n\t\t\t\tconsumables.set( name, false );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Helper method that reverts items of a given type: attribute, class or style.\n\t *\n\t * @private\n\t * @param {String} type Type of the consumable item: `attributes`, `classes` or , `styles`.\n\t * @param {String|Array.<String>} item Consumable item or array of items.\n\t */\n\t_revert( type, item ) {\n\t\tconst items = isArray( item ) ? item : [ item ];\n\t\tconst consumables = this._consumables[ type ];\n\n\t\tfor ( const name of items ) {\n\t\t\tif ( type === 'attributes' && ( name === 'class' || name === 'style' ) ) {\n\t\t\t\tconst consumableName = name == 'class' ? 'classes' : 'styles';\n\n\t\t\t\t// If class or style is provided for reverting - revert them all.\n\t\t\t\tthis._revert( consumableName, [ ...this._consumables[ consumableName ].keys() ] );\n\t\t\t} else {\n\t\t\t\tconst value = consumables.get( name );\n\n\t\t\t\tif ( value === false ) {\n\t\t\t\t\tconsumables.set( name, true );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/schema\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\nimport Range from './range';\nimport Position from './position';\nimport Element from './element';\nimport Text from './text';\nimport TreeWalker from './treewalker';\n\n/**\n * The model's schema. It defines allowed and disallowed structures of nodes as well as nodes' attributes.\n * The schema is usually defined by features and based on them the editing framework and features\n * make decisions how to change and process the model.\n *\n * The instance of schema is available in {@link module:engine/model/model~Model#schema `editor.model.schema`}.\n *\n * Read more about the schema in:\n *\n * * {@glink framework/guides/architecture/editing-engine#schema \"Schema\"} section of the\n * {@glink framework/guides/architecture/editing-engine Introduction to the \"Editing engine architecture\"}.\n * * {@glink framework/guides/deep-dive/schema \"Schema\" deep dive} guide.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Schema {\n\t/**\n\t * Creates schema instance.\n\t */\n\tconstructor() {\n\t\tthis._sourceDefinitions = {};\n\n\t\tthis.decorate( 'checkChild' );\n\t\tthis.decorate( 'checkAttribute' );\n\n\t\tthis.on( 'checkAttribute', ( evt, args ) => {\n\t\t\targs[ 0 ] = new SchemaContext( args[ 0 ] );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.on( 'checkChild', ( evt, args ) => {\n\t\t\targs[ 0 ] = new SchemaContext( args[ 0 ] );\n\t\t\targs[ 1 ] = this.getDefinition( args[ 1 ] );\n\t\t}, { priority: 'highest' } );\n\t}\n\n\t/**\n\t * Registers schema item. Can only be called once for every item name.\n\t *\n\t *\t\tschema.register( 'paragraph', {\n\t *\t\t\tinheritAllFrom: '$block'\n\t *\t\t} );\n\t *\n\t * @param {String} itemName\n\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\n\t */\n\tregister( itemName, definition ) {\n\t\tif ( this._sourceDefinitions[ itemName ] ) {\n\t\t\t// TODO docs\n\t\t\tthrow new CKEditorError( 'schema-cannot-register-item-twice: A single item cannot be registered twice in the schema.', {\n\t\t\t\titemName\n\t\t\t} );\n\t\t}\n\n\t\tthis._sourceDefinitions[ itemName ] = [\n\t\t\tObject.assign( {}, definition )\n\t\t];\n\n\t\tthis._clearCache();\n\t}\n\n\t/**\n\t * Extends a {@link #register registered} item's definition.\n\t *\n\t * Extending properties such as `allowIn` will add more items to the existing properties,\n\t * while redefining properties such as `isBlock` will override the previously defined ones.\n\t *\n\t *\t\tschema.register( 'foo', {\n\t *\t\t\tallowIn: '$root',\n\t *\t\t\tisBlock: true;\n\t *\t\t} );\n\t *\t\tschema.extend( 'foo', {\n\t *\t\t\tallowIn: 'blockQuote',\n\t *\t\t\tisBlock: false\n\t *\t\t} );\n\t *\n\t *\t\tschema.getDefinition( 'foo' );\n\t *\t\t//\t{\n\t *\t\t//\t\tallowIn: [ '$root', 'blockQuote' ],\n\t *\t\t// \t\tisBlock: false\n\t *\t\t//\t}\n\t *\n\t * @param {String} itemName\n\t * @param {module:engine/model/schema~SchemaItemDefinition} definition\n\t */\n\textend( itemName, definition ) {\n\t\tif ( !this._sourceDefinitions[ itemName ] ) {\n\t\t\t// TODO docs\n\t\t\tthrow new CKEditorError( 'schema-cannot-extend-missing-item: Cannot extend an item which was not registered yet.', {\n\t\t\t\titemName\n\t\t\t} );\n\t\t}\n\n\t\tthis._sourceDefinitions[ itemName ].push( Object.assign( {}, definition ) );\n\n\t\tthis._clearCache();\n\t}\n\n\t/**\n\t * Returns all registered items.\n\t *\n\t * @returns {Object.<String,module:engine/model/schema~SchemaCompiledItemDefinition>}\n\t */\n\tgetDefinitions() {\n\t\tif ( !this._compiledDefinitions ) {\n\t\t\tthis._compile();\n\t\t}\n\n\t\treturn this._compiledDefinitions;\n\t}\n\n\t/**\n\t * Returns a definition of the given item or `undefined` if item is not registered.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t * @returns {module:engine/model/schema~SchemaCompiledItemDefinition}\n\t */\n\tgetDefinition( item ) {\n\t\tlet itemName;\n\n\t\tif ( typeof item == 'string' ) {\n\t\t\titemName = item;\n\t\t} else if ( item.is && ( item.is( 'text' ) || item.is( 'textProxy' ) ) ) {\n\t\t\titemName = '$text';\n\t\t}\n\t\t// Element or module:engine/model/schema~SchemaContextItem.\n\t\telse {\n\t\t\titemName = item.name;\n\t\t}\n\n\t\treturn this.getDefinitions()[ itemName ];\n\t}\n\n\t/**\n\t * Returns `true` if the given item is registered in the schema.\n\t *\n\t *\t\tschema.isRegistered( 'paragraph' ); // -> true\n\t *\t\tschema.isRegistered( editor.model.document.getRoot() ); // -> true\n\t *\t\tschema.isRegistered( 'foo' ); // -> false\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisRegistered( item ) {\n\t\treturn !!this.getDefinition( item );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a block by {@link module:engine/model/schema~SchemaItemDefinition}'s `isBlock` property.\n\t *\n\t *\t\tschema.isBlock( 'paragraph' ); // -> true\n\t *\t\tschema.isBlock( '$root' ); // -> false\n\t *\n\t *\t\tconst paragraphElement = writer.createElement( 'paragraph' );\n\t *\t\tschema.isBlock( paragraphElement ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisBlock( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isBlock );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a limit element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isLimit` or `isObject` property\n\t * (all objects are also limits).\n\t *\n\t *\t\tschema.isLimit( 'paragraph' ); // -> false\n\t *\t\tschema.isLimit( '$root' ); // -> true\n\t *\t\tschema.isLimit( editor.model.document.getRoot() ); // -> true\n\t *\t\tschema.isLimit( 'image' ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisLimit( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!( def.isLimit || def.isObject );\n\t}\n\n\t/**\n\t * Returns `true` if the given item is defined to be\n\t * a object element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isObject` property.\n\t *\n\t *\t\tschema.isObject( 'paragraph' ); // -> false\n\t *\t\tschema.isObject( 'image' ); // -> true\n\t *\n\t *\t\tconst imageElement = writer.createElement( 'image' );\n\t *\t\tschema.isObject( imageElement ); // -> true\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n\t */\n\tisObject( item ) {\n\t\tconst def = this.getDefinition( item );\n\n\t\treturn !!( def && def.isObject );\n\t}\n\n\t/**\n\t * Checks whether the given node (`child`) can be a child of the given context.\n\t *\n\t *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> false\n\t *\n\t *\t\tschema.register( 'paragraph', {\n\t *\t\t\tallowIn: '$root'\n\t *\t\t} );\n\t *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> true\n\t *\n\t * Note: When verifying whether the given node can be a child of the given context, the\n\t * schema also verifies the entire context &mdash; from its root to its last element. Therefore, it is possible\n\t * for `checkChild()` to return `false` even though the context's last element can contain the checked child.\n\t * It happens if one of the context's elements does not allow its child.\n\t *\n\t * @fires checkChild\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context The context in which the child will be checked.\n\t * @param {module:engine/model/node~Node|String} def The child to check.\n\t */\n\tcheckChild( context, def ) {\n\t\t// Note: context and child are already normalized here to a SchemaContext and SchemaCompiledItemDefinition.\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._checkContextMatch( def, context );\n\t}\n\n\t/**\n\t * Checks whether the given attribute can be applied in the given context (on the last\n\t * item of the context).\n\t *\n\t *\t\tschema.checkAttribute( textNode, 'bold' ); // -> false\n\t *\n\t *\t\tschema.extend( '$text', {\n\t *\t\t\tallowAttributes: 'bold'\n\t *\t\t} );\n\t *\t\tschema.checkAttribute( textNode, 'bold' ); // -> true\n\t *\n\t * @fires checkAttribute\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context The context in which the attribute will be checked.\n\t * @param {String} attributeName\n\t */\n\tcheckAttribute( context, attributeName ) {\n\t\tconst def = this.getDefinition( context.last );\n\n\t\tif ( !def ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn def.allowAttributes.includes( attributeName );\n\t}\n\n\t/**\n\t * Checks whether the given element (`elementToMerge`) can be merged with the specified base element (`positionOrBaseElement`).\n\t *\n\t * In other words &mdash; whether `elementToMerge`'s children {@link #checkChild are allowed} in the `positionOrBaseElement`.\n\t *\n\t * This check ensures that elements merged with {@link module:engine/model/writer~Writer#merge `Writer#merge()`}\n\t * will be valid.\n\t *\n\t * Instead of elements, you can pass the instance of the {@link module:engine/model/position~Position} class as the\n\t * `positionOrBaseElement`. It means that the elements before and after the position will be checked whether they can be merged.\n\t *\n\t * @param {module:engine/model/position~Position|module:engine/model/element~Element} positionOrBaseElement The position or base\n\t * element to which the `elementToMerge` will be merged.\n\t * @param {module:engine/model/element~Element} elementToMerge The element to merge. Required if `positionOrBaseElement` is an element.\n\t * @returns {Boolean}\n\t */\n\tcheckMerge( positionOrBaseElement, elementToMerge = null ) {\n\t\tif ( positionOrBaseElement instanceof Position ) {\n\t\t\tconst nodeBefore = positionOrBaseElement.nodeBefore;\n\t\t\tconst nodeAfter = positionOrBaseElement.nodeAfter;\n\n\t\t\tif ( !( nodeBefore instanceof Element ) ) {\n\t\t\t\t/**\n\t\t\t\t * The node before the merge position must be an element.\n\t\t\t\t *\n\t\t\t\t * @error schema-check-merge-no-element-before\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'schema-check-merge-no-element-before: The node before the merge position must be an element.' );\n\t\t\t}\n\n\t\t\tif ( !( nodeAfter instanceof Element ) ) {\n\t\t\t\t/**\n\t\t\t\t * The node after the merge position must be an element.\n\t\t\t\t *\n\t\t\t\t * @error schema-check-merge-no-element-after\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError( 'schema-check-merge-no-element-after: The node after the merge position must be an element.' );\n\t\t\t}\n\n\t\t\treturn this.checkMerge( nodeBefore, nodeAfter );\n\t\t}\n\n\t\tfor ( const child of elementToMerge.getChildren() ) {\n\t\t\tif ( !this.checkChild( positionOrBaseElement, child ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Allows registering a callback to the {@link #checkChild} method calls.\n\t *\n\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\n\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n\t * For example, by using this method you can disallow elements in specific contexts.\n\t *\n\t * This method is a shorthand for using the {@link #event:checkChild} event. For even better control,\n\t * you can use that event instead.\n\t *\n\t * Example:\n\t *\n\t *\t\t// Disallow heading1 directly inside a blockQuote.\n\t *\t\tschema.addChildCheck( ( context, childDefinition ) => {\n\t *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition.name == 'heading1' ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Which translates to:\n\t *\n\t *\t\tschema.on( 'checkChild', ( evt, args ) => {\n\t *\t\t\tconst context = args[ 0 ];\n\t *\t\t\tconst childDefinition = args[ 1 ];\n\t *\n\t *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n\t *\t\t\t\t// Prevent next listeners from being called.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t\t// Set the checkChild()'s return value.\n\t *\t\t\t\tevt.return = false;\n\t *\t\t\t}\n\t *\t\t}, { priority: 'high' } );\n\t *\n\t * @param {Function} callback The callback to be called. It is called with two parameters:\n\t * {@link module:engine/model/schema~SchemaContext} (context) instance and\n\t * {@link module:engine/model/schema~SchemaCompiledItemDefinition} (child-to-check definition).\n\t * The callback may return `true/false` to override `checkChild()`'s return value. If it does not return\n\t * a boolean value, the default algorithm (or other callbacks) will define `checkChild()`'s return value.\n\t */\n\taddChildCheck( callback ) {\n\t\tthis.on( 'checkChild', ( evt, [ ctx, childDef ] ) => {\n\t\t\t// checkChild() was called with a non-registered child.\n\t\t\t// In 99% cases such check should return false, so not to overcomplicate all callbacks\n\t\t\t// don't even execute them.\n\t\t\tif ( !childDef ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst retValue = callback( ctx, childDef );\n\n\t\t\tif ( typeof retValue == 'boolean' ) {\n\t\t\t\tevt.stop();\n\t\t\t\tevt.return = retValue;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Allows registering a callback to the {@link #checkAttribute} method calls.\n\t *\n\t * Callbacks allow you to implement rules which are not otherwise possible to achieve\n\t * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n\t * For example, by using this method you can disallow attribute if node to which it is applied\n\t * is contained within some other element (e.g. you want to disallow `bold` on `$text` within `heading1`).\n\t *\n\t * This method is a shorthand for using the {@link #event:checkAttribute} event. For even better control,\n\t * you can use that event instead.\n\t *\n\t * Example:\n\t *\n\t *\t\t// Disallow bold on $text inside heading1.\n\t *\t\tschema.addChildCheck( ( context, attributeName ) => {\n\t *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n\t *\t\t\t\treturn false;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * Which translates to:\n\t *\n\t *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n\t *\t\t\tconst context = args[ 0 ];\n\t *\t\t\tconst attributeName = args[ 1 ];\n\t *\n\t *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n\t *\t\t\t\t// Prevent next listeners from being called.\n\t *\t\t\t\tevt.stop();\n\t *\t\t\t\t// Set the checkAttribute()'s return value.\n\t *\t\t\t\tevt.return = false;\n\t *\t\t\t}\n\t *\t\t}, { priority: 'high' } );\n\t *\n\t * @param {Function} callback The callback to be called. It is called with two parameters:\n\t * {@link module:engine/model/schema~SchemaContext} (context) instance and attribute name.\n\t * The callback may return `true/false` to override `checkAttribute()`'s return value. If it does not return\n\t * a boolean value, the default algorithm (or other callbacks) will define `checkAttribute()`'s return value.\n\t */\n\taddAttributeCheck( callback ) {\n\t\tthis.on( 'checkAttribute', ( evt, [ ctx, attributeName ] ) => {\n\t\t\tconst retValue = callback( ctx, attributeName );\n\n\t\t\tif ( typeof retValue == 'boolean' ) {\n\t\t\t\tevt.stop();\n\t\t\t\tevt.return = retValue;\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Returns the lowest {@link module:engine/model/schema~Schema#isLimit limit element} containing the entire\n\t * selection/range/position or the root otherwise.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/range~Range|module:engine/model/position~Position} selectionOrRangeOrPosition\n\t * The selection/range/position to check.\n\t * @returns {module:engine/model/element~Element} The lowest limit element containing\n\t * the entire `selectionOrRangeOrPosition`.\n\t */\n\tgetLimitElement( selectionOrRangeOrPosition ) {\n\t\tlet element;\n\n\t\tif ( selectionOrRangeOrPosition instanceof Position ) {\n\t\t\telement = selectionOrRangeOrPosition.parent;\n\t\t} else {\n\t\t\tconst ranges = selectionOrRangeOrPosition instanceof Range ?\n\t\t\t\t[ selectionOrRangeOrPosition ] :\n\t\t\t\tArray.from( selectionOrRangeOrPosition.getRanges() );\n\n\t\t\t// Find the common ancestor for all selection's ranges.\n\t\t\telement = ranges\n\t\t\t\t.reduce( ( element, range ) => {\n\t\t\t\t\tconst rangeCommonAncestor = range.getCommonAncestor();\n\n\t\t\t\t\tif ( !element ) {\n\t\t\t\t\t\treturn rangeCommonAncestor;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn element.getCommonAncestor( rangeCommonAncestor, { includeSelf: true } );\n\t\t\t\t}, null );\n\t\t}\n\n\t\twhile ( !this.isLimit( element ) ) {\n\t\t\tif ( element.parent ) {\n\t\t\t\telement = element.parent;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn element;\n\t}\n\n\t/**\n\t * Checks whether the attribute is allowed in selection:\n\t *\n\t * * if the selection is not collapsed, then checks if the attribute is allowed on any of nodes in that range,\n\t * * if the selection is collapsed, then checks if on the selection position there's a text with the\n\t * specified attribute allowed.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * Selection which will be checked.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Boolean}\n\t */\n\tcheckAttributeInSelection( selection, attribute ) {\n\t\tif ( selection.isCollapsed ) {\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\t\t\tconst context = [\n\t\t\t\t...firstPosition.getAncestors(),\n\t\t\t\tnew Text( '', selection.getAttributes() )\n\t\t\t];\n\n\t\t\t// Check whether schema allows for a text with the attribute in the selection.\n\t\t\treturn this.checkAttribute( context, attribute );\n\t\t} else {\n\t\t\tconst ranges = selection.getRanges();\n\n\t\t\t// For all ranges, check nodes in them until you find a node that is allowed to have the attribute.\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tfor ( const value of range ) {\n\t\t\t\t\tif ( this.checkAttribute( value.item, attribute ) ) {\n\t\t\t\t\t\t// If we found a node that is allowed to have the attribute, return true.\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we haven't found such node, return false.\n\t\treturn false;\n\t}\n\n\t/**\n\t * Transforms the given set of ranges into a set of ranges where the given attribute is allowed (and can be applied).\n\t *\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be validated.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Iterator.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n\t */\n\t* getValidRanges( ranges, attribute ) {\n\t\tranges = convertToMinimalFlatRanges( ranges );\n\n\t\tfor ( const range of ranges ) {\n\t\t\tyield* this._getValidRangesForRange( range, attribute );\n\t\t}\n\t}\n\n\t/**\n\t * Takes a flat range and an attribute name. Traverses the range recursively and deeply to find and return all ranges\n\t * inside the given range on which the attribute can be applied.\n\t *\n\t * This is a helper function for {@link ~Schema#getValidRanges}.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range Range to process.\n\t * @param {String} attribute The name of the attribute to check.\n\t * @returns {Iterator.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n\t */\n\t* _getValidRangesForRange( range, attribute ) {\n\t\tlet start = range.start;\n\t\tlet end = range.start;\n\n\t\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'element' ) ) {\n\t\t\t\tyield* this._getValidRangesForRange( Range._createIn( item ), attribute );\n\t\t\t}\n\n\t\t\tif ( !this.checkAttribute( item, attribute ) ) {\n\t\t\t\tif ( !start.isEqual( end ) ) {\n\t\t\t\t\tyield new Range( start, end );\n\t\t\t\t}\n\n\t\t\t\tstart = Position._createAfter( item );\n\t\t\t}\n\n\t\t\tend = Position._createAfter( item );\n\t\t}\n\n\t\tif ( !start.isEqual( end ) ) {\n\t\t\tyield new Range( start, end );\n\t\t}\n\t}\n\n\t/**\n\t * Basing on given `position`, finds and returns a {@link module:engine/model/range~Range range} which is\n\t * nearest to that `position` and is a correct range for selection.\n\t *\n\t * The correct selection range might be collapsed when it is located in a position where the text node can be placed.\n\t * Non-collapsed range is returned when selection can be placed around element marked as an \"object\" in\n\t * the {@link module:engine/model/schema~Schema schema}.\n\t *\n\t * Direction of searching for the nearest correct selection range can be specified as:\n\t *\n\t * * `both` - searching will be performed in both ways,\n\t * * `forward` - searching will be performed only forward,\n\t * * `backward` - searching will be performed only backward.\n\t *\n\t * When valid selection range cannot be found, `null` is returned.\n\t *\n\t * @param {module:engine/model/position~Position} position Reference position where new selection range should be looked for.\n\t * @param {'both'|'forward'|'backward'} [direction='both'] Search direction.\n\t * @returns {module:engine/model/range~Range|null} Nearest selection range or `null` if one cannot be found.\n\t */\n\tgetNearestSelectionRange( position, direction = 'both' ) {\n\t\t// Return collapsed range if provided position is valid.\n\t\tif ( this.checkChild( position, '$text' ) ) {\n\t\t\treturn new Range( position );\n\t\t}\n\n\t\tlet backwardWalker, forwardWalker;\n\n\t\tif ( direction == 'both' || direction == 'backward' ) {\n\t\t\tbackwardWalker = new TreeWalker( { startPosition: position, direction: 'backward' } );\n\t\t}\n\n\t\tif ( direction == 'both' || direction == 'forward' ) {\n\t\t\tforwardWalker = new TreeWalker( { startPosition: position } );\n\t\t}\n\n\t\tfor ( const data of combineWalkers( backwardWalker, forwardWalker ) ) {\n\t\t\tconst type = ( data.walker == backwardWalker ? 'elementEnd' : 'elementStart' );\n\t\t\tconst value = data.value;\n\n\t\t\tif ( value.type == type && this.isObject( value.item ) ) {\n\t\t\t\treturn Range._createOn( value.item );\n\t\t\t}\n\n\t\t\tif ( this.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\t\treturn new Range( value.nextPosition );\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Tries to find position ancestors that allows to insert given node.\n\t * It starts searching from the given position and goes node by node to the top of the model tree\n\t * as long as {@link module:engine/model/schema~Schema#isLimit limit element},\n\t * {@link module:engine/model/schema~Schema#isObject object element} or top-most ancestor won't be reached.\n\t *\n\t * @params {module:engine/model/node~Node} node Node for which allowed parent should be found.\n\t * @params {module:engine/model/position~Position} position Position from searching will start.\n\t * @returns {module:engine/model/element~Element|null} element Allowed parent or null if nothing was found.\n\t */\n\tfindAllowedParent( node, position ) {\n\t\tlet parent = position.parent;\n\n\t\twhile ( parent ) {\n\t\t\tif ( this.checkChild( parent, node ) ) {\n\t\t\t\treturn parent;\n\t\t\t}\n\n\t\t\t// Do not split limit elements.\n\t\t\tif ( this.isLimit( parent ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes attributes disallowed by the schema.\n\t *\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes that will be filtered.\n\t * @param {module:engine/model/writer~Writer} writer\n\t */\n\tremoveDisallowedAttributes( nodes, writer ) {\n\t\tfor ( const node of nodes ) {\n\t\t\tfor ( const attribute of node.getAttributeKeys() ) {\n\t\t\t\tif ( !this.checkAttribute( node, attribute ) ) {\n\t\t\t\t\twriter.removeAttribute( attribute, node );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( node.is( 'element' ) ) {\n\t\t\t\tthis.removeDisallowedAttributes( node.getChildren(), writer );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates an instance of the schema context.\n\t *\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context\n\t * @returns {module:engine/model/schema~SchemaContext}\n\t */\n\tcreateContext( context ) {\n\t\treturn new SchemaContext( context );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_clearCache() {\n\t\tthis._compiledDefinitions = null;\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_compile() {\n\t\tconst compiledDefinitions = {};\n\t\tconst sourceRules = this._sourceDefinitions;\n\t\tconst itemNames = Object.keys( sourceRules );\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompiledDefinitions[ itemName ] = compileBaseItemRule( sourceRules[ itemName ], itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowContentOf( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowWhere( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcompileAllowAttributesOf( compiledDefinitions, itemName );\n\t\t\tcompileInheritPropertiesFrom( compiledDefinitions, itemName );\n\t\t}\n\n\t\tfor ( const itemName of itemNames ) {\n\t\t\tcleanUpAllowIn( compiledDefinitions, itemName );\n\t\t\tcleanUpAllowAttributes( compiledDefinitions, itemName );\n\t\t}\n\n\t\tthis._compiledDefinitions = compiledDefinitions;\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/schema~SchemaCompiledItemDefinition} def\n\t * @param {module:engine/model/schema~SchemaContext} context\n\t * @param {Number} contextItemIndex\n\t */\n\t_checkContextMatch( def, context, contextItemIndex = context.length - 1 ) {\n\t\tconst contextItem = context.getItem( contextItemIndex );\n\n\t\tif ( def.allowIn.includes( contextItem.name ) ) {\n\t\t\tif ( contextItemIndex == 0 ) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tconst parentRule = this.getDefinition( contextItem );\n\n\t\t\t\treturn this._checkContextMatch( parentRule, context, contextItemIndex - 1 );\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\nmix( Schema, ObservableMixin );\n\n/**\n * Event fired when the {@link #checkChild} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addChildCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkChild} method fires an event because it is\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkChild()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkChild( context, child )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance and `child` to a\n * {@link module:engine/model/schema~SchemaCompiledItemDefinition} instance, so you don't have to worry about\n * the various ways how `context` and `child` may be passed to `checkChild()`.\n *\n * **Note:** `childDefinition` may be `undefined` if `checkChild()` was called with a non-registered element.\n *\n * So, in order to implement a rule \"disallow `heading1` in `blockQuote`\" you can add such a listener:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing elements in specific contexts will be a far less common use case, because it's normally handled by\n * `allowIn` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `listItem` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo' ) && childDefinition.name == 'listItem' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkChild\n * @param {Array} args The `checkChild()`'s arguments.\n */\n\n/**\n * Event fired when the {@link #checkAttribute} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addAttributeCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkAttribute} method fires an event because it's\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkAttribute()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst attributeName = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkAttribute( context, attributeName )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance, so you don't have to worry about\n * the various ways how `context` may be passed to `checkAttribute()`.\n *\n * So, in order to implement a rule \"disallow `bold` in a text which is in a `heading1` you can add such a listener:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing attributes in specific contexts will be a far less common use case, because it's normally handled by\n * `allowAttributes` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `bold` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkAttribute\n * @param {Array} args The `checkAttribute()`'s arguments.\n */\n\n/**\n * A definition of a {@link module:engine/model/schema~Schema schema} item.\n *\n * You can define the following rules:\n *\n * * `allowIn` &ndash; A string or an array of strings. Defines in which other items this item will be allowed.\n * * `allowAttributes` &ndash; A string or an array of strings. Defines allowed attributes of the given item.\n * * `allowContentOf` &ndash; A string or an array of strings. Inherits \"allowed children\" from other items.\n * * `allowWhere` &ndash; A string or an array of strings. Inherits \"allowed in\" from other items.\n * * `allowAttributesOf` &ndash; A string or an array of strings. Inherits attributes from other items.\n * * `inheritTypesFrom` &ndash; A string or an array of strings. Inherits `is*` properties of other items.\n * * `inheritAllFrom` &ndash; A string. A shorthand for `allowContentOf`, `allowWhere`, `allowAttributesOf`, `inheritTypesFrom`.\n * * Additionally, you can define the following `is*` properties: `isBlock`, `isLimit`, `isObject`. Read about them below.\n *\n * # The is* properties\n *\n * There are 3 commonly used `is*` properties. Their role is to assign additional semantics to schema items.\n * You can define more properties but you will also need to implement support for them in the existing editor features.\n *\n * * `isBlock` &ndash; Whether this item is paragraph-like. Generally speaking, content is usually made out of blocks\n * like paragraphs, list items, images, headings, etc. All these elements are marked as blocks. A block\n * should not allow another block inside. Note: There is also the `$block` generic item which has `isBlock` set to `true`.\n * Most block type items will inherit from `$block` (through `inheritAllFrom`).\n * * `isLimit` &ndash; It can be understood as whether this element should not be split by <kbd>Enter</kbd>.\n * Examples of limit elements: `$root`, table cell, image caption, etc. In other words, all actions that happen inside\n * a limit element are limited to its content. **Note:** All objects (`isObject`) are treated as limit elements, too.\n * * `isObject` &ndash; Whether an item is \"self-contained\" and should be treated as a whole. Examples of object elements:\n * `image`, `table`, `video`, etc. **Note:** An object is also a limit, so\n * {@link module:engine/model/schema~Schema#isLimit `isLimit()`}\n * returns `true` for object elements automatically.\n *\n * # Generic items\n *\n * There are three basic generic items: `$root`, `$block` and `$text`.\n * They are defined as follows:\n *\n *\t\tthis.schema.register( '$root', {\n *\t\t\tisLimit: true\n *\t\t} );\n *\t\tthis.schema.register( '$block', {\n *\t\t\tallowIn: '$root',\n *\t\t\tisBlock: true\n *\t\t} );\n *\t\tthis.schema.register( '$text', {\n *\t\t\tallowIn: '$block'\n *\t\t} );\n *\n * They reflect typical editor content that is contained within one root, consists of several blocks\n * (paragraphs, lists items, headings, images) which, in turn, may contain text inside.\n *\n * By inheriting from the generic items you can define new items which will get extended by other editor features.\n * Read more about generic types in the {@linkTODO Defining schema} guide.\n *\n * # Example definitions\n *\n * Allow `paragraph` in roots and block quotes:\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowIn: [ '$root', 'blockQuote' ],\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Allow `paragraph` everywhere where `$block` is allowed (i.e. in `$root`):\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Make `image` a block object, which is allowed everywhere where `$block` is.\n * Also, allow `src` and `alt` attributes in it:\n *\n *\t\tschema.register( 'image', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowAttributes: [ 'src', 'alt' ],\n *\t\t\tisBlock: true,\n *\t\t\tisObject: true\n *\t\t} );\n *\n * Make `caption` allowed in `image` and make it allow all the content of `$block`s (usually, `$text`).\n * Also, mark it as a limit element so it cannot be split:\n *\n *\t\tschema.register( 'caption', {\n *\t\t\tallowIn: 'image',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tisLimit: true\n *\t\t} );\n *\n * Make `listItem` inherit all from `$block` but also allow additional attributes:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tinheritAllFrom: '$block',\n *\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n *\t\t} );\n *\n * Which translates to:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tallowAttributesOf: '$block',\n *\t\t\tinheritTypesFrom: '$block',\n *\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n *\t\t} );\n *\n * # Tips\n *\n * * Check schema definitions of existing features to see how they are defined.\n * * If you want to publish your feature so other developers can use it, try to use\n * generic items as much as possible.\n * * Keep your model clean. Limit it to the actual data and store information in a normalized way.\n * * Remember about definining the `is*` properties. They do not affect the allowed structures, but they can\n * affect how the editor features treat your elements.\n *\n * @typedef {Object} module:engine/model/schema~SchemaItemDefinition\n */\n\n/**\n * A simplified version of {@link module:engine/model/schema~SchemaItemDefinition} after\n * compilation by the {@link module:engine/model/schema~Schema schema}.\n * Rules fed to the schema by {@link module:engine/model/schema~Schema#register}\n * and {@link module:engine/model/schema~Schema#extend} methods are defined in the\n * {@link module:engine/model/schema~SchemaItemDefinition} format.\n * Later on, they are compiled to `SchemaCompiledItemDefition` so when you use e.g.\n * the {@link module:engine/model/schema~Schema#getDefinition} method you get the compiled version.\n *\n * The compiled version contains only the following properties:\n *\n * * The `name` property,\n * * The `is*` properties,\n * * The `allowIn` array,\n * * The `allowAttributes` array.\n *\n * @typedef {Object} module:engine/model/schema~SchemaCompiledItemDefinition\n */\n\n/**\n * A schema context &mdash; a list of ancestors of a given position in the document.\n *\n * Considering such position:\n *\n *\t\t<$root>\n *\t\t\t<blockQuote>\n *\t\t\t\t<paragraph>\n *\t\t\t\t\t^\n *\t\t\t\t</paragraph>\n *\t\t\t</blockQuote>\n *\t\t</$root>\n *\n * The context of this position is its {@link module:engine/model/position~Position#getAncestors lists of ancestors}:\n *\n *\t\t[ rootElement, blockQuoteElement, paragraphElement ]\n *\n * Contexts are used in the {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`} and\n * {@link module:engine/model/schema~Schema#event:checkAttribute `Schema#checkAttribute`} events as a definition\n * of a place in the document where the check occurs. The context instances are created based on the first arguments\n * of the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`} and\n * {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} methods so when\n * using these methods you need to use {@link module:engine/model/schema~SchemaContextDefinition}s.\n */\nexport class SchemaContext {\n\t/**\n\t * Creates an instance of the context.\n\t *\n\t * @param {module:engine/model/schema~SchemaContextDefinition} context\n\t */\n\tconstructor( context ) {\n\t\tif ( context instanceof SchemaContext ) {\n\t\t\treturn context;\n\t\t}\n\n\t\tif ( typeof context == 'string' ) {\n\t\t\tcontext = [ context ];\n\t\t} else if ( !Array.isArray( context ) ) {\n\t\t\t// `context` is item or position.\n\t\t\t// Position#getAncestors() doesn't accept any parameters but it works just fine here.\n\t\t\tcontext = context.getAncestors( { includeSelf: true } );\n\t\t}\n\n\t\tif ( context[ 0 ] && typeof context[ 0 ] != 'string' && context[ 0 ].is( 'documentFragment' ) ) {\n\t\t\tcontext.shift();\n\t\t}\n\n\t\tthis._items = context.map( mapContextItem );\n\t}\n\n\t/**\n\t * The number of items.\n\t *\n\t * @type {Number}\n\t */\n\tget length() {\n\t\treturn this._items.length;\n\t}\n\n\t/**\n\t * The last item (the lowest node).\n\t *\n\t * @type {module:engine/model/schema~SchemaContextItem}\n\t */\n\tget last() {\n\t\treturn this._items[ this._items.length - 1 ];\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all context items.\n\t *\n\t * @returns {Iterable.<module:engine/model/schema~SchemaContextItem>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._items[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns a new schema context instance with an additional item.\n\t *\n\t * Item can be added as:\n\t *\n\t * \t\tconst context = new SchemaContext( [ '$root' ] );\n\t *\n\t * \t\t// An element.\n\t * \t\tconst fooElement = writer.createElement( 'fooElement' );\n\t * \t\tconst newContext = context.push( fooElement ); // [ '$root', 'fooElement' ]\n\t *\n\t * \t\t// A text node.\n\t * \t\tconst text = writer.createText( 'foobar' );\n\t * \t\tconst newContext = context.push( text ); // [ '$root', '$text' ]\n\t *\n\t * \t\t// A string (element name).\n\t * \t\tconst newContext = context.push( 'barElement' ); // [ '$root', 'barElement' ]\n\t *\n\t * **Note** {@link module:engine/model/node~Node} that is already in the model tree will be added as the only item\n\t * (without ancestors).\n\t *\n\t * @param {String|module:engine/model/node~Node|Array<String|module:engine/model/node~Node>} item An item that will be added\n\t * to the current context.\n\t * @returns {module:engine/model/schema~SchemaContext} A new schema context instance with an additional item.\n\t */\n\tpush( item ) {\n\t\tconst ctx = new SchemaContext( [ item ] );\n\n\t\tctx._items = [ ...this._items, ...ctx._items ];\n\n\t\treturn ctx;\n\t}\n\n\t/**\n\t * Gets an item on the given index.\n\t *\n\t * @returns {module:engine/model/schema~SchemaContextItem}\n\t */\n\tgetItem( index ) {\n\t\treturn this._items[ index ];\n\t}\n\n\t/**\n\t * Returns the names of items.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* getNames() {\n\t\tyield* this._items.map( item => item.name );\n\t}\n\n\t/**\n\t * Checks whether the context ends with the given nodes.\n\t *\n\t *\t\tconst ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );\n\t *\n\t *\t\tctx.endsWith( '$text' ); // -> true\n\t *\t\tctx.endsWith( 'paragraph $text' ); // -> true\n\t *\t\tctx.endsWith( '$root' ); // -> false\n\t *\t\tctx.endsWith( 'paragraph' ); // -> false\n\t *\n\t * @param {String} query\n\t * @returns {Boolean}\n\t */\n\tendsWith( query ) {\n\t\treturn Array.from( this.getNames() ).join( ' ' ).endsWith( query );\n\t}\n}\n\n/**\n * The definition of a {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * Contexts can be created in multiple ways:\n *\n * * By defining a **node** – in this cases this node and all its ancestors will be used.\n * * By defining a **position** in the document – in this case all its ancestors will be used.\n * * By defining an **array of nodes** – in this case this array defines the entire context.\n * * By defining a **name of node** - in this case node will be \"mocked\". It is not recommended because context\n * will be unrealistic (e.g. attributes of these nodes are not specified). However, at times this may be the only\n * way to define the context (e.g. when checking some hypothetical situation).\n * * By defining an **array of node names** (potentially, mixed with real nodes) – The same as **name of node**\n * but it is possible to create a path.\n * * By defining a {@link module:engine/model/schema~SchemaContext} instance - in this case the same instance as provided\n * will be return.\n *\n * Examples of context definitions passed to the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`}\n * method:\n *\n *\t\t// Assuming that we have a $root > blockQuote > paragraph structure, the following code\n *\t\t// will check node 'foo' in the following context:\n *\t\t// [ rootElement, blockQuoteElement, paragraphElement ]\n *\t\tconst contextDefinition = paragraphElement;\n * \t\tconst childToCheck = 'foo';\n *\t\tschema.checkChild( contextDefinition, childToCheck );\n *\n *\t\t// Also check in [ rootElement, blockQuoteElement, paragraphElement ].\n *\t\tschema.checkChild( model.createPositionAt( paragraphElement, 0 ), 'foo' );\n *\n *\t\t// Check in [ rootElement, paragraphElement ].\n *\t\tschema.checkChild( [ rootElement, paragraphElement ], 'foo' );\n *\n *\t\t// Check only fakeParagraphElement.\n *\t\tschema.checkChild( 'paragraph', 'foo' );\n *\n *\t\t// Check in [ fakeRootElement, fakeBarElement, paragraphElement ].\n *\t\tschema.checkChild( [ '$root', 'bar', paragraphElement ], 'foo' );\n *\n * All these `checkChild()` calls will fire {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`}\n * events in which `args[ 0 ]` is an instance of the context. Therefore, you can write a listener like this:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\n *\t\t\tconsole.log( Array.from( ctx.getNames() ) );\n *\t\t} );\n *\n * Which will log the following:\n *\n *\t\t[ '$root', 'blockQuote', 'paragraph' ]\n *\t\t[ '$root', 'paragraph' ]\n *\t\t[ '$root', 'bar', 'paragraph' ]\n *\n * Note: When using the {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} method\n * you may want to check whether a text node may have an attribute. A {@link module:engine/model/text~Text} is a\n * correct way to define a context so you can do this:\n *\n *\t\tschema.checkAttribute( textNode, 'bold' );\n *\n * But sometimes you want to check whether a text at a given position might've had some attribute,\n * in which case you can create a context by mising an array of elements with a `'$text'` string:\n *\n *\t\t// Check in [ rootElement, paragraphElement, textNode ].\n *\t\tschema.checkChild( [ ...positionInParagraph.getAncestors(), '$text' ], 'bold' );\n *\n * @typedef {module:engine/model/node~Node|module:engine/model/position~Position|module:engine/model/schema~SchemaContext|\n * String|Array.<String|module:engine/model/node~Node>} module:engine/model/schema~SchemaContextDefinition\n */\n\n/**\n * An item of the {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * It contains 3 properties:\n *\n * * `name` – the name of this item,\n * * `* getAttributeKeys()` – a generator of keys of item attributes,\n * * `getAttribute( keyName )` – a method to get attribute values.\n *\n * The context item interface is a highly simplified version of {@link module:engine/model/node~Node} and its role\n * is to expose only the information which schema checks are able to provide (which is the name of the node and\n * node's attributes).\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\t\t\tconst firstItem = ctx.getItem( 0 );\n *\n *\t\t\tconsole.log( firstItem.name ); // -> '$root'\n *\t\t\tconsole.log( firstItem.getAttribute( 'foo' ) ); // -> 'bar'\n *\t\t\tconsole.log( Array.from( firstItem.getAttributeKeys() ) ); // -> [ 'foo', 'faa' ]\n *\t\t} );\n *\n * @typedef {Object} module:engine/model/schema~SchemaContextItem\n */\n\nfunction compileBaseItemRule( sourceItemRules, itemName ) {\n\tconst itemRule = {\n\t\tname: itemName,\n\n\t\tallowIn: [],\n\t\tallowContentOf: [],\n\t\tallowWhere: [],\n\n\t\tallowAttributes: [],\n\t\tallowAttributesOf: [],\n\n\t\tinheritTypesFrom: []\n\t};\n\n\tcopyTypes( sourceItemRules, itemRule );\n\n\tcopyProperty( sourceItemRules, itemRule, 'allowIn' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowContentOf' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowWhere' );\n\n\tcopyProperty( sourceItemRules, itemRule, 'allowAttributes' );\n\tcopyProperty( sourceItemRules, itemRule, 'allowAttributesOf' );\n\n\tcopyProperty( sourceItemRules, itemRule, 'inheritTypesFrom' );\n\n\tmakeInheritAllWork( sourceItemRules, itemRule );\n\n\treturn itemRule;\n}\n\nfunction compileAllowContentOf( compiledDefinitions, itemName ) {\n\tfor ( const allowContentOfItemName of compiledDefinitions[ itemName ].allowContentOf ) {\n\t\t// The allowContentOf property may point to an unregistered element.\n\t\tif ( compiledDefinitions[ allowContentOfItemName ] ) {\n\t\t\tconst allowedChildren = getAllowedChildren( compiledDefinitions, allowContentOfItemName );\n\n\t\t\tallowedChildren.forEach( allowedItem => {\n\t\t\t\tallowedItem.allowIn.push( itemName );\n\t\t\t} );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowContentOf;\n}\n\nfunction compileAllowWhere( compiledDefinitions, itemName ) {\n\tfor ( const allowWhereItemName of compiledDefinitions[ itemName ].allowWhere ) {\n\t\tconst inheritFrom = compiledDefinitions[ allowWhereItemName ];\n\n\t\t// The allowWhere property may point to an unregistered element.\n\t\tif ( inheritFrom ) {\n\t\t\tconst allowedIn = inheritFrom.allowIn;\n\n\t\t\tcompiledDefinitions[ itemName ].allowIn.push( ...allowedIn );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowWhere;\n}\n\nfunction compileAllowAttributesOf( compiledDefinitions, itemName ) {\n\tfor ( const allowAttributeOfItem of compiledDefinitions[ itemName ].allowAttributesOf ) {\n\t\tconst inheritFrom = compiledDefinitions[ allowAttributeOfItem ];\n\n\t\tif ( inheritFrom ) {\n\t\t\tconst inheritAttributes = inheritFrom.allowAttributes;\n\n\t\t\tcompiledDefinitions[ itemName ].allowAttributes.push( ...inheritAttributes );\n\t\t}\n\t}\n\n\tdelete compiledDefinitions[ itemName ].allowAttributesOf;\n}\n\nfunction compileInheritPropertiesFrom( compiledDefinitions, itemName ) {\n\tconst item = compiledDefinitions[ itemName ];\n\n\tfor ( const inheritPropertiesOfItem of item.inheritTypesFrom ) {\n\t\tconst inheritFrom = compiledDefinitions[ inheritPropertiesOfItem ];\n\n\t\tif ( inheritFrom ) {\n\t\t\tconst typeNames = Object.keys( inheritFrom ).filter( name => name.startsWith( 'is' ) );\n\n\t\t\tfor ( const name of typeNames ) {\n\t\t\t\tif ( !( name in item ) ) {\n\t\t\t\t\titem[ name ] = inheritFrom[ name ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdelete item.inheritTypesFrom;\n}\n\n// Remove items which weren't registered (because it may break some checks or we'd need to complicate them).\n// Make sure allowIn doesn't contain repeated values.\nfunction cleanUpAllowIn( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\tconst existingItems = itemRule.allowIn.filter( itemToCheck => compiledDefinitions[ itemToCheck ] );\n\n\titemRule.allowIn = Array.from( new Set( existingItems ) );\n}\n\nfunction cleanUpAllowAttributes( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\n\titemRule.allowAttributes = Array.from( new Set( itemRule.allowAttributes ) );\n}\n\nfunction copyTypes( sourceItemRules, itemRule ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tconst typeNames = Object.keys( sourceItemRule ).filter( name => name.startsWith( 'is' ) );\n\n\t\tfor ( const name of typeNames ) {\n\t\t\titemRule[ name ] = sourceItemRule[ name ];\n\t\t}\n\t}\n}\n\nfunction copyProperty( sourceItemRules, itemRule, propertyName ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tif ( typeof sourceItemRule[ propertyName ] == 'string' ) {\n\t\t\titemRule[ propertyName ].push( sourceItemRule[ propertyName ] );\n\t\t} else if ( Array.isArray( sourceItemRule[ propertyName ] ) ) {\n\t\t\titemRule[ propertyName ].push( ...sourceItemRule[ propertyName ] );\n\t\t}\n\t}\n}\n\nfunction makeInheritAllWork( sourceItemRules, itemRule ) {\n\tfor ( const sourceItemRule of sourceItemRules ) {\n\t\tconst inheritFrom = sourceItemRule.inheritAllFrom;\n\n\t\tif ( inheritFrom ) {\n\t\t\titemRule.allowContentOf.push( inheritFrom );\n\t\t\titemRule.allowWhere.push( inheritFrom );\n\t\t\titemRule.allowAttributesOf.push( inheritFrom );\n\t\t\titemRule.inheritTypesFrom.push( inheritFrom );\n\t\t}\n\t}\n}\n\nfunction getAllowedChildren( compiledDefinitions, itemName ) {\n\tconst itemRule = compiledDefinitions[ itemName ];\n\n\treturn getValues( compiledDefinitions ).filter( def => def.allowIn.includes( itemRule.name ) );\n}\n\nfunction getValues( obj ) {\n\treturn Object.keys( obj ).map( key => obj[ key ] );\n}\n\nfunction mapContextItem( ctxItem ) {\n\tif ( typeof ctxItem == 'string' ) {\n\t\treturn {\n\t\t\tname: ctxItem,\n\n\t\t\t* getAttributeKeys() {},\n\n\t\t\tgetAttribute() {}\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\t// '$text' means text nodes and text proxies.\n\t\t\tname: ctxItem.is( 'element' ) ? ctxItem.name : '$text',\n\n\t\t\t* getAttributeKeys() {\n\t\t\t\tyield* ctxItem.getAttributeKeys();\n\t\t\t},\n\n\t\t\tgetAttribute( key ) {\n\t\t\t\treturn ctxItem.getAttribute( key );\n\t\t\t}\n\t\t};\n\t}\n}\n\n// Generator function returning values from provided walkers, switching between them at each iteration. If only one walker\n// is provided it will return data only from that walker.\n//\n// @param {module:engine/module/treewalker~TreeWalker} [backward] Walker iterating in backward direction.\n// @param {module:engine/module/treewalker~TreeWalker} [forward] Walker iterating in forward direction.\n// @returns {Iterable.<Object>} Object returned at each iteration contains `value` and `walker` (informing which walker returned\n// given value) fields.\nfunction* combineWalkers( backward, forward ) {\n\tlet done = false;\n\n\twhile ( !done ) {\n\t\tdone = true;\n\n\t\tif ( backward ) {\n\t\t\tconst step = backward.next();\n\n\t\t\tif ( !step.done ) {\n\t\t\t\tdone = false;\n\t\t\t\tyield {\n\t\t\t\t\twalker: backward,\n\t\t\t\t\tvalue: step.value\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( forward ) {\n\t\t\tconst step = forward.next();\n\n\t\t\tif ( !step.done ) {\n\t\t\t\tdone = false;\n\t\t\t\tyield {\n\t\t\t\t\twalker: forward,\n\t\t\t\t\tvalue: step.value\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Takes an array of non-intersecting ranges. For each of them gets minimal flat ranges covering that range and returns\n// all those minimal flat ranges.\n//\n// @param {Array.<module:engine/model/range~Range>} ranges Ranges to process.\n// @returns {Iterator.<module:engine/model/range~Range>} Minimal flat ranges of given `ranges`.\nfunction* convertToMinimalFlatRanges( ranges ) {\n\tfor ( const range of ranges ) {\n\t\tyield* range.getMinimalFlatRanges();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/conversion/upcastdispatcher\n */\n\nimport ViewConsumable from './viewconsumable';\nimport ModelRange from '../model/range';\nimport ModelPosition from '../model/position';\nimport { SchemaContext } from '../model/schema';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * `UpcastDispatcher` is a central point of {@link module:engine/view/view view} conversion, which is a process of\n * converting given {@link module:engine/view/documentfragment~DocumentFragment view document fragment} or\n * {@link module:engine/view/element~Element} into another structure.\n * In default application, {@link module:engine/view/view view} is converted to {@link module:engine/model/model}.\n *\n * During conversion process, for all {@link module:engine/view/node~Node view nodes} from the converted view document fragment,\n * `UpcastDispatcher` fires corresponding events. Special callbacks called \"converters\" should listen to\n * `UpcastDispatcher` for those events.\n *\n * Each callback, as the second argument, is passed a special object `data` that has `viewItem`, `modelCursor` and\n * `modelRange` properties. `viewItem` property contains {@link module:engine/view/node~Node view node} or\n * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * that is converted at the moment and might be handled by the callback. `modelRange` property should be used to save the result\n * of conversion and is always a {@link module:engine/model/range~Range} when conversion result is correct.\n * `modelCursor` property is a {@link module:engine/model/position~Position position} on which conversion result will be inserted\n * and is a context according to {@link module:engine/model/schema~Schema schema} will be checked before the conversion.\n * See also {@link ~UpcastDispatcher#convert}. It is also shared by reference by all callbacks listening to given event.\n *\n * The third parameter passed to a callback is an instance of {@link ~UpcastDispatcher}\n * which provides additional tools for converters.\n *\n * Examples of providing callbacks for `UpcastDispatcher`:\n *\n *\t\t// Converter for links (<a>).\n *\t\tupcastDispatcher.on( 'element:a', ( evt, data, conversionApi ) => {\n *\t\t\tif ( conversionApi.consumable.consume( data.viewItem, { name: true, attributes: [ 'href' ] } ) ) {\n *\t\t\t\t// <a> element is inline and is represented by an attribute in the model.\n *\t\t\t\t// This is why we need to convert only children.\n *\t\t\t\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\n *\n *\t\t\t\tfor ( let item of modelRange.getItems() ) {\n *\t\t\t\t\tif ( conversionApi.schema.checkAttribute( item, 'linkHref' ) ) {\n *\t\t\t\t\t\tconversionApi.writer.setAttribute( 'linkHref', data.viewItem.getAttribute( 'href' ), item );\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// Convert all elements which have no custom converter into paragraph (autoparagraphing).\n *  \tdata.viewToModel.on( 'element', ( evt, data, conversionApi ) => {\n *  \t \t// When element is already consumed by higher priority converters then do nothing.\n *  \t \tif ( conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n *  \t \t\t\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n *\n *  \t \t\t\t// Find allowed parent for paragraph that we are going to insert. If current parent does not allow\n *  \t \t\t\t// to insert paragraph but one of the ancestors does then split nodes to allowed parent.\n *  \t \t\t\tconst splitResult = conversionApi.splitToAllowedParent( paragraph, data.modelCursor );\n *\n *  \t \t\t\t// When there is no split result it means that we can't insert paragraph in this position.\n *  \t \t\t\tif ( splitResult ) {\n *  \t \t\t\t\t// Insert paragraph in allowed position.\n *  \t \t\t\t\tconversionApi.writer.insert( paragraph, splitResult.position );\n *\n *  \t \t\t\t\t// Convert children to paragraph.\n *  \t \t\t\t\tconst { modelRange } = conversionApi.convertChildren(\n *  \t \t\t\t\t\tdata.viewItem,\n *  \t \t\t\t\t\tconversionApi.writer.createPositionAt( paragraph, 0 )\n *  \t \t\t\t\t);\n *\n * \t\t\t\t\t\t// Set as conversion result, attribute converters may use this property.\n *  \t \t\t\t\tdata.modelRange = conversionApi.writer.createRange(\n *  \t \t\t\t\t\tconversionApi.writer.createPositionBefore( paragraph ),\n *  \t \t\t\t\t\tmodelRange.end\n *  \t \t\t\t\t);\n *\n *  \t \t\t\t\t// Continue conversion inside paragraph.\n *  \t \t\t\t\tdata.modelCursor = data.modelRange.end;\n *  \t \t\t\t}\n *  \t \t\t}\n *  \t \t}\n *  \t }, { priority: 'low' } );\n *\n * Before each conversion process, `UpcastDispatcher` fires {@link ~UpcastDispatcher#event:viewCleanup}\n * event which can be used to prepare tree view for conversion.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @fires viewCleanup\n * @fires element\n * @fires text\n * @fires documentFragment\n */\nexport default class UpcastDispatcher {\n\t/**\n\t * Creates a `UpcastDispatcher` that operates using passed API.\n\t *\n\t * @see module:engine/conversion/upcastdispatcher~ViewConversionApi\n\t * @param {Object} [conversionApi] Additional properties for interface that will be passed to events fired\n\t * by `UpcastDispatcher`.\n\t */\n\tconstructor( conversionApi = {} ) {\n\t\t/**\n\t\t * List of elements that will be checked after conversion process and if element in the list will be empty it\n\t\t * will be removed from conversion result.\n\t\t *\n\t\t * After conversion process list is cleared.\n\t\t *\n\t\t * @protected\n\t\t * @type {Set<module:engine/model/element~Element>}\n\t\t */\n\t\tthis._removeIfEmpty = new Set();\n\n\t\t/**\n\t\t * Position in the temporary structure where the converted content is inserted. The structure reflect the context of\n\t\t * the target position where the content will be inserted. This property is build based on the context parameter of the\n\t\t * convert method.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/position~Position|null}\n\t\t */\n\t\tthis._modelCursor = null;\n\n\t\t/**\n\t\t * Interface passed by dispatcher to the events callbacks.\n\t\t *\n\t\t * @member {module:engine/conversion/upcastdispatcher~ViewConversionApi}\n\t\t */\n\t\tthis.conversionApi = Object.assign( {}, conversionApi );\n\n\t\t// `convertItem`, `convertChildren` and `splitToAllowedParent` are bound to this `UpcastDispatcher`\n\t\t// instance and set on `conversionApi`. This way only a part of `UpcastDispatcher` API is exposed.\n\t\tthis.conversionApi.convertItem = this._convertItem.bind( this );\n\t\tthis.conversionApi.convertChildren = this._convertChildren.bind( this );\n\t\tthis.conversionApi.splitToAllowedParent = this._splitToAllowedParent.bind( this );\n\t}\n\n\t/**\n\t * Starts the conversion process. The entry point for the conversion.\n\t *\n\t * @fires element\n\t * @fires text\n\t * @fires documentFragment\n\t * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element} viewItem\n\t * Part of the view to be converted.\n\t * @param {module:engine/model/writer~Writer} writer Instance of model writer.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context=['$root']] Elements will be converted according to this context.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Model data that is a result of the conversion process\n\t * wrapped in `DocumentFragment`. Converted marker elements will be set as that document fragment's\n\t * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n\t */\n\tconvert( viewItem, writer, context = [ '$root' ] ) {\n\t\tthis.fire( 'viewCleanup', viewItem );\n\n\t\t// Create context tree and set position in the top element.\n\t\t// Items will be converted according to this position.\n\t\tthis._modelCursor = createContextTree( context, writer );\n\n\t\t// Store writer in conversion as a conversion API\n\t\t// to be sure that conversion process will use the same batch.\n\t\tthis.conversionApi.writer = writer;\n\n\t\t// Create consumable values list for conversion process.\n\t\tthis.conversionApi.consumable = ViewConsumable.createFrom( viewItem );\n\n\t\t// Custom data stored by converter for conversion process.\n\t\tthis.conversionApi.store = {};\n\n\t\t// Do the conversion.\n\t\tconst { modelRange } = this._convertItem( viewItem, this._modelCursor );\n\n\t\t// Conversion result is always a document fragment so let's create this fragment.\n\t\tconst documentFragment = writer.createDocumentFragment();\n\n\t\t// When there is a conversion result.\n\t\tif ( modelRange ) {\n\t\t\t// Remove all empty elements that was added to #_removeIfEmpty list.\n\t\t\tthis._removeEmptyElements();\n\n\t\t\t// Move all items that was converted to context tree to document fragment.\n\t\t\tfor ( const item of Array.from( this._modelCursor.parent.getChildren() ) ) {\n\t\t\t\twriter.append( item, documentFragment );\n\t\t\t}\n\n\t\t\t// Extract temporary markers elements from model and set as static markers collection.\n\t\t\tdocumentFragment.markers = extractMarkersFromModelFragment( documentFragment, writer );\n\t\t}\n\n\t\t// Clear context position.\n\t\tthis._modelCursor = null;\n\n\t\t// Clear split elements.\n\t\tthis._removeIfEmpty.clear();\n\n\t\t// Clear conversion API.\n\t\tthis.conversionApi.writer = null;\n\t\tthis.conversionApi.store = null;\n\n\t\t// Return fragment as conversion result.\n\t\treturn documentFragment;\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~ViewConversionApi#convertItem\n\t */\n\t_convertItem( viewItem, modelCursor ) {\n\t\tconst data = Object.assign( { viewItem, modelCursor, modelRange: null } );\n\n\t\tif ( viewItem.is( 'element' ) ) {\n\t\t\tthis.fire( 'element:' + viewItem.name, data, this.conversionApi );\n\t\t} else if ( viewItem.is( 'text' ) ) {\n\t\t\tthis.fire( 'text', data, this.conversionApi );\n\t\t} else {\n\t\t\tthis.fire( 'documentFragment', data, this.conversionApi );\n\t\t}\n\n\t\t// Handle incorrect conversion result.\n\t\tif ( data.modelRange && !( data.modelRange instanceof ModelRange ) ) {\n\t\t\t/**\n\t\t\t * Incorrect conversion result was dropped.\n\t\t\t *\n\t\t\t * {@link module:engine/model/range~Range Model range} should be a conversion result.\n\t\t\t *\n\t\t\t * @error view-conversion-dispatcher-incorrect-result\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'view-conversion-dispatcher-incorrect-result: Incorrect conversion result was dropped.' );\n\t\t}\n\n\t\treturn { modelRange: data.modelRange, modelCursor: data.modelCursor };\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~ViewConversionApi#convertChildren\n\t */\n\t_convertChildren( viewItem, modelCursor ) {\n\t\tconst modelRange = new ModelRange( modelCursor );\n\t\tlet nextModelCursor = modelCursor;\n\n\t\tfor ( const viewChild of Array.from( viewItem.getChildren() ) ) {\n\t\t\tconst result = this._convertItem( viewChild, nextModelCursor );\n\n\t\t\tif ( result.modelRange instanceof ModelRange ) {\n\t\t\t\tmodelRange.end = result.modelRange.end;\n\t\t\t\tnextModelCursor = result.modelCursor;\n\t\t\t}\n\t\t}\n\n\t\treturn { modelRange, modelCursor: nextModelCursor };\n\t}\n\n\t/**\n\t * @private\n\t * @see module:engine/conversion/upcastdispatcher~ViewConversionApi#splitToAllowedParent\n\t */\n\t_splitToAllowedParent( node, modelCursor ) {\n\t\t// Try to find allowed parent.\n\t\tconst allowedParent = this.conversionApi.schema.findAllowedParent( node, modelCursor );\n\n\t\t// When there is no parent that allows to insert node then return `null`.\n\t\tif ( !allowedParent ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// When current position parent allows to insert node then return this position.\n\t\tif ( allowedParent === modelCursor.parent ) {\n\t\t\treturn { position: modelCursor };\n\t\t}\n\n\t\t// When allowed parent is in context tree.\n\t\tif ( this._modelCursor.parent.getAncestors().includes( allowedParent ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Split element to allowed parent.\n\t\tconst splitResult = this.conversionApi.writer.split( modelCursor, allowedParent );\n\n\t\t// Remember all elements that are created as a result of split.\n\t\t// This is important because at the end of conversion we want to remove all empty split elements.\n\t\t//\n\t\t// Loop through positions between elements in range (except split result position) and collect parents.\n\t\t// <notSplit><split1><split2>[pos]</split2>[pos]</split1>[omit]<split1>[pos]<split2>[pos]</split2></split1></notSplit>\n\t\tfor ( const position of splitResult.range.getPositions() ) {\n\t\t\tif ( !position.isEqual( splitResult.position ) ) {\n\t\t\t\tthis._removeIfEmpty.add( position.parent );\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tposition: splitResult.position,\n\t\t\tcursorParent: splitResult.range.end.parent\n\t\t};\n\t}\n\n\t/**\n\t * Checks if {@link #_removeIfEmpty} contains empty elements and remove them.\n\t * We need to do it smart because there could be elements that are not empty because contains\n\t * other empty elements and after removing its children they become available to remove.\n\t * We need to continue iterating over split elements as long as any element will be removed.\n\t *\n\t * @private\n\t */\n\t_removeEmptyElements() {\n\t\tlet removed = false;\n\n\t\tfor ( const element of this._removeIfEmpty ) {\n\t\t\tif ( element.isEmpty ) {\n\t\t\t\tthis.conversionApi.writer.remove( element );\n\t\t\t\tthis._removeIfEmpty.delete( element );\n\t\t\t\tremoved = true;\n\t\t\t}\n\t\t}\n\n\t\tif ( removed ) {\n\t\t\tthis._removeEmptyElements();\n\t\t}\n\t}\n\n\t/**\n\t * Fired before the first conversion event, at the beginning of upcast (view to model conversion) process.\n\t *\n\t * @event viewCleanup\n\t * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element}\n\t * viewItem Part of the view to be converted.\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/element~Element} is converted.\n\t *\n\t * `element` is a namespace event for a class of events. Names of actually called events follow this pattern:\n\t * `element:<elementName>` where `elementName` is the name of converted element. This way listeners may listen to\n\t * all elements conversion or to conversion of specific elements.\n\t *\n\t * @event element\n\t * @param {Object} data Conversion data. Keep in mind that this object is shared by reference between all\n\t * callbacks that will be called. This means that callbacks can override values if needed, and those values will\n\t * be available in other callbacks.\n\t * @param {module:engine/view/item~Item} data.viewItem Converted item.\n\t * @param {module:engine/model/position~Position} data.modelCursor Position where a converter should start changes.\n\t * Change this value for the next converter to tell where the conversion should continue.\n\t * @param {module:engine/model/range~Range} data.modelRange The current state of conversion result. Every change to\n\t * converted element should be reflected by setting or modifying this property.\n\t * @param {ViewConversionApi} conversionApi Conversion utilities to be used by callback.\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/text~Text} is converted.\n\t *\n\t * @event text\n\t * @see #event:element\n\t */\n\n\t/**\n\t * Fired when {@link module:engine/view/documentfragment~DocumentFragment} is converted.\n\t *\n\t * @event documentFragment\n\t * @see #event:element\n\t */\n}\n\nmix( UpcastDispatcher, EmitterMixin );\n\n// Traverses given model item and searches elements which marks marker range. Found element is removed from\n// DocumentFragment but path of this element is stored in a Map which is then returned.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/node~Node} modelItem Fragment of model.\n// @returns {Map<String, module:engine/model/range~Range>} List of static markers.\nfunction extractMarkersFromModelFragment( modelItem, writer ) {\n\tconst markerElements = new Set();\n\tconst markers = new Map();\n\n\t// Create ModelTreeWalker.\n\tconst range = ModelRange._createIn( modelItem ).getItems();\n\n\t// Walk through DocumentFragment and collect marker elements.\n\tfor ( const item of range ) {\n\t\t// Check if current element is a marker.\n\t\tif ( item.name == '$marker' ) {\n\t\t\tmarkerElements.add( item );\n\t\t}\n\t}\n\n\t// Walk through collected marker elements store its path and remove its from the DocumentFragment.\n\tfor ( const markerElement of markerElements ) {\n\t\tconst markerName = markerElement.getAttribute( 'data-name' );\n\t\tconst currentPosition = writer.createPositionBefore( markerElement );\n\n\t\t// When marker of given name is not stored it means that we have found the beginning of the range.\n\t\tif ( !markers.has( markerName ) ) {\n\t\t\tmarkers.set( markerName, new ModelRange( currentPosition.clone() ) );\n\t\t// Otherwise is means that we have found end of the marker range.\n\t\t} else {\n\t\t\tmarkers.get( markerName ).end = currentPosition.clone();\n\t\t}\n\n\t\t// Remove marker element from DocumentFragment.\n\t\twriter.remove( markerElement );\n\t}\n\n\treturn markers;\n}\n\n// Creates model fragment according to given context and returns position in top element.\nfunction createContextTree( contextDefinition, writer ) {\n\tlet position;\n\n\tfor ( const item of new SchemaContext( contextDefinition ) ) {\n\t\tconst attributes = {};\n\n\t\tfor ( const key of item.getAttributeKeys() ) {\n\t\t\tattributes[ key ] = item.getAttribute( key );\n\t\t}\n\n\t\tconst current = writer.createElement( item.name, attributes );\n\n\t\tif ( position ) {\n\t\t\twriter.append( current, position );\n\t\t}\n\n\t\tposition = ModelPosition._createAt( current, 0 );\n\t}\n\n\treturn position;\n}\n\n/**\n * Conversion interface that is registered for given {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n * and is passed as one of parameters when {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher dispatcher}\n * fires it's events.\n *\n * @interface ViewConversionApi\n */\n\n/**\n * Starts conversion of given item by firing an appropriate event.\n *\n * Every fired event is passed (as first parameter) an object with `modelRange` property. Every event may set and/or\n * modify that property. When all callbacks are done, the final value of `modelRange` property is returned by this method.\n * The `modelRange` must be {@link module:engine/model/range~Range model range} or `null` (as set by default).\n *\n * @method #convertItem\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\n * @param {module:engine/view/item~Item} viewItem Item to convert.\n * @param {module:engine/model/position~Position} modelCursor Position of conversion.\n * @returns {Object} result Conversion result.\n * @returns {module:engine/model/range~Range|null} result.modelRange Model range containing result of item conversion,\n * created and modified by callbacks attached to fired event, or `null` if the conversion result was incorrect.\n * @returns {module:engine/model/position~Position} result.modelCursor Position where conversion should be continued.\n */\n\n/**\n * Starts conversion of all children of given item by firing appropriate events for all those children.\n *\n * @method #convertChildren\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\n * @param {module:engine/view/item~Item} viewItem Item to convert.\n * @param {module:engine/model/position~Position} modelCursor Position of conversion.\n * @returns {Object} result Conversion result.\n * @returns {module:engine/model/range~Range} result.modelRange Model range containing results of conversion of all children of given item.\n * When no children was converted then range is collapsed.\n * @returns {module:engine/model/position~Position} result.modelCursor Position where conversion should be continued.\n */\n\n/**\n * Checks {@link module:engine/model/schema~Schema schema} to find allowed parent for element that we are going to insert\n * starting from given position. If current parent does not allow to insert element but one of the ancestors does then\n * split nodes to allowed parent.\n *\n * If schema allows to insert node in given position, nothing is split and object with that position is returned.\n *\n * If it was not possible to find allowed parent, `null` is returned, nothing is split.\n *\n * Otherwise, ancestors are split and object with position and the copy of the split element is returned.\n *\n * For instance, if `<image>` is not allowed in `<paragraph>` but is allowed in `$root`:\n *\n *\t\t<paragraph>foo[]bar</paragraph>\n *\n *  \t-> split for `<image>` ->\n *\n *  \t<paragraph>foo</paragraph>[]<paragraph>bar</paragraph>\n *\n * In the sample above position between `<paragraph>` elements will be returned as `position` and the second `paragraph`\n * as `cursorParent`.\n *\n * @method #splitToAllowedParent\n * @param {module:engine/model/position~Position} position Position on which element is going to be inserted.\n * @param {module:engine/model/node~Node} node Node to insert.\n * @returns {Object|null} Split result. If it was not possible to find allowed position `null` is returned.\n * @returns {module:engine/model/position~Position} position between split elements.\n * @returns {module:engine/model/element~Element} [cursorParent] Element inside which cursor should be placed to\n * continue conversion. When element is not defined it means that there was no split.\n */\n\n/**\n * Instance of {@link module:engine/conversion/viewconsumable~ViewConsumable}. It stores\n * information about what parts of processed view item are still waiting to be handled. After a piece of view item\n * was converted, appropriate consumable value should be {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consumed}.\n *\n * @param {Object} #consumable\n */\n\n/**\n * Custom data stored by converters for conversion process. Custom properties of this object can be defined and use to\n * pass parameters between converters.\n *\n * The difference between this property and `data` parameter of\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element} is that `data` parameters allows you\n * to pass parameters within a single event and `store` within the whole conversion.\n *\n * @param {Object} #store\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport Matcher from '../view/matcher';\n\nimport ModelRange from '../model/range';\n\nimport { cloneDeep } from 'lodash-es';\n\n/**\n * Contains {@link module:engine/view/view view} to {@link module:engine/model/model model} converters for\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}.\n *\n * @module engine/conversion/upcast-converters\n */\n\n/**\n * View element to model element conversion helper.\n *\n * This conversion results in creating a model element. For example, view `<p>Foo</p>` becomes `<paragraph>Foo</paragraph>` in the model.\n *\n * Keep in mind that the element will be inserted only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n *\n *\t\tupcastElementToElement( { view: 'p', model: 'paragraph' } );\n *\n *\t\tupcastElementToElement( { view: 'p', model: 'paragraph', converterPriority: 'high' } );\n *\n *\t\tupcastElementToElement( {\n *\t\t\tview: {\n *\t\t\t\tname: 'p',\n *\t\t\t\tclasses: 'fancy'\n *\t\t\t},\n *\t\t\tmodel: 'fancyParagraph'\n *\t\t} );\n *\n *\t\tupcastElementToElement( {\n * \t\t\tview: {\n *\t\t\t\tname: 'p',\n *\t\t\t\tclasses: 'heading'\n * \t\t\t},\n * \t\t\tmodel: ( viewElement, modelWriter ) => {\n * \t\t\t\treturn modelWriter.createElement( 'heading', { level: viewElement.getAttribute( 'data-level' ) } );\n * \t\t\t}\n * \t\t} );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n * @param {String|module:engine/model/element~Element|Function} config.model Name of the model element, a model element\n * instance or a function that takes a view element and returns a model element. The model element will be inserted in the model.\n * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function upcastElementToElement( config ) {\n\tconfig = cloneDeep( config );\n\n\tconst converter = _prepareToElementConverter( config );\n\n\tconst elementName = _getViewElementNameFromConfig( config );\n\tconst eventName = elementName ? 'element:' + elementName : 'element';\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, converter, { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n/**\n * View element to model attribute conversion helper.\n *\n * This conversion results in setting an attribute on a model node. For example, view `<strong>Foo</strong>` becomes\n * `Foo` {@link module:engine/model/text~Text model text node} with `bold` attribute set to `true`.\n *\n * This helper is meant to set a model attribute on all the elements that are inside the converted element:\n *\n *\t\t<strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold=\"true\">Foo</$text></paragraph>\n *\n * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).\n * Even though `<strong>` is over `<p>` element, `bold=\"true\"` was added to the text. See\n * {@link module:engine/conversion/upcast-converters~upcastAttributeToAttribute} for comparison.\n *\n * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n *\n *\t\tupcastElementToAttribute( { view: 'strong', model: 'bold' } );\n *\n *\t\tupcastElementToAttribute( { view: 'strong', model: 'bold', converterPriority: 'high' } );\n *\n *\t\tupcastElementToAttribute( {\n *\t\t\tview: {\n *\t\t\t\tname: 'span',\n *\t\t\t\tclasses: 'bold'\n *\t\t\t},\n *\t\t\tmodel: 'bold'\n *\t\t} );\n *\n *\t\tupcastElementToAttribute( {\n *\t\t\tview: {\n *\t\t\t\tname: 'span',\n *\t\t\t\tclasses: [ 'styled', 'styled-dark' ]\n *\t\t\t},\n *\t\t\tmodel: {\n *\t\t\t\tkey: 'styled',\n *\t\t\t\tvalue: 'dark'\n *\t\t\t}\n *\t\t} );\n *\n * \t\tupcastElementToAttribute( {\n *\t\t\tview: {\n *\t\t\t\tname: 'span',\n *\t\t\t\tstyles: {\n *\t\t\t\t\t'font-size': /[\\s\\S]+/\n *\t\t\t\t}\n *\t\t\t},\n *\t\t\tmodel: {\n *\t\t\t\tkey: 'fontSize',\n *\t\t\t\tvalue: viewElement => {\n *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n *\t\t\t\t\tconst value = fontSize.substr( 0, fontSize.length - 2 );\n *\n *\t\t\t\t\tif ( value <= 10 ) {\n *\t\t\t\t\t\treturn 'small';\n *\t\t\t\t\t} else if ( value > 12 ) {\n *\t\t\t\t\t\treturn 'big';\n *\t\t\t\t\t}\n *\n *\t\t\t\t\treturn null;\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n * @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n * If `String` is given, the model attribute value will be set to `true`.\n * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function upcastElementToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\t_normalizeModelAttributeConfig( config );\n\n\tconst converter = _prepareToAttributeConverter( config, false );\n\n\tconst elementName = _getViewElementNameFromConfig( config );\n\tconst eventName = elementName ? 'element:' + elementName : 'element';\n\n\treturn dispatcher => {\n\t\tdispatcher.on( eventName, converter, { priority: config.converterPriority || 'normal' } );\n\t};\n}\n\n/**\n * View attribute to model attribute conversion helper.\n *\n * This conversion results in setting an attribute on a model node. For example, view `<img src=\"foo.jpg\"></img>` becomes\n * `<image source=\"foo.jpg\"></image>` in the model.\n *\n * This helper is meant to convert view attributes from view elements which got converted to the model, so the view attribute\n * is set only on the corresponding model node:\n *\n *\t\t<div class=\"dark\"><div>foo</div></div>    -->    <div dark=\"true\"><div>foo</div></div>\n *\n * Above, `class=\"dark\"` attribute is added only to the `<div>` elements that has it. This is in contrary to\n * {@link module:engine/conversion/upcast-converters~upcastElementToAttribute} which sets attributes for all the children in the model:\n *\n *\t\t<strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold=\"true\">Foo</$text></paragraph>\n *\n * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).\n * Even though `<strong>` is over `<p>` element, `bold=\"true\"` was added to the text.\n *\n * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n *\n *\t\tupcastAttributeToAttribute( { view: 'src', model: 'source' } );\n *\n *\t\tupcastAttributeToAttribute( { view: { key: 'src' }, model: 'source' } );\n *\n *\t\tupcastAttributeToAttribute( { view: { key: 'src' }, model: 'source', converterPriority: 'normal' } );\n *\n *\t\tupcastAttributeToAttribute( {\n *\t\t\tview: {\n *\t\t\t\tkey: 'data-style',\n *\t\t\t\tvalue: /[\\s\\S]+/\n *\t\t\t},\n *\t\t\tmodel: 'styled'\n *\t\t} );\n *\n *\t\tupcastAttributeToAttribute( {\n *\t\t\tview: {\n *\t\t\t\tname: 'img',\n *\t\t\t\tkey: 'class',\n *\t\t\t\tvalue: 'styled-dark'\n *\t\t\t},\n *\t\t\tmodel: {\n *\t\t\t\tkey: 'styled',\n *\t\t\t\tvalue: 'dark'\n *\t\t\t}\n *\t\t} );\n *\n *\t\tupcastAttributeToAttribute( {\n *\t\t\tview: {\n *\t\t\t\tkey: 'class',\n *\t\t\t\tvalue: /styled-[\\S]+/\n *\t\t\t},\n *\t\t\tmodel: {\n *\t\t\t\tkey: 'styled'\n *\t\t\t\tvalue: viewElement => {\n *\t\t\t\t\tconst regexp = /styled-([\\S]+)/;\n *\t\t\t\t\tconst match = viewElement.getAttribute( 'class' ).match( regexp );\n *\n *\t\t\t\t\treturn match[ 1 ];\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {String|Object} config.view Specifies which view attribute will be converted. If a `String` is passed,\n * attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\n * specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\n * property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\n * a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\n * @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n * If `String` is given, the model attribute value will be same as view attribute value.\n * @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function upcastAttributeToAttribute( config ) {\n\tconfig = cloneDeep( config );\n\n\tlet viewKey = null;\n\n\tif ( typeof config.view == 'string' || config.view.key ) {\n\t\tviewKey = _normalizeViewAttributeKeyValueConfig( config );\n\t}\n\n\t_normalizeModelAttributeConfig( config, viewKey );\n\n\tconst converter = _prepareToAttributeConverter( config, true );\n\n\treturn dispatcher => {\n\t\tdispatcher.on( 'element', converter, { priority: config.converterPriority || 'low' } );\n\t};\n}\n\n/**\n * View element to model marker conversion helper.\n *\n * This conversion results in creating a model marker. For example, if the marker was stored in a view as an element:\n * `<p>Fo<span data-marker=\"comment\" data-comment-id=\"7\"></span>o</p><p>B<span data-marker=\"comment\" data-comment-id=\"7\"></span>ar</p>`,\n * after the conversion is done, the marker will be available in\n * {@link module:engine/model/model~Model#markers model document markers}.\n *\n *\t\tupcastElementToMarker( { view: 'marker-search', model: 'search' } );\n *\n *\t\tupcastElementToMarker( { view: 'marker-search', model: 'search', converterPriority: 'high' } );\n *\n *\t\tupcastElementToMarker( {\n *\t\t\tview: 'marker-search',\n *\t\t\tmodel: viewElement => 'comment:' + viewElement.getAttribute( 'data-comment-id' )\n *\t\t} );\n *\n *\t\tupcastElementToMarker( {\n *\t\t\tview: {\n *\t\t\t\tname: 'span',\n *\t\t\t\tattributes: {\n *\t\t\t\t\t'data-marker': 'search'\n *\t\t\t\t}\n *\t\t\t},\n *\t\t\tmodel: 'search'\n *\t\t} );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for} to learn how to add converter to conversion process.\n *\n * @param {Object} config Conversion configuration.\n * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n * @param {String|Function} config.model Name of the model marker, or a function that takes a view element and returns\n * a model marker name.\n * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n * @returns {Function} Conversion helper.\n */\nexport function upcastElementToMarker( config ) {\n\tconfig = cloneDeep( config );\n\n\t_normalizeToMarkerConfig( config );\n\n\treturn upcastElementToElement( config );\n}\n\n// Helper function for from-view-element conversion. Checks if `config.view` directly specifies converted view element's name\n// and if so, returns it.\n//\n// @param {Object} config Conversion config.\n// @returns {String|null} View element name or `null` if name is not directly set.\nfunction _getViewElementNameFromConfig( config ) {\n\tif ( typeof config.view == 'string' ) {\n\t\treturn config.view;\n\t}\n\n\tif ( typeof config.view == 'object' && typeof config.view.name == 'string' ) {\n\t\treturn config.view.name;\n\t}\n\n\treturn null;\n}\n\n// Helper for to-model-element conversion. Takes a config object and returns a proper converter function.\n//\n// @param {Object} config Conversion configuration.\n// @returns {Function} View to model converter.\nfunction _prepareToElementConverter( config ) {\n\tconst matcher = new Matcher( config.view );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\t// This will be usually just one pattern but we support matchers with many patterns too.\n\t\tconst match = matcher.match( data.viewItem );\n\n\t\t// If there is no match, this callback should not do anything.\n\t\tif ( !match ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Force consuming element's name.\n\t\tmatch.match.name = true;\n\n\t\t// Create model element basing on config.\n\t\tconst modelElement = _getModelElement( config.model, data.viewItem, conversionApi.writer );\n\n\t\t// Do not convert if element building function returned falsy value.\n\t\tif ( !modelElement ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When element was already consumed then skip it.\n\t\tif ( !conversionApi.consumable.test( data.viewItem, match.match ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find allowed parent for element that we are going to insert.\n\t\t// If current parent does not allow to insert element but one of the ancestors does\n\t\t// then split nodes to allowed parent.\n\t\tconst splitResult = conversionApi.splitToAllowedParent( modelElement, data.modelCursor );\n\n\t\t// When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\t\tif ( !splitResult ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Insert element on allowed position.\n\t\tconversionApi.writer.insert( modelElement, splitResult.position );\n\n\t\t// Convert children and insert to element.\n\t\tconst childrenResult = conversionApi.convertChildren( data.viewItem, conversionApi.writer.createPositionAt( modelElement, 0 ) );\n\n\t\t// Consume appropriate value from consumable values list.\n\t\tconversionApi.consumable.consume( data.viewItem, match.match );\n\n\t\t// Set conversion result range.\n\t\tdata.modelRange = new ModelRange(\n\t\t\t// Range should start before inserted element\n\t\t\tconversionApi.writer.createPositionBefore( modelElement ),\n\t\t\t// Should end after but we need to take into consideration that children could split our\n\t\t\t// element, so we need to move range after parent of the last converted child.\n\t\t\t// before: <allowed>[]</allowed>\n\t\t\t// after: <allowed>[<converted><child></child></converted><child></child><converted>]</converted></allowed>\n\t\t\tconversionApi.writer.createPositionAfter( childrenResult.modelCursor.parent )\n\t\t);\n\n\t\t// Now we need to check where the modelCursor should be.\n\t\t// If we had to split parent to insert our element then we want to continue conversion inside split parent.\n\t\t//\n\t\t// before: <allowed><notAllowed>[]</notAllowed></allowed>\n\t\t// after:  <allowed><notAllowed></notAllowed><converted></converted><notAllowed>[]</notAllowed></allowed>\n\t\tif ( splitResult.cursorParent ) {\n\t\t\tdata.modelCursor = conversionApi.writer.createPositionAt( splitResult.cursorParent, 0 );\n\n\t\t\t// Otherwise just continue after inserted element.\n\t\t} else {\n\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t}\n\t};\n}\n\n// Helper function for upcasting-to-element converter. Takes the model configuration, the converted view element\n// and a writer instance and returns a model element instance to be inserted in the model.\n//\n// @param {String|Function|module:engine/model/element~Element} model Model conversion configuration.\n// @param {module:engine/view/node~Node} input The converted view node.\n// @param {module:engine/model/writer~Writer} writer A writer instance to use to create the model element.\nfunction _getModelElement( model, input, writer ) {\n\tif ( model instanceof Function ) {\n\t\treturn model( input, writer );\n\t} else {\n\t\treturn writer.createElement( model );\n\t}\n}\n\n// Helper function view-attribute-to-model-attribute helper. Normalizes `config.view` which was set as `String` or\n// as an `Object` with `key`, `value` and `name` properties. Normalized `config.view` has is compatible with\n// {@link module:engine/view/matcher~MatcherPattern}.\n//\n// @param {Object} config Conversion config.\n// @returns {String} Key of the converted view attribute.\nfunction _normalizeViewAttributeKeyValueConfig( config ) {\n\tif ( typeof config.view == 'string' ) {\n\t\tconfig.view = { key: config.view };\n\t}\n\n\tconst key = config.view.key;\n\tlet normalized;\n\n\tif ( key == 'class' || key == 'style' ) {\n\t\tconst keyName = key == 'class' ? 'classes' : 'styles';\n\n\t\tnormalized = {\n\t\t\t[ keyName ]: config.view.value\n\t\t};\n\t} else {\n\t\tconst value = typeof config.view.value == 'undefined' ? /[\\s\\S]*/ : config.view.value;\n\n\t\tnormalized = {\n\t\t\tattributes: {\n\t\t\t\t[ key ]: value\n\t\t\t}\n\t\t};\n\t}\n\n\tif ( config.view.name ) {\n\t\tnormalized.name = config.view.name;\n\t}\n\n\tconfig.view = normalized;\n\n\treturn key;\n}\n\n// Helper function that normalizes `config.model` in from-model-attribute conversion. `config.model` can be set\n// as a `String`, an `Object` with only `key` property or an `Object` with `key` and `value` properties. Normalized\n// `config.model` is an `Object` with `key` and `value` properties.\n//\n// @param {Object} config Conversion config.\n// @param {String} viewAttributeKeyToCopy Key of the converted view attribute. If it is set, model attribute value\n// will be equal to view attribute value.\nfunction _normalizeModelAttributeConfig( config, viewAttributeKeyToCopy = null ) {\n\tconst defaultModelValue = viewAttributeKeyToCopy === null ? true : viewElement => viewElement.getAttribute( viewAttributeKeyToCopy );\n\n\tconst key = typeof config.model != 'object' ? config.model : config.model.key;\n\tconst value = typeof config.model != 'object' || typeof config.model.value == 'undefined' ? defaultModelValue : config.model.value;\n\n\tconfig.model = { key, value };\n}\n\n// Helper for to-model-attribute conversion. Takes the model attribute name and conversion configuration and returns\n// a proper converter function.\n//\n// @param {String} modelAttributeKey The key of the model attribute to set on a model node.\n// @param {Object|Array.<Object>} config Conversion configuration. It is possible to provide multiple configurations in an array.\n// @param {Boolean} shallow If set to `true` the attribute will be set only on top-level nodes. Otherwise, it will be set\n// on all elements in the range.\nfunction _prepareToAttributeConverter( config, shallow ) {\n\tconst matcher = new Matcher( config.view );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst match = matcher.match( data.viewItem );\n\n\t\t// If there is no match, this callback should not do anything.\n\t\tif ( !match ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelKey = config.model.key;\n\t\tconst modelValue = typeof config.model.value == 'function' ? config.model.value( data.viewItem ) : config.model.value;\n\n\t\t// Do not convert if attribute building function returned falsy value.\n\t\tif ( modelValue === null ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( _onlyViewNameIsDefined( config ) ) {\n\t\t\tmatch.match.name = true;\n\t\t} else {\n\t\t\t// Do not test or consume `name` consumable.\n\t\t\tdelete match.match.name;\n\t\t}\n\n\t\t// Try to consume appropriate values from consumable values list.\n\t\tif ( !conversionApi.consumable.test( data.viewItem, match.match ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Since we are converting to attribute we need an range on which we will set the attribute.\n\t\t// If the range is not created yet, we will create it.\n\t\tif ( !data.modelRange ) {\n\t\t\t// Convert children and set conversion result as a current data.\n\t\t\tdata = Object.assign( data, conversionApi.convertChildren( data.viewItem, data.modelCursor ) );\n\t\t}\n\n\t\t// Set attribute on current `output`. `Schema` is checked inside this helper function.\n\t\tconst attributeWasSet = _setAttributeOn( data.modelRange, { key: modelKey, value: modelValue }, shallow, conversionApi );\n\n\t\tif ( attributeWasSet ) {\n\t\t\tconversionApi.consumable.consume( data.viewItem, match.match );\n\t\t}\n\t};\n}\n\n// Helper function that checks if element name should be consumed in attribute converters.\n//\n// @param {Object} config Conversion config.\n// @returns {Boolean}\nfunction _onlyViewNameIsDefined( config ) {\n\tif ( typeof config.view == 'object' && !_getViewElementNameFromConfig( config ) ) {\n\t\treturn false;\n\t}\n\n\treturn !config.view.classes && !config.view.attributes && !config.view.styles;\n}\n\n// Helper function for to-model-attribute converter. Sets model attribute on given range. Checks {@link module:engine/model/schema~Schema}\n// to ensure proper model structure.\n//\n// @param {module:engine/model/range~Range} modelRange Model range on which attribute should be set.\n// @param {Object} modelAttribute Model attribute to set.\n// @param {Object} conversionApi Conversion API.\n// @param {Boolean} shallow If set to `true` the attribute will be set only on top-level nodes. Otherwise, it will be set\n// on all elements in the range.\n// @returns {Boolean} `true` if attribute was set on at least one node from given `modelRange`.\nfunction _setAttributeOn( modelRange, modelAttribute, shallow, conversionApi ) {\n\tlet result = false;\n\n\t// Set attribute on each item in range according to Schema.\n\tfor ( const node of Array.from( modelRange.getItems( { shallow } ) ) ) {\n\t\tif ( conversionApi.schema.checkAttribute( node, modelAttribute.key ) ) {\n\t\t\tconversionApi.writer.setAttribute( modelAttribute.key, modelAttribute.value, node );\n\n\t\t\tresult = true;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n// Helper function for upcasting-to-marker conversion. Takes the config in a format requested by `upcastElementToMarker()`\n// function and converts it to a format that is supported by `upcastElementToElement()` function.\n//\n// @param {Object} config Conversion configuration.\nfunction _normalizeToMarkerConfig( config ) {\n\tconst oldModel = config.model;\n\n\tconfig.model = ( viewElement, modelWriter ) => {\n\t\tconst markerName = typeof oldModel == 'string' ? oldModel : oldModel( viewElement );\n\n\t\treturn modelWriter.createElement( '$marker', { 'data-name': markerName } );\n\t};\n}\n\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * or all children of {@link module:engine/view/element~Element} into\n * {@link module:engine/model/documentfragment~DocumentFragment model document fragment}.\n * This is the \"entry-point\" converter for upcast (view to model conversion). This converter starts the conversion of all children\n * of passed view document fragment. Those children {@link module:engine/view/node~Node view nodes} are then handled by other converters.\n *\n * This also a \"default\", last resort converter for all view elements that has not been converted by other converters.\n * When a view element is being converted to the model but it does not have converter specified, that view element\n * will be converted to {@link module:engine/model/documentfragment~DocumentFragment model document fragment} and returned.\n *\n * @returns {Function} Universal converter for view {@link module:engine/view/documentfragment~DocumentFragment fragments} and\n * {@link module:engine/view/element~Element elements} that returns\n * {@link module:engine/model/documentfragment~DocumentFragment model fragment} with children of converted view item.\n */\nexport function convertToModelFragment() {\n\treturn ( evt, data, conversionApi ) => {\n\t\t// Second argument in `consumable.consume` is discarded for ViewDocumentFragment but is needed for ViewElement.\n\t\tif ( !data.modelRange && conversionApi.consumable.consume( data.viewItem, { name: true } ) ) {\n\t\t\tconst { modelRange, modelCursor } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\n\n\t\t\tdata.modelRange = modelRange;\n\t\t\tdata.modelCursor = modelCursor;\n\t\t}\n\t};\n}\n\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/text~Text} to {@link module:engine/model/text~Text}.\n *\n * @returns {Function} {@link module:engine/view/text~Text View text} converter.\n */\nexport function convertText() {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( conversionApi.schema.checkChild( data.modelCursor, '$text' ) ) {\n\t\t\tif ( conversionApi.consumable.consume( data.viewItem ) ) {\n\t\t\t\tconst text = conversionApi.writer.createText( data.viewItem.data );\n\n\t\t\t\tconversionApi.writer.insert( text, data.modelCursor );\n\n\t\t\t\tdata.modelRange = ModelRange._createFromPositionAndShift( data.modelCursor, text.offsetSize );\n\t\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t\t}\n\t\t}\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/controller/datacontroller\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nimport Mapper from '../conversion/mapper';\n\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { insertText } from '../conversion/downcast-converters';\n\nimport UpcastDispatcher from '../conversion/upcastdispatcher';\nimport { convertText, convertToModelFragment } from '../conversion/upcast-converters';\n\nimport ViewDocumentFragment from '../view/documentfragment';\nimport ViewDocument from '../view/document';\nimport ViewDowncastWriter from '../view/downcastwriter';\n\nimport ModelRange from '../model/range';\n\n/**\n * Controller for the data pipeline. The data pipeline controls how data is retrieved from the document\n * and set inside it. Hence, the controller features two methods which allow to {@link ~DataController#get get}\n * and {@link ~DataController#set set} data of the {@link ~DataController#model model}\n * using given:\n *\n * * {@link module:engine/dataprocessor/dataprocessor~DataProcessor data processor},\n * * downcast converters,\n * * upcast converters.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class DataController {\n\t/**\n\t * Creates a data controller instance.\n\t *\n\t * @param {module:engine/model/model~Model} model Data model.\n\t * @param {module:engine/dataprocessor/dataprocessor~DataProcessor} [dataProcessor] Data processor that should be used\n\t * by the controller.\n\t */\n\tconstructor( model, dataProcessor ) {\n\t\t/**\n\t\t * Data model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Data processor used during the conversion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/dataProcessor~DataProcessor}\n\t\t */\n\t\tthis.processor = dataProcessor;\n\n\t\t/**\n\t\t * Mapper used for the conversion. It has no permanent bindings, because they are created when getting data and\n\t\t * cleared directly after the data are converted. However, the mapper is defined as a class property, because\n\t\t * it needs to be passed to the `DowncastDispatcher` as a conversion API.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/mapper~Mapper}\n\t\t */\n\t\tthis.mapper = new Mapper();\n\n\t\t/**\n\t\t * Downcast dispatcher used by the {@link #get get method}. Downcast converters should be attached to it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n\t\t */\n\t\tthis.downcastDispatcher = new DowncastDispatcher( {\n\t\t\tmapper: this.mapper\n\t\t} );\n\t\tthis.downcastDispatcher.on( 'insert:$text', insertText(), { priority: 'lowest' } );\n\n\t\t/**\n\t\t * Upcast dispatcher used by the {@link #set set method}. Upcast converters should be attached to it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n\t\t */\n\t\tthis.upcastDispatcher = new UpcastDispatcher( {\n\t\t\tschema: model.schema\n\t\t} );\n\n\t\t// Define default converters for text and elements.\n\t\t//\n\t\t// Note that if there is no default converter for the element it will be skipped, for instance `<b>foo</b>` will be\n\t\t// converted to nothing. We add `convertToModelFragment` as a last converter so it converts children of that\n\t\t// element to the document fragment so `<b>foo</b>` will be converted to `foo` if there is no converter for `<b>`.\n\t\tthis.upcastDispatcher.on( 'text', convertText(), { priority: 'lowest' } );\n\t\tthis.upcastDispatcher.on( 'element', convertToModelFragment(), { priority: 'lowest' } );\n\t\tthis.upcastDispatcher.on( 'documentFragment', convertToModelFragment(), { priority: 'lowest' } );\n\n\t\tthis.decorate( 'init' );\n\t}\n\n\t/**\n\t * Returns the model's data converted by downcast dispatchers attached to {@link #downcastDispatcher} and\n\t * formatted by the {@link #processor data processor}.\n\t *\n\t * @param {String} [rootName='main'] Root name.\n\t * @returns {String} Output data.\n\t */\n\tget( rootName = 'main' ) {\n\t\t// Get model range.\n\t\treturn this.stringify( this.model.document.getRoot( rootName ) );\n\t}\n\n\t/**\n\t * Returns the content of the given {@link module:engine/model/element~Element model's element} or\n\t * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast converters\n\t * attached to {@link #downcastDispatcher} and formatted by the {@link #processor data processor}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} modelElementOrFragment\n\t * Element whose content will be stringified.\n\t * @returns {String} Output data.\n\t */\n\tstringify( modelElementOrFragment ) {\n\t\t// Model -> view.\n\t\tconst viewDocumentFragment = this.toView( modelElementOrFragment );\n\n\t\t// View -> data.\n\t\treturn this.processor.toData( viewDocumentFragment );\n\t}\n\n\t/**\n\t * Returns the content of the given {@link module:engine/model/element~Element model element} or\n\t * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast\n\t * converters attached to {@link #downcastDispatcher} to a\n\t * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} modelElementOrFragment\n\t * Element or document fragment whose content will be converted.\n\t * @returns {module:engine/view/documentfragment~DocumentFragment} Output view DocumentFragment.\n\t */\n\ttoView( modelElementOrFragment ) {\n\t\t// Clear bindings so the call to this method gives correct results.\n\t\tthis.mapper.clearBindings();\n\n\t\t// First, convert elements.\n\t\tconst modelRange = ModelRange._createIn( modelElementOrFragment );\n\n\t\tconst viewDocumentFragment = new ViewDocumentFragment();\n\n\t\t// Create separate ViewDowncastWriter just for data conversion purposes.\n\t\t// We have no view controller and rendering do DOM in DataController so view.change() block is not used here.\n\t\tconst viewWriter = new ViewDowncastWriter( new ViewDocument() );\n\t\tthis.mapper.bindElements( modelElementOrFragment, viewDocumentFragment );\n\n\t\tthis.downcastDispatcher.convertInsert( modelRange, viewWriter );\n\n\t\tif ( !modelElementOrFragment.is( 'documentFragment' ) ) {\n\t\t\t// Then, if a document element is converted, convert markers.\n\t\t\t// From all document markers, get those, which \"intersect\" with the converter element.\n\t\t\tconst markers = _getMarkersRelativeToElement( modelElementOrFragment );\n\n\t\t\tfor ( const [ name, range ] of markers ) {\n\t\t\t\tthis.downcastDispatcher.convertMarkerAdd( name, range, viewWriter );\n\t\t\t}\n\t\t}\n\n\t\treturn viewDocumentFragment;\n\t}\n\n\t/**\n\t * Sets initial input data parsed by the {@link #processor data processor} and\n\t * converted by the {@link #upcastDispatcher view-to-model converters}.\n\t * Initial data can be set only to document that {@link module:engine/model/document~Document#version} is equal 0.\n\t *\n\t * **Note** This method is {@link module:utils/observablemixin~ObservableMixin#decorate decorated} which is\n\t * used by e.g. collaborative editing plugin that syncs remote data on init.\n\t *\n\t * @fires init\n\t * @param {String} data Input data.\n\t * @param {String} [rootName='main'] Root name.\n\t * @returns {Promise} Promise that is resolved after the data is set on the editor.\n\t */\n\tinit( data, rootName = 'main' ) {\n\t\tif ( this.model.document.version ) {\n\t\t\t/**\n\t\t\t * Cannot set initial data to not empty {@link module:engine/model/document~Document}.\n\t\t\t * Initial data should be set once, during {@link module:core/editor/editor~Editor} initialization,\n\t\t\t * when the {@link module:engine/model/document~Document#version} is equal 0.\n\t\t\t *\n\t\t\t * @error datacontroller-init-document-not-empty\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'datacontroller-init-document-not-empty: Trying to set initial data to not empty document.' );\n\t\t}\n\n\t\tconst modelRoot = this.model.document.getRoot( rootName );\n\n\t\tthis.model.enqueueChange( 'transparent', writer => {\n\t\t\twriter.insert( this.parse( data, modelRoot ), modelRoot, 0 );\n\t\t} );\n\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Sets input data parsed by the {@link #processor data processor} and\n\t * converted by the {@link #upcastDispatcher view-to-model converters}.\n\t * This method can be used any time to replace existing editor data by the new one without clearing the\n\t * {@link module:engine/model/document~Document#history document history}.\n\t *\n\t * This method also creates a batch with all the changes applied. If all you need is to parse data, use\n\t * the {@link #parse} method.\n\t *\n\t * @param {String} data Input data.\n\t * @param {String} [rootName='main'] Root name.\n\t */\n\tset( data, rootName = 'main' ) {\n\t\t// Save to model.\n\t\tconst modelRoot = this.model.document.getRoot( rootName );\n\n\t\tthis.model.enqueueChange( 'transparent', writer => {\n\t\t\twriter.setSelection( null );\n\t\t\twriter.removeSelectionAttribute( this.model.document.selection.getAttributeKeys() );\n\n\t\t\twriter.remove( writer.createRangeIn( modelRoot ) );\n\t\t\twriter.insert( this.parse( data, modelRoot ), modelRoot, 0 );\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the data parsed by the {@link #processor data processor} and then converted by upcast converters\n\t * attached to the {@link #upcastDispatcher}.\n\t *\n\t * @see #set\n\t * @param {String} data Data to parse.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context='$root'] Base context in which the view will\n\t * be converted to the model. See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Parsed data.\n\t */\n\tparse( data, context = '$root' ) {\n\t\t// data -> view\n\t\tconst viewDocumentFragment = this.processor.toView( data );\n\n\t\t// view -> model\n\t\treturn this.toModel( viewDocumentFragment, context );\n\t}\n\n\t/**\n\t * Returns the result of the given {@link module:engine/view/element~Element view element} or\n\t * {@link module:engine/view/documentfragment~DocumentFragment view document fragment} converted by the\n\t * {@link #upcastDispatcher view-to-model converters}, wrapped by {@link module:engine/model/documentfragment~DocumentFragment}.\n\t *\n\t * When marker elements were converted during the conversion process, it will be set as a document fragment's\n\t * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n\t *\n\t * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElementOrFragment\n\t * Element or document fragment whose content will be converted.\n\t * @param {module:engine/model/schema~SchemaContextDefinition} [context='$root'] Base context in which the view will\n\t * be converted to the model. See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Output document fragment.\n\t */\n\ttoModel( viewElementOrFragment, context = '$root' ) {\n\t\treturn this.model.change( writer => {\n\t\t\treturn this.upcastDispatcher.convert( viewElementOrFragment, writer, context );\n\t\t} );\n\t}\n\n\t/**\n\t * Removes all event listeners set by the DataController.\n\t */\n\tdestroy() {}\n\n\t/**\n\t * Event fired by decorated {@link #init} method.\n\t * See {@link module:utils/observablemixin~ObservableMixin.decorate} for more information and samples.\n\t *\n\t * @event init\n\t */\n}\n\nmix( DataController, ObservableMixin );\n\n// Helper function for downcast conversion.\n//\n// Takes a document element (element that is added to a model document) and checks which markers are inside it\n// and which markers are containing it. If the marker is intersecting with element, the intersection is returned.\nfunction _getMarkersRelativeToElement( element ) {\n\tconst result = [];\n\tconst doc = element.root.document;\n\n\tif ( !doc ) {\n\t\treturn [];\n\t}\n\n\tconst elementRange = ModelRange._createIn( element );\n\n\tfor ( const marker of doc.model.markers ) {\n\t\tconst intersection = elementRange.getIntersection( marker.getRange() );\n\n\t\tif ( intersection ) {\n\t\t\tresult.push( [ marker.name, intersection ] );\n\t\t}\n\t}\n\n\treturn result;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/conversion/conversion\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nimport {\n\tdowncastElementToElement,\n\tdowncastAttributeToElement,\n\tdowncastAttributeToAttribute\n} from './downcast-converters';\n\nimport {\n\tupcastElementToElement,\n\tupcastElementToAttribute,\n\tupcastAttributeToAttribute\n} from './upcast-converters';\n\n/**\n * A utility class that helps add converters to upcast and downcast dispatchers.\n *\n * We recommend reading the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide first to\n * understand the core concepts of the conversion mechanisms.\n *\n * The instance of the conversion manager is available in the\n * {@link module:core/editor/editor~Editor#conversion `editor.conversion`} property\n * and by default has the following groups of dispatchers (i.e. directions of conversion):\n *\n * * `downcast` (editing and data downcasts)\n * * `editingDowncast`\n * * `dataDowncast`\n * * `upcast`\n *\n * To add a converter to a specific group, use the {@link module:engine/conversion/conversion~Conversion#for `for()`}\n * method:\n *\n *\t\t// Add a converter to editing downcast and data downcast.\n *\t\teditor.conversion.for( 'downcast' ).add( downcastElementToElement( config ) );\n *\n *\t\t// Add a converter to the data pipepline only:\n *\t\teditor.conversion.for( 'dataDowncast' ).add( downcastElementToElement( dataConversionConfig ) );\n *\t\t// And a slightly different one for the editing pipeline:\n *\t\teditor.conversion.for( 'editingDowncast' ).add( downcastElementToElement( editingConversionConfig ) );\n *\n * The functions used in `add()` calls are one-way converters (i.e. you need to remember yourself to add\n * a converter in the other direction, if your feature requires that). They are also called \"conversion helpers\".\n * You can find a set of them in the {@link module:engine/conversion/downcast-converters} and\n * {@link module:engine/conversion/upcast-converters} modules.\n *\n * Besides allowing to register converters to specific dispatchers, you can also use methods available in this\n * class to add two-way converters (upcast and downcast):\n *\n * * {@link module:engine/conversion/conversion~Conversion#elementToElement `elementToElement()`} &ndash;\n * Model element to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement()`} &ndash;\n * Model attribute to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `attributeToAttribute()`} &ndash;\n * Model attribute to view element and vice versa.\n */\nexport default class Conversion {\n\t/**\n\t * Creates a new conversion instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._dispatchersGroups = new Map();\n\t}\n\n\t/**\n\t * Registers one or more converters under a given group name. The group name can then be used to assign a converter\n\t * to multiple dispatchers at once.\n\t *\n\t * If a given group name is used for the second time, the\n\t * {@link module:utils/ckeditorerror~CKEditorError `conversion-register-group-exists` error} is thrown.\n\t *\n\t * @param {String} groupName The name for dispatchers group.\n\t * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} dispatchers Dispatchers to register\n\t * under the given name.\n\t */\n\tregister( groupName, dispatchers ) {\n\t\tif ( this._dispatchersGroups.has( groupName ) ) {\n\t\t\t/**\n\t\t\t * Trying to register a group name that was already registered.\n\t\t\t *\n\t\t\t * @error conversion-register-group-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'conversion-register-group-exists: Trying to register a group name that was already registered.' );\n\t\t}\n\n\t\tthis._dispatchersGroups.set( groupName, dispatchers );\n\t}\n\n\t/**\n\t * Provides chainable API to assign converters to dispatchers registered under a given group name. Converters are added\n\t * by calling the `.add()` method of an object returned by this function.\n\t *\n\t *\t\tconversion.for( 'downcast' )\n\t *\t\t\t.add( conversionHelperA )\n\t *\t\t\t.add( conversionHelperB );\n\t *\n\t * In this example `conversionHelperA` and `conversionHelperB` will be called for all dispatchers from the `'model'` group.\n\t *\n\t * The `.add()` method takes exactly one parameter, which is a function. This function should accept one parameter that\n\t * is a dispatcher instance. The function should add an actual converter to the passed dispatcher instance.\n\t *\n\t * Conversion helpers for most common cases are already provided. They are flexible enough to cover most use cases.\n\t * See the documentation to learn how they can be configured.\n\t *\n\t * For downcast (model-to-view conversion), these are:\n\t *\n\t * * {@link module:engine/conversion/downcast-converters~downcastElementToElement Downcast element-to-element converter},\n\t * * {@link module:engine/conversion/downcast-converters~downcastAttributeToElement Downcast attribute-to-element converter},\n\t * * {@link module:engine/conversion/downcast-converters~downcastAttributeToAttribute Downcast attribute-to-attribute converter}.\n\t *\n\t * For upcast (view-to-model conversion), these are:\n\t *\n\t * * {@link module:engine/conversion/upcast-converters~upcastElementToElement Upcast element-to-element converter},\n\t * * {@link module:engine/conversion/upcast-converters~upcastElementToAttribute Upcast attribute-to-element converter},\n\t * * {@link module:engine/conversion/upcast-converters~upcastAttributeToAttribute Upcast attribute-to-attribute converter}.\n\t *\n\t * An example of using conversion helpers to convert the `paragraph` model element to the `p` view element (and back):\n\t *\n\t *\t\t// Define conversion configuration - model element 'paragraph' should be converted to view element 'p'.\n\t *\t\tconst config = { model: 'paragraph', view: 'p' };\n\t *\n\t *\t\t// Add converters to proper dispatchers using conversion helpers.\n\t *\t\tconversion.for( 'downcast' ).add( downcastElementToElement( config ) );\n\t *\t\tconversion.for( 'upcast' ).add( upcastElementToElement( config ) );\n\t *\n\t * An example of providing a custom conversion helper that uses a custom converter function:\n\t *\n\t *\t\t// Adding a custom `myConverter` converter for 'paragraph' element insertion, with the default priority ('normal').\n\t *\t\tconversion.for( 'downcast' ).add( conversion.customConverter( 'insert:paragraph', myConverter ) );\n\t *\n\t * @param {String} groupName The name of dispatchers group to add the converters to.\n\t * @returns {Object} An object with the `.add()` method, providing a way to add converters.\n\t */\n\tfor( groupName ) {\n\t\tconst dispatchers = this._getDispatchers( groupName );\n\n\t\treturn {\n\t\t\tadd( conversionHelper ) {\n\t\t\t\t_addToDispatchers( dispatchers, conversionHelper );\n\n\t\t\t\treturn this;\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model element to a view element (and vice versa).\n\t * For example, the model `<paragraph>Foo</paragraph>` is `<p>Foo</p>` in the view.\n\t *\n\t *\t\t// A simple conversion from the `paragraph` model element to the `<p>` view element (and vice versa).\n\t *\t\tconversion.elementToElement( { model: 'paragraph', view: 'p' } );\n\t *\n\t *\t\t// Override other converters by specifying a converter definition with a higher priority.\n\t *\t\tconversion.elementToElement( { model: 'paragraph', view: 'div', converterPriority: 'high' } );\n\t *\n\t *\t\t// View specified as an object instead of a string.\n\t *\t\tconversion.elementToElement( {\n\t *\t\t\tmodel: 'fancyParagraph',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'p',\n\t *\t\t\t\tclasses: 'fancy'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to a `paragraph` element.\n\t *\t\tconversion.elementToElement( {\n\t *\t\t\tmodel: 'paragraph',\n\t *\t\t\tview: 'p',\n\t *\t\t\tupcastAlso: [\n\t *\t\t\t\t'div',\n\t *\t\t\t\t{\n\t *\t\t\t\t\t// Any element with the `display: block` style.\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\tdisplay: 'block'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n\t *\t\tconversion.elementToElement( {\n\t *\t\t\tmodel: 'heading',\n\t *\t\t\tview: 'h2',\n\t *\t\t\t// Convert \"headling-like\" paragraphs to headings.\n\t *\t\t\tupcastAlso: viewElement => {\n\t *\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\tif ( size > 26 ) {\n\t *\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t}\n\t *\n\t *\t\t\t\treturn null;\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * `definition.model` is a `String` with a model element name to convert from or to.\n\t * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n\t *\n\t * @param {module:engine/conversion/conversion~ConverterDefinition} definition The converter definition.\n\t */\n\telementToElement( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).add( downcastElementToElement( definition ) );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' ).add(\n\t\t\t\tupcastElementToElement( {\n\t\t\t\t\tmodel,\n\t\t\t\t\tview,\n\t\t\t\t\tconverterPriority: definition.converterPriority\n\t\t\t\t} )\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model attribute to a view element (and vice versa).\n\t * For example, a model text node with `\"Foo\"` as data and the `bold` attribute is `<strong>Foo</strong>` in the view.\n\t *\n\t *\t\t// A simple conversion from the `bold=true` attribute to the `<strong>` view element (and vice versa).\n\t *\t\tconversion.attributeToElement( { model: 'bold', view: 'strong' } );\n\t *\n\t *\t\t// Override other converters by specifying a converter definition with a higher priority.\n\t *\t\tconversion.attributeToElement( { model: 'bold', view: 'b', converterPriority: 'high' } );\n\t *\n\t *\t\t// View specified as an object instead of a string.\n\t *\t\tconversion.attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: {\n\t *\t\t\t\tname: 'span',\n\t *\t\t\t\tclasses: 'bold'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `config.model.name` to define the conversion only from a given node type, `$text` in this case.\n\t *\t\t// The same attribute on different elements may then be handled by a different converter.\n\t *\t\tconversion.attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'textDecoration',\n\t *\t\t\t\tvalues: [ 'underline', 'lineThrough' ],\n\t *\t\t\t\tname: '$text'\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tunderline: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-decoration': 'underline'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tlineThrough: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-decoration': 'line-through'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to the `bold` attribute.\n\t *\t\tconversion.attributeToElement( {\n\t *\t\t\tmodel: 'bold',\n\t *\t\t\tview: 'strong',\n\t *\t\t\tupcastAlso: [\n\t *\t\t\t\t'b',\n\t *\t\t\t\t{\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tclasses: 'bold'\n\t *\t\t\t\t},\n\t *\t\t\t\t{\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-weight': 'bold'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tviewElement => {\n\t *\t\t\t\t\tconst fontWeight = viewElement.getStyle( 'font-weight' );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && fontWeight && /\\d+/.test() && Number( fontWeight ) > 500 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn {\n\t *\t\t\t\t\t\t\tname: true,\n\t *\t\t\t\t\t\t\tstyles: [ 'font-weight' ]\n\t *\t\t\t\t\t\t};\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Conversion from and to a model attribute key whose value is an enum (`fontSize=big|small`).\n\t *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n\t *\t\tconversion.attributeToElement( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'fontSize',\n\t *\t\t\t\tvalues: [ 'big', 'small' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tbig: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '1.2em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: {\n\t *\t\t\t\t\tname: 'span',\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'font-size': '0.8em'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tupcastAlso: {\n\t *\t\t\t\tbig: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && size > 10 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t},\n\t *\t\t\t\tsmall: viewElement => {\n\t *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n\t *\n\t *\t\t\t\t\tif ( !fontSize ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n\t *\n\t *\t\t\t\t\tif ( !match ) {\n\t *\t\t\t\t\t\treturn null;\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\tconst size = Number( match[ 1 ] );\n\t *\n\t *\t\t\t\t\tif ( viewElement.is( 'span' ) && size < 10 ) {\n\t *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n\t *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n\t *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n\t *\n\t *\t\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n\t *\t\t\t\t\t}\n\t *\n\t *\t\t\t\t\treturn null;\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * The `definition.model` parameter specifies which model attribute should be converted from or to. It can be a `{ key, value }` object\n\t * describing the attribute key and value to convert or a `String` specifying just the attribute key (then `value` is set to `true`).\n\t * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n\t *\n\t * @param {module:engine/conversion/conversion~ConverterDefinition} definition The converter definition.\n\t */\n\tattributeToElement( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).add( downcastAttributeToElement( definition ) );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' ).add(\n\t\t\t\tupcastElementToAttribute( {\n\t\t\t\t\tview,\n\t\t\t\t\tmodel,\n\t\t\t\t\tpriority: definition.priority\n\t\t\t\t} )\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Sets up converters between the model and the view that convert a model attribute to a view attribute (and vice versa).\n\t * For example, `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>` (the same attribute key and value).\n\t * This type of converters is intended to be used with {@link module:engine/model/element~Element model element} nodes.\n\t * To convert text attributes {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement converter`}\n\t * should be set up.\n\t *\n\t *\t\t// A simple conversion from the `source` model attribute to the `src` view attribute (and vice versa).\n\t *\t\tconversion.attributeToAttribute( { model: 'source', view: 'src' } );\n\t *\n\t *\t\t// Attribute values are strictly specified.\n\t *\t\tconversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'image',\n\t *\t\t\t\tkey: 'aside',\n\t *\t\t\t\tvalues: [ 'aside' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\taside: {\n\t *\t\t\t\t\tname: 'img',\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: [ 'aside', 'half-size' ]\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Set the style attribute.\n\t *\t\tconversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tname: 'image',\n\t *\t\t\t\tkey: 'aside',\n\t *\t\t\t\tvalues: [ 'aside' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\taside: {\n\t *\t\t\t\t\tname: 'img',\n\t *\t\t\t\t\tkey: 'style',\n\t *\t\t\t\t\tvalue: {\n\t *\t\t\t\t\t\tfloat: 'right',\n\t *\t\t\t\t\t\twidth: '50%',\n\t *\t\t\t\t\t\tmargin: '5px'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Conversion from and to a model attribute key whose value is an enum (`align=right|center`).\n\t *\t\t// Use `upcastAlso` to define other view elements that should also be converted to the `align=right` attribute.\n\t *\t\tconversion.attributeToAttribute( {\n\t *\t\t\tmodel: {\n\t *\t\t\t\tkey: 'align',\n\t *\t\t\t\tvalues: [ 'right', 'center' ]\n\t *\t\t\t},\n\t *\t\t\tview: {\n\t *\t\t\t\tright: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: 'align-right'\n\t *\t\t\t\t},\n\t *\t\t\t\tcenter: {\n\t *\t\t\t\t\tkey: 'class',\n\t *\t\t\t\t\tvalue: 'align-center'\n\t *\t\t\t\t}\n\t *\t\t\t},\n\t *\t\t\tupcastAlso: {\n\t *\t\t\t\tright: {\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-align': 'right'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t},\n\t *\t\t\t\tcenter: {\n\t *\t\t\t\t\tstyles: {\n\t *\t\t\t\t\t\t'text-align': 'center'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * The `definition.model` parameter specifies which model attribute should be converted from and to.\n\t * It can be a `{ key, [ values ], [ name ] }` object or a `String`, which will be treated like `{ key: definition.model }`.\n\t * The `key` property is the model attribute key to convert from and to.\n\t * The `values` are the possible model attribute values. If `values` is not set, the model attribute value will be the same as the\n\t * view attribute value.\n\t * If `name` is set, the conversion will be set up only for model elements with the given name.\n\t *\n\t * The `definition.view` parameter specifies which view attribute should be converted from and to.\n\t * It can be a `{ key, value, [ name ] }` object or a `String`, which will be treated like `{ key: definition.view }`.\n\t * The `key` property is the view attribute key to convert from and to.\n\t * The `value` is the view attribute value to convert from and to. If `definition.value` is not set, the view attribute value will be\n\t * the same as the model attribute value.\n\t * If `key` is `'class'`, `value` can be a `String` or an array of `String`s.\n\t * If `key` is `'style'`, `value` is an object with key-value pairs.\n\t * In other cases, `value` is a `String`.\n\t * If `name` is set, the conversion will be set up only for model elements with the given name.\n\t * If `definition.model.values` is set, `definition.view` is an object that assigns values from `definition.model.values`\n\t * to `{ key, value, [ name ] }` objects.\n\t *\n\t * `definition.upcastAlso` specifies which other matching view elements should also be upcast to the given model configuration.\n\t * If `definition.model.values` is set, `definition.upcastAlso` should be an object assigning values from `definition.model.values`\n\t * to {@link module:engine/view/matcher~MatcherPattern}s or arrays of {@link module:engine/view/matcher~MatcherPattern}s.\n\t *\n\t * **Note:** `definition.model` and `definition.view` form should be mirrored, so the same types of parameters should\n\t * be given in both parameters.\n\t *\n\t * @param {Object} definition The converter definition.\n\t * @param {String|Object} definition.model The model attribute to convert from and to.\n\t * @param {String|Object} definition.view The view attribute to convert from and to.\n\t * @param {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [definition.upcastAlso]\n\t * Any view element matching `definition.upcastAlso` will also be converted to the given model attribute. `definition.upcastAlso`\n\t * is used only if `config.model.values` is specified.\n\t */\n\tattributeToAttribute( definition ) {\n\t\t// Set up downcast converter.\n\t\tthis.for( 'downcast' ).add( downcastAttributeToAttribute( definition ) );\n\n\t\t// Set up upcast converter.\n\t\tfor ( const { model, view } of _getAllUpcastDefinitions( definition ) ) {\n\t\t\tthis.for( 'upcast' ).add(\n\t\t\t\tupcastAttributeToAttribute( {\n\t\t\t\t\tview,\n\t\t\t\t\tmodel\n\t\t\t\t} )\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Returns dispatchers registered under a given group name.\n\t *\n\t * If the given group name has not been registered, the\n\t * {@link module:utils/ckeditorerror~CKEditorError `conversion-for-unknown-group` error} is thrown.\n\t *\n\t * @private\n\t * @param {String} groupName\n\t * @returns {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n\t * module:engine/conversion/upcastdispatcher~UpcastDispatcher>}\n\t */\n\t_getDispatchers( groupName ) {\n\t\tconst dispatchers = this._dispatchersGroups.get( groupName );\n\n\t\tif ( !dispatchers ) {\n\t\t\t/**\n\t\t\t * Trying to add a converter to an unknown dispatchers group.\n\t\t\t *\n\t\t\t * @error conversion-for-unknown-group\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'conversion-for-unknown-group: Trying to add a converter to an unknown dispatchers group.' );\n\t\t}\n\n\t\treturn dispatchers;\n\t}\n}\n\n/**\n * Defines how the model should be converted from and to the view.\n *\n * @typedef {Object} module:engine/conversion/conversion~ConverterDefinition\n *\n * @property {*} [model] The model conversion definition. Describes the model element or model attribute to convert. This parameter differs\n * for different functions that accept `ConverterDefinition`. See the description of the function to learn how to set it.\n * @property {module:engine/view/elementdefinition~ElementDefinition|Object} view The definition of the view element to convert from and\n * to. If `model` describes multiple values, `view` is an object that assigns these values (`view` object keys) to view element definitions\n * (`view` object values).\n * @property {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [upcastAlso]\n * Any view element matching `upcastAlso` will also be converted to the model. If `model` describes multiple values, `upcastAlso`\n * is an object that assigns these values (`upcastAlso` object keys) to {@link module:engine/view/matcher~MatcherPattern}s\n * (`upcastAlso` object values).\n * @property {module:utils/priorities~PriorityString} [converterPriority] The converter priority.\n */\n\n// Helper function for the `Conversion` `.add()` method.\n//\n// Calls `conversionHelper` on each dispatcher from the group specified earlier in the `.for()` call, effectively\n// adding converters to all specified dispatchers.\n//\n// @private\n// @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n// module:engine/conversion/upcastdispatcher~UpcastDispatcher>} dispatchers\n// @param {Function} conversionHelper\nfunction _addToDispatchers( dispatchers, conversionHelper ) {\n\tfor ( const dispatcher of dispatchers ) {\n\t\tconversionHelper( dispatcher );\n\t}\n}\n\n// Helper function that creates a joint array out of an item passed in `definition.view` and items passed in\n// `definition.upcastAlso`.\n//\n// @param {module:engine/conversion/conversion~ConverterDefinition} definition\n// @returns {Array} Array containing view definitions.\nfunction* _getAllUpcastDefinitions( definition ) {\n\tif ( definition.model.values ) {\n\t\tfor ( const value of definition.model.values ) {\n\t\t\tconst model = { key: definition.model.key, value };\n\t\t\tconst view = definition.view[ value ];\n\t\t\tconst upcastAlso = definition.upcastAlso ? definition.upcastAlso[ value ] : undefined;\n\n\t\t\tyield* _getUpcastDefinition( model, view, upcastAlso );\n\t\t}\n\t} else {\n\t\tyield* _getUpcastDefinition( definition.model, definition.view, definition.upcastAlso );\n\t}\n}\n\nfunction* _getUpcastDefinition( model, view, upcastAlso ) {\n\tyield { model, view };\n\n\tif ( upcastAlso ) {\n\t\tupcastAlso = Array.isArray( upcastAlso ) ? upcastAlso : [ upcastAlso ];\n\n\t\tfor ( const upcastAlsoItem of upcastAlso ) {\n\t\t\tyield { model, view: upcastAlsoItem };\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/batch\n */\n\n/**\n * A batch instance groups model changes ({@link module:engine/model/operation/operation~Operation operations}). All operations\n * grouped in a single batch can be reverted together, so you can also think about a batch as of a single undo step. If you want\n * to extend a given undo step, you can add more changes to the batch using {@link module:engine/model/model~Model#enqueueChange}:\n *\n *\t\tmodel.enqueueChange( batch, writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * @see module:engine/model/model~Model#enqueueChange\n * @see module:engine/model/model~Model#change\n */\nexport default class Batch {\n\t/**\n\t * Creates a batch instance.\n\t *\n\t * @see module:engine/model/model~Model#enqueueChange\n\t * @see module:engine/model/model~Model#change\n\t * @param {'transparent'|'default'} [type='default'] The type of the batch.\n\t */\n\tconstructor( type = 'default' ) {\n\t\t/**\n\t\t * An array of operations that compose this batch.\n\t\t *\n\t\t * @readonly\n\t\t * @type {Array.<module:engine/model/operation/operation~Operation>}\n\t\t */\n\t\tthis.operations = [];\n\n\t\t/**\n\t\t * The type of the batch.\n\t\t *\n\t\t * It can be one of the following values:\n\t\t * * `'default'` &ndash; All \"normal\" batches. This is the most commonly used type.\n\t\t * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing\n\t\t * changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {'transparent'|'default'}\n\t\t */\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * Returns the base version of this batch, which is equal to the base version of the first operation in the batch.\n\t * If there are no operations in the batch or neither operation has the base version set, it returns `null`.\n\t *\n\t * @readonly\n\t * @type {Number|null}\n\t */\n\tget baseVersion() {\n\t\tfor ( const op of this.operations ) {\n\t\t\tif ( op.baseVersion !== null ) {\n\t\t\t\treturn op.baseVersion;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Adds an operation to the batch instance.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation An operation to add.\n\t * @returns {module:engine/model/operation/operation~Operation} The added operation.\n\t */\n\taddOperation( operation ) {\n\t\toperation.batch = this;\n\t\tthis.operations.push( operation );\n\n\t\treturn operation;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/operation\n */\n\n/**\n * Abstract base operation class.\n *\n * @abstract\n */\nexport default class Operation {\n\t/**\n\t * Base operation constructor.\n\t *\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( baseVersion ) {\n\t\t/**\n\t\t * {@link module:engine/model/document~Document#version} on which operation can be applied. If you try to\n\t\t * {@link module:engine/model/model~Model#applyOperation apply} operation with different base version than the\n\t\t * {@link module:engine/model/document~Document#version document version} the\n\t\t * {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\n\t\t *\n\t\t * @member {Number}\n\t\t */\n\t\tthis.baseVersion = baseVersion;\n\n\t\t/**\n\t\t * Defines whether operation is executed on attached or detached {@link module:engine/model/item~Item items}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isDocumentOperation\n\t\t */\n\t\tthis.isDocumentOperation = this.baseVersion !== null;\n\n\t\t/**\n\t\t * {@link module:engine/model/batch~Batch Batch} to which the operation is added or `null` if the operation is not\n\t\t * added to any batch yet.\n\t\t *\n\t\t * @member {module:engine/model/batch~Batch|null} #batch\n\t\t */\n\t\tthis.batch = null;\n\n\t\t/**\n\t\t * Operation type.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} #type\n\t\t */\n\n\t\t/**\n\t\t * Creates and returns an operation that has the same parameters as this operation.\n\t\t *\n\t\t * @method #clone\n\t\t * @returns {module:engine/model/operation/operation~Operation} Clone of this operation.\n\t\t */\n\n\t\t/**\n\t\t * Creates and returns a reverse operation. Reverse operation when executed right after\n\t\t * the original operation will bring back tree model state to the point before the original\n\t\t * operation execution. In other words, it reverses changes done by the original operation.\n\t\t *\n\t\t * Keep in mind that tree model state may change since executing the original operation,\n\t\t * so reverse operation will be \"outdated\". In that case you will need to transform it by\n\t\t * all operations that were executed after the original operation.\n\t\t *\n\t\t * @method #getReversed\n\t\t * @returns {module:engine/model/operation/operation~Operation} Reversed operation.\n\t\t */\n\n\t\t/**\n\t\t * Executes the operation - modifications described by the operation properties will be applied to the model tree.\n\t\t *\n\t\t * @protected\n\t\t * @method #_execute\n\t\t */\n\t}\n\n\t/**\n\t * Checks whether the operation's parameters are correct and the operation can be correctly executed. Throws\n\t * an error if operation is not valid.\n\t *\n\t * @protected\n\t * @method #_validate\n\t */\n\t_validate() {\n\t}\n\n\t/**\n\t * Custom toJSON method to solve child-parent circular dependencies.\n\t *\n\t * @method #toJSON\n\t * @returns {Object} Clone of this object with the operation property replaced with string.\n\t */\n\ttoJSON() {\n\t\t// This method creates only a shallow copy, all nested objects should be defined separately.\n\t\t// See https://github.com/ckeditor/ckeditor5-engine/issues/1477.\n\t\tconst json = Object.assign( {}, this );\n\n\t\tjson.__className = this.constructor.className;\n\n\t\t// Remove reference to the parent `Batch` to avoid circular dependencies.\n\t\tdelete json.batch;\n\n\t\t// Only document operations are shared with other clients so it is not necessary to keep this information.\n\t\tdelete json.isDocumentOperation;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Name of the operation class used for serialization.\n\t *\n\t * @type {String}\n\t */\n\tstatic get className() {\n\t\treturn 'Operation';\n\t}\n\n\t/**\n\t * Creates Operation object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} doc Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/operation~Operation}\n\t */\n\tstatic fromJSON( json ) {\n\t\treturn new this( json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module module:engine/model/documentfragment\n */\n\nimport NodeList from './nodelist';\nimport Element from './element';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\n/**\n * DocumentFragment represents a part of model which does not have a common root but it's top-level nodes\n * can be seen as siblings. In other words, it is a detached part of model tree, without a root.\n *\n * DocumentFragment has own {@link module:engine/model/markercollection~MarkerCollection}. Markers from this collection\n * will be set to the {@link module:engine/model/model~Model#markers model markers} by a\n * {@link module:engine/model/writer~Writer#insert} function.\n */\nexport default class DocumentFragment {\n\t/**\n\t * Creates an empty `DocumentFragment`.\n\t *\n\t * **Note:** Constructor of this class shouldn't be used directly in the code.\n\t * Use the {@link module:engine/model/writer~Writer#createDocumentFragment} method instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\n\t * Nodes to be contained inside the `DocumentFragment`.\n\t */\n\tconstructor( children ) {\n\t\t/**\n\t\t * DocumentFragment static markers map. This is a list of names and {@link module:engine/model/range~Range ranges}\n\t\t * which will be set as Markers to {@link module:engine/model/model~Model#markers model markers collection}\n\t\t * when DocumentFragment will be inserted to the document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Map<String,module:engine/model/range~Range>} module:engine/model/documentfragment~DocumentFragment#markers\n\t\t */\n\t\tthis.markers = new Map();\n\n\t\t/**\n\t\t * List of nodes contained inside the document fragment.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/documentfragment~DocumentFragment#_children\n\t\t */\n\t\tthis._children = new NodeList();\n\n\t\tif ( children ) {\n\t\t\tthis._insertChild( 0, children );\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all nodes contained inside this document fragment.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this.getChildren();\n\t}\n\n\t/**\n\t * Number of this document fragment's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget childCount() {\n\t\treturn this._children.length;\n\t}\n\n\t/**\n\t * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this document fragment's children.\n\t *\n\t * @readonly\n\t * @type {Number}\n\t */\n\tget maxOffset() {\n\t\treturn this._children.maxOffset;\n\t}\n\n\t/**\n\t * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this.childCount === 0;\n\t}\n\n\t/**\n\t * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tget root() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n\t *\n\t * @readonly\n\t * @type {null}\n\t */\n\tget parent() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Checks whether given model tree object is of given type.\n\t *\n\t * Read more in {@link module:engine/model/node~Node#is}.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'documentFragment';\n\t}\n\n\t/**\n\t * Gets the child at the given index. Returns `null` if incorrect index was passed.\n\t *\n\t * @param {Number} index Index of child.\n\t * @returns {module:engine/model/node~Node|null} Child node.\n\t */\n\tgetChild( index ) {\n\t\treturn this._children.getNode( index );\n\t}\n\n\t/**\n\t * Returns an iterator that iterates over all of this document fragment's children.\n\t *\n\t * @returns {Iterable.<module:engine/model/node~Node>}\n\t */\n\tgetChildren() {\n\t\treturn this._children[ Symbol.iterator ]();\n\t}\n\n\t/**\n\t * Returns an index of the given child node. Returns `null` if given node is not a child of this document fragment.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's index.\n\t */\n\tgetChildIndex( node ) {\n\t\treturn this._children.getNodeIndex( node );\n\t}\n\n\t/**\n\t * Returns the starting offset of given child. Starting offset is equal to the sum of\n\t * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n\t * given node is not a child of this document fragment.\n\t *\n\t * @param {module:engine/model/node~Node} node Child node to look for.\n\t * @returns {Number|null} Child node's starting offset.\n\t */\n\tgetChildStartOffset( node ) {\n\t\treturn this._children.getNodeStartOffset( node );\n\t}\n\n\t/**\n\t * Returns path to a `DocumentFragment`, which is an empty array. Added for compatibility reasons.\n\t *\n\t * @returns {Array}\n\t */\n\tgetPath() {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns a descendant node by its path relative to this element.\n\t *\n\t *\t\t// <this>a<b>c</b></this>\n\t *\t\tthis.getNodeByPath( [ 0 ] );     // -> \"a\"\n\t *\t\tthis.getNodeByPath( [ 1 ] );     // -> <b>\n\t *\t\tthis.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n\t *\n\t * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\n\t * @returns {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tgetNodeByPath( relativePath ) {\n\t\tlet node = this; // eslint-disable-line consistent-this\n\n\t\tfor ( const index of relativePath ) {\n\t\t\tnode = node.getChild( node.offsetToIndex( index ) );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Converts offset \"position\" to index \"position\".\n\t *\n\t * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n\t * too high, returns index after last child}.\n\t *\n\t *\t\tconst textNode = new Text( 'foo' );\n\t *\t\tconst pElement = new Element( 'p' );\n\t *\t\tconst docFrag = new DocumentFragment( [ textNode, pElement ] );\n\t *\t\tdocFrag.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n\t *\t\tdocFrag.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n\t *\t\tdocFrag.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n\t *\t\tdocFrag.offsetToIndex( 2 ); // Returns 0.\n\t *\t\tdocFrag.offsetToIndex( 3 ); // Returns 1.\n\t *\t\tdocFrag.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n\t *\n\t * @param {Number} offset Offset to look for.\n\t * @returns {Number} Index of a node that occupies given offset.\n\t */\n\toffsetToIndex( offset ) {\n\t\treturn this._children.offsetToIndex( offset );\n\t}\n\n\t/**\n\t * Converts `DocumentFragment` instance to plain object and returns it.\n\t * Takes care of converting all of this document fragment's children.\n\t *\n\t * @returns {Object} `DocumentFragment` instance converted to plain object.\n\t */\n\ttoJSON() {\n\t\tconst json = [];\n\n\t\tfor ( const node of this._children ) {\n\t\t\tjson.push( node.toJSON() );\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Creates a `DocumentFragment` instance from given plain object (i.e. parsed JSON string).\n\t * Converts `DocumentFragment` children to proper nodes.\n\t *\n\t * @param {Object} json Plain object to be converted to `DocumentFragment`.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} `DocumentFragment` instance created using given plain object.\n\t */\n\tstatic fromJSON( json ) {\n\t\tconst children = [];\n\n\t\tfor ( const child of json ) {\n\t\t\tif ( child.name ) {\n\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t} else {\n\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t}\n\t\t}\n\n\t\treturn new DocumentFragment( children );\n\t}\n\n\t/**\n\t * {@link #_insertChild Inserts} one or more nodes at the end of this document fragment.\n\t *\n\t * @protected\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\t_appendChild( items ) {\n\t\tthis._insertChild( this.childCount, items );\n\t}\n\n\t/**\n\t * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n\t * to this document fragment.\n\t *\n\t * @protected\n\t * @param {Number} index Index at which nodes should be inserted.\n\t * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n\t */\n\t_insertChild( index, items ) {\n\t\tconst nodes = normalize( items );\n\n\t\tfor ( const node of nodes ) {\n\t\t\t// If node that is being added to this element is already inside another element, first remove it from the old parent.\n\t\t\tif ( node.parent !== null ) {\n\t\t\t\tnode._remove();\n\t\t\t}\n\n\t\t\tnode.parent = this;\n\t\t}\n\n\t\tthis._children._insertNodes( index, nodes );\n\t}\n\n\t/**\n\t * Removes one or more nodes starting at the given index\n\t * and sets {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n\t *\n\t * @protected\n\t * @param {Number} index Index of the first node to remove.\n\t * @param {Number} [howMany=1] Number of nodes to remove.\n\t * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n\t */\n\t_removeChildren( index, howMany = 1 ) {\n\t\tconst nodes = this._children._removeNodes( index, howMany );\n\n\t\tfor ( const node of nodes ) {\n\t\t\tnode.parent = null;\n\t\t}\n\n\t\treturn nodes;\n\t}\n}\n\n// Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>}\n// @returns {Iterable.<module:engine/model/node~Node>}\nfunction normalize( nodes ) {\n\t// Separate condition because string is iterable.\n\tif ( typeof nodes == 'string' ) {\n\t\treturn [ new Text( nodes ) ];\n\t}\n\n\tif ( !isIterable( nodes ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Array.from to enable .map() on non-arrays.\n\treturn Array.from( nodes )\n\t\t.map( node => {\n\t\t\tif ( typeof node == 'string' ) {\n\t\t\t\treturn new Text( node );\n\t\t\t}\n\n\t\t\tif ( node instanceof TextProxy ) {\n\t\t\t\treturn new Text( node.data, node.getAttributes() );\n\t\t\t}\n\n\t\t\treturn node;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/utils\n */\n\nimport Node from '../node';\nimport Text from '../text';\nimport TextProxy from '../textproxy';\nimport Range from '../range';\nimport DocumentFragment from '../documentfragment';\nimport NodeList from '../nodelist';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Contains functions used for composing model tree by {@link module:engine/model/operation/operation~Operation operations}.\n * Those functions are built on top of {@link module:engine/model/node~Node node}, and it's child classes', APIs.\n *\n * @protected\n * @namespace utils\n */\n\n/**\n * Inserts given nodes at given position.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.insert\n * @param {module:engine/model/position~Position} position Position at which nodes should be inserted.\n * @param {module:engine/model/node~NodeSet} nodes Nodes to insert.\n * @returns {module:engine/model/range~Range} Range spanning over inserted elements.\n */\nexport function _insert( position, nodes ) {\n\tnodes = _normalizeNodes( nodes );\n\n\t// We have to count offset before inserting nodes because they can get merged and we would get wrong offsets.\n\tconst offset = nodes.reduce( ( sum, node ) => sum + node.offsetSize, 0 );\n\tconst parent = position.parent;\n\n\t// Insertion might be in a text node, we should split it if that's the case.\n\t_splitNodeAtPosition( position );\n\tconst index = position.index;\n\n\t// Insert nodes at given index. After splitting we have a proper index and insertion is between nodes,\n\t// using basic `Element` API.\n\tparent._insertChild( index, nodes );\n\n\t// Merge text nodes, if possible. Merging is needed only at points where inserted nodes \"touch\" \"old\" nodes.\n\t_mergeNodesAtIndex( parent, index + nodes.length );\n\t_mergeNodesAtIndex( parent, index );\n\n\treturn new Range( position, position.getShiftedBy( offset ) );\n}\n\n/**\n * Removed nodes in given range. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils._remove\n * @param {module:engine/model/range~Range} range Range containing nodes to remove.\n * @returns {Array.<module:engine/model/node~Node>}\n */\nexport function _remove( range ) {\n\tif ( !range.isFlat ) {\n\t\t/**\n\t\t * Trying to remove a range which starts and ends in different element.\n\t\t *\n\t\t * @error operation-utils-remove-range-not-flat\n\t\t */\n\t\tthrow new CKEditorError( 'operation-utils-remove-range-not-flat: ' +\n\t\t\t'Trying to remove a range which starts and ends in different element.' );\n\t}\n\n\tconst parent = range.start.parent;\n\n\t// Range may be inside text nodes, we have to split them if that's the case.\n\t_splitNodeAtPosition( range.start );\n\t_splitNodeAtPosition( range.end );\n\n\t// Remove the text nodes using basic `Element` API.\n\tconst removed = parent._removeChildren( range.start.index, range.end.index - range.start.index );\n\n\t// Merge text nodes, if possible. After some nodes were removed, node before and after removed range will be\n\t// touching at the position equal to the removed range beginning. We check merging possibility there.\n\t_mergeNodesAtIndex( parent, range.start.index );\n\n\treturn removed;\n}\n\n/**\n * Moves nodes in given range to given target position. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.move\n * @param {module:engine/model/range~Range} sourceRange Range containing nodes to move.\n * @param {module:engine/model/position~Position} targetPosition Position to which nodes should be moved.\n * @returns {module:engine/model/range~Range} Range containing moved nodes.\n */\nexport function _move( sourceRange, targetPosition ) {\n\tif ( !sourceRange.isFlat ) {\n\t\t/**\n\t\t * Trying to move a range which starts and ends in different element.\n\t\t *\n\t\t * @error operation-utils-move-range-not-flat\n\t\t */\n\t\tthrow new CKEditorError( 'operation-utils-move-range-not-flat: ' +\n\t\t\t'Trying to move a range which starts and ends in different element.' );\n\t}\n\n\tconst nodes = _remove( sourceRange );\n\n\t// We have to fix `targetPosition` because model changed after nodes from `sourceRange` got removed and\n\t// that change might have an impact on `targetPosition`.\n\ttargetPosition = targetPosition._getTransformedByDeletion( sourceRange.start, sourceRange.end.offset - sourceRange.start.offset );\n\n\treturn _insert( targetPosition, nodes );\n}\n\n/**\n * Sets given attribute on nodes in given range. The attributes are only set on top-level nodes of the range, not on its children.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils._setAttribute\n * @param {module:engine/model/range~Range} range Range containing nodes that should have the attribute set. Must be a flat range.\n * @param {String} key Key of attribute to set.\n * @param {*} value Attribute value.\n */\nexport function _setAttribute( range, key, value ) {\n\t// Range might start or end in text nodes, so we have to split them.\n\t_splitNodeAtPosition( range.start );\n\t_splitNodeAtPosition( range.end );\n\n\t// Iterate over all items in the range.\n\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t// Iterator will return `TextProxy` instances but we know that those text proxies will\n\t\t// always represent full text nodes (this is guaranteed thanks to splitting we did before).\n\t\t// So, we can operate on those text proxies' text nodes.\n\t\tconst node = item.is( 'textProxy' ) ? item.textNode : item;\n\n\t\tif ( value !== null ) {\n\t\t\tnode._setAttribute( key, value );\n\t\t} else {\n\t\t\tnode._removeAttribute( key );\n\t\t}\n\n\t\t// After attributes changing it may happen that some text nodes can be merged. Try to merge with previous node.\n\t\t_mergeNodesAtIndex( node.parent, node.index );\n\t}\n\n\t// Try to merge last changed node with it's previous sibling (not covered by the loop above).\n\t_mergeNodesAtIndex( range.end.parent, range.end.index );\n}\n\n/**\n * Normalizes given object or an array of objects to an array of {@link module:engine/model/node~Node nodes}. See\n * {@link module:engine/model/node~NodeSet NodeSet} for details on how normalization is performed.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.normalizeNodes\n * @param {module:engine/model/node~NodeSet} nodes Objects to normalize.\n * @returns {Array.<module:engine/model/node~Node>} Normalized nodes.\n */\nexport function _normalizeNodes( nodes ) {\n\tconst normalized = [];\n\n\tif ( !( nodes instanceof Array ) ) {\n\t\tnodes = [ nodes ];\n\t}\n\n\t// Convert instances of classes other than Node.\n\tfor ( let i = 0; i < nodes.length; i++ ) {\n\t\tif ( typeof nodes[ i ] == 'string' ) {\n\t\t\tnormalized.push( new Text( nodes[ i ] ) );\n\t\t} else if ( nodes[ i ] instanceof TextProxy ) {\n\t\t\tnormalized.push( new Text( nodes[ i ].data, nodes[ i ].getAttributes() ) );\n\t\t} else if ( nodes[ i ] instanceof DocumentFragment || nodes[ i ] instanceof NodeList ) {\n\t\t\tfor ( const child of nodes[ i ] ) {\n\t\t\t\tnormalized.push( child );\n\t\t\t}\n\t\t} else if ( nodes[ i ] instanceof Node ) {\n\t\t\tnormalized.push( nodes[ i ] );\n\t\t}\n\t\t// Skip unrecognized type.\n\t}\n\n\t// Merge text nodes.\n\tfor ( let i = 1; i < normalized.length; i++ ) {\n\t\tconst node = normalized[ i ];\n\t\tconst prev = normalized[ i - 1 ];\n\n\t\tif ( node instanceof Text && prev instanceof Text && _haveSameAttributes( node, prev ) ) {\n\t\t\t// Doing this instead changing `prev.data` because `data` is readonly.\n\t\t\tnormalized.splice( i - 1, 2, new Text( prev.data + node.data, prev.getAttributes() ) );\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn normalized;\n}\n\n// Checks if nodes before and after given index in given element are {@link module:engine/model/text~Text text nodes} and\n// merges them into one node if they have same attributes.\n//\n// Merging is done by removing two text nodes and inserting a new text node containing data from both merged text nodes.\n//\n// @private\n// @param {module:engine/model/element~Element} element Parent element of nodes to merge.\n// @param {Number} index Index between nodes to merge.\nfunction _mergeNodesAtIndex( element, index ) {\n\tconst nodeBefore = element.getChild( index - 1 );\n\tconst nodeAfter = element.getChild( index );\n\n\t// Check if both of those nodes are text objects with same attributes.\n\tif ( nodeBefore && nodeAfter && nodeBefore.is( 'text' ) && nodeAfter.is( 'text' ) && _haveSameAttributes( nodeBefore, nodeAfter ) ) {\n\t\t// Append text of text node after index to the before one.\n\t\tconst mergedNode = new Text( nodeBefore.data + nodeAfter.data, nodeBefore.getAttributes() );\n\n\t\t// Remove separate text nodes.\n\t\telement._removeChildren( index - 1, 2 );\n\n\t\t// Insert merged text node.\n\t\telement._insertChild( index - 1, mergedNode );\n\t}\n}\n\n// Checks if given position is in a text node, and if so, splits the text node in two text nodes, each of them\n// containing a part of original text node.\n//\n// @private\n// @param {module:engine/model/position~Position} position Position at which node should be split.\nfunction _splitNodeAtPosition( position ) {\n\tconst textNode = position.textNode;\n\tconst element = position.parent;\n\n\tif ( textNode ) {\n\t\tconst offsetDiff = position.offset - textNode.startOffset;\n\t\tconst index = textNode.index;\n\n\t\telement._removeChildren( index, 1 );\n\n\t\tconst firstPart = new Text( textNode.data.substr( 0, offsetDiff ), textNode.getAttributes() );\n\t\tconst secondPart = new Text( textNode.data.substr( offsetDiff ), textNode.getAttributes() );\n\n\t\telement._insertChild( index, [ firstPart, secondPart ] );\n\t}\n}\n\n// Checks whether two given nodes have same attributes.\n//\n// @private\n// @param {module:engine/model/node~Node} nodeA Node to check.\n// @param {module:engine/model/node~Node} nodeB Node to check.\n// @returns {Boolean} `true` if nodes have same attributes, `false` otherwise.\nfunction _haveSameAttributes( nodeA, nodeB ) {\n\tconst iteratorA = nodeA.getAttributes();\n\tconst iteratorB = nodeB.getAttributes();\n\n\tfor ( const attr of iteratorA ) {\n\t\tif ( attr[ 1 ] !== nodeB.getAttribute( attr[ 0 ] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\titeratorB.next();\n\t}\n\n\treturn iteratorB.next().done;\n}\n\n/**\n * Value that can be normalized to an array of {@link module:engine/model/node~Node nodes}.\n *\n * Non-arrays are normalized as follows:\n * * {@link module:engine/model/node~Node Node} is left as is,\n * * {@link module:engine/model/textproxy~TextProxy TextProxy} and `String` are normalized to {@link module:engine/model/text~Text Text},\n * * {@link module:engine/model/nodelist~NodeList NodeList} is normalized to an array containing all nodes that are in that node list,\n * * {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment} is normalized to an array containing all of it's\n * * children.\n *\n * Arrays are processed item by item like non-array values and flattened to one array. Normalization always results in\n * a flat array of {@link module:engine/model/node~Node nodes}. Consecutive text nodes (or items normalized to text nodes) will be\n * merged if they have same attributes.\n *\n * @typedef {module:engine/model/node~Node|module:engine/model/textproxy~TextProxy|String|\n * module:engine/model/nodelist~NodeList|module:engine/model/documentfragment~DocumentFragment|Iterable}\n * module:engine/model/node~NodeSet\n */\n","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nexport default isEqual;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/attributeoperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { _setAttribute } from './utils';\nimport { isEqual } from 'lodash-es';\n\n/**\n * Operation to change nodes' attribute.\n *\n * Using this class you can add, remove or change value of the attribute.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class AttributeOperation extends Operation {\n\t/**\n\t * Creates an operation that changes, removes or adds attributes.\n\t *\n\t * If only `newValue` is set, attribute will be added on a node. Note that all nodes in operation's range must not\n\t * have an attribute with the same key as the added attribute.\n\t *\n\t * If only `oldValue` is set, then attribute with given key will be removed. Note that all nodes in operation's range\n\t * must have an attribute with that key added.\n\t *\n\t * If both `newValue` and `oldValue` are set, then the operation will change the attribute value. Note that all nodes in\n\t * operation's ranges must already have an attribute with given key and `oldValue` as value\n\t *\n\t * @param {module:engine/model/range~Range} range Range on which the operation should be applied. Must be a flat range.\n\t * @param {String} key Key of an attribute to change or remove.\n\t * @param {*} oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\n\t * @param {*} newValue New value of the attribute with given key or `null`, if operation should remove attribute.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( range, key, oldValue, newValue, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Range on which operation should be applied.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.range = range.clone();\n\n\t\t/**\n\t\t * Key of an attribute to change or remove.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/**\n\t\t * Old value of the attribute with given key or `null`, if attribute was not set before.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.oldValue = oldValue === undefined ? null : oldValue;\n\n\t\t/**\n\t\t * New value of the attribute with given key or `null`, if operation should remove attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.newValue = newValue === undefined ? null : newValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.oldValue === null ) {\n\t\t\treturn 'addAttribute';\n\t\t} else if ( this.newValue === null ) {\n\t\t\treturn 'removeAttribute';\n\t\t} else {\n\t\t\treturn 'changeAttribute';\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new AttributeOperation( this.range, this.key, this.oldValue, this.newValue, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tgetReversed() {\n\t\treturn new AttributeOperation( this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.range = this.range.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( !this.range.isFlat ) {\n\t\t\t/**\n\t\t\t * The range to change is not flat.\n\t\t\t *\n\t\t\t * @error attribute-operation-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'attribute-operation-range-not-flat: The range to change is not flat.' );\n\t\t}\n\n\t\tfor ( const item of this.range.getItems( { shallow: true } ) ) {\n\t\t\tif ( this.oldValue !== null && !isEqual( item.getAttribute( this.key ), this.oldValue ) ) {\n\t\t\t\t/**\n\t\t\t\t * Changed node has different attribute value than operation's old attribute value.\n\t\t\t\t *\n\t\t\t\t * @error attribute-operation-wrong-old-value\n\t\t\t\t * @param {module:engine/model/item~Item} item\n\t\t\t\t * @param {String} key\n\t\t\t\t * @param {*} value\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'attribute-operation-wrong-old-value: Changed node has different attribute value than operation\\'s ' +\n\t\t\t\t\t'old attribute value.',\n\t\t\t\t\t{ item, key: this.key, value: this.oldValue }\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( this.oldValue === null && this.newValue !== null && item.hasAttribute( this.key ) ) {\n\t\t\t\t/**\n\t\t\t\t * The attribute with given key already exists for the given node.\n\t\t\t\t *\n\t\t\t\t * @error attribute-operation-attribute-exists\n\t\t\t\t * @param {module:engine/model/node~Node} node\n\t\t\t\t * @param {String} key\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'attribute-operation-attribute-exists: The attribute with given key already exists.',\n\t\t\t\t\t{ node: item, key: this.key }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// If value to set is same as old value, don't do anything.\n\t\tif ( !isEqual( this.oldValue, this.newValue ) ) {\n\t\t\t// Execution.\n\t\t\t_setAttribute( this.range, this.key, this.newValue );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'AttributeOperation';\n\t}\n\n\t/**\n\t * Creates `AttributeOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new AttributeOperation( Range.fromJSON( json.range, document ), json.key, json.oldValue, json.newValue, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/detachoperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\nimport { _remove } from './utils';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to permanently remove node from detached root.\n * Note this operation is only a local operation and won't be send to the other clients.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class DetachOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition\n\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n\t * `sourcePosition` with offset shifted by `howMany`.\n\t */\n\tconstructor( sourcePosition, howMany ) {\n\t\tsuper( null );\n\n\t\t/**\n\t\t * Position before the first {@link module:engine/model/item~Item model item} to detach.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} #sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\n\t\t/**\n\t\t * Offset size of moved range.\n\t\t *\n\t\t * @member {Number} #howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'detach';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = this.sourcePosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( this.sourcePosition.root.document ) {\n\t\t\t/**\n\t\t\t * Cannot detach document node.\n\t\t\t *\n\t\t\t * @error detach-operation-on-document-node\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'detach-operation-on-document-node: Cannot detach document node.' );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t_remove( Range._createFromPositionAndShift( this.sourcePosition, this.howMany ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'DetachOperation';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/moveoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { _move } from './utils';\n\n/**\n * Operation to move a range of {@link module:engine/model/item~Item model items}\n * to given {@link module:engine/model/position~Position target position}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MoveOperation extends Operation {\n\t/**\n\t * Creates a move operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition\n\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n\t * `sourcePosition` with offset shifted by `howMany`.\n\t * @param {module:engine/model/position~Position} targetPosition Position at which moved nodes will be inserted.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( sourcePosition, howMany, targetPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position before the first {@link module:engine/model/item~Item model item} to move.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\t\t// `'toNext'` because `sourcePosition` is a bit like a start of the moved range.\n\t\tthis.sourcePosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Offset size of moved range.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/moveoperation~MoveOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position at which moved nodes will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#targetPosition\n\t\t */\n\t\tthis.targetPosition = targetPosition.clone();\n\t\tthis.targetPosition.stickiness = 'toNone';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.targetPosition.root.rootName == '$graveyard' ) {\n\t\t\treturn 'remove';\n\t\t} else if ( this.sourcePosition.root.rootName == '$graveyard' ) {\n\t\t\treturn 'reinsert';\n\t\t}\n\n\t\treturn 'move';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.sourcePosition, this.howMany, this.targetPosition, this.baseVersion );\n\t}\n\n\t/**\n\t * Returns the start position of the moved range after it got moved. This may be different than\n\t * {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition} in some cases, i.e. when a range is moved\n\t * inside the same parent but {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition targetPosition}\n\t * is after {@link module:engine/model/operation/moveoperation~MoveOperation#sourcePosition sourcePosition}.\n\t *\n\t *\t\t vv              vv\n\t *\t\tabcdefg ===> adefbcg\n\t *\t\t     ^          ^\n\t *\t\t     targetPos\tmovedRangeStart\n\t *\t\t     offset 6\toffset 4\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetMovedRangeStart() {\n\t\treturn this.targetPosition._getTransformedByDeletion( this.sourcePosition, this.howMany );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst newTargetPosition = this.sourcePosition._getTransformedByInsertion( this.targetPosition, this.howMany );\n\n\t\treturn new this.constructor( this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst sourceElement = this.sourcePosition.parent;\n\t\tconst targetElement = this.targetPosition.parent;\n\t\tconst sourceOffset = this.sourcePosition.offset;\n\t\tconst targetOffset = this.targetPosition.offset;\n\n\t\t// Validate whether move operation has correct parameters.\n\t\t// Validation is pretty complex but move operation is one of the core ways to manipulate the document state.\n\t\t// We expect that many errors might be connected with one of scenarios described below.\n\t\tif ( !sourceElement || !targetElement ) {\n\t\t\t/**\n\t\t\t * Source position or target position is invalid.\n\t\t\t *\n\t\t\t * @error move-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'move-operation-position-invalid: Source position or target position is invalid.'\n\t\t\t);\n\t\t} else if ( sourceOffset + this.howMany > sourceElement.maxOffset ) {\n\t\t\t/**\n\t\t\t * The nodes which should be moved do not exist.\n\t\t\t *\n\t\t\t * @error move-operation-nodes-do-not-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'move-operation-nodes-do-not-exist: The nodes which should be moved do not exist.'\n\t\t\t);\n\t\t} else if ( sourceElement === targetElement && sourceOffset < targetOffset && targetOffset < sourceOffset + this.howMany ) {\n\t\t\t/**\n\t\t\t * Trying to move a range of nodes into the middle of that range.\n\t\t\t *\n\t\t\t * @error move-operation-range-into-itself\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'move-operation-range-into-itself: Trying to move a range of nodes to the inside of that range.'\n\t\t\t);\n\t\t} else if ( this.sourcePosition.root == this.targetPosition.root ) {\n\t\t\tif ( compareArrays( this.sourcePosition.getParentPath(), this.targetPosition.getParentPath() ) == 'prefix' ) {\n\t\t\t\tconst i = this.sourcePosition.path.length - 1;\n\n\t\t\t\tif ( this.targetPosition.path[ i ] >= sourceOffset && this.targetPosition.path[ i ] < sourceOffset + this.howMany ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Trying to move a range of nodes into one of nodes from that range.\n\t\t\t\t\t *\n\t\t\t\t\t * @error move-operation-node-into-itself\n\t\t\t\t\t */\n\t\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t\t'move-operation-node-into-itself: Trying to move a range of nodes into one of nodes from that range.'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t_move( Range._createFromPositionAndShift( this.sourcePosition, this.howMany ), this.targetPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = this.sourcePosition.toJSON();\n\t\tjson.targetPosition = this.targetPosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MoveOperation';\n\t}\n\n\t/**\n\t * Creates `MoveOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst sourcePosition = Position.fromJSON( json.sourcePosition, document );\n\t\tconst targetPosition = Position.fromJSON( json.targetPosition, document );\n\n\t\treturn new this( sourcePosition, json.howMany, targetPosition, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/insertoperation\n */\n\nimport Operation from './operation';\nimport Position from '../position';\nimport NodeList from '../nodelist';\nimport MoveOperation from './moveoperation';\nimport { _insert, _normalizeNodes } from './utils';\nimport Text from '../text';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to insert one or more nodes at given position in the model.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class InsertOperation extends Operation {\n\t/**\n\t * Creates an insert operation.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of insertion.\n\t * @param {module:engine/model/node~NodeSet} nodes The list of nodes to be inserted.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, nodes, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position of insertion.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/insertoperation~InsertOperation#position\n\t\t */\n\t\tthis.position = position.clone();\n\t\tthis.position.stickiness = 'toNone';\n\n\t\t/**\n\t\t * List of nodes to insert.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/nodelist~NodeList} module:engine/model/operation/insertoperation~InsertOperation#nodeList\n\t\t */\n\t\tthis.nodes = new NodeList( _normalizeNodes( nodes ) );\n\n\t\t/**\n\t\t * Flag deciding how the operation should be transformed. If set to `true`, nodes might get additional attributes\n\t\t * during operational transformation. This happens when the operation insertion position is inside of a range\n\t\t * where attributes have changed.\n\t\t *\n\t\t * @member {Boolean} module:engine/model/operation/insertoperation~InsertOperation#shouldReceiveAttributes\n\t\t */\n\t\tthis.shouldReceiveAttributes = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'insert';\n\t}\n\n\t/**\n\t * Total offset size of inserted nodes.\n\t *\n\t * @returns {Number}\n\t */\n\tget howMany() {\n\t\treturn this.nodes.maxOffset;\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst nodes = new NodeList( [ ...this.nodes ].map( node => node._clone( true ) ) );\n\t\tconst insert = new InsertOperation( this.position, nodes, this.baseVersion );\n\n\t\tinsert.shouldReceiveAttributes = this.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.position.root.document.graveyard;\n\t\tconst gyPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MoveOperation( this.position, this.nodes.maxOffset, gyPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst targetElement = this.position.parent;\n\n\t\tif ( !targetElement || targetElement.maxOffset < this.position.offset ) {\n\t\t\t/**\n\t\t\t * Insertion position is invalid.\n\t\t\t *\n\t\t\t * @error insert-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'insert-operation-position-invalid: Insertion position is invalid.'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\t// What happens here is that we want original nodes be passed to writer because we want original nodes\n\t\t// to be inserted to the model. But in InsertOperation, we want to keep those nodes as they were added\n\t\t// to the operation, not modified. For example, text nodes can get merged or cropped while Elements can\n\t\t// get children. It is important that InsertOperation has the copy of original nodes in intact state.\n\t\tconst originalNodes = this.nodes;\n\t\tthis.nodes = new NodeList( [ ...originalNodes ].map( node => node._clone( true ) ) );\n\n\t\t_insert( this.position, originalNodes );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.position = this.position.toJSON();\n\t\tjson.nodes = this.nodes.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'InsertOperation';\n\t}\n\n\t/**\n\t * Creates `InsertOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/insertoperation~InsertOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst children = [];\n\n\t\tfor ( const child of json.nodes ) {\n\t\t\tif ( child.name ) {\n\t\t\t\t// If child has name property, it is an Element.\n\t\t\t\tchildren.push( Element.fromJSON( child ) );\n\t\t\t} else {\n\t\t\t\t// Otherwise, it is a Text node.\n\t\t\t\tchildren.push( Text.fromJSON( child ) );\n\t\t\t}\n\t\t}\n\n\t\tconst insert = new InsertOperation( Position.fromJSON( json.position, document ), children, json.baseVersion );\n\t\tinsert.shouldReceiveAttributes = json.shouldReceiveAttributes;\n\n\t\treturn insert;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/markeroperation\n */\n\nimport Operation from './operation';\nimport Range from '../range';\n\n/**\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MarkerOperation extends Operation {\n\t/**\n\t * @param {String} name Marker name.\n\t * @param {module:engine/model/range~Range} oldRange Marker range before the change.\n\t * @param {module:engine/model/range~Range} newRange Marker range after the change.\n\t * @param {module:engine/model/markercollection~MarkerCollection} markers Marker collection on which change should be executed.\n\t * @param {Boolean} affectsData Specifies whether the marker operation affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( name, oldRange, newRange, markers, affectsData, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Marker name.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Marker range before the change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.oldRange = oldRange ? oldRange.clone() : null;\n\n\t\t/**\n\t\t * Marker range after the change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/range~Range}\n\t\t */\n\t\tthis.newRange = newRange ? newRange.clone() : null;\n\n\t\t/**\n\t\t * Specifies whether the marker operation affects the data produced by the data pipeline\n\t\t * (is persisted in the editor's data).\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.affectsData = affectsData;\n\n\t\t/**\n\t\t * Marker collection on which change should be executed.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis._markers = markers;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'marker';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new MarkerOperation( this.name, this.oldRange, this.newRange, this._markers, this.affectsData, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n\t */\n\tgetReversed() {\n\t\treturn new MarkerOperation( this.name, this.newRange, this.oldRange, this._markers, this.affectsData, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst type = this.newRange ? '_set' : '_remove';\n\n\t\tthis._markers[ type ]( this.name, this.newRange, true, this.affectsData );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tif ( this.oldRange ) {\n\t\t\tjson.oldRange = this.oldRange.toJSON();\n\t\t}\n\n\t\tif ( this.newRange ) {\n\t\t\tjson.newRange = this.newRange.toJSON();\n\t\t}\n\n\t\tdelete json._markers;\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MarkerOperation';\n\t}\n\n\t/**\n\t * Creates `MarkerOperation` object from deserialized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new MarkerOperation(\n\t\t\tjson.name,\n\t\t\tjson.oldRange ? Range.fromJSON( json.oldRange, document ) : null,\n\t\t\tjson.newRange ? Range.fromJSON( json.newRange, document ) : null,\n\t\t\tdocument.model.markers,\n\t\t\tjson.affectsData,\n\t\t\tjson.baseVersion\n\t\t);\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/renameoperation\n */\n\nimport Operation from './operation';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Position from '../position';\n\n/**\n * Operation to change element's name.\n *\n * Using this class you can change element's name.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RenameOperation extends Operation {\n\t/**\n\t * Creates an operation that changes element's name.\n\t *\n\t * @param {module:engine/model/position~Position} position Position before an element to change.\n\t * @param {String} oldName Current name of the element.\n\t * @param {String} newName New name for the element.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( position, oldName, newName, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position before an element to change.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/renameoperation~RenameOperation#position\n\t\t */\n\t\tthis.position = position;\n\t\t// This position sticks to the next node because it is a position before the node that we want to change.\n\t\tthis.position.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Current name of the element.\n\t\t *\n\t\t * @member {String} module:engine/model/operation/renameoperation~RenameOperation#oldName\n\t\t */\n\t\tthis.oldName = oldName;\n\n\t\t/**\n\t\t * New name for the element.\n\t\t *\n\t\t * @member {String} module:engine/model/operation/renameoperation~RenameOperation#newName\n\t\t */\n\t\tthis.newName = newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'rename';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/renameoperation~RenameOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new RenameOperation( this.position.clone(), this.oldName, this.newName, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/renameoperation~RenameOperation}\n\t */\n\tgetReversed() {\n\t\treturn new RenameOperation( this.position.clone(), this.newName, this.oldName, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst element = this.position.nodeAfter;\n\n\t\tif ( !( element instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Given position is invalid or node after it is not instance of Element.\n\t\t\t *\n\t\t\t * @error rename-operation-wrong-position\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rename-operation-wrong-position: Given position is invalid or node after it is not an instance of Element.'\n\t\t\t);\n\t\t} else if ( element.name !== this.oldName ) {\n\t\t\t/**\n\t\t\t * Element to change has different name than operation's old name.\n\t\t\t *\n\t\t\t * @error rename-operation-wrong-name\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rename-operation-wrong-name: Element to change has different name than operation\\'s old name.'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst element = this.position.nodeAfter;\n\n\t\telement.name = this.newName;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.position = this.position.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'RenameOperation';\n\t}\n\n\t/**\n\t * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\treturn new RenameOperation( Position.fromJSON( json.position, document ), json.oldName, json.newName, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/rootattributeoperation\n */\n\nimport Operation from './operation';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to change root element's attribute. Using this class you can add, remove or change value of the attribute.\n *\n * This operation is needed, because root elements can't be changed through\n * @link module:engine/model/operation/attributeoperation~AttributeOperation}.\n * It is because {@link module:engine/model/operation/attributeoperation~AttributeOperation}\n * requires a range to change and root element can't\n * be a part of range because every {@link module:engine/model/position~Position} has to be inside a root.\n * {@link module:engine/model/position~Position} can't be created before a root element.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class RootAttributeOperation extends Operation {\n\t/**\n\t * Creates an operation that changes, removes or adds attributes on root element.\n\t *\n\t * @see module:engine/model/operation/attributeoperation~AttributeOperation\n\t * @param {module:engine/model/rootelement~RootElement} root Root element to change.\n\t * @param {String} key Key of an attribute to change or remove.\n\t * @param {*} oldValue Old value of the attribute with given key or `null` if adding a new attribute.\n\t * @param {*} newValue New value to set for the attribute. If `null`, then the operation just removes the attribute.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( root, key, oldValue, newValue, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Root element to change.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/rootelement~RootElement}\n\t\t */\n\t\tthis.root = root;\n\n\t\t/**\n\t\t * Key of an attribute to change or remove.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.key = key;\n\n\t\t/**\n\t\t * Old value of the attribute with given key or `null` if adding a new attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.oldValue = oldValue;\n\n\t\t/**\n\t\t * New value to set for the attribute. If `null`, then the operation just removes the attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @member {*}\n\t\t */\n\t\tthis.newValue = newValue;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\tif ( this.oldValue === null ) {\n\t\t\treturn 'addRootAttribute';\n\t\t} else if ( this.newValue === null ) {\n\t\t\treturn 'removeRootAttribute';\n\t\t} else {\n\t\t\treturn 'changeRootAttribute';\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new RootAttributeOperation( this.root, this.key, this.oldValue, this.newValue, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n\t */\n\tgetReversed() {\n\t\treturn new RootAttributeOperation( this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tif ( this.root != this.root.root || this.root.is( 'documentFragment' ) ) {\n\t\t\t/**\n\t\t\t * The element to change is not a root element.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-not-a-root\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t * @param {*} value\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-not-a-root: The element to change is not a root element.',\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\n\t\tif ( this.oldValue !== null && this.root.getAttribute( this.key ) !== this.oldValue ) {\n\t\t\t/**\n\t\t\t * The attribute which should be removed does not exists for the given node.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-wrong-old-value\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t * @param {*} value\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-wrong-old-value: Changed node has different attribute value than operation\\'s ' +\n\t\t\t\t'old attribute value.',\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\n\t\tif ( this.oldValue === null && this.newValue !== null && this.root.hasAttribute( this.key ) ) {\n\t\t\t/**\n\t\t\t * The attribute with given key already exists for the given node.\n\t\t\t *\n\t\t\t * @error rootattribute-operation-attribute-exists\n\t\t\t * @param {module:engine/model/rootelement~RootElement} root\n\t\t\t * @param {String} key\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-attribute-exists: The attribute with given key already exists.',\n\t\t\t\t{ root: this.root, key: this.key }\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tif ( this.newValue !== null ) {\n\t\t\tthis.root._setAttribute( this.key, this.newValue );\n\t\t} else {\n\t\t\tthis.root._removeAttribute( this.key );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.root = this.root.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'RootAttributeOperation';\n\t}\n\n\t/**\n\t * Creates RootAttributeOperation object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tif ( !document.getRoot( json.root ) ) {\n\t\t\t/**\n\t\t\t * Cannot create RootAttributeOperation for document. Root with specified name does not exist.\n\t\t\t *\n\t\t\t * @error rootattributeoperation-fromjson-no-root\n\t\t\t * @param {String} rootName\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'rootattribute-operation-fromjson-no-root: Cannot create RootAttributeOperation. Root with specified name does not exist.',\n\t\t\t\t{ rootName: json.root }\n\t\t\t);\n\t\t}\n\n\t\treturn new RootAttributeOperation( document.getRoot( json.root ), json.key, json.oldValue, json.newValue, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/mergeoperation\n */\n\nimport Operation from './operation';\nimport SplitOperation from './splitoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _move } from './utils';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to merge two {@link module:engine/model/element~Element elements}.\n *\n * The merged element is the parent of {@link ~MergeOperation#sourcePosition} and it is merged into the parent of\n * {@link ~MergeOperation#targetPosition}. All nodes from the merged element are moved to {@link ~MergeOperation#targetPosition}.\n *\n * The merged element is moved to the graveyard at {@link ~MergeOperation#graveyardPosition}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class MergeOperation extends Operation {\n\t/**\n\t * Creates a merge operation.\n\t *\n\t * @param {module:engine/model/position~Position} sourcePosition Position inside the merged element. All nodes from that\n\t * element after that position will be moved to {@link ~#targetPosition}.\n\t * @param {Number} howMany Summary offset size of nodes which will be moved from the merged element to the new parent.\n\t * @param {module:engine/model/position~Position} targetPosition Position which the nodes from the merged elements will be moved to.\n\t * @param {module:engine/model/position~Position} graveyardPosition Position in graveyard to which the merged element will be moved.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( sourcePosition, howMany, targetPosition, graveyardPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position inside the merged element. All nodes from that element after that position will be moved to {@link ~#targetPosition}.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#sourcePosition\n\t\t */\n\t\tthis.sourcePosition = sourcePosition.clone();\n\t\t// This is, and should always remain, the first position in its parent.\n\t\tthis.sourcePosition.stickiness = 'toPrevious';\n\n\t\t/**\n\t\t * Summary offset size of nodes which will be moved from the merged element to the new parent.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/mergeoperation~MergeOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position which the nodes from the merged elements will be moved to.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#targetPosition\n\t\t */\n\t\tthis.targetPosition = targetPosition.clone();\n\t\t// Except of a rare scenario in `MergeOperation` x `MergeOperation` transformation,\n\t\t// this is, and should always remain, the last position in its parent.\n\t\tthis.targetPosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Position in graveyard to which the merged element will be moved.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#graveyardPosition\n\t\t */\n\t\tthis.graveyardPosition = graveyardPosition.clone();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'merge';\n\t}\n\n\t/**\n\t * Position before the merged element (which will be deleted).\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position}\n\t */\n\tget deletionPosition() {\n\t\treturn new Position( this.sourcePosition.root, this.sourcePosition.path.slice( 0, -1 ) );\n\t}\n\n\t/**\n\t * Artificial range that contains all the nodes from the merged element that will be moved to {@link ~MergeOperation#sourcePosition}.\n\t * The range starts at {@link ~MergeOperation#sourcePosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/range~Range}\n\t */\n\tget movedRange() {\n\t\tconst end = this.sourcePosition.getShiftedBy( Number.POSITIVE_INFINITY );\n\n\t\treturn new Range( this.sourcePosition, end );\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new this.constructor( this.sourcePosition, this.howMany, this.targetPosition, this.graveyardPosition, this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n\t */\n\tgetReversed() {\n\t\t// Positions in this method are transformed by this merge operation because the split operation bases on\n\t\t// the context after this merge operation happened (because split operation reverses it).\n\t\t// So we need to acknowledge that the merge operation happened and those positions changed a little.\n\t\tconst targetPosition = this.targetPosition._getTransformedByMergeOperation( this );\n\n\t\tconst path = this.sourcePosition.path.slice( 0, -1 );\n\t\tconst insertionPosition = new Position( this.sourcePosition.root, path )._getTransformedByMergeOperation( this );\n\n\t\tconst split = new SplitOperation( targetPosition, this.howMany, this.graveyardPosition, this.baseVersion + 1 );\n\t\tsplit.insertionPosition = insertionPosition;\n\n\t\treturn split;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst sourceElement = this.sourcePosition.parent;\n\t\tconst targetElement = this.targetPosition.parent;\n\n\t\t// Validate whether merge operation has correct parameters.\n\t\tif ( !sourceElement || !sourceElement.is( 'element' ) || !sourceElement.parent ) {\n\t\t\t/**\n\t\t\t * Merge source position is invalid.\n\t\t\t *\n\t\t\t * @error merge-operation-source-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-source-position-invalid: Merge source position is invalid.' );\n\t\t} else if ( !targetElement || !targetElement.is( 'element' ) || !targetElement.parent ) {\n\t\t\t/**\n\t\t\t * Merge target position is invalid.\n\t\t\t *\n\t\t\t * @error merge-operation-target-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-target-position-invalid: Merge target position is invalid.' );\n\t\t} else if ( this.howMany != sourceElement.maxOffset ) {\n\t\t\t/**\n\t\t\t * Merge operation specifies wrong number of nodes to move.\n\t\t\t *\n\t\t\t * @error merge-operation-how-many-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'merge-operation-how-many-invalid: Merge operation specifies wrong number of nodes to move.' );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst mergedElement = this.sourcePosition.parent;\n\t\tconst sourceRange = Range._createIn( mergedElement );\n\n\t\t_move( sourceRange, this.targetPosition );\n\t\t_move( Range._createOn( mergedElement ), this.graveyardPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.sourcePosition = json.sourcePosition.toJSON();\n\t\tjson.targetPosition = json.targetPosition.toJSON();\n\t\tjson.graveyardPosition = json.graveyardPosition.toJSON();\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'MergeOperation';\n\t}\n\n\t/**\n\t * Creates `MergeOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst sourcePosition = Position.fromJSON( json.sourcePosition, document );\n\t\tconst targetPosition = Position.fromJSON( json.targetPosition, document );\n\t\tconst graveyardPosition = Position.fromJSON( json.graveyardPosition, document );\n\n\t\treturn new this( sourcePosition, json.howMany, targetPosition, graveyardPosition, json.baseVersion );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/splitoperation\n */\n\nimport Operation from './operation';\nimport MergeOperation from './mergeoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _insert, _move } from './utils';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Operation to split {@link module:engine/model/element~Element an element} at given\n * {@link module:engine/model/operation/splitoperation~SplitOperation#splitPosition split position} into two elements,\n * both containing a part of the element's original content.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class SplitOperation extends Operation {\n\t/**\n\t * Creates a split operation.\n\t *\n\t * @param {module:engine/model/position~Position} splitPosition Position at which an element should be split.\n\t * @param {Number} howMany Total offset size of elements that are in the split element after `position`.\n\t * @param {module:engine/model/position~Position|null} graveyardPosition Position in the graveyard root before the element which\n\t * should be used as a parent of the nodes after `position`. If it is not set, a copy of the the `position` parent will be used.\n\t * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n\t * can be applied or `null` if the operation operates on detached (non-document) tree.\n\t */\n\tconstructor( splitPosition, howMany, graveyardPosition, baseVersion ) {\n\t\tsuper( baseVersion );\n\n\t\t/**\n\t\t * Position at which an element should be split.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#splitPosition\n\t\t */\n\t\tthis.splitPosition = splitPosition.clone();\n\t\t// Keep position sticking to the next node. This way any new content added at the place where the element is split\n\t\t// will be left in the original element.\n\t\tthis.splitPosition.stickiness = 'toNext';\n\n\t\t/**\n\t\t * Total offset size of elements that are in the split element after `position`.\n\t\t *\n\t\t * @member {Number} module:engine/model/operation/splitoperation~SplitOperation#howMany\n\t\t */\n\t\tthis.howMany = howMany;\n\n\t\t/**\n\t\t * Position at which the clone of split element (or element from graveyard) will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#insertionPosition\n\t\t */\n\t\tthis.insertionPosition = SplitOperation.getInsertionPosition( splitPosition );\n\t\tthis.insertionPosition.stickiness = 'toNone';\n\n\t\t/**\n\t\t * Position in the graveyard root before the element which should be used as a parent of the nodes after `position`.\n\t\t * If it is not set, a copy of the the `position` parent will be used.\n\t\t *\n\t\t * The default behavior is to clone the split element. Element from graveyard is used during undo.\n\t\t *\n\t\t * @member {module:engine/model/position~Position|null} #graveyardPosition\n\t\t */\n\t\tthis.graveyardPosition = graveyardPosition ? graveyardPosition.clone() : null;\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\tthis.graveyardPosition.stickiness = 'toNext';\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget type() {\n\t\treturn 'split';\n\t}\n\n\t/**\n\t * Position inside the new clone of a split element.\n\t *\n\t * This is a position where nodes that are after the split position will be moved to.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/position~Position}\n\t */\n\tget moveTargetPosition() {\n\t\tconst path = this.insertionPosition.path.slice();\n\t\tpath.push( 0 );\n\n\t\treturn new Position( this.insertionPosition.root, path );\n\t}\n\n\t/**\n\t * Artificial range that contains all the nodes from the split element that will be moved to the new element.\n\t * The range starts at {@link ~#splitPosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/range~Range}\n\t */\n\tget movedRange() {\n\t\tconst end = this.splitPosition.getShiftedBy( Number.POSITIVE_INFINITY );\n\n\t\treturn new Range( this.splitPosition, end );\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\tconst split = new this.constructor( this.splitPosition, this.howMany, this.graveyardPosition, this.baseVersion );\n\t\tsplit.insertionPosition = this.insertionPosition;\n\n\t\treturn split;\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n\t */\n\tgetReversed() {\n\t\tconst graveyard = this.splitPosition.root.document.graveyard;\n\t\tconst graveyardPosition = new Position( graveyard, [ 0 ] );\n\n\t\treturn new MergeOperation( this.moveTargetPosition, this.howMany, this.splitPosition, graveyardPosition, this.baseVersion + 1 );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_validate() {\n\t\tconst element = this.splitPosition.parent;\n\t\tconst offset = this.splitPosition.offset;\n\n\t\t// Validate whether split operation has correct parameters.\n\t\tif ( !element || element.maxOffset < offset ) {\n\t\t\t/**\n\t\t\t * Split position is invalid.\n\t\t\t *\n\t\t\t * @error split-operation-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-position-invalid: Split position is invalid.' );\n\t\t} else if ( !element.parent ) {\n\t\t\t/**\n\t\t\t * Cannot split root element.\n\t\t\t *\n\t\t\t * @error split-operation-split-in-root\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-split-in-root: Cannot split root element.' );\n\t\t} else if ( this.howMany != element.maxOffset - this.splitPosition.offset ) {\n\t\t\t/**\n\t\t\t * Split operation specifies wrong number of nodes to move.\n\t\t\t *\n\t\t\t * @error split-operation-how-many-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-how-many-invalid: Split operation specifies wrong number of nodes to move.' );\n\t\t} else if ( this.graveyardPosition && !this.graveyardPosition.nodeAfter ) {\n\t\t\t/**\n\t\t\t * Graveyard position invalid.\n\t\t\t *\n\t\t\t * @error split-operation-graveyard-position-invalid\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'split-operation-graveyard-position-invalid: Graveyard position invalid.' );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_execute() {\n\t\tconst splitElement = this.splitPosition.parent;\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\t_move( Range._createFromPositionAndShift( this.graveyardPosition, 1 ), this.insertionPosition );\n\t\t} else {\n\t\t\tconst newElement = splitElement._clone();\n\n\t\t\t_insert( this.insertionPosition, newElement );\n\t\t}\n\n\t\tconst sourceRange = new Range(\n\t\t\tPosition._createAt( splitElement, this.splitPosition.offset ),\n\t\t\tPosition._createAt( splitElement, splitElement.maxOffset )\n\t\t);\n\n\t\t_move( sourceRange, this.moveTargetPosition );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\n\t\tjson.splitPosition = this.splitPosition.toJSON();\n\t\tjson.insertionPosition = this.insertionPosition.toJSON();\n\n\t\tif ( this.graveyardPosition ) {\n\t\t\tjson.graveyardPosition = this.graveyardPosition.toJSON();\n\t\t}\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'SplitOperation';\n\t}\n\n\t/**\n\t * Helper function that returns a default insertion position basing on given `splitPosition`. The default insertion\n\t * position is after the split element.\n\t *\n\t * @param {module:engine/model/position~Position} splitPosition\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic getInsertionPosition( splitPosition ) {\n\t\tconst path = splitPosition.path.slice( 0, -1 );\n\t\tpath[ path.length - 1 ]++;\n\n\t\treturn new Position( splitPosition.root, path );\n\t}\n\n\t/**\n\t * Creates `SplitOperation` object from deserilized object, i.e. from parsed JSON string.\n\t *\n\t * @param {Object} json Deserialized JSON object.\n\t * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n\t * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n\t */\n\tstatic fromJSON( json, document ) {\n\t\tconst splitPosition = Position.fromJSON( json.splitPosition, document );\n\t\tconst insertionPosition = Position.fromJSON( json.insertionPosition, document );\n\t\tconst graveyardPosition = json.graveyardPosition ? Position.fromJSON( json.graveyardPosition, document ) : null;\n\n\t\tconst split = new this( splitPosition, json.howMany, graveyardPosition, json.baseVersion );\n\t\tsplit.insertionPosition = insertionPosition;\n\n\t\treturn split;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/rootelement\n */\n\nimport Element from './element';\n\n/**\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\n * @extends module:engine/model/element~Element\n */\nexport default class RootElement extends Element {\n\t/**\n\t * Creates root element.\n\t *\n\t * @param {module:engine/model/document~Document} doc Document that is an owner of this root.\n\t * @param {String} name Node name.\n\t * @param {String} [rootName='main'] Unique root name used to identify this root\n\t * element by {@link module:engine/model/document~Document}.\n\t */\n\tconstructor( doc, name, rootName = 'main' ) {\n\t\tsuper( name );\n\n\t\t/**\n\t\t * Document that is an owner of this root.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/document~Document}\n\t\t */\n\t\tthis._doc = doc;\n\n\t\t/**\n\t\t * Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.rootName = rootName;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns this root element.\n\t *\n\t * In contrary, to {@link module:engine/model/node~Node node}, root element always have a `document`.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this._doc;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type, name ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'rootElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( type == 'rootElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Converts `RootElement` instance to `String` containing it's name.\n\t *\n\t * @returns {String} `RootElement` instance converted to `String`.\n\t */\n\ttoJSON() {\n\t\treturn this.rootName;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/writer\n */\n\nimport AttributeOperation from './operation/attributeoperation';\nimport DetachOperation from './operation/detachoperation';\nimport InsertOperation from './operation/insertoperation';\nimport MarkerOperation from './operation/markeroperation';\nimport MoveOperation from './operation/moveoperation';\nimport RenameOperation from './operation/renameoperation';\nimport RootAttributeOperation from './operation/rootattributeoperation';\nimport SplitOperation from './operation/splitoperation';\nimport MergeOperation from './operation/mergeoperation';\n\nimport DocumentFragment from './documentfragment';\nimport Text from './text';\nimport Element from './element';\nimport RootElement from './rootelement';\nimport Position from './position';\nimport Range from './range.js';\nimport DocumentSelection from './documentselection';\n\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * The model can only be modified by using the writer. It should be used whenever you want to create a node, modify\n * child nodes, attributes or text, set the selection's position and its attributes.\n *\n * The instance of the writer is only available in the {@link module:engine/model/model~Model#change `change()`} or\n * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`}.\n *\n *\t\tmodel.change( writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * Note that the writer should never be stored and used outside of the `change()` and\n * `enqueueChange()` blocks.\n *\n * Note that writer's methods do not check the {@link module:engine/model/schema~Schema}. It is possible\n * to create incorrect model structures by using the writer. Read more about in\n * {@glink framework/guides/deep-dive/schema#who-checks-the-schema \"Who checks the schema?\"}.\n *\n * @see module:engine/model/model~Model#change\n * @see module:engine/model/model~Model#enqueueChange\n */\nexport default class Writer {\n\t/**\n\t * Creates a writer instance.\n\t *\n\t * **Note:** It is not recommended to use it directly. Use {@link module:engine/model/model~Model#change `Model#change()`} or\n\t * {@link module:engine/model/model~Model#enqueueChange `Model#enqueueChange()`} instead.\n\t *\n\t * @protected\n\t * @param {module:engine/model/model~Model} model\n\t * @param {module:engine/model/batch~Batch} batch\n\t */\n\tconstructor( model, batch ) {\n\t\t/**\n\t\t * Instance of the model on which this writer operates.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The batch to which this writer will add changes.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:engine/model/batch~Batch}\n\t\t */\n\t\tthis.batch = batch;\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/text~Text text node}.\n\t *\n\t *\t\twriter.createText( 'foo' );\n\t *\t\twriter.createText( 'foo', { bold: true } );\n\t *\n\t * @param {String} data Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @returns {module:engine/model/text~Text} Created text node.\n\t */\n\tcreateText( data, attributes ) {\n\t\treturn new Text( data, attributes );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/element~Element element}.\n\t *\n\t *\t\twriter.createElement( 'paragraph' );\n\t *\t\twriter.createElement( 'paragraph', { alignment: 'center' } );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @returns {module:engine/model/element~Element} Created element.\n\t */\n\tcreateElement( name, attributes ) {\n\t\treturn new Element( name, attributes );\n\t}\n\n\t/**\n\t * Creates a new {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n\t *\n\t * @returns {module:engine/model/documentfragment~DocumentFragment} Created document fragment.\n\t */\n\tcreateDocumentFragment() {\n\t\treturn new DocumentFragment();\n\t}\n\n\t/**\n\t * Inserts item on given position.\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.insert( paragraph, position );\n\t *\n\t * Instead of using position you can use parent and offset:\n\t *\n\t *\t\tconst text = writer.createText( 'foo' );\n\t *\t\twriter.insert( text, paragraph, 5 );\n\t *\n\t * You can also use `end` instead of the offset to insert at the end:\n\t *\n\t *\t\tconst text = writer.createText( 'foo' );\n\t *\t\twriter.insert( text, paragraph, 'end' );\n\t *\n\t * Or insert before or after another element:\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.insert( paragraph, anotherParagraph, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * Note that if the item already has parent it will be removed from the previous parent.\n\t *\n\t * Note that you cannot re-insert a node from a document to a different document or a document fragment. In this case,\n\t * `model-writer-insert-forbidden-move` is thrown.\n\t *\n\t * If you want to move {@link module:engine/model/range~Range range} instead of an\n\t * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n\t *\n\t * **Note:** For a paste-like content insertion mechanism see\n\t * {@link module:engine/model/model~Model#insertContent `model.insertContent()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment} item Item or document\n\t * fragment to insert.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * second parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsert( item, itemOrPosition, offset = 0 ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst position = Position._createAt( itemOrPosition, offset );\n\n\t\t// If item has a parent already.\n\t\tif ( item.parent ) {\n\t\t\t// We need to check if item is going to be inserted within the same document.\n\t\t\tif ( isSameTree( item.root, position.root ) ) {\n\t\t\t\t// If it's we just need to move it.\n\t\t\t\tthis.move( Range._createOn( item ), position );\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// If it isn't the same root.\n\t\t\telse {\n\t\t\t\tif ( item.root.document ) {\n\t\t\t\t\t// It is forbidden to move a node that was already in a document outside of it.\n\t\t\t\t\tthrow new Error( 'model-writer-insert-forbidden-move: Cannot move a node from a document to a different tree.' );\n\t\t\t\t} else {\n\t\t\t\t\t// Move between two different document fragments or from document fragment to a document is possible.\n\t\t\t\t\t// In that case, remove the item from it's original parent.\n\t\t\t\t\tthis.remove( item );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst version = position.root.document ? position.root.document.version : null;\n\n\t\tconst insert = new InsertOperation( position, item, version );\n\n\t\tif ( item instanceof Text ) {\n\t\t\tinsert.shouldReceiveAttributes = true;\n\t\t}\n\n\t\tthis.batch.addOperation( insert );\n\t\tthis.model.applyOperation( insert );\n\n\t\t// When element is a DocumentFragment we need to move its markers to Document#markers.\n\t\tif ( item instanceof DocumentFragment ) {\n\t\t\tfor ( const [ markerName, markerRange ] of item.markers ) {\n\t\t\t\t// We need to migrate marker range from DocumentFragment to Document.\n\t\t\t\tconst rangeRootPosition = Position._createAt( markerRange.root, 0 );\n\t\t\t\tconst range = new Range(\n\t\t\t\t\tmarkerRange.start._getCombined( rangeRootPosition, position ),\n\t\t\t\t\tmarkerRange.end._getCombined( rangeRootPosition, position )\n\t\t\t\t);\n\n\t\t\t\tthis.addMarker( markerName, { range, usingOperation: true, affectsData: true } );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates and inserts text on given position. You can optionally set text attributes:\n\t *\n\t *\t\twriter.insertText( 'foo', position );\n\t *\t\twriter.insertText( 'foo', { bold: true }, position );\n\t *\n\t * Instead of using position you can use parent and offset or define that text should be inserted at the end\n\t * or before or after other node:\n\t *\n\t *\t\t// Inserts 'foo' in paragraph, at offset 5:\n\t *\t\twriter.insertText( 'foo', paragraph, 5 );\n\t *\t\t// Inserts 'foo' at the end of a paragraph:\n\t *\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t// Inserts 'foo' after an image:\n\t *\t\twriter.insertText( 'foo', image, 'after' );\n\t *\n\t * These parameters work in the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * @param {String} data Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * third parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsertText( text, attributes, itemOrPosition, offset ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position ) {\n\t\t\tthis.insert( this.createText( text ), attributes, itemOrPosition );\n\t\t} else {\n\t\t\tthis.insert( this.createText( text, attributes ), itemOrPosition, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Creates and inserts element on given position. You can optionally set attributes:\n\t *\n\t *\t\twriter.insertElement( 'paragraph', position );\n\t *\t\twriter.insertElement( 'paragraph', { alignment: 'center' }, position );\n\t *\n\t * Instead of using position you can use parent and offset or define that text should be inserted at the end\n\t * or before or after other node:\n\t *\n\t *\t\t// Inserts paragraph in the root at offset 5:\n\t *\t\twriter.insertElement( 'paragraph', root, 5 );\n\t *\t\t// Inserts paragraph at the end of a blockquote:\n\t *\t\twriter.insertElement( 'paragraph', blockquote, 'end' );\n\t *\t\t// Inserts after an image:\n\t *\t\twriter.insertElement( 'paragraph', image, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * third parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tinsertElement( name, attributes, itemOrPosition, offset ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position ) {\n\t\t\tthis.insert( this.createElement( name ), attributes, itemOrPosition );\n\t\t} else {\n\t\t\tthis.insert( this.createElement( name, attributes ), itemOrPosition, offset );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts item at the end of the given parent.\n\t *\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\twriter.append( paragraph, root );\n\t *\n\t * Note that if the item already has parent it will be removed from the previous parent.\n\t *\n\t * If you want to move {@link module:engine/model/range~Range range} instead of an\n\t * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment}\n\t * item Item or document fragment to insert.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappend( item, parent ) {\n\t\tthis.insert( item, parent, 'end' );\n\t}\n\n\t/**\n\t * Creates text node and inserts it at the end of the parent. You can optionally set text attributes:\n\t *\n\t *\t\twriter.appendText( 'foo', paragraph );\n\t *\t\twriter.appendText( 'foo', { bold: true }, paragraph );\n\t *\n\t * @param {String} text Text data.\n\t * @param {Object} [attributes] Text attributes.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappendText( text, attributes, parent ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element ) {\n\t\t\tthis.insert( this.createText( text ), attributes, 'end' );\n\t\t} else {\n\t\t\tthis.insert( this.createText( text, attributes ), parent, 'end' );\n\t\t}\n\t}\n\n\t/**\n\t * Creates element and inserts it at the end of the parent. You can optionally set attributes:\n\t *\n\t *\t\twriter.appendElement( 'paragraph', root );\n\t *\t\twriter.appendElement( 'paragraph', { alignment: 'center' }, root );\n\t *\n\t * @param {String} name Name of the element.\n\t * @param {Object} [attributes] Elements attributes.\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n\t */\n\tappendElement( name, attributes, parent ) {\n\t\tif ( attributes instanceof DocumentFragment || attributes instanceof Element ) {\n\t\t\tthis.insert( this.createElement( name ), attributes, 'end' );\n\t\t} else {\n\t\t\tthis.insert( this.createElement( name, attributes ), parent, 'end' );\n\t\t}\n\t}\n\n\t/**\n\t * Sets value of the attribute with given key on a {@link module:engine/model/item~Item model item}\n\t * or on a {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {*} value Attribute new value.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range on which the attribute will be set.\n\t */\n\tsetAttribute( key, value, itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( itemOrRange instanceof Range ) {\n\t\t\tconst ranges = itemOrRange.getMinimalFlatRanges();\n\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tsetAttributeOnRange( this, key, value, range );\n\t\t\t}\n\t\t} else {\n\t\t\tsetAttributeOnItem( this, key, value, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Sets values of attributes on a {@link module:engine/model/item~Item model item}\n\t * or on a {@link module:engine/model/range~Range range}.\n\t *\n\t *\t\twriter.setAttributes( {\n\t *\t\t\tbold: true,\n\t *\t\t\titalic: true\n\t *\t\t}, range );\n\t *\n\t * @param {Object} attributes Attributes keys and values.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range on which the attributes will be set.\n\t */\n\tsetAttributes( attributes, itemOrRange ) {\n\t\tfor ( const [ key, val ] of toMap( attributes ) ) {\n\t\t\tthis.setAttribute( key, val, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Removes an attribute with given key from a {@link module:engine/model/item~Item model item}\n\t * or from a {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {String} key Attribute key.\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range from which the attribute will be removed.\n\t */\n\tremoveAttribute( key, itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( itemOrRange instanceof Range ) {\n\t\t\tconst ranges = itemOrRange.getMinimalFlatRanges();\n\n\t\t\tfor ( const range of ranges ) {\n\t\t\t\tsetAttributeOnRange( this, key, null, range );\n\t\t\t}\n\t\t} else {\n\t\t\tsetAttributeOnItem( this, key, null, itemOrRange );\n\t\t}\n\t}\n\n\t/**\n\t * Removes all attributes from all elements in the range or from the given item.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n\t * Model item or range from which all attributes will be removed.\n\t */\n\tclearAttributes( itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst removeAttributesFromItem = item => {\n\t\t\tfor ( const attribute of item.getAttributeKeys() ) {\n\t\t\t\tthis.removeAttribute( attribute, item );\n\t\t\t}\n\t\t};\n\n\t\tif ( !( itemOrRange instanceof Range ) ) {\n\t\t\tremoveAttributesFromItem( itemOrRange );\n\t\t} else {\n\t\t\tfor ( const item of itemOrRange.getItems() ) {\n\t\t\t\tremoveAttributesFromItem( item );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Moves all items in the source range to the target position.\n\t *\n\t *\t\twriter.move( sourceRange, targetPosition );\n\t *\n\t * Instead of the target position you can use parent and offset or define that range should be moved to the end\n\t * or before or after chosen item:\n\t *\n\t *\t\t// Moves all items in the range to the paragraph at offset 5:\n\t *\t\twriter.move( sourceRange, paragraph, 5 );\n\t *\t\t// Moves all items in the range to the end of a blockquote:\n\t *\t\twriter.move( sourceRange, blockquote, 'end' );\n\t *\t\t// Moves all items in the range to a position after an image:\n\t *\t\twriter.move( sourceRange, image, 'after' );\n\t *\n\t * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n\t *\n\t * Note that items can be moved only within the same tree. It means that you can move items within the same root\n\t * (element or document fragment) or between {@link module:engine/model/document~Document#roots documents roots},\n\t * but you can not move items from document fragment to the document or from one detached element to another. Use\n\t * {@link module:engine/model/writer~Writer#insert} in such cases.\n\t *\n\t * @param {module:engine/model/range~Range} range Source range.\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * second parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tmove( range, itemOrPosition, offset ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !( range instanceof Range ) ) {\n\t\t\t/**\n\t\t\t * Invalid range to move.\n\t\t\t *\n\t\t\t * @error writer-move-invalid-range\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-invalid-range: Invalid range to move.' );\n\t\t}\n\n\t\tif ( !range.isFlat ) {\n\t\t\t/**\n\t\t\t * Range to move is not flat.\n\t\t\t *\n\t\t\t * @error writer-move-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-range-not-flat: Range to move is not flat.' );\n\t\t}\n\n\t\tconst position = Position._createAt( itemOrPosition, offset );\n\n\t\tif ( !isSameTree( range.root, position.root ) ) {\n\t\t\t/**\n\t\t\t * Range is going to be moved within not the same document. Please use\n\t\t\t * {@link module:engine/model/writer~Writer#insert insert} instead.\n\t\t\t *\n\t\t\t * @error writer-move-different-document\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-move-different-document: Range is going to be moved between different documents.' );\n\t\t}\n\n\t\tconst version = range.root.document ? range.root.document.version : null;\n\t\tconst operation = new MoveOperation( range.start, range.end.offset - range.start.offset, position, version );\n\n\t\tthis.batch.addOperation( operation );\n\t\tthis.model.applyOperation( operation );\n\t}\n\n\t/**\n\t * Removes given model {@link module:engine/model/item~Item item} or {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange Model item or range to remove.\n\t */\n\tremove( itemOrRange ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( itemOrRange instanceof Range ) {\n\t\t\t// The array is reversed, so the ranges to remove are in correct order and do not have to be updated.\n\t\t\tconst ranges = itemOrRange.getMinimalFlatRanges().reverse();\n\n\t\t\tfor ( const flat of ranges ) {\n\t\t\t\tapplyRemoveOperation( flat.start, flat.end.offset - flat.start.offset, this.batch, this.model );\n\t\t\t}\n\t\t} else {\n\t\t\tconst howMany = itemOrRange.is( 'text' ) ? itemOrRange.offsetSize : 1;\n\n\t\t\tapplyRemoveOperation( Position._createBefore( itemOrRange ), howMany, this.batch, this.model );\n\t\t}\n\t}\n\n\t/**\n\t * Merges two siblings at the given position.\n\t *\n\t * Node before and after the position have to be an element. Otherwise `writer-merge-no-element-before` or\n\t * `writer-merge-no-element-after` error will be thrown.\n\t *\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\tmerge( position ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst nodeBefore = position.nodeBefore;\n\t\tconst nodeAfter = position.nodeAfter;\n\n\t\tif ( !( nodeBefore instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Node before merge position must be an element.\n\t\t\t *\n\t\t\t * @error writer-merge-no-element-before\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-merge-no-element-before: Node before merge position must be an element.' );\n\t\t}\n\n\t\tif ( !( nodeAfter instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Node after merge position must be an element.\n\t\t\t *\n\t\t\t * @error writer-merge-no-element-after\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-merge-no-element-after: Node after merge position must be an element.' );\n\t\t}\n\n\t\tif ( !position.root.document ) {\n\t\t\tthis._mergeDetached( position );\n\t\t} else {\n\t\t\tthis._merge( position );\n\t\t}\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionFromPath `Model#createPositionFromPath()`}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionFromPath( root, path, stickiness ) {\n\t\treturn this.model.createPositionFromPath( root, path, stickiness );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn this.model.createPositionAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionAfter `Model#createPositionAfter()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn this.model.createPositionAfter( item );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createPositionBefore `Model#createPositionBefore()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn this.model.createPositionBefore( item );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRange `Model#createRange()`}.\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn this.model.createRange( start, end );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRangeIn `Model#createRangeIn()`}.\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn this.model.createRangeIn( element );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createRangeOn `Model#createRangeOn()`}.\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeOn( element ) {\n\t\treturn this.model.createRangeOn( element );\n\t}\n\n\t/**\n\t * Shortcut for {@link module:engine/model/model~Model#createSelection `Model#createSelection()`}.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/position~Position|module:engine/model/element~Element|\n\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @returns {module:engine/model/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn this.model.createSelection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Performs merge action in a detached tree.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\t_mergeDetached( position ) {\n\t\tconst nodeBefore = position.nodeBefore;\n\t\tconst nodeAfter = position.nodeAfter;\n\n\t\tthis.move( Range._createIn( nodeAfter ), Position._createAt( nodeBefore, 'end' ) );\n\t\tthis.remove( nodeAfter );\n\t}\n\n\t/**\n\t * Performs merge action in a non-detached tree.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position Position between merged elements.\n\t */\n\t_merge( position ) {\n\t\tconst targetPosition = Position._createAt( position.nodeBefore, 'end' );\n\t\tconst sourcePosition = Position._createAt( position.nodeAfter, 0 );\n\n\t\tconst graveyard = position.root.document.graveyard;\n\t\tconst graveyardPosition = new Position( graveyard, [ 0 ] );\n\n\t\tconst version = position.root.document.version;\n\n\t\tconst merge = new MergeOperation( sourcePosition, position.nodeAfter.maxOffset, targetPosition, graveyardPosition, version );\n\n\t\tthis.batch.addOperation( merge );\n\t\tthis.model.applyOperation( merge );\n\t}\n\n\t/**\n\t * Renames the given element.\n\t *\n\t * @param {module:engine/model/element~Element} element The element to rename.\n\t * @param {String} newName New element name.\n\t */\n\trename( element, newName ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !( element instanceof Element ) ) {\n\t\t\t/**\n\t\t\t * Trying to rename an object which is not an instance of Element.\n\t\t\t *\n\t\t\t * @error writer-rename-not-element-instance\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-rename-not-element-instance: Trying to rename an object which is not an instance of Element.'\n\t\t\t);\n\t\t}\n\n\t\tconst version = element.root.document ? element.root.document.version : null;\n\t\tconst renameOperation = new RenameOperation( Position._createBefore( element ), element.name, newName, version );\n\n\t\tthis.batch.addOperation( renameOperation );\n\t\tthis.model.applyOperation( renameOperation );\n\t}\n\n\t/**\n\t * Splits elements starting from the given position and going to the top of the model tree as long as given\n\t * `limitElement` is reached. When `limitElement` is not defined then only the parent of the given position will be split.\n\t *\n\t * The element needs to have a parent. It cannot be a root element nor a document fragment.\n\t * The `writer-split-element-no-parent` error will be thrown if you try to split an element with no parent.\n\t *\n\t * @param {module:engine/model/position~Position} position Position of split.\n\t * @param {module:engine/model/node~Node} [limitElement] Stop splitting when this element will be reached.\n\t * @returns {Object} result Split result.\n\t * @returns {module:engine/model/position~Position} result.position between split elements.\n\t * @returns {module:engine/model/range~Range} result.range Range that stars from the end of the first split element and ands\n\t * at the beginning of the first copy element.\n\t */\n\tsplit( position, limitElement ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tlet splitElement = position.parent;\n\n\t\tif ( !splitElement.parent ) {\n\t\t\t/**\n\t\t\t * Element with no parent can not be split.\n\t\t\t *\n\t\t\t * @error writer-split-element-no-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-split-element-no-parent: Element with no parent can not be split.' );\n\t\t}\n\n\t\t// When limit element is not defined lets set splitElement parent as limit.\n\t\tif ( !limitElement ) {\n\t\t\tlimitElement = splitElement.parent;\n\t\t}\n\n\t\tif ( !position.parent.getAncestors( { includeSelf: true } ).includes( limitElement ) ) {\n\t\t\tthrow new CKEditorError( 'writer-split-invalid-limit-element: Limit element is not a position ancestor.' );\n\t\t}\n\n\t\t// We need to cache elements that will be created as a result of the first split because\n\t\t// we need to create a range from the end of the first split element to the beginning of the\n\t\t// first copy element. This should be handled by LiveRange but it doesn't work on detached nodes.\n\t\tlet firstSplitElement, firstCopyElement;\n\n\t\tdo {\n\t\t\tconst version = splitElement.root.document ? splitElement.root.document.version : null;\n\t\t\tconst howMany = splitElement.maxOffset - position.offset;\n\t\t\tconst split = new SplitOperation( position, howMany, null, version );\n\n\t\t\tthis.batch.addOperation( split );\n\t\t\tthis.model.applyOperation( split );\n\n\t\t\t// Cache result of the first split.\n\t\t\tif ( !firstSplitElement && !firstCopyElement ) {\n\t\t\t\tfirstSplitElement = splitElement;\n\t\t\t\tfirstCopyElement = position.parent.nextSibling;\n\t\t\t}\n\n\t\t\tposition = this.createPositionAfter( position.parent );\n\t\t\tsplitElement = position.parent;\n\t\t} while ( splitElement !== limitElement );\n\n\t\treturn {\n\t\t\tposition,\n\t\t\trange: new Range( Position._createAt( firstSplitElement, 'end' ), Position._createAt( firstCopyElement, 0 ) )\n\t\t};\n\t}\n\n\t/**\n\t * Wraps the given range with the given element or with a new element (if a string was passed).\n\t *\n\t * **Note:** range to wrap should be a \"flat range\" (see {@link module:engine/model/range~Range#isFlat `Range#isFlat`}).\n\t * If not, an error will be thrown.\n\t *\n\t * @param {module:engine/model/range~Range} range Range to wrap.\n\t * @param {module:engine/model/element~Element|String} elementOrString Element or name of element to wrap the range with.\n\t */\n\twrap( range, elementOrString ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !range.isFlat ) {\n\t\t\t/**\n\t\t\t * Range to wrap is not flat.\n\t\t\t *\n\t\t\t * @error writer-wrap-range-not-flat\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-range-not-flat: Range to wrap is not flat.' );\n\t\t}\n\n\t\tconst element = elementOrString instanceof Element ? elementOrString : new Element( elementOrString );\n\n\t\tif ( element.childCount > 0 ) {\n\t\t\t/**\n\t\t\t * Element to wrap with is not empty.\n\t\t\t *\n\t\t\t * @error writer-wrap-element-not-empty\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-element-not-empty: Element to wrap with is not empty.' );\n\t\t}\n\n\t\tif ( element.parent !== null ) {\n\t\t\t/**\n\t\t\t * Element to wrap with is already attached to a tree model.\n\t\t\t *\n\t\t\t * @error writer-wrap-element-attached\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-wrap-element-attached: Element to wrap with is already attached to tree model.' );\n\t\t}\n\n\t\tconst version = range.root.document ? range.root.document.version : null;\n\n\t\t// Has to be `range.start` not `range.end` for better transformations.\n\t\tconst insert = new InsertOperation( range.start, element, version );\n\t\tthis.batch.addOperation( insert );\n\t\tthis.model.applyOperation( insert );\n\n\t\tconst move = new MoveOperation(\n\t\t\trange.start.getShiftedBy( 1 ),\n\t\t\trange.end.offset - range.start.offset,\n\t\t\tPosition._createAt( element, 0 ),\n\t\t\tversion === null ? null : version + 1\n\t\t);\n\n\t\tthis.batch.addOperation( move );\n\t\tthis.model.applyOperation( move );\n\t}\n\n\t/**\n\t * Unwraps children of the given element – all its children are moved before it and then the element is removed.\n\t * Throws error if you try to unwrap an element which does not have a parent.\n\t *\n\t * @param {module:engine/model/element~Element} element Element to unwrap.\n\t */\n\tunwrap( element ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( element.parent === null ) {\n\t\t\t/**\n\t\t\t * Trying to unwrap an element which has no parent.\n\t\t\t *\n\t\t\t * @error writer-unwrap-element-no-parent\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-unwrap-element-no-parent: Trying to unwrap an element which has no parent.' );\n\t\t}\n\n\t\tthis.move( Range._createIn( element ), this.createPositionAfter( element ) );\n\t\tthis.remove( element );\n\t}\n\n\t/**\n\t * Adds a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n\t * changes in the document and updates its range automatically, when model tree changes.\n\t *\n\t * As the first parameter you can set marker name.\n\t *\n\t * The required `options.usingOperation` parameter lets you decide if the marker should be managed by operations or not. See\n\t * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n\t * markers managed by operations and not-managed by operations.\n\t *\n\t * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n\t * `true` when the marker change changes the data returned by the\n\t * {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.\n\t * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n\t * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n\t *\n\t * Create marker directly base on marker's name:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: false } );\n\t *\n\t * Create marker using operation:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: true } );\n\t *\n\t * Create marker that affects the editor data:\n\t *\n\t *\t\taddMarker( markerName, { range, usingOperation: false, affectsData: true } );\n\t *\n\t * Note: For efficiency reasons, it's best to create and keep as little markers as possible.\n\t *\n\t * @see module:engine/model/markercollection~Marker\n\t * @param {String} name Name of a marker to create - must be unique.\n\t * @param {Object} options\n\t * @param {Boolean} options.usingOperation Flag indicating that the marker should be added by MarkerOperation.\n\t * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n\t * @param {module:engine/model/range~Range} options.range Marker range.\n\t * @param {Boolean} [options.affectsData=false] Flag indicating that the marker changes the editor data.\n\t * @returns {module:engine/model/markercollection~Marker} Marker that was set.\n\t */\n\taddMarker( name, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( !options || typeof options.usingOperation != 'boolean' ) {\n\t\t\t/**\n\t\t\t * The `options.usingOperations` parameter is required when adding a new marker.\n\t\t\t *\n\t\t\t * @error writer-addMarker-no-usingOperations\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-addMarker-no-usingOperations: The options.usingOperations parameter is required when adding a new marker.'\n\t\t\t);\n\t\t}\n\n\t\tconst usingOperation = options.usingOperation;\n\t\tconst range = options.range;\n\t\tconst affectsData = options.affectsData === undefined ? false : options.affectsData;\n\n\t\tif ( this.model.markers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Marker with provided name already exists.\n\t\t\t *\n\t\t\t * @error writer-addMarker-marker-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-addMarker-marker-exists: Marker with provided name already exists.' );\n\t\t}\n\n\t\tif ( !range ) {\n\t\t\t/**\n\t\t\t * Range parameter is required when adding a new marker.\n\t\t\t *\n\t\t\t * @error writer-addMarker-no-range\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-addMarker-no-range: Range parameter is required when adding a new marker.' );\n\t\t}\n\n\t\tif ( !usingOperation ) {\n\t\t\treturn this.model.markers._set( name, range, usingOperation, affectsData );\n\t\t}\n\n\t\tapplyMarkerOperation( this, name, null, range, affectsData );\n\n\t\treturn this.model.markers.get( name );\n\t}\n\n\t/**\n\t * Adds or updates a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n\t * changes in the document and updates its range automatically, when model tree changes. Still, it is possible to change the\n\t * marker's range directly using this method.\n\t *\n\t * As the first parameter you can set marker name or instance. If none of them is provided, new marker, with a unique\n\t * name is created and returned.\n\t *\n\t * The `options.usingOperation` parameter lets you change if the marker should be managed by operations or not. See\n\t * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n\t * markers managed by operations and not-managed by operations. It is possible to change this option for an existing marker.\n\t *\n\t * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n\t * `true` when the marker change changes the data returned by\n\t * the {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.\n\t * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n\t * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n\t *\n\t * Update marker directly base on marker's name:\n\t *\n\t *\t\tupdateMarker( markerName, { range } );\n\t *\n\t * Update marker using operation:\n\t *\n\t *\t\tupdateMarker( marker, { range, usingOperation: true } );\n\t *\t\tupdateMarker( markerName, { range, usingOperation: true } );\n\t *\n\t * Change marker's option (start using operations to manage it):\n\t *\n\t *\t\tupdateMarker( marker, { usingOperation: true } );\n\t *\n\t * Change marker's option (inform the engine, that the marker does not affect the data anymore):\n\t *\n\t *\t\tupdateMarker( markerName, { affectsData: false } );\n\t *\n\t * @see module:engine/model/markercollection~Marker\n\t * @param {String} markerOrName Name of a marker to update, or a marker instance.\n\t * @param {Object} options\n\t * @param {module:engine/model/range~Range} [options.range] Marker range to update.\n\t * @param {Boolean} [options.usingOperation] Flag indicated whether the marker should be added by MarkerOperation.\n\t * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n\t * @param {Boolean} [options.affectsData] Flag indicating that the marker changes the editor data.\n\t */\n\tupdateMarker( markerOrName, options = {} ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst markerName = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n\t\tconst currentMarker = this.model.markers.get( markerName );\n\n\t\tif ( !currentMarker ) {\n\t\t\t/**\n\t\t\t * Marker with provided name does not exists.\n\t\t\t *\n\t\t\t * @error writer-updateMarker-marker-not-exists\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-updateMarker-marker-not-exists: Marker with provided name does not exists.' );\n\t\t}\n\n\t\tconst hasUsingOperationDefined = typeof options.usingOperation == 'boolean';\n\t\tconst affectsDataDefined = typeof options.affectsData == 'boolean';\n\n\t\t// Use previously defined marker's affectsData if the property is not provided.\n\t\tconst affectsData = affectsDataDefined ? options.affectsData : currentMarker.affectsData;\n\n\t\tif ( !hasUsingOperationDefined && !options.range && !affectsDataDefined ) {\n\t\t\t/**\n\t\t\t * One of the options is required - provide range, usingOperations or affectsData.\n\t\t\t *\n\t\t\t * @error writer-updateMarker-wrong-options\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'writer-updateMarker-wrong-options: One of the options is required - provide range, usingOperations or affectsData.'\n\t\t\t);\n\t\t}\n\n\t\tconst currentRange = currentMarker.getRange();\n\t\tconst updatedRange = options.range ? options.range : currentRange;\n\n\t\tif ( hasUsingOperationDefined && options.usingOperation !== currentMarker.managedUsingOperations ) {\n\t\t\t// The marker type is changed so it's necessary to create proper operations.\n\t\t\tif ( options.usingOperation ) {\n\t\t\t\t// If marker changes to a managed one treat this as synchronizing existing marker.\n\t\t\t\t// Create `MarkerOperation` with `oldRange` set to `null`, so reverse operation will remove the marker.\n\t\t\t\tapplyMarkerOperation( this, markerName, null, updatedRange, affectsData );\n\t\t\t} else {\n\t\t\t\t// If marker changes to a marker that do not use operations then we need to create additional operation\n\t\t\t\t// that removes that marker first.\n\t\t\t\tapplyMarkerOperation( this, markerName, currentRange, null, affectsData );\n\n\t\t\t\t// Although not managed the marker itself should stay in model and its range should be preserver or changed to passed range.\n\t\t\t\tthis.model.markers._set( markerName, updatedRange, undefined, affectsData );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Marker's type doesn't change so update it accordingly.\n\t\tif ( currentMarker.managedUsingOperations ) {\n\t\t\tapplyMarkerOperation( this, markerName, currentRange, updatedRange, affectsData );\n\t\t} else {\n\t\t\tthis.model.markers._set( markerName, updatedRange, undefined, affectsData );\n\t\t}\n\t}\n\n\t/**\n\t * Removes given {@link module:engine/model/markercollection~Marker marker} or marker with given name.\n\t * The marker is removed accordingly to how it has been created, so if the marker was created using operation,\n\t * it will be destroyed using operation.\n\t *\n\t * @param {module:engine/model/markercollection~Marker|String} markerOrName Marker or marker name to remove.\n\t */\n\tremoveMarker( markerOrName ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tconst name = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n\n\t\tif ( !this.model.markers.has( name ) ) {\n\t\t\t/**\n\t\t\t * Trying to remove marker which does not exist.\n\t\t\t *\n\t\t\t * @error writer-removeMarker-no-marker\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'writer-removeMarker-no-marker: Trying to remove marker which does not exist.' );\n\t\t}\n\n\t\tconst marker = this.model.markers.get( name );\n\n\t\tif ( !marker.managedUsingOperations ) {\n\t\t\tthis.model.markers._remove( name );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldRange = marker.getRange();\n\n\t\tapplyMarkerOperation( this, name, oldRange, null, marker.affectsData );\n\t}\n\n\t/**\n\t * Sets the document's selection (ranges and direction) to the specified location based on:\n\t *\n\t * * the given {@link module:engine/model/selection~Selection selection},\n\t * * or the given {@link module:engine/model/position~Position position},\n\t * * or the given {@link module:engine/model/range~Range range},\n\t * * or the given iterable of {@link module:engine/model/range~Range ranges},\n\t * * or the given {@link module:engine/model/node~Node node},\n\t * * or `null`.\n\t *\n\t *\t\t// Sets selection to the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to given ranges.\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\twriter.setSelection( range );\n\t *\n\t *\t\t// Sets selection to other selection.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\twriter.setSelection( otherSelection );\n\t *\n\t *\t\t// Sets selection to the given document selection.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\twriter.setSelection( documentSelection );\n\t *\n\t *\t\t// Sets collapsed selection at the given position.\n\t *\t\tconst position = writer.createPosition( root, path );\n\t *\t\twriter.setSelection( position );\n\t *\n\t *\t\t// Sets collapsed selection at the position of the given node and an offset.\n\t *\t\twriter.setSelection( paragraph, offset );\n\t *\n\t * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n \t * that element and ends after the last child of that element.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'in' );\n\t *\n\t * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n\t *\n\t *\t\twriter.setSelection( paragraph, 'on' );\n\t *\n\t *\t\t// Removes all selection's ranges.\n\t *\t\twriter.setSelection( null );\n\t *\n\t * `Writer#setSelection()` allow passing additional options (`backward`) as the last argument.\n\t *\n\t *\t\t// Sets selection as backward.\n\t *\t\twriter.setSelection( range, { backward: true } );\n\t *\n\t * Throws `writer-incorrect-use` error when the writer is used outside the `change()` block.\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/position~Position|module:engine/model/node~Node|\n\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t */\n\tsetSelection( selectable, placeOrOffset, options ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tthis.model.document.selection._setTo( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n\t *\n\t * The location can be specified in the same form as\n\t * {@link #createPositionAt `writer.createPositionAt()`} parameters.\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tsetSelectionFocus( itemOrPosition, offset ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tthis.model.document.selection._setFocus( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Sets attribute(s) on the selection. If attribute with the same key already is set, it's value is overwritten.\n\t *\n\t * Using key and value pair:\n\t *\n\t * \twriter.setSelectionAttribute( 'italic', true );\n\t *\n\t * Using key-value object:\n\t *\n\t * \twriter.setSelectionAttribute( { italic: true, bold: false } );\n\t *\n\t * Using iterable object:\n\t *\n\t * \twriter.setSelectionAttribute( new Map( [ [ 'italic', true ] ] ) );\n\t *\n\t * @param {String|Object|Iterable.<*>} keyOrObjectOrIterable Key of the attribute to set\n\t * or object / iterable of key => value attribute pairs.\n\t * @param {*} [value] Attribute value.\n\t */\n\tsetSelectionAttribute( keyOrObjectOrIterable, value ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( typeof keyOrObjectOrIterable === 'string' ) {\n\t\t\tthis._setSelectionAttribute( keyOrObjectOrIterable, value );\n\t\t} else {\n\t\t\tfor ( const [ key, value ] of toMap( keyOrObjectOrIterable ) ) {\n\t\t\t\tthis._setSelectionAttribute( key, value );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes attribute(s) with given key(s) from the selection.\n\t *\n\t * Remove one attribute:\n\t *\n\t *\t\twriter.removeSelectionAttribute( 'italic' );\n\t *\n\t * Remove multiple attributes:\n\t *\n\t *\t\twriter.removeSelectionAttribute( [ 'italic', 'bold' ] );\n\t *\n\t * @param {String|Iterable.<String>} keyOrIterableOfKeys Key of the attribute to remove or an iterable of attribute keys to remove.\n\t */\n\tremoveSelectionAttribute( keyOrIterableOfKeys ) {\n\t\tthis._assertWriterUsedCorrectly();\n\n\t\tif ( typeof keyOrIterableOfKeys === 'string' ) {\n\t\t\tthis._removeSelectionAttribute( keyOrIterableOfKeys );\n\t\t} else {\n\t\t\tfor ( const key of keyOrIterableOfKeys ) {\n\t\t\t\tthis._removeSelectionAttribute( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Temporarily changes the {@link module:engine/model/documentselection~DocumentSelection#isGravityOverridden gravity}\n\t * of the selection from left to right.\n\t *\n\t * The gravity defines from which direction the selection inherits its attributes. If it's the default left gravity,\n\t * then the selection (after being moved by the user) inherits attributes from its left-hand side.\n\t * This method allows to temporarily override this behavior by forcing the gravity to the right.\n\t *\n\t * For the following model fragment:\n\t *\n\t *\t\t<$text bold=\"true\" linkHref=\"url\">bar[]</$text><$text bold=\"true\">biz</$text>\n\t *\n\t * * Default gravity: selection will have the `bold` and `linkHref` attributes.\n\t * * Overridden gravity: selection will have `bold` attribute.\n\t *\n\t * **Note**: It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n\t * of the process.\n\t *\n\t * @returns {String} The unique id which allows restoring the gravity.\n\t */\n\toverrideSelectionGravity() {\n\t\treturn this.model.document.selection._overrideGravity();\n\t}\n\n\t/**\n\t * Restores {@link ~Writer#overrideSelectionGravity} gravity to default.\n\t *\n\t * Restoring the gravity is only possible using the unique identifier returned by\n\t * {@link ~Writer#overrideSelectionGravity}. Note that the gravity remains overridden as long as won't be restored\n\t * the same number of times it was overridden.\n\t *\n\t * @param {String} uid The unique id returned by {@link ~Writer#overrideSelectionGravity}.\n\t */\n\trestoreSelectionGravity( uid ) {\n\t\tthis.model.document.selection._restoreGravity( uid );\n\t}\n\n\t/**\n\t * @private\n\t * @param {String} key Key of the attribute to remove.\n\t * @param {*} value Attribute value.\n\t */\n\t_setSelectionAttribute( key, value ) {\n\t\tconst selection = this.model.document.selection;\n\n\t\t// Store attribute in parent element if the selection is collapsed in an empty node.\n\t\tif ( selection.isCollapsed && selection.anchor.parent.isEmpty ) {\n\t\t\tconst storeKey = DocumentSelection._getStoreAttributeKey( key );\n\n\t\t\tthis.setAttribute( storeKey, value, selection.anchor.parent );\n\t\t}\n\n\t\tselection._setAttribute( key, value );\n\t}\n\n\t/**\n\t * @private\n\t * @param {String} key Key of the attribute to remove.\n\t */\n\t_removeSelectionAttribute( key ) {\n\t\tconst selection = this.model.document.selection;\n\n\t\t// Remove stored attribute from parent element if the selection is collapsed in an empty node.\n\t\tif ( selection.isCollapsed && selection.anchor.parent.isEmpty ) {\n\t\t\tconst storeKey = DocumentSelection._getStoreAttributeKey( key );\n\n\t\t\tthis.removeAttribute( storeKey, selection.anchor.parent );\n\t\t}\n\n\t\tselection._removeAttribute( key );\n\t}\n\n\t/**\n\t * Throws `writer-detached-writer-tries-to-modify-model` error when the writer is used outside of the `change()` block.\n\t *\n\t * @private\n\t */\n\t_assertWriterUsedCorrectly() {\n\t\t/**\n\t\t * Trying to use a writer outside a {@link module:engine/model/model~Model#change `change()` or\n\t\t * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`} blocks.\n\t\t *\n\t\t * The writer can only be used inside these blocks which ensures that the model\n\t\t * can only be changed during such \"sessions\".\n\t\t *\n\t\t * @error writer-incorrect-use\n\t\t */\n\t\tif ( this.model._currentWriter !== this ) {\n\t\t\tthrow new CKEditorError( 'writer-incorrect-use: Trying to use a writer outside the change() block.' );\n\t\t}\n\t}\n}\n\n// Sets given attribute to each node in given range. When attribute value is null then attribute will be removed.\n//\n// Because attribute operation needs to have the same attribute value on the whole range, this function splits\n// the range into smaller parts.\n//\n// Given `range` must be flat.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} key Attribute key.\n// @param {*} value Attribute new value.\n// @param {module:engine/model/range~Range} range Model range on which the attribute will be set.\nfunction setAttributeOnRange( writer, key, value, range ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\n\t// Position of the last split, the beginning of the new range.\n\tlet lastSplitPosition = range.start;\n\n\t// Currently position in the scanning range. Because we need value after the position, it is not a current\n\t// position of the iterator but the previous one (we need to iterate one more time to get the value after).\n\tlet position;\n\n\t// Value before the currently position.\n\tlet valueBefore;\n\n\t// Value after the currently position.\n\tlet valueAfter;\n\n\tfor ( const val of range.getWalker( { shallow: true } ) ) {\n\t\tvalueAfter = val.item.getAttribute( key );\n\n\t\t// At the first run of the iterator the position in undefined. We also do not have a valueBefore, but\n\t\t// because valueAfter may be null, valueBefore may be equal valueAfter ( undefined == null ).\n\t\tif ( position && valueBefore != valueAfter ) {\n\t\t\t// if valueBefore == value there is nothing to change, so we add operation only if these values are different.\n\t\t\tif ( valueBefore != value ) {\n\t\t\t\taddOperation();\n\t\t\t}\n\n\t\t\tlastSplitPosition = position;\n\t\t}\n\n\t\tposition = val.nextPosition;\n\t\tvalueBefore = valueAfter;\n\t}\n\n\t// Because position in the loop is not the iterator position (see let position comment), the last position in\n\t// the while loop will be last but one position in the range. We need to check the last position manually.\n\tif ( position instanceof Position && position != lastSplitPosition && valueBefore != value ) {\n\t\taddOperation();\n\t}\n\n\tfunction addOperation() {\n\t\tconst range = new Range( lastSplitPosition, position );\n\t\tconst version = range.root.document ? doc.version : null;\n\t\tconst operation = new AttributeOperation( range, key, valueBefore, value, version );\n\n\t\twriter.batch.addOperation( operation );\n\t\tmodel.applyOperation( operation );\n\t}\n}\n\n// Sets given attribute to the given node. When attribute value is null then attribute will be removed.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} key Attribute key.\n// @param {*} value Attribute new value.\n// @param {module:engine/model/item~Item} item Model item on which the attribute will be set.\nfunction setAttributeOnItem( writer, key, value, item ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\tconst previousValue = item.getAttribute( key );\n\tlet range, operation;\n\n\tif ( previousValue != value ) {\n\t\tconst isRootChanged = item.root === item;\n\n\t\tif ( isRootChanged ) {\n\t\t\t// If we change attributes of root element, we have to use `RootAttributeOperation`.\n\t\t\tconst version = item.document ? doc.version : null;\n\n\t\t\toperation = new RootAttributeOperation( item, key, previousValue, value, version );\n\t\t} else {\n\t\t\trange = new Range( Position._createBefore( item ), writer.createPositionAfter( item ) );\n\n\t\t\tconst version = range.root.document ? doc.version : null;\n\n\t\t\toperation = new AttributeOperation( range, key, previousValue, value, version );\n\t\t}\n\n\t\twriter.batch.addOperation( operation );\n\t\tmodel.applyOperation( operation );\n\t}\n}\n\n// Creates and applies marker operation to {@link module:engine/model/operation/operation~Operation operation}.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} name Marker name.\n// @param {module:engine/model/range~Range} oldRange Marker range before the change.\n// @param {module:engine/model/range~Range} newRange Marker range after the change.\n// @param {Boolean} affectsData\nfunction applyMarkerOperation( writer, name, oldRange, newRange, affectsData ) {\n\tconst model = writer.model;\n\tconst doc = model.document;\n\n\tconst operation = new MarkerOperation( name, oldRange, newRange, model.markers, affectsData, doc.version );\n\n\twriter.batch.addOperation( operation );\n\tmodel.applyOperation( operation );\n}\n\n// Creates `MoveOperation` or `DetachOperation` that removes `howMany` nodes starting from `position`.\n// The operation will be applied on given model instance and added to given operation instance.\n//\n// @private\n// @param {module:engine/model/position~Position} position Position from which nodes are removed.\n// @param {Number} howMany Number of nodes to remove.\n// @param {Batch} batch Batch to which the operation will be added.\n// @param {module:engine/model/model~Model} model Model instance on which operation will be applied.\nfunction applyRemoveOperation( position, howMany, batch, model ) {\n\tlet operation;\n\n\tif ( position.root.document ) {\n\t\tconst doc = model.document;\n\t\tconst graveyardPosition = new Position( doc.graveyard, [ 0 ] );\n\n\t\toperation = new MoveOperation( position, howMany, graveyardPosition, doc.version );\n\t} else {\n\t\toperation = new DetachOperation( position, howMany );\n\t}\n\n\tbatch.addOperation( operation );\n\tmodel.applyOperation( operation );\n}\n\n// Returns `true` if both root elements are the same element or both are documents root elements.\n//\n// Elements in the same tree can be moved (for instance you can move element form one documents root to another, or\n// within the same document fragment), but when element supposed to be moved from document fragment to the document, or\n// to another document it should be removed and inserted to avoid problems with OT. This is because features like undo or\n// collaboration may track changes on the document but ignore changes on detached fragments and should not get\n// unexpected `move` operation.\nfunction isSameTree( rootA, rootB ) {\n\t// If it is the same root this is the same tree.\n\tif ( rootA === rootB ) {\n\t\treturn true;\n\t}\n\n\t// If both roots are documents root it is operation within the document what we still treat as the same tree.\n\tif ( rootA instanceof RootElement && rootB instanceof RootElement ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/differ\n */\n\nimport Position from './position';\nimport Range from './range';\n\n/**\n * Calculates the difference between two model states.\n *\n * Receives operations that are to be applied on the model document. Marks parts of the model document tree which\n * are changed and saves the state of these elements before the change. Then, it compares saved elements with the\n * changed elements, after all changes are applied on the model document. Calculates the diff between saved\n * elements and new ones and returns a change set.\n */\nexport default class Differ {\n\t/**\n\t * Creates a `Differ` instance.\n\t *\n\t * @param {module:engine/model/markercollection~MarkerCollection} markerCollection Model's marker collection.\n\t */\n\tconstructor( markerCollection ) {\n\t\t/**\n\t\t * Reference to the model's marker collection.\n\t\t *\n\t\t * @private\n\t\t * @type {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis._markerCollection = markerCollection;\n\n\t\t/**\n\t\t * A map that stores changes that happened in a given element.\n\t\t *\n\t\t * The keys of the map are references to the model elements.\n\t\t * The values of the map are arrays with changes that were done on this element.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._changesInElement = new Map();\n\n\t\t/**\n\t\t * A map that stores \"element's children snapshots\". A snapshot is representing children of a given element before\n\t\t * the first change was applied on that element. Snapshot items are objects with two properties: `name`,\n\t\t * containing the element name (or `'$text'` for a text node) and `attributes` which is a map of the node's attributes.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._elementSnapshots = new Map();\n\n\t\t/**\n\t\t * A map that stores all changed markers.\n\t\t *\n\t\t * The keys of the map are marker names.\n\t\t * The values of the map are objects with the `oldRange` and `newRange` properties. They store the marker range\n\t\t * state before and after the change.\n\t\t *\n\t\t * @private\n\t\t * @type {Map}\n\t\t */\n\t\tthis._changedMarkers = new Map();\n\n\t\t/**\n\t\t * Stores the number of changes that were processed. Used to order the changes chronologically. It is important\n\t\t * when changes are sorted.\n\t\t *\n\t\t * @private\n\t\t * @type {Number}\n\t\t */\n\t\tthis._changeCount = 0;\n\n\t\t/**\n\t\t * For efficiency purposes, `Differ` stores the change set returned by the differ after {@link #getChanges} call.\n\t\t * Cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n\t\t * return the cached value instead of calculating it again.\n\t\t *\n\t\t * This property stores those changes that did not take place in graveyard root.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Object>|null}\n\t\t */\n\t\tthis._cachedChanges = null;\n\n\t\t/**\n\t\t * For efficiency purposes, `Differ` stores the change set returned by the differ after the {@link #getChanges} call.\n\t\t * The cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n\t\t * return the cached value instead of calculating it again.\n\t\t *\n\t\t * This property stores all changes evaluated by `Differ`, including those that took place in the graveyard.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Object>|null}\n\t\t */\n\t\tthis._cachedChangesWithGraveyard = null;\n\t}\n\n\t/**\n\t * Informs whether there are any changes buffered in `Differ`.\n\t *\n\t * @readonly\n\t * @type {Boolean}\n\t */\n\tget isEmpty() {\n\t\treturn this._changesInElement.size == 0 && this._changedMarkers.size == 0;\n\t}\n\n\t/**\n\t * Buffers the given operation. An operation has to be buffered before it is executed.\n\t *\n\t * Operation type is checked and it is checked which nodes it will affect. These nodes are then stored in `Differ`\n\t * in the state before the operation is executed.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation An operation to buffer.\n\t */\n\tbufferOperation( operation ) {\n\t\t// Below we take an operation, check its type, then use its parameters in marking (private) methods.\n\t\t// The general rule is to not mark elements inside inserted element. All inserted elements are re-rendered.\n\t\t// Marking changes in them would cause a \"double\" changing then.\n\t\t//\n\t\tswitch ( operation.type ) {\n\t\t\tcase 'insert': {\n\t\t\t\tif ( this._isInInsertedElement( operation.position.parent ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._markInsert( operation.position.parent, operation.position.offset, operation.nodes.maxOffset );\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'addAttribute':\n\t\t\tcase 'removeAttribute':\n\t\t\tcase 'changeAttribute': {\n\t\t\t\tfor ( const item of operation.range.getItems() ) {\n\t\t\t\t\tif ( this._isInInsertedElement( item.parent ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._markAttribute( item );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'remove':\n\t\t\tcase 'move':\n\t\t\tcase 'reinsert': {\n\t\t\t\tconst sourceParentInserted = this._isInInsertedElement( operation.sourcePosition.parent );\n\t\t\t\tconst targetParentInserted = this._isInInsertedElement( operation.targetPosition.parent );\n\n\t\t\t\tif ( !sourceParentInserted ) {\n\t\t\t\t\tthis._markRemove( operation.sourcePosition.parent, operation.sourcePosition.offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\tif ( !targetParentInserted ) {\n\t\t\t\t\tthis._markInsert( operation.targetPosition.parent, operation.getMovedRangeStart().offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'rename': {\n\t\t\t\tif ( this._isInInsertedElement( operation.position.parent ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._markRemove( operation.position.parent, operation.position.offset, 1 );\n\t\t\t\tthis._markInsert( operation.position.parent, operation.position.offset, 1 );\n\n\t\t\t\tconst range = Range._createFromPositionAndShift( operation.position, 1 );\n\n\t\t\t\tfor ( const marker of this._markerCollection.getMarkersIntersectingRange( range ) ) {\n\t\t\t\t\tconst markerRange = marker.getRange();\n\n\t\t\t\t\tthis.bufferMarkerChange( marker.name, markerRange, markerRange, marker.affectsData );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'split': {\n\t\t\t\tconst splitElement = operation.splitPosition.parent;\n\n\t\t\t\t// Mark that children of the split element were removed.\n\t\t\t\tif ( !this._isInInsertedElement( splitElement ) ) {\n\t\t\t\t\tthis._markRemove( splitElement, operation.splitPosition.offset, operation.howMany );\n\t\t\t\t}\n\n\t\t\t\t// Mark that the new element (split copy) was inserted.\n\t\t\t\tif ( !this._isInInsertedElement( operation.insertionPosition.parent ) ) {\n\t\t\t\t\tthis._markInsert( operation.insertionPosition.parent, operation.insertionPosition.offset, 1 );\n\t\t\t\t}\n\n\t\t\t\t// If the split took the element from the graveyard, mark that the element from the graveyard was removed.\n\t\t\t\tif ( operation.graveyardPosition ) {\n\t\t\t\t\tthis._markRemove( operation.graveyardPosition.parent, operation.graveyardPosition.offset, 1 );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'merge': {\n\t\t\t\t// Mark that the merged element was removed.\n\t\t\t\tconst mergedElement = operation.sourcePosition.parent;\n\n\t\t\t\tif ( !this._isInInsertedElement( mergedElement.parent ) ) {\n\t\t\t\t\tthis._markRemove( mergedElement.parent, mergedElement.startOffset, 1 );\n\t\t\t\t}\n\n\t\t\t\t// Mark that the merged element was inserted into graveyard.\n\t\t\t\tconst graveyardParent = operation.graveyardPosition.parent;\n\n\t\t\t\tthis._markInsert( graveyardParent, operation.graveyardPosition.offset, 1 );\n\n\t\t\t\t// Mark that children of merged element were inserted at new parent.\n\t\t\t\tconst mergedIntoElement = operation.targetPosition.parent;\n\n\t\t\t\tif ( !this._isInInsertedElement( mergedIntoElement ) ) {\n\t\t\t\t\tthis._markInsert( mergedIntoElement, operation.targetPosition.offset, mergedElement.maxOffset );\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Clear cache after each buffered operation as it is no longer valid.\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Buffers a marker change.\n\t *\n\t * @param {String} markerName The name of the marker that changed.\n\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the change or `null` if the marker has just\n\t * been created.\n\t * @param {module:engine/model/range~Range|null} newRange Marker range after the change or `null` if the marker was removed.\n\t * @param {Boolean} affectsData Flag indicating whether marker affects the editor data.\n\t */\n\tbufferMarkerChange( markerName, oldRange, newRange, affectsData ) {\n\t\tconst buffered = this._changedMarkers.get( markerName );\n\n\t\tif ( !buffered ) {\n\t\t\tthis._changedMarkers.set( markerName, {\n\t\t\t\toldRange,\n\t\t\t\tnewRange,\n\t\t\t\taffectsData\n\t\t\t} );\n\t\t} else {\n\t\t\tbuffered.newRange = newRange;\n\t\t\tbuffered.affectsData = affectsData;\n\n\t\t\tif ( buffered.oldRange == null && buffered.newRange == null ) {\n\t\t\t\t// The marker is going to be removed (`newRange == null`) but it did not exist before the first buffered change\n\t\t\t\t// (`buffered.oldRange == null`). In this case, do not keep the marker in buffer at all.\n\t\t\t\tthis._changedMarkers.delete( markerName );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns all markers that should be removed as a result of buffered changes.\n\t *\n\t * @returns {Array.<Object>} Markers to remove. Each array item is an object containing the `name` and `range` properties.\n\t */\n\tgetMarkersToRemove() {\n\t\tconst result = [];\n\n\t\tfor ( const [ name, change ] of this._changedMarkers ) {\n\t\t\tif ( change.oldRange != null ) {\n\t\t\t\tresult.push( { name, range: change.oldRange } );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns all markers which should be added as a result of buffered changes.\n\t *\n\t * @returns {Array.<Object>} Markers to add. Each array item is an object containing the `name` and `range` properties.\n\t */\n\tgetMarkersToAdd() {\n\t\tconst result = [];\n\n\t\tfor ( const [ name, change ] of this._changedMarkers ) {\n\t\t\tif ( change.newRange != null ) {\n\t\t\t\tresult.push( { name, range: change.newRange } );\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Checks whether some of the buffered changes affect the editor data.\n\t *\n\t * Types of changes which affect the editor data:\n\t *\n\t * * model structure changes,\n\t * * attribute changes,\n\t * * changes of markers which were defined as `affectingData`.\n\t *\n\t * @returns {Boolean}\n\t */\n\thasDataChanges() {\n\t\tfor ( const [ , change ] of this._changedMarkers ) {\n\t\t\tif ( change.affectsData ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// If markers do not affect the data, check whether there are some changes in elements.\n\t\treturn this._changesInElement.size > 0;\n\t}\n\n\t/**\n\t * Calculates the diff between the old model tree state (the state before the first buffered operations since the last {@link #reset}\n\t * call) and the new model tree state (actual one). It should be called after all buffered operations are executed.\n\t *\n\t * The diff set is returned as an array of diff items, each describing a change done on the model. The items are sorted by\n\t * the position on which the change happened. If a position {@link module:engine/model/position~Position#isBefore is before}\n\t * another one, it will be on an earlier index in the diff set.\n\t *\n\t * Because calculating the diff is a costly operation, the result is cached. If no new operation was buffered since the\n\t * previous {@link #getChanges} call, the next call will return the cached value.\n\t *\n\t * @param {Object} options Additional options.\n\t * @param {Boolean} [options.includeChangesInGraveyard=false] If set to `true`, also changes that happened\n\t * in the graveyard root will be returned. By default, changes in the graveyard root are not returned.\n\t * @returns {Array.<Object>} Diff between the old and the new model tree state.\n\t */\n\tgetChanges( options = { includeChangesInGraveyard: false } ) {\n\t\t// If there are cached changes, just return them instead of calculating changes again.\n\t\tif ( this._cachedChanges ) {\n\t\t\tif ( options.includeChangesInGraveyard ) {\n\t\t\t\treturn this._cachedChangesWithGraveyard.slice();\n\t\t\t} else {\n\t\t\t\treturn this._cachedChanges.slice();\n\t\t\t}\n\t\t}\n\n\t\t// Will contain returned results.\n\t\tconst diffSet = [];\n\n\t\t// Check all changed elements.\n\t\tfor ( const element of this._changesInElement.keys() ) {\n\t\t\t// Get changes for this element and sort them.\n\t\t\tconst changes = this._changesInElement.get( element ).sort( ( a, b ) => {\n\t\t\t\tif ( a.offset === b.offset ) {\n\t\t\t\t\tif ( a.type != b.type ) {\n\t\t\t\t\t\t// If there are multiple changes at the same position, \"remove\" change should be first.\n\t\t\t\t\t\t// If the order is different, for example, we would first add some nodes and then removed them\n\t\t\t\t\t\t// (instead of the nodes that we should remove).\n\t\t\t\t\t\treturn a.type == 'remove' ? -1 : 1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn a.offset < b.offset ? -1 : 1;\n\t\t\t} );\n\n\t\t\t// Get children of this element before any change was applied on it.\n\t\t\tconst snapshotChildren = this._elementSnapshots.get( element );\n\t\t\t// Get snapshot of current element's children.\n\t\t\tconst elementChildren = _getChildrenSnapshot( element.getChildren() );\n\n\t\t\t// Generate actions basing on changes done on element.\n\t\t\tconst actions = _generateActionsFromChanges( snapshotChildren.length, changes );\n\n\t\t\tlet i = 0; // Iterator in `elementChildren` array -- iterates through current children of element.\n\t\t\tlet j = 0; // Iterator in `snapshotChildren` array -- iterates through old children of element.\n\n\t\t\t// Process every action.\n\t\t\tfor ( const action of actions ) {\n\t\t\t\tif ( action === 'i' ) {\n\t\t\t\t\t// Generate diff item for this element and insert it into the diff set.\n\t\t\t\t\tdiffSet.push( this._getInsertDiff( element, i, elementChildren[ i ].name ) );\n\n\t\t\t\t\ti++;\n\t\t\t\t} else if ( action === 'r' ) {\n\t\t\t\t\t// Generate diff item for this element and insert it into the diff set.\n\t\t\t\t\tdiffSet.push( this._getRemoveDiff( element, i, snapshotChildren[ j ].name ) );\n\n\t\t\t\t\tj++;\n\t\t\t\t} else if ( action === 'a' ) {\n\t\t\t\t\t// Take attributes from saved and current children.\n\t\t\t\t\tconst elementAttributes = elementChildren[ i ].attributes;\n\t\t\t\t\tconst snapshotAttributes = snapshotChildren[ j ].attributes;\n\t\t\t\t\tlet range;\n\n\t\t\t\t\tif ( elementChildren[ i ].name == '$text' ) {\n\t\t\t\t\t\trange = new Range( Position._createAt( element, i ), Position._createAt( element, i + 1 ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst index = element.offsetToIndex( i );\n\t\t\t\t\t\trange = new Range( Position._createAt( element, i ), Position._createAt( element.getChild( index ), 0 ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Generate diff items for this change (there might be multiple attributes changed and\n\t\t\t\t\t// there is a single diff for each of them) and insert them into the diff set.\n\t\t\t\t\tdiffSet.push( ...this._getAttributesDiff( range, snapshotAttributes, elementAttributes ) );\n\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t} else {\n\t\t\t\t\t// `action` is 'equal'. Child not changed.\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Then, sort the changes by the position (change at position before other changes is first).\n\t\tdiffSet.sort( ( a, b ) => {\n\t\t\t// If the change is in different root, we don't care much, but we'd like to have all changes in given\n\t\t\t// root \"together\" in the array. So let's just sort them by the root name. It does not matter which root\n\t\t\t// will be processed first.\n\t\t\tif ( a.position.root != b.position.root ) {\n\t\t\t\treturn a.position.root.rootName < b.position.root.rootName ? -1 : 1;\n\t\t\t}\n\n\t\t\t// If change happens at the same position...\n\t\t\tif ( a.position.isEqual( b.position ) ) {\n\t\t\t\t// Keep chronological order of operations.\n\t\t\t\treturn a.changeCount - b.changeCount;\n\t\t\t}\n\n\t\t\t// If positions differ, position \"on the left\" should be earlier in the result.\n\t\t\treturn a.position.isBefore( b.position ) ? -1 : 1;\n\t\t} );\n\n\t\t// Glue together multiple changes (mostly on text nodes).\n\t\tfor ( let i = 1; i < diffSet.length; i++ ) {\n\t\t\tconst prevDiff = diffSet[ i - 1 ];\n\t\t\tconst thisDiff = diffSet[ i ];\n\n\t\t\t// Glue remove changes if they happen on text on same position.\n\t\t\tconst isConsecutiveTextRemove =\n\t\t\t\tprevDiff.type == 'remove' && thisDiff.type == 'remove' &&\n\t\t\t\tprevDiff.name == '$text' && thisDiff.name == '$text' &&\n\t\t\t\tprevDiff.position.isEqual( thisDiff.position );\n\n\t\t\t// Glue insert changes if they happen on text on consecutive fragments.\n\t\t\tconst isConsecutiveTextAdd =\n\t\t\t\tprevDiff.type == 'insert' && thisDiff.type == 'insert' &&\n\t\t\t\tprevDiff.name == '$text' && thisDiff.name == '$text' &&\n\t\t\t\tprevDiff.position.parent == thisDiff.position.parent &&\n\t\t\t\tprevDiff.position.offset + prevDiff.length == thisDiff.position.offset;\n\n\t\t\t// Glue attribute changes if they happen on consecutive fragments and have same key, old value and new value.\n\t\t\tconst isConsecutiveAttributeChange =\n\t\t\t\tprevDiff.type == 'attribute' && thisDiff.type == 'attribute' &&\n\t\t\t\tprevDiff.position.parent == thisDiff.position.parent &&\n\t\t\t\tprevDiff.range.isFlat && thisDiff.range.isFlat &&\n\t\t\t\tprevDiff.position.offset + prevDiff.length == thisDiff.position.offset &&\n\t\t\t\tprevDiff.attributeKey == thisDiff.attributeKey &&\n\t\t\t\tprevDiff.attributeOldValue == thisDiff.attributeOldValue &&\n\t\t\t\tprevDiff.attributeNewValue == thisDiff.attributeNewValue;\n\n\t\t\tif ( isConsecutiveTextRemove || isConsecutiveTextAdd || isConsecutiveAttributeChange ) {\n\t\t\t\tdiffSet[ i - 1 ].length++;\n\n\t\t\t\tif ( isConsecutiveAttributeChange ) {\n\t\t\t\t\tdiffSet[ i - 1 ].range.end = diffSet[ i - 1 ].range.end.getShiftedBy( 1 );\n\t\t\t\t}\n\n\t\t\t\tdiffSet.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\n\t\t// Remove `changeCount` property from diff items. It is used only for sorting and is internal thing.\n\t\tfor ( const item of diffSet ) {\n\t\t\tdelete item.changeCount;\n\n\t\t\tif ( item.type == 'attribute' ) {\n\t\t\t\tdelete item.position;\n\t\t\t\tdelete item.length;\n\t\t\t}\n\t\t}\n\n\t\tthis._changeCount = 0;\n\n\t\t// Cache changes.\n\t\tthis._cachedChangesWithGraveyard = diffSet.slice();\n\t\tthis._cachedChanges = diffSet.slice().filter( _changesInGraveyardFilter );\n\n\t\tif ( options.includeChangesInGraveyard ) {\n\t\t\treturn this._cachedChangesWithGraveyard;\n\t\t} else {\n\t\t\treturn this._cachedChanges;\n\t\t}\n\t}\n\n\t/**\n\t * Resets `Differ`. Removes all buffered changes.\n\t */\n\treset() {\n\t\tthis._changesInElement.clear();\n\t\tthis._elementSnapshots.clear();\n\t\tthis._changedMarkers.clear();\n\t\tthis._cachedChanges = null;\n\t}\n\n\t/**\n\t * Saves and handles an insert change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_markInsert( parent, offset, howMany ) {\n\t\tconst changeItem = { type: 'insert', offset, howMany, count: this._changeCount++ };\n\n\t\tthis._markChange( parent, changeItem );\n\t}\n\n\t/**\n\t * Saves and handles a remove change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_markRemove( parent, offset, howMany ) {\n\t\tconst changeItem = { type: 'remove', offset, howMany, count: this._changeCount++ };\n\n\t\tthis._markChange( parent, changeItem );\n\n\t\tthis._removeAllNestedChanges( parent, offset, howMany );\n\t}\n\n\t/**\n\t * Saves and handles an attribute change.\n\t *\n\t * @private\n\t * @param {module:engine/model/item~Item} item\n\t */\n\t_markAttribute( item ) {\n\t\tconst changeItem = { type: 'attribute', offset: item.startOffset, howMany: item.offsetSize, count: this._changeCount++ };\n\n\t\tthis._markChange( item.parent, changeItem );\n\t}\n\n\t/**\n\t * Saves and handles a model change.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Object} changeItem\n\t */\n\t_markChange( parent, changeItem ) {\n\t\t// First, make a snapshot of this parent's children (it will be made only if it was not made before).\n\t\tthis._makeSnapshot( parent );\n\n\t\t// Then, get all changes that already were done on the element (empty array if this is the first change).\n\t\tconst changes = this._getChangesForElement( parent );\n\n\t\t// Then, look through all the changes, and transform them or the new change.\n\t\tthis._handleChange( changeItem, changes );\n\n\t\t// Add the new change.\n\t\tchanges.push( changeItem );\n\n\t\t// Remove incorrect changes. During transformation some change might be, for example, included in another.\n\t\t// In that case, the change will have `howMany` property set to `0` or less. We need to remove those changes.\n\t\tfor ( let i = 0; i < changes.length; i++ ) {\n\t\t\tif ( changes[ i ].howMany < 1 ) {\n\t\t\t\tchanges.splice( i, 1 );\n\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets an array of changes that have already been saved for a given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t * @returns {Array.<Object>}\n\t */\n\t_getChangesForElement( element ) {\n\t\tlet changes;\n\n\t\tif ( this._changesInElement.has( element ) ) {\n\t\t\tchanges = this._changesInElement.get( element );\n\t\t} else {\n\t\t\tchanges = [];\n\n\t\t\tthis._changesInElement.set( element, changes );\n\t\t}\n\n\t\treturn changes;\n\t}\n\n\t/**\n\t * Saves a children snapshot for a given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t */\n\t_makeSnapshot( element ) {\n\t\tif ( !this._elementSnapshots.has( element ) ) {\n\t\t\tthis._elementSnapshots.set( element, _getChildrenSnapshot( element.getChildren() ) );\n\t\t}\n\t}\n\n\t/**\n\t * For a given newly saved change, compares it with a change already done on the element and modifies the incoming\n\t * change and/or the old change.\n\t *\n\t * @private\n\t * @param {Object} inc Incoming (new) change.\n\t * @param {Array.<Object>} changes An array containing all the changes done on that element.\n\t */\n\t_handleChange( inc, changes ) {\n\t\t// We need a helper variable that will store how many nodes are to be still handled for this change item.\n\t\t// `nodesToHandle` (how many nodes still need to be handled) and `howMany` (how many nodes were affected)\n\t\t// needs to be differentiated.\n\t\t//\n\t\t// This comes up when there are multiple changes that are affected by `inc` change item.\n\t\t//\n\t\t// For example: assume two insert changes: `{ offset: 2, howMany: 1 }` and `{ offset: 5, howMany: 1 }`.\n\t\t// Assume that `inc` change is remove `{ offset: 2, howMany: 2, nodesToHandle: 2 }`.\n\t\t//\n\t\t// Then, we:\n\t\t// - \"forget\" about first insert change (it is \"eaten\" by remove),\n\t\t// - because of that, at the end we will want to remove only one node (`nodesToHandle = 1`),\n\t\t// - but still we have to change offset of the second insert change from `5` to `3`!\n\t\t//\n\t\t// So, `howMany` does not change throughout items transformation and keeps information about how many nodes were affected,\n\t\t// while `nodesToHandle` means how many nodes need to be handled after the change item is transformed by other changes.\n\t\tinc.nodesToHandle = inc.howMany;\n\n\t\tfor ( const old of changes ) {\n\t\t\tconst incEnd = inc.offset + inc.howMany;\n\t\t\tconst oldEnd = old.offset + old.howMany;\n\n\t\t\tif ( inc.type == 'insert' ) {\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\told.howMany += inc.nodesToHandle;\n\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\tif ( inc.offset < old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\told.offset += inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\t// This case is more complicated, because attribute change has to be split into two.\n\t\t\t\t\t\t// Example (assume that uppercase and lowercase letters mean different attributes):\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// initial state:\t\tabcxyz\n\t\t\t\t\t\t// attribute change:\taBCXYz\n\t\t\t\t\t\t// incoming insert:\t\taBCfooXYz\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// Change ranges cannot intersect because each item has to be described exactly (it was either\n\t\t\t\t\t\t// not changed, inserted, removed, or its attribute was changed). That's why old attribute\n\t\t\t\t\t\t// change has to be split and both parts has to be handled separately from now on.\n\t\t\t\t\t\tconst howMany = old.howMany;\n\n\t\t\t\t\t\told.howMany = inc.offset - old.offset;\n\n\t\t\t\t\t\t// Add the second part of attribute change to the beginning of processed array so it won't\n\t\t\t\t\t\t// be processed again in this loop.\n\t\t\t\t\t\tchanges.unshift( {\n\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\toffset: incEnd,\n\t\t\t\t\t\t\thowMany: howMany - old.howMany,\n\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( inc.type == 'remove' ) {\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( incEnd <= oldEnd ) {\n\t\t\t\t\t\tif ( inc.offset < old.offset ) {\n\t\t\t\t\t\t\tconst intersectionLength = incEnd - old.offset;\n\n\t\t\t\t\t\t\told.offset = inc.offset;\n\n\t\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t\t\tinc.nodesToHandle -= intersectionLength;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\told.howMany -= inc.nodesToHandle;\n\t\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( inc.offset <= old.offset ) {\n\t\t\t\t\t\t\tinc.nodesToHandle -= old.howMany;\n\t\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\t\tconst intersectionLength = oldEnd - inc.offset;\n\n\t\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t\t\tinc.nodesToHandle -= intersectionLength;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'remove' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < old.offset ) {\n\t\t\t\t\t\tinc.nodesToHandle += old.howMany;\n\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\tif ( incEnd <= old.offset ) {\n\t\t\t\t\t\told.offset -= inc.howMany;\n\t\t\t\t\t} else if ( inc.offset < old.offset ) {\n\t\t\t\t\t\tconst intersectionLength = incEnd - old.offset;\n\n\t\t\t\t\t\told.offset = inc.offset;\n\t\t\t\t\t\told.howMany -= intersectionLength;\n\t\t\t\t\t} else if ( inc.offset < oldEnd ) {\n\t\t\t\t\t\tif ( incEnd <= oldEnd ) {\n\t\t\t\t\t\t\t// On first sight in this case we don't need to split attribute operation into two.\n\t\t\t\t\t\t\t// However the changes set is later converted to actions (see `_generateActionsFromChanges`).\n\t\t\t\t\t\t\t// For that reason, no two changes may intersect.\n\t\t\t\t\t\t\t// So we cannot have an attribute change that \"contains\" remove change.\n\t\t\t\t\t\t\t// Attribute change needs to be split.\n\t\t\t\t\t\t\tconst howMany = old.howMany;\n\n\t\t\t\t\t\t\told.howMany = inc.offset - old.offset;\n\n\t\t\t\t\t\t\tconst howManyAfter = howMany - old.howMany - inc.nodesToHandle;\n\n\t\t\t\t\t\t\t// Add the second part of attribute change to the beginning of processed array so it won't\n\t\t\t\t\t\t\t// be processed again in this loop.\n\t\t\t\t\t\t\tchanges.unshift( {\n\t\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\t\toffset: inc.offset,\n\t\t\t\t\t\t\t\thowMany: howManyAfter,\n\t\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\told.howMany -= oldEnd - inc.offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( inc.type == 'attribute' ) {\n\t\t\t\t// In case of attribute change, `howMany` should be kept same as `nodesToHandle`. It's not an error.\n\t\t\t\tif ( old.type == 'insert' ) {\n\t\t\t\t\tif ( inc.offset < old.offset && incEnd > old.offset ) {\n\t\t\t\t\t\tif ( incEnd > oldEnd ) {\n\t\t\t\t\t\t\t// This case is similar to a case described when incoming change was insert and old change was attribute.\n\t\t\t\t\t\t\t// See comment above.\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// This time incoming change is attribute. We need to split incoming change in this case too.\n\t\t\t\t\t\t\t// However this time, the second part of the attribute change needs to be processed further\n\t\t\t\t\t\t\t// because there might be other changes that it collides with.\n\t\t\t\t\t\t\tconst attributePart = {\n\t\t\t\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\t\t\t\toffset: oldEnd,\n\t\t\t\t\t\t\t\thowMany: incEnd - oldEnd,\n\t\t\t\t\t\t\t\tcount: this._changeCount++\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tthis._handleChange( attributePart, changes );\n\n\t\t\t\t\t\t\tchanges.push( attributePart );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tinc.nodesToHandle = old.offset - inc.offset;\n\t\t\t\t\t\tinc.howMany = inc.nodesToHandle;\n\t\t\t\t\t} else if ( inc.offset >= old.offset && inc.offset < oldEnd ) {\n\t\t\t\t\t\tif ( incEnd > oldEnd ) {\n\t\t\t\t\t\t\tinc.nodesToHandle = incEnd - oldEnd;\n\t\t\t\t\t\t\tinc.offset = oldEnd;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( old.type == 'attribute' ) {\n\t\t\t\t\t// There are only two conflicting scenarios possible here:\n\t\t\t\t\tif ( inc.offset >= old.offset && incEnd <= oldEnd ) {\n\t\t\t\t\t\t// `old` change includes `inc` change, or they are the same.\n\t\t\t\t\t\tinc.nodesToHandle = 0;\n\t\t\t\t\t\tinc.howMany = 0;\n\t\t\t\t\t\tinc.offset = 0;\n\t\t\t\t\t} else if ( inc.offset <= old.offset && incEnd >= oldEnd ) {\n\t\t\t\t\t\t// `inc` change includes `old` change.\n\t\t\t\t\t\told.howMany = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinc.howMany = inc.nodesToHandle;\n\t\tdelete inc.nodesToHandle;\n\t}\n\n\t/**\n\t * Returns an object with a single insert change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent The element in which the change happened.\n\t * @param {Number} offset The offset at which change happened.\n\t * @param {String} name The name of the removed element or `'$text'` for a character.\n\t * @returns {Object} The diff item.\n\t */\n\t_getInsertDiff( parent, offset, name ) {\n\t\treturn {\n\t\t\ttype: 'insert',\n\t\t\tposition: Position._createAt( parent, offset ),\n\t\t\tname,\n\t\t\tlength: 1,\n\t\t\tchangeCount: this._changeCount++\n\t\t};\n\t}\n\n\t/**\n\t * Returns an object with a single remove change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent The element in which change happened.\n\t * @param {Number} offset The offset at which change happened.\n\t * @param {String} name The name of the removed element or `'$text'` for a character.\n\t * @returns {Object} The diff item.\n\t */\n\t_getRemoveDiff( parent, offset, name ) {\n\t\treturn {\n\t\t\ttype: 'remove',\n\t\t\tposition: Position._createAt( parent, offset ),\n\t\t\tname,\n\t\t\tlength: 1,\n\t\t\tchangeCount: this._changeCount++\n\t\t};\n\t}\n\n\t/**\n\t * Returns an array of objects where each one is a single attribute change description.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range The range where the change happened.\n\t * @param {Map} oldAttributes A map, map iterator or compatible object that contains attributes before the change.\n\t * @param {Map} newAttributes A map, map iterator or compatible object that contains attributes after the change.\n\t * @returns {Array.<Object>} An array containing one or more diff items.\n\t */\n\t_getAttributesDiff( range, oldAttributes, newAttributes ) {\n\t\t// Results holder.\n\t\tconst diffs = [];\n\n\t\t// Clone new attributes as we will be performing changes on this object.\n\t\tnewAttributes = new Map( newAttributes );\n\n\t\t// Look through old attributes.\n\t\tfor ( const [ key, oldValue ] of oldAttributes ) {\n\t\t\t// Check what is the new value of the attribute (or if it was removed).\n\t\t\tconst newValue = newAttributes.has( key ) ? newAttributes.get( key ) : null;\n\n\t\t\t// If values are different (or attribute was removed)...\n\t\t\tif ( newValue !== oldValue ) {\n\t\t\t\t// Add diff item.\n\t\t\t\tdiffs.push( {\n\t\t\t\t\ttype: 'attribute',\n\t\t\t\t\tposition: range.start,\n\t\t\t\t\trange: range.clone(),\n\t\t\t\t\tlength: 1,\n\t\t\t\t\tattributeKey: key,\n\t\t\t\t\tattributeOldValue: oldValue,\n\t\t\t\t\tattributeNewValue: newValue,\n\t\t\t\t\tchangeCount: this._changeCount++\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Prevent returning two diff items for the same change.\n\t\t\tnewAttributes.delete( key );\n\t\t}\n\n\t\t// Look through new attributes that weren't handled above.\n\t\tfor ( const [ key, newValue ] of newAttributes ) {\n\t\t\t// Each of them is a new attribute. Add diff item.\n\t\t\tdiffs.push( {\n\t\t\t\ttype: 'attribute',\n\t\t\t\tposition: range.start,\n\t\t\t\trange: range.clone(),\n\t\t\t\tlength: 1,\n\t\t\t\tattributeKey: key,\n\t\t\t\tattributeOldValue: null,\n\t\t\t\tattributeNewValue: newValue,\n\t\t\t\tchangeCount: this._changeCount++\n\t\t\t} );\n\t\t}\n\n\t\treturn diffs;\n\t}\n\n\t/**\n\t * Checks whether given element or any of its parents is an element that is buffered as an inserted element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element Element to check.\n\t * @returns {Boolean}\n\t */\n\t_isInInsertedElement( element ) {\n\t\tconst parent = element.parent;\n\n\t\tif ( !parent ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst changes = this._changesInElement.get( parent );\n\t\tconst offset = element.startOffset;\n\n\t\tif ( changes ) {\n\t\t\tfor ( const change of changes ) {\n\t\t\t\tif ( change.type == 'insert' && offset >= change.offset && offset < change.offset + change.howMany ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._isInInsertedElement( parent );\n\t}\n\n\t/**\n\t * Removes deeply all buffered changes that are registered in elements from range specified by `parent`, `offset`\n\t * and `howMany`.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} parent\n\t * @param {Number} offset\n\t * @param {Number} howMany\n\t */\n\t_removeAllNestedChanges( parent, offset, howMany ) {\n\t\tconst range = new Range( Position._createAt( parent, offset ), Position._createAt( parent, offset + howMany ) );\n\n\t\tfor ( const item of range.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'element' ) ) {\n\t\t\t\tthis._elementSnapshots.delete( item );\n\t\t\t\tthis._changesInElement.delete( item );\n\n\t\t\t\tthis._removeAllNestedChanges( item, 0, item.maxOffset );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Returns an array that is a copy of passed child list with the exception that text nodes are split to one or more\n// objects, each representing one character and attributes set on that character.\nfunction _getChildrenSnapshot( children ) {\n\tconst snapshot = [];\n\n\tfor ( const child of children ) {\n\t\tif ( child.is( 'text' ) ) {\n\t\t\tfor ( let i = 0; i < child.data.length; i++ ) {\n\t\t\t\tsnapshot.push( {\n\t\t\t\t\tname: '$text',\n\t\t\t\t\tattributes: new Map( child.getAttributes() )\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\t\t\tsnapshot.push( {\n\t\t\t\tname: child.name,\n\t\t\t\tattributes: new Map( child.getAttributes() )\n\t\t\t} );\n\t\t}\n\t}\n\n\treturn snapshot;\n}\n\n// Generates array of actions for given changes set.\n// It simulates what `diff` function does.\n// Generated actions are:\n// - 'e' for 'equal' - when item at that position did not change,\n// - 'i' for 'insert' - when item at that position was inserted,\n// - 'r' for 'remove' - when item at that position was removed,\n// - 'a' for 'attribute' - when item at that position has it attributes changed.\n//\n// Example (assume that uppercase letters have bold attribute, compare with function code):\n//\n// children before:\tfooBAR\n// children after:\tfoxybAR\n//\n// changes: type: remove, offset: 1, howMany: 1\n//\t\t\ttype: insert, offset: 2, howMany: 2\n//\t\t\ttype: attribute, offset: 4, howMany: 1\n//\n// expected actions: equal (f), remove (o), equal (o), insert (x), insert (y), attribute (b), equal (A), equal (R)\n//\n// steps taken by th script:\n//\n// 1. change = \"type: remove, offset: 1, howMany: 1\"; offset = 0; oldChildrenHandled = 0\n//    1.1 between this change and the beginning is one not-changed node, fill with one equal action, one old child has been handled\n//    1.2 this change removes one node, add one remove action\n//    1.3 change last visited `offset` to 1\n//    1.4 since an old child has been removed, one more old child has been handled\n//    1.5 actions at this point are: equal, remove\n//\n// 2. change = \"type: insert, offset: 2, howMany: 2\"; offset = 1; oldChildrenHandled = 2\n//    2.1 between this change and previous change is one not-changed node, add equal action, another one old children has been handled\n//    2.2 this change inserts two nodes, add two insert actions\n//    2.3 change last visited offset to the end of the inserted range, that is 4\n//    2.4 actions at this point are: equal, remove, equal, insert, insert\n//\n// 3. change = \"type: attribute, offset: 4, howMany: 1\"; offset = 4, oldChildrenHandled = 3\n//    3.1 between this change and previous change are no not-changed nodes\n//    3.2 this change changes one node, add one attribute action\n//    3.3 change last visited `offset` to the end of change range, that is 5\n//    3.4 since an old child has been changed, one more old child has been handled\n//    3.5 actions at this point are: equal, remove, equal, insert, insert, attribute\n//\n// 4. after loop oldChildrenHandled = 4, oldChildrenLength = 6 (fooBAR is 6 characters)\n//    4.1 fill up with two equal actions\n//\n// The result actions are: equal, remove, equal, insert, insert, attribute, equal, equal.\nfunction _generateActionsFromChanges( oldChildrenLength, changes ) {\n\tconst actions = [];\n\n\tlet offset = 0;\n\tlet oldChildrenHandled = 0;\n\n\t// Go through all buffered changes.\n\tfor ( const change of changes ) {\n\t\t// First, fill \"holes\" between changes with \"equal\" actions.\n\t\tif ( change.offset > offset ) {\n\t\t\tactions.push( ...'e'.repeat( change.offset - offset ).split( '' ) );\n\n\t\t\toldChildrenHandled += change.offset - offset;\n\t\t}\n\n\t\t// Then, fill up actions accordingly to change type.\n\t\tif ( change.type == 'insert' ) {\n\t\t\tactions.push( ...'i'.repeat( change.howMany ).split( '' ) );\n\n\t\t\t// The last handled offset is after inserted range.\n\t\t\toffset = change.offset + change.howMany;\n\t\t} else if ( change.type == 'remove' ) {\n\t\t\tactions.push( ...'r'.repeat( change.howMany ).split( '' ) );\n\n\t\t\t// The last handled offset is at the position where the nodes were removed.\n\t\t\toffset = change.offset;\n\t\t\t// We removed `howMany` old nodes, update `oldChildrenHandled`.\n\t\t\toldChildrenHandled += change.howMany;\n\t\t} else {\n\t\t\tactions.push( ...'a'.repeat( change.howMany ).split( '' ) );\n\n\t\t\t// The last handled offset isa at the position after the changed range.\n\t\t\toffset = change.offset + change.howMany;\n\t\t\t// We changed `howMany` old nodes, update `oldChildrenHandled`.\n\t\t\toldChildrenHandled += change.howMany;\n\t\t}\n\t}\n\n\t// Fill \"equal\" actions at the end of actions set. Use `oldChildrenHandled` to see how many children\n\t// has not been changed / removed at the end of their parent.\n\tif ( oldChildrenHandled < oldChildrenLength ) {\n\t\tactions.push( ...'e'.repeat( oldChildrenLength - oldChildrenHandled ).split( '' ) );\n\t}\n\n\treturn actions;\n}\n\n// Filter callback for Array.filter that filters out change entries that are in graveyard.\nfunction _changesInGraveyardFilter( entry ) {\n\tconst posInGy = entry.position && entry.position.root.rootName == '$graveyard';\n\tconst rangeInGy = entry.range && entry.range.root.rootName == '$graveyard';\n\n\treturn !posInGy && !rangeInGy;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/history\n */\n\n/**\n * `History` keeps the track of all the operations applied to the {@link module:engine/model/document~Document document}.\n */\nexport default class History {\n\t/**\n\t * Creates an empty History instance.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Operations added to the history.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array.<module:engine/model/operation/operation~Operation>} module:engine/model/history~History#_operations\n\t\t */\n\t\tthis._operations = [];\n\n\t\t/**\n\t\t * Holds an information which {@link module:engine/model/operation/operation~Operation operation} undoes which\n\t\t * {@link module:engine/model/operation/operation~Operation operation}.\n\t\t *\n\t\t * Keys of the map are \"undoing operations\", that is operations that undone some other operations. For each key, the\n\t\t * value is an operation that has been undone by the \"undoing operation\".\n\t\t *\n\t\t * @private\n\t\t * @member {Map} module:engine/model/history~History#_undoPairs\n\t\t */\n\t\tthis._undoPairs = new Map();\n\n\t\t/**\n\t\t * Holds all undone operations.\n\t\t *\n\t\t * @private\n\t\t * @member {Set.<module:engine/model/operation/operation~Operation>} module:engine/model/history~History#_undoneOperations\n\t\t */\n\t\tthis._undoneOperations = new Set();\n\t}\n\n\t/**\n\t * Adds an operation to the history.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to add.\n\t */\n\taddOperation( operation ) {\n\t\tif ( this._operations.includes( operation ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._operations.push( operation );\n\t}\n\n\t/**\n\t * Returns operations added to the history.\n\t *\n\t * @param {Number} [from=0] Base version from which operations should be returned (inclusive). Defaults to `0`, which means\n\t * that operations from the first one will be returned.\n\t * @param {Number} [to=Number.POSITIVE_INFINITY] Base version up to which operations should be returned (exclusive).\n\t * Defaults to `Number.POSITIVE_INFINITY` which means that operations up to the last one will be returned.\n\t * @returns {Iterable.<module:engine/model/operation/operation~Operation>} Operations added to the history.\n\t */\n\tgetOperations( from = 0, to = Number.POSITIVE_INFINITY ) {\n\t\tif ( from < 0 ) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn this._operations.slice( from, to );\n\t}\n\n\t/**\n\t * Returns operation from the history that bases on given `baseVersion`.\n\t *\n\t * @param {Number} baseVersion Base version of the operation to get.\n\t * @returns {module:engine/model/operation/operation~Operation|null} Operation with given base version or `null` if\n\t * there is no such operation in history.\n\t */\n\tgetOperation( baseVersion ) {\n\t\treturn this._operations[ baseVersion ];\n\t}\n\n\t/**\n\t * Marks in history that one operation is an operation that is undoing the other operation. By marking operation this way,\n\t * history is keeping more context information about operations, which helps in operational transformation.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} undoneOperation Operation which is undone by `undoingOperation`.\n\t * @param {module:engine/model/operation/operation~Operation} undoingOperation Operation which undoes `undoneOperation`.\n\t */\n\tsetOperationAsUndone( undoneOperation, undoingOperation ) {\n\t\tthis._undoPairs.set( undoingOperation, undoneOperation );\n\t\tthis._undoneOperations.add( undoneOperation );\n\t}\n\n\t/**\n\t * Checks whether given `operation` is undoing any other operation.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to check.\n\t * @returns {Boolean} `true` if given `operation` is undoing any other operation, `false` otherwise.\n\t */\n\tisUndoingOperation( operation ) {\n\t\treturn this._undoPairs.has( operation );\n\t}\n\n\t/**\n\t * Checks whether given `operation` has been undone by any other operation.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation Operation to check.\n\t * @returns {Boolean} `true` if given `operation` has been undone any other operation, `false` otherwise.\n\t */\n\tisUndoneOperation( operation ) {\n\t\treturn this._undoneOperations.has( operation );\n\t}\n\n\t/**\n\t * For given `undoingOperation`, returns the operation which has been undone by it.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} undoingOperation\n\t * @returns {module:engine/model/operation/operation~Operation|undefined} Operation that has been undone by given\n\t * `undoingOperation` or `undefined` if given `undoingOperation` is not undoing any other operation.\n\t */\n\tgetUndoneOperation( undoingOperation ) {\n\t\treturn this._undoPairs.get( undoingOperation );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Set of utils to handle unicode characters.\n *\n * @module utils/unicode\n */\n\n/**\n * Checks whether given `character` is a combining mark.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isCombiningMark( character ) {\n\treturn !!character && character.length == 1 && /[\\u0300-\\u036f\\u1ab0-\\u1aff\\u1dc0-\\u1dff\\u20d0-\\u20ff\\ufe20-\\ufe2f]/.test( character );\n}\n\n/**\n * Checks whether given `character` is a high half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isHighSurrogateHalf( character ) {\n\treturn !!character && character.length == 1 && /[\\ud800-\\udbff]/.test( character );\n}\n\n/**\n * Checks whether given `character` is a low half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isLowSurrogateHalf( character ) {\n\treturn !!character && character.length == 1 && /[\\udc00-\\udfff]/.test( character );\n}\n\n/**\n * Checks whether given offset in a string is inside a surrogate pair (between two surrogate halves).\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideSurrogatePair( string, offset ) {\n\treturn isHighSurrogateHalf( string.charAt( offset - 1 ) ) && isLowSurrogateHalf( string.charAt( offset ) );\n}\n\n/**\n * Checks whether given offset in a string is between base character and combining mark or between two combining marks.\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\nexport function isInsideCombinedSymbol( string, offset ) {\n\treturn isCombiningMark( string.charAt( offset ) );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/document\n */\n\nimport Differ from './differ';\nimport RootElement from './rootelement';\nimport History from './history';\nimport DocumentSelection from './documentselection';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils/src/unicode';\nimport { clone } from 'lodash-es';\n\nconst graveyardName = '$graveyard';\n\n/**\n * Data model's document. It contains the model's structure, its selection and the history of changes.\n *\n * Read more about working with the model in\n * {@glink framework/guides/architecture/editing-engine#model introduction to the the editing engine's architecture}.\n *\n * Usually, the document contains just one {@link module:engine/model/document~Document#roots root element}, so\n * you can retrieve it by just calling {@link module:engine/model/document~Document#getRoot} without specifying its name:\n *\n *\t\tmodel.document.getRoot(); // -> returns the main root\n *\n * However, the document may contain multiple roots – e.g. when the editor has multiple editable areas\n * (e.g. a title and a body of a message).\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Document {\n\t/**\n\t * Creates an empty document instance with no {@link #roots} (other than\n\t * the {@link #graveyard graveyard root}).\n\t */\n\tconstructor( model ) {\n\t\t/**\n\t\t * The {@link module:engine/model/model~Model model} that the document is a part of.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The document version. It starts from `0` and every operation increases the version number. It is used to ensure that\n\t\t * operations are applied on a proper document version.\n\t\t *\n\t\t * If the {@link module:engine/model/operation/operation~Operation#baseVersion base version} does not match the document version,\n\t\t * a {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.version = 0;\n\n\t\t/**\n\t\t * The document's history.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/history~History}\n\t\t */\n\t\tthis.history = new History( this );\n\n\t\t/**\n\t\t * The selection in this document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/documentselection~DocumentSelection}\n\t\t */\n\t\tthis.selection = new DocumentSelection( this );\n\n\t\t/**\n\t\t * A list of roots that are owned and managed by this document. Use {@link #createRoot} and\n\t\t * {@link #getRoot} to manipulate it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/collection~Collection}\n\t\t */\n\t\tthis.roots = new Collection( { idProperty: 'rootName' } );\n\n\t\t/**\n\t\t * The model differ object. Its role is to buffer changes done on the model document and then calculate a diff of those changes.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/differ~Differ}\n\t\t */\n\t\tthis.differ = new Differ( model.markers );\n\n\t\t/**\n\t\t * Post-fixer callbacks registered to the model document.\n\t\t *\n\t\t * @private\n\t\t * @member {Set}\n\t\t */\n\t\tthis._postFixers = new Set();\n\n\t\t// Graveyard tree root. Document always have a graveyard root, which stores removed nodes.\n\t\tthis.createRoot( '$root', graveyardName );\n\n\t\t// First, if the operation is a document operation check if it's base version is correct.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation && operation.baseVersion !== this.version ) {\n\t\t\t\t/**\n\t\t\t\t * Only operations with matching versions can be applied.\n\t\t\t\t *\n\t\t\t\t * @error document-applyOperation-wrong-version\n\t\t\t\t * @param {module:engine/model/operation/operation~Operation} operation\n\t\t\t\t */\n\t\t\t\tthrow new CKEditorError(\n\t\t\t\t\t'model-document-applyOperation-wrong-version: Only operations with matching versions can be applied.',\n\t\t\t\t\t{ operation }\n\t\t\t\t);\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\n\t\t// Then, still before an operation is applied on model, buffer the change in differ.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation ) {\n\t\t\t\tthis.differ.bufferOperation( operation );\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// After the operation is applied, bump document's version and add the operation to the history.\n\t\tthis.listenTo( model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( operation.isDocumentOperation ) {\n\t\t\t\tthis.version++;\n\t\t\t\tthis.history.addOperation( operation );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Listen to selection changes. If selection changed, mark it.\n\t\tlet hasSelectionChanged = false;\n\n\t\tthis.listenTo( this.selection, 'change', () => {\n\t\t\thasSelectionChanged = true;\n\t\t} );\n\n\t\t// Wait for `_change` event from model, which signalizes that outermost change block has finished.\n\t\t// When this happens, check if there were any changes done on document, and if so, call post-fixers,\n\t\t// fire `change` event for features and conversion and then reset the differ.\n\t\t// Fire `change:data` event when at least one operation or buffered marker changes the data.\n\t\tthis.listenTo( model, '_change', ( evt, writer ) => {\n\t\t\tif ( !this.differ.isEmpty || hasSelectionChanged ) {\n\t\t\t\tthis._callPostFixers( writer );\n\n\t\t\t\tif ( this.differ.hasDataChanges() ) {\n\t\t\t\t\tthis.fire( 'change:data', writer.batch );\n\t\t\t\t} else {\n\t\t\t\t\tthis.fire( 'change', writer.batch );\n\t\t\t\t}\n\n\t\t\t\tthis.differ.reset();\n\t\t\t\thasSelectionChanged = false;\n\t\t\t}\n\t\t} );\n\n\t\t// Buffer marker changes.\n\t\t// This is not covered in buffering operations because markers may change outside of them (when they\n\t\t// are modified using `model.markers` collection, not through `MarkerOperation`).\n\t\tthis.listenTo( model.markers, 'update', ( evt, marker, oldRange, newRange ) => {\n\t\t\t// Whenever marker is updated, buffer that change.\n\t\t\tthis.differ.bufferMarkerChange( marker.name, oldRange, newRange, marker.affectsData );\n\n\t\t\tif ( oldRange === null ) {\n\t\t\t\t// If this is a new marker, add a listener that will buffer change whenever marker changes.\n\t\t\t\tmarker.on( 'change', ( evt, oldRange ) => {\n\t\t\t\t\tthis.differ.bufferMarkerChange( marker.name, oldRange, marker.getRange(), marker.affectsData );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * The graveyard tree root. A document always has a graveyard root that stores removed nodes.\n\t *\n\t * @readonly\n\t * @member {module:engine/model/rootelement~RootElement}\n\t */\n\tget graveyard() {\n\t\treturn this.getRoot( graveyardName );\n\t}\n\n\t/**\n\t * Creates a new root.\n\t *\n\t * @param {String} [elementName='$root'] The element name. Defaults to `'$root'` which also has some basic schema defined\n\t * (`$block`s are allowed inside the `$root`). Make sure to define a proper schema if you use a different name.\n\t * @param {String} [rootName='main'] A unique root name.\n\t * @returns {module:engine/model/rootelement~RootElement} The created root.\n\t */\n\tcreateRoot( elementName = '$root', rootName = 'main' ) {\n\t\tif ( this.roots.get( rootName ) ) {\n\t\t\t/**\n\t\t\t * A root with the specified name already exists.\n\t\t\t *\n\t\t\t * @error model-document-createRoot-name-exists\n\t\t\t * @param {module:engine/model/document~Document} doc\n\t\t\t * @param {String} name\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-document-createRoot-name-exists: Root with specified name already exists.',\n\t\t\t\t{ name: rootName }\n\t\t\t);\n\t\t}\n\n\t\tconst root = new RootElement( this, elementName, rootName );\n\t\tthis.roots.add( root );\n\n\t\treturn root;\n\t}\n\n\t/**\n\t * Removes all event listeners set by the document instance.\n\t */\n\tdestroy() {\n\t\tthis.selection.destroy();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Returns a root by its name.\n\t *\n\t * @param {String} [name='main'] A unique root name.\n\t * @returns {module:engine/model/rootelement~RootElement|null} The root registered under a given name or `null` when\n\t * there is no root with the given name.\n\t */\n\tgetRoot( name = 'main' ) {\n\t\treturn this.roots.get( name );\n\t}\n\n\t/**\n\t * Returns an array with names of all roots (without the {@link #graveyard}) added to the document.\n\t *\n\t * @returns {Array.<String>} Roots names.\n\t */\n\tgetRootNames() {\n\t\treturn Array.from( this.roots, root => root.rootName ).filter( name => name != graveyardName );\n\t}\n\n\t/**\n\t * Used to register a post-fixer callback. A post-fixer mechanism guarantees that the features that listen to\n\t * the {@link module:engine/model/model~Model#event:_change model's change event} will operate on a correct model state.\n\t *\n\t * An execution of a feature may lead to an incorrect document tree state. The callbacks are used to fix the document tree after\n\t * it has changed. Post-fixers are fired just after all changes from the outermost change block were applied but\n\t * before the {@link module:engine/model/document~Document#event:change change event} is fired. If a post-fixer callback made\n\t * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n\t * not be fixed in the new document tree state.\n\t *\n\t * As a parameter, a post-fixer callback receives a {@link module:engine/model/writer~Writer writer} instance connected with the\n\t * executed changes block. Thanks to that, all changes done by the callback will be added to the same\n\t * {@link module:engine/model/batch~Batch batch} (and undo step) as the original changes. This makes post-fixer changes transparent\n\t * for the user.\n\t *\n\t * An example of a post-fixer is a callback that checks if all the data were removed from the editor. If so, the\n\t * callback should add an empty paragraph so that the editor is never empty:\n\t *\n\t *\t\tdocument.registerPostFixer( writer => {\n\t *\t\t\tconst changes = document.differ.getChanges();\n\t *\n\t *\t\t\t// Check if the changes lead to an empty root in the editor.\n\t *\t\t\tfor ( const entry of changes ) {\n\t *\t\t\t\tif ( entry.type == 'remove' && entry.position.root.isEmpty ) {\n\t *\t\t\t\t\twriter.insertElement( 'paragraph', entry.position.root, 0 );\n\t *\n\t *\t\t\t\t\t// It is fine to return early, even if multiple roots would need to be fixed.\n\t *\t\t\t\t\t// All post-fixers will be fired again, so if there are more empty roots, those will be fixed, too.\n\t *\t\t\t\t\treturn true;\n\t *\t\t\t\t}\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * @param {Function} postFixer\n\t */\n\tregisterPostFixer( postFixer ) {\n\t\tthis._postFixers.add( postFixer );\n\t}\n\n\t/**\n\t * A custom `toJSON()` method to solve child-parent circular dependencies.\n\t *\n\t * @returns {Object} A clone of this object with the document property changed to a string.\n\t */\n\ttoJSON() {\n\t\tconst json = clone( this );\n\n\t\t// Due to circular references we need to remove parent reference.\n\t\tjson.selection = '[engine.model.DocumentSelection]';\n\t\tjson.model = '[engine.model.Model]';\n\n\t\treturn json;\n\t}\n\n\t/**\n\t * Returns the default root for this document which is either the first root that was added to the document using\n\t * {@link #createRoot} or the {@link #graveyard graveyard root} if no other roots were created.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/rootelement~RootElement} The default root for this document.\n\t */\n\t_getDefaultRoot() {\n\t\tfor ( const root of this.roots ) {\n\t\t\tif ( root !== this.graveyard ) {\n\t\t\t\treturn root;\n\t\t\t}\n\t\t}\n\n\t\treturn this.graveyard;\n\t}\n\n\t/**\n\t * Returns the default range for this selection. The default range is a collapsed range that starts and ends\n\t * at the beginning of this selection's document {@link #_getDefaultRoot default root}.\n\t *\n\t * @protected\n\t * @returns {module:engine/model/range~Range}\n\t */\n\t_getDefaultRange() {\n\t\tconst defaultRoot = this._getDefaultRoot();\n\t\tconst model = this.model;\n\t\tconst schema = model.schema;\n\n\t\t// Find the first position where the selection can be put.\n\t\tconst position = model.createPositionFromPath( defaultRoot, [ 0 ] );\n\t\tconst nearestRange = schema.getNearestSelectionRange( position );\n\n\t\t// If valid selection range is not found - return range collapsed at the beginning of the root.\n\t\treturn nearestRange || model.createRange( position );\n\t}\n\n\t/**\n\t * Checks whether a given {@link module:engine/model/range~Range range} is a valid range for\n\t * the {@link #selection document's selection}.\n\t *\n\t * @private\n\t * @param {module:engine/model/range~Range} range A range to check.\n\t * @returns {Boolean} `true` if `range` is valid, `false` otherwise.\n\t */\n\t_validateSelectionRange( range ) {\n\t\treturn validateTextNodePosition( range.start ) && validateTextNodePosition( range.end );\n\t}\n\n\t/**\n\t * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n\t *\n\t * @private\n\t */\n\t_callPostFixers( writer ) {\n\t\tlet wasFixed = false;\n\n\t\tdo {\n\t\t\tfor ( const callback of this._postFixers ) {\n\t\t\t\twasFixed = callback( writer );\n\n\t\t\t\tif ( wasFixed ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} while ( wasFixed );\n\t}\n\n\t/**\n\t * Fired after each {@link module:engine/model/model~Model#enqueueChange `enqueueChange()` block} or the outermost\n\t * {@link module:engine/model/model~Model#change `change()` block} was executed and the document was changed\n\t * during that block's execution.\n\t *\n\t * The changes which this event will cover include:\n\t *\n\t * * document structure changes,\n\t * * selection changes,\n\t * * marker changes.\n\t *\n\t * If you want to be notified about all these changes, then simply listen to this event like this:\n\t *\n\t *\t\tmodel.document.on( 'change', () => {\n\t *\t\t\tconsole.log( 'The document has changed!' );\n\t *\t\t} );\n\t *\n\t * If, however, you only want to be notified about the data changes, then use the\n\t * {@link module:engine/model/document~Document#event:change:data change:data} event,\n\t * which is fired for document structure changes and marker changes (which affects the data).\n\t *\n\t *\t\tmodel.document.on( 'change:data', () => {\n\t *\t\t\tconsole.log( 'The data has changed!' );\n\t *\t\t} );\n\t *\n\t * @event change\n\t * @param {module:engine/model/batch~Batch} batch The batch that was used in the executed changes block.\n\t */\n\n\t/**\n\t * It is a narrower version of the {@link #event:change} event. It is fired for changes which\n\t * affect the editor data. This is:\n\t *\n\t * * document structure changes,\n\t * * marker changes (which affects the data).\n\t *\n\t * If you want to be notified about the data changes, then listen to this event:\n\t *\n\t *\t\tmodel.document.on( 'change:data', () => {\n\t *\t\t\tconsole.log( 'The data has changed!' );\n\t *\t\t} );\n\t *\n\t * If you would like to listen to all document changes, then check out the\n\t * {@link module:engine/model/document~Document#event:change change} event.\n\t *\n\t * @event change:data\n\t * @param {module:engine/model/batch~Batch} batch The batch that was used in the executed changes block.\n\t */\n}\n\nmix( Document, EmitterMixin );\n\n// Checks whether given range boundary position is valid for document selection, meaning that is not between\n// unicode surrogate pairs or base character and combining marks.\nfunction validateTextNodePosition( rangeBoundary ) {\n\tconst textNode = rangeBoundary.textNode;\n\n\tif ( textNode ) {\n\t\tconst data = textNode.data;\n\t\tconst offset = rangeBoundary.offset - textNode.startOffset;\n\n\t\treturn !isInsideSurrogatePair( data, offset ) && !isInsideCombinedSymbol( data, offset );\n\t}\n\n\treturn true;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/markercollection\n */\n\nimport LiveRange from './liverange';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The collection of all {@link module:engine/model/markercollection~Marker markers} attached to the document.\n * It lets you {@link module:engine/model/markercollection~MarkerCollection#get get} markers or track them using\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} event.\n *\n * To create, change or remove makers use {@link module:engine/model/writer~Writer model writers'} methods:\n * {@link module:engine/model/writer~Writer#addMarker} or {@link module:engine/model/writer~Writer#removeMarker}. Since\n * the writer is the only proper way to change the data model it is not possible to change markers directly using this\n * collection. All markers created by the writer will be automatically added to this collection.\n *\n * By default there is one marker collection available as {@link module:engine/model/model~Model#markers model property}.\n *\n * @see module:engine/model/markercollection~Marker\n */\nexport default class MarkerCollection {\n\t/**\n\t * Creates a markers collection.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Stores {@link ~Marker markers} added to the collection.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} #_markers\n\t\t */\n\t\tthis._markers = new Map();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * Iterates over all {@link ~Marker markers} added to the collection.\n\t *\n\t * @returns {Iterable}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this._markers.values();\n\t}\n\n\t/**\n\t * Checks if marker with given `markerName` is in the collection.\n\t *\n\t * @param {String} markerName Marker name.\n\t * @returns {Boolean} `true` if marker with given `markerName` is in the collection, `false` otherwise.\n\t */\n\thas( markerName ) {\n\t\treturn this._markers.has( markerName );\n\t}\n\n\t/**\n\t * Returns {@link ~Marker marker} with given `markerName`.\n\t *\n\t * @param {String} markerName Name of marker to get.\n\t * @returns {module:engine/model/markercollection~Marker|null} Marker with given name or `null` if such marker was\n\t * not added to the collection.\n\t */\n\tget( markerName ) {\n\t\treturn this._markers.get( markerName ) || null;\n\t}\n\n\t/**\n\t * Creates and adds a {@link ~Marker marker} to the `MarkerCollection` with given name on given\n\t * {@link module:engine/model/range~Range range}.\n\t *\n\t * If `MarkerCollection` already had a marker with given name (or {@link ~Marker marker} was passed), the marker in\n\t * collection is updated and {@link module:engine/model/markercollection~MarkerCollection#event:update} event is fired\n\t * but only if there was a change (marker range or {@link module:engine/model/markercollection~Marker#managedUsingOperations}\n\t * flag has changed.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of marker to set or marker instance to update.\n\t * @param {module:engine/model/range~Range} range Marker range.\n\t * @param {Boolean} [managedUsingOperations=false] Specifies whether the marker is managed using operations.\n\t * @param {Boolean} [affectsData=false] Specifies whether the marker affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t * @returns {module:engine/model/markercollection~Marker} `Marker` instance which was added or updated.\n\t */\n\t_set( markerOrName, range, managedUsingOperations = false, affectsData = false ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst oldMarker = this._markers.get( markerName );\n\n\t\tif ( oldMarker ) {\n\t\t\tconst oldRange = oldMarker.getRange();\n\t\t\tlet hasChanged = false;\n\n\t\t\tif ( !oldRange.isEqual( range ) ) {\n\t\t\t\toldMarker._attachLiveRange( LiveRange.fromRange( range ) );\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( managedUsingOperations != oldMarker.managedUsingOperations ) {\n\t\t\t\toldMarker._managedUsingOperations = managedUsingOperations;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( typeof affectsData === 'boolean' && affectsData != oldMarker.affectsData ) {\n\t\t\t\toldMarker._affectsData = affectsData;\n\t\t\t\thasChanged = true;\n\t\t\t}\n\n\t\t\tif ( hasChanged ) {\n\t\t\t\tthis.fire( 'update:' + markerName, oldMarker, oldRange, range );\n\t\t\t}\n\n\t\t\treturn oldMarker;\n\t\t}\n\n\t\tconst liveRange = LiveRange.fromRange( range );\n\t\tconst marker = new Marker( markerName, liveRange, managedUsingOperations, affectsData );\n\n\t\tthis._markers.set( markerName, marker );\n\t\tthis.fire( 'update:' + markerName, marker, null, range );\n\n\t\treturn marker;\n\t}\n\n\t/**\n\t * Removes given {@link ~Marker marker} or a marker with given name from the `MarkerCollection`.\n\t *\n\t * @protected\n\t * @fires module:engine/model/markercollection~MarkerCollection#event:update\n\t * @param {String} markerOrName Marker or name of a marker to remove.\n\t * @returns {Boolean} `true` if marker was found and removed, `false` otherwise.\n\t */\n\t_remove( markerOrName ) {\n\t\tconst markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\t\tconst oldMarker = this._markers.get( markerName );\n\n\t\tif ( oldMarker ) {\n\t\t\tthis._markers.delete( markerName );\n\t\t\tthis.fire( 'update:' + markerName, oldMarker, oldMarker.getRange(), null );\n\n\t\t\tthis._destroyMarker( oldMarker );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns iterator that iterates over all markers, which ranges contain given {@link module:engine/model/position~Position position}.\n\t *\n\t * @param {module:engine/model/position~Position} position\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersAtPosition( position ) {\n\t\tfor ( const marker of this ) {\n\t\t\tif ( marker.getRange().containsPosition( position ) ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns iterator that iterates over all markers, which intersects with given {@link module:engine/model/range~Range range}.\n\t *\n\t * @param {module:engine/model/range~Range} range\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersIntersectingRange( range ) {\n\t\tfor ( const marker of this ) {\n\t\t\tif ( marker.getRange().getIntersection( range ) !== null ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys marker collection and all markers inside it.\n\t */\n\tdestroy() {\n\t\tfor ( const marker of this._markers.values() ) {\n\t\t\tthis._destroyMarker( marker );\n\t\t}\n\n\t\tthis._markers = null;\n\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Iterates over all markers that starts with given `prefix`.\n\t *\n\t *\t\tconst markerFooA = markersCollection.set( 'foo:a', rangeFooA );\n\t *\t\tconst markerFooB = markersCollection.set( 'foo:b', rangeFooB );\n\t *\t\tconst markerBarA = markersCollection.set( 'bar:a', rangeBarA );\n\t *\t\tconst markerFooBarA = markersCollection.set( 'foobar:a', rangeFooBarA );\n\t *\t\tArray.from( markersCollection.getMarkersGroup( 'foo' ) ); // [ markerFooA, markerFooB ]\n\t *\t\tArray.from( markersCollection.getMarkersGroup( 'a' ) ); // []\n\t *\n\t * @param prefix\n\t * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n\t */\n\t* getMarkersGroup( prefix ) {\n\t\tfor ( const marker of this._markers.values() ) {\n\t\t\tif ( marker.name.startsWith( prefix + ':' ) ) {\n\t\t\t\tyield marker;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Destroys the marker.\n\t *\n\t * @private\n\t * @param {module:engine/model/markercollection~Marker} marker Marker to destroy.\n\t */\n\t_destroyMarker( marker ) {\n\t\tmarker.stopListening();\n\t\tmarker._detachLiveRange();\n\t}\n\n\t/**\n\t * Fired whenever marker is added, updated or removed from `MarkerCollection`.\n\t *\n\t * @event update\n\t * @param {module:engine/model/markercollection~Marker} Updated Marker.\n\t * @param {module:engine/model/range~Range|null} oldRange Marker range before the update. When is not defined it\n\t * means that marker is just added.\n\t * @param {module:engine/model/range~Range|null} newRange Marker range after update. When is not defined it\n\t * means that marker is just removed.\n\t */\n}\n\nmix( MarkerCollection, EmitterMixin );\n\n/**\n * `Marker` is a continuous parts of model (like a range), is named and represent some kind of information about marked\n * part of model document. In contrary to {@link module:engine/model/node~Node nodes}, which are building blocks of\n * model document tree, markers are not stored directly in document tree but in\n * {@link module:engine/model/model~Model#markers model markers' collection}. Still, they are document data, by giving\n * additional meaning to the part of a model document between marker start and marker end.\n *\n * In this sense, markers are similar to adding and converting attributes on nodes. The difference is that attribute is\n * connected with a given node (e.g. a character is bold no matter if it gets moved or content around it changes).\n * Markers on the other hand are continuous ranges and are characterized by their start and end position. This means that\n * any character in the marker is marked by the marker. For example, if a character is moved outside of marker it stops being\n * \"special\" and the marker is shrunk. Similarly, when a character is moved into the marker from other place in document\n * model, it starts being \"special\" and the marker is enlarged.\n *\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\n * to the range which it is marking at the moment.\n *\n * Markers are built from a name and a range.\n *\n * Range of the marker is updated automatically when document changes, using\n * {@link module:engine/model/liverange~LiveRange live range} mechanism.\n *\n * Name is used to group and identify markers. Names have to be unique, but markers can be grouped by\n * using common prefixes, separated with `:`, for example: `user:john` or `search:3`. That's useful in term of creating\n * namespaces for custom elements (e.g. comments, highlights). You can use this prefixes in\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} listeners to listen on changes in a group of markers.\n * For instance: `model.markers.on( 'set:user', callback );` will be called whenever any `user:*` markers changes.\n *\n * There are two types of markers.\n *\n * 1. Markers managed directly, without using operations. They are added directly by {@link module:engine/model/writer~Writer}\n * to the {@link module:engine/model/markercollection~MarkerCollection} without any additional mechanism. They can be used\n * as bookmarks or visual markers. They are great for showing results of the find, or select link when the focus is in the input.\n *\n * 1. Markers managed using operations. These markers are also stored in {@link module:engine/model/markercollection~MarkerCollection}\n * but changes in these markers is managed the same way all other changes in the model structure - using operations.\n * Therefore, they are handled in the undo stack and synchronized between clients if the collaboration plugin is enabled.\n * This type of markers is useful for solutions like spell checking or comments.\n *\n * Both type of them should be added / updated by {@link module:engine/model/writer~Writer#addMarker}\n * and removed by {@link module:engine/model/writer~Writer#removeMarker} methods.\n *\n *\t\tmodel.change( ( writer ) => {\n * \t\t\tconst marker = writer.addMarker( name, { range, usingOperation: true } );\n *\n * \t\t\t// ...\n *\n * \t\t\twriter.removeMarker( marker );\n *\t\t} );\n *\n * See {@link module:engine/model/writer~Writer} to find more examples.\n *\n * Since markers need to track change in the document, for efficiency reasons, it is best to create and keep as little\n * markers as possible and remove them as soon as they are not needed anymore.\n *\n * Markers can be downcasted and upcasted.\n *\n * Markers downcast happens on {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} and\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} events.\n * Use {@link module:engine/conversion/downcast-converters downcast converters} or attach a custom converter to mentioned events.\n * For {@link module:engine/controller/datacontroller~DataController data pipeline}, marker should be downcasted to an element.\n * Then, it can be upcasted back to a marker. Again, use {@link module:engine/conversion/upcast-converters upcast converters} or\n * attach a custom converter to {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element}.\n *\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\n * to the range which it is marking at the moment.\n *\n * `Marker` instances are created and destroyed only by {@link ~MarkerCollection MarkerCollection}.\n */\nclass Marker {\n\t/**\n\t * Creates a marker instance.\n\t *\n\t * @param {String} name Marker name.\n\t * @param {module:engine/model/liverange~LiveRange} liveRange Range marked by the marker.\n\t * @param {Boolean} managedUsingOperations Specifies whether the marker is managed using operations.\n\t * @param {Boolean} affectsData Specifies whether the marker affects the data produced by the data pipeline\n\t * (is persisted in the editor's data).\n\t */\n\tconstructor( name, liveRange, managedUsingOperations, affectsData ) {\n\t\t/**\n\t\t * Marker's name.\n\t\t *\n\t\t * @readonly\n\t\t * @type {String}\n\t\t */\n\t\tthis.name = name;\n\n\t\t/**\n\t\t * Range marked by the marker.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:engine/model/liverange~LiveRange}\n\t\t */\n\t\tthis._liveRange = this._attachLiveRange( liveRange );\n\n\t\t/**\n\t\t * Flag indicates if the marker is managed using operations or not.\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._managedUsingOperations = managedUsingOperations;\n\n\t\t/**\n\t\t * Specifies whether the marker affects the data produced by the data pipeline\n\t\t * (is persisted in the editor's data).\n\t\t *\n\t\t * @private\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._affectsData = affectsData;\n\t}\n\n\t/**\n\t * A value indicating if the marker is managed using operations.\n\t * See {@link ~Marker marker class description} to learn more about marker types.\n\t * See {@link module:engine/model/writer~Writer#addMarker}.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget managedUsingOperations() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.' );\n\t\t}\n\n\t\treturn this._managedUsingOperations;\n\t}\n\n\t/**\n\t * A value indicating if the marker changes the data.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget affectsData() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.' );\n\t\t}\n\n\t\treturn this._affectsData;\n\t}\n\n\t/**\n\t * Returns current marker start position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetStart() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.' );\n\t\t}\n\n\t\treturn this._liveRange.start.clone();\n\t}\n\n\t/**\n\t * Returns current marker end position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tgetEnd() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.' );\n\t\t}\n\n\t\treturn this._liveRange.end.clone();\n\t}\n\n\t/**\n\t * Returns a range that represents the current state of the marker.\n\t *\n\t * Keep in mind that returned value is a {@link module:engine/model/range~Range Range}, not a\n\t * {@link module:engine/model/liverange~LiveRange LiveRange}. This means that it is up-to-date and relevant only\n\t * until next model document change. Do not store values returned by this method. Instead, store {@link ~Marker#name}\n\t * and get `Marker` instance from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection} every\n\t * time there is a need to read marker properties. This will guarantee that the marker has not been removed and\n\t * that it's data is up-to-date.\n\t *\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tgetRange() {\n\t\tif ( !this._liveRange ) {\n\t\t\tthrow new CKEditorError( 'marker-destroyed: Cannot use a destroyed marker instance.' );\n\t\t}\n\n\t\treturn this._liveRange.toRange();\n\t}\n\n\t/**\n\t * Binds new live range to the marker and detach the old one if is attached.\n\t *\n\t * @protected\n\t * @param {module:engine/model/liverange~LiveRange} liveRange Live range to attach\n\t * @returns {module:engine/model/liverange~LiveRange} Attached live range.\n\t */\n\t_attachLiveRange( liveRange ) {\n\t\tif ( this._liveRange ) {\n\t\t\tthis._detachLiveRange();\n\t\t}\n\n\t\t// Delegating does not work with namespaces. Alternatively, we could delegate all events (using `*`).\n\t\tliveRange.delegate( 'change:range' ).to( this );\n\t\tliveRange.delegate( 'change:content' ).to( this );\n\n\t\tthis._liveRange = liveRange;\n\n\t\treturn liveRange;\n\t}\n\n\t/**\n\t * Unbinds and destroys currently attached live range.\n\t *\n\t * @protected\n\t */\n\t_detachLiveRange() {\n\t\tthis._liveRange.stopDelegating( 'change:range', this );\n\t\tthis._liveRange.stopDelegating( 'change:content', this );\n\t\tthis._liveRange.detach();\n\t\tthis._liveRange = null;\n\t}\n\n\t/**\n\t * Fired whenever {@link ~Marker#_liveRange marker range} is changed due to changes on {@link module:engine/model/document~Document}.\n\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:range LiveRange change:range event}.\n\t *\n\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n\t * all event listeners listening to it should be removed. It is best to do it on\n\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n\t *\n\t * @see module:engine/model/liverange~LiveRange#event:change:range\n\t * @event change:range\n\t * @param {module:engine/model/range~Range} oldRange\n\t * @param {Object} data\n\t */\n\n\t/**\n\t * Fired whenever change on {@link module:engine/model/document~Document} is done inside {@link ~Marker#_liveRange marker range}.\n\t * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:content LiveRange change:content event}.\n\t *\n\t * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n\t * all event listeners listening to it should be removed. It is best to do it on\n\t * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n\t *\n\t * @see module:engine/model/liverange~LiveRange#event:change:content\n\t * @event change:content\n\t * @param {module:engine/model/range~Range} oldRange\n\t * @param {Object} data\n\t */\n}\n\nmix( Marker, EmitterMixin );\n\n/**\n * Cannot use a {@link module:engine/model/markercollection~MarkerCollection#destroy destroyed marker} instance.\n *\n * @error marker-destroyed\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/liveposition\n */\n\nimport Position from './position';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * `LivePosition` is a type of {@link module:engine/model/position~Position Position}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Contrary to {@link module:engine/model/position~Position}, `LivePosition` works only in roots that are\n * {@link module:engine/model/rootelement~RootElement}.\n * If {@link module:engine/model/documentfragment~DocumentFragment} is passed, error will be thrown.\n *\n * **Note:** Be very careful when dealing with `LivePosition`. Each `LivePosition` instance bind events that might\n * have to be unbound.\n * Use {@link module:engine/model/liveposition~LivePosition#detach} whenever you don't need `LivePosition` anymore.\n *\n * @extends module:engine/model/position~Position\n */\nexport default class LivePosition extends Position {\n\t/**\n\t * Creates a live position.\n\t *\n\t * @see module:engine/model/position~Position\n\t * @param {module:engine/model/rootelement~RootElement} root\n\t * @param {Array.<Number>} path\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness]\n\t */\n\tconstructor( root, path, stickiness = 'toNone' ) {\n\t\tsuper( root, path, stickiness );\n\n\t\tif ( !this.root.is( 'rootElement' ) ) {\n\t\t\t/**\n\t\t\t * LivePosition's root has to be an instance of RootElement.\n\t\t\t *\n\t\t\t * @error liveposition-root-not-rootelement\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'model-liveposition-root-not-rootelement: LivePosition\\'s root has to be an instance of RootElement.'\n\t\t\t);\n\t\t}\n\n\t\tbindWithDocument.call( this );\n\t}\n\n\t/**\n\t * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance\n\t * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n\t * referring to it).\n\t */\n\tdetach() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/position~Position position instance}, which is equal to this live position.\n\t *\n\t * @returns {module:engine/model/position~Position}\n\t */\n\ttoPosition() {\n\t\treturn new Position( this.root, this.path.slice(), this.stickiness );\n\t}\n\n\t/**\n\t * Creates a `LivePosition` instance that is equal to position.\n\t *\n\t * @param {module:engine/model/position~Position} position\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness]\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tstatic fromPosition( position, stickiness ) {\n\t\treturn new this( position.root, position.path.slice(), stickiness ? stickiness : position.stickiness );\n\t}\n\n\t/**\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liveposition~LivePosition._createAfter\n\t * @see module:engine/model/position~Position._createAfter\n\t * @param {module:engine/model/node~Node} node\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * @static\n\t * @protected\n\t * @method module:engine/model/liveposition~LivePosition._createBefore\n\t * @see module:engine/model/position~Position._createBefore\n\t * @param {module:engine/model/node~Node} node\n\t * @returns {module:engine/model/liveposition~LivePosition}\n\t */\n\n\t/**\n\t * Fired when `LivePosition` instance is changed due to changes on {@link module:engine/model/document~Document}.\n\t *\n\t * @event module:engine/model/liveposition~LivePosition#change\n\t * @param {module:engine/model/position~Position} oldPosition Position equal to this live position before it got changed.\n\t */\n}\n\n// Binds this `LivePosition` to the {@link module:engine/model/document~Document document} that owns\n// this position's {@link module:engine/model/position~Position#root root}.\n//\n// @private\nfunction bindWithDocument() {\n\tthis.listenTo(\n\t\tthis.root.document.model,\n\t\t'applyOperation',\n\t\t( event, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransform.call( this, operation );\n\t\t},\n\t\t{ priority: 'low' }\n\t);\n}\n\n// Updates this position accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\nfunction transform( operation ) {\n\tconst result = this.getTransformedByOperation( operation );\n\n\tif ( !this.isEqual( result ) ) {\n\t\tconst oldPosition = this.toPosition();\n\n\t\tthis.path = result.path;\n\t\tthis.root = result.root;\n\n\t\tthis.fire( 'change', oldPosition );\n\t}\n}\n\nmix( LivePosition, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/utils/insertcontent\n */\n\nimport Position from '../position';\nimport LivePosition from '../liveposition';\nimport Element from '../element';\nimport Range from '../range';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\nimport DocumentSelection from '../documentselection';\nimport Selection from '../selection';\n\n/**\n * Inserts content into the editor (specified selection) as one would expect the paste\n * functionality to work.\n *\n * If an instance of {@link module:engine/model/selection~Selection} is passed as `selectable` it will be modified\n * to the insertion selection (equal to a range to be selected after insertion).\n *\n * **Note:** Use {@link module:engine/model/model~Model#insertContent} instead of this function.\n * This function is only exposed to be reusable in algorithms which change the {@link module:engine/model/model~Model#insertContent}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n * module:engine/model/position~Position|module:engine/model/element~Element|\n * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} [selectable=model.document.selection]\n * Selection into which the content should be inserted.\n * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n */\nexport default function insertContent( model, content, selectable, placeOrOffset ) {\n\tmodel.change( writer => {\n\t\tlet selection;\n\n\t\tif ( !selectable ) {\n\t\t\tselection = model.document.selection;\n\t\t} else if ( selectable instanceof Selection || selectable instanceof DocumentSelection ) {\n\t\t\tselection = selectable;\n\t\t} else {\n\t\t\tselection = writer.createSelection( selectable, placeOrOffset );\n\t\t}\n\n\t\tif ( !selection.isCollapsed ) {\n\t\t\tmodel.deleteContent( selection );\n\t\t}\n\n\t\tconst insertion = new Insertion( model, writer, selection.anchor );\n\n\t\tlet nodesToInsert;\n\n\t\tif ( content.is( 'documentFragment' ) ) {\n\t\t\tnodesToInsert = content.getChildren();\n\t\t} else {\n\t\t\tnodesToInsert = [ content ];\n\t\t}\n\n\t\tinsertion.handleNodes( nodesToInsert, {\n\t\t\t// The set of children being inserted is the only set in this context\n\t\t\t// so it's the first and last (it's a hack ;)).\n\t\t\tisFirst: true,\n\t\t\tisLast: true\n\t\t} );\n\n\t\tconst newRange = insertion.getSelectionRange();\n\n\t\t/* istanbul ignore else */\n\t\tif ( newRange ) {\n\t\t\tif ( selection instanceof DocumentSelection ) {\n\t\t\t\twriter.setSelection( newRange );\n\t\t\t} else {\n\t\t\t\tselection.setTo( newRange );\n\t\t\t}\n\t\t} else {\n\t\t\t// We are not testing else because it's a safe check for unpredictable edge cases:\n\t\t\t// an insertion without proper range to select.\n\n\t\t\t/**\n\t\t\t * Cannot determine a proper selection range after insertion.\n\t\t\t *\n\t\t\t * @warning insertcontent-no-range\n\t\t\t */\n\t\t\tlog.warn( 'insertcontent-no-range: Cannot determine a proper selection range after insertion.' );\n\t\t}\n\t} );\n}\n\n/**\n * Utility class for performing content insertion.\n *\n * @private\n */\nclass Insertion {\n\tconstructor( model, writer, position ) {\n\t\t/**\n\t\t * The model in context of which the insertion should be performed.\n\t\t *\n\t\t * @member {module:engine/model~Model} #model\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * Batch to which operations will be added.\n\t\t *\n\t\t * @member {module:engine/controller/writer~Batch} #writer\n\t\t */\n\t\tthis.writer = writer;\n\n\t\t/**\n\t\t * The position at which (or near which) the next node will be inserted.\n\t\t *\n\t\t * @member {module:engine/model/position~Position} #position\n\t\t */\n\t\tthis.position = position;\n\n\t\t/**\n\t\t * Elements with which the inserted elements can be merged.\n\t\t *\n\t\t *\t\t<p>x^</p><p>y</p> + <p>z</p> (can merge to <p>x</p>)\n\t\t *\t\t<p>x</p><p>^y</p> + <p>z</p> (can merge to <p>y</p>)\n\t\t *\t\t<p>x^y</p> + <p>z</p> (can merge to <p>xy</p> which will be split during the action,\n\t\t *\t\t\t\t\t\t\t\tso both its pieces will be added to this set)\n\t\t *\n\t\t *\n\t\t * @member {Set} #canMergeWith\n\t\t */\n\t\tthis.canMergeWith = new Set( [ this.position.parent ] );\n\n\t\t/**\n\t\t * Schema of the model.\n\t\t *\n\t\t * @member {module:engine/model/schema~Schema} #schema\n\t\t */\n\t\tthis.schema = model.schema;\n\n\t\tthis._filterAttributesOf = [];\n\t}\n\n\t/**\n\t * Handles insertion of a set of nodes.\n\t *\n\t * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to insert.\n\t * @param {Object} parentContext Context in which parent of these nodes was supposed to be inserted.\n\t * If the parent context is passed it means that the parent element was stripped (was not allowed).\n\t */\n\thandleNodes( nodes, parentContext ) {\n\t\tnodes = Array.from( nodes );\n\n\t\tfor ( let i = 0; i < nodes.length; i++ ) {\n\t\t\tconst node = nodes[ i ];\n\n\t\t\tthis._handleNode( node, {\n\t\t\t\tisFirst: i === 0 && parentContext.isFirst,\n\t\t\t\tisLast: ( i === ( nodes.length - 1 ) ) && parentContext.isLast\n\t\t\t} );\n\t\t}\n\n\t\t// TMP this will become a post-fixer.\n\t\tthis.schema.removeDisallowedAttributes( this._filterAttributesOf, this.writer );\n\t\tthis._filterAttributesOf = [];\n\t}\n\n\t/**\n\t * Returns range to be selected after insertion.\n\t * Returns null if there is no valid range to select after insertion.\n\t *\n\t * @returns {module:engine/model/range~Range|null}\n\t */\n\tgetSelectionRange() {\n\t\tif ( this.nodeToSelect ) {\n\t\t\treturn Range._createOn( this.nodeToSelect );\n\t\t}\n\n\t\treturn this.model.schema.getNearestSelectionRange( this.position );\n\t}\n\n\t/**\n\t * Handles insertion of a single node.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node\n\t * @param {Object} context\n\t * @param {Boolean} context.isFirst Whether the given node is the first one in the content to be inserted.\n\t * @param {Boolean} context.isLast Whether the given node is the last one in the content to be inserted.\n\t */\n\t_handleNode( node, context ) {\n\t\t// Let's handle object in a special way.\n\t\t// * They should never be merged with other elements.\n\t\t// * If they are not allowed in any of the selection ancestors, they could be either autoparagraphed or totally removed.\n\t\tif ( this.schema.isObject( node ) ) {\n\t\t\tthis._handleObject( node, context );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Try to find a place for the given node.\n\t\t// Split the position.parent's branch up to a point where the node can be inserted.\n\t\t// If it isn't allowed in the whole branch, then of course don't split anything.\n\t\tconst isAllowed = this._checkAndSplitToAllowedPosition( node, context );\n\n\t\tif ( !isAllowed ) {\n\t\t\tthis._handleDisallowedNode( node, context );\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._insert( node );\n\n\t\t// After the node was inserted we may try to merge it with its siblings.\n\t\t// This should happen only if it was the first and/or last of the nodes (so only with boundary nodes)\n\t\t// and only if the selection was in those elements initially.\n\t\t//\n\t\t// E.g.:\n\t\t// <p>x^</p> + <p>y</p> => <p>x</p><p>y</p> => <p>xy[]</p>\n\t\t// and:\n\t\t// <p>x^y</p> + <p>z</p> => <p>x</p>^<p>y</p> + <p>z</p> => <p>x</p><p>y</p><p>z</p> => <p>xy[]z</p>\n\t\t// but:\n\t\t// <p>x</p><p>^</p><p>z</p> + <p>y</p> => <p>x</p><p>y</p><p>z</p> (no merging)\n\t\t// <p>x</p>[<img>]<p>z</p> + <p>y</p> => <p>x</p><p>y</p><p>z</p> (no merging, note: after running deletetContents\n\t\t//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t it's exactly the same case as above)\n\t\tthis._mergeSiblingsOf( node, context );\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/element~Element} node The object element.\n\t * @param {Object} context\n\t */\n\t_handleObject( node, context ) {\n\t\t// Try finding it a place in the tree.\n\t\tif ( this._checkAndSplitToAllowedPosition( node ) ) {\n\t\t\tthis._insert( node );\n\t\t}\n\t\t// Try autoparagraphing.\n\t\telse {\n\t\t\tthis._tryAutoparagraphing( node, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The disallowed node which needs to be handled.\n\t * @param {Object} context\n\t */\n\t_handleDisallowedNode( node, context ) {\n\t\t// If the node is an element, try inserting its children (strip the parent).\n\t\tif ( node.is( 'element' ) ) {\n\t\t\tthis.handleNodes( node.getChildren(), context );\n\t\t}\n\t\t// If text is not allowed, try autoparagraphing it.\n\t\telse {\n\t\t\tthis._tryAutoparagraphing( node, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node to insert.\n\t */\n\t_insert( node ) {\n\t\t/* istanbul ignore if */\n\t\tif ( !this.schema.checkChild( this.position, node ) ) {\n\t\t\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\n\t\t\t// Note that it would often be a silent issue if we insert node in a place where it's not allowed.\n\t\t\tlog.error(\n\t\t\t\t'insertcontent-wrong-position: The node cannot be inserted on the given position.',\n\t\t\t\t{ node, position: this.position }\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst livePos = LivePosition.fromPosition( this.position, 'toNext' );\n\n\t\tthis.writer.insert( node, this.position );\n\n\t\tthis.position = livePos.toPosition();\n\t\tlivePos.detach();\n\n\t\t// The last inserted object should be selected because we can't put a collapsed selection after it.\n\t\tif ( this.schema.isObject( node ) && !this.schema.checkChild( this.position, '$text' ) ) {\n\t\t\tthis.nodeToSelect = node;\n\t\t} else {\n\t\t\tthis.nodeToSelect = null;\n\t\t}\n\n\t\tthis._filterAttributesOf.push( node );\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t */\n\t_mergeSiblingsOf( node, context ) {\n\t\tif ( !( node instanceof Element ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mergeLeft = this._canMergeLeft( node, context );\n\t\tconst mergeRight = this._canMergeRight( node, context );\n\t\tconst mergePosLeft = LivePosition._createBefore( node );\n\t\tmergePosLeft.stickiness = 'toNext';\n\t\tconst mergePosRight = LivePosition._createAfter( node );\n\t\tmergePosRight.stickiness = 'toNext';\n\n\t\tif ( mergeLeft ) {\n\t\t\tconst livePosition = LivePosition.fromPosition( this.position );\n\t\t\tlivePosition.stickiness = 'toNext';\n\n\t\t\tthis.writer.merge( mergePosLeft );\n\n\t\t\tthis.position = livePosition.toPosition();\n\t\t\tlivePosition.detach();\n\t\t}\n\n\t\tif ( mergeRight ) {\n\t\t\t/* istanbul ignore if */\n\t\t\tif ( !this.position.isEqual( mergePosRight ) ) {\n\t\t\t\t// Algorithm's correctness check. We should never end up here but it's good to know that we did.\n\t\t\t\t// At this point the insertion position should be after the node we'll merge. If it isn't,\n\t\t\t\t// it should need to be secured as in the left merge case.\n\t\t\t\tlog.error( 'insertcontent-wrong-position-on-merge: The insertion position should equal the merge position' );\n\t\t\t}\n\n\t\t\t// Move the position to the previous node, so it isn't moved to the graveyard on merge.\n\t\t\t// <p>x</p>[]<p>y</p> => <p>x[]</p><p>y</p>\n\t\t\tthis.position = Position._createAt( mergePosRight.nodeBefore, 'end' );\n\n\t\t\t// OK:  <p>xx[]</p> + <p>yy</p> => <p>xx[]yy</p> (when sticks to previous)\n\t\t\t// NOK: <p>xx[]</p> + <p>yy</p> => <p>xxyy[]</p> (when sticks to next)\n\t\t\tconst livePosition = new LivePosition( this.position.root, this.position.path, 'toPrevious' );\n\n\t\t\tthis.writer.merge( mergePosRight );\n\n\t\t\tthis.position = livePosition.toPosition();\n\t\t\tlivePosition.detach();\n\t\t}\n\n\t\tif ( mergeLeft || mergeRight ) {\n\t\t\t// After merge elements that were marked by _insert() to be filtered might be gone so\n\t\t\t// we need to mark the new container.\n\t\t\tthis._filterAttributesOf.push( this.position.parent );\n\t\t}\n\n\t\tmergePosLeft.detach();\n\t\tmergePosRight.detach();\n\t}\n\n\t/**\n\t * Checks whether specified node can be merged with previous sibling element.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t * @returns {Boolean}\n\t */\n\t_canMergeLeft( node, context ) {\n\t\tconst previousSibling = node.previousSibling;\n\n\t\treturn context.isFirst &&\n\t\t\t( previousSibling instanceof Element ) &&\n\t\t\tthis.canMergeWith.has( previousSibling ) &&\n\t\t\tthis.model.schema.checkMerge( previousSibling, node );\n\t}\n\n\t/**\n\t * Checks whether specified node can be merged with next sibling element.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n\t * @param {Object} context\n\t * @returns {Boolean}\n\t */\n\t_canMergeRight( node, context ) {\n\t\tconst nextSibling = node.nextSibling;\n\n\t\treturn context.isLast &&\n\t\t\t( nextSibling instanceof Element ) &&\n\t\t\tthis.canMergeWith.has( nextSibling ) &&\n\t\t\tthis.model.schema.checkMerge( node, nextSibling );\n\t}\n\n\t/**\n\t * Tries wrapping the node in a new paragraph and inserting it this way.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node which needs to be autoparagraphed.\n\t * @param {Object} context\n\t */\n\t_tryAutoparagraphing( node, context ) {\n\t\tconst paragraph = this.writer.createElement( 'paragraph' );\n\n\t\t// Do not autoparagraph if the paragraph won't be allowed there,\n\t\t// cause that would lead to an infinite loop. The paragraph would be rejected in\n\t\t// the next _handleNode() call and we'd be here again.\n\t\tif ( this._getAllowedIn( paragraph, this.position.parent ) && this.schema.checkChild( paragraph, node ) ) {\n\t\t\tparagraph._appendChild( node );\n\t\t\tthis._handleNode( paragraph, context );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {module:engine/model/node~Node} node\n\t * @returns {Boolean} Whether an allowed position was found.\n\t * `false` is returned if the node isn't allowed at any position up in the tree, `true` if was.\n\t */\n\t_checkAndSplitToAllowedPosition( node ) {\n\t\tconst allowedIn = this._getAllowedIn( node, this.position.parent );\n\n\t\tif ( !allowedIn ) {\n\t\t\treturn false;\n\t\t}\n\n\t\twhile ( allowedIn != this.position.parent ) {\n\t\t\t// If a parent which we'd need to leave is a limit element, break.\n\t\t\tif ( this.schema.isLimit( this.position.parent ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( this.position.isAtStart ) {\n\t\t\t\tconst parent = this.position.parent;\n\t\t\t\tthis.position = this.writer.createPositionBefore( parent );\n\n\t\t\t\t// Special case – parent is empty (<p>^</p>) so isAtStart == isAtEnd == true.\n\t\t\t\t// We can remove the element after moving selection out of it.\n\t\t\t\tif ( parent.isEmpty ) {\n\t\t\t\t\tthis.writer.remove( parent );\n\t\t\t\t}\n\t\t\t} else if ( this.position.isAtEnd ) {\n\t\t\t\tthis.position = this.writer.createPositionAfter( this.position.parent );\n\t\t\t} else {\n\t\t\t\tconst tempPos = this.writer.createPositionAfter( this.position.parent );\n\n\t\t\t\tthis.writer.split( this.position );\n\n\t\t\t\tthis.position = tempPos;\n\n\t\t\t\tthis.canMergeWith.add( this.position.nodeAfter );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets the element in which the given node is allowed. It checks the passed element and all its ancestors.\n\t *\n\t * @private\n\t * @param {module:engine/model/node~Node} node The node to check.\n\t * @param {module:engine/model/element~Element} element The element in which the node's correctness should be checked.\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\t_getAllowedIn( node, element ) {\n\t\tif ( this.schema.checkChild( element, node ) ) {\n\t\t\treturn element;\n\t\t}\n\n\t\tif ( element.parent ) {\n\t\t\treturn this._getAllowedIn( node, element.parent );\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/utils/deletecontent\n */\n\nimport LivePosition from '../liveposition';\nimport Range from '../range';\nimport DocumentSelection from '../documentselection';\n\n/**\n * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n *\n * **Note:** Use {@link module:engine/model/model~Model#deleteContent} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#deleteContent}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * Selection of which the content should be deleted.\n * @param {module:engine/model/batch~Batch} batch Batch to which the operations will be added.\n * @param {Object} [options]\n * @param {Boolean} [options.leaveUnmerged=false] Whether to merge elements after removing the content of the selection.\n *\n * For example `<heading>x[x</heading><paragraph>y]y</paragraph>` will become:\n *\n * * `<heading>x^y</heading>` with the option disabled (`leaveUnmerged == false`)\n * * `<heading>x^</heading><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n *\n * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n * elements will not be merged.\n *\n * @param {Boolean} [options.doNotResetEntireContent=false] Whether to skip replacing the entire content with a\n * paragraph when the entire content was selected.\n *\n * For example `<heading>[x</heading><paragraph>y]</paragraph>` will become:\n *\n * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n * * `<heading>^</heading>` with enabled (`doNotResetEntireContent == true`).\n */\nexport default function deleteContent( model, selection, options = {} ) {\n\tif ( selection.isCollapsed ) {\n\t\treturn;\n\t}\n\n\tconst schema = model.schema;\n\n\tmodel.change( writer => {\n\t\t// 1. Replace the entire content with paragraph.\n\t\t// See: https://github.com/ckeditor/ckeditor5-engine/issues/1012#issuecomment-315017594.\n\t\tif ( !options.doNotResetEntireContent && shouldEntireContentBeReplacedWithParagraph( schema, selection ) ) {\n\t\t\treplaceEntireContentWithParagraph( writer, selection, schema );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst selRange = selection.getFirstRange();\n\t\tconst startPos = selRange.start;\n\t\tconst endPos = LivePosition.fromPosition( selRange.end, 'toNext' );\n\n\t\t// 2. Remove the content if there is any.\n\t\tif ( !selRange.start.isTouching( selRange.end ) ) {\n\t\t\twriter.remove( selRange );\n\t\t}\n\n\t\t// 3. Merge elements in the right branch to the elements in the left branch.\n\t\t// The only reasonable (in terms of data and selection correctness) case in which we need to do that is:\n\t\t//\n\t\t// <heading type=1>Fo[</heading><paragraph>]ar</paragraph> => <heading type=1>Fo^ar</heading>\n\t\t//\n\t\t// However, the algorithm supports also merging deeper structures (up to the depth of the shallower branch),\n\t\t// as it's hard to imagine what should actually be the default behavior. Usually, specific features will\n\t\t// want to override that behavior anyway.\n\t\tif ( !options.leaveUnmerged ) {\n\t\t\tmergeBranches( writer, startPos, endPos );\n\n\t\t\t// TMP this will be replaced with a postifxer.\n\t\t\t// We need to check and strip disallowed attributes in all nested nodes because after merge\n\t\t\t// some attributes could end up in a path where are disallowed.\n\t\t\t//\n\t\t\t// e.g. bold is disallowed for <H1>\n\t\t\t// <h1>Fo{o</h1><p>b}a<b>r</b><p> -> <h1>Fo{}a<b>r</b><h1> -> <h1>Fo{}ar<h1>.\n\t\t\tschema.removeDisallowedAttributes( startPos.parent.getChildren(), writer );\n\t\t}\n\n\t\tif ( selection instanceof DocumentSelection ) {\n\t\t\twriter.setSelection( startPos );\n\t\t} else {\n\t\t\tselection.setTo( startPos );\n\t\t}\n\n\t\t// 4. Autoparagraphing.\n\t\t// Check if a text is allowed in the new container. If not, try to create a new paragraph (if it's allowed here).\n\t\tif ( shouldAutoparagraph( schema, startPos ) ) {\n\t\t\tinsertParagraph( writer, startPos, selection );\n\t\t}\n\n\t\tendPos.detach();\n\t} );\n}\n\n// This function is a result of reaching the Ballmer's peak for just the right amount of time.\n// Even I had troubles documenting it after a while and after reading it again I couldn't believe that it really works.\nfunction mergeBranches( writer, startPos, endPos ) {\n\tconst startParent = startPos.parent;\n\tconst endParent = endPos.parent;\n\n\t// If both positions ended up in the same parent, then there's nothing more to merge:\n\t// <$root><p>x[]</p><p>{}y</p></$root> => <$root><p>xy</p>[]{}</$root>\n\tif ( startParent == endParent ) {\n\t\treturn;\n\t}\n\n\t// If one of the positions is a limit element, then there's nothing to merge because we don't want to cross the limit boundaries.\n\tif ( writer.model.schema.isLimit( startParent ) || writer.model.schema.isLimit( endParent ) ) {\n\t\treturn;\n\t}\n\n\t// Check if operations we'll need to do won't need to cross object or limit boundaries.\n\t// E.g., we can't merge endParent into startParent in this case:\n\t// <limit><startParent>x[]</startParent></limit><endParent>{}</endParent>\n\tif ( !checkCanBeMerged( startPos, endPos, writer.model.schema ) ) {\n\t\treturn;\n\t}\n\n\t// Remember next positions to merge. For example:\n\t// <a><b>x[]</b></a><c><d>{}y</d></c>\n\t// will become:\n\t// <a><b>xy</b>[]</a><c>{}</c>\n\tstartPos = writer.createPositionAfter( startParent );\n\tendPos = writer.createPositionBefore( endParent );\n\n\tif ( !endPos.isEqual( startPos ) ) {\n\t\t// In this case, before we merge, we need to move `endParent` to the `startPos`:\n\t\t// <a><b>x[]</b></a><c><d>{}y</d></c>\n\t\t// becomes:\n\t\t// <a><b>x</b>[]<d>y</d></a><c>{}</c>\n\t\twriter.insert( endParent, startPos );\n\t}\n\n\t// Merge two siblings:\n\t// <a>x</a>[]<b>y</b> -> <a>xy</a> (the usual case)\n\t// <a><b>x</b>[]<d>y</d></a><c></c> -> <a><b>xy</b>[]</a><c></c> (this is the \"move parent\" case shown above)\n\twriter.merge( startPos );\n\n\t// Remove empty end ancestors:\n\t// <a>fo[o</a><b><a><c>bar]</c></a></b>\n\t// becomes:\n\t// <a>fo[]</a><b><a>{}</a></b>\n\t// So we can remove <a> and <b>.\n\twhile ( endPos.parent.isEmpty ) {\n\t\tconst parentToRemove = endPos.parent;\n\n\t\tendPos = writer.createPositionBefore( parentToRemove );\n\n\t\twriter.remove( parentToRemove );\n\t}\n\n\t// Continue merging next level.\n\tmergeBranches( writer, startPos, endPos );\n}\n\nfunction shouldAutoparagraph( schema, position ) {\n\tconst isTextAllowed = schema.checkChild( position, '$text' );\n\tconst isParagraphAllowed = schema.checkChild( position, 'paragraph' );\n\n\treturn !isTextAllowed && isParagraphAllowed;\n}\n\n// Check if parents of two positions can be merged by checking if there are no limit/object\n// boundaries between those two positions.\n//\n// E.g. in <bQ><p>x[]</p></bQ><widget><caption>{}</caption></widget>\n// we'll check <p>, <bQ>, <widget> and <caption>.\n// Usually, widget and caption are marked as objects/limits in the schema, so in this case merging will be blocked.\nfunction checkCanBeMerged( leftPos, rightPos, schema ) {\n\tconst rangeToCheck = new Range( leftPos, rightPos );\n\n\tfor ( const value of rangeToCheck.getWalker() ) {\n\t\tif ( schema.isLimit( value.item ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction insertParagraph( writer, position, selection ) {\n\tconst paragraph = writer.createElement( 'paragraph' );\n\n\twriter.insert( paragraph, position );\n\n\tif ( selection instanceof DocumentSelection ) {\n\t\twriter.setSelection( paragraph, 0 );\n\t} else {\n\t\tselection.setTo( paragraph, 0 );\n\t}\n}\n\nfunction replaceEntireContentWithParagraph( writer, selection ) {\n\tconst limitElement = writer.model.schema.getLimitElement( selection );\n\n\twriter.remove( writer.createRangeIn( limitElement ) );\n\tinsertParagraph( writer, writer.createPositionAt( limitElement, 0 ), selection );\n}\n\n// We want to replace the entire content with a paragraph when:\n// * the entire content is selected,\n// * selection contains at least two elements,\n// * whether the paragraph is allowed in schema in the common ancestor.\nfunction shouldEntireContentBeReplacedWithParagraph( schema, selection ) {\n\tconst limitElement = schema.getLimitElement( selection );\n\n\tif ( !selection.containsEntireContent( limitElement ) ) {\n\t\treturn false;\n\t}\n\n\tconst range = selection.getFirstRange();\n\n\tif ( range.start.parent == range.end.parent ) {\n\t\treturn false;\n\t}\n\n\treturn schema.checkChild( limitElement, 'paragraph' );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/utils/modifyselection\n */\n\nimport Position from '../position';\nimport TreeWalker from '../treewalker';\nimport Range from '../range';\nimport { isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils/src/unicode';\nimport DocumentSelection from '../documentselection';\n\nconst wordBoundaryCharacters = ' ,.?!:;\"-()';\n\n/**\n * Modifies the selection. Currently, the supported modifications are:\n *\n * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n * Possible values for `unit` are:\n *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n *  why `'character'` value is most natural and common method of modifying selection.\n *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n *  extension will include whole \"surrogate pair\".\n *  * `'word'` - moves selection by a whole word.\n *\n * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n *\n * **Note:** Use {@link module:engine/model/model~Model#modifySelection} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#modifySelection}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which\n * the selection modification should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * The selection to modify.\n * @param {Object} [options]\n * @param {'forward'|'backward'} [options.direction='forward'] The direction in which the selection should be modified.\n * @param {'character'|'codePoint'|'word'} [options.unit='character'] The unit by which selection should be modified.\n */\nexport default function modifySelection( model, selection, options = {} ) {\n\tconst schema = model.schema;\n\tconst isForward = options.direction != 'backward';\n\tconst unit = options.unit ? options.unit : 'character';\n\n\tconst focus = selection.focus;\n\n\tconst walker = new TreeWalker( {\n\t\tboundaries: getSearchRange( focus, isForward ),\n\t\tsingleCharacters: true,\n\t\tdirection: isForward ? 'forward' : 'backward'\n\t} );\n\n\tconst data = { walker, schema, isForward, unit };\n\n\tlet next;\n\n\twhile ( ( next = walker.next() ) ) {\n\t\tif ( next.done ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = tryExtendingTo( data, next.value );\n\n\t\tif ( position ) {\n\t\t\tif ( selection instanceof DocumentSelection ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\twriter.setSelectionFocus( position );\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tselection.setFocus( position );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n// Checks whether the selection can be extended to the the walker's next value (next position).\n// @param {{ walker, unit, isForward, schema }} data\n// @param {module:engine/view/treewalker~TreeWalkerValue} value\nfunction tryExtendingTo( data, value ) {\n\t// If found text, we can certainly put the focus in it. Let's just find a correct position\n\t// based on the unit.\n\tif ( value.type == 'text' ) {\n\t\tif ( data.unit === 'word' ) {\n\t\t\treturn getCorrectWordBreakPosition( data.walker, data.isForward );\n\t\t}\n\n\t\treturn getCorrectPosition( data.walker, data.unit, data.isForward );\n\t}\n\n\t// Entering an element.\n\tif ( value.type == ( data.isForward ? 'elementStart' : 'elementEnd' ) ) {\n\t\t// If it's an object, we can select it now.\n\t\tif ( data.schema.isObject( value.item ) ) {\n\t\t\treturn Position._createAt( value.item, data.isForward ? 'after' : 'before' );\n\t\t}\n\n\t\t// If text allowed on this position, extend to this place.\n\t\tif ( data.schema.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\treturn value.nextPosition;\n\t\t}\n\t}\n\t// Leaving an element.\n\telse {\n\t\t// If leaving a limit element, stop.\n\t\tif ( data.schema.isLimit( value.item ) ) {\n\t\t\t// NOTE: Fast-forward the walker until the end.\n\t\t\tdata.walker.skip( () => true );\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If text allowed on this position, extend to this place.\n\t\tif ( data.schema.checkChild( value.nextPosition, '$text' ) ) {\n\t\t\treturn value.nextPosition;\n\t\t}\n\t}\n}\n\n// Finds a correct position by walking in a text node and checking whether selection can be extended to given position\n// or should be extended further.\n//\n// @param {module:engine/model/treewalker~TreeWalker} walker\n// @param {String} unit The unit by which selection should be modified.\nfunction getCorrectPosition( walker, unit ) {\n\tconst textNode = walker.position.textNode;\n\n\tif ( textNode ) {\n\t\tconst data = textNode.data;\n\t\tlet offset = walker.position.offset - textNode.startOffset;\n\n\t\twhile ( isInsideSurrogatePair( data, offset ) || ( unit == 'character' && isInsideCombinedSymbol( data, offset ) ) ) {\n\t\t\twalker.next();\n\n\t\t\toffset = walker.position.offset - textNode.startOffset;\n\t\t}\n\t}\n\n\treturn walker.position;\n}\n\n// Finds a correct position of a word break by walking in a text node and checking whether selection can be extended to given position\n// or should be extended further.\n//\n// @param {module:engine/model/treewalker~TreeWalker} walker\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction getCorrectWordBreakPosition( walker, isForward ) {\n\tlet textNode = walker.position.textNode;\n\n\tif ( textNode ) {\n\t\tlet offset = walker.position.offset - textNode.startOffset;\n\n\t\twhile ( !isAtWordBoundary( textNode.data, offset, isForward ) && !isAtNodeBoundary( textNode, offset, isForward ) ) {\n\t\t\twalker.next();\n\n\t\t\t// Check of adjacent text nodes with different attributes (like BOLD).\n\t\t\t// Example          : 'foofoo []bar<$text bold=\"true\">bar</$text> bazbaz'\n\t\t\t// should expand to : 'foofoo [bar<$text bold=\"true\">bar</$text>] bazbaz'.\n\t\t\tconst nextNode = isForward ? walker.position.nodeAfter : walker.position.nodeBefore;\n\n\t\t\t// Scan only text nodes. Ignore inline elements (like `<softBreak>`).\n\t\t\tif ( nextNode && nextNode.is( 'text' ) ) {\n\t\t\t\t// Check boundary char of an adjacent text node.\n\t\t\t\tconst boundaryChar = nextNode.data.charAt( isForward ? 0 : nextNode.data.length - 1 );\n\n\t\t\t\t// Go to the next node if the character at the boundary of that node belongs to the same word.\n\t\t\t\tif ( !wordBoundaryCharacters.includes( boundaryChar ) ) {\n\t\t\t\t\t// If adjacent text node belongs to the same word go to it & reset values.\n\t\t\t\t\twalker.next();\n\n\t\t\t\t\ttextNode = walker.position.textNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toffset = walker.position.offset - textNode.startOffset;\n\t\t}\n\t}\n\n\treturn walker.position;\n}\n\nfunction getSearchRange( start, isForward ) {\n\tconst root = start.root;\n\tconst searchEnd = Position._createAt( root, isForward ? 'end' : 0 );\n\n\tif ( isForward ) {\n\t\treturn new Range( start, searchEnd );\n\t} else {\n\t\treturn new Range( searchEnd, start );\n\t}\n}\n\n// Checks if selection is on word boundary.\n//\n// @param {String} data The text node value to investigate.\n// @param {Number} offset Position offset.\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction isAtWordBoundary( data, offset, isForward ) {\n\t// The offset to check depends on direction.\n\tconst offsetToCheck = offset + ( isForward ? 0 : -1 );\n\n\treturn wordBoundaryCharacters.includes( data.charAt( offsetToCheck ) );\n}\n\n// Checks if selection is on node boundary.\n//\n// @param {module:engine/model/text~Text} textNode The text node to investigate.\n// @param {Number} offset Position offset.\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\nfunction isAtNodeBoundary( textNode, offset, isForward ) {\n\treturn offset === ( isForward ? textNode.endOffset : 0 );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/utils/getselectedcontent\n */\n\n/**\n * Gets a clone of the selected content.\n *\n * For example, for the following selection:\n *\n * ```html\n * <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n * ```\n *\n * It will return a document fragment with such a content:\n *\n * ```html\n * <quote><h>st</h></quote><p>se</p>\n * ```\n *\n * @param {module:engine/model/model~Model} model The model in context of which\n * the selection modification should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * The selection of which content will be returned.\n * @returns {module:engine/model/documentfragment~DocumentFragment}\n */\nexport default function getSelectedContent( model, selection ) {\n\treturn model.change( writer => {\n\t\tconst frag = writer.createDocumentFragment();\n\t\tconst range = selection.getFirstRange();\n\n\t\tif ( !range || range.isCollapsed ) {\n\t\t\treturn frag;\n\t\t}\n\n\t\tconst root = range.start.root;\n\t\tconst commonPath = range.start.getCommonPath( range.end );\n\t\tconst commonParent = root.getNodeByPath( commonPath );\n\n\t\t// ## 1st step\n\t\t//\n\t\t// First, we'll clone a fragment represented by a minimal flat range\n\t\t// containing the original range to be cloned.\n\t\t// E.g. let's consider such a range:\n\t\t//\n\t\t// <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n\t\t//\n\t\t// A minimal flat range containing this one is:\n\t\t//\n\t\t// <p>x</p>[<quote><p>y</p><h>first</h></quote><p>second</p>]<p>z</p>\n\t\t//\n\t\t// We can easily clone this structure, preserving e.g. the <quote> element.\n\t\tlet flatSubtreeRange;\n\n\t\tif ( range.start.parent == range.end.parent ) {\n\t\t\t// The original range is flat, so take it.\n\t\t\tflatSubtreeRange = range;\n\t\t} else {\n\t\t\tflatSubtreeRange = writer.createRange(\n\t\t\t\twriter.createPositionAt( commonParent, range.start.path[ commonPath.length ] ),\n\t\t\t\twriter.createPositionAt( commonParent, range.end.path[ commonPath.length ] + 1 )\n\t\t\t);\n\t\t}\n\n\t\tconst howMany = flatSubtreeRange.end.offset - flatSubtreeRange.start.offset;\n\n\t\t// Clone the whole contents.\n\t\tfor ( const item of flatSubtreeRange.getItems( { shallow: true } ) ) {\n\t\t\tif ( item.is( 'textProxy' ) ) {\n\t\t\t\twriter.appendText( item.data, item.getAttributes(), frag );\n\t\t\t} else {\n\t\t\t\twriter.append( item._clone( true ), frag );\n\t\t\t}\n\t\t}\n\n\t\t// ## 2nd step\n\t\t//\n\t\t// If the original range wasn't flat, then we need to remove the excess nodes from the both ends of the cloned fragment.\n\t\t//\n\t\t// For example, for the range shown in the 1st step comment, we need to remove these pieces:\n\t\t//\n\t\t// <quote>[<p>y</p>]<h>[fir]st</h></quote><p>se[cond]</p>\n\t\t//\n\t\t// So this will be the final copied content:\n\t\t//\n\t\t// <quote><h>st</h></quote><p>se</p>\n\t\t//\n\t\t// In order to do that, we remove content from these two ranges:\n\t\t//\n\t\t// [<quote><p>y</p><h>fir]st</h></quote><p>se[cond</p>]\n\t\tif ( flatSubtreeRange != range ) {\n\t\t\t// Find the position of the original range in the cloned fragment.\n\t\t\tconst newRange = range._getTransformedByMove( flatSubtreeRange.start, writer.createPositionAt( frag, 0 ), howMany )[ 0 ];\n\n\t\t\tconst leftExcessRange = writer.createRange( writer.createPositionAt( frag, 0 ), newRange.start );\n\t\t\tconst rightExcessRange = writer.createRange( newRange.end, writer.createPositionAt( frag, 'end' ) );\n\n\t\t\tremoveRangeContent( rightExcessRange, writer );\n\t\t\tremoveRangeContent( leftExcessRange, writer );\n\t\t}\n\n\t\treturn frag;\n\t} );\n}\n\n// After https://github.com/ckeditor/ckeditor5-engine/issues/690 is fixed,\n// this function will, most likely, be able to rewritten using getMinimalFlatRanges().\nfunction removeRangeContent( range, writer ) {\n\tconst parentsToCheck = [];\n\n\tArray.from( range.getItems( { direction: 'backward' } ) )\n\t\t// We should better store ranges because text proxies will lose integrity\n\t\t// with the text nodes when we'll start removing content.\n\t\t.map( item => writer.createRangeOn( item ) )\n\t\t// Filter only these items which are fully contained in the passed range.\n\t\t//\n\t\t// E.g. for the following range: [<quote><p>y</p><h>fir]st</h>\n\t\t// the walker will return the entire <h> element, when only the \"fir\" item inside it is fully contained.\n\t\t.filter( itemRange => {\n\t\t\t// We should be able to use Range.containsRange, but https://github.com/ckeditor/ckeditor5-engine/issues/691.\n\t\t\tconst contained =\n\t\t\t\t( itemRange.start.isAfter( range.start ) || itemRange.start.isEqual( range.start ) ) &&\n\t\t\t\t( itemRange.end.isBefore( range.end ) || itemRange.end.isEqual( range.end ) );\n\n\t\t\treturn contained;\n\t\t} )\n\t\t.forEach( itemRange => {\n\t\t\tparentsToCheck.push( itemRange.start.parent );\n\n\t\t\twriter.remove( itemRange );\n\t\t} );\n\n\t// Remove ancestors of the removed items if they turned to be empty now\n\t// (their whole content was contained in the range).\n\tparentsToCheck.forEach( parentToCheck => {\n\t\tlet parent = parentToCheck;\n\n\t\twhile ( parent.parent && parent.isEmpty ) {\n\t\t\tconst removeRange = writer.createRangeOn( parent );\n\n\t\t\tparent = parent.parent;\n\n\t\t\twriter.remove( removeRange );\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/utils/selection-post-fixer\n */\n\nimport Range from '../range';\nimport Position from '../position';\n\n/**\n * Injects selection post-fixer to the model.\n *\n * The role of the selection post-fixer is to ensure that the selection is in a correct place\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct position means that:\n *\n * * All collapsed selection ranges are in a place where the {@link module:engine/model/schema~Schema}\n * allows a `$text`.\n * * None of the selection's non-collapsed ranges crosses a {@link module:engine/model/schema~Schema#isLimit limit element}\n * boundary (a range must be rooted within one limit element).\n * * Only {@link module:engine/model/schema~Schema#isObject object elements} can be selected from the outside\n * (e.g. `[<paragraph>foo</paragraph>]` is invalid). This rule applies independently to both selection ends, so this\n * selection is correct: `<paragraph>f[oo</paragraph><image></image>]`.\n *\n * If the position is not correct, the post-fixer will automatically correct it.\n *\n * ## Fixing a non-collapsed selection\n *\n * See as an example a selection that starts in a P1 element and ends inside the text of a TD element\n * (`[` and `]` are range boundaries and `(l)` denotes an element defined as `isLimit=true`):\n *\n *\t\troot\n *\t\t |- element P1\n *\t\t |   |- \"foo\"                                      root\n *\t\t |- element TABLE (l)                   P1         TABLE             P2\n *\t\t |   |- element TR (l)                 f o[o     TR      TR         b a r\n *\t\t |   |   |- element TD (l)                       TD      TD\n *\t\t |   |       |- \"aaa\"                          a]a a    b b b\n *\t\t |   |- element TR (l)\n *\t\t |   |   |- element TD (l)                           ||\n *\t\t |   |       |- \"bbb\"                                ||\n *\t\t |- element P2                                       VV\n *\t\t |   |- \"bar\"\n *\t\t                                                   root\n *\t\t                                        P1         TABLE]            P2\n *\t\t                                       f o[o     TR      TR         b a r\n *\t\t                                                 TD      TD\n *\t\t                                               a a a    b b b\n *\n * In the example above, the TABLE, TR and TD are defined as `isLimit=true` in the schema. The range which is not contained within\n * a single limit element must be expanded to select the outermost limit element. The range end is inside the text node of the TD element.\n * As the TD element is a child of the TR and TABLE elements, where both are defined as `isLimit=true` in the schema, the range must be\n * expanded to select the whole TABLE element.\n *\n * **Note** If the selection contains multiple ranges, the method returns a minimal set of ranges that are not intersecting after expanding\n * them to select `isLimit=true` elements.\n *\n * @param {module:engine/model/model~Model} model\n */\nexport function injectSelectionPostFixer( model ) {\n\tmodel.document.registerPostFixer( writer => selectionPostFixer( writer, model ) );\n}\n\n// The selection post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\nfunction selectionPostFixer( writer, model ) {\n\tconst selection = model.document.selection;\n\tconst schema = model.schema;\n\n\tconst ranges = [];\n\n\tlet wasFixed = false;\n\n\tfor ( const modelRange of selection.getRanges() ) {\n\t\t// Go through all ranges in selection and try fixing each of them.\n\t\t// Those ranges might overlap but will be corrected later.\n\t\tconst correctedRange = tryFixingRange( modelRange, schema );\n\n\t\tif ( correctedRange ) {\n\t\t\tranges.push( correctedRange );\n\t\t\twasFixed = true;\n\t\t} else {\n\t\t\tranges.push( modelRange );\n\t\t}\n\t}\n\n\t// If any of ranges were corrected update the selection.\n\tif ( wasFixed ) {\n\t\t// The above algorithm might create ranges that intersects each other when selection contains more then one range.\n\t\t// This is case happens mostly on Firefox which creates multiple ranges for selected table.\n\t\tlet fixedRanges = ranges;\n\n\t\t// Fixing selection with many ranges usually breaks the selection in Firefox. As only Firefox supports multiple selection ranges\n\t\t// we simply create one continuous range from fixed selection ranges (even if they are not adjacent).\n\t\tif ( ranges.length > 1 ) {\n\t\t\tconst selectionStart = ranges[ 0 ].start;\n\t\t\tconst selectionEnd = ranges[ ranges.length - 1 ].end;\n\n\t\t\tfixedRanges = [ new Range( selectionStart, selectionEnd ) ];\n\t\t}\n\n\t\twriter.setSelection( fixedRanges, { backward: selection.isBackward } );\n\t}\n}\n\n// Tries fixing a range if it's incorrect.\n//\n// @param {module:engine/model/range~Range} range\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingRange( range, schema ) {\n\tif ( range.isCollapsed ) {\n\t\treturn tryFixingCollapsedRange( range, schema );\n\t}\n\n\treturn tryFixingNonCollapsedRage( range, schema );\n}\n\n// Tries to fix collapsed ranges.\n//\n// * Fixes situation when a range is in a place where $text is not allowed\n//\n// @param {module:engine/model/range~Range} range Collapsed range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingCollapsedRange( range, schema ) {\n\tconst originalPosition = range.start;\n\n\tconst nearestSelectionRange = schema.getNearestSelectionRange( originalPosition );\n\n\t// This might be null ie when editor data is empty.\n\t// In such cases there is no need to fix the selection range.\n\tif ( !nearestSelectionRange ) {\n\t\treturn null;\n\t}\n\n\tconst fixedPosition = nearestSelectionRange.start;\n\n\t// Fixed position is the same as original - no need to return corrected range.\n\tif ( originalPosition.isEqual( fixedPosition ) ) {\n\t\treturn null;\n\t}\n\n\t// Check single node selection (happens in tables).\n\tif ( fixedPosition.nodeAfter && schema.isLimit( fixedPosition.nodeAfter ) ) {\n\t\treturn new Range( fixedPosition, Position._createAfter( fixedPosition.nodeAfter ) );\n\t}\n\n\treturn new Range( fixedPosition );\n}\n\n// Tries to fix an expanded range.\n//\n// @param {module:engine/model/range~Range} range Expanded range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingNonCollapsedRage( range, schema ) {\n\tconst start = range.start;\n\tconst end = range.end;\n\n\tconst isTextAllowedOnStart = schema.checkChild( start, '$text' );\n\tconst isTextAllowedOnEnd = schema.checkChild( end, '$text' );\n\n\tconst startLimitElement = schema.getLimitElement( start );\n\tconst endLimitElement = schema.getLimitElement( end );\n\n\t// Ranges which both end are inside the same limit element (or root) might needs only minor fix.\n\tif ( startLimitElement === endLimitElement ) {\n\t\t// Range is valid when both position allows to place a text:\n\t\t// - <block>f[oobarba]z</block>\n\t\t// This would be \"fixed\" by a next check but as it will be the same it's better to return null so the selection stays the same.\n\t\tif ( isTextAllowedOnStart && isTextAllowedOnEnd ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Range that is on non-limit element (or is partially) must be fixed so it is placed inside the block around $text:\n\t\t// - [<block>foo</block>]    ->    <block>[foo]</block>\n\t\t// - [<block>foo]</block>    ->    <block>[foo]</block>\n\t\t// - <block>f[oo</block>]    ->    <block>f[oo]</block>\n\t\tif ( checkSelectionOnNonLimitElements( start, end, schema ) ) {\n\t\t\tconst fixedStart = schema.getNearestSelectionRange( start, 'forward' );\n\t\t\tconst fixedEnd = schema.getNearestSelectionRange( end, 'backward' );\n\n\t\t\treturn new Range( fixedStart ? fixedStart.start : start, fixedEnd ? fixedEnd.start : end );\n\t\t}\n\t}\n\n\tconst isStartInLimit = startLimitElement && !startLimitElement.is( 'rootElement' );\n\tconst isEndInLimit = endLimitElement && !endLimitElement.is( 'rootElement' );\n\n\t// At this point we eliminated valid positions on text nodes so if one of range positions is placed inside a limit element\n\t// then the range crossed limit element boundaries and needs to be fixed.\n\tif ( isStartInLimit || isEndInLimit ) {\n\t\t// Although we've already found limit element on start/end positions we must find the outer-most limit element.\n\t\t// as limit elements might be nested directly inside (ie table > tableRow > tableCell).\n\t\tconst startPosition = Position._createAt( startLimitElement, 0 );\n\t\tconst endPosition = Position._createAt( endLimitElement, 0 );\n\n\t\tconst fixedStart = isStartInLimit ? expandSelectionOnIsLimitNode( startPosition, schema, 'start' ) : start;\n\t\tconst fixedEnd = isEndInLimit ? expandSelectionOnIsLimitNode( endPosition, schema, 'end' ) : end;\n\n\t\treturn new Range( fixedStart, fixedEnd );\n\t}\n\n\t// Range was not fixed at this point so it is valid - ie it was placed around limit element already.\n\treturn null;\n}\n\n// Expands selection so it contains whole limit node.\n//\n// @param {module:engine/model/position~Position} position\n// @param {module:engine/model/schema~Schema} schema\n// @param {String} expandToDirection Direction of expansion - either 'start' or 'end' of the range.\n// @returns {module:engine/model/position~Position}\nfunction expandSelectionOnIsLimitNode( position, schema, expandToDirection ) {\n\tlet node = position.parent;\n\tlet parent = node;\n\n\t// Find outer most isLimit block as such blocks might be nested (ie. in tables).\n\twhile ( schema.isLimit( parent ) && parent.parent ) {\n\t\tnode = parent;\n\t\tparent = parent.parent;\n\t}\n\n\t// Depending on direction of expanding selection return position before or after found node.\n\treturn expandToDirection === 'start' ? Position._createBefore( node ) : Position._createAfter( node );\n}\n\n// Checks whether both range ends are placed around non-limit elements.\n//\n// @param {module:engine/model/position~Position} start\n// @param {module:engine/model/position~Position} end\n// @param {module:engine/model/schema~Schema} schema\nfunction checkSelectionOnNonLimitElements( start, end, schema ) {\n\tconst startIsOnBlock = ( start.nodeAfter && !schema.isLimit( start.nodeAfter ) ) || schema.checkChild( start, '$text' );\n\tconst endIsOnBlock = ( end.nodeBefore && !schema.isLimit( end.nodeBefore ) ) || schema.checkChild( end, '$text' );\n\n\treturn startIsOnBlock && endIsOnBlock;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/model\n */\n\nimport Batch from './batch';\nimport Writer from './writer';\nimport Schema from './schema';\nimport Document from './document';\nimport MarkerCollection from './markercollection';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ModelElement from './element';\nimport ModelRange from './range';\nimport ModelPosition from './position';\nimport ModelSelection from './selection';\n\nimport insertContent from './utils/insertcontent';\nimport deleteContent from './utils/deletecontent';\nimport modifySelection from './utils/modifyselection';\nimport getSelectedContent from './utils/getselectedcontent';\nimport { injectSelectionPostFixer } from './utils/selection-post-fixer';\n\n/**\n * Editor's data model. Read about the model in the\n * {@glink framework/guides/architecture/editing-engine engine architecture guide}.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Model {\n\tconstructor() {\n\t\t/**\n\t\t * Model's marker collection.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/markercollection~MarkerCollection}\n\t\t */\n\t\tthis.markers = new MarkerCollection();\n\n\t\t/**\n\t\t * Model's document.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/document~Document}\n\t\t */\n\t\tthis.document = new Document( this );\n\n\t\t/**\n\t\t * Model's schema.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/schema~Schema}\n\t\t */\n\t\tthis.schema = new Schema();\n\n\t\t/**\n\t\t * All callbacks added by {@link module:engine/model/model~Model#change} or\n\t\t * {@link module:engine/model/model~Model#enqueueChange} methods waiting to be executed.\n\t\t *\n\t\t * @private\n\t\t * @type {Array.<Function>}\n\t\t */\n\t\tthis._pendingChanges = [];\n\n\t\t/**\n\t\t * The last created and currently used writer instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/writer~Writer}\n\t\t */\n\t\tthis._currentWriter = null;\n\n\t\t[ 'insertContent', 'deleteContent', 'modifySelection', 'getSelectedContent', 'applyOperation' ]\n\t\t\t.forEach( methodName => this.decorate( methodName ) );\n\n\t\t// Adding operation validation with `highest` priority, so it is called before any other feature would like\n\t\t// to do anything with the operation. If the operation has incorrect parameters it should throw on the earliest occasion.\n\t\tthis.on( 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\toperation._validate();\n\t\t}, { priority: 'highest' } );\n\n\t\t// Register some default abstract entities.\n\t\tthis.schema.register( '$root', {\n\t\t\tisLimit: true\n\t\t} );\n\t\tthis.schema.register( '$block', {\n\t\t\tallowIn: '$root',\n\t\t\tisBlock: true\n\t\t} );\n\t\tthis.schema.register( '$text', {\n\t\t\tallowIn: '$block'\n\t\t} );\n\t\tthis.schema.register( '$clipboardHolder', {\n\t\t\tallowContentOf: '$root',\n\t\t\tisLimit: true\n\t\t} );\n\t\tthis.schema.extend( '$text', { allowIn: '$clipboardHolder' } );\n\n\t\t// Element needed by `upcastElementToMarker` converter.\n\t\t// This element temporarily represents marker bound during conversion process and is removed\n\t\t// at the end of conversion. `UpcastDispatcher` or at least `Conversion` class looks like a better for this\n\t\t// registration but both know nothing about Schema.\n\t\tthis.schema.register( '$marker', {\n\t\t\tallowIn: [ '$root', '$block' ]\n\t\t} );\n\n\t\tinjectSelectionPostFixer( this );\n\t}\n\n\t/**\n\t * The `change()` method is the primary way of changing the model. You should use it to modify all document nodes\n\t * (including detached nodes – i.e. nodes not added to the {@link module:engine/model/model~Model#document model document}),\n\t * the {@link module:engine/model/document~Document#selection document's selection}, and\n\t * {@link module:engine/model/model~Model#markers model markers}.\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t} );\n\t *\n\t * All changes inside the change block use the same {@link module:engine/model/batch~Batch} so they are combined\n\t * into a single undo step.\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' ); // foo.\n\t *\n\t *\t\t\tmodel.change( writer => {\n\t *\t\t\t\twriter.insertText( 'bar', paragraph, 'end' ); // foobar.\n\t *\t\t\t} );\n\t *\n\t * \t\t\twriter.insertText( 'bom', paragraph, 'end' ); // foobarbom.\n\t *\t\t} );\n\t *\n\t * The callback of the `change()` block is executed synchronously.\n\t *\n\t * You can also return a value from the change block.\n\t *\n\t *\t\tconst img = model.change( writer => {\n\t *\t\t\treturn writer.createElement( 'img' );\n\t *\t\t} );\n\t *\n\t * @see #enqueueChange\n\t * @param {Function} callback Callback function which may modify the model.\n\t * @returns {*} Value returned by the callback.\n\t */\n\tchange( callback ) {\n\t\tif ( this._pendingChanges.length === 0 ) {\n\t\t\t// If this is the outermost block, create a new batch and start `_runPendingChanges` execution flow.\n\t\t\tthis._pendingChanges.push( { batch: new Batch(), callback } );\n\n\t\t\treturn this._runPendingChanges()[ 0 ];\n\t\t} else {\n\t\t\t// If this is not the outermost block, just execute the callback.\n\t\t\treturn callback( this._currentWriter );\n\t\t}\n\t}\n\n\t/**\n\t * The `enqueueChange()` method performs similar task as the {@link #change `change()` method}, with two major differences.\n\t *\n\t * First, the callback of `enqueueChange()` is executed when all other enqueued changes are done. It might be executed\n\t * immediately if it is not nested in any other change block, but if it is nested in another (enqueue)change block,\n\t * it will be delayed and executed after the outermost block.\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconsole.log( 1 );\n\t *\n\t *\t\t\tmodel.enqueueChange( writer => {\n\t *\t\t\t\tconsole.log( 2 );\n\t *\t\t\t} );\n\t *\n\t * \t\t\tconsole.log( 3 );\n\t *\t\t} ); // Will log: 1, 3, 2.\n\t *\n\t * Second, it lets you define the {@link module:engine/model/batch~Batch} into which you want to add your changes.\n\t * By default, a new batch is created. In the sample above, `change` and `enqueueChange` blocks use a different\n\t * batch (and different {@link module:engine/model/writer~Writer} since each of them operates on the separate batch).\n\t *\n\t * When using the `enqueueChange()` block you can also add some changes to the batch you used before.\n\t *\n\t *\t\tmodel.enqueueChange( batch, writer => {\n\t *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n\t *\t\t} );\n\t *\n\t * The batch instance can be obtained from {@link module:engine/model/writer~Writer#batch the writer}.\n\t *\n\t * @param {module:engine/model/batch~Batch|'transparent'|'default'} batchOrType Batch or batch type should be used in the callback.\n\t * If not defined, a new batch will be created.\n\t * @param {Function} callback Callback function which may modify the model.\n\t */\n\tenqueueChange( batchOrType, callback ) {\n\t\tif ( typeof batchOrType === 'string' ) {\n\t\t\tbatchOrType = new Batch( batchOrType );\n\t\t} else if ( typeof batchOrType == 'function' ) {\n\t\t\tcallback = batchOrType;\n\t\t\tbatchOrType = new Batch();\n\t\t}\n\n\t\tthis._pendingChanges.push( { batch: batchOrType, callback } );\n\n\t\tif ( this._pendingChanges.length == 1 ) {\n\t\t\tthis._runPendingChanges();\n\t\t}\n\t}\n\n\t/**\n\t * {@link module:utils/observablemixin~ObservableMixin#decorate Decorated} function for applying\n\t * {@link module:engine/model/operation/operation~Operation operations} to the model.\n\t *\n\t * This is a low-level way of changing the model. It is exposed for very specific use cases (like the undo feature).\n\t * Normally, to modify the model, you will want to use {@link module:engine/model/writer~Writer `Writer`}.\n\t * See also {@glink framework/guides/architecture/editing-engine#changing-the-model Changing the model} section\n\t * of the {@glink framework/guides/architecture/editing-engine Editing architecture} guide.\n\t *\n\t * @param {module:engine/model/operation/operation~Operation} operation The operation to apply.\n\t */\n\tapplyOperation( operation ) {\n\t\toperation._execute();\n\t}\n\n\t/**\n\t * Inserts content at the position in the editor specified by the selection, as one would expect the paste\n\t * functionality to work.\n\t *\n\t * This is a high-level method. It takes the {@link #schema schema} into consideration when inserting\n\t * the content, clears the given selection's content before inserting nodes and moves the selection\n\t * to its target position at the end of the process.\n\t * It can split elements, merge them, wrap bare text nodes with paragraphs, etc. &mdash; just like the\n\t * pasting feature should do.\n\t *\n\t * For lower-level methods see {@link module:engine/model/writer~Writer `Writer`}.\n\t *\n\t * This method, unlike {@link module:engine/model/writer~Writer `Writer`}'s methods, does not have to be used\n\t * inside a {@link #change `change()` block}.\n\t *\n\t * # Conversion and schema\n\t *\n\t * Inserting elements and text nodes into the model is not enough to make CKEditor 5 render that content\n\t * to the user. CKEditor 5 implements a model-view-controller architecture and what `model.insertContent()` does\n\t * is only adding nodes to the model. Additionally, you need to define\n\t * {@glink framework/guides/architecture/editing-engine#conversion converters} between the model and view\n\t * and define those nodes in the {@glink framework/guides/architecture/editing-engine#schema schema}.\n\t *\n\t * So, while this method may seem similar to CKEditor 4 `editor.insertHtml()` (in fact, both methods\n\t * are used for paste-like content insertion), the CKEditor 5 method cannot be use to insert arbitrary HTML\n\t * unless converters are defined for all elements and attributes in that HTML.\n\t *\n\t * # Examples\n\t *\n\t * Using `insertContent()` with a manually created model structure:\n\t *\n\t *\t\t// Let's create a document fragment containing such content as:\n\t *\t\t//\n\t *\t\t// <paragrap>foo</paragraph>\n\t *\t\t// <blockQuote>\n\t *\t\t//    <paragraph>bar</paragraph>\n\t *\t\t// </blockQuote>\n\t *\t\tconst docFrag = editor.model.change( writer => {\n\t *\t\t\tconst p1 = writer.createElement( 'paragraph' );\n\t *\t\t\tconst p2 = writer.createElement( 'paragraph' );\n\t *\t\t\tconst blockQuote = writer.createElement( 'blockQuote' );\n\t *\t\t\tconst docFrag = writer.createDocumentFragment();\n\t *\n\t *\t\t\twriter.append( p1, docFrag );\n\t *\t\t\twriter.append( blockQuote, docFrag );\n\t *\t\t\twriter.append( p2, blockQuote );\n\t *\t\t\twriter.insertText( 'foo', p1 );\n\t *\t\t\twriter.insertText( 'bar', p2 );\n\t *\n\t *\t\t\treturn docFrag;\n\t *\t\t} );\n\t *\n\t *\t\t// insertContent() does not have to be used in a change() block. It can, though,\n\t *\t\t// so this code could be moved to the callback defined above.\n\t *\t\teditor.model.insertContent( docFrag );\n\t *\n\t * Using `insertContent()` with an HTML string converted to a model document fragment (similar to the pasting mechanism):\n\t *\n\t *\t\t// You can create your own HtmlDataProcessor instance or use editor.data.processor\n\t *\t\t// if you have not overridden the default one (which is the HtmlDataProcessor instance).\n\t *\t\tconst htmlDP = new HtmlDataProcessor();\n\t *\n\t *\t\t// Convert an HTML string to a view document fragment:\n\t *\t\tconst viewFragment = htmlDP.toView( htmlString );\n\t *\n\t *\t\t// Convert the view document fragment to a model document fragment\n\t *\t\t// in the context of $root. This conversion takes the schema into\n\t *\t\t// account so if, for example, the view document fragment contained a bare text node,\n\t *\t\t// this text node cannot be a child of $root, so it will be automatically\n\t *\t\t// wrapped with a <paragraph>. You can define the context yourself (in the second parameter),\n\t *\t\t// and e.g. convert the content like it would happen in a <paragraph>.\n\t *\t\t// Note: The clipboard feature uses a custom context called $clipboardHolder\n\t *\t\t// which has a loosened schema.\n\t *\t\tconst modelFragment = editor.data.toModel( viewFragment );\n\t *\n\t *\t\teditor.model.insertContent( modelFragment );\n\t *\n\t * By default this method will use the document selection but it can also be used with a position, range or selection instance.\n\t *\n\t *\t\t// Insert text at the current document selection position.\n\t *\t\teditor.model.change( writer => {\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ) );\n\t *\t\t} );\n\t *\n\t *\t\t// Insert text at a given position - the document selection will not be modified.\n\t *\t\teditor.model.change( writer => {\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ), doc.getRoot(), 2 );\n\t *\n\t *\t\t\t// Which is a shorthand for:\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ), writer.createPositionAt( doc.getRoot(), 2 ) );\n\t *\t\t} );\n\t *\n\t * If an instance of {@link module:engine/model/selection~Selection} is passed as `selectable`\n\t * it will be moved to the target position (where the document selection should be moved after the insertion).\n\t *\n\t *\t\teditor.model.change( writer => {\n\t *\t\t\t// Insert text replacing the given selection instance.\n\t *\t\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t\teditor.model.insertContent( writer.createText( 'x' ), selection );\n\t *\n\t *\t\t\t// insertContent() modifies the passed selection instance so it can be used to set the document selection.\n\t *\t\t\t// Note: This is not necessary when you passed the document selection to insertContent().\n\t *\t\t\twriter.setSelection( selection );\n\t *\t\t} );\n\t *\n\t * @fires insertContent\n\t * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/position~Position|module:engine/model/item~Item|\n\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} [selectable=model.document.selection]\n\t * The selection into which the content should be inserted. If not provided the current model document selection will be used.\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] To be used when a model item was passed as `selectable`.\n\t * This param defines a position in relation to that item.\n\t */\n\tinsertContent( content, selectable, placeOrOffset ) {\n\t\tinsertContent( this, content, selectable, placeOrOffset );\n\t}\n\n\t/**\n\t * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n\t *\n\t * **Note:** For the sake of predictability, the resulting selection should always be collapsed.\n\t * In cases where a feature wants to modify deleting behavior so selection isn't collapsed\n\t * (e.g. a table feature may want to keep row selection after pressing <kbd>Backspace</kbd>),\n\t * then that behavior should be implemented in the view's listener. At the same time, the table feature\n\t * will need to modify this method's behavior too, e.g. to \"delete contents and then collapse\n\t * the selection inside the last selected cell\" or \"delete the row and collapse selection somewhere near\".\n\t * That needs to be done in order to ensure that other features which use `deleteContent()` will work well with tables.\n\t *\n\t * @fires deleteContent\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * Selection of which the content should be deleted.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.leaveUnmerged=false] Whether to merge elements after removing the content of the selection.\n\t *\n\t * For example `<heading1>x[x</heading1><paragraph>y]y</paragraph>` will become:\n\t *\n\t * * `<heading1>x^y</heading1>` with the option disabled (`leaveUnmerged == false`)\n\t * * `<heading1>x^</heading1><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n\t *\n\t * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n\t * elements will not be merged.\n\t *\n\t * @param {Boolean} [options.doNotResetEntireContent=false] Whether to skip replacing the entire content with a\n\t * paragraph when the entire content was selected.\n\t *\n\t * For example `<heading1>[x</heading1><paragraph>y]</paragraph>` will become:\n\t *\n\t * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n\t * * `<heading1>^</heading1>` with enabled (`doNotResetEntireContent == true`)\n\t */\n\tdeleteContent( selection, options ) {\n\t\tdeleteContent( this, selection, options );\n\t}\n\n\t/**\n\t * Modifies the selection. Currently, the supported modifications are:\n\t *\n\t * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n\t * Possible values for `unit` are:\n\t *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n\t *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n\t *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n\t *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n\t *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n\t *  why `'character'` value is most natural and common method of modifying selection.\n\t *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n\t *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n\t *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n\t *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n\t *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n\t *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n\t *  extension will include whole \"surrogate pair\".\n\t *  * `'word'` - moves selection by a whole word.\n\t *\n\t * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n\t *\n\t * @fires modifySelection\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * The selection to modify.\n\t * @param {Object} [options]\n\t * @param {'forward'|'backward'} [options.direction='forward'] The direction in which the selection should be modified.\n\t * @param {'character'|'codePoint'|'word'} [options.unit='character'] The unit by which selection should be modified.\n\t */\n\tmodifySelection( selection, options ) {\n\t\tmodifySelection( this, selection, options );\n\t}\n\n\t/**\n\t * Gets a clone of the selected content.\n\t *\n\t * For example, for the following selection:\n\t *\n\t * ```html\n\t * <paragraph>x</paragraph>\n\t * <blockQuote>\n\t *\t<paragraph>y</paragraph>\n\t *\t<heading1>fir[st</heading1>\n\t * </blockQuote>\n\t * <paragraph>se]cond</paragraph>\n\t * <paragraph>z</paragraph>\n\t * ```\n\t *\n\t * It will return a document fragment with such a content:\n\t *\n\t * ```html\n\t * <blockQuote>\n\t *\t<heading1>st</heading1>\n\t * </blockQuote>\n\t * <paragraph>se</paragraph>\n\t * ```\n\t *\n\t * @fires getSelectedContent\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\t * The selection of which content will be returned.\n\t * @returns {module:engine/model/documentfragment~DocumentFragment}\n\t */\n\tgetSelectedContent( selection ) {\n\t\treturn getSelectedContent( this, selection );\n\t}\n\n\t/**\n\t * Checks whether the given {@link module:engine/model/range~Range range} or\n\t * {@link module:engine/model/element~Element element}\n\t * has any content.\n\t *\n\t * Content is any text node or element which is registered in the {@link module:engine/model/schema~Schema schema}.\n\t *\n\t * @param {module:engine/model/range~Range|module:engine/model/element~Element} rangeOrElement Range or element to check.\n\t * @returns {Boolean}\n\t */\n\thasContent( rangeOrElement ) {\n\t\tif ( rangeOrElement instanceof ModelElement ) {\n\t\t\trangeOrElement = ModelRange._createIn( rangeOrElement );\n\t\t}\n\n\t\tif ( rangeOrElement.isCollapsed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor ( const item of rangeOrElement.getItems() ) {\n\t\t\t// Remember, `TreeWalker` returns always `textProxy` nodes.\n\t\t\tif ( item.is( 'textProxy' ) || this.schema.isObject( item ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Creates a position from the given root and path in that root.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionFromPath `Writer#createPositionFromPath()`}.\n\t *\n\t * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n\t * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n\t * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n\t * See {@link module:engine/model/position~PositionStickiness}.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionFromPath( root, path, stickiness ) {\n\t\treturn new ModelPosition( root, path, stickiness );\n\t}\n\n\t/**\n\t * Creates position at the given location. The location can be specified as:\n\t *\n\t * * a {@link module:engine/model/position~Position position},\n\t * * a parent element and offset in that element,\n\t * * a parent element and `'end'` (the position will be set at the end of that element),\n\t * * a {@link module:engine/model/item~Item model item} and `'before'` or `'after'`\n\t * (the position will be set before or after the given model item).\n\t *\n\t * This method is a shortcut to other factory methods such as:\n\t *\n\t * * {@link module:engine/model/model~Model#createPositionBefore `createPositionBefore()`},\n\t * * {@link module:engine/model/model~Model#createPositionAfter `createPositionAfter()`}.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionAt `Writer#createPositionAt()`},\n\t *\n\t * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n\t * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n\t * first parameter is a {@link module:engine/model/item~Item model item}.\n\t */\n\tcreatePositionAt( itemOrPosition, offset ) {\n\t\treturn ModelPosition._createAt( itemOrPosition, offset );\n\t}\n\n\t/**\n\t * Creates a new position after the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionAfter `Writer#createPositionAfter()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionAfter( item ) {\n\t\treturn ModelPosition._createAfter( item );\n\t}\n\n\t/**\n\t * Creates a new position before the given {@link module:engine/model/item~Item model item}.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createPositionBefore `Writer#createPositionBefore()`}.\n\t *\n\t * @param {module:engine/model/item~Item} item Item before which the position should be placed.\n\t * @returns {module:engine/model/position~Position}\n\t */\n\tcreatePositionBefore( item ) {\n\t\treturn ModelPosition._createBefore( item );\n\t}\n\n\t/**\n\t * Creates a range spanning from the `start` position to the `end` position.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createRange `Writer#createRange()`}:\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconst range = writer.createRange( start, end );\n\t *\t\t} );\n\t *\n\t * @param {module:engine/model/position~Position} start Start position.\n\t * @param {module:engine/model/position~Position} [end] End position. If not set, the range will be collapsed\n\t * to the `start` position.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRange( start, end ) {\n\t\treturn new ModelRange( start, end );\n\t}\n\n\t/**\n\t * Creates a range inside the given element which starts before the first child of\n\t * that element and ends after the last child of that element.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createRangeIn `Writer#createRangeIn()`}:\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconst range = writer.createRangeIn( paragraph );\n\t *\t\t} );\n\t *\n\t * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeIn( element ) {\n\t\treturn ModelRange._createIn( element );\n\t}\n\n\t/**\n\t * Creates a range that starts before the given {@link module:engine/model/item~Item model item} and ends after it.\n\t *\n\t * Note: This method is also available on `writer` instance as\n\t * {@link module:engine/model/writer~Writer#createRangeOn `Writer.createRangeOn()`}:\n\t *\n\t *\t\tmodel.change( writer => {\n\t *\t\t\tconst range = writer.createRangeOn( paragraph );\n\t *\t\t} );\n\t *\n\t * @param {module:engine/model/item~Item} item\n\t * @returns {module:engine/model/range~Range}\n\t */\n\tcreateRangeOn( item ) {\n\t\treturn ModelRange._createOn( item );\n\t}\n\n\t/**\n\t * Creates a new selection instance based on:\n\t *\n\t * * the given {@link module:engine/model/selection~Selection selection},\n\t * * or based on the given {@link module:engine/model/range~Range range},\n\t * * or based on the given iterable collection of {@link module:engine/model/range~Range ranges}\n\t * * or at the given {@link module:engine/model/position~Position position},\n\t * * or on the given {@link module:engine/model/element~Element element},\n\t * * or creates an empty selection if no arguments were passed.\n\t *\n\t * Note: This method is also available as\n\t * {@link module:engine/model/writer~Writer#createSelection `Writer#createSelection()`}.\n\t *\n\t *\t\t// Creates empty selection without ranges.\n\t *\t\tconst selection = writer.createSelection();\n\t *\n\t *\t\t// Creates selection at the given range.\n\t *\t\tconst range = writer.createRange( start, end );\n\t *\t\tconst selection = writer.createSelection( range );\n\t *\n\t *\t\t// Creates selection at the given ranges\n\t *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n\t *\t\tconst selection = writer.createSelection( ranges );\n\t *\n\t *\t\t// Creates selection from the other selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst otherSelection = writer.createSelection();\n\t *\t\tconst selection = writer.createSelection( otherSelection );\n\t *\n\t *\t\t// Creates selection from the given document selection.\n\t *\t\t// Note: It doesn't copies selection attributes.\n\t *\t\tconst documentSelection = model.document.selection;\n\t *\t\tconst selection = writer.createSelection( documentSelection );\n\t *\n\t *\t\t// Creates selection at the given position.\n\t *\t\tconst position = writer.createPositionFromPath( root, path );\n\t *\t\tconst selection = writer.createSelection( position );\n\t *\n\t *\t\t// Creates selection at the given offset in the given element.\n\t *\t\tconst paragraph = writer.createElement( 'paragraph' );\n\t *\t\tconst selection = writer.createSelection( paragraph, offset );\n\t *\n\t *\t\t// Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n\t *\t\t// first child of that element and ends after the last child of that element.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n\t *\n\t *\t\t// Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n\t *\t\t// just after the item.\n\t *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n\t *\n\t *\t\t// Additional options (`'backward'`) can be specified as the last argument.\n\t *\n\t *\t\t// Creates backward selection.\n\t *\t\tconst selection = writer.createSelection( range, { backward: true } );\n\t *\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n\t * module:engine/model/position~Position|module:engine/model/element~Element|\n\t * Iterable.<module:engine/model/range~Range>|module:engine/model/range~Range|null} selectable\n\t * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n\t * @param {Object} [options]\n\t * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n\t * @returns {module:engine/model/selection~Selection}\n\t */\n\tcreateSelection( selectable, placeOrOffset, options ) {\n\t\treturn new ModelSelection( selectable, placeOrOffset, options );\n\t}\n\n\t/**\n\t * Creates a {@link module:engine/model/batch~Batch} instance.\n\t *\n\t * **Note:** In most cases creating a batch instance is not necessary as they are created when using:\n\t *\n\t * * {@link #change `change()`},\n\t * * {@link #enqueueChange `enqueueChange()`}.\n\t *\n\t * @returns {module:engine/model/batch~Batch}\n\t */\n\tcreateBatch() {\n\t\treturn new Batch();\n\t}\n\n\t/**\n\t * Removes all events listeners set by model instance and destroys {@link module:engine/model/document~Document}.\n\t */\n\tdestroy() {\n\t\tthis.document.destroy();\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Common part of {@link module:engine/model/model~Model#change} and {@link module:engine/model/model~Model#enqueueChange}\n\t * which calls callbacks and returns array of values returned by these callbacks.\n\t *\n\t * @private\n\t * @returns {Array.<*>} Array of values returned by callbacks.\n\t */\n\t_runPendingChanges() {\n\t\tconst ret = [];\n\n\t\tthis.fire( '_beforeChanges' );\n\n\t\twhile ( this._pendingChanges.length ) {\n\t\t\t// Create a new writer using batch instance created for this chain of changes.\n\t\t\tconst currentBatch = this._pendingChanges[ 0 ].batch;\n\t\t\tthis._currentWriter = new Writer( this, currentBatch );\n\n\t\t\t// Execute changes callback and gather the returned value.\n\t\t\tconst callbackReturnValue = this._pendingChanges[ 0 ].callback( this._currentWriter );\n\t\t\tret.push( callbackReturnValue );\n\n\t\t\t// Fire internal `_change` event.\n\t\t\tthis.fire( '_change', this._currentWriter );\n\n\t\t\tthis._pendingChanges.shift();\n\t\t\tthis._currentWriter = null;\n\t\t}\n\n\t\tthis.fire( '_afterChanges' );\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Fired after leaving each {@link module:engine/model/model~Model#enqueueChange} block or outermost\n\t * {@link module:engine/model/model~Model#change} block.\n\t *\n\t * **Note:** This is an internal event! Use {@link module:engine/model/document~Document#event:change} instead.\n\t *\n\t * @protected\n\t * @event _change\n\t * @param {module:engine/model/writer~Writer} writer `Writer` instance that has been used in the change block.\n\t */\n\n\t/**\n\t * Fired when entering the outermost {@link module:engine/model/model~Model#enqueueChange} or\n\t * {@link module:engine/model/model~Model#change} block.\n\t *\n\t * @protected\n\t * @event _beforeChanges\n\t */\n\n\t/**\n\t * Fired when leaving the outermost {@link module:engine/model/model~Model#enqueueChange} or\n\t * {@link module:engine/model/model~Model#change} block.\n\t *\n\t * @protected\n\t * @event _afterChanges\n\t */\n\n\t/**\n\t * Fired every time any {@link module:engine/model/operation/operation~Operation operation} is applied on the model\n\t * using {@link #applyOperation}.\n\t *\n\t * Note that this event is suitable only for very specific use-cases. Use it if you need to listen to every single operation\n\t * applied on the document. However, in most cases {@link module:engine/model/document~Document#event:change} should\n\t * be used.\n\t *\n\t * A few callbacks are already added to this event by engine internal classes:\n\t *\n\t * * with `highest` priority operation is validated,\n\t * * with `normal` priority operation is executed,\n\t * * with `low` priority the {@link module:engine/model/document~Document} updates its version,\n\t * * with `low` priority {@link module:engine/model/liveposition~LivePosition} and {@link module:engine/model/liverange~LiveRange}\n\t * update themselves.\n\t *\n\t * @event applyOperation\n\t * @param {Array} args Arguments of the `applyOperation` which is an array with a single element - applied\n\t * {@link module:engine/model/operation/operation~Operation operation}.\n\t */\n\n\t/**\n\t * Event fired when {@link #insertContent} method is called.\n\t *\n\t * The {@link #insertContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * **Note** The `selectable` parameter for the {@link #insertContent} is optional. When `undefined` value is passed the method uses\n\t * `model.document.selection`.\n\t *\n\t * @event insertContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #deleteContent} method is called.\n\t *\n\t * The {@link #deleteContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event deleteContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #modifySelection} method is called.\n\t *\n\t * The {@link #modifySelection default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event modifySelection\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n\n\t/**\n\t * Event fired when {@link #getSelectedContent} method is called.\n\t *\n\t * The {@link #getSelectedContent default action of that method} is implemented as a\n\t * listener to this event so it can be fully customized by the features.\n\t *\n\t * @event getSelectedContent\n\t * @param {Array} args The arguments passed to the original method.\n\t */\n}\n\nmix( Model, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/keystrokehandler\n */\n\nimport DomEmitterMixin from './dom/emittermixin';\nimport { getCode, parseKeystroke } from './keyboard';\n\n/**\n * Keystroke handler allows registering callbacks for given keystrokes.\n *\n * The most frequent use of this class is through the {@link module:core/editor/editor~Editor#keystrokes `editor.keystrokes`}\n * property. It allows listening to keystrokes executed in the editing view:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+A', ( keyEvtData, cancel ) => {\n *\t\t\tconsole.log( 'Ctrl+A has been pressed' );\n *\t\t\tcancel();\n *\t\t} );\n *\n * However, this utility class can be used in various part of the UI. For instance, a certain {@link module:ui/view~View}\n * can use it like this:\n *\n *\t\tclass MyView extends View {\n *\t\t\tconstructor() {\n *\t\t\t\tthis.keystrokes = new KeystrokeHandler();\n *\n * \t\t\t\tthis.keystrokes.set( 'tab', handleTabKey );\n *\t\t\t}\n *\n *\t\t\trender() {\n *\t\t\t\tsuper.render();\n *\n *\t\t\t\tthis.keystrokes.listenTo( this.element );\n *\t\t\t}\n *\t\t}\n *\n * That keystroke handler will listen to `keydown` events fired in this view's main element.\n *\n */\nexport default class KeystrokeHandler {\n\t/**\n\t * Creates an instance of the keystroke handler.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Listener used to listen to events for easier keystroke handler destruction.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:utils/dom/emittermixin~Emitter}\n\t\t */\n\t\tthis._listener = Object.create( DomEmitterMixin );\n\t}\n\n\t/**\n\t * Starts listening for `keydown` events from a given emitter.\n\t *\n\t * @param {module:utils/emittermixin~Emitter} emitter\n\t */\n\tlistenTo( emitter ) {\n\t\t// The #_listener works here as a kind of dispatcher. It groups the events coming from the same\n\t\t// keystroke so the listeners can be attached to them with different priorities.\n\t\t//\n\t\t// E.g. all the keystrokes with the `keyCode` of 42 coming from the `emitter` are propagated\n\t\t// as a `_keydown:42` event by the `_listener`. If there's a callback created by the `set`\n\t\t// method for this 42 keystroke, it listens to the `_listener#_keydown:42` event only and interacts\n\t\t// only with other listeners of this particular event, thus making it possible to prioritize\n\t\t// the listeners and safely cancel execution, when needed. Instead of duplicating the Emitter logic,\n\t\t// the KeystrokeHandler re–uses it to do its job.\n\t\tthis._listener.listenTo( emitter, 'keydown', ( evt, keyEvtData ) => {\n\t\t\tthis._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\n\t\t} );\n\t}\n\n\t/**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param {Function} callback A function called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a helper funcion to call both `preventDefault()` and `stopPropagation()` on the underlying event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */\n\tset( keystroke, callback, options = {} ) {\n\t\tconst keyCode = parseKeystroke( keystroke );\n\t\tconst priority = options.priority;\n\n\t\t// Execute the passed callback on KeystrokeHandler#_keydown.\n\t\t// TODO: https://github.com/ckeditor/ckeditor5-utils/issues/144\n\t\tthis._listener.listenTo( this._listener, '_keydown:' + keyCode, ( evt, keyEvtData ) => {\n\t\t\tcallback( keyEvtData, () => {\n\t\t\t\t// Stop the event in the DOM: no listener in the web page\n\t\t\t\t// will be triggered by this event.\n\t\t\t\tkeyEvtData.preventDefault();\n\t\t\t\tkeyEvtData.stopPropagation();\n\n\t\t\t\t// Stop the event in the KeystrokeHandler: no more callbacks\n\t\t\t\t// will be executed for this keystroke.\n\t\t\t\tevt.stop();\n\t\t\t} );\n\n\t\t\t// Mark this keystroke as handled by the callback. See: #press.\n\t\t\tevt.return = true;\n\t\t}, { priority } );\n\t}\n\n\t/**\n\t * Triggers a keystroke handler for a specified key combination, if such a keystroke was {@link #set defined}.\n\t *\n\t * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEvtData Key event data.\n\t * @returns {Boolean} Whether the keystroke was handled.\n\t */\n\tpress( keyEvtData ) {\n\t\treturn !!this._listener.fire( '_keydown:' + getCode( keyEvtData ), keyEvtData );\n\t}\n\n\t/**\n\t * Destroys the keystroke handler.\n\t */\n\tdestroy() {\n\t\tthis._listener.stopListening();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/editingkeystrokehandler\n */\n\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\n/**\n * A keystroke handler for editor editing. Its instance is available\n * in {@link module:core/editor/editor~Editor#keystrokes} so plugins\n * can register their keystrokes.\n *\n * E.g. an undo plugin would do this:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+Z', 'undo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Shift+Z', 'redo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Y', 'redo' );\n *\n * @extends utils/keystrokehandler~KeystrokeHandler\n */\nexport default class EditingKeystrokeHandler extends KeystrokeHandler {\n\t/**\n\t * Creates an instance of the keystroke handler.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t */\n\tconstructor( editor ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The editor instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\t}\n\n\t/**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * The handler can be specified as a command name or a callback.\n\t *\n\t * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param {Function|String} callback If a string is passed, then the keystroke will\n\t * {@link module:core/editor/editor~Editor#execute execute a command}.\n\t * If a function, then it will be called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.\n\t * @param {Object} [options={}] Additional options.\n\t * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n\t * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */\n\tset( keystroke, callback, options = {} ) {\n\t\tif ( typeof callback == 'string' ) {\n\t\t\tconst commandName = callback;\n\n\t\t\tcallback = ( evtData, cancel ) => {\n\t\t\t\tthis.editor.execute( commandName );\n\t\t\t\tcancel();\n\t\t\t};\n\t\t}\n\n\t\tsuper.set( keystroke, callback, options );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/editor/editor\n */\n\nimport Config from '@ckeditor/ckeditor5-utils/src/config';\nimport EditingController from '@ckeditor/ckeditor5-engine/src/controller/editingcontroller';\nimport PluginCollection from '../plugincollection';\nimport CommandCollection from '../commandcollection';\nimport Locale from '@ckeditor/ckeditor5-utils/src/locale';\nimport DataController from '@ckeditor/ckeditor5-engine/src/controller/datacontroller';\nimport Conversion from '@ckeditor/ckeditor5-engine/src/conversion/conversion';\nimport Model from '@ckeditor/ckeditor5-engine/src/model/model';\nimport EditingKeystrokeHandler from '../editingkeystrokehandler';\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\nimport '@ckeditor/ckeditor5-utils/src/version';\n\n/**\n * Class representing a basic, generic editor.\n *\n * Check out the list of its subclasses to learn about specific editor implementations.\n *\n * All editor implementations (like {@link module:editor-classic/classiceditor~ClassicEditor} or\n * {@link module:editor-inline/inlineeditor~InlineEditor}) should extend this class. They can add their\n * own methods and properties.\n *\n * When you are implementing a plugin, then this editor represents the API\n * which your plugin can expect to get when using its {@link module:core/plugin~Plugin#editor} property.\n *\n * This API should be sufficient in order to implement the \"editing\" part of your feature\n * (schema definition, conversion, commands, keystrokes, etc.).\n * It does not define the editor UI, which is available only if the\n * the specific editor implements also the {@link module:core/editor/editorwithui~EditorWithUI} interface\n * (as most editor implementations do).\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Editor {\n\t/**\n\t * Creates a new instance of the Editor class.\n\t *\n\t * Usually, not to be used directly. See the static {@link module:core/editor/editor~Editor.create `create()`} method.\n\t *\n\t * @param {Object} [config] The editor config.\n\t */\n\tconstructor( config ) {\n\t\tconst availablePlugins = this.constructor.builtinPlugins;\n\n\t\t/**\n\t\t * Holds all configurations specific to this editor instance.\n\t\t *\n\t\t *\t\teditor.config.get( 'image.toolbar' );\n\t\t *\t\t// -> [ 'imageStyle:full', 'imageStyle:side', '|', 'imageTextAlternative' ]\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/config~Config}\n\t\t */\n\t\tthis.config = new Config( config, this.constructor.defaultConfig );\n\n\t\tthis.config.define( 'plugins', availablePlugins );\n\n\t\t/**\n\t\t * The plugins loaded and in use by this editor instance.\n\t\t *\n\t\t *\t\teditor.plugins.get( 'Clipboard' ); // -> instance of the Clipboard plugin.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/plugincollection~PluginCollection}\n\t\t */\n\t\tthis.plugins = new PluginCollection( this, availablePlugins );\n\n\t\t/**\n\t\t * Commands registered to the editor.\n\t\t *\n\t\t * Use the shorthand {@link #execute `editor.execute()`} method to execute commands:\n\t\t *\n\t\t *\t\t// Execute the bold command:\n\t\t *\t\teditor.execute( 'bold' );\n\t\t *\n\t\t *\t\t// Check the state of the bold command:\n\t\t *\t\teditor.commands.get( 'bold' ).value;\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/commandcollection~CommandCollection}\n\t\t */\n\t\tthis.commands = new CommandCollection();\n\n\t\t/**\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = new Locale( this.config.get( 'language' ) );\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method #t\n\t\t */\n\t\tthis.t = this.locale.t;\n\n\t\t/**\n\t\t * Indicates the editor life-cycle state.\n\t\t *\n\t\t * The editor is in one of the following states:\n\t\t *\n\t\t * * `initializing` - during the editor initialization (before {@link module:core/editor/editor~Editor.create `Editor.create()`})\n\t\t * finished its job,\n\t\t * * `ready` - after the promise returned by the {@link module:core/editor/editor~Editor.create `Editor.create()`}\n\t\t * method is resolved,\n\t\t * * `destroyed` - once the {@link #destroy `editor.destroy()`} method was called.\n\t\t *\n\t\t * @observable\n\t\t * @member {'initializing'|'ready'|'destroyed'} #state\n\t\t */\n\t\tthis.set( 'state', 'initializing' );\n\t\tthis.once( 'ready', () => ( this.state = 'ready' ), { priority: 'high' } );\n\t\tthis.once( 'destroy', () => ( this.state = 'destroyed' ), { priority: 'high' } );\n\n\t\t/**\n\t\t * Defines whether this editor is in read-only mode.\n\t\t *\n\t\t * In read-only mode the editor {@link #commands commands} are disabled so it is not possible\n\t\t * to modify the document by using them. Also, the editable element(s) become non-editable.\n\t\t *\n\t\t * In order to make the editor read-only, you can set this value directly:\n\t\t *\n\t\t *\t\teditor.isReadOnly = true;\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * The editor's model.\n\t\t *\n\t\t * The central point of the editor's abstract data model.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model}\n\t\t */\n\t\tthis.model = new Model();\n\n\t\t/**\n\t\t * The {@link module:engine/controller/datacontroller~DataController data controller}.\n\t\t * Used e.g. for setting and retrieving editor data.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/datacontroller~DataController}\n\t\t */\n\t\tthis.data = new DataController( this.model );\n\n\t\t/**\n\t\t * The {@link module:engine/controller/editingcontroller~EditingController editing controller}.\n\t\t * Controls user input and rendering the content for editing.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/editingcontroller~EditingController}\n\t\t */\n\t\tthis.editing = new EditingController( this.model );\n\t\tthis.editing.view.document.bind( 'isReadOnly' ).to( this );\n\n\t\t/**\n\t\t * Conversion manager through which you can register model to view and view to model converters.\n\t\t *\n\t\t * See {@link module:engine/conversion/conversion~Conversion}'s documentation to learn how to add converters.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/conversion/conversion~Conversion}\n\t\t */\n\t\tthis.conversion = new Conversion();\n\n\t\tthis.conversion.register( 'downcast', [ this.editing.downcastDispatcher, this.data.downcastDispatcher ] );\n\t\tthis.conversion.register( 'editingDowncast', [ this.editing.downcastDispatcher ] );\n\t\tthis.conversion.register( 'dataDowncast', [ this.data.downcastDispatcher ] );\n\n\t\tthis.conversion.register( 'upcast', [ this.data.upcastDispatcher ] );\n\n\t\t/**\n\t\t * Instance of the {@link module:core/editingkeystrokehandler~EditingKeystrokeHandler}.\n\t\t *\n\t\t * It allows setting simple keystrokes:\n\t\t *\n\t\t *\t\t// Execute the bold command on Ctrl+E:\n\t\t *\t\teditor.keystrokes.set( 'Ctrl+E', 'bold' );\n\t\t *\n\t\t *\t\t// Execute your own callback:\n\t\t *\t\teditor.keystrokes.set( 'Ctrl+E', ( data, cancel ) => {\n\t\t *\t\t\tconsole.log( data.keyCode );\n\t\t *\n\t\t *\t\t\t// Prevent default (native) action and stop the underlying keydown event\n\t\t *\t\t\t// so no other editor feature will interfere.\n\t\t *\t\t\tcancel();\n\t\t *\t\t} );\n\t\t *\n\t\t * Note: Certain, typing oriented keystrokes (like <kbd>Backspace</kbd> or <kbd>Enter</kbd>) are handled\n\t\t * by low level mechanism and trying to listen to them via the keystroke handler will not work reliably.\n\t\t * To handle those specific keystrokes see the events fired by the\n\t\t * {@link module:engine/view/document~Document editing view document} (`editor.editing.view.document`).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editingkeystrokehandler~EditingKeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new EditingKeystrokeHandler( this );\n\t\tthis.keystrokes.listenTo( this.editing.view.document );\n\t}\n\n\t/**\n\t * Loads and initializes plugins specified in the config.\n\t *\n\t * @returns {Promise} A promise which resolves once the initialization is completed.\n\t */\n\tinitPlugins() {\n\t\tconst that = this;\n\t\tconst config = this.config;\n\n\t\treturn loadPlugins()\n\t\t\t.then( loadedPlugins => {\n\t\t\t\treturn initPlugins( loadedPlugins, 'init' )\n\t\t\t\t\t.then( () => initPlugins( loadedPlugins, 'afterInit' ) );\n\t\t\t} )\n\t\t\t.then( () => this.fire( 'pluginsReady' ) );\n\n\t\tfunction loadPlugins() {\n\t\t\tconst plugins = config.get( 'plugins' ) || [];\n\t\t\tconst removePlugins = config.get( 'removePlugins' ) || [];\n\t\t\tconst extraPlugins = config.get( 'extraPlugins' ) || [];\n\n\t\t\treturn that.plugins.load( plugins.concat( extraPlugins ), removePlugins );\n\t\t}\n\n\t\tfunction initPlugins( loadedPlugins, method ) {\n\t\t\treturn loadedPlugins.reduce( ( promise, plugin ) => {\n\t\t\t\tif ( !plugin[ method ] ) {\n\t\t\t\t\treturn promise;\n\t\t\t\t}\n\n\t\t\t\treturn promise.then( plugin[ method ].bind( plugin ) );\n\t\t\t}, Promise.resolve() );\n\t\t}\n\t}\n\n\t/**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * **Note** The editor cannot be destroyed during the initialization phase so if it is called\n\t * while the editor {@link #state is being initialized}, it will wait for the editor initialization before destroying it.\n\t *\n\t * @fires destroy\n\t * @returns {Promise} A promise that resolves once the editor instance is fully destroyed.\n\t */\n\tdestroy() {\n\t\tlet readyPromise = Promise.resolve();\n\n\t\tif ( this.state == 'initializing' ) {\n\t\t\treadyPromise = new Promise( resolve => this.once( 'ready', resolve ) );\n\t\t}\n\n\t\treturn readyPromise\n\t\t\t.then( () => {\n\t\t\t\tthis.fire( 'destroy' );\n\t\t\t\tthis.stopListening();\n\t\t\t\tthis.commands.destroy();\n\t\t\t} )\n\t\t\t.then( () => this.plugins.destroy() )\n\t\t\t.then( () => {\n\t\t\t\tthis.model.destroy();\n\t\t\t\tthis.data.destroy();\n\t\t\t\tthis.editing.destroy();\n\t\t\t\tthis.keystrokes.destroy();\n\t\t\t} );\n\t}\n\n\t/**\n\t * Executes specified command with given parameters.\n\t *\n\t * Shorthand for:\n\t *\n\t *\t\teditor.commands.get( commandName ).execute( ... );\n\t *\n\t * @param {String} commandName Name of command to execute.\n\t * @param {*} [...commandParams] Command parameters.\n\t */\n\texecute( ...args ) {\n\t\tthis.commands.execute( ...args );\n\t}\n\n\t/**\n\t * Creates and initializes a new editor instance.\n\t *\n\t * @param {Object} config The editor config. You can find the list of config options in\n\t * {@link module:core/editor/editorconfig~EditorConfig}.\n\t * @returns {Promise} Promise resolved once editor is ready.\n\t * @returns {module:core/editor/editor~Editor} return.editor The editor instance.\n\t */\n\tstatic create( config ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst editor = new this( config );\n\n\t\t\tresolve(\n\t\t\t\teditor.initPlugins()\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\teditor.fire( 'dataReady' );\n\t\t\t\t\t\teditor.fire( 'ready' );\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => editor )\n\t\t\t);\n\t\t} );\n\t}\n}\n\nmix( Editor, ObservableMixin );\n\n/**\n * Fired after {@link #initPlugins plugins are initialized}.\n *\n * @event pluginsReady\n */\n\n/**\n * Fired when the data loaded to the editor is ready. If a specific editor doesn't load\n * any data initially, this event will be fired right before {@link #event:ready}.\n *\n * @event dataReady\n */\n\n/**\n * Fired when {@link #event:pluginsReady plugins}, and {@link #event:dataReady data} and all additional\n * editor components are ready.\n *\n * Note: This event is most useful for plugin developers. When integrating the editor with your website or\n * application you do not have to listen to `editor#ready` because when the promise returned by the static\n * {@link module:core/editor/editor~Editor.create `Editor.create()`} event is resolved, the editor is already ready.\n * In fact, since the first moment when the editor instance is available to you is inside `then()`'s callback,\n * you cannot even add a listener to the `editor#ready` event.\n *\n * See also the {@link #state `editor.state`} property.\n *\n * @event ready\n */\n\n/**\n * Fired when this editor instance is destroyed. The editor at this point is not usable and this event should be used to\n * perform the clean-up in any plugin.\n *\n *\n * See also the {@link #state `editor.state`} property.\n *\n * @event destroy\n */\n\n/**\n * An array of plugins built into this editor class.\n * It is used in CKEditor 5 builds to provide a list of plugins which are later automatically initialized\n * during the editor initialization.\n *\n * They will be automatically initialized by the editor, unless listed in `config.removePlugins` and\n * unless `config.plugins` is passed.\n *\n *\t\t// Build some plugins into the editor class first.\n *\t\tClassicEditor.builtinPlugins = [ FooPlugin, BarPlugin ];\n *\n *\t\t// Normally, you need to define config.plugins, but since ClassicEditor.builtinPlugins was\n *\t\t// defined, now you can call create() without any configuration.\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> instance of the Foo plugin\n *\t\t\t\teditor.plugins.get( BarPlugin ); // -> instance of the Bar plugin\n *\t\t\t} );\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, {\n *\t\t\t\t// Don't initialize this plugins (note: it's defined by a string):\n *\t\t\t\tremovePlugins: [ 'Foo' ]\n *\t\t\t} )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> undefined\n *\t\t\t\teditor.config.get( BarPlugin ); // -> instance of the Bar plugin\n *\t\t\t} );\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, {\n *\t\t\t\t// Load only this plugin. Can also be define by a string if\n *\t\t\t\t// this plugin was built into the editor class.\n *\t\t\t\tplugins: [ FooPlugin ]\n *\t\t\t} )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> instance of the Foo plugin\n *\t\t\t\teditor.config.get( BarPlugin ); // -> undefined\n *\t\t\t} );\n *\n * See also {@link module:core/editor/editor~Editor.defaultConfig}.\n *\n * @static\n * @member {Array.<Function>} module:core/editor/editor~Editor.builtinPlugins\n */\n\n/**\n * The default config which is built into the editor class.\n * It is used in CKEditor 5 builds to provide the default config options which are later used during editor initialization.\n *\n *\t\tClassicEditor.defaultConfig = {\n *\t\t\tfoo: 1,\n *\t\t\tbar: 2\n *\t\t};\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.config.get( 'foo' ); // -> 1\n *\t\t\t\teditor.config.get( 'bar' ); // -> 2\n *\t\t\t} );\n *\n *\t\t// The default options can be overridden by the config passed to create().\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, { bar: 3 } )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.config.get( 'foo' ); // -> 1\n *\t\t\t\teditor.config.get( 'bar' ); // -> 3\n *\t\t\t} );\n *\n * See also {@link module:core/editor/editor~Editor.builtinPlugins}.\n *\n * @static\n * @member {Object} module:core/editor/editor~Editor.defaultConfig\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/dataprocessor/basichtmlwriter\n */\n\n/* globals document */\n\n/**\n * Basic HTML writer. It uses the native `innerHTML` property for basic conversion\n * from a document fragment to an HTML string.\n *\n * @implements module:engine/dataprocessor/htmlwriter~HtmlWriter\n */\nexport default class BasicHtmlWriter {\n\t/**\n\t * Returns an HTML string created from the document fragment.\n\t *\n\t * @param {DocumentFragment} fragment\n\t * @returns {String}\n\t */\n\tgetHtml( fragment ) {\n\t\tconst doc = document.implementation.createHTMLDocument( '' );\n\t\tconst container = doc.createElement( 'div' );\n\t\tcontainer.appendChild( fragment );\n\n\t\treturn container.innerHTML;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser */\n\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\nimport { NBSP_FILLER } from '../view/filler';\n\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\nexport default class HtmlDataProcessor {\n\t/**\n\t * Creates a new instance of the HTML data processor class.\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * A DOM parser instance used to parse an HTML string to an HTML document.\n\t\t *\n\t\t * @private\n\t\t * @member {DOMParser}\n\t\t */\n\t\tthis._domParser = new DOMParser();\n\n\t\t/**\n\t\t * A DOM converter used to convert DOM elements to view elements.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/domconverter~DomConverter}\n\t\t */\n\t\tthis._domConverter = new DomConverter( { blockFiller: NBSP_FILLER } );\n\n\t\t/**\n\t\t * A basic HTML writer instance used to convert DOM elements to an HTML string.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/basichtmlwriter~BasicHtmlWriter}\n\t\t */\n\t\tthis._htmlWriter = new BasicHtmlWriter();\n\t}\n\n\t/**\n\t * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n\t * to data format &mdash; in this case to an HTML string.\n\t *\n\t * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n\t * @returns {String} HTML string.\n\t */\n\ttoData( viewFragment ) {\n\t\t// Convert view DocumentFragment to DOM DocumentFragment.\n\t\tconst domFragment = this._domConverter.viewToDom( viewFragment, document );\n\n\t\t// Convert DOM DocumentFragment to HTML output.\n\t\treturn this._htmlWriter.getHtml( domFragment );\n\t}\n\n\t/**\n\t * Converts the provided HTML string to a view tree.\n\t *\n\t * @param {String} data An HTML string.\n\t * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n\t */\n\ttoView( data ) {\n\t\t// Convert input HTML data to DOM DocumentFragment.\n\t\tconst domFragment = this._toDom( data );\n\n\t\t// Convert DOM DocumentFragment to view DocumentFragment.\n\t\treturn this._domConverter.domToView( domFragment );\n\t}\n\n\t/**\n\t * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n\t * the provided data.\n\t *\n\t * @private\n\t * @param {String} data\n\t * @returns {DocumentFragment}\n\t */\n\t_toDom( data ) {\n\t\tconst document = this._domParser.parseFromString( data, 'text/html' );\n\t\tconst fragment = document.createDocumentFragment();\n\t\tconst nodes = document.body.childNodes;\n\n\t\twhile ( nodes.length > 0 ) {\n\t\t\tfragment.appendChild( nodes[ 0 ] );\n\t\t}\n\n\t\treturn fragment;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/viewcollection\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Collects {@link module:ui/view~View} instances.\n *\n *\t\tconst parentView = new ParentView( locale );\n *\t\tconst collection = new ViewCollection( locale );\n *\n *\t\tcollection.setParent( parentView.element );\n *\n *\t\tconst viewA = new ChildView( locale );\n *\t\tconst viewB = new ChildView( locale );\n *\n * View collection renders and manages view {@link module:ui/view~View#element elements}:\n *\n *\t\tcollection.add( viewA );\n *\t\tcollection.add( viewB );\n *\n *\t\tconsole.log( parentView.element.firsChild ); // -> viewA.element\n *\t\tconsole.log( parentView.element.lastChild ); // -> viewB.element\n *\n * It {@link module:ui/viewcollection~ViewCollection#delegate propagates} DOM events too:\n *\n *\t\t// Delegate #click and #keydown events from viewA and viewB to the parentView.\n *\t\tcollection.delegate( 'click' ).to( parentView );\n *\n *\t\tparentView.on( 'click', ( evt ) => {\n *\t\t\tconsole.log( `${ evt.source } has been clicked.` );\n *\t\t} );\n *\n *\t\t// This event will be delegated to the parentView.\n *\t\tviewB.fire( 'click' );\n *\n * **Note**: A view collection can be used directly in the {@link module:ui/template~TemplateDefinition definition}\n * of a {@link module:ui/template~Template template}.\n *\n * @extends module:utils/collection~Collection\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class ViewCollection extends Collection {\n\t/**\n\t * Creates a new instance of the {@link module:ui/viewcollection~ViewCollection}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The {@link module:core/editor/editor~Editor editor's locale} instance.\n\t */\n\tconstructor( locale ) {\n\t\tsuper( {\n\t\t\t// An #id Number attribute should be legal and not break the `ViewCollection` instance.\n\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/93\n\t\t\tidProperty: 'viewUid'\n\t\t} );\n\n\t\t// Handle {@link module:ui/view~View#element} in DOM when a new view is added to the collection.\n\t\tthis.on( 'add', ( evt, view, index ) => {\n\t\t\tif ( !view.isRendered ) {\n\t\t\t\tview.render();\n\t\t\t}\n\n\t\t\tif ( view.element && this._parentElement ) {\n\t\t\t\tthis._parentElement.insertBefore( view.element, this._parentElement.children[ index ] );\n\t\t\t}\n\t\t} );\n\n\t\t// Handle {@link module:ui/view~View#element} in DOM when a view is removed from the collection.\n\t\tthis.on( 'remove', ( evt, view ) => {\n\t\t\tif ( view.element && this._parentElement ) {\n\t\t\t\tview.element.remove();\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * The {@link module:core/editor/editor~Editor#locale editor's locale} instance.\n\t\t * See the view {@link module:ui/view~View#locale locale} property.\n\t\t *\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = locale;\n\n\t\t/**\n\t\t * A parent element within which child views are rendered and managed in DOM.\n\t\t *\n\t\t * @protected\n\t\t * @member {HTMLElement}\n\t\t */\n\t\tthis._parentElement = null;\n\t}\n\n\t/**\n\t * Destroys the view collection along with child views.\n\t * See the view {@link module:ui/view~View#destroy} method.\n\t */\n\tdestroy() {\n\t\tthis.map( view => view.destroy() );\n\t}\n\n\t/**\n\t * Sets the parent HTML element of this collection. When parent is set, {@link #add adding} and\n\t * {@link #remove removing} views in the collection synchronizes their\n\t * {@link module:ui/view~View#element elements} in the parent element.\n\t *\n\t * @param {HTMLElement} element A new parent element.\n\t */\n\tsetParent( elementOrDocFragment ) {\n\t\tthis._parentElement = elementOrDocFragment;\n\t}\n\n\t/**\n\t * Delegates selected events coming from within views in the collection to any\n\t * {@link module:utils/emittermixin~Emitter}.\n\t *\n\t * For the following views and collection:\n\t *\n\t *\t\tconst viewA = new View();\n\t *\t\tconst viewB = new View();\n\t *\t\tconst viewC = new View();\n\t *\n\t *\t\tconst views = parentView.createCollection();\n\t *\n\t *\t\tviews.delegate( 'eventX' ).to( viewB );\n\t *\t\tviews.delegate( 'eventX', 'eventY' ).to( viewC );\n\t *\n\t *\t\tviews.add( viewA );\n\t *\n\t * the `eventX` is delegated (fired by) `viewB` and `viewC` along with `customData`:\n\t *\n\t *\t\tviewA.fire( 'eventX', customData );\n\t *\n\t * and `eventY` is delegated (fired by) `viewC` along with `customData`:\n\t *\n\t *\t\tviewA.fire( 'eventY', customData );\n\t *\n\t * See {@link module:utils/emittermixin~EmitterMixin#delegate}.\n\t *\n\t * @param {...String} events {@link module:ui/view~View} event names to be delegated to another\n\t * {@link module:utils/emittermixin~Emitter}.\n\t * @returns {Object}\n\t * @returns {Function} return.to A function which accepts the destination of\n\t * {@link module:utils/emittermixin~EmitterMixin#delegate delegated} events.\n\t */\n\tdelegate( ...events ) {\n\t\tif ( !events.length || !isStringArray( events ) ) {\n\t\t\t/**\n\t\t\t * All event names must be strings.\n\t\t\t *\n\t\t\t * @error ui-viewcollection-delegate-wrong-events\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'ui-viewcollection-delegate-wrong-events: All event names must be strings.' );\n\t\t}\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Selects destination for {@link module:utils/emittermixin~EmitterMixin#delegate} events.\n\t\t\t *\n\t\t\t * @memberOf module:ui/viewcollection~ViewCollection#delegate\n\t\t\t * @function module:ui/viewcollection~ViewCollection#delegate.to\n\t\t\t * @param {module:utils/emittermixin~EmitterMixin} dest An `EmitterMixin` instance which is\n\t\t\t * the destination for delegated events.\n\t\t\t */\n\t\t\tto: dest => {\n\t\t\t\t// Activate delegating on existing views in this collection.\n\t\t\t\tfor ( const view of this ) {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.delegate( evtName ).to( dest );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Activate delegating on future views in this collection.\n\t\t\t\tthis.on( 'add', ( evt, view ) => {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.delegate( evtName ).to( dest );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\t// Deactivate delegating when view is removed from this collection.\n\t\t\t\tthis.on( 'remove', ( evt, view ) => {\n\t\t\t\t\tfor ( const evtName of events ) {\n\t\t\t\t\t\tview.stopDelegating( evtName, dest );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Removes a child view from the collection. If the {@link #setParent parent element} of the\n\t * collection has been set, the {@link module:ui/view~View#element element} of the view is also removed\n\t * in DOM, reflecting the order of the collection.\n\t *\n\t * See the {@link #add} method.\n\t *\n\t * @method #remove\n\t * @param {module:ui/view~View|Number|String} subject The view to remove, its id or index in the collection.\n\t * @returns {Object} The removed view.\n\t */\n}\n\nmix( Collection, ObservableMixin );\n\n// Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\nfunction isStringArray( arr ) {\n\treturn arr.every( a => typeof a == 'string' );\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.cloneWith` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @param {Function} [customizer] The function to customize cloning.\n * @returns {*} Returns the deep cloned value.\n * @see _.cloneWith\n * @example\n *\n * function customizer(value) {\n *   if (_.isElement(value)) {\n *     return value.cloneNode(true);\n *   }\n * }\n *\n * var el = _.cloneDeepWith(document.body, customizer);\n *\n * console.log(el === document.body);\n * // => false\n * console.log(el.nodeName);\n * // => 'BODY'\n * console.log(el.childNodes.length);\n * // => 20\n */\nfunction cloneDeepWith(value, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n}\n\nexport default cloneDeepWith;\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/template\n */\n\n/* global document */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport View from './view';\nimport ViewCollection from './viewcollection';\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\nimport { isObject, cloneDeepWith } from 'lodash-es';\n\nconst xhtmlNs = 'http://www.w3.org/1999/xhtml';\n\n/**\n * A basic Template class. It renders a DOM HTML element or text from a\n * {@link module:ui/template~TemplateDefinition definition} and supports element attributes, children,\n * bindings to {@link module:utils/observablemixin~Observable observables} and DOM event propagation.\n *\n * A simple template can look like this:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\tclass: 'foo',\n *\t\t\t\tstyle: {\n *\t\t\t\t\tbackgroundColor: 'yellow'\n *\t\t\t\t}\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\t\t\t}\n *\t\t\tchildren: [\n *\t\t\t\t'A paragraph.'\n *\t\t\t]\n *\t\t} ).render();\n *\n * and it will render the following HTML element:\n *\n *\t\t<p class=\"foo\" style=\"background-color: yellow;\">A paragraph.</p>\n *\n * Additionally, the `observable` will always fire `clicked` upon clicking `<p>` in the DOM.\n *\n * See {@link module:ui/template~TemplateDefinition} to know more about templates and complex\n * template definitions.\n *\n* @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class Template {\n\t/**\n\t * Creates an instance of the {@link ~Template} class.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} def The definition of the template.\n\t */\n\tconstructor( def ) {\n\t\tObject.assign( this, normalize( clone( def ) ) );\n\n\t\t/**\n\t\t * Indicates whether this particular Template instance has been\n\t\t * {@link #render rendered}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis._isRendered = false;\n\n\t\t/**\n\t\t * The tag (`tagName`) of this template, e.g. `div`. It also indicates that the template\n\t\t * renders to an HTML element.\n\t\t *\n\t\t * @member {String} #tag\n\t\t */\n\n\t\t/**\n\t\t * The text of the template. It also indicates that the template renders to a DOM text node.\n\t\t *\n\t\t * @member {Array.<String|module:ui/template~TemplateValueSchema>} #text\n\t\t */\n\n\t\t/**\n\t\t * The attributes of the template, e.g. `{ id: [ 'ck-id' ] }`, corresponding with\n\t\t * the attributes of an HTML element.\n\t\t *\n\t\t * **Note**: This property only makes sense when {@link #tag} is defined.\n\t\t *\n\t\t * @member {Object} #attributes\n\t\t */\n\n\t\t/**\n\t\t * The children of the template. They can be either:\n\t\t * * independent instances of {@link ~Template} (sub–templates),\n\t\t * * native DOM Nodes.\n\t\t *\n\t\t * **Note**: This property only makes sense when {@link #tag} is defined.\n\t\t *\n\t\t * @member {Array.<module:ui/template~Template|Node>} #children\n\t\t */\n\n\t\t/**\n\t\t * The DOM event listeners of the template.\n\t\t *\n\t\t * @member {Object} #eventListeners\n\t\t */\n\n\t\t/**\n\t\t * The data used by the {@link #revert} method to restore a node to its original state.\n\t\t *\n\t\t * See: {@link #apply}.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/template~RenderData}\n\t\t */\n\t\tthis._revertData = null;\n\t}\n\n\t/**\n\t * Renders a DOM Node (an HTML element or text) out of the template.\n\t *\n\t *\t\tconst domNode = new Template( { ... } ).render();\n\t *\n\t * See: {@link #apply}.\n\t *\n\t * @returns {HTMLElement|Text}\n\t */\n\trender() {\n\t\tconst node = this._renderNode( {\n\t\t\tintoFragment: true\n\t\t} );\n\n\t\tthis._isRendered = true;\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Applies the template to an existing DOM Node, either HTML element or text.\n\t *\n\t * **Note:** No new DOM nodes will be created. Applying extends\n\t * {@link module:ui/template~TemplateDefinition attributes} and\n\t * {@link module:ui/template~TemplateDefinition event listeners} only.\n\t *\n\t * **Note:** Existing `class` and `style` attributes are extended when a template\n\t * is applied to an HTML element, while other attributes and `textContent` are overridden.\n\t *\n\t * **Note:** The process of applying a template can be easily reverted using the\n\t * {@link module:ui/template~Template#revert} method.\n\t *\n\t *\t\tconst element = document.createElement( 'div' );\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\tattrs: {\n\t *\t\t\t\tid: 'first-div',\n\t *\t\t\t\tclass: bind.to( 'divClass' )\n\t *\t\t\t},\n\t *\t\t\ton: {\n\t *\t\t\t\tclick: bind( 'elementClicked' ) // Will be fired by the observable.\n\t *\t\t\t}\n\t *\t\t\tchildren: [\n\t *\t\t\t\t'Div text.'\n\t *\t\t\t]\n\t *\t\t} ).apply( element );\n\t *\n\t *\t\telement.outerHTML == \"<div id=\"first-div\" class=\"my-div\">Div text.</div>\"\n\t *\n\t * @see module:ui/template~Template#render\n\t * @see module:ui/template~Template#revert\n\t * @param {Node} node Root node for the template to apply.\n\t */\n\tapply( node ) {\n\t\tthis._revertData = getEmptyRevertData();\n\n\t\tthis._renderNode( {\n\t\t\tnode,\n\t\t\tisApplying: true,\n\t\t\trevertData: this._revertData\n\t\t} );\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Reverts a template {@link module:ui/template~Template#apply applied} to a DOM node.\n\t *\n\t * @param {Node} node The root node for the template to revert. In most of the cases, it is the\n\t * same node used by {@link module:ui/template~Template#apply}.\n\t */\n\trevert( node ) {\n\t\tif ( !this._revertData ) {\n\t\t\t/**\n\t\t\t * Attempting to revert a template which has not been applied yet.\n\t\t\t *\n\t\t\t * @error ui-template-revert-not-applied\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'ui-template-revert-not-applied: Attempting to revert a template which has not been applied yet.' );\n\t\t}\n\n\t\tthis._revertTemplateFromNode( node, this._revertData );\n\t}\n\n\t/**\n\t * Returns an iterator which traverses the template in search of {@link module:ui/view~View}\n\t * instances and returns them one by one.\n\t *\n\t *\t\tconst viewFoo = new View();\n\t *\t\tconst viewBar = new View();\n\t *\t\tconst viewBaz = new View();\n\t *\t\tconst template = new Template( {\n\t *\t\t\ttag: 'div',\n\t *\t\t\tchildren: [\n\t *\t\t\t\tviewFoo,\n\t *\t\t\t\t{\n\t *\t\t\t\t\ttag: 'div',\n\t *\t\t\t\t\tchildren: [\n\t *\t\t\t\t\t\tviewBar\n\t *\t\t\t\t\t]\n\t *\t\t\t\t},\n\t *\t\t\t\tviewBaz\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Logs: viewFoo, viewBar, viewBaz\n\t *\t\tfor ( const view of template.getViews() ) {\n\t *\t\t\tconsole.log( view );\n\t *\t\t}\n\t *\n\t * @returns {Iterable.<module:ui/view~View>}\n\t */\n\t* getViews() {\n\t\tfunction* search( def ) {\n\t\t\tif ( def.children ) {\n\t\t\t\tfor ( const child of def.children ) {\n\t\t\t\t\tif ( isView( child ) ) {\n\t\t\t\t\t\tyield child;\n\t\t\t\t\t} else if ( isTemplate( child ) ) {\n\t\t\t\t\t\tyield* search( child );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tyield* search( this );\n\t}\n\n\t/**\n\t * An entry point to the interface which binds DOM nodes to\n\t * {@link module:utils/observablemixin~Observable observables}.\n\t * There are two types of bindings:\n\t *\n\t * * HTML element attributes or text `textContent` synchronized with attributes of an\n\t * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}\n\t * and {@link module:ui/template~BindChain#if}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\tattrs: {\n\t *\t\t\t\t// Binds the element \"class\" attribute to observable#classAttribute.\n\t *\t\t\t\tclass: bind.to( 'classAttribute' )\n\t *\t\t\t}\n\t *\t\t} ).render();\n\t *\n\t * * DOM events fired on HTML element propagated through\n\t * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tnew Template( {\n\t *\t\t\ton: {\n\t *\t\t\t\t// Will be fired by the observable.\n\t *\t\t\t\tclick: bind( 'elementClicked' )\n\t *\t\t\t}\n\t *\t\t} ).render();\n\t *\n\t * Also see {@link module:ui/view~View#bindTemplate}.\n\t *\n\t * @param {module:utils/observablemixin~Observable} observable An observable which provides boundable attributes.\n\t * @param {module:utils/emittermixin~Emitter} emitter An emitter that listens to observable attribute\n\t * changes or DOM Events (depending on the kind of the binding). Usually, a {@link module:ui/view~View} instance.\n\t * @returns {module:ui/template~BindChain}\n\t */\n\tstatic bind( observable, emitter ) {\n\t\treturn {\n\t\t\tto( eventNameOrFunctionOrAttribute, callback ) {\n\t\t\t\treturn new TemplateToBinding( {\n\t\t\t\t\teventNameOrFunction: eventNameOrFunctionOrAttribute,\n\t\t\t\t\tattribute: eventNameOrFunctionOrAttribute,\n\t\t\t\t\tobservable, emitter, callback\n\t\t\t\t} );\n\t\t\t},\n\n\t\t\tif( attribute, valueIfTrue, callback ) {\n\t\t\t\treturn new TemplateIfBinding( {\n\t\t\t\t\tobservable, emitter, attribute, valueIfTrue, callback\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Extends an existing {@link module:ui/template~Template} instance with some additional content\n\t * from another {@link module:ui/template~TemplateDefinition}.\n\t *\n\t *\t\tconst bind = Template.bind( observable, emitter );\n\t *\n\t *\t\tconst template = new Template( {\n\t *\t\t\ttag: 'p',\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'a',\n\t *\t\t\t\tdata-x: bind.to( 'foo' )\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t{\n\t *\t\t\t\t\ttag: 'span',\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\tclass: 'b'\n\t *\t\t\t\t\t},\n\t *\t\t\t\t\tchildren: [\n\t *\t\t\t\t\t\t'Span'\n\t *\t\t\t\t\t]\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t } );\n\t *\n\t *\t\t// Instance-level extension.\n\t *\t\tTemplate.extend( template, {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'b',\n\t *\t\t\t\tdata-x: bind.to( 'bar' )\n\t *\t\t\t},\n\t *\t\t\tchildren: [\n\t *\t\t\t\t{\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\tclass: 'c'\n\t *\t\t\t\t\t}\n\t *\t\t\t\t}\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t *\t\t// Child extension.\n\t *\t\tTemplate.extend( template.children[ 0 ], {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: 'd'\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t * the `outerHTML` of `template.render()` is:\n\t *\n\t *\t\t<p class=\"a b\" data-x=\"{ observable.foo } { observable.bar }\">\n\t *\t\t\t<span class=\"b c d\">Span</span>\n\t *\t\t</p>\n\t *\n\t * @param {module:ui/template~Template} template An existing template instance to be extended.\n\t * @param {module:ui/template~TemplateDefinition} def Additional definition to be applied to a template.\n\t */\n\tstatic extend( template, def ) {\n\t\tif ( template._isRendered ) {\n\t\t\t/**\n\t\t\t * Extending a template after rendering may not work as expected. To make sure\n\t\t\t * the {@link module:ui/template~Template.extend extending} works for an element,\n\t\t\t * make sure it happens before {@link #render} is called.\n\t\t\t *\n\t\t\t * @error template-extend-render\n\t\t\t */\n\t\t\tlog.warn( 'template-extend-render: Attempting to extend a template which has already been rendered.' );\n\t\t}\n\n\t\textendTemplate( template, normalize( clone( def ) ) );\n\t}\n\n\t/**\n\t * Renders a DOM Node (either an HTML element or text) out of the template.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderNode( data ) {\n\t\tlet isInvalid;\n\n\t\tif ( data.node ) {\n\t\t\t// When applying, a definition cannot have \"tag\" and \"text\" at the same time.\n\t\t\tisInvalid = this.tag && this.text;\n\t\t} else {\n\t\t\t// When rendering, a definition must have either \"tag\" or \"text\": XOR( this.tag, this.text ).\n\t\t\tisInvalid = this.tag ? this.text : !this.text;\n\t\t}\n\n\t\tif ( isInvalid ) {\n\t\t\t/**\n\t\t\t * Node definition cannot have the \"tag\" and \"text\" properties at the same time.\n\t\t\t * Node definition must have either \"tag\" or \"text\" when rendering a new Node.\n\t\t\t *\n\t\t\t * @error ui-template-wrong-syntax\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-wrong-syntax: Node definition must have either \"tag\" or \"text\" when rendering a new Node.'\n\t\t\t);\n\t\t}\n\n\t\tif ( this.text ) {\n\t\t\treturn this._renderText( data );\n\t\t} else {\n\t\t\treturn this._renderElement( data );\n\t\t}\n\t}\n\n\t/**\n\t * Renders an HTML element out of the template.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderElement( data ) {\n\t\tlet node = data.node;\n\n\t\tif ( !node ) {\n\t\t\tnode = data.node = document.createElementNS( this.ns || xhtmlNs, this.tag );\n\t\t}\n\n\t\tthis._renderAttributes( data );\n\t\tthis._renderElementChildren( data );\n\t\tthis._setUpListeners( data );\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Renders a text node out of {@link module:ui/template~Template#text}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderText( data ) {\n\t\tlet node = data.node;\n\n\t\t// Save the original textContent to revert it in #revert().\n\t\tif ( node ) {\n\t\t\tdata.revertData.text = node.textContent;\n\t\t} else {\n\t\t\tnode = data.node = document.createTextNode( '' );\n\t\t}\n\n\t\t// Check if this Text Node is bound to Observable. Cases:\n\t\t//\n\t\t//\t\ttext: [ Template.bind( ... ).to( ... ) ]\n\t\t//\n\t\t//\t\ttext: [\n\t\t//\t\t\t'foo',\n\t\t//\t\t\tTemplate.bind( ... ).to( ... ),\n\t\t//\t\t\t...\n\t\t//\t\t]\n\t\t//\n\t\tif ( hasTemplateBinding( this.text ) ) {\n\t\t\tthis._bindToObservable( {\n\t\t\t\tschema: this.text,\n\t\t\t\tupdater: getTextUpdater( node ),\n\t\t\t\tdata\n\t\t\t} );\n\t\t}\n\t\t// Simply set text. Cases:\n\t\t//\n\t\t//\t\ttext: [ 'all', 'are', 'static' ]\n\t\t//\n\t\t//\t\ttext: [ 'foo' ]\n\t\t//\n\t\telse {\n\t\t\tnode.textContent = this.text.join( '' );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Renders HTML element attributes out of {@link module:ui/template~Template#attributes}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderAttributes( data ) {\n\t\tlet attrName, attrValue, domAttrValue, attrNs;\n\n\t\tif ( !this.attributes ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node = data.node;\n\t\tconst revertData = data.revertData;\n\n\t\tfor ( attrName in this.attributes ) {\n\t\t\t// Current attribute value in DOM.\n\t\t\tdomAttrValue = node.getAttribute( attrName );\n\n\t\t\t// The value to be set.\n\t\t\tattrValue = this.attributes[ attrName ];\n\n\t\t\t// Save revert data.\n\t\t\tif ( revertData ) {\n\t\t\t\trevertData.attributes[ attrName ] = domAttrValue;\n\t\t\t}\n\n\t\t\t// Detect custom namespace:\n\t\t\t//\n\t\t\t//\t\tclass: {\n\t\t\t//\t\t\tns: 'abc',\n\t\t\t//\t\t\tvalue: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tattrNs = ( isObject( attrValue[ 0 ] ) && attrValue[ 0 ].ns ) ? attrValue[ 0 ].ns : null;\n\n\t\t\t// Activate binding if one is found. Cases:\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\tTemplate.bind( ... ).to( ... )\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t'bar',\n\t\t\t//\t\t\tTemplate.bind( ... ).to( ... ),\n\t\t\t//\t\t\t'baz'\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\t//\t\tclass: {\n\t\t\t//\t\t\tns: 'abc',\n\t\t\t//\t\t\tvalue: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tif ( hasTemplateBinding( attrValue ) ) {\n\t\t\t\t// Normalize attributes with additional data like namespace:\n\t\t\t\t//\n\t\t\t\t//\t\tclass: {\n\t\t\t\t//\t\t\tns: 'abc',\n\t\t\t\t//\t\t\tvalue: [ ... ]\n\t\t\t\t//\t\t}\n\t\t\t\t//\n\t\t\t\tconst valueToBind = attrNs ? attrValue[ 0 ].value : attrValue;\n\n\t\t\t\t// Extend the original value of attributes like \"style\" and \"class\",\n\t\t\t\t// don't override them.\n\t\t\t\tif ( revertData && shouldExtend( attrName ) ) {\n\t\t\t\t\tvalueToBind.unshift( domAttrValue );\n\t\t\t\t}\n\n\t\t\t\tthis._bindToObservable( {\n\t\t\t\t\tschema: valueToBind,\n\t\t\t\t\tupdater: getAttributeUpdater( node, attrName, attrNs ),\n\t\t\t\t\tdata\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Style attribute could be an Object so it needs to be parsed in a specific way.\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\twidth: '100px',\n\t\t\t//\t\t\theight: Template.bind( ... ).to( ... )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\telse if ( attrName == 'style' && typeof attrValue[ 0 ] !== 'string' ) {\n\t\t\t\tthis._renderStyleAttribute( attrValue[ 0 ], data );\n\t\t\t}\n\n\t\t\t// Otherwise simply set the static attribute:\n\t\t\t//\n\t\t\t//\t\tclass: [ 'foo' ]\n\t\t\t//\n\t\t\t//\t\tclass: [ 'all', 'are', 'static' ]\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t{\n\t\t\t//\t\t\t\tns: 'abc',\n\t\t\t//\t\t\t\tvalue: [ 'foo' ]\n\t\t\t//\t\t\t}\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\telse {\n\t\t\t\t// Extend the original value of attributes like \"style\" and \"class\",\n\t\t\t\t// don't override them.\n\t\t\t\tif ( revertData && domAttrValue && shouldExtend( attrName ) ) {\n\t\t\t\t\tattrValue.unshift( domAttrValue );\n\t\t\t\t}\n\n\t\t\t\tattrValue = attrValue\n\t\t\t\t\t// Retrieve \"values\" from:\n\t\t\t\t\t//\n\t\t\t\t\t//\t\tclass: [\n\t\t\t\t\t//\t\t\t{\n\t\t\t\t\t//\t\t\t\tns: 'abc',\n\t\t\t\t\t//\t\t\t\tvalue: [ ... ]\n\t\t\t\t\t//\t\t\t}\n\t\t\t\t\t//\t\t]\n\t\t\t\t\t//\n\t\t\t\t\t.map( val => val ? ( val.value || val ) : val )\n\t\t\t\t\t// Flatten the array.\n\t\t\t\t\t.reduce( ( prev, next ) => prev.concat( next ), [] )\n\t\t\t\t\t// Convert into string.\n\t\t\t\t\t.reduce( arrayValueReducer, '' );\n\n\t\t\t\tif ( !isFalsy( attrValue ) ) {\n\t\t\t\t\tnode.setAttributeNS( attrNs, attrName, attrValue );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Renders the `style` attribute of an HTML element based on\n\t * {@link module:ui/template~Template#attributes}.\n\t *\n\t * A style attribute is an {Object} with static values:\n\t *\n\t *\t\tattributes: {\n\t *\t\t\tstyle: {\n\t *\t\t\t\tcolor: 'red'\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * or values bound to {@link module:ui/model~Model} properties:\n\t *\n\t *\t\tattributes: {\n\t *\t\t\tstyle: {\n\t *\t\t\t\tcolor: bind.to( ... )\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * Note: The `style` attribute is rendered without setting the namespace. It does not seem to be\n\t * needed.\n\t *\n\t * @private\n\t * @param {Object} styles Styles located in `attributes.style` of {@link module:ui/template~TemplateDefinition}.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderStyleAttribute( styles, data ) {\n\t\tconst node = data.node;\n\n\t\tfor ( const styleName in styles ) {\n\t\t\tconst styleValue = styles[ styleName ];\n\n\t\t\t// Cases:\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\tcolor: bind.to( 'attribute' )\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\tif ( hasTemplateBinding( styleValue ) ) {\n\t\t\t\tthis._bindToObservable( {\n\t\t\t\t\tschema: [ styleValue ],\n\t\t\t\t\tupdater: getStyleUpdater( node, styleName ),\n\t\t\t\t\tdata\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// Cases:\n\t\t\t//\n\t\t\t//\t\tstyle: {\n\t\t\t//\t\t\tcolor: 'red'\n\t\t\t//\t\t}\n\t\t\t//\n\t\t\telse {\n\t\t\t\tnode.style[ styleName ] = styleValue;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Recursively renders HTML element's children from {@link module:ui/template~Template#children}.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_renderElementChildren( data ) {\n\t\tconst node = data.node;\n\t\tconst container = data.intoFragment ? document.createDocumentFragment() : node;\n\t\tconst isApplying = data.isApplying;\n\t\tlet childIndex = 0;\n\n\t\tfor ( const child of this.children ) {\n\t\t\tif ( isViewCollection( child ) ) {\n\t\t\t\tif ( !isApplying ) {\n\t\t\t\t\tchild.setParent( node );\n\n\t\t\t\t\t// Note: ViewCollection renders its children.\n\t\t\t\t\tfor ( const view of child ) {\n\t\t\t\t\t\tcontainer.appendChild( view.element );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( isView( child ) ) {\n\t\t\t\tif ( !isApplying ) {\n\t\t\t\t\tif ( !child.isRendered ) {\n\t\t\t\t\t\tchild.render();\n\t\t\t\t\t}\n\n\t\t\t\t\tcontainer.appendChild( child.element );\n\t\t\t\t}\n\t\t\t} else if ( isNode( child ) ) {\n\t\t\t\tcontainer.appendChild( child );\n\t\t\t} else {\n\t\t\t\tif ( isApplying ) {\n\t\t\t\t\tconst revertData = data.revertData;\n\t\t\t\t\tconst childRevertData = getEmptyRevertData();\n\n\t\t\t\t\trevertData.children.push( childRevertData );\n\n\t\t\t\t\tchild._renderNode( {\n\t\t\t\t\t\tnode: container.childNodes[ childIndex++ ],\n\t\t\t\t\t\tisApplying: true,\n\t\t\t\t\t\trevertData: childRevertData\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tcontainer.appendChild( child.render() );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( data.intoFragment ) {\n\t\t\tnode.appendChild( container );\n\t\t}\n\t}\n\n\t/**\n\t * Activates `on` event listeners from the {@link module:ui/template~TemplateDefinition}\n\t * on an HTML element.\n\t *\n\t * @protected\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t */\n\t_setUpListeners( data ) {\n\t\tif ( !this.eventListeners ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const key in this.eventListeners ) {\n\t\t\tconst revertBindings = this.eventListeners[ key ].map( schemaItem => {\n\t\t\t\tconst [ domEvtName, domSelector ] = key.split( '@' );\n\n\t\t\t\treturn schemaItem.activateDomEventListener( domEvtName, domSelector, data );\n\t\t\t} );\n\n\t\t\tif ( data.revertData ) {\n\t\t\t\tdata.revertData.bindings.push( revertBindings );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * For a given {@link module:ui/template~TemplateValueSchema} containing {@link module:ui/template~TemplateBinding}\n\t * activates the binding and sets its initial value.\n\t *\n\t * Note: {@link module:ui/template~TemplateValueSchema} can be for HTML element attributes or\n\t * text node `textContent`.\n\t *\n\t * @protected\n\t * @param {Object} options Binding options.\n\t * @param {module:ui/template~TemplateValueSchema} options.schema\n\t * @param {Function} options.updater A function which updates the DOM (like attribute or text).\n\t * @param {module:ui/template~RenderData} options.data Rendering data.\n\t */\n\t_bindToObservable( { schema, updater, data } ) {\n\t\tconst revertData = data.revertData;\n\n\t\t// Set initial values.\n\t\tsyncValueSchemaValue( schema, updater, data );\n\n\t\tconst revertBindings = schema\n\t\t\t// Filter \"falsy\" (false, undefined, null, '') value schema components out.\n\t\t\t.filter( item => !isFalsy( item ) )\n\t\t\t// Filter inactive bindings from schema, like static strings ('foo'), numbers (42), etc.\n\t\t\t.filter( item => item.observable )\n\t\t\t// Once only the actual binding are left, let the emitter listen to observable change:attribute event.\n\t\t\t// TODO: Reduce the number of listeners attached as many bindings may listen\n\t\t\t// to the same observable attribute.\n\t\t\t.map( templateBinding => templateBinding.activateAttributeListener( schema, updater, data ) );\n\n\t\tif ( revertData ) {\n\t\t\trevertData.bindings.push( revertBindings );\n\t\t}\n\t}\n\n\t/**\n\t * Reverts {@link module:ui/template~RenderData#revertData template data} from a node to\n\t * return it to the original state.\n\t *\n\t * @protected\n\t * @param {HTMLElement|Text} node A node to be reverted.\n\t * @param {module:ui/template~RenderData#revertData} revertData Stores information about\n\t * what changes have been made by {@link #apply} to the node.\n\t */\n\t_revertTemplateFromNode( node, revertData ) {\n\t\tfor ( const binding of revertData.bindings ) {\n\t\t\t// Each binding may consist of several observable+observable#attribute.\n\t\t\t// like the following has 2:\n\t\t\t//\n\t\t\t//\t\tclass: [\n\t\t\t//\t\t\t'x',\n\t\t\t//\t\t\tbind.to( 'foo' ),\n\t\t\t//\t\t\t'y',\n\t\t\t//\t\t\tbind.to( 'bar' )\n\t\t\t//\t\t]\n\t\t\t//\n\t\t\tfor ( const revertBinding of binding ) {\n\t\t\t\trevertBinding();\n\t\t\t}\n\t\t}\n\n\t\tif ( revertData.text ) {\n\t\t\tnode.textContent = revertData.text;\n\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const attrName in revertData.attributes ) {\n\t\t\tconst attrValue = revertData.attributes[ attrName ];\n\n\t\t\t// When the attribute has **not** been set before #apply().\n\t\t\tif ( attrValue === null ) {\n\t\t\t\tnode.removeAttribute( attrName );\n\t\t\t} else {\n\t\t\t\tnode.setAttribute( attrName, attrValue );\n\t\t\t}\n\t\t}\n\n\t\tfor ( let i = 0; i < revertData.children.length; ++i ) {\n\t\t\tthis._revertTemplateFromNode( node.childNodes[ i ], revertData.children[ i ] );\n\t\t}\n\t}\n}\n\nmix( Template, EmitterMixin );\n\n/**\n * Describes a binding created by the {@link module:ui/template~Template.bind} interface.\n *\n * @protected\n */\nexport class TemplateBinding {\n\t/**\n\t * Creates an instance of the {@link module:ui/template~TemplateBinding} class.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} def The definition of the binding.\n\t */\n\tconstructor( def ) {\n\t\tObject.assign( this, def );\n\n\t\t/**\n\t\t * An observable instance of the binding. It either:\n\t\t *\n\t\t * * provides the attribute with the value,\n\t\t * * or passes the event when a corresponding DOM event is fired.\n\t\t *\n\t\t * @member {module:utils/observablemixin~ObservableMixin} module:ui/template~TemplateBinding#observable\n\t\t */\n\n\t\t/**\n\t\t * An {@link module:utils/emittermixin~Emitter} used by the binding to:\n\t\t *\n\t\t * * listen to the attribute change in the {@link module:ui/template~TemplateBinding#observable},\n\t\t * * or listen to the event in the DOM.\n\t\t *\n\t\t * @member {module:utils/emittermixin~EmitterMixin} module:ui/template~TemplateBinding#emitter\n\t\t */\n\n\t\t/**\n\t\t * The name of the {@link module:ui/template~TemplateBinding#observable observed attribute}.\n\t\t *\n\t\t * @member {String} module:ui/template~TemplateBinding#attribute\n\t\t */\n\n\t\t/**\n\t\t * A custom function to process the value of the {@link module:ui/template~TemplateBinding#attribute}.\n\t\t *\n\t\t * @member {Function} [module:ui/template~TemplateBinding#callback]\n\t\t */\n\t}\n\n\t/**\n\t * Returns the value of the binding. It is the value of the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}. The value may be processed by the\n\t * {@link module:ui/template~TemplateBinding#callback}, if such has been passed to the binding.\n\t *\n\t * @param {Node} [node] A native DOM node, passed to the custom {@link module:ui/template~TemplateBinding#callback}.\n\t * @returns {*} The value of {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}.\n\t */\n\tgetValue( node ) {\n\t\tconst value = this.observable[ this.attribute ];\n\n\t\treturn this.callback ? this.callback( value, node ) : value;\n\t}\n\n\t/**\n\t * Activates the listener which waits for changes of the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable}, then updates the DOM with the aggregated\n\t * value of {@link module:ui/template~TemplateValueSchema}.\n\t *\n\t * @param {module:ui/template~TemplateValueSchema} schema A full schema to generate an attribute or text in the DOM.\n\t * @param {Function} updater A DOM updater function used to update the native DOM attribute or text.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t * @returns {Function} A function to sever the listener binding.\n\t */\n\tactivateAttributeListener( schema, updater, data ) {\n\t\tconst callback = () => syncValueSchemaValue( schema, updater, data );\n\n\t\tthis.emitter.listenTo( this.observable, 'change:' + this.attribute, callback );\n\n\t\t// Allows revert of the listener.\n\t\treturn () => {\n\t\t\tthis.emitter.stopListening( this.observable, 'change:' + this.attribute, callback );\n\t\t};\n\t}\n}\n\n/**\n * Describes either:\n *\n * * a binding to an {@link module:utils/observablemixin~Observable},\n * * or a native DOM event binding.\n *\n * It is created by the {@link module:ui/template~BindChain#to} method.\n *\n * @protected\n */\nexport class TemplateToBinding extends TemplateBinding {\n\t/**\n\t * Activates the listener for the native DOM event, which when fired, is propagated by\n\t * the {@link module:ui/template~TemplateBinding#emitter}.\n\t *\n\t * @param {String} domEvtName The name of the native DOM event.\n\t * @param {String} domSelector The selector in the DOM to filter delegated events.\n\t * @param {module:ui/template~RenderData} data Rendering data.\n\t * @returns {Function} A function to sever the listener binding.\n\t */\n\tactivateDomEventListener( domEvtName, domSelector, data ) {\n\t\tconst callback = ( evt, domEvt ) => {\n\t\t\tif ( !domSelector || domEvt.target.matches( domSelector ) ) {\n\t\t\t\tif ( typeof this.eventNameOrFunction == 'function' ) {\n\t\t\t\t\tthis.eventNameOrFunction( domEvt );\n\t\t\t\t} else {\n\t\t\t\t\tthis.observable.fire( this.eventNameOrFunction, domEvt );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.emitter.listenTo( data.node, domEvtName, callback );\n\n\t\t// Allows revert of the listener.\n\t\treturn () => {\n\t\t\tthis.emitter.stopListening( data.node, domEvtName, callback );\n\t\t};\n\t}\n}\n\n/**\n * Describes a binding to {@link module:utils/observablemixin~ObservableMixin} created by the {@link module:ui/template~BindChain#if}\n * method.\n *\n * @protected\n */\nexport class TemplateIfBinding extends TemplateBinding {\n\t/**\n\t * @inheritDoc\n\t */\n\tgetValue( node ) {\n\t\tconst value = super.getValue( node );\n\n\t\treturn isFalsy( value ) ? false : ( this.valueIfTrue || true );\n\t}\n\n\t/**\n\t * The value of the DOM attribute or text to be set if the {@link module:ui/template~TemplateBinding#attribute} in\n\t * {@link module:ui/template~TemplateBinding#observable} is `true`.\n\t *\n\t * @member {String} [module:ui/template~TemplateIfBinding#valueIfTrue]\n\t */\n}\n\n// Checks whether given {@link module:ui/template~TemplateValueSchema} contains a\n// {@link module:ui/template~TemplateBinding}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @returns {Boolean}\nfunction hasTemplateBinding( schema ) {\n\tif ( !schema ) {\n\t\treturn false;\n\t}\n\n\t// Normalize attributes with additional data like namespace:\n\t//\n\t//\t\tclass: {\n\t//\t\t\tns: 'abc',\n\t//\t\t\tvalue: [ ... ]\n\t//\t\t}\n\t//\n\tif ( schema.value ) {\n\t\tschema = schema.value;\n\t}\n\n\tif ( Array.isArray( schema ) ) {\n\t\treturn schema.some( hasTemplateBinding );\n\t} else if ( schema instanceof TemplateBinding ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Assembles the value using {@link module:ui/template~TemplateValueSchema} and stores it in a form of\n// an Array. Each entry of the Array corresponds to one of {@link module:ui/template~TemplateValueSchema}\n// items.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\n// @returns {Array}\nfunction getValueSchemaValue( schema, node ) {\n\treturn schema.map( schemaItem => {\n\t\t// Process {@link module:ui/template~TemplateBinding} bindings.\n\t\tif ( schemaItem instanceof TemplateBinding ) {\n\t\t\treturn schemaItem.getValue( node );\n\t\t}\n\n\t\t// All static values like strings, numbers, and \"falsy\" values (false, null, undefined, '', etc.) just pass.\n\t\treturn schemaItem;\n\t} );\n}\n\n// A function executed each time the bound Observable attribute changes, which updates the DOM with a value\n// constructed from {@link module:ui/template~TemplateValueSchema}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Function} updater A function which updates the DOM (like attribute or text).\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\nfunction syncValueSchemaValue( schema, updater, { node } ) {\n\tlet value = getValueSchemaValue( schema, node );\n\n\t// Check if schema is a single Template.bind.if, like:\n\t//\n\t//\t\tclass: Template.bind.if( 'foo' )\n\t//\n\tif ( schema.length == 1 && schema[ 0 ] instanceof TemplateIfBinding ) {\n\t\tvalue = value[ 0 ];\n\t} else {\n\t\tvalue = value.reduce( arrayValueReducer, '' );\n\t}\n\n\tif ( isFalsy( value ) ) {\n\t\tupdater.remove();\n\t} else {\n\t\tupdater.set( value );\n\t}\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset `textContent`.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @returns {Object}\nfunction getTextUpdater( node ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tnode.textContent = value;\n\t\t},\n\n\t\tremove() {\n\t\t\tnode.textContent = '';\n\t\t}\n\t};\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset an attribute.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} attrName Name of the attribute to be modified.\n// @param {String} [ns=null] Namespace to use.\n// @returns {Object}\nfunction getAttributeUpdater( el, attrName, ns ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tel.setAttributeNS( ns, attrName, value );\n\t\t},\n\n\t\tremove() {\n\t\t\tel.removeAttributeNS( ns, attrName );\n\t\t}\n\t};\n}\n\n// Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of CSSStyleDeclaration to set or remove a style.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} styleName Name of the style to be modified.\n// @returns {Object}\nfunction getStyleUpdater( el, styleName ) {\n\treturn {\n\t\tset( value ) {\n\t\t\tel.style[ styleName ] = value;\n\t\t},\n\n\t\tremove() {\n\t\t\tel.style[ styleName ] = null;\n\t\t}\n\t};\n}\n\n// Clones definition of the template.\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition}\nfunction clone( def ) {\n\tconst clone = cloneDeepWith( def, value => {\n\t\t// Don't clone the `Template.bind`* bindings because of the references to Observable\n\t\t// and DomEmitterMixin instances inside, which would also be traversed and cloned by greedy\n\t\t// cloneDeepWith algorithm. There's no point in cloning Observable/DomEmitterMixins\n\t\t// along with the definition.\n\t\t//\n\t\t// Don't clone Template instances if provided as a child. They're simply #render()ed\n\t\t// and nothing should interfere.\n\t\t//\n\t\t// Also don't clone View instances if provided as a child of the Template. The template\n\t\t// instance will be extracted from the View during the normalization and there's no need\n\t\t// to clone it.\n\t\tif ( value && ( value instanceof TemplateBinding || isTemplate( value ) || isView( value ) || isViewCollection( value ) ) ) {\n\t\t\treturn value;\n\t\t}\n\t} );\n\n\treturn clone;\n}\n\n// Normalizes given {@link module:ui/template~TemplateDefinition}.\n//\n// See:\n//  * {@link normalizeAttributes}\n//  * {@link normalizeListeners}\n//  * {@link normalizePlainTextDefinition}\n//  * {@link normalizeTextDefinition}\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition} Normalized definition.\nfunction normalize( def ) {\n\tif ( typeof def == 'string' ) {\n\t\tdef = normalizePlainTextDefinition( def );\n\t} else if ( def.text ) {\n\t\tnormalizeTextDefinition( def );\n\t}\n\n\tif ( def.on ) {\n\t\tdef.eventListeners = normalizeListeners( def.on );\n\n\t\t// Template mixes EmitterMixin, so delete #on to avoid collision.\n\t\tdelete def.on;\n\t}\n\n\tif ( !def.text ) {\n\t\tif ( def.attributes ) {\n\t\t\tnormalizeAttributes( def.attributes );\n\t\t}\n\n\t\tconst children = [];\n\n\t\tif ( def.children ) {\n\t\t\tif ( isViewCollection( def.children ) ) {\n\t\t\t\tchildren.push( def.children );\n\t\t\t} else {\n\t\t\t\tfor ( const child of def.children ) {\n\t\t\t\t\tif ( isTemplate( child ) || isView( child ) || isNode( child ) ) {\n\t\t\t\t\t\tchildren.push( child );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchildren.push( new Template( child ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdef.children = children;\n\t}\n\n\treturn def;\n}\n\n// Normalizes \"attributes\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tattributes: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: {\n//\t\t\t\tvalue: 'bar'\n//\t\t\t}\n//\t\t}\n//\n// becomes\n//\n//\t\tattributes: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: {\n//\t\t\t\tvalue: [ 'bar' ]\n//\t\t\t}\n//\t\t}\n//\n// @param {Object} attrs\nfunction normalizeAttributes( attrs ) {\n\tfor ( const a in attrs ) {\n\t\tif ( attrs[ a ].value ) {\n\t\t\tattrs[ a ].value = [].concat( attrs[ a ].value );\n\t\t}\n\n\t\tarrayify( attrs, a );\n\t}\n}\n\n// Normalizes \"on\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\ton: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// becomes\n//\n//\t\ton: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// @param {Object} listeners\n// @returns {Object} Object containing normalized listeners.\nfunction normalizeListeners( listeners ) {\n\tfor ( const l in listeners ) {\n\t\tarrayify( listeners, l );\n\t}\n\n\treturn listeners;\n}\n\n// Normalizes \"string\" {@link module:ui/template~TemplateDefinition}.\n//\n//\t\t\"foo\"\n//\n// becomes\n//\n//\t\t{ text: [ 'foo' ] },\n//\n// @param {String} def\n// @returns {module:ui/template~TemplateDefinition} Normalized template definition.\nfunction normalizePlainTextDefinition( def ) {\n\treturn {\n\t\ttext: [ def ]\n\t};\n}\n\n// Normalizes text {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tchildren: [\n//\t\t\t{ text: 'def' },\n//\t\t\t{ text: {@link module:ui/template~TemplateBinding} }\n//\t\t]\n//\n// becomes\n//\n//\t\tchildren: [\n//\t\t\t{ text: [ 'def' ] },\n//\t\t\t{ text: [ {@link module:ui/template~TemplateBinding} ] }\n//\t\t]\n//\n// @param {module:ui/template~TemplateDefinition} def\nfunction normalizeTextDefinition( def ) {\n\tif ( !Array.isArray( def.text ) ) {\n\t\tdef.text = [ def.text ];\n\t}\n}\n\n// Wraps an entry in Object in an Array, if not already one.\n//\n//\t\t{\n//\t\t\tx: 'y',\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// becomes\n//\n//\t\t{\n//\t\t\tx: [ 'y' ],\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// @param {Object} obj\n// @param {String} key\nfunction arrayify( obj, key ) {\n\tif ( !Array.isArray( obj[ key ] ) ) {\n\t\tobj[ key ] = [ obj[ key ] ];\n\t}\n}\n\n// A helper which concatenates the value avoiding unwanted\n// leading white spaces.\n//\n// @param {String} prev\n// @param {String} cur\n// @returns {String}\nfunction arrayValueReducer( prev, cur ) {\n\tif ( isFalsy( cur ) ) {\n\t\treturn prev;\n\t} else if ( isFalsy( prev ) ) {\n\t\treturn cur;\n\t} else {\n\t\treturn `${ prev } ${ cur }`;\n\t}\n}\n\n// Extends one object defined in the following format:\n//\n//\t\t{\n//\t\t\tkey1: [Array1],\n//\t\t\tkey2: [Array2],\n//\t\t\t...\n//\t\t\tkeyN: [ArrayN]\n//\t\t}\n//\n// with another object of the same data format.\n//\n// @param {Object} obj Base object.\n// @param {Object} ext Object extending base.\n// @returns {String}\nfunction extendObjectValueArray( obj, ext ) {\n\tfor ( const a in ext ) {\n\t\tif ( obj[ a ] ) {\n\t\t\tobj[ a ].push( ...ext[ a ] );\n\t\t} else {\n\t\t\tobj[ a ] = ext[ a ];\n\t\t}\n\t}\n}\n\n// A helper for {@link module:ui/template~Template#extend}. Recursively extends {@link module:ui/template~Template} instance\n// with content from {@link module:ui/template~TemplateDefinition}. See {@link module:ui/template~Template#extend} to learn more.\n//\n// @param {module:ui/template~Template} def A template instance to be extended.\n// @param {module:ui/template~TemplateDefinition} def A definition which is to extend the template instance.\nfunction extendTemplate( template, def ) {\n\tif ( def.attributes ) {\n\t\tif ( !template.attributes ) {\n\t\t\ttemplate.attributes = {};\n\t\t}\n\n\t\textendObjectValueArray( template.attributes, def.attributes );\n\t}\n\n\tif ( def.eventListeners ) {\n\t\tif ( !template.eventListeners ) {\n\t\t\ttemplate.eventListeners = {};\n\t\t}\n\n\t\textendObjectValueArray( template.eventListeners, def.eventListeners );\n\t}\n\n\tif ( def.text ) {\n\t\ttemplate.text.push( ...def.text );\n\t}\n\n\tif ( def.children && def.children.length ) {\n\t\tif ( template.children.length != def.children.length ) {\n\t\t\t/**\n\t\t\t * The number of children in extended definition does not match.\n\t\t\t *\n\t\t\t * @error ui-template-extend-children-mismatch\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'ui-template-extend-children-mismatch: The number of children in extended definition does not match.'\n\t\t\t);\n\t\t}\n\n\t\tlet childIndex = 0;\n\n\t\tfor ( const childDef of def.children ) {\n\t\t\textendTemplate( template.children[ childIndex++ ], childDef );\n\t\t}\n\t}\n}\n\n// Checks if value is \"falsy\".\n// Note: 0 (Number) is not \"falsy\" in this context.\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isFalsy( value ) {\n\treturn !value && value !== 0;\n}\n\n// Checks if the item is an instance of {@link module:ui/view~View}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isView( item ) {\n\treturn item instanceof View;\n}\n\n// Checks if the item is an instance of {@link module:ui/template~Template}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isTemplate( item ) {\n\treturn item instanceof Template;\n}\n\n// Checks if the item is an instance of {@link module:ui/viewcollection~ViewCollection}\n//\n// @private\n// @param {*} value Value to be checked.\nfunction isViewCollection( item ) {\n\treturn item instanceof ViewCollection;\n}\n\n// Creates an empty skeleton for {@link module:ui/template~Template#revert}\n// data.\n//\n// @private\nfunction getEmptyRevertData() {\n\treturn {\n\t\tchildren: [],\n\t\tbindings: [],\n\t\tattributes: {}\n\t};\n}\n\n// Checks whether an attribute should be extended when\n// {@link module:ui/template~Template#apply} is called.\n//\n// @private\n// @param {String} attrName Attribute name to check.\nfunction shouldExtend( attrName ) {\n\treturn attrName == 'class' || attrName == 'style';\n}\n\n/**\n * A definition of the {@link module:ui/template~Template}. It describes what kind of\n * node a template will render (HTML element or text), attributes of an element, DOM event\n * listeners and children.\n *\n * Also see:\n * * {@link module:ui/template~TemplateValueSchema} to learn about HTML element attributes,\n * * {@link module:ui/template~TemplateListenerSchema} to learn about DOM event listeners.\n *\n * A sample definition on an HTML element can look like this:\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\ttag: 'span',\n *\t\t\t\t\tattributes: { ... },\n *\t\t\t\t\tchildren: [ ... ],\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\ttext: 'static–text'\n *\t\t\t\t},\n *\t\t\t\t'also-static–text',\n *\t\t\t],\n *\t\t\tattributes: {\n *\t\t\t\tclass: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tid: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tstyle: {@link module:ui/template~TemplateValueSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\t'click': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// Document.querySelector format is also accepted.\n *\t\t\t\t'keyup@a.some-class': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t}\n *\t\t} );\n *\n * A {@link module:ui/view~View}, another {@link module:ui/template~Template} or a native DOM node\n * can also become a child of a template. When a view is passed, its {@link module:ui/view~View#element} is used:\n *\n *\t\tconst view = new SomeView();\n *\t\tconst childTemplate = new Template( { ... } );\n *\t\tconst childNode = document.createElement( 'b' );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: [\n *\t\t\t\t// view#element will be added as a child of this <p>.\n *\t\t\t\tview,\n *\n * \t\t\t\t// The output of childTemplate.render() will be added here.\n *\t\t\t\tchildTemplate,\n *\n *\t\t\t\t// Native DOM nodes are included directly in the rendered output.\n *\t\t\t\tchildNode\n *\t\t\t]\n *\t\t} );\n *\n * An entire {@link module:ui/viewcollection~ViewCollection} can be used as a child in the definition:\n *\n *\t\tconst collection = new ViewCollection();\n *\t\tcollection.add( someView );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: collection\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateDefinition\n * @type Object\n *\n * @property {String} tag See the template {@link module:ui/template~Template#tag} property.\n *\n * @property {Array.<module:ui/template~TemplateDefinition>} [children]\n * See the template {@link module:ui/template~Template#children} property.\n *\n * @property {Object.<String, module:ui/template~TemplateValueSchema>} [attributes]\n * See the template {@link module:ui/template~Template#attributes} property.\n *\n * @property {String|module:ui/template~TemplateValueSchema|Array.<String|module:ui/template~TemplateValueSchema>} [text]\n * See the template {@link module:ui/template~Template#text} property.\n *\n * @property {Object.<String, module:ui/template~TemplateListenerSchema>} [on]\n * See the template {@link module:ui/template~Template#eventListeners} property.\n */\n\n/**\n * Describes a value of an HTML element attribute or `textContent`. It allows combining multiple\n * data sources like static values and {@link module:utils/observablemixin~Observable} attributes.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn where to use it,\n * * {@link module:ui/template~Template.bind} to learn how to configure\n * {@link module:utils/observablemixin~Observable} attribute bindings,\n * * {@link module:ui/template~Template#render} to learn how to render a template,\n * * {@link module:ui/template~BindChain#to `to()`} and {@link module:ui/template~BindChain#if `if()`}\n * methods to learn more about bindings.\n *\n * Attribute values can be described in many different ways:\n *\n *\t\t// Bind helper will create bindings to attributes of the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// A plain string schema.\n *\t\t\t\t'class': 'static-text',\n *\n *\t\t\t\t// An object schema, binds to the \"foo\" attribute of the\n *\t\t\t\t// observable and follows its value.\n *\t\t\t\t'class': bind.to( 'foo' ),\n *\n *\t\t\t\t// An array schema, combines the above.\n *\t\t\t\t'class': [\n *\t\t\t\t\t'static-text',\n *\t\t\t\t\tbind.to( 'bar', () => { ... } ),\n *\n * \t\t\t\t\t// Bindings can also be conditional.\n *\t\t\t\t\tbind.if( 'baz', 'class-when-baz-is-true' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema, with a custom namespace, e.g. useful for creating SVGs.\n *\t\t\t\t'class': {\n *\t\t\t\t\tns: 'http://ns.url',\n *\t\t\t\t\tvalue: [\n *\t\t\t\t\t\tbind.if( 'baz', 'value-when-true' ),\n *\t\t\t\t\t\t'static-text'\n *\t\t\t\t\t]\n *\t\t\t\t},\n *\n *\t\t\t\t// An object schema, specific for styles.\n *\t\t\t\tstyle: {\n *\t\t\t\t\tcolor: 'red',\n *\t\t\t\t\tbackgroundColor: bind.to( 'qux', () => { ... } )\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * Text nodes can also have complex values:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\t// Will render a \"foo\" text node.\n *\t\tnew Template( {\n *\t\t\ttext: 'foo'\n *\t\t} );\n *\n *\t\t// Will render a \"static text: {observable.foo}\" text node.\n *\t\t// The text of the node will be updated as the \"foo\" attribute changes.\n *\t\tnew Template( {\n *\t\t\ttext: [\n *\t\t\t\t'static text: ',\n *\t\t\t\tbind.to( 'foo', () => { ... } )\n *\t\t\t]\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateValueSchema\n * @type {Object|String|Array}\n */\n\n/**\n * Describes an event listener attached to an HTML element. Such listener can propagate DOM events\n * through an {@link module:utils/observablemixin~Observable} instance, execute custom callbacks\n * or both, if necessary.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn more about template definitions,\n * * {@link module:ui/template~BindChain#to `to()`} method to learn more about bindings.\n *\n * Check out different ways of attaching event listeners below:\n *\n *\t\t// Bind helper will propagate events through the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\ton: {\n *\t\t\t\t// An object schema. The observable will fire the \"clicked\" event upon DOM \"click\".\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\n *\t\t\t\t// An object schema. It will work for \"click\" event on \"a.foo\" children only.\n *\t\t\t\t'click@a.foo': bind.to( 'clicked' )\n *\n *\t\t\t\t// An array schema, makes the observable propagate multiple events.\n *\t\t\t\tclick: [\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( 'executed' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema with a custom callback.\n *\t\t\t\t'click@a.foo': {\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( evt => {\n *\t\t\t\t\t\tconsole.log( `${ evt.target } has been clicked!` );\n *\t\t\t\t\t} }\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateListenerSchema\n * @type {Object|String|Array}\n */\n\n/**\n * The return value of {@link ~Template.bind `Template.bind()`}. It provides `to()` and `if()`\n * methods to create the {@link module:utils/observablemixin~Observable observable} attribute and event bindings.\n *\n * @interface module:ui/template~BindChain\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to either:\n *\n * * an HTML element attribute or a text node `textContent`, so it remains in sync with the observable\n * attribute as it changes,\n * * or an HTML element DOM event, so the DOM events are propagated through an observable.\n *\n * Some common use cases of `to()` bindings are presented below:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// class=\"...\" attribute gets bound to `observable#a`\n *\t\t\t\tclass: bind.to( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t// <p>...</p> gets bound to observable#b; always `toUpperCase()`.\n *\t\t\t\t{\n *\t\t\t\t\ttext: bind.to( 'b', ( value, node ) => value.toUpperCase() )\n *\t\t\t\t}\n *\t\t\t],\n *\t\t\ton: {\n *\t\t\t\tclick: [\n *\t\t\t\t\t// An observable will fire \"clicked\" upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\n *\t\t\t\t\t// A custom callback will be executed upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( () => {\n *\t\t\t\t\t\t...\n *\t\t\t\t\t} )\n *\t\t\t\t]\n *\t\t\t}\n *\t\t} ).render();\n *\n * Learn more about using `to()` in the {@link module:ui/template~TemplateValueSchema} and\n * {@link module:ui/template~TemplateListenerSchema}.\n *\n * @method #to\n * @param {String|Function} eventNameOrFunctionOrAttribute An attribute name of\n * {@link module:utils/observablemixin~Observable} or a DOM event name or an event callback.\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @returns {module:ui/template~TemplateBinding}\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to an HTML element attribute or a text\n * node `textContent` so it remains in sync with the observable attribute as it changes.\n *\n * Unlike {@link module:ui/template~BindChain#to}, it controls the presence of the attribute or `textContent`\n * depending on the \"falseness\" of an {@link module:utils/observablemixin~Observable} attribute.\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'input',\n *\t\t\tattributes: {\n *\t\t\t\t// <input checked> when `observable#a` is not undefined/null/false/''\n *\t\t\t\t// <input> when `observable#a` is undefined/null/false\n *\t\t\t\tchecked: bind.if( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\t// <input>\"b-is-not-set\"</input> when `observable#b` is undefined/null/false/''\n *\t\t\t\t\t// <input></input> when `observable#b` is not \"falsy\"\n *\t\t\t\t\ttext: bind.if( 'b', 'b-is-not-set', ( value, node ) => !value )\n *\t\t\t\t}\n *\t\t\t]\n *\t\t} ).render();\n *\n * Learn more about using `if()` in the {@link module:ui/template~TemplateValueSchema}.\n *\n * @method #if\n * @param {String} attribute An attribute name of {@link module:utils/observablemixin~Observable} used in the binding.\n * @param {String} [valueIfTrue] Value set when the {@link module:utils/observablemixin~Observable} attribute is not\n * undefined/null/false/'' (empty string).\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @returns {module:ui/template~TemplateBinding}\n */\n\n/**\n * The {@link module:ui/template~Template#_renderNode} configuration.\n *\n * @private\n * @interface module:ui/template~RenderData\n */\n\n/**\n * Tells {@link module:ui/template~Template#_renderNode} to render\n * children into `DocumentFragment` first and then append the fragment\n * to the parent element. It is a speed optimization.\n *\n * @member {Boolean} #intoFragment\n */\n\n/**\n * A node which is being rendered.\n *\n * @member {HTMLElement|Text} #node\n */\n\n/**\n * Indicates whether the {@module:ui/template~RenderNodeOptions#node} has\n * been provided by {@module:ui/template~Template#apply}.\n *\n * @member {Boolean} #isApplying\n */\n\n/**\n * An object storing the data that helps {@module:ui/template~Template#revert}\n * bringing back an element to its initial state, i.e. before\n * {@module:ui/template~Template#apply} was called.\n *\n * @member {Object} #revertData\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/view\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ViewCollection from './viewcollection';\nimport Template from './template';\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n\nimport '../theme/globals/globals.css';\n\n/**\n * The basic view class, which represents an HTML element created out of a\n * {@link module:ui/view~View#template}. Views are building blocks of the user interface and handle\n * interaction\n *\n * Views {@link module:ui/view~View#registerChild aggregate} children in\n * {@link module:ui/view~View#createCollection collections} and manage the life cycle of DOM\n * listeners e.g. by handling rendering and destruction.\n *\n * See the {@link module:ui/template~TemplateDefinition} syntax to learn more about shaping view\n * elements, attributes and listeners.\n *\n *\t\tclass SampleView extends View {\n *\t\t\tconstructor( locale ) {\n *\t\t\t\tsuper( locale );\n *\n *\t\t\t\tconst bind = this.bindTemplate;\n *\n *\t\t\t\t// Views define their interface (state) using observable attributes.\n *\t\t\t\tthis.set( 'elementClass', 'bar' );\n *\n *\t\t\t\tthis.setTemplate( {\n *\t\t\t\t\ttag: 'p',\n *\n *\t\t\t\t\t// The element of the view can be defined with its children.\n *\t\t\t\t\tchildren: [\n *\t\t\t\t\t\t'Hello',\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\ttag: 'b',\n *\t\t\t\t\t\t\tchildren: [ 'world!' ]\n *\t\t\t\t\t\t}\n *\t\t\t\t\t],\n *\t\t\t\t\tattributes: {\n *\t\t\t\t\t\tclass: [\n *\t\t\t\t\t\t\t'foo',\n *\n *\t\t\t\t\t\t\t// Observable attributes control the state of the view in DOM.\n *\t\t\t\t\t\t\tbind.to( 'elementClass' )\n *\t\t\t\t\t\t]\n *\t\t\t\t\t},\n *\t\t\t\t\ton: {\n *\t\t\t\t\t\t// Views listen to DOM events and propagate them.\n *\t\t\t\t\t\tclick: bind.to( 'clicked' )\n *\t\t\t\t\t}\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n *\t\tconst view = new SampleView( locale );\n *\n *\t\tview.render();\n *\n *\t\t// Append <p class=\"foo bar\">Hello<b>world</b></p> to the <body>\n *\t\tdocument.body.appendChild( view.element );\n *\n *\t\t// Change the class attribute to <p class=\"foo baz\">Hello<b>world</b></p>\n *\t\tview.elementClass = 'baz';\n *\n *\t\t// Respond to the \"click\" event in DOM by executing a custom action.\n *\t\tview.on( 'clicked', () => {\n *\t\t\tconsole.log( 'The view has been clicked!' );\n *\t\t} );\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class View {\n\t/**\n\t * Creates an instance of the {@link module:ui/view~View} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t */\n\tconstructor( locale ) {\n\t\t/**\n\t\t * An HTML element of the view. `null` until {@link #render rendered}\n\t\t * from the {@link #template}.\n\t\t *\n\t\t *\t\tclass SampleView extends View {\n\t\t *\t\t\tconstructor() {\n\t\t *\t\t\t\tsuper();\n\t\t *\n\t\t *\t\t\t\t// A template instance the #element will be created from.\n\t\t *\t\t\t\tthis.setTemplate( {\n\t\t *\t\t\t\t\ttag: 'p'\n\t\t *\n\t\t *\t\t\t\t\t// ...\n\t\t *\t\t\t\t} );\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t *\t\tconst view = new SampleView();\n\t\t *\n\t\t *\t\t// Renders the #template.\n\t\t *\t\tview.render();\n\t\t *\n\t\t *\t\t// Append the HTML element of the view to <body>.\n\t\t *\t\tdocument.body.appendChild( view.element );\n\t\t *\n\t\t * **Note**: The element of the view can also be assigned directly:\n\t\t *\n\t\t *\t\tview.element = document.querySelector( '#my-container' );\n\t\t *\n\t\t * @member {HTMLElement}\n\t\t */\n\t\tthis.element = null;\n\n\t\t/**\n\t\t * Set `true` when the view has already been {@link module:ui/view~View#render rendered}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isRendered\n\t\t */\n\t\tthis.isRendered = false;\n\n\t\t/**\n\t\t * A set of tools to localize the user interface.\n\t\t *\n\t\t * Also see {@link module:core/editor/editor~Editor#locale}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/locale~Locale}\n\t\t */\n\t\tthis.locale = locale;\n\n\t\t/**\n\t\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t\t *\n\t\t * Note: If {@link #locale} instance hasn't been passed to the view this method may not\n\t\t * be available.\n\t\t *\n\t\t * @see module:utils/locale~Locale#t\n\t\t * @method\n\t\t */\n\t\tthis.t = locale && locale.t;\n\n\t\t/**\n\t\t * Collections registered with {@link #createCollection}.\n\t\t *\n\t\t * @protected\n\t\t * @member {Set.<module:ui/viewcollection~ViewCollection>}\n\t\t */\n\t\tthis._viewCollections = new Collection();\n\n\t\t/**\n\t\t * A collection of view instances, which have been added directly\n\t\t * into the {@link module:ui/template~Template#children}.\n\t\t *\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis._unboundChildren = this.createCollection();\n\n\t\t// Pass parent locale to its children.\n\t\tthis._viewCollections.on( 'add', ( evt, collection ) => {\n\t\t\tcollection.locale = locale;\n\t\t} );\n\n\t\t/**\n\t\t * Template of this view. It provides the {@link #element} representing\n\t\t * the view in DOM, which is {@link #render rendered}.\n\t\t *\n\t\t * @member {module:ui/template~Template} #template\n\t\t */\n\n\t\t/**\n\t\t * Cached {@link module:ui/template~BindChain bind chain} object created by the\n\t\t * {@link #template}. See {@link #bindTemplate}.\n\t\t *\n\t\t * @private\n\t\t * @member {Object} #_bindTemplate\n\t\t */\n\n\t\tthis.decorate( 'render' );\n\t}\n\n\t/**\n\t * Shorthand for {@link module:ui/template~Template.bind}, a binding\n\t * {@link module:ui/template~BindChain interface} pre–configured for the view instance.\n\t *\n\t * It provides {@link module:ui/template~BindChain#to `to()`} and\n\t * {@link module:ui/template~BindChain#if `if()`} methods that initialize bindings with\n\t * observable attributes and attach DOM listeners.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tconst bind = this.bindTemplate;\n\t *\n\t *\t\t\t\t// These {@link module:utils/observablemixin~Observable observable} attributes will control\n\t *\t\t\t\t// the state of the view in DOM.\n\t *\t\t\t\tthis.set( {\n\t *\t\t\t\t\telementClass: 'foo',\n\t *\t\t\t\t \tisEnabled: true\n\t *\t\t\t\t } );\n\t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n\t *\t\t\t\t\tattributes: {\n\t *\t\t\t\t\t\t// The class HTML attribute will follow elementClass\n\t *\t\t\t\t\t\t// and isEnabled view attributes.\n\t *\t\t\t\t\t\tclass: [\n\t *\t\t\t\t\t\t\tbind.to( 'elementClass' )\n\t *\t\t\t\t\t\t\tbind.if( 'isEnabled', 'present-when-enabled' )\n\t *\t\t\t\t\t\t]\n\t *\t\t\t\t\t},\n\t *\n\t *\t\t\t\t\ton: {\n\t *\t\t\t\t\t\t// The view will fire the \"clicked\" event upon clicking <p> in DOM.\n\t *\t\t\t\t\t\tclick: bind.to( 'clicked' )\n\t *\t\t\t\t\t}\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t * @method #bindTemplate\n\t */\n\tget bindTemplate() {\n\t\tif ( this._bindTemplate ) {\n\t\t\treturn this._bindTemplate;\n\t\t}\n\n\t\treturn ( this._bindTemplate = Template.bind( this, this ) );\n\t}\n\n\t/**\n\t * Creates a new collection of views, which can be used as\n\t * {@link module:ui/template~Template#children} of this view.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.items = this.createCollection();\n \t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n\t *\t\t\t\t\t// `items` collection will render here.\n\t *\t\t\t\t\tchildren: this.items\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView( locale );\n\t *\t\tconst child = new ChildView( locale );\n\t *\n\t *\t\tview.render();\n\t *\n\t *\t\t// It will append <p></p> to the <body>.\n\t *\t\tdocument.body.appendChild( view.element );\n\t *\n\t *\t\t// From now on the child is nested under its parent, which is also reflected in DOM.\n\t *\t\t// <p><child#element></p>\n\t *\t\tview.items.add( child );\n\t *\n\t * @returns {module:ui/viewcollection~ViewCollection} A new collection of view instances.\n\t */\n\tcreateCollection() {\n\t\tconst collection = new ViewCollection();\n\n\t\tthis._viewCollections.add( collection );\n\n\t\treturn collection;\n\t}\n\n\t/**\n\t * Registers a new child view under the view instance. Once registered, a child\n\t * view is managed by its parent, including {@link #render rendering}\n\t * and {@link #destroy destruction}.\n\t *\n\t * To revert this, use {@link #deregisterChild}.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.childA = new SomeChildView( locale );\n\t *\t\t\t\tthis.childB = new SomeChildView( locale );\n\t *\n\t *\t\t\t\tthis.setTemplate( { tag: 'p' } );\n\t *\n\t *\t\t\t\t// Register the children.\n\t *\t\t\t\tthis.registerChild( [ this.childA, this.childB ] );\n\t *\t\t\t}\n\t *\n\t *\t\t\trender() {\n\t *\t\t\t\tsuper.render();\n\t *\n\t *\t\t\t\tthis.element.appendChild( this.childA.element );\n\t *\t\t\t\tthis.element.appendChild( this.childB.element );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView( locale );\n\t *\n\t *\t\tview.render();\n\t *\n\t *\t\t// Will append <p><childA#element><b></b><childB#element></p>.\n\t *\t\tdocument.body.appendChild( view.element );\n\t *\n\t * **Note**: There's no need to add child views if they're already referenced in the\n\t * {@link #template}:\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor( locale ) {\n\t *\t\t\t\tsuper( locale );\n\t *\n\t *\t\t\t\tthis.childA = new SomeChildView( locale );\n\t *\t\t\t\tthis.childB = new SomeChildView( locale );\n\t *\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\ttag: 'p',\n\t *\n \t *\t\t\t\t\t// These children will be added automatically. There's no\n \t *\t\t\t\t\t// need to call {@link #registerChild} for any of them.\n\t *\t\t\t\t\tchildren: [ this.childA, this.childB ]\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\n\t *\t\t\t// ...\n\t *\t\t}\n\t *\n\t * @param {module:ui/view~View|Iterable.<module:ui/view~View>} children Children views to be registered.\n\t */\n\tregisterChild( children ) {\n\t\tif ( !isIterable( children ) ) {\n\t\t\tchildren = [ children ];\n\t\t}\n\n\t\tfor ( const child of children ) {\n\t\t\tthis._unboundChildren.add( child );\n\t\t}\n\t}\n\n\t/**\n\t * The opposite of {@link #registerChild}. Removes a child view from this view instance.\n\t * Once removed, the child is no longer managed by its parent, e.g. it can safely\n\t * become a child of another parent view.\n\t *\n\t * @see #registerChild\n\t * @param {module:ui/view~View|Iterable.<module:ui/view~View>} children Child views to be removed.\n\t */\n\tderegisterChild( children ) {\n\t\tif ( !isIterable( children ) ) {\n\t\t\tchildren = [ children ];\n\t\t}\n\n\t\tfor ( const child of children ) {\n\t\t\tthis._unboundChildren.remove( child );\n\t\t}\n\t}\n\n\t/**\n\t * Sets the {@link #template} of the view with with given definition.\n\t *\n\t * A shorthand for:\n\t *\n\t *\t\tview.setTemplate( definition );\n\t *\n\t * @param {module:ui/template~TemplateDefinition} definition Definition of view's template.\n\t */\n\tsetTemplate( definition ) {\n\t\tthis.template = new Template( definition );\n\t}\n\n\t/**\n\t * {@link module:ui/template~Template.extend Extends} the {@link #template} of the view with\n\t * with given definition.\n\t *\n\t * A shorthand for:\n\t *\n\t *\t\tTemplate.extend( view.template, definition );\n\t *\n\t * **Note**: Is requires the {@link #template} to be already set. See {@link #setTemplate}.\n\t *\n\t * @param {module:ui/template~TemplateDefinition} definition Definition which\n\t * extends the {@link #template}.\n\t */\n\textendTemplate( definition ) {\n\t\tTemplate.extend( this.template, definition );\n\t}\n\n\t/**\n\t * Recursively renders the view.\n\t *\n\t * Once the view is rendered:\n\t * * the {@link #element} becomes an HTML element out of {@link #template},\n\t * * the {@link #isRendered} flag is set `true`.\n\t *\n\t * **Note**: The children of the view:\n\t * * defined directly in the {@link #template}\n\t * * residing in collections created by the {@link #createCollection} method,\n\t * * and added by {@link #registerChild}\n\t * are also rendered in the process.\n\t *\n\t * In general, `render()` method is the right place to keep the code which refers to the\n\t * {@link #element} and should be executed at the very beginning of the view's life cycle.\n\t *\n\t * It is possible to {@link module:ui/template~Template.extend} the {@link #template} before\n\t * the view is rendered. To allow an early customization of the view (e.g. by its parent),\n\t * such references should be done in `render()`.\n\t *\n\t *\t\tclass SampleView extends View {\n\t *\t\t\tconstructor() {\n\t *\t\t\t\tthis.setTemplate( {\n\t *\t\t\t\t\t// ...\n\t *\t\t\t\t} );\n\t *\t\t\t},\n\t *\n\t *\t\t\trender() {\n\t *\t\t\t\t// View#element becomes available.\n\t *\t\t\t\tsuper.render();\n\t *\n\t *\t\t\t\t// The \"scroll\" listener depends on #element.\n\t *\t\t\t\tthis.listenTo( window, 'scroll', () => {\n\t *\t\t\t\t\t// A reference to #element would render the #template and make it non-extendable.\n\t *\t\t\t\t\tif ( window.scrollY > 0 ) {\n\t *\t\t\t\t\t\tthis.element.scrollLeft = 100;\n\t *\t\t\t\t\t} else {\n\t *\t\t\t\t\t\tthis.element.scrollLeft = 0;\n\t *\t\t\t\t\t}\n\t *\t\t\t\t} );\n\t *\t\t\t}\n\t *\t\t}\n\t *\n\t *\t\tconst view = new SampleView();\n\t *\n\t *\t\t// Let's customize the view before it gets rendered.\n\t *\t\tview.extendTemplate( {\n\t *\t\t\tattributes: {\n\t *\t\t\t\tclass: [\n\t *\t\t\t\t\t'additional-class'\n\t *\t\t\t\t]\n\t *\t\t\t}\n\t *\t\t} );\n\t *\n\t *\t\t// Late rendering allows customization of the view.\n\t *\t\tview.render();\n\t */\n\trender() {\n\t\tif ( this.isRendered ) {\n\t\t\t/**\n\t\t\t * This View has already been rendered.\n\t\t\t *\n\t\t\t * @error ui-view-render-rendered\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'ui-view-render-already-rendered: This View has already been rendered.' );\n\t\t}\n\n\t\t// Render #element of the view.\n\t\tif ( this.template ) {\n\t\t\tthis.element = this.template.render();\n\n\t\t\t// Auto–register view children from #template.\n\t\t\tthis.registerChild( this.template.getViews() );\n\t\t}\n\n\t\tthis.isRendered = true;\n\t}\n\n\t/**\n\t * Recursively destroys the view instance and child views added by {@link #registerChild} and\n\t * residing in collections created by the {@link #createCollection}.\n\t *\n\t * Destruction disables all event listeners:\n\t * * created on the view, e.g. `view.on( 'event', () => {} )`,\n\t * * defined in the {@link #template} for DOM events.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\n\t\tthis._viewCollections.map( c => c.destroy() );\n\t}\n\n\t/**\n\t * Event fired by the {@link #render} method. Actual rendering is executed as a listener to\n\t * this event with the default priority.\n\t *\n\t * See {@link module:utils/observablemixin~ObservableMixin.decorate} for more information and samples.\n\t *\n\t * @event render\n\t */\n}\n\nmix( View, DomEmitterMixin );\nmix( View, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/position\n */\n\nimport global from './global';\nimport Rect from './rect';\nimport getPositionedAncestor from './getpositionedancestor';\nimport getBorderWidths from './getborderwidths';\nimport { isFunction } from 'lodash-es';\n\n/**\n * Calculates the `position: absolute` coordinates of a given element so it can be positioned with respect to the\n * target in the visually most efficient way, taking various restrictions like viewport or limiter geometry\n * into consideration.\n *\n *\t\t// The element which is to be positioned.\n *\t\tconst element = document.body.querySelector( '#toolbar' );\n *\n *\t\t// A target to which the element is positioned relatively.\n *\t\tconst target = document.body.querySelector( '#container' );\n *\n *\t\t// Finding the optimal coordinates for the positioning.\n *\t\tconst { left, top, name } = getOptimalPosition( {\n *\t\t\telement: element,\n *\t\t\ttarget: target,\n *\n * \t\t\t// The algorithm will chose among these positions to meet the requirements such\n * \t\t\t// as \"limiter\" element or \"fitInViewport\", set below. The positions are considered\n * \t\t\t// in the order of the array.\n *\t\t\tpositions: [\n *\t\t\t\t//\n *\t\t\t \t//\t[ Target ]\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t|     Element     |\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\n *\t\t\t\ttargetRect => ( {\n *\t\t\t\t\ttop: targetRect.bottom,\n *\t\t\t\t\tleft: targetRect.left,\n *\t\t\t\t\tname: 'mySouthEastPosition'\n *\t\t\t\t} ),\n *\n *\t\t\t\t//\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t|     Element     |\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t[ Target ]\n *\t\t\t\t//\n *\t\t\t\t( targetRect, elementRect ) => ( {\n *\t\t\t\t\ttop: targetRect.top - elementRect.height,\n *\t\t\t\t\tleft: targetRect.left,\n *\t\t\t\t\tname: 'myNorthEastPosition'\n *\t\t\t\t} )\n *\t\t\t],\n *\n *\t\t\t// Find a position such guarantees the element remains within visible boundaries of <body>.\n *\t\t\tlimiter: document.body,\n *\n *\t\t\t// Find a position such guarantees the element remains within visible boundaries of the browser viewport.\n *\t\t\tfitInViewport: true\n *\t\t} );\n *\n *\t\t// The best position which fits into document.body and the viewport. May be useful\n *\t\t// to set proper class on the `element`.\n *\t\tconsole.log( name ); // -> \"myNorthEastPosition\"\n *\n *\t\t// Using the absolute coordinates which has been found to position the element\n *\t\t// as in the diagram depicting the \"myNorthEastPosition\" position.\n *\t\telement.style.top = top;\n *\t\telement.style.left = left;\n *\n * @param {module:utils/dom/position~Options} options Positioning options object.\n * @returns {module:utils/dom/position~Position}\n */\nexport function getOptimalPosition( { element, target, positions, limiter, fitInViewport } ) {\n\t// If the {@link module:utils/dom/position~Options#target} is a function, use what it returns.\n\t// https://github.com/ckeditor/ckeditor5-utils/issues/157\n\tif ( isFunction( target ) ) {\n\t\ttarget = target();\n\t}\n\n\t// If the {@link module:utils/dom/position~Options#limiter} is a function, use what it returns.\n\t// https://github.com/ckeditor/ckeditor5-ui/issues/260\n\tif ( isFunction( limiter ) ) {\n\t\tlimiter = limiter();\n\t}\n\n\tconst positionedElementAncestor = getPositionedAncestor( element.parentElement );\n\tconst elementRect = new Rect( element );\n\tconst targetRect = new Rect( target );\n\n\tlet bestPosition;\n\tlet name;\n\n\t// If there are no limits, just grab the very first position and be done with that drama.\n\tif ( !limiter && !fitInViewport ) {\n\t\t[ name, bestPosition ] = getPosition( positions[ 0 ], targetRect, elementRect );\n\t} else {\n\t\tconst limiterRect = limiter && new Rect( limiter ).getVisible();\n\t\tconst viewportRect = fitInViewport && new Rect( global.window );\n\n\t\t[ name, bestPosition ] =\n\t\t\tgetBestPosition( positions, targetRect, elementRect, limiterRect, viewportRect ) ||\n\t\t\t// If there's no best position found, i.e. when all intersections have no area because\n\t\t\t// rects have no width or height, then just use the first available position.\n\t\t\tgetPosition( positions[ 0 ], targetRect, elementRect );\n\t}\n\n\tlet { left, top } = getAbsoluteRectCoordinates( bestPosition );\n\n\tif ( positionedElementAncestor ) {\n\t\tconst ancestorPosition = getAbsoluteRectCoordinates( new Rect( positionedElementAncestor ) );\n\t\tconst ancestorBorderWidths = getBorderWidths( positionedElementAncestor );\n\n\t\t// (https://github.com/ckeditor/ckeditor5-ui-default/issues/126)\n\t\t// If there's some positioned ancestor of the panel, then its `Rect` must be taken into\n\t\t// consideration. `Rect` is always relative to the viewport while `position: absolute` works\n\t\t// with respect to that positioned ancestor.\n\t\tleft -= ancestorPosition.left;\n\t\ttop -= ancestorPosition.top;\n\n\t\t// (https://github.com/ckeditor/ckeditor5-utils/issues/139)\n\t\t// If there's some positioned ancestor of the panel, not only its position must be taken into\n\t\t// consideration (see above) but also its internal scrolls. Scroll have an impact here because `Rect`\n\t\t// is relative to the viewport (it doesn't care about scrolling), while `position: absolute`\n\t\t// must compensate that scrolling.\n\t\tleft += positionedElementAncestor.scrollLeft;\n\t\ttop += positionedElementAncestor.scrollTop;\n\n\t\t// (https://github.com/ckeditor/ckeditor5-utils/issues/139)\n\t\t// If there's some positioned ancestor of the panel, then its `Rect` includes its CSS `borderWidth`\n\t\t// while `position: absolute` positioning does not consider it.\n\t\t// E.g. `{ position: absolute, top: 0, left: 0 }` means upper left corner of the element,\n\t\t// not upper-left corner of its border.\n\t\tleft -= ancestorBorderWidths.left;\n\t\ttop -= ancestorBorderWidths.top;\n\t}\n\n\treturn { left, top, name };\n}\n\n// For given position function, returns a corresponding `Rect` instance.\n//\n// @private\n// @param {Function} position A function returning {@link module:utils/dom/position~Position}.\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of positioned element.\n// @returns {Array} An array containing position name and its Rect.\nfunction getPosition( position, targetRect, elementRect ) {\n\tconst { left, top, name } = position( targetRect, elementRect );\n\n\treturn [ name, elementRect.clone().moveTo( left, top ) ];\n}\n\n// For a given array of positioning functions, returns such that provides the best\n// fit of the `elementRect` into the `limiterRect` and `viewportRect`.\n//\n// @private\n// @param {module:utils/dom/position~Options#positions} positions Functions returning\n// {@link module:utils/dom/position~Position} to be checked, in the order of preference.\n// @param {utils/dom/rect~Rect} targetRect A rect of the {@link module:utils/dom/position~Options#target}.\n// @param {utils/dom/rect~Rect} elementRect A rect of positioned {@link module:utils/dom/position~Options#element}.\n// @param {utils/dom/rect~Rect} limiterRect A rect of the {@link module:utils/dom/position~Options#limiter}.\n// @param {utils/dom/rect~Rect} viewportRect A rect of the viewport.\n// @returns {Array} An array containing the name of the position and it's rect.\nfunction getBestPosition( positions, targetRect, elementRect, limiterRect, viewportRect ) {\n\tlet maxLimiterIntersectArea = 0;\n\tlet maxViewportIntersectArea = 0;\n\tlet bestPositionRect;\n\tlet bestPositionName;\n\n\t// This is when element is fully visible.\n\tconst elementRectArea = elementRect.getArea();\n\n\tpositions.some( position => {\n\t\tconst [ positionName, positionRect ] = getPosition( position, targetRect, elementRect );\n\t\tlet limiterIntersectArea;\n\t\tlet viewportIntersectArea;\n\n\t\tif ( limiterRect ) {\n\t\t\tif ( viewportRect ) {\n\t\t\t\t// Consider only the part of the limiter which is visible in the viewport. So the limiter is getting limited.\n\t\t\t\tconst limiterViewportIntersectRect = limiterRect.getIntersection( viewportRect );\n\n\t\t\t\tif ( limiterViewportIntersectRect ) {\n\t\t\t\t\t// If the limiter is within the viewport, then check the intersection between that part of the\n\t\t\t\t\t// limiter and actual position.\n\t\t\t\t\tlimiterIntersectArea = limiterViewportIntersectRect.getIntersectionArea( positionRect );\n\t\t\t\t} else {\n\t\t\t\t\tlimiterIntersectArea = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlimiterIntersectArea = limiterRect.getIntersectionArea( positionRect );\n\t\t\t}\n\t\t}\n\n\t\tif ( viewportRect ) {\n\t\t\tviewportIntersectArea = viewportRect.getIntersectionArea( positionRect );\n\t\t}\n\n\t\t// The only criterion: intersection with the viewport.\n\t\tif ( viewportRect && !limiterRect ) {\n\t\t\tif ( viewportIntersectArea > maxViewportIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\t\t// The only criterion: intersection with the limiter.\n\t\telse if ( !viewportRect && limiterRect ) {\n\t\t\tif ( limiterIntersectArea > maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\t\t// Two criteria: intersection with the viewport and the limiter visible in the viewport.\n\t\telse {\n\t\t\tif ( viewportIntersectArea > maxViewportIntersectArea && limiterIntersectArea >= maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t} else if ( viewportIntersectArea >= maxViewportIntersectArea && limiterIntersectArea > maxLimiterIntersectArea ) {\n\t\t\t\tsetBestPosition();\n\t\t\t}\n\t\t}\n\n\t\tfunction setBestPosition() {\n\t\t\tmaxViewportIntersectArea = viewportIntersectArea;\n\t\t\tmaxLimiterIntersectArea = limiterIntersectArea;\n\t\t\tbestPositionRect = positionRect;\n\t\t\tbestPositionName = positionName;\n\t\t}\n\n\t\t// If a such position is found that element is fully container by the limiter then, obviously,\n\t\t// there will be no better one, so finishing.\n\t\treturn limiterIntersectArea === elementRectArea;\n\t} );\n\n\treturn bestPositionRect ? [ bestPositionName, bestPositionRect ] : null;\n}\n\n// DOMRect (also Rect) works in a scroll–independent geometry but `position: absolute` doesn't.\n// This function converts Rect to `position: absolute` coordinates.\n//\n// @private\n// @param {utils/dom/rect~Rect} rect A rect to be converted.\n// @returns {Object} Object containing `left` and `top` properties, in absolute coordinates.\nfunction getAbsoluteRectCoordinates( { left, top } ) {\n\tconst { scrollX, scrollY } = global.window;\n\n\treturn {\n\t\tleft: left + scrollX,\n\t\ttop: top + scrollY,\n\t};\n}\n\n/**\n * The `getOptimalPosition` helper options.\n *\n * @interface module:utils/dom/position~Options\n */\n\n/**\n * Element that is to be positioned.\n *\n * @member {HTMLElement} #element\n */\n\n/**\n * Target with respect to which the `element` is to be positioned.\n *\n * @member {HTMLElement|Range|ClientRect|Rect|Function} #target\n */\n\n/**\n * An array of functions which return {@link module:utils/dom/position~Position} relative\n * to the `target`, in the order of preference.\n *\n * @member {Array.<Function>} #positions\n */\n\n/**\n * When set, the algorithm will chose position which fits the most in the\n * limiter's bounding rect.\n *\n * @member {HTMLElement|Range|ClientRect|Rect|Function} #limiter\n */\n\n/**\n * When set, the algorithm will chose such a position which fits `element`\n * the most inside visible viewport.\n *\n * @member {Boolean} #fitInViewport\n */\n\n/**\n * An object describing a position in `position: absolute` coordinate\n * system, along with position name.\n *\n * @typedef {Object} module:utils/dom/position~Position\n *\n * @property {Number} top Top position offset.\n * @property {Number} left Left position offset.\n * @property {String} name Name of the position.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/getpositionedancestor\n */\n\nimport global from './global';\n\n/**\n * For a given element, returns the nearest ancestor element which CSS position is not \"static\".\n *\n * @param {HTMLElement} element The native DOM element to be checked.\n * @returns {HTMLElement|null}\n */\nexport default function getPositionedAncestor( element ) {\n\twhile ( element && element.tagName.toLowerCase() != 'html' ) {\n\t\tif ( global.window.getComputedStyle( element ).position != 'static' ) {\n\t\t\treturn element;\n\t\t}\n\n\t\telement = element.parentElement;\n\t}\n\n\treturn null;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/tounit\n */\n\n/**\n * Returns a helper function, which adds a desired trailing\n * `unit` to the passed value.\n *\n * @param {String} unit An unit like \"px\" or \"em\".\n * @returns {module:utils/dom/tounit~helper}\n */\nexport default function toUnit( unit ) {\n\t/**\n\t * A function, which adds a pre–defined trailing `unit`\n\t * to the passed `value`.\n\t *\n\t * @function helper\n \t * @param {*} value A value to be given the unit.\n \t * @returns {String} A value with the trailing unit.\n\t */\n\treturn value => value + unit;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/panel/balloon/balloonpanelview\n */\n\nimport View from '../../view';\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\nimport isRange from '@ckeditor/ckeditor5-utils/src/dom/isrange';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { isElement } from 'lodash-es';\n\nimport '../../../theme/components/panel/balloonpanel.css';\n\nconst toPx = toUnit( 'px' );\nconst defaultLimiterElement = global.document.body;\n\n/**\n * The balloon panel view class.\n *\n * A floating container which can\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#pin pin} to any\n * {@link module:utils/dom/position~Options#target target} in DOM and remain in that position\n * e.g. when the web page is scrolled.\n *\n * The balloon panel can be used to display contextual, non-blocking UI like forms, toolbars and\n * the like in its {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#content} view\n * collection.\n *\n * There is a number of {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}\n * that the balloon can use, automatically switching from one to another when the viewport space becomes\n * scarce to keep the balloon visible to the user as long as it is possible. The balloon will also\n * accept any custom position set provided by the user compatible with the\n * {@link module:utils/dom/position~Options options}.\n *\n *\t\tconst panel = new BalloonPanelView( locale );\n *\t\tconst childView = new ChildView();\n *\t\tconst positions = BalloonPanelView.defaultPositions;\n *\n *\t\tpanel.render();\n *\n *\t\t// Add a child view to the panel's content collection.\n *\t\tpanel.content.add( childView );\n *\n *\t\t// Start pinning the panel to an element with the \"target\" id DOM.\n *\t\t// The balloon will remain pinned until unpin() is called.\n *\t\tpanel.pin( {\n *\t\t\ttarget: document.querySelector( '#target' ),\n *\t\t\tpositions: [\n *\t\t\t\tpositions.northArrowSouth,\n *\t\t\t\tpositions.southArrowNorth\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:ui/view~View\n */\nexport default class BalloonPanelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * The absolute top position of the balloon panel in pixels.\n\t\t *\n\t\t * @observable\n\t\t * @default 0\n\t\t * @member {Number} #top\n\t\t */\n\t\tthis.set( 'top', 0 );\n\n\t\t/**\n\t\t * The absolute left position of the balloon panel in pixels.\n\t\t *\n\t\t * @observable\n\t\t * @default 0\n\t\t * @member {Number} #left\n\t\t */\n\t\tthis.set( 'left', 0 );\n\n\t\t/**\n\t\t * Balloon panel's current position. The position name is reflected in the CSS class set\n\t\t * to the balloon, i.e. `.ck-balloon-panel_arrow_nw` for \"arrow_nw\" position. The class\n\t\t * controls the minor aspects of the balloon's visual appearance like placement\n\t\t * of an {@link #withArrow arrow}. To support a new position, an additional CSS must be created.\n\t\t *\n\t\t * Default position names correspond with\n\t\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n\t\t *\n\t\t * See the {@link #attachTo} and {@link #pin} methods to learn about custom balloon positions.\n\t\t *\n\t\t * @observable\n\t\t * @default 'arrow_nw'\n\t\t * @member {'arrow_nw'|'arrow_ne'|'arrow_sw'|'arrow_se'} #position\n\t\t */\n\t\tthis.set( 'position', 'arrow_nw' );\n\n\t\t/**\n\t\t * Controls whether the balloon panel is visible or not.\n\t\t *\n\t\t * @observable\n\t\t * @default false\n\t\t * @member {Boolean} #isVisible\n\t\t */\n\t\tthis.set( 'isVisible', false );\n\n\t\t/**\n\t\t * Controls whether the balloon panel has an arrow. The presence of the arrow\n\t\t * is reflected in `ck-balloon-panel_with-arrow` CSS class.\n\t\t *\n\t\t * @observable\n\t\t * @default true\n\t\t * @member {Boolean} #withArrow\n\t\t */\n\t\tthis.set( 'withArrow', true );\n\n\t\t/**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #className\n\t\t */\n\t\tthis.set( 'className' );\n\n\t\t/**\n\t\t * A callback that starts pining the panel when {@link #isVisible} gets\n\t\t * `true`. Used by {@link #pin}.\n\t\t *\n\t\t * @private\n\t\t * @member {Function} #_pinWhenIsVisibleCallback\n\t\t */\n\n\t\t/**\n\t\t * Collection of the child views which creates balloon panel contents.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.content = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-balloon-panel',\n\t\t\t\t\tbind.to( 'position', value => `ck-balloon-panel_${ value }` ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-balloon-panel_visible' ),\n\t\t\t\t\tbind.if( 'withArrow', 'ck-balloon-panel_with-arrow' ),\n\t\t\t\t\tbind.to( 'className' )\n\t\t\t\t],\n\n\t\t\t\tstyle: {\n\t\t\t\t\ttop: bind.to( 'top', toPx ),\n\t\t\t\t\tleft: bind.to( 'left', toPx )\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tchildren: this.content\n\t\t} );\n\t}\n\n\t/**\n\t * Shows the panel.\n\t *\n\t * See {@link #isVisible}.\n\t */\n\tshow() {\n\t\tthis.isVisible = true;\n\t}\n\n\t/**\n\t * Hides the panel.\n\t *\n\t * See {@link #isVisible}.\n\t */\n\thide() {\n\t\tthis.isVisible = false;\n\t}\n\n\t/**\n\t * Attaches the panel to a specified {@link module:utils/dom/position~Options#target} with a\n\t * smart positioning heuristics that choses from available positions to make sure the panel\n\t * is visible to the user i.e. within the limits of the viewport.\n\t *\n\t * This method accepts configuration {@link module:utils/dom/position~Options options}\n\t * to set the `target`, optional `limiter` and `positions` the balloon should chose from.\n\t *\n\t *\t\tconst panel = new BalloonPanelView( locale );\n\t *\t\tconst positions = BalloonPanelView.defaultPositions;\n\t *\n\t *\t\tpanel.render();\n\t *\n\t *\t\t// Attach the panel to an element with the \"target\" id DOM.\n\t *\t\tpanel.attachTo( {\n\t *\t\t\ttarget: document.querySelector( '#target' ),\n\t *\t\t\tpositions: [\n\t *\t\t\t\tpositions.northArrowSouth,\n\t *\t\t\t\tpositions.southArrowNorth\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t * **Note**: Attaching the panel will also automatically {@link #show} it.\n\t *\n\t * **Note**: An attached panel will not follow its target when the window is scrolled or resized.\n\t * See the {@link #pin} method for more permanent positioning strategy.\n\t *\n\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\n\t * {@link module:utils/dom/position~getOptimalPosition}. Default `positions` array is\n\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n\t */\n\tattachTo( options ) {\n\t\tthis.show();\n\n\t\tconst defaultPositions = BalloonPanelView.defaultPositions;\n\t\tconst positionOptions = Object.assign( {}, {\n\t\t\telement: this.element,\n\t\t\tpositions: [\n\t\t\t\tdefaultPositions.southArrowNorth,\n\t\t\t\tdefaultPositions.southArrowNorthWest,\n\t\t\t\tdefaultPositions.southArrowNorthEast,\n\t\t\t\tdefaultPositions.northArrowSouth,\n\t\t\t\tdefaultPositions.northArrowSouthWest,\n\t\t\t\tdefaultPositions.northArrowSouthEast\n\t\t\t],\n\t\t\tlimiter: defaultLimiterElement,\n\t\t\tfitInViewport: true\n\t\t}, options );\n\n\t\tconst { top, left, name: position } = BalloonPanelView._getOptimalPosition( positionOptions );\n\n\t\tObject.assign( this, { top, left, position } );\n\t}\n\n\t/**\n\t * Works the same way as the {@link #attachTo} method except that the position of the panel is\n\t * continuously updated when:\n\t *\n\t * * any ancestor of the {@link module:utils/dom/position~Options#target}\n\t * or {@link module:utils/dom/position~Options#limiter} is scrolled,\n\t * * the browser window gets resized or scrolled.\n\t *\n\t * Thanks to that, the panel always sticks to the {@link module:utils/dom/position~Options#target},\n\t * immune to the changing environment.\n\t *\n\t *\t\tconst panel = new BalloonPanelView( locale );\n\t *\t\tconst positions = BalloonPanelView.defaultPositions;\n\t *\n\t *\t\tpanel.render();\n\t *\n\t *\t\t// Pin the panel to an element with the \"target\" id DOM.\n\t *\t\tpanel.pin( {\n\t *\t\t\ttarget: document.querySelector( '#target' ),\n\t *\t\t\tpositions: [\n\t *\t\t\t\tpositions.northArrowSouth,\n\t *\t\t\t\tpositions.southArrowNorth\n\t *\t\t\t]\n\t *\t\t} );\n\t *\n\t * To leave the pinned state, use the {@link #unpin} method.\n\t *\n\t * **Note**: Pinning the panel will also automatically {@link #show} it.\n\t *\n\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\n\t * {@link module:utils/dom/position~getOptimalPosition}. Default `positions` array is\n\t * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n\t */\n\tpin( options ) {\n\t\tthis.unpin();\n\n\t\tthis._pinWhenIsVisibleCallback = () => {\n\t\t\tif ( this.isVisible ) {\n\t\t\t\tthis._startPinning( options );\n\t\t\t} else {\n\t\t\t\tthis._stopPinning();\n\t\t\t}\n\t\t};\n\n\t\tthis._startPinning( options );\n\n\t\t// Control the state of the listeners depending on whether the panel is visible\n\t\t// or not.\n\t\t// TODO: Use on() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n\t\tthis.listenTo( this, 'change:isVisible', this._pinWhenIsVisibleCallback );\n\t}\n\n\t/**\n\t * Stops pinning the panel, as set up by {@link #pin}.\n\t */\n\tunpin() {\n\t\tif ( this._pinWhenIsVisibleCallback ) {\n\t\t\t// Deactivate listeners attached by pin().\n\t\t\tthis._stopPinning();\n\n\t\t\t// Deactivate the panel pin() control logic.\n\t\t\t// TODO: Use off() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n\t\t\tthis.stopListening( this, 'change:isVisible', this._pinWhenIsVisibleCallback );\n\n\t\t\tthis._pinWhenIsVisibleCallback = null;\n\n\t\t\tthis.hide();\n\t\t}\n\t}\n\n\t/**\n\t * Starts managing the pinned state of the panel. See {@link #pin}.\n\t *\n\t * @private\n\t * @param {module:utils/dom/position~Options} options Positioning options compatible with\n\t * {@link module:utils/dom/position~getOptimalPosition}.\n\t */\n\t_startPinning( options ) {\n\t\tthis.attachTo( options );\n\n\t\tconst targetElement = getDomElement( options.target );\n\t\tconst limiterElement = options.limiter ? getDomElement( options.limiter ) : defaultLimiterElement;\n\n\t\t// Then we need to listen on scroll event of eny element in the document.\n\t\tthis.listenTo( global.document, 'scroll', ( evt, domEvt ) => {\n\t\t\tconst scrollTarget = domEvt.target;\n\n\t\t\t// The position needs to be updated if the positioning target is within the scrolled element.\n\t\t\tconst isWithinScrollTarget = targetElement && scrollTarget.contains( targetElement );\n\n\t\t\t// The position needs to be updated if the positioning limiter is within the scrolled element.\n\t\t\tconst isLimiterWithinScrollTarget = limiterElement && scrollTarget.contains( limiterElement );\n\n\t\t\t// The positioning target and/or limiter can be a Rect, object etc..\n\t\t\t// There's no way to optimize the listener then.\n\t\t\tif ( isWithinScrollTarget || isLimiterWithinScrollTarget || !targetElement || !limiterElement ) {\n\t\t\t\tthis.attachTo( options );\n\t\t\t}\n\t\t}, { useCapture: true } );\n\n\t\t// We need to listen on window resize event and update position.\n\t\tthis.listenTo( global.window, 'resize', () => {\n\t\t\tthis.attachTo( options );\n\t\t} );\n\t}\n\n\t/**\n\t * Stops managing the pinned state of the panel. See {@link #pin}.\n\t *\n\t * @private\n\t */\n\t_stopPinning() {\n\t\tthis.stopListening( global.document, 'scroll' );\n\t\tthis.stopListening( global.window, 'resize' );\n\t}\n}\n\n// Returns the DOM element for given object or null, if there's none,\n// e.g. when passed object is a Rect instance or so.\n//\n// @private\n// @param {*} object\n// @returns {HTMLElement|null}\nfunction getDomElement( object ) {\n\tif ( isElement( object ) ) {\n\t\treturn object;\n\t}\n\n\tif ( isRange( object ) ) {\n\t\treturn object.commonAncestorContainer;\n\t}\n\n\tif ( typeof object == 'function' ) {\n\t\treturn getDomElement( object() );\n\t}\n\n\treturn null;\n}\n\n/**\n * A horizontal offset of the arrow tip from the edge of the balloon. Controlled by CSS.\n *\n *\t\t +-----|---------...\n *\t\t |     |\n *\t\t |     |\n *\t\t |     |\n *\t\t |     |\n *\t\t +--+  |  +------...\n *\t\t     \\ | /\n *\t\t      \\|/\n *\t    >|-----|<---------------- horizontal offset\n *\n * @default 30\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowHorizontalOffset\n */\nBalloonPanelView.arrowHorizontalOffset = 25;\n\n/**\n * A vertical offset of the arrow from the edge of the balloon. Controlled by CSS.\n *\n *\t\t +-------------...\n *\t\t |\n *\t\t |\n *\t\t |                      /-- vertical offset\n *\t\t |                     V\n *\t\t +--+    +-----...    ---------\n *\t\t     \\  /              |\n *\t\t      \\/               |\n *\t\t-------------------------------\n *\t\t                       ^\n *\n * @default 15\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowVerticalOffset\n */\nBalloonPanelView.arrowVerticalOffset = 10;\n\n/**\n * Function used to calculate the optimal position for the balloon.\n *\n * @protected\n * @member {Function} module:ui/panel/balloon/balloonpanelview~BalloonPanelView._getOptimalPosition\n */\nBalloonPanelView._getOptimalPosition = getOptimalPosition;\n\n/**\n * A default set of positioning functions used by the balloon panel view\n * when attaching using {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo} method.\n *\n * The available positioning functions are as follow:\n *\n * **North**\n *\n * * `northArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t    [ Target ]\n *\n * * `northArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t          [ Target ]\n *\n * * `northArrowSouthWest`\n *\n * \t\t  +-----------------+\n * \t\t  |     Balloon     |\n * \t\t  +-----------------+\n * \t\t     V\n * \t\t[ Target ]\n *\n * **North west**\n *\n * * `northWestArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t         [ Target ]\n *\n * * `northWestArrowSouthWest`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t   V\n * \t\t   [ Target ]\n *\n * * `northWestArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t               [ Target ]\n *\n * **North east**\n *\n * * `northEastArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t[ Target ]\n *\n * * `northEastArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t      [ Target ]\n *\n * * `northEastArrowSouthWest`\n *\n * \t\t      +-----------------+\n * \t\t      |     Balloon     |\n * \t\t      +-----------------+\n * \t\t         V\n * \t\t[ Target ]\n *\n * **South**\n *\n * * `southArrowNorth`\n *\n *\t\t    [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southArrowNorthEast`\n *\n *\t\t          [ Target ]\n *\t\t               ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southArrowNorthWest`\n *\n *\t\t[ Target ]\n *\t\t     ^\n *\t\t   +-----------------+\n *\t\t   |     Balloon     |\n *\t\t   +-----------------+\n *\n * **South west**\n *\n * * `southWestArrowNorth`\n *\n *\t\t         [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southWestArrowNorthWest`\n *\n *\t\t  [ Target ]\n *\t\t  ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southWestArrowNorthEast`\n *\n *\t\t               [ Target ]\n *\t\t               ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * **South east**\n *\n * * `southEastArrowNorth`\n *\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southEastArrowNorthEast`\n *\n *\t\t       [ Target ]\n *\t\t                ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southEastArrowNorthWest`\n *\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t       +-----------------+\n *\t\t       |     Balloon     |\n *\t\t       +-----------------+\n *\n * See {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo}.\n *\n * Positioning functions must be compatible with {@link module:utils/dom/position~Position}.\n *\n * The name that position function returns will be reflected in balloon panel's class that\n * controls the placement of the \"arrow\". See {@link #position} to learn more.\n *\n * @member {Object} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions\n */\nBalloonPanelView.defaultPositions = {\n\t// ------- North\n\n\tnorthArrowSouth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n\t\tname: 'arrow_s'\n\t} ),\n\n\tnorthArrowSouthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_se'\n\t} ),\n\n\tnorthArrowSouthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_sw'\n\t} ),\n\n\t// ------- North west\n\n\tnorthWestArrowSouth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width / 2,\n\t\tname: 'arrow_s'\n\t} ),\n\n\tnorthWestArrowSouthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_sw'\n\t} ),\n\n\tnorthWestArrowSouthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_se'\n\t} ),\n\n\t// ------- North east\n\n\tnorthEastArrowSouth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width / 2,\n\t\tname: 'arrow_s'\n\t} ),\n\n\tnorthEastArrowSouthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_se'\n\t} ),\n\n\tnorthEastArrowSouthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getNorthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_sw'\n\t} ),\n\n\t// ------- South\n\n\tsouthArrowNorth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n\t\tname: 'arrow_n'\n\t} ),\n\n\tsouthArrowNorthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_ne'\n\t} ),\n\n\tsouthArrowNorthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left + targetRect.width / 2 - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_nw'\n\t} ),\n\n\t// ------- South west\n\n\tsouthWestArrowNorth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width / 2,\n\t\tname: 'arrow_n'\n\t} ),\n\n\tsouthWestArrowNorthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_nw'\n\t} ),\n\n\tsouthWestArrowNorthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.left - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_ne'\n\t} ),\n\n\t// ------- South east\n\n\tsouthEastArrowNorth: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width / 2,\n\t\tname: 'arrow_n'\n\t} ),\n\n\tsouthEastArrowNorthEast: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_ne'\n\t} ),\n\n\tsouthEastArrowNorthWest: ( targetRect, balloonRect ) => ( {\n\t\ttop: getSouthTop( targetRect, balloonRect ),\n\t\tleft: targetRect.right - BalloonPanelView.arrowHorizontalOffset,\n\t\tname: 'arrow_nw'\n\t} ),\n};\n\n// Returns the top coordinate for positions starting with `north*`.\n//\n// @private\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of the balloon.\n// @returns {Number}\nfunction getNorthTop( targetRect, balloonRect ) {\n\treturn targetRect.top - balloonRect.height - BalloonPanelView.arrowVerticalOffset;\n}\n\n// Returns the top coordinate for positions starting with `south*`.\n//\n// @private\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of the balloon.\n// @returns {Number}\nfunction getSouthTop( targetRect ) {\n\treturn targetRect.bottom + BalloonPanelView.arrowVerticalOffset;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/panel/balloon/contextualballoon\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BalloonPanelView from './balloonpanelview';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Provides the common contextual balloon panel for the editor.\n *\n * This plugin allows reusing a single {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView} instance\n * to display multiple contextual balloon panels in the editor.\n *\n * Child views of such a panel are stored in the stack and the last one in the stack is visible. When the\n * visible view is removed from the stack, the previous view becomes visible, etc. If there are no more\n * views in the stack, the balloon panel will hide.\n *\n * It simplifies managing the views and helps\n * avoid the unnecessary complexity of handling multiple {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * instances in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ContextualBalloon extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ContextualBalloon';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t/**\n\t\t * The common balloon panel view.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/panel/balloon/balloonpanelview~BalloonPanelView} #view\n\t\t */\n\t\tthis.view = new BalloonPanelView();\n\n\t\t/**\n\t\t * The {@link module:utils/dom/position~Options#limiter position limiter}\n\t\t * for the {@link #view}, used when no `limiter` has been passed into {@link #add}\n\t\t * or {@link #updatePosition}.\n\t\t *\n\t\t * By default, a function, which obtains the farthest DOM\n\t\t * {@link module:engine/view/rooteditableelement~RootEditableElement}\n\t\t * of the {@link module:engine/view/document~Document#selection}.\n\t\t *\n\t\t * @member {module:utils/dom/position~Options#limiter} #positionLimiter\n\t\t */\n\t\tthis.positionLimiter = () => {\n\t\t\tconst view = this.editor.editing.view;\n\t\t\tconst viewDocument = view.document;\n\t\t\tconst editableElement = viewDocument.selection.editableElement;\n\n\t\t\tif ( editableElement ) {\n\t\t\t\treturn view.domConverter.mapViewToDom( editableElement.root );\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\t/**\n\t\t * Stack of the views injected into the balloon. Last one in the stack is displayed\n\t\t * as a content of {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon#view}.\n\t\t *\n\t\t * @private\n\t\t * @member {Map} #_stack\n\t\t */\n\t\tthis._stack = new Map();\n\n\t\t// Add balloon panel view to editor `body` collection and wait until view will be ready.\n\t\tthis.editor.ui.view.body.add( this.view );\n\n\t\t// Editor should be focused when contextual balloon is focused.\n\t\tthis.editor.ui.focusTracker.add( this.view.element );\n\t}\n\n\t/**\n\t * Returns the currently visible view or `null` when there are no\n\t * views in the stack.\n\t *\n\t * @returns {module:ui/view~View|null}\n\t */\n\tget visibleView() {\n\t\tconst item = this._stack.get( this.view.content.get( 0 ) );\n\n\t\treturn item ? item.view : null;\n\t}\n\n\t/**\n\t * Returns `true` when the given view is in the stack. Otherwise returns `false`.\n\t *\n\t * @param {module:ui/view~View} view\n\t * @returns {Boolean}\n\t */\n\thasView( view ) {\n\t\treturn this._stack.has( view );\n\t}\n\n\t/**\n\t * Adds a new view to the stack and makes it visible.\n\t *\n\t * @param {Object} data Configuration of the view.\n\t * @param {module:ui/view~View} [data.view] Content of the balloon.\n\t * @param {module:utils/dom/position~Options} [data.position] Positioning options.\n\t * @param {String} [data.balloonClassName] Additional css class for {@link #view} added when given view is visible.\n\t */\n\tadd( data ) {\n\t\tif ( this.hasView( data.view ) ) {\n\t\t\t/**\n\t\t\t * Trying to add configuration of the same view more than once.\n\t\t\t *\n\t\t\t * @error contextualballoon-add-view-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'contextualballoon-add-view-exist: Cannot add configuration of the same view twice.' );\n\t\t}\n\n\t\t// When adding view to the not empty balloon.\n\t\tif ( this.visibleView ) {\n\t\t\t// Remove displayed content from the view.\n\t\t\tthis.view.content.remove( this.visibleView );\n\t\t}\n\n\t\t// Add new view to the stack.\n\t\tthis._stack.set( data.view, data );\n\n\t\t// And display it.\n\t\tthis._show( data );\n\t}\n\n\t/**\n\t * Removes the given view from the stack. If the removed view was visible,\n\t * then the view preceding it in the stack will become visible instead.\n\t * When there is no view in the stack then balloon will hide.\n\t *\n\t * @param {module:ui/view~View} view A view to be removed from the balloon.\n\t */\n\tremove( view ) {\n\t\tif ( !this.hasView( view ) ) {\n\t\t\t/**\n\t\t\t * Trying to remove configuration of the view not defined in the stack.\n\t\t\t *\n\t\t\t * @error contextualballoon-remove-view-not-exist\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'contextualballoon-remove-view-not-exist: Cannot remove configuration of not existing view.' );\n\t\t}\n\n\t\t// When visible view is being removed.\n\t\tif ( this.visibleView === view ) {\n\t\t\t// We need to remove it from the view content.\n\t\t\tthis.view.content.remove( view );\n\n\t\t\t// And then remove from the stack.\n\t\t\tthis._stack.delete( view );\n\n\t\t\t// Next we need to check if there is other view in stack to show.\n\t\t\tconst last = Array.from( this._stack.values() ).pop();\n\n\t\t\t// If it is some other view.\n\t\t\tif ( last ) {\n\t\t\t\t// Just show it.\n\t\t\t\tthis._show( last );\n\t\t\t} else {\n\t\t\t\t// Hide the balloon panel.\n\t\t\t\tthis.view.hide();\n\t\t\t}\n\t\t} else {\n\t\t\t// Just remove given view from the stack.\n\t\t\tthis._stack.delete( view );\n\t\t}\n\t}\n\n\t/**\n\t * Updates the position of the balloon using position data of the first visible view in the stack.\n\t * When new position data is given then position data of currently visible panel will be updated.\n\t *\n\t * @param {module:utils/dom/position~Options} [position] position options.\n\t */\n\tupdatePosition( position ) {\n\t\tif ( position ) {\n\t\t\tthis._stack.get( this.visibleView ).position = position;\n\t\t}\n\n\t\tthis.view.pin( this._getBalloonPosition() );\n\t}\n\n\t/**\n\t * Sets the view as a content of the balloon and attaches balloon using position\n\t * options of the first view.\n\t *\n\t * @private\n\t * @param {Object} data Configuration.\n\t * @param {module:ui/view~View} [data.view] View to show in the balloon.\n\t * @param {String} [data.balloonClassName=''] Additional class name which will added to the {#_balloon} view.\n\t */\n\t_show( { view, balloonClassName = '' } ) {\n\t\tthis.view.className = balloonClassName;\n\n\t\tthis.view.content.add( view );\n\t\tthis.view.pin( this._getBalloonPosition() );\n\t}\n\n\t/**\n\t * Returns position options of the last view in the stack.\n\t * This keeps the balloon in the same position when view is changed.\n\t *\n\t * @private\n\t * @returns {module:utils/dom/position~Options}\n\t */\n\t_getBalloonPosition() {\n\t\tlet position = Array.from( this._stack.values() ).pop().position;\n\n\t\t// Use the default limiter if none has been specified.\n\t\tif ( position && !position.limiter ) {\n\t\t\t// Don't modify the original options object.\n\t\t\tposition = Object.assign( {}, position, {\n\t\t\t\tlimiter: this.positionLimiter\n\t\t\t} );\n\t\t}\n\n\t\treturn position;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* global setTimeout, clearTimeout */\n\n/**\n * @module utils/focustracker\n */\n\nimport DomEmitterMixin from './dom/emittermixin';\nimport ObservableMixin from './observablemixin';\nimport CKEditorError from './ckeditorerror';\nimport mix from './mix';\n\n/**\n * Allows observing a group of `HTMLElement`s whether at least one of them is focused.\n *\n * Used by the {@link module:core/editor/editor~Editor} in order to track whether the focus is still within the application,\n * or were used outside of its UI.\n *\n * **Note** `focus` and `blur` listeners use event capturing, so it is only needed to register wrapper `HTMLElement`\n * which contain other `focusable` elements. But note that this wrapper element has to be focusable too\n * (have e.g. `tabindex=\"-1\"`).\n *\n * @mixes module:utils/dom/emittermixin~EmitterMixin\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class FocusTracker {\n\tconstructor() {\n\t\t/**\n\t\t * True when one of the registered elements is focused.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * Currently focused element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement}\n\t\t */\n\t\tthis.focusedElement = null;\n\n\t\t/**\n\t\t * List of registered elements.\n\t\t *\n\t\t * @private\n\t\t * @member {Set.<HTMLElement>}\n\t\t */\n\t\tthis._elements = new Set();\n\n\t\t/**\n\t\t * Event loop timeout.\n\t\t *\n\t\t * @private\n\t\t * @member {Number}\n\t\t */\n\t\tthis._nextEventLoopTimeout = null;\n\t}\n\n\t/**\n\t * Starts tracking the specified element.\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tadd( element ) {\n\t\tif ( this._elements.has( element ) ) {\n\t\t\tthrow new CKEditorError( 'focusTracker-add-element-already-exist' );\n\t\t}\n\n\t\tthis.listenTo( element, 'focus', () => this._focus( element ), { useCapture: true } );\n\t\tthis.listenTo( element, 'blur', () => this._blur(), { useCapture: true } );\n\t\tthis._elements.add( element );\n\t}\n\n\t/**\n\t * Stops tracking the specified element and stops listening on this element.\n\t *\n\t * @param {HTMLElement} element\n\t */\n\tremove( element ) {\n\t\tif ( element === this.focusedElement ) {\n\t\t\tthis._blur( element );\n\t\t}\n\n\t\tif ( this._elements.has( element ) ) {\n\t\t\tthis.stopListening( element );\n\t\t\tthis._elements.delete( element );\n\t\t}\n\t}\n\n\t/**\n\t * Stores currently focused element and set {#isFocused} as `true`.\n\t *\n\t * @private\n\t * @param {HTMLElement} element Element which has been focused.\n\t */\n\t_focus( element ) {\n\t\tclearTimeout( this._nextEventLoopTimeout );\n\n\t\tthis.focusedElement = element;\n\t\tthis.isFocused = true;\n\t}\n\n\t/**\n\t * Clears currently focused element and set {@link #isFocused} as `false`.\n\t * This method uses `setTimeout` to change order of fires `blur` and `focus` events.\n\t *\n\t * @private\n\t * @fires blur\n\t */\n\t_blur() {\n\t\tclearTimeout( this._nextEventLoopTimeout );\n\n\t\tthis._nextEventLoopTimeout = setTimeout( () => {\n\t\t\tthis.focusedElement = null;\n\t\t\tthis.isFocused = false;\n\t\t}, 0 );\n\t}\n\n\t/**\n\t * @event focus\n\t */\n\n\t/**\n\t * @event blur\n\t */\n}\n\nmix( FocusTracker, DomEmitterMixin );\nmix( FocusTracker, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/focuscycler\n */\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\n\n/**\n * A utility class that helps cycling over focusable {@link module:ui/view~View views} in a\n * {@link module:ui/viewcollection~ViewCollection} when the focus is tracked by the\n * {@link module:utils/focustracker~FocusTracker} instance. It helps implementing keyboard\n * navigation in HTML forms, toolbars, lists and the like.\n *\n * To work properly it requires:\n * * a collection of focusable (HTML `tabindex` attribute) views that implement the `focus()` method,\n * * an associated focus tracker to determine which view is focused.\n *\n * A simple cycler setup can look like this:\n *\n *\t\tconst focusables = new ViewCollection();\n *\t\tconst focusTracker = new FocusTracker();\n *\n *\t\t// Add focusable views to the focus tracker.\n *\t\tfocusTracker.add( ... );\n *\n * Then, the cycler can be used manually:\n *\n *\t\tconst cycler = new FocusCycler( { focusables, focusTracker } );\n *\n *\t\t// Will focus the first focusable view in #focusables.\n *\t\tcycler.focusFirst();\n *\n *\t\t// Will log the next focusable item in #focusables.\n *\t\tconsole.log( cycler.next );\n *\n * Alternatively, it can work side by side with the {@link module:utils/keystrokehandler~KeystrokeHandler}:\n *\n *\t\tconst keystrokeHandler = new KeystrokeHandler();\n *\n *\t\t// Activate the keystroke handler.\n *\t\tkeystrokeHandler.listenTo( sourceOfEvents );\n *\n *\t\tconst cycler = new FocusCycler( {\n *\t\t\tfocusables, focusTracker, keystrokeHandler,\n *\t\t\tactions: {\n *\t\t\t\t// When arrowup of arrowleft is detected by the #keystrokeHandler,\n *\t\t\t\t// focusPrevious() will be called on the cycler.\n *\t\t\t\tfocusPrevious: [ 'arrowup', 'arrowleft' ],\n *\t\t\t}\n *\t\t} );\n */\nexport default class FocusCycler {\n\t/**\n\t * Creates an instance of the focus cycler utility.\n\t *\n\t * @param {Object} options Configuration options.\n\t * @param {module:utils/collection~Collection|Object} options.focusables\n\t * @param {module:utils/focustracker~FocusTracker} options.focusTracker\n\t * @param {module:utils/keystrokehandler~KeystrokeHandler} [options.keystrokeHandler]\n\t * @param {Object} [options.actions]\n\t */\n\tconstructor( options ) {\n\t\tObject.assign( this, options );\n\n\t\t/**\n\t\t * A {@link module:ui/view~View view} collection that the cycler operates on.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/collection~Collection} #focusables\n\t\t */\n\n\t\t/**\n\t\t * A focus tracker instance that the cycler uses to determine the current focus\n\t\t * state in {@link #focusables}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\n\t\t */\n\n\t\t/**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n\t\t * which can respond to certain keystrokes and cycle the focus.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler} #keystrokeHandler\n\t\t */\n\n\t\t/**\n\t\t * Actions that the cycler can take when a keystroke is pressed. Requires\n\t\t * `options.keystrokeHandler` to be passed and working. When an action is\n\t\t * performed, `preventDefault` and `stopPropagation` will be called on the event\n\t\t * the keystroke fired in the DOM.\n\t\t *\n\t\t *\t\tactions: {\n\t\t *\t\t\t// Will call #focusPrevious() when arrowleft or arrowup is pressed.\n\t\t *\t\t\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\n\t\t *\n\t\t *\t\t\t// Will call #focusNext() when arrowdown is pressed.\n\t\t *\t\t\tfocusNext: 'arrowdown'\n\t\t *\t\t}\n\t\t *\n\t\t * @readonly\n\t\t * @member {Object} #actions\n\t\t */\n\n\t\tif ( options.actions && options.keystrokeHandler ) {\n\t\t\tfor ( const methodName in options.actions ) {\n\t\t\t\tlet actions = options.actions[ methodName ];\n\n\t\t\t\tif ( typeof actions == 'string' ) {\n\t\t\t\t\tactions = [ actions ];\n\t\t\t\t}\n\n\t\t\t\tfor ( const keystroke of actions ) {\n\t\t\t\t\toptions.keystrokeHandler.set( keystroke, ( data, cancel ) => {\n\t\t\t\t\t\tthis[ methodName ]();\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the first focusable view in {@link #focusables}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #first\n\t */\n\tget first() {\n\t\treturn this.focusables.find( isFocusable ) || null;\n\t}\n\n\t/**\n\t * Returns the last focusable view in {@link #focusables}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #last\n\t */\n\tget last() {\n\t\treturn this.focusables.filter( isFocusable ).slice( -1 )[ 0 ] || null;\n\t}\n\n\t/**\n\t * Returns the next focusable view in {@link #focusables} based on {@link #current}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #next\n\t */\n\tget next() {\n\t\treturn this._getFocusableItem( 1 );\n\t}\n\n\t/**\n\t * Returns the previous focusable view in {@link #focusables} based on {@link #current}.\n\t * Returns `null` if there is none.\n\t *\n\t * @readonly\n\t * @member {module:ui/view~View|null} #previous\n\t */\n\tget previous() {\n\t\treturn this._getFocusableItem( -1 );\n\t}\n\n\t/**\n\t * An index of the view in the {@link #focusables} which is focused according\n\t * to {@link #focusTracker}. Returns `null` when there is no such view.\n\t *\n\t * @readonly\n\t * @member {Number|null} #current\n\t */\n\tget current() {\n\t\tlet index = null;\n\n\t\t// There's no focused view in the focusables.\n\t\tif ( this.focusTracker.focusedElement === null ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tthis.focusables.find( ( view, viewIndex ) => {\n\t\t\tconst focused = view.element === this.focusTracker.focusedElement;\n\n\t\t\tif ( focused ) {\n\t\t\t\tindex = viewIndex;\n\t\t\t}\n\n\t\t\treturn focused;\n\t\t} );\n\n\t\treturn index;\n\t}\n\n\t/**\n\t * Focuses the {@link #first} item in {@link #focusables}.\n\t */\n\tfocusFirst() {\n\t\tthis._focus( this.first );\n\t}\n\n\t/**\n\t * Focuses the {@link #last} item in {@link #focusables}.\n\t */\n\tfocusLast() {\n\t\tthis._focus( this.last );\n\t}\n\n\t/**\n\t * Focuses the {@link #next} item in {@link #focusables}.\n\t */\n\tfocusNext() {\n\t\tthis._focus( this.next );\n\t}\n\n\t/**\n\t * Focuses the {@link #previous} item in {@link #focusables}.\n\t */\n\tfocusPrevious() {\n\t\tthis._focus( this.previous );\n\t}\n\n\t/**\n\t * Focuses the given view if it exists.\n\t *\n\t * @protected\n\t * @param {module:ui/view~View} view\n\t */\n\t_focus( view ) {\n\t\tif ( view ) {\n\t\t\tview.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Returns the next or previous focusable view in {@link #focusables} with respect\n\t * to {@link #current}.\n\t *\n\t * @protected\n\t * @param {Number} step Either `1` for checking forward from {@link #current} or\n\t * `-1` for checking backwards.\n\t * @returns {module:ui/view~View|null}\n\t */\n\t_getFocusableItem( step ) {\n\t\t// Cache for speed.\n\t\tconst current = this.current;\n\t\tconst collectionLength = this.focusables.length;\n\n\t\tif ( !collectionLength ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Start from the beginning if no view is focused.\n\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\tif ( current === null ) {\n\t\t\treturn this[ step === 1 ? 'first' : 'last' ];\n\t\t}\n\n\t\t// Cycle in both directions.\n\t\tlet index = ( current + collectionLength + step ) % collectionLength;\n\n\t\tdo {\n\t\t\tconst view = this.focusables.get( index );\n\n\t\t\t// TODO: Check if view is visible.\n\t\t\tif ( isFocusable( view ) ) {\n\t\t\t\treturn view;\n\t\t\t}\n\n\t\t\t// Cycle in both directions.\n\t\t\tindex = ( index + collectionLength + step ) % collectionLength;\n\t\t} while ( index !== current );\n\n\t\treturn null;\n\t}\n}\n\n// Checks whether a view is focusable.\n//\n// @private\n// @param {module:ui/view~View} view A view to be checked.\n// @returns {Boolean}\nfunction isFocusable( view ) {\n\treturn !!( view.focus && global.window.getComputedStyle( view.element ).display != 'none' );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/toolbar/toolbarseparatorview\n */\n\nimport View from '../view';\n\n/**\n * The toolbar separator view class.\n *\n * @extends module:ui/view~View\n */\nexport default class ToolbarSeparatorView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-toolbar__separator'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/toolbar/toolbarview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport preventDefault from '../bindings/preventdefault.js';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\n\nimport '../../theme/components/toolbar/toolbar.css';\n\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ToolbarView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Collection of the toolbar items (like buttons).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * Controls the orientation of toolbar items.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVertical\n\t\t */\n\t\tthis.set( 'isVertical', false );\n\n\t\t/**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #className\n\t\t */\n\t\tthis.set( 'className' );\n\n\t\t/**\n\t\t * Helps cycling over focusable {@link #items} in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.items,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate toolbar items backwards using the arrow[left,up] keys.\n\t\t\t\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\n\n\t\t\t\t// Navigate toolbar items forwards using the arrow[right,down] keys.\n\t\t\t\tfocusNext: [ 'arrowright', 'arrowdown' ]\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-toolbar',\n\t\t\t\t\tbind.if( 'isVertical', 'ck-toolbar_vertical' ),\n\t\t\t\t\tbind.to( 'className' )\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.items,\n\n\t\t\ton: {\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\t\t\tmousedown: preventDefault( this )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Items added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\t/**\n\t * Focuses the first focusable in {@link #items}.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Focuses the last focusable in {@link #items}.\n\t */\n\tfocusLast() {\n\t\tthis._focusCycler.focusLast();\n\t}\n\n\t/**\n\t * A utility which expands a plain toolbar configuration into\n\t * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n\t *\n\t * @param {Array.<String>} config The toolbar items config.\n\t * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n\t */\n\tfillFromConfig( config, factory ) {\n\t\tconfig.map( name => {\n\t\t\tif ( name == '|' ) {\n\t\t\t\tthis.items.add( new ToolbarSeparatorView() );\n\t\t\t} else if ( factory.has( name ) ) {\n\t\t\t\tthis.items.add( factory.create( name ) );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n\t\t\t\t * name does not exist so it was omitted when rendering the toolbar.\n\t\t\t\t *\n\t\t\t\t * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n\t\t\t\t * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n\t\t\t\t *\n\t\t\t\t * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n\t\t\t\t * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n\t\t\t\t *\n\t\t\t\t * You can use the following snippet to retrieve all available toolbar items:\n\t\t\t\t *\n\t\t\t\t *\t\tArray.from( editor.ui.componentFactory.names() );\n\t\t\t\t *\n\t\t\t\t * @error toolbarview-item-unavailable\n\t\t\t\t * @param {String} name The name of the component.\n\t\t\t\t */\n\t\t\t\tlog.warn(\n\t\t\t\t\t'toolbarview-item-unavailable: The requested toolbar item is unavailable.',\n\t\t\t\t\t{ name }\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\t}\n}\n\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/bindings/preventdefault\n */\n\n/**\n * A helper which executes a native `Event.preventDefault()` if the target of an event equals the\n * {@link module:ui/view~View#element element of the view}. It shortens the definition of a\n * {@link module:ui/view~View#template template}.\n *\n *\t\t// In a class extending View.\n *\t\timport preventDefault from '@ckeditor/ckeditor5-ui/src/bindings/preventdefault';\n *\n *\t\t// ...\n *\n *\t\tthis.setTemplate( {\n *\t\t\ttag: 'div',\n *\n *\t\t\ton: {\n *\t\t\t\t// Prevent the default mousedown action on this view.\n *\t\t\t\tmousedown: preventDefault( this )\n *\t\t\t}\n *\t\t} );\n *\n * @param {module:ui/view~View} view View instance that defines the template.\n * @returns {module:ui/template~TemplateToBinding}\n */\nexport default function preventDefault( view ) {\n\treturn view.bindTemplate.to( evt => {\n\t\tif ( evt.target === view.element ) {\n\t\t\tevt.preventDefault();\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/toolbar/balloon/balloontoolbar\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ContextualBalloon from '../../panel/balloon/contextualballoon';\nimport ToolbarView from '../toolbarview';\nimport BalloonPanelView from '../../panel/balloon/balloonpanelview.js';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport normalizeToolbarConfig from '../normalizetoolbarconfig';\nimport { debounce } from 'lodash-es';\n\n/**\n * The contextual toolbar.\n *\n * It uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BalloonToolbar extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'BalloonToolbar';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ContextualBalloon ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The toolbar view displayed in the balloon.\n\t\t *\n\t\t * @type {module:ui/toolbar/toolbarview~ToolbarView}\n\t\t */\n\t\tthis.toolbarView = this._createToolbarView();\n\n\t\t/**\n\t\t * Tracks the focus of the {@link module:ui/editableui/editableuiview~EditableUIView#editableElement}\n\t\t * and the {@link #toolbarView}. When both are blurred then the toolbar should hide.\n\t\t *\n\t\t * @readonly\n\t\t * @type {module:utils:focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t// Wait for the EditorUI#init. EditableElement is not available before.\n\t\teditor.once( 'uiReady', () => {\n\t\t\tthis.focusTracker.add( editor.ui.view.editableElement );\n\t\t\tthis.focusTracker.add( this.toolbarView.element );\n\t\t} );\n\n\t\t/**\n\t\t * The contextual balloon plugin instance.\n\t\t *\n\t\t * @private\n\t\t * @type {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n\t\t */\n\t\tthis._balloon = editor.plugins.get( ContextualBalloon );\n\n\t\t/**\n\t\t * Fires {@link #event:_selectionChangeDebounced} event using `lodash#debounce`.\n\t\t *\n\t\t * This function is stored as a plugin property to make possible to cancel\n\t\t * trailing debounced invocation on destroy.\n\t\t *\n\t\t * @private\n\t\t * @type {Function}\n\t\t */\n\t\tthis._fireSelectionChangeDebounced = debounce( () => this.fire( '_selectionChangeDebounced' ), 200 );\n\n\t\t// The appearance of the BalloonToolbar method is event–driven.\n\t\t// It is possible to stop the #show event and this prevent the toolbar from showing up.\n\t\tthis.decorate( 'show' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\n\t\t// Show/hide the toolbar on editable focus/blur.\n\t\tthis.listenTo( this.focusTracker, 'change:isFocused', ( evt, name, isFocused ) => {\n\t\t\tconst isToolbarVisible = this._balloon.visibleView === this.toolbarView;\n\n\t\t\tif ( !isFocused && isToolbarVisible ) {\n\t\t\t\tthis.hide();\n\t\t\t} else if ( isFocused ) {\n\t\t\t\tthis.show();\n\t\t\t}\n\t\t} );\n\n\t\t// Hide the toolbar when the selection is changed by a direct change or has changed to collapsed.\n\t\tthis.listenTo( selection, 'change:range', ( evt, data ) => {\n\t\t\tif ( data.directChange || selection.isCollapsed ) {\n\t\t\t\tthis.hide();\n\t\t\t}\n\n\t\t\t// Fire internal `_selectionChangeDebounced` event to use it for showing\n\t\t\t// the toolbar after the selection stops changing.\n\t\t\tthis._fireSelectionChangeDebounced();\n\t\t} );\n\n\t\t// Show the toolbar when the selection stops changing.\n\t\tthis.listenTo( this, '_selectionChangeDebounced', () => {\n\t\t\tif ( this.editor.editing.view.document.isFocused ) {\n\t\t\t\tthis.show();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Creates toolbar components based on given configuration.\n\t * This needs to be done when all plugins are ready.\n\t *\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst config = normalizeToolbarConfig( this.editor.config.get( 'balloonToolbar' ) );\n\t\tconst factory = this.editor.ui.componentFactory;\n\n\t\tthis.toolbarView.fillFromConfig( config.items, factory );\n\t}\n\n\t/**\n\t * Creates the toolbar view instance.\n\t *\n\t * @private\n\t * @returns {module:ui/toolbar/toolbarview~ToolbarView}\n\t */\n\t_createToolbarView() {\n\t\tconst toolbarView = new ToolbarView( this.editor.locale );\n\n\t\ttoolbarView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [ 'ck-toolbar_floating' ]\n\t\t\t}\n\t\t} );\n\n\t\ttoolbarView.render();\n\n\t\treturn toolbarView;\n\t}\n\n\t/**\n\t * Shows the toolbar and attaches it to the selection.\n\t *\n\t * Fires {@link #event:show} event which can be stopped to prevent the toolbar from showing up.\n\t */\n\tshow() {\n\t\tconst editor = this.editor;\n\n\t\t// Do not add the toolbar to the balloon stack twice.\n\t\tif ( this._balloon.hasView( this.toolbarView ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not show the toolbar when the selection is collapsed.\n\t\tif ( editor.model.document.selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Don not show the toolbar when all components inside are disabled\n\t\t// see https://github.com/ckeditor/ckeditor5-ui/issues/269.\n\t\tif ( Array.from( this.toolbarView.items ).every( item => item.isEnabled !== undefined && !item.isEnabled ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update the toolbar position when the editor ui should be refreshed.\n\t\tthis.listenTo( this.editor.ui, 'update', () => {\n\t\t\tthis._balloon.updatePosition( this._getBalloonPositionData() );\n\t\t} );\n\n\t\t// Add the toolbar to the common editor contextual balloon.\n\t\tthis._balloon.add( {\n\t\t\tview: this.toolbarView,\n\t\t\tposition: this._getBalloonPositionData(),\n\t\t\tballoonClassName: 'ck-toolbar-container'\n\t\t} );\n\t}\n\n\t/**\n\t * Hides the toolbar.\n\t */\n\thide() {\n\t\tif ( this._balloon.hasView( this.toolbarView ) ) {\n\t\t\tthis.stopListening( this.editor.ui, 'update' );\n\t\t\tthis._balloon.remove( this.toolbarView );\n\t\t}\n\t}\n\n\t/**\n\t * Returns positioning options for the {@link #_balloon}. They control the way balloon is attached\n\t * to the selection.\n\t *\n\t * @private\n\t * @returns {module:utils/dom/position~Options}\n\t */\n\t_getBalloonPositionData() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tconst viewSelection = viewDocument.selection;\n\n\t\t// Get direction of the selection.\n\t\tconst isBackward = viewDocument.selection.isBackward;\n\n\t\treturn {\n\t\t\t// Because the target for BalloonPanelView is a Rect (not DOMRange), it's geometry will stay fixed\n\t\t\t// as the window scrolls. To let the BalloonPanelView follow such Rect, is must be continuously\n\t\t\t// computed and hence, the target is defined as a function instead of a static value.\n\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/195\n\t\t\ttarget: () => {\n\t\t\t\tconst range = isBackward ? viewSelection.getFirstRange() : viewSelection.getLastRange();\n\t\t\t\tconst rangeRects = Rect.getDomRangeRects( view.domConverter.viewRangeToDom( range ) );\n\n\t\t\t\t// Select the proper range rect depending on the direction of the selection.\n\t\t\t\tif ( isBackward ) {\n\t\t\t\t\treturn rangeRects[ 0 ];\n\t\t\t\t} else {\n\t\t\t\t\t// Ditch the zero-width \"orphan\" rect in the next line for the forward selection if there's\n\t\t\t\t\t// another one preceding it. It is not rendered as a selection by the web browser anyway.\n\t\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/308\n\t\t\t\t\tif ( rangeRects.length > 1 && rangeRects[ rangeRects.length - 1 ].width === 0 ) {\n\t\t\t\t\t\trangeRects.pop();\n\t\t\t\t\t}\n\n\t\t\t\t\treturn rangeRects[ rangeRects.length - 1 ];\n\t\t\t\t}\n\t\t\t},\n\t\t\tpositions: getBalloonPositions( isBackward )\n\t\t};\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._fireSelectionChangeDebounced.cancel();\n\t\tthis.stopListening();\n\t\tsuper.destroy();\n\t}\n\n\t/**\n\t * This event is fired just before the toolbar shows up. Stopping this event will prevent this.\n\t *\n\t * @event show\n\t */\n\n\t/**\n\t * This is internal plugin event which is fired 200 ms after model selection last change.\n\t * This is to makes easy test debounced action without need to use `setTimeout`.\n\t *\n\t * @protected\n\t * @event _selectionChangeDebounced\n\t */\n}\n\n// Returns toolbar positions for the given direction of the selection.\n//\n// @private\n// @param {Boolean} isBackward\n// @returns {Array.<module:utils/dom/position~Position>}\nfunction getBalloonPositions( isBackward ) {\n\tconst defaultPositions = BalloonPanelView.defaultPositions;\n\n\treturn isBackward ? [\n\t\tdefaultPositions.northWestArrowSouth,\n\t\tdefaultPositions.northWestArrowSouthWest,\n\t\tdefaultPositions.northWestArrowSouthEast,\n\t\tdefaultPositions.southWestArrowNorth,\n\t\tdefaultPositions.southWestArrowNorthWest,\n\t\tdefaultPositions.southWestArrowNorthEast\n\t] : [\n\t\tdefaultPositions.southEastArrowNorth,\n\t\tdefaultPositions.southEastArrowNorthEast,\n\t\tdefaultPositions.southEastArrowNorthWest,\n\t\tdefaultPositions.northEastArrowSouth,\n\t\tdefaultPositions.northEastArrowSouthEast,\n\t\tdefaultPositions.northEastArrowSouthWest\n\t];\n}\n\n/**\n * Contextual toolbar configuration. Used by the {@link module:ui/toolbar/balloon/balloontoolbar~BalloonToolbar}\n * feature.\n *\n *\t\tconst config = {\n *\t\t\tballoonToolbar: [ 'bold', 'italic', 'undo', 'redo' ]\n *\t\t};\n *\n * You can also use `'|'` to create a separator between groups of items:\n *\n *\t\tconst config = {\n *\t\t\tballoonToolbar: [ 'bold', 'italic', | 'undo', 'redo' ]\n *\t\t};\n *\n * Read also about configuring the main editor toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>|Object} module:core/editor/editorconfig~EditorConfig#balloonToolbar\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/toolbar/normalizetoolbarconfig\n */\n\n/**\n * Normalizes the toolbar configuration (`config.toolbar`), which:\n *\n * * may be defined as an `Array`:\n *\n * \t\ttoolbar: [ 'heading', 'bold', 'italic', 'link', ... ]\n *\n * * or an `Object`:\n *\n *\t\ttoolbar: {\n *\t\t\titems: [ 'heading', 'bold', 'italic', 'link', ... ],\n *\t\t\t...\n *\t\t}\n *\n * * or may not be defined at all (`undefined`)\n *\n * and returns it in the object form.\n *\n * @param {Array|Object|undefined} config The value of `config.toolbar`.\n * @returns {Object} A normalized toolbar config object.\n */\nexport default function normalizeToolbarConfig( config ) {\n\tif ( Array.isArray( config ) ) {\n\t\treturn {\n\t\t\titems: config\n\t\t};\n\t}\n\n\tif ( !config ) {\n\t\treturn {\n\t\t\titems: []\n\t\t};\n\t}\n\n\treturn Object.assign( {\n\t\titems: []\n\t}, config );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/componentfactory\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * A helper class implementing the UI component ({@link module:ui/view~View view}) factory.\n *\n * It allows functions producing specific UI components to be registered under their unique names\n * in the factory. A registered component can be then instantiated by providing its name.\n * Note that names are case insensitive.\n *\n *\t\t// The editor provides localization tools for the factory.\n *\t\tconst factory = new ComponentFactory( editor );\n *\n *\t\tfactory.add( 'foo', locale => new FooView( locale ) );\n *\t\tfactory.add( 'bar', locale => new BarView( locale ) );\n *\n *\t\t// An instance of FooView.\n *\t\tconst fooInstance = factory.create( 'foo' );\n *\n *\t\t// Names are case insensitive so this is also allowed:\n *\t\tconst barInstance = factory.create( 'Bar' );\n *\n * The {@link module:core/editor/editor~Editor#locale editor locale} is passed to the factory\n * function when {@link module:ui/componentfactory~ComponentFactory#create} is called.\n */\nexport default class ComponentFactory {\n\t/**\n\t * Creates an instance of the factory.\n\t *\n\t * @constructor\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor instance that the factory belongs to.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * Registered component factories.\n\t\t *\n\t\t * @private\n\t\t * @member {Map}\n\t\t */\n\t\tthis._components = new Map();\n\t}\n\n\t/**\n\t * Returns an iterator of registered component names. Names are returned in lower case.\n\t *\n\t * @returns {Iterable.<String>}\n\t */\n\t* names() {\n\t\tfor ( const value of this._components.values() ) {\n\t\t\tyield value.originalName;\n\t\t}\n\t}\n\n\t/**\n\t * Registers a component factory function that will be used by the\n\t * {@link #create create} method and called with the\n\t * {@link module:core/editor/editor~Editor#locale editor locale} as an argument,\n\t * allowing localization of the {@link module:ui/view~View view}.\n\t *\n\t * @param {String} name The name of the component.\n\t * @param {Function} callback The callback that returns the component.\n\t */\n\tadd( name, callback ) {\n\t\tif ( this.has( name ) ) {\n\t\t\t/**\n\t\t\t * The item already exists in the component factory.\n\t\t\t *\n\t\t\t * @error componentfactory-item-exists\n\t\t\t * @param {String} name The name of the component.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'componentfactory-item-exists: The item already exists in the component factory.', { name }\n\t\t\t);\n\t\t}\n\n\t\tthis._components.set( getNormalized( name ), { callback, originalName: name } );\n\t}\n\n\t/**\n\t * Creates an instance of a component registered in the factory under a specific name.\n\t *\n\t * When called, the {@link module:core/editor/editor~Editor#locale editor locale} is passed to\n\t * the previously {@link #add added} factory function, allowing localization of the\n\t * {@link module:ui/view~View view}.\n\t *\n\t * @param {String} name The name of the component.\n\t * @returns {module:ui/view~View} The instantiated component view.\n\t */\n\tcreate( name ) {\n\t\tif ( !this.has( name ) ) {\n\t\t\t/**\n\t\t\t * The required component is not registered in the component factory. Please make sure\n\t\t\t * the provided name is correct and the component has been correctly\n\t\t\t * {@link #add added} to the factory.\n\t\t\t *\n\t\t\t * @error componentfactory-item-missing\n\t\t\t * @param {String} name The name of the missing component.\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'componentfactory-item-missing: The required component is not registered in the factory.', { name }\n\t\t\t);\n\t\t}\n\n\t\treturn this._components.get( getNormalized( name ) ).callback( this.editor.locale );\n\t}\n\n\t/**\n\t * Checks if a component of a given name is registered in the factory.\n\t *\n\t * @param {String} name The name of the component.\n\t * @returns {Boolean}\n\t */\n\thas( name ) {\n\t\treturn this._components.has( getNormalized( name ) );\n\t}\n}\n\n//\n// Ensures that the component name used as the key in the internal map is in lower case.\n//\n// @private\n// @param {String} name\n// @returns {String}\nfunction getNormalized( name ) {\n\treturn String( name ).toLowerCase();\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/editor/editorui\n */\n\nimport ComponentFactory from '@ckeditor/ckeditor5-ui/src/componentfactory';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * A class providing the minimal interface that is required to successfully bootstrap any editor UI.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\nexport default class EditorUI {\n\t/**\n\t * Creates an instance of the editor UI class.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {module:ui/editorui/editoruiview~EditorUIView} view The view of the UI.\n\t */\n\tconstructor( editor, view ) {\n\t\t/**\n\t\t * The editor that the UI belongs to.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * The main (top–most) view of the editor UI.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/editorui/editoruiview~EditorUIView} #view\n\t\t */\n\t\tthis.view = view;\n\n\t\t/**\n\t\t * An instance of the {@link module:ui/componentfactory~ComponentFactory}, a registry used by plugins\n\t\t * to register factories of specific UI components.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/componentfactory~ComponentFactory} #componentFactory\n\t\t */\n\t\tthis.componentFactory = new ComponentFactory( editor );\n\n\t\t/**\n\t\t * Stores the information about the editor UI focus and propagates it so various plugins and components\n\t\t * are unified as a focus group.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker} #focusTracker\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t// Informs UI components that should be refreshed after layout change.\n\t\tthis.listenTo( editor.editing.view.document, 'layoutChanged', () => this.update() );\n\t}\n\n\t/**\n\t * Fires the {@link module:core/editor/editorui~EditorUI#event:update `update`} event.\n\t *\n\t * This method should be called when the editor UI (e.g. positions of its balloons) needs to be updated due to\n\t * some environmental change which CKEditor 5 is not aware of (e.g. resize of a container in which it is used).\n\t */\n\tupdate() {\n\t\tthis.fire( 'update' );\n\t}\n\n\t/**\n\t * Destroys the UI.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t\tthis.view.destroy();\n\t}\n\n\t/**\n\t * Fired whenever the UI (all related components) should be refreshed.\n\t *\n\t * **Note:**: The event is fired after each {@link module:engine/view/document~Document#event:layoutChanged}.\n\t * It can also be fired manually via the {@link module:core/editor/editorui~EditorUI#update} method.\n\t *\n\t * @event update\n\t */\n}\n\nmix( EditorUI, EmitterMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module editor-balloon/ballooneditorui\n */\n\nimport EditorUI from '@ckeditor/ckeditor5-core/src/editor/editorui';\nimport enableToolbarKeyboardFocus from '@ckeditor/ckeditor5-ui/src/toolbar/enabletoolbarkeyboardfocus';\n\n/**\n * The balloon editor UI class.\n *\n * @extends module:core/editor/editorui~EditorUI\n */\nexport default class BalloonEditorUI extends EditorUI {\n\t/**\n\t * Initializes the UI.\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = this.view;\n\t\tconst balloonToolbar = editor.plugins.get( 'BalloonToolbar' );\n\n\t\tview.render();\n\n\t\t// Setup the editable.\n\t\tconst editingRoot = editor.editing.view.document.getRoot();\n\t\tview.editable.bind( 'isReadOnly' ).to( editingRoot );\n\n\t\t// Bind to focusTracker instead of editor.editing.view because otherwise\n\t\t// focused editable styles disappear when view#toolbar is focused.\n\t\tview.editable.bind( 'isFocused' ).to( this.focusTracker );\n\t\teditor.editing.view.attachDomRoot( view.editableElement );\n\t\tview.editable.name = editingRoot.rootName;\n\n\t\tthis.focusTracker.add( view.editableElement );\n\n\t\tenableToolbarKeyboardFocus( {\n\t\t\torigin: editor.editing.view,\n\t\t\toriginFocusTracker: this.focusTracker,\n\t\t\toriginKeystrokeHandler: editor.keystrokes,\n\t\t\ttoolbar: balloonToolbar.toolbarView,\n\t\t\tbeforeFocus() {\n\t\t\t\tballoonToolbar.show();\n\t\t\t},\n\t\t\tafterBlur() {\n\t\t\t\tballoonToolbar.hide();\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/toolbar/enabletoolbarkeyboardfocus\n */\n\n/**\n * Enables focus/blur toolbar navigation using `Alt+F10` and `Esc` keystrokes.\n *\n * @param {Object} options Options of the utility.\n * @param {*} options.origin A view to which the focus will return when `Esc` is pressed and\n * `options.toolbar` is focused.\n * @param {module:utils/keystrokehandler~KeystrokeHandler} options.originKeystrokeHandler A keystroke\n * handler to register `Alt+F10` keystroke.\n * @param {module:utils/focustracker~FocusTracker} options.originFocusTracker A focus tracker\n * for `options.origin`.\n * @param {module:ui/toolbar/toolbarview~ToolbarView} options.toolbar A toolbar which is to gain\n * focus when `Alt+F10` is pressed.\n * @param {Function} [options.beforeFocus] A callback executed before the `options.toolbar` gains focus\n * upon the `Alt+F10` keystroke.\n * @param {Function} [options.afterBlur] A callback executed after `options.toolbar` loses focus upon\n * `Esc` keystroke but before the focus goes back to `options.origin`.\n */\nexport default function enableToolbarKeyboardFocus( {\n\torigin,\n\toriginKeystrokeHandler,\n\toriginFocusTracker,\n\ttoolbar,\n\tbeforeFocus,\n\tafterBlur\n} ) {\n\t// Because toolbar items can get focus, the overall state of the toolbar must\n\t// also be tracked.\n\toriginFocusTracker.add( toolbar.element );\n\n\t// Focus the toolbar on the keystroke, if not already focused.\n\toriginKeystrokeHandler.set( 'Alt+F10', ( data, cancel ) => {\n\t\tif ( originFocusTracker.isFocused && !toolbar.focusTracker.isFocused ) {\n\t\t\tif ( beforeFocus ) {\n\t\t\t\tbeforeFocus();\n\t\t\t}\n\n\t\t\ttoolbar.focus();\n\n\t\t\tcancel();\n\t\t}\n\t} );\n\n\t// Blur the toolbar and bring the focus back to origin.\n\ttoolbar.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\tif ( toolbar.focusTracker.isFocused ) {\n\t\t\torigin.focus();\n\n\t\t\tif ( afterBlur ) {\n\t\t\t\tafterBlur();\n\t\t\t}\n\n\t\t\tcancel();\n\t\t}\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/editorui/editoruiview\n */\n\n/* globals document */\n\nimport View from '../view';\nimport Template from '../template';\n\nimport '../../theme/components/editorui/editorui.css';\n\n/**\n * The editor UI view class. Base class for the editor main views.\n *\n * @extends module:ui/view~View\n */\nexport default class EditorUIView extends View {\n\t/**\n\t * Creates an instance of the editor UI view class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Collection of the child views, detached from the DOM\n\t\t * structure of the editor, like panels, icons etc.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection} #body\n\t\t */\n\t\tthis.body = this.createCollection();\n\n\t\t/**\n\t\t * The element holding elements of the 'body' region.\n\t\t *\n\t\t * @private\n\t\t * @member {HTMLElement} #_bodyCollectionContainer\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis._renderBodyCollection();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._bodyCollectionContainer.remove();\n\n\t\treturn super.destroy();\n\t}\n\n\t/**\n\t * Creates and appends to `<body>` the {@link #body} collection container.\n\t *\n\t * @private\n\t */\n\t_renderBodyCollection() {\n\t\tconst bodyElement = this._bodyCollectionContainer = new Template( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-reset_all',\n\t\t\t\t\t'ck-body',\n\t\t\t\t\t'ck-rounded-corners'\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: this.body\n\t\t} ).render();\n\n\t\tdocument.body.appendChild( bodyElement );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/editableui/editableuiview\n */\n\nimport View from '../view';\n\n/**\n * The editable UI view class.\n *\n * @extends module:ui/view~View\n */\nexport default class EditableUIView extends View {\n\t/**\n\t * Creates an instance of EditableUIView class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t * @param {HTMLElement} [editableElement] The editable element. If not specified, this view\n\t * should create it. Otherwise, the existing element should be used.\n\t */\n\tconstructor( locale, editableElement ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tif ( editableElement ) {\n\t\t\tthis.element = this.editableElement = editableElement;\n\t\t}\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-content',\n\t\t\t\t\t'ck-editor__editable',\n\t\t\t\t\t'ck-rounded-corners',\n\t\t\t\t\tbind.to( 'isFocused', value => value ? 'ck-focused' : 'ck-blurred' ),\n\t\t\t\t\tbind.if( 'isReadOnly', 'ck-read-only' )\n\n\t\t\t\t],\n\t\t\t\tcontenteditable: bind.to( 'isReadOnly', value => !value ),\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Controls whether the editable is writable or not.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * Controls whether the editable is focused, i.e. the user is typing in it.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isFocused\n\t\t */\n\t\tthis.set( 'isFocused', false );\n\n\t\t/**\n\t\t * An external {@link #editableElement} passed into the constructor, which also means\n\t\t * the view will not render its {@link #template}.\n\t\t *\n\t\t * @member {HTMLElement} #externalElement\n\t\t */\n\t\tthis.externalElement = editableElement;\n\n\t\t/**\n\t\t * The element which is the main editable element (usually the one with `contentEditable=\"true\"`).\n\t\t *\n\t\t * @readonly\n\t\t * @member {HTMLElement} #editableElement\n\t\t */\n\t}\n\n\t/**\n\t * Renders the view by either applying the {@link #template} to the existing\n\t * {@link #editableElement} or assigning {@link #element} as {@link #editableElement}.\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tif ( this.externalElement ) {\n\t\t\tthis.template.apply( this.element = this.externalElement );\n\t\t} else {\n\t\t\tthis.editableElement = this.element;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tif ( this.externalElement ) {\n\t\t\tthis.template.revert( this.externalElement );\n\t\t}\n\n\t\tsuper.destroy();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module ui/editableui/inline/inlineeditableuiview\n */\nimport EditableUIView from '../../editableui/editableuiview';\n/**\n * The inline editable UI class implementing an inline {@link module:ui/editableui/editableuiview~EditableUIView}.\n *\n * @extends module:ui/editableui/editableuiview~EditableUIView\n */\nexport default class InlineEditableUIView extends EditableUIView {\n    /**\n\t * Creates an instance of the InlineEditableUIView class.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The locale instance.\n\t * @param {HTMLElement} [editableElement] The editable element. If not specified, the\n\t * {@link module:ui/editableui/editableuiview~EditableUIView}\n\t * will create it. Otherwise, the existing element will be used.\n\t */\n    constructor(locale, editableElement) {\n        super(locale, editableElement);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        /**\n\t\t * The name of the editable UI view.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #name\n\t\t */\n        this.set('name', null);\n        const getLabel = value => {\n            return t('ao', [value]);\n        };\n        this.extendTemplate({\n            attributes: {\n                role: 'textbox',\n                'aria-label': bind.to('name', getLabel),\n                class: 'ck-editor__editable_inline'\n            }\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module editor-balloon/ballooneditoruiview\n */\n\nimport EditorUIView from '@ckeditor/ckeditor5-ui/src/editorui/editoruiview';\nimport InlineEditableUIView from '@ckeditor/ckeditor5-ui/src/editableui/inline/inlineeditableuiview';\n\n/**\n * Contextual editor UI view. Uses the {@link module:ui/editableui/inline/inlineeditableuiview~InlineEditableUIView}.\n *\n * @extends module:ui/editorui/editoruiview~EditorUIView\n */\nexport default class BalloonEditorUIView extends EditorUIView {\n\t/**\n\t * Creates an instance of the balloon editor UI view.\n\t *\n\t * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param {HTMLElement} [editableElement] The editable element. If not specified, it will be automatically created by\n\t * {@link module:ui/editableui/editableuiview~EditableUIView}. Otherwise, the given element will be used.\n\t */\n\tconstructor( locale, editableElement ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The editable UI view.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/editableui/inline/inlineeditableuiview~InlineEditableUIView}\n\t\t */\n\t\tthis.editable = new InlineEditableUIView( locale, editableElement );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.registerChild( this.editable );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget editableElement() {\n\t\treturn this.editable.element;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/dom/setdatainelement\n */\n\n/* globals HTMLTextAreaElement */\n\n/**\n * Sets data in a given element.\n *\n * @param {HTMLElement} el The element in which the data will be set.\n * @param {String} data The data string.\n */\nexport default function setDataInElement( el, data ) {\n\tif ( el instanceof HTMLTextAreaElement ) {\n\t\tel.value = data;\n\t}\n\n\tel.innerHTML = data;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport setDataInElement from '@ckeditor/ckeditor5-utils/src/dom/setdatainelement';\n\n/**\n * @module core/editor/utils/elementapimixin\n */\n\n/**\n * Implementation of the {@link module:core/editor/utils/elementapimixin~ElementApi}.\n *\n * @mixin ElementApiMixin\n * @implements module:core/editor/utils/elementapimixin~ElementApi\n */\nconst ElementApiMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tupdateSourceElement() {\n\t\tif ( !this.sourceElement ) {\n\t\t\t/**\n\t\t\t * Cannot update the source element of a detached editor.\n\t\t\t *\n\t\t\t * The {@link ~ElementApi#updateSourceElement `updateSourceElement()`} method cannot be called if you did not\n\t\t\t * pass an element to `Editor.create()`.\n\t\t\t *\n\t\t\t * @error editor-missing-sourceelement\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'editor-missing-sourceelement: Cannot update the source element of a detached editor.' );\n\t\t}\n\n\t\tsetDataInElement( this.sourceElement, this.data.get() );\n\t}\n};\n\nexport default ElementApiMixin;\n\n/**\n * Interface describing an editor that replaced a DOM element (was \"initialized on an element\").\n *\n * Such an editor should provide a method to\n * {@link module:core/editor/utils/elementapimixin~ElementApi#updateSourceElement update the replaced element with the current data}.\n *\n * @interface ElementApi\n */\n\n/**\n * The element on which the editor has been initialized.\n *\n * @readonly\n * @member {HTMLElement} #sourceElement\n */\n\n/**\n * Updates the {@link #sourceElement editor source element}'s content with the data.\n *\n * @method #updateSourceElement\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module editor-balloon/ballooneditor\n */\n\nimport Editor from '@ckeditor/ckeditor5-core/src/editor/editor';\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\nimport BalloonToolbar from '@ckeditor/ckeditor5-ui/src/toolbar/balloon/balloontoolbar';\nimport BalloonEditorUI from './ballooneditorui';\nimport BalloonEditorUIView from './ballooneditoruiview';\nimport setDataInElement from '@ckeditor/ckeditor5-utils/src/dom/setdatainelement';\nimport getDataFromElement from '@ckeditor/ckeditor5-utils/src/dom/getdatafromelement';\nimport DataApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/dataapimixin';\nimport ElementApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/elementapimixin';\nimport attachToForm from '@ckeditor/ckeditor5-core/src/editor/utils/attachtoform';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { isElement } from 'lodash-es';\n\n/**\n * The {@glink builds/guides/overview#balloon-editor balloon editor} implementation (Medium-like editor).\n * It uses an inline editable and a toolbar based on the {@link module:ui/toolbar/balloon/balloontoolbar~BalloonToolbar}.\n * See the {@glink examples/builds/balloon-editor demo}.\n *\n * In order to create a balloon editor instance, use the static\n * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`} method.\n *\n * # Balloon editor and balloon build\n *\n * The balloon editor can be used directly from source (if you installed the\n * [`@ckeditor/ckeditor5-editor-balloon`](https://www.npmjs.com/package/@ckeditor/ckeditor5-editor-balloon) package)\n * but it is also available in the {@glink builds/guides/overview#balloon-editor balloon build}.\n *\n * {@glink builds/guides/overview Builds} are ready-to-use editors with plugins bundled in. When using the editor from\n * source you need to take care of loading all plugins by yourself\n * (through the {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`} option).\n * Using the editor from source gives much better flexibility and allows easier customization.\n *\n * Read more about initializing the editor from source or as a build in\n * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}.\n *\n * @mixes module:core/editor/utils/dataapimixin~DataApiMixin\n * @mixes module:core/editor/utils/elementapimixin~ElementApiMixin\n * @implements module:core/editor/editorwithui~EditorWithUI\n * @extends module:core/editor/editor~Editor\n */\nexport default class BalloonEditor extends Editor {\n\t/**\n\t * Creates an instance of the balloon editor.\n\t *\n\t * **Note:** do not use the constructor to create editor instances. Use the static\n\t * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`} method instead.\n\t *\n\t * @protected\n\t * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n\t * (on which the editor will be initialized) or initial data for the editor. For more information see\n\t * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}.\n\t * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n\t */\n\tconstructor( sourceElementOrData, config ) {\n\t\tsuper( config );\n\n\t\tif ( isElement( sourceElementOrData ) ) {\n\t\t\tthis.sourceElement = sourceElementOrData;\n\t\t}\n\n\t\tthis.config.get( 'plugins' ).push( BalloonToolbar );\n\t\tthis.config.define( 'balloonToolbar', this.config.get( 'toolbar' ) );\n\n\t\tthis.data.processor = new HtmlDataProcessor();\n\n\t\tthis.model.document.createRoot();\n\n\t\tthis.ui = new BalloonEditorUI( this, new BalloonEditorUIView( this.locale, this.sourceElement ) );\n\n\t\tattachToForm( this );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tget element() {\n\t\treturn this.ui.view.editable.element;\n\t}\n\n\t/**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * Updates the original editor element with the data.\n\t *\n\t * @returns {Promise}\n\t */\n\tdestroy() {\n\t\t// Cache the data, then destroy.\n\t\t// It's safe to assume that the model->view conversion will not work after super.destroy().\n\t\tconst data = this.getData();\n\n\t\tthis.ui.destroy();\n\n\t\treturn super.destroy()\n\t\t\t.then( () => {\n\t\t\t\tif ( this.sourceElement ) {\n\t\t\t\t\tsetDataInElement( this.sourceElement, data );\n\t\t\t\t}\n\t\t\t} );\n\t}\n\n\t/**\n\t * Creates a balloon editor instance.\n\t *\n\t * Creating an instance when using a {@glink builds/index CKEditor build}:\n\t *\n\t *\t\tBalloonEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ) )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * Creating an instance when using CKEditor from source (make sure to specify the list of plugins to load and the toolbar):\n\t *\n\t *\t\timport BalloonEditor from '@ckeditor/ckeditor5-editor-balloon/src/ballooneditor';\n\t *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n\t *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n\t *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n\t *\t\timport ...\n\t *\n\t *\t\tBalloonEditor\n\t *\t\t\t.create( document.querySelector( '#editor' ), {\n\t *\t\t\t\tplugins: [ Essentials, Bold, Italic, ... ],\n\t *\t\t\t\ttoolbar: [ 'bold', 'italic', ... ]\n\t *\t\t\t} )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * Creating an instance when using initial data instead of a DOM element:\n\t *\n\t *\t\timport BalloonEditor from '@ckeditor/ckeditor5-editor-balloon/src/ballooneditor';\n\t *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n\t *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n\t *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n\t *\t\timport ...\n\t *\n\t *\t\tBalloonEditor\n\t *\t\t\t.create( '<p>Hello world!</p>', {\n\t *\t\t\t\tplugins: [ Essentials, Bold, Italic, ... ],\n\t *\t\t\t\ttoolbar: [ 'bold', 'italic', ... ]\n\t *\t\t\t} )\n\t *\t\t\t.then( editor => {\n\t *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t *\t\t\t\t// Initial data was provided so `editor.element` needs to be added manually to the DOM.\n\t *\t\t\t\tdocument.body.appendChild( editor.element );\n\t *\t\t\t} )\n\t *\t\t\t.catch( err => {\n\t *\t\t\t\tconsole.error( err.stack );\n\t *\t\t\t} );\n\t *\n\t * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n\t * (on which the editor will be initialized) or initial data for the editor.\n\t *\n\t * If a source element is passed, then its contents will be automatically\n\t * {@link module:editor-balloon/ballooneditor~BalloonEditor#setData loaded} to the editor on startup and the element\n\t * itself will be used as the editor's editable element.\n\t *\n\t * If data is provided, then `editor.element` will be created automatically and needs to be added\n\t * to the DOM manually.\n\t * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n\t * @returns {Promise} A promise resolved once the editor is ready.\n\t * The promise returns the created {@link module:editor-balloon/ballooneditor~BalloonEditor} instance.\n\t */\n\tstatic create( sourceElementOrData, config ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst editor = new this( sourceElementOrData, config );\n\n\t\t\tresolve(\n\t\t\t\teditor.initPlugins()\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\teditor.ui.init();\n\t\t\t\t\t\teditor.fire( 'uiReady' );\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\tconst initialData = isElement( sourceElementOrData ) ?\n\t\t\t\t\t\t\tgetDataFromElement( sourceElementOrData ) :\n\t\t\t\t\t\t\tsourceElementOrData;\n\n\t\t\t\t\t\treturn editor.data.init( initialData );\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => {\n\t\t\t\t\t\teditor.fire( 'dataReady' );\n\t\t\t\t\t\teditor.fire( 'ready' );\n\t\t\t\t\t} )\n\t\t\t\t\t.then( () => editor )\n\t\t\t);\n\t\t} );\n\t}\n}\n\nmix( BalloonEditor, DataApiMixin );\nmix( BalloonEditor, ElementApiMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { isFunction } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * @module core/editor/utils/attachtoform\n */\n\n/**\n * Checks if the editor is initialized on a `<textarea>` element that belongs to a form. If yes, it updates the editor's element\n * content before submitting the form.\n *\n * This helper requires the {@link module:core/editor/utils/elementapimixin~ElementApi ElementApi interface}.\n *\n * @param {module:core/editor/editor~Editor} editor Editor instance.\n */\nexport default function attachToForm( editor ) {\n\tif ( !isFunction( editor.updateSourceElement ) ) {\n\t\t/**\n\t\t * The editor passed to `attachToForm()` must implement the\n\t\t * {@link module:core/editor/utils/elementapimixin~ElementApi} interface.\n\t\t *\n\t\t * @error attachtoform-missing-elementapi-interface\n\t\t */\n\t\tthrow new CKEditorError( 'attachtoform-missing-elementapi-interface: Editor passed to attachToForm() must implement ElementApi.' );\n\t}\n\n\tconst sourceElement = editor.sourceElement;\n\n\t// Only when replacing a textarea which is inside of a form element.\n\tif ( sourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.form ) {\n\t\tlet originalSubmit;\n\t\tconst form = sourceElement.form;\n\t\tconst onSubmit = () => editor.updateSourceElement();\n\n\t\t// Replace the original form#submit() to call a custom submit function first.\n\t\t// Check if #submit is a function because the form might have an input named \"submit\".\n\t\tif ( isFunction( form.submit ) ) {\n\t\t\toriginalSubmit = form.submit;\n\n\t\t\tform.submit = () => {\n\t\t\t\tonSubmit();\n\t\t\t\toriginalSubmit.apply( form );\n\t\t\t};\n\t\t}\n\n\t\t// Update the replaced textarea with data before each form#submit event.\n\t\tform.addEventListener( 'submit', onSubmit );\n\n\t\t// Remove the submit listener and revert the original submit method on\n\t\t// editor#destroy.\n\t\teditor.on( 'destroy', () => {\n\t\t\tform.removeEventListener( 'submit', onSubmit );\n\n\t\t\tif ( originalSubmit ) {\n\t\t\t\tform.submit = originalSubmit;\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals HTMLTextAreaElement */\n\n/**\n * @module utils/dom/getdatafromelement\n */\n\n/**\n * Gets data from a given source element.\n *\n * @param {HTMLElement} el The element from which the data will be retrieved.\n * @returns {String} The data string.\n */\nexport default function getDataFromElement( el ) {\n\tif ( el instanceof HTMLTextAreaElement ) {\n\t\treturn el.value;\n\t}\n\n\treturn el.innerHTML;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/editor/utils/dataapimixin\n */\n\n/**\n * Implementation of the {@link module:core/editor/utils/dataapimixin~DataApi}.\n *\n * @mixin DataApiMixin\n * @implements module:core/editor/utils/dataapimixin~DataApi\n */\nconst DataApiMixin = {\n\t/**\n\t * @inheritDoc\n\t */\n\tsetData( data ) {\n\t\tthis.data.set( data );\n\t},\n\n\t/**\n\t * @inheritDoc\n\t */\n\tgetData() {\n\t\treturn this.data.get();\n\t}\n};\n\nexport default DataApiMixin;\n\n/**\n * Interface defining editor methods for setting and getting data to and from the editor's main root element\n * using the {@link module:core/editor/editor~Editor#data data pipeline}.\n *\n * This interface is not a part of the {@link module:core/editor/editor~Editor} class because one may want to implement\n * an editor with multiple root elements, in which case the methods for setting and getting data will need to be implemented\n * differently.\n *\n * @interface DataApi\n */\n\n/**\n * Sets the data in the editor.\n *\n *\t\teditor.setData( '<p>This is editor!</p>' );\n *\n * By default the editor accepts HTML. This can be controlled by injecting a different data processor.\n * See the {@glink features/markdown Markdown output} guide for more details.\n *\n * Note: Not only is the format of the data configurable, but the type of the `setData()`'s parameter does not\n * have to be a string either. You can e.g. accept an object or a DOM `DocumentFragment` if you consider this\n * the right format for you.\n *\n * @method #setData\n * @param {String} data Input data.\n */\n\n/**\n * Gets the data from the editor.\n *\n *\t\teditor.getData(); // -> '<p>This is editor!</p>'\n *\n * By default the editor outputs HTML. This can be controlled by injecting a different data processor.\n * See the {@glink features/markdown Markdown output} guide for more details.\n *\n * Note: Not only is the format of the data configurable, but the type of the `getData()`'s return value does not\n * have to be a string either. You can e.g. return an object or a DOM `DocumentFragment`  if you consider this\n * the right format for you.\n *\n * @method #getData\n * @returns {String} Output data.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module clipboard/datatransfer\n */\n\n/**\n * Facade over the native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.\n */\nexport default class DataTransfer {\n\tconstructor( nativeDataTransfer ) {\n\t\t/**\n\t\t * The array of files created from the native `DataTransfer#files` or `DataTransfer#items`.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<File>} #files\n\t\t */\n\t\tthis.files = getFiles( nativeDataTransfer );\n\n\t\t/**\n\t\t * The native DataTransfer object.\n\t\t *\n\t\t * @private\n\t\t * @member {DataTransfer} #_native\n\t\t */\n\t\tthis._native = nativeDataTransfer;\n\t}\n\n\t/**\n\t * Returns an array of available native content types.\n\t *\n\t * @returns {Array.<String>}\n\t */\n\tget types() {\n\t\treturn this._native.types;\n\t}\n\n\t/**\n\t * Gets data from the data transfer by its mime type.\n\t *\n\t *\t\tdataTransfer.getData( 'text/plain' );\n\t *\n\t * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n\t * @returns {String}\n\t */\n\tgetData( type ) {\n\t\treturn this._native.getData( type );\n\t}\n\n\t/**\n\t * Sets data in the data transfer.\n\t *\n\t * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n\t * @param {String} data\n\t */\n\tsetData( type, data ) {\n\t\tthis._native.setData( type, data );\n\t}\n}\n\nfunction getFiles( nativeDataTransfer ) {\n\t// DataTransfer.files and items are Array-like and might not have an iterable interface.\n\tconst files = nativeDataTransfer.files ? Array.from( nativeDataTransfer.files ) : [];\n\tconst items = nativeDataTransfer.items ? Array.from( nativeDataTransfer.items ) : [];\n\n\tif ( files.length ) {\n\t\treturn files;\n\t}\n\t// Chrome have empty DataTransfer.files, but let get files through the items interface.\n\treturn items\n\t\t.filter( item => item.kind === 'file' )\n\t\t.map( item => item.getAsFile() );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module clipboard/clipboardobserver\n */\n\nimport DomEventObserver from '@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver';\nimport DataTransfer from './datatransfer';\n\n/**\n * Clipboard events observer.\n *\n * Fires the following events:\n *\n * * {@link module:engine/view/document~Document#event:clipboardInput}\n * * {@link module:engine/view/document~Document#event:dragover}\n * * {@link module:engine/view/document~Document#event:drop}\n * * {@link module:engine/view/document~Document#event:paste}\n * * {@link module:engine/view/document~Document#event:copy}\n * * {@link module:engine/view/document~Document#event:cut}\n *\n * Note that this observer is not available by default (it is not added by the engine).\n * To make it available it needs to be added to {@link module:engine/view/document~Document} by\n * the {@link module:engine/view/view~View#addObserver `View#addObserver()`} method. You can also load the\n * {@link module:clipboard/clipboard~Clipboard} plugin which adds this observer automatically (because it uses it).\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class ClipboardObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst viewDocument = this.document;\n\n\t\tthis.domEventType = [ 'paste', 'copy', 'cut', 'drop', 'dragover' ];\n\n\t\tthis.listenTo( viewDocument, 'paste', handleInput, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'drop', handleInput, { priority: 'low' } );\n\n\t\tfunction handleInput( evt, data ) {\n\t\t\tdata.preventDefault();\n\n\t\t\tconst targetRanges = data.dropRange ? [ data.dropRange ] : Array.from( viewDocument.selection.getRanges() );\n\n\t\t\tviewDocument.fire( 'clipboardInput', {\n\t\t\t\tdataTransfer: data.dataTransfer,\n\t\t\t\ttargetRanges\n\t\t\t} );\n\t\t}\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tconst evtData = {\n\t\t\tdataTransfer: new DataTransfer( domEvent.clipboardData ? domEvent.clipboardData : domEvent.dataTransfer )\n\t\t};\n\n\t\tif ( domEvent.type == 'drop' ) {\n\t\t\tevtData.dropRange = getDropViewRange( this.view, domEvent );\n\t\t}\n\n\t\tthis.fire( domEvent.type, domEvent, evtData );\n\t}\n}\n\nfunction getDropViewRange( view, domEvent ) {\n\tconst domDoc = domEvent.target.ownerDocument;\n\tconst x = domEvent.clientX;\n\tconst y = domEvent.clientY;\n\tlet domRange;\n\n\t// Webkit & Blink.\n\tif ( domDoc.caretRangeFromPoint && domDoc.caretRangeFromPoint( x, y ) ) {\n\t\tdomRange = domDoc.caretRangeFromPoint( x, y );\n\t}\n\t// FF.\n\telse if ( domEvent.rangeParent ) {\n\t\tdomRange = domDoc.createRange();\n\t\tdomRange.setStart( domEvent.rangeParent, domEvent.rangeOffset );\n\t\tdomRange.collapse( true );\n\t}\n\n\tif ( domRange ) {\n\t\treturn view.domConverter.domRangeToView( domRange );\n\t} else {\n\t\treturn view.document.selection.getFirstRange();\n\t}\n}\n\n/**\n * Fired as a continuation of {@link #event:paste} and {@link #event:drop} events.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline \"clipboard input pipeline\"}.\n *\n * Fired with a `dataTransfer` which comes from the clipboard and which content should be processed\n * and inserted into the editor.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardInput\n * @param {Object} data Event data.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n * @param {Array.<module:engine/view/range~Range>} data.targetRanges Ranges which are the target of the operation\n * (usually – into which the content should be inserted).\n * If clipboard input was triggered by a paste operation, then these are the selection ranges. If by a drop operation,\n * then it's the drop position (which can be different than the selection at the moment of drop).\n */\n\n/**\n * Fired when user drags content over one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:dragover\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user dropped content into one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:drop\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n * @param {module:engine/view/range~Range} dropRange The position into which the content is dropped.\n */\n\n/**\n * Fired when user pasted content into one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:paste\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user copied content from one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @event module:engine/view/document~Document#event:copy\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user cut content from one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @event module:engine/view/document~Document#event:cut\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:paste},\n * {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut} events.\n *\n * In order to access clipboard data use `dataTransfer` property.\n *\n * @class module:clipboard/clipboardobserver~ClipboardEventData\n * @extends module:engine/view/observer/domeventdata~DomEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboardobserver~ClipboardEventData#dataTransfer\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module clipboard/utils/viewtoplaintext\n */\n\n// Elements which should not have empty-line padding.\n// Most `view.ContainerElement` want to be separate by new-line, but some are creating one structure\n// together (like `<li>`) so it is better to separate them by only one \"\\n\".\nconst smallPaddingElements = [ 'figcaption', 'li' ];\n\n/**\n * Converts {@link module:engine/view/item~Item view item} and all of its children to plain text.\n *\n * @param {module:engine/view/item~Item} viewItem View item to convert.\n * @returns {String} Plain text representation of `viewItem`.\n */\nexport default function viewToPlainText( viewItem ) {\n\tlet text = '';\n\n\tif ( viewItem.is( 'text' ) || viewItem.is( 'textProxy' ) ) {\n\t\t// If item is `Text` or `TextProxy` simple take its text data.\n\t\ttext = viewItem.data;\n\t} else if ( viewItem.is( 'img' ) && viewItem.hasAttribute( 'alt' ) ) {\n\t\t// Special case for images - use alt attribute if it is provided.\n\t\ttext = viewItem.getAttribute( 'alt' );\n\t} else {\n\t\t// Other elements are document fragments, attribute elements or container elements.\n\t\t// They don't have their own text value, so convert their children.\n\t\tlet prev = null;\n\n\t\tfor ( const child of viewItem.getChildren() ) {\n\t\t\tconst childText = viewToPlainText( child );\n\n\t\t\t// Separate container element children with one or more new-line characters.\n\t\t\tif ( prev && ( prev.is( 'containerElement' ) || child.is( 'containerElement' ) ) ) {\n\t\t\t\tif ( smallPaddingElements.includes( prev.name ) || smallPaddingElements.includes( child.name ) ) {\n\t\t\t\t\ttext += '\\n';\n\t\t\t\t} else {\n\t\t\t\t\ttext += '\\n\\n';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttext += childText;\n\t\t\tprev = child;\n\t\t}\n\t}\n\n\treturn text;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module clipboard/clipboard\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport ClipboardObserver from './clipboardobserver';\n\nimport plainTextToHtml from './utils/plaintexttohtml';\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\nimport viewToPlainText from './utils/viewtoplaintext.js';\n\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\n\n/**\n * The clipboard feature. It is responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through the clipboard pipeline in order to insert it into the editor's content.\n * It also handles the `cut` and `copy` events to fill the native clipboard with serialized editor's data.\n *\n * Read more about the clipboard integration in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive} guide.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Clipboard extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Clipboard';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst modelDocument = editor.model.document;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t/**\n\t\t * Data processor used to convert pasted HTML to a view structure.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/dataprocessor/htmldataprocessor~HtmlDataProcessor} #_htmlDataProcessor\n\t\t */\n\t\tthis._htmlDataProcessor = new HtmlDataProcessor();\n\n\t\tview.addObserver( ClipboardObserver );\n\n\t\t// The clipboard paste pipeline.\n\n\t\t// Pasting and dropping is disabled when editor is read-only.\n\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\tthis.listenTo( viewDocument, 'clipboardInput', evt => {\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardInput', ( evt, data ) => {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\t\t\tlet content = '';\n\n\t\t\tif ( dataTransfer.getData( 'text/html' ) ) {\n\t\t\t\tcontent = normalizeClipboardHtml( dataTransfer.getData( 'text/html' ) );\n\t\t\t} else if ( dataTransfer.getData( 'text/plain' ) ) {\n\t\t\t\tcontent = plainTextToHtml( dataTransfer.getData( 'text/plain' ) );\n\t\t\t}\n\n\t\t\tcontent = this._htmlDataProcessor.toView( content );\n\n\t\t\tthis.fire( 'inputTransformation', { content, dataTransfer } );\n\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( this, 'inputTransformation', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tconst dataController = this.editor.data;\n\t\t\t\tconst model = this.editor.model;\n\n\t\t\t\t// Convert the pasted content to a model document fragment.\n\t\t\t\t// Conversion is contextual, but in this case we need an \"all allowed\" context and for that\n\t\t\t\t// we use the $clipboardHolder item.\n\t\t\t\tconst modelFragment = dataController.toModel( data.content, '$clipboardHolder' );\n\n\t\t\t\tif ( modelFragment.childCount == 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmodel.insertContent( modelFragment );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// The clipboard copy/cut pipeline.\n\n\t\tfunction onCopyCut( evt, data ) {\n\t\t\tconst dataTransfer = data.dataTransfer;\n\n\t\t\tdata.preventDefault();\n\n\t\t\tconst content = editor.data.toView( editor.model.getSelectedContent( modelDocument.selection ) );\n\n\t\t\tviewDocument.fire( 'clipboardOutput', { dataTransfer, content, method: evt.name } );\n\t\t}\n\n\t\tthis.listenTo( viewDocument, 'copy', onCopyCut, { priority: 'low' } );\n\t\tthis.listenTo( viewDocument, 'cut', ( evt, data ) => {\n\t\t\t// Cutting is disabled when editor is read-only.\n\t\t\t// See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\t\t\tif ( editor.isReadOnly ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t} else {\n\t\t\t\tonCopyCut( evt, data );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\tthis.listenTo( viewDocument, 'clipboardOutput', ( evt, data ) => {\n\t\t\tif ( !data.content.isEmpty ) {\n\t\t\t\tdata.dataTransfer.setData( 'text/html', this._htmlDataProcessor.toData( data.content ) );\n\t\t\t\tdata.dataTransfer.setData( 'text/plain', viewToPlainText( data.content ) );\n\t\t\t}\n\n\t\t\tif ( data.method == 'cut' ) {\n\t\t\t\teditor.model.deleteContent( modelDocument.selection );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\t}\n}\n\n/**\n * Fired with a `content` and `dataTransfer` objects. The `content` which comes from the clipboard (was pasted or dropped)\n * should be processed in order to be inserted into the editor. The `dataTransfer` object is available\n * in case the transformation functions needs access to a raw clipboard data.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline \"clipboard input pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:clipboard/clipboard~Clipboard#event:inputTransformation\n * @param {Object} data Event data.\n * @param {module:engine/view/documentfragment~DocumentFragment} data.content Event data. Content to be inserted into the editor.\n * It can be modified by the event listeners. Read more about the clipboard pipelines in\n * {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n */\n\n/**\n * Fired on {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\n * with a copy of selected content. The content can be processed before it ends up in the clipboard.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#output-pipeline \"clipboard output pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardOutput\n * @param {module:clipboard/clipboard~ClipboardOutputEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:clipboardOutput} event.\n *\n * @class module:clipboard/clipboard~ClipboardOutputEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboard~ClipboardOutputEventData#dataTransfer\n */\n\n/**\n * Content to be put into the clipboard. It can be modified by the event listeners.\n * Read more about the clipboard pipelines in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n *\n * @member {module:engine/view/documentfragment~DocumentFragment} module:clipboard/clipboard~ClipboardOutputEventData#content\n */\n\n/**\n * Whether the event was triggered by copy or cut operation.\n *\n * @member {'copy'|'cut'} module:clipboard/clipboard~ClipboardOutputEventData#method\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module clipboard/utils/normalizeclipboarddata\n */\n\n/**\n * Removes some popular browser quirks out of the clipboard data (HTML).\n *\n * @param {String} data The HTML data to normalize.\n * @returns {String} Normalized HTML.\n */\nexport default function normalizeClipboardData( data ) {\n\treturn data\n\t\t.replace( /<span(?: class=\"Apple-converted-space\"|)>(\\s+)<\\/span>/g, ( fullMatch, spaces ) => {\n\t\t\t// Handle the most popular and problematic case when even a single space becomes an nbsp;.\n\t\t\t// Decode those to normal spaces. Read more in https://github.com/ckeditor/ckeditor5-clipboard/issues/2.\n\t\t\tif ( spaces.length == 1 ) {\n\t\t\t\treturn ' ';\n\t\t\t}\n\n\t\t\treturn spaces;\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module clipboard/utils/plaintexttohtml\n */\n\n/**\n * Converts plain text to its HTML-ized version.\n *\n * @param {String} text The plain text to convert.\n * @returns {String} HTML generated from the plain text.\n */\nexport default function plainTextToHtml( text ) {\n\ttext = text\n\t\t// Encode <>.\n\t\t.replace( /</g, '&lt;' )\n\t\t.replace( />/g, '&gt;' )\n\t\t// Creates paragraphs for double line breaks and change single line breaks to <br>s.\n\t\t.replace( /\\n\\n/g, '</p><p>' )\n\t\t.replace( /\\n/g, '<br>' )\n\t\t// Preserve trailing spaces (only the first and last one – the rest is handled below).\n\t\t.replace( /^\\s/, '&nbsp;' )\n\t\t.replace( /\\s$/, '&nbsp;' )\n\t\t// Preserve other subsequent spaces now.\n\t\t.replace( /\\s\\s/g, ' &nbsp;' );\n\n\tif ( text.indexOf( '</p><p>' ) > -1 ) {\n\t\t// If we created paragraphs above, add the trailing ones.\n\t\ttext = `<p>${ text }</p>`;\n\t}\n\n\t// TODO:\n\t// * What about '\\nfoo' vs ' foo'?\n\n\treturn text;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module core/command\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * The base class for CKEditor commands.\n *\n * Commands are the main way to manipulate editor contents and state. They are mostly used by UI elements (or by other\n * commands) to make changes in the model. Commands are available in every part of code that has access to\n * the {@link module:core/editor/editor~Editor editor} instance.\n *\n * Instances of registered commands can be retrieved from {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n * The easiest way to execute a command is through {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n *\n * By default commands are disabled when the editor is in {@link module:core/editor/editor~Editor#isReadOnly read-only} mode.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Command {\n\t/**\n\t * Creates a new `Command` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor on which this command will be used.\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * The editor on which this command will be used.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor}\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * The value of the command. A concrete command class should define what it represents for it.\n\t\t *\n\t\t * For example, the `'bold'` command's value indicates whether the selection starts in a bolded text.\n\t\t * And the value of the `'link'` command may be an object with links details.\n\t\t *\n\t\t * It is possible for a command to have no value (e.g. for stateless actions such as `'imageUpload'`).\n\t\t *\n\t\t * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member #value\n\t\t */\n\t\tthis.set( 'value', undefined );\n\n\t\t/**\n\t\t * Flag indicating whether a command is enabled or disabled.\n\t\t * A disabled command will do nothing when executed.\n\t\t *\n\t\t * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n\t\t *\n\t\t * It is possible to disable a command from \"outside\". For instance, in your integration you may want to disable\n\t\t * a certain set of commands for the time being. To do that, you can use the fact that `isEnabled` is observable\n\t\t * and it fires the `set:isEnabled` event every time anyone tries to modify its value:\n\t\t *\n\t\t *\t\tfunction disableCommand( cmd ) {\n\t\t *\t\t\tcmd.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n\t\t *\n\t\t *\t\t\tcmd.isEnabled = false;\n\t\t *\n\t\t *\t\t\t// Make it possible to enable the command again.\n\t\t *\t\t\treturn () => {\n\t\t *\t\t\t\tcmd.off( 'set:isEnabled', forceDisable );\n\t\t *\t\t\t\tcmd.refresh();\n\t\t *\t\t\t};\n\t\t *\n\t\t *\t\t\tfunction forceDisable( evt ) {\n\t\t *\t\t\t\tevt.return = false;\n\t\t *\t\t\t\tevt.stop();\n\t\t *\t\t\t}\n\t\t *\t\t}\n\t\t *\n\t\t *\t\t// Usage:\n\t\t *\n\t\t *\t\t// Disabling the command.\n\t\t *\t\tconst enableBold = disableCommand( editor.commands.get( 'bold' ) );\n\t\t *\n\t\t *\t\t// Enabling the command again.\n\t\t *\t\tenableBold();\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\t\tthis.set( 'isEnabled', false );\n\n\t\tthis.decorate( 'execute' );\n\n\t\t// By default every command is refreshed when changes are applied to the model.\n\t\tthis.listenTo( this.editor.model.document, 'change', () => {\n\t\t\tthis.refresh();\n\t\t} );\n\n\t\tthis.on( 'execute', evt => {\n\t\t\tif ( !this.isEnabled ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\n\t\t// By default commands are disabled when the editor is in read-only mode.\n\t\tthis.listenTo( editor, 'change:isReadOnly', ( evt, name, value ) => {\n\t\t\tif ( value ) {\n\t\t\t\tthis.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n\t\t\t\tthis.isEnabled = false;\n\t\t\t} else {\n\t\t\t\tthis.off( 'set:isEnabled', forceDisable );\n\t\t\t\tthis.refresh();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} properties\n\t * in this method.\n\t *\n\t * This method is automatically called when\n\t * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.\n\t */\n\trefresh() {\n\t\tthis.isEnabled = true;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute `editor.execute()`}\n\t * to the command.\n\t *\n\t * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).\n\t * This behavior is implemented by a high priority listener to the {@link #event:execute} event.\n\t *\n\t * In order to see how to disable a command from \"outside\" see the {@link #isEnabled} documentation.\n\t *\n\t * @fires execute\n\t */\n\texecute() {}\n\n\t/**\n\t * Destroys the command.\n\t */\n\tdestroy() {\n\t\tthis.stopListening();\n\t}\n\n\t/**\n\t * Event fired by the {@link #execute} method. The command action is a listener to this event so it's\n\t * possible to change/cancel the behavior of the command by listening to this event.\n\t *\n\t * See {@link module:utils/observablemixin~ObservableMixin.decorate} for more information and samples.\n\t *\n\t * **Note:** This event is fired even if command is disabled. However, it is automatically blocked\n\t * by a high priority listener in order to prevent command execution.\n\t *\n\t * @event execute\n\t */\n}\n\nmix( Command, ObservableMixin );\n\n// Helper function that forces command to be disabled.\nfunction forceDisable( evt ) {\n\tevt.return = false;\n\tevt.stop();\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module enter/entercommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\n/**\n * Enter command. It is used by the {@link module:enter/enter~Enter Enter feature} to handle the <kbd>Enter</kbd> key.\n *\n * @extends module:core/command~Command\n */\nexport default class EnterCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tenterBlock( this.editor.model, writer, doc.selection, model.schema );\n\t\t\tthis.fire( 'afterExecute', { writer } );\n\t\t} );\n\t}\n}\n\n// Creates a new block in the way that the <kbd>Enter</kbd> key is expected to work.\n//\n// @param {module:engine/model~Model} model\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// Selection on which the action should be performed.\n// @param {module:engine/model/schema~Schema} schema\nfunction enterBlock( model, writer, selection, schema ) {\n\tconst isSelectionEmpty = selection.isCollapsed;\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\n\t// Don't touch the roots and other limit elements.\n\tif ( schema.isLimit( startElement ) || schema.isLimit( endElement ) ) {\n\t\t// Delete the selected content but only if inside a single limit element.\n\t\t// Abort, when crossing limit elements boundary (e.g. <limit1>x[x</limit1>donttouchme<limit2>y]y</limit2>).\n\t\t// This is an edge case and it's hard to tell what should actually happen because such a selection\n\t\t// is not entirely valid.\n\t\tif ( !isSelectionEmpty && startElement == endElement ) {\n\t\t\tmodel.deleteContent( selection );\n\t\t}\n\n\t\treturn;\n\t}\n\n\tif ( isSelectionEmpty ) {\n\t\tsplitBlock( writer, range.start );\n\t} else {\n\t\tconst leaveUnmerged = !( range.start.isAtStart && range.end.isAtEnd );\n\t\tconst isContainedWithinOneElement = ( startElement == endElement );\n\n\t\tmodel.deleteContent( selection, { leaveUnmerged } );\n\n\t\tif ( leaveUnmerged ) {\n\t\t\t// Partially selected elements.\n\t\t\t//\n\t\t\t// <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x</h><h>^x</h>\n\t\t\tif ( isContainedWithinOneElement ) {\n\t\t\t\tsplitBlock( writer, selection.focus );\n\t\t\t}\n\t\t\t// Selection over multiple elements.\n\t\t\t//\n\t\t\t// <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n\t\t\telse {\n\t\t\t\twriter.setSelection( endElement, 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction splitBlock( writer, splitPos ) {\n\twriter.split( splitPos );\n\twriter.setSelection( splitPos.parent.nextSibling, 0 );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module enter/enterobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Enter observer introduces the {@link module:engine/view/document~Document#event:enter} event.\n *\n * @extends module:engine/view/observer~Observer\n */\nexport default class EnterObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst doc = this.document;\n\n\t\tdoc.on( 'keydown', ( evt, data ) => {\n\t\t\tif ( this.isEnabled && data.keyCode == keyCodes.enter ) {\n\t\t\t\t// Save the event object to check later if it was stopped or not.\n\t\t\t\tlet event;\n\t\t\t\tdoc.once( 'enter', evt => ( event = evt ), { priority: 'highest' } );\n\n\t\t\t\tdoc.fire( 'enter', new DomEventData( doc, data.domEvent, {\n\t\t\t\t\tisSoft: data.shiftKey\n\t\t\t\t} ) );\n\n\t\t\t\t// Stop `keydown` event if `enter` event was stopped.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5/issues/753\n\t\t\t\tif ( event && event.stop.called ) {\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {}\n}\n\n/**\n * Event fired when the user presses the <kbd>Enter</kbd> key.\n *\n * Note: This event is fired by the {@link module:enter/enterobserver~EnterObserver observer}\n * (usually registered by the {@link module:enter/enter~Enter Enter feature} and\n * {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature}).\n *\n * @event module:engine/view/document~Document#event:enter\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {Boolean} data.isSoft Whether it's a soft enter (<kbd>Shift</kbd>+<kbd>Enter</kbd>) or hard enter (<kbd>Enter</kbd>).\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module enter/enter\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport EnterCommand from './entercommand';\nimport EnterObserver from './enterobserver';\n\n/**\n * This plugin handles the <kbd>Enter</kbd> key (hard line break) in the editor.\n *\n * See also the {@link module:enter/shiftenter~ShiftEnter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Enter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Enter';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tview.addObserver( EnterObserver );\n\n\t\teditor.commands.add( 'enter', new EnterCommand( editor ) );\n\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tdata.preventDefault();\n\n\t\t\t// The soft enter key is handled by the ShiftEnter plugin.\n\t\t\tif ( data.isSoft ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditor.execute( 'enter' );\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\t}\n}\n","/**\n * @module enter/shiftentercommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\n/**\n * ShiftEnter command. It is used by the {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature} to handle\n * the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke.\n *\n * @extends module:core/command~Command\n */\nexport default class ShiftEnterCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tsoftBreakAction( model, writer, doc.selection );\n\t\t\tthis.fire( 'afterExecute', { writer } );\n\t\t} );\n\t}\n\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.isEnabled = isEnabled( model.schema, doc.selection );\n\t}\n}\n\n// Checks whether the ShiftEnter command should be enabled in the specified selection.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\nfunction isEnabled( schema, selection ) {\n\t// At this moment it is okay to support single range selections only.\n\t// But in the future we may need to change that.\n\tif ( selection.rangeCount > 1 ) {\n\t\treturn false;\n\t}\n\n\tconst anchorPos = selection.anchor;\n\n\t// Check whether the break element can be inserted in the current selection anchor.\n\tif ( !anchorPos || !schema.checkChild( anchorPos, 'softBreak' ) ) {\n\t\treturn false;\n\t}\n\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\n\t// Do not modify the content if selection is cross-limit elements.\n\tif ( ( isInsideLimitElement( startElement, schema ) || isInsideLimitElement( endElement, schema ) ) && startElement !== endElement ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// Creates a break in the way that the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke is expected to work.\n//\n// @param {module:engine/model~Model} model\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// Selection on which the action should be performed.\nfunction softBreakAction( model, writer, selection ) {\n\tconst isSelectionEmpty = selection.isCollapsed;\n\tconst range = selection.getFirstRange();\n\tconst startElement = range.start.parent;\n\tconst endElement = range.end.parent;\n\tconst isContainedWithinOneElement = ( startElement == endElement );\n\n\tif ( isSelectionEmpty ) {\n\t\tinsertBreak( writer, range.end );\n\t} else {\n\t\tconst leaveUnmerged = !( range.start.isAtStart && range.end.isAtEnd );\n\t\tmodel.deleteContent( selection, { leaveUnmerged } );\n\n\t\t// Selection within one element:\n\t\t//\n\t\t// <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x<br>^x</h>\n\t\tif ( isContainedWithinOneElement ) {\n\t\t\tinsertBreak( writer, selection.focus );\n\t\t}\n\t\t// Selection over multiple elements.\n\t\t//\n\t\t// <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n\t\t//\n\t\t// We chose not to insert a line break in this case because:\n\t\t//\n\t\t// * it's not a very common scenario,\n\t\t// * it actually surprised me when I saw the \"expected behavior\" in real life.\n\t\t//\n\t\t// It's ok if the user will need to be more specific where they want the <br> to be inserted.\n\t\telse {\n\t\t\t// Move the selection to the 2nd element (last step of the example above).\n\t\t\tif ( leaveUnmerged ) {\n\t\t\t\twriter.setSelection( endElement, 0 );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction insertBreak( writer, position ) {\n\tconst breakLineElement = writer.createElement( 'softBreak' );\n\n\twriter.insert( breakLineElement, position );\n\twriter.setSelection( breakLineElement, 'after' );\n}\n\n// Checks whether the specified `element` is a child of the limit element.\n//\n// Checking whether the `<p>` element is inside a limit element:\n//   - <$root><p>Text.</p></$root> => false\n//   - <$root><limitElement><p>Text</p></limitElement></$root> => true\n//\n// @param {module:engine/model/element~Element} element\n// @param {module:engine/schema~Schema} schema\n// @returns {Boolean}\nfunction isInsideLimitElement( element, schema ) {\n\t// `$root` is a limit element but in this case is an invalid element.\n\tif ( element.is( 'rootElement' ) ) {\n\t\treturn false;\n\t}\n\n\treturn schema.isLimit( element ) || isInsideLimitElement( element.parent, schema );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module enter/shiftenter\n */\n\nimport ShiftEnterCommand from './shiftentercommand';\nimport EnterObserver from './enterobserver';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { upcastElementToElement } from '@ckeditor/ckeditor5-engine/src/conversion/upcast-converters';\nimport { downcastElementToElement } from '@ckeditor/ckeditor5-engine/src/conversion/downcast-converters';\n\n/**\n * This plugin handles the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke (soft line break) in the editor.\n *\n * See also the {@link module:enter/enter~Enter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ShiftEnter extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ShiftEnter';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst conversion = editor.conversion;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t// Configure the schema.\n\t\tschema.register( 'softBreak', {\n\t\t\tallowWhere: '$text'\n\t\t} );\n\n\t\t// Configure converters.\n\t\tconversion.for( 'upcast' )\n\t\t\t.add( upcastElementToElement( {\n\t\t\t\tmodel: 'softBreak',\n\t\t\t\tview: 'br'\n\t\t\t} ) );\n\n\t\tconversion.for( 'downcast' )\n\t\t\t.add( downcastElementToElement( {\n\t\t\t\tmodel: 'softBreak',\n\t\t\t\tview: ( modelElement, viewWriter ) => viewWriter.createEmptyElement( 'br' )\n\t\t\t} ) );\n\n\t\tview.addObserver( EnterObserver );\n\n\t\teditor.commands.add( 'shiftEnter', new ShiftEnterCommand( editor ) );\n\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tdata.preventDefault();\n\n\t\t\t// The hard enter key is handled by the Enter plugin.\n\t\t\tif ( !data.isSoft ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditor.execute( 'shiftEnter' );\n\t\t\tview.scrollToTheSelection();\n\t\t}, { priority: 'low' } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/utils/changebuffer\n */\n\n/**\n * Change buffer allows to group atomic changes (like characters that have been typed) into\n * {@link module:engine/model/batch~Batch batches}.\n *\n * Batches represent single undo steps, hence changes added to one single batch are undone together.\n *\n * The buffer has a configurable limit of atomic changes that it can accommodate. After the limit was\n * exceeded (see {@link ~ChangeBuffer#input}), a new batch is created in {@link ~ChangeBuffer#batch}.\n *\n * To use the change buffer you need to let it know about the number of changes that were added to the batch:\n *\n *\t\tconst buffer = new ChangeBuffer( model, LIMIT );\n *\n *\t\t// Later on in your feature:\n *\t\tbuffer.batch.insert( pos, insertedCharacters );\n *\t\tbuffer.input( insertedCharacters.length );\n *\n */\nexport default class ChangeBuffer {\n\t/**\n\t * Creates a new instance of the change buffer.\n\t *\n\t * @param {module:engine/model/model~Model} model\n\t * @param {Number} [limit=20] The maximum number of atomic changes which can be contained in one batch.\n\t */\n\tconstructor( model, limit = 20 ) {\n\t\t/**\n\t\t * The model instance.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model} #model\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The number of atomic changes in the buffer. Once it exceeds the {@link #limit},\n\t\t * the {@link #batch batch} is set to a new one.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #size\n\t\t */\n\t\tthis.size = 0;\n\n\t\t/**\n\t\t * The maximum number of atomic changes which can be contained in one batch.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number} #limit\n\t\t */\n\t\tthis.limit = limit;\n\n\t\t/**\n\t\t * Whether the buffer is locked. A locked buffer cannot be reset unless it gets unlocked.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isLocked\n\t\t */\n\t\tthis.isLocked = false;\n\n\t\t// The function to be called in order to notify the buffer about batches which appeared in the document.\n\t\t// The callback will check whether it is a new batch and in that case the buffer will be flushed.\n\t\t//\n\t\t// The reason why the buffer needs to be flushed whenever a new batch appears is that the changes added afterwards\n\t\t// should be added to a new batch. For instance, when the  user types, then inserts an image, and then types again,\n\t\t// the characters typed after inserting the image should be added to a different batch than the characters typed before.\n\t\tthis._changeCallback = ( evt, batch ) => {\n\t\t\tif ( batch.type != 'transparent' && batch !== this._batch ) {\n\t\t\t\tthis._reset( true );\n\t\t\t}\n\t\t};\n\n\t\tthis._selectionChangeCallback = () => {\n\t\t\tthis._reset();\n\t\t};\n\n\t\tthis.model.document.on( 'change', this._changeCallback );\n\n\t\tthis.model.document.selection.on( 'change:range', this._selectionChangeCallback );\n\t\tthis.model.document.selection.on( 'change:attribute', this._selectionChangeCallback );\n\n\t\t/**\n\t\t * The current batch instance.\n\t\t *\n\t\t * @private\n\t\t * @member #_batch\n\t\t */\n\n\t\t/**\n\t\t * The callback to document the change event which later needs to be removed.\n\t\t *\n\t\t * @private\n\t\t * @member #_changeCallback\n\t\t */\n\n\t\t/**\n\t\t * The callback to document selection `change:attribute` and `change:range` events which resets the buffer.\n\t\t *\n\t\t * @private\n\t\t * @member #_selectionChangeCallback\n\t\t */\n\t}\n\n\t/**\n\t * The current batch to which a feature should add its operations. Once the {@link #size}\n\t * is reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @type {module:engine/model/batch~Batch}\n\t */\n\tget batch() {\n\t\tif ( !this._batch ) {\n\t\t\tthis._batch = this.model.createBatch();\n\t\t}\n\n\t\treturn this._batch;\n\t}\n\n\t/**\n\t * The input number of changes into the buffer. Once the {@link #size} is\n\t * reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @param {Number} changeCount The number of atomic changes to input.\n\t */\n\tinput( changeCount ) {\n\t\tthis.size += changeCount;\n\n\t\tif ( this.size >= this.limit ) {\n\t\t\tthis._reset( true );\n\t\t}\n\t}\n\n\t/**\n\t * Locks the buffer.\n\t */\n\tlock() {\n\t\tthis.isLocked = true;\n\t}\n\n\t/**\n\t * Unlocks the buffer.\n\t */\n\tunlock() {\n\t\tthis.isLocked = false;\n\t}\n\n\t/**\n\t * Destroys the buffer.\n\t */\n\tdestroy() {\n\t\tthis.model.document.off( 'change', this._changeCallback );\n\t\tthis.model.document.selection.off( 'change:range', this._selectionChangeCallback );\n\t\tthis.model.document.selection.off( 'change:attribute', this._selectionChangeCallback );\n\t}\n\n\t/**\n\t * Resets the change buffer.\n\t *\n\t * @private\n\t * @param {Boolean} [ignoreLock] Whether internal lock {@link #isLocked} should be ignored.\n\t */\n\t_reset( ignoreLock ) {\n\t\tif ( !this.isLocked || ignoreLock ) {\n\t\t\tthis._batch = null;\n\t\t\tthis.size = 0;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/inputcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport ChangeBuffer from './utils/changebuffer';\n\n/**\n * The input command. Used by the {@link module:typing/input~Input input feature} to handle typing.\n *\n * @extends module:core/command~Command\n */\nexport default class InputCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {Number} undoStepSize The maximum number of atomic changes\n\t * which can be contained in one batch in the command buffer.\n\t */\n\tconstructor( editor, undoStepSize ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Typing's change buffer used to group subsequent changes into batches.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {module:typing/utils/changebuffer~ChangeBuffer} #_buffer\n\t\t */\n\t\tthis._buffer = new ChangeBuffer( editor.model, undoStepSize );\n\t}\n\n\t/**\n\t * The current change buffer.\n\t *\n\t * @type {module:typing/utils/changebuffer~ChangeBuffer}\n\t */\n\tget buffer() {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis._buffer.destroy();\n\t}\n\n\t/**\n\t * Executes the input command. It replaces the content within the given range with the given text.\n\t * Replacing is a two step process, first the content within the range is removed and then the new text is inserted\n\t * at the beginning of the range (which after the removal is a collapsed range).\n\t *\n\t * @fires execute\n\t * @param {Object} [options] The command options.\n\t * @param {String} [options.text=''] The text to be inserted.\n\t * @param {module:engine/model/range~Range} [options.range] The range in which the text is inserted. Defaults\n\t * to the first range in the current selection.\n\t * @param {module:engine/model/range~Range} [options.resultRange] The range where the selection\n\t * should be placed after the insertion. If not specified, the selection will be placed right after\n\t * the inserted text.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst text = options.text || '';\n\t\tconst textInsertions = text.length;\n\t\tconst range = options.range || doc.selection.getFirstRange();\n\t\tconst resultRange = options.resultRange;\n\n\t\tmodel.enqueueChange( this._buffer.batch, writer => {\n\t\t\tconst isCollapsedRange = range.isCollapsed;\n\n\t\t\tthis._buffer.lock();\n\n\t\t\tif ( !isCollapsedRange ) {\n\t\t\t\twriter.remove( range );\n\t\t\t}\n\n\t\t\tif ( text ) {\n\t\t\t\twriter.insertText( text, doc.selection.getAttributes(), range.start );\n\t\t\t}\n\n\t\t\tif ( resultRange ) {\n\t\t\t\twriter.setSelection( resultRange );\n\t\t\t} else if ( isCollapsedRange ) {\n\t\t\t\t// If range was collapsed just shift the selection by the number of inserted characters.\n\t\t\t\twriter.setSelection( range.start.getShiftedBy( textInsertions ) );\n\t\t\t}\n\n\t\t\tthis._buffer.unlock();\n\n\t\t\tthis._buffer.input( textInsertions );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/utils/injectunsafekeystrokeshandling\n */\n\nimport { getCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\n/**\n * Handles keystrokes which are unsafe for typing. This handler's logic is explained\n * in https://github.com/ckeditor/ckeditor5-typing/issues/83#issuecomment-398690251.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\nexport default function injectUnsafeKeystrokesHandling( editor ) {\n\tlet latestCompositionSelection = null;\n\n\tconst model = editor.model;\n\tconst view = editor.editing.view;\n\tconst inputCommand = editor.commands.get( 'input' );\n\n\tview.document.on( 'keydown', ( evt, evtData ) => handleKeydown( evtData ), { priority: 'lowest' } );\n\n\tview.document.on( 'compositionstart', handleCompositionStart, { priority: 'lowest' } );\n\n\tview.document.on( 'compositionend', () => {\n\t\tlatestCompositionSelection = model.createSelection( model.document.selection );\n\t}, { priority: 'lowest' } );\n\n\t// Handles the keydown event. We need to guess whether such keystroke is going to result\n\t// in typing. If so, then before character insertion happens, any selected content needs\n\t// to be deleted. Otherwise the default browser deletion mechanism would be\n\t// triggered, resulting in:\n\t//\n\t// * Hundreds of mutations which could not be handled.\n\t// * But most importantly, loss of control over how the content is being deleted.\n\t//\n\t// The method is used in a low-priority listener, hence allowing other listeners (e.g. delete or enter features)\n\t// to handle the event.\n\t//\n\t// @param {module:engine/view/observer/keyobserver~KeyEventData} evtData\n\tfunction handleKeydown( evtData ) {\n\t\tconst doc = model.document;\n\t\tconst isComposing = view.document.isComposing;\n\t\tconst isSelectionUnchanged = latestCompositionSelection && latestCompositionSelection.isEqual( doc.selection );\n\n\t\t// Reset stored composition selection.\n\t\tlatestCompositionSelection = null;\n\n\t\t// By relying on the state of the input command we allow disabling the entire input easily\n\t\t// by just disabling the input command. We could’ve used here the delete command but that\n\t\t// would mean requiring the delete feature which would block loading one without the other.\n\t\t// We could also check the editor.isReadOnly property, but that wouldn't allow to block\n\t\t// the input without blocking other features.\n\t\tif ( !inputCommand.isEnabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( isSafeKeystroke( evtData ) || doc.selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If during composition, deletion should be prevented as it may remove composed sequence (#83).\n\t\tif ( isComposing && evtData.keyCode === 229 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there is a `keydown` event fired with '229' keycode it might be related\n\t\t// to recent composition. Check if selection is the same as upon ending recent composition,\n\t\t// if so do not remove selected content as it will remove composed sequence (#83).\n\t\tif ( !isComposing && evtData.keyCode === 229 && isSelectionUnchanged ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeleteSelectionContent();\n\t}\n\n\t// Handles the `compositionstart` event. It is used only in special cases to remove the contents\n\t// of a non-collapsed selection so composition itself does not result in complex mutations.\n\t//\n\t// The special case mentioned above is a situation in which the `keydown` event is fired after\n\t// `compositionstart` event. In such cases {@link #handleKeydown} cannot clear current selection\n\t// contents (because it is too late and will break the composition) so the composition handler takes care of it.\n\tfunction handleCompositionStart() {\n\t\tconst doc = model.document;\n\t\tconst isFlatSelection = doc.selection.rangeCount === 1 ? doc.selection.getFirstRange().isFlat : true;\n\n\t\t// If on `compositionstart` there is a non-collapsed selection which start and end have different parents\n\t\t// it means the `handleKeydown()` method did not remove its contents. It happens usually because\n\t\t// of different order of events (`compositionstart` before `keydown` - in Safari). In such cases\n\t\t// we need to remove selection contents on composition start (#83).\n\t\tif ( doc.selection.isCollapsed || isFlatSelection ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdeleteSelectionContent();\n\t}\n\n\tfunction deleteSelectionContent() {\n\t\tconst buffer = inputCommand.buffer;\n\n\t\tbuffer.lock();\n\n\t\tmodel.enqueueChange( buffer.batch, () => {\n\t\t\tmodel.deleteContent( model.document.selection );\n\t\t} );\n\n\t\tbuffer.unlock();\n\t}\n}\n\nconst safeKeycodes = [\n\tgetCode( 'arrowUp' ),\n\tgetCode( 'arrowRight' ),\n\tgetCode( 'arrowDown' ),\n\tgetCode( 'arrowLeft' ),\n\t9, // Tab\n\t16, // Shift\n\t17, // Ctrl\n\t18, // Alt\n\t19, // Pause\n\t20, // CapsLock\n\t27, // Escape\n\t33, // PageUp\n\t34, // PageDown\n\t35, // Home\n\t36, // End,\n\t45, // Insert,\n\t91, // Windows,\n\t93, // Menu key,\n\t144, // NumLock\n\t145, // ScrollLock,\n\t173, // Mute/Unmute\n\t174, // Volume up\n\t175, // Volume down,\n\t176, // Next song,\n\t177, // Previous song,\n\t178, // Stop,\n\t179, // Play/Pause,\n\t255 // Display brightness (increase and decrease)\n];\n\n// Function keys.\nfor ( let code = 112; code <= 135; code++ ) {\n\tsafeKeycodes.push( code );\n}\n\n// Returns `true` if a keystroke should not cause any content change caused by \"typing\".\n//\n// Note: This implementation is very simple and will need to be refined with time.\n//\n// @private\n// @param {engine.view.observer.keyObserver.KeyEventData} keyData\n// @returns {Boolean}\nfunction isSafeKeystroke( keyData ) {\n\t// Keystrokes which contain Ctrl don't represent typing.\n\tif ( keyData.ctrlKey ) {\n\t\treturn true;\n\t}\n\n\treturn safeKeycodes.includes( keyData.keyCode );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/utils/utils\n */\n\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport diffToChanges from '@ckeditor/ckeditor5-utils/src/difftochanges';\n\n/**\n * Returns true if container children have mutated or more than a single text node was changed.\n *\n * @private\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n * @returns {Boolean}\n */\nexport function containerChildrenMutated( mutations ) {\n\tif ( mutations.length == 0 ) {\n\t\treturn false;\n\t}\n\n\t// Check if there is any mutation of `children` type or any mutation that changes more than one text node.\n\tfor ( const mutation of mutations ) {\n\t\tif ( mutation.type === 'children' && !getSingleTextNodeChange( mutation ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns change made to a single text node.\n *\n * @private\n * @param {module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren} mutation\n * @returns {Object|undefined} Change object (see {@link module:utils/difftochanges~diffToChanges} output)\n * or undefined if more than a single text node was changed.\n */\nexport function getSingleTextNodeChange( mutation ) {\n\t// One new node.\n\tif ( mutation.newChildren.length - mutation.oldChildren.length != 1 ) {\n\t\treturn;\n\t}\n\n\t// Which is text.\n\tconst diffResult = diff( mutation.oldChildren, mutation.newChildren, compareChildNodes );\n\tconst changes = diffToChanges( diffResult, mutation.newChildren );\n\n\t// In case of [ delete, insert, insert ] the previous check will not exit.\n\tif ( changes.length > 1 ) {\n\t\treturn;\n\t}\n\n\tconst change = changes[ 0 ];\n\n\t// Which is text.\n\tif ( !( !!change.values[ 0 ] && change.values[ 0 ].is( 'text' ) ) ) {\n\t\treturn;\n\t}\n\n\treturn change;\n}\n\n/**\n * Checks whether two view nodes are identical, which means they are the same object\n * or contain exactly same data (in case of text nodes).\n *\n * @private\n * @param {module:engine/view/node~Node} oldChild\n * @param {module:engine/view/node~Node} newChild\n * @returns {Boolean}\n */\nexport function compareChildNodes( oldChild, newChild ) {\n\tif ( !!oldChild && oldChild.is( 'text' ) && !!newChild && newChild.is( 'text' ) ) {\n\t\treturn oldChild.data === newChild.data;\n\t} else {\n\t\treturn oldChild === newChild;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/difftochanges\n */\n\n/**\n * Creates a set of changes which need to be applied to the input in order to transform\n * it into the output. This function can be used with strings or arrays.\n *\n *\t\tconst input = Array.from( 'abc' );\n *\t\tconst output = Array.from( 'xaby' );\n *\t\tconst changes = diffToChanges( diff( input, output ), output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput.splice( change.index, 0, ...change.values );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput.splice( change.index, change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\tinput.join( '' ) == output.join( '' ); // -> true\n *\n * @param {Array.<'equal'|'insert'|'delete'>} diff Result of {@link module:utils/diff~diff}.\n * @param {String|Array} output The string or array which was passed as diff's output.\n * @returns {Array.<Object>} Set of changes (insert or delete) which need to be applied to the input\n * in order to transform it into the output.\n */\nexport default function diffToChanges( diff, output ) {\n\tconst changes = [];\n\tlet index = 0;\n\tlet lastOperation;\n\n\tdiff.forEach( change => {\n\t\tif ( change == 'equal' ) {\n\t\t\tpushLast();\n\n\t\t\tindex++;\n\t\t} else if ( change == 'insert' ) {\n\t\t\tif ( isContinuationOf( 'insert' ) ) {\n\t\t\t\tlastOperation.values.push( output[ index ] );\n\t\t\t} else {\n\t\t\t\tpushLast();\n\n\t\t\t\tlastOperation = {\n\t\t\t\t\ttype: 'insert',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalues: [ output[ index ] ]\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tindex++;\n\t\t} else /* if ( change == 'delete' ) */ {\n\t\t\tif ( isContinuationOf( 'delete' ) ) {\n\t\t\t\tlastOperation.howMany++;\n\t\t\t} else {\n\t\t\t\tpushLast();\n\n\t\t\t\tlastOperation = {\n\t\t\t\t\ttype: 'delete',\n\t\t\t\t\tindex,\n\t\t\t\t\thowMany: 1\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} );\n\n\tpushLast();\n\n\treturn changes;\n\n\tfunction pushLast() {\n\t\tif ( lastOperation ) {\n\t\t\tchanges.push( lastOperation );\n\t\t\tlastOperation = null;\n\t\t}\n\t}\n\n\tfunction isContinuationOf( expected ) {\n\t\treturn lastOperation && lastOperation.type == expected;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/utils/injecttypingmutationshandling\n */\n\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport DomConverter from '@ckeditor/ckeditor5-engine/src/view/domconverter';\n\nimport { getSingleTextNodeChange, containerChildrenMutated } from './utils';\n\n/**\n * Handles mutations caused by normal typing.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\nexport default function injectTypingMutationsHandling( editor ) {\n\teditor.editing.view.document.on( 'mutations', ( evt, mutations, viewSelection ) => {\n\t\tnew MutationHandler( editor ).handle( mutations, viewSelection );\n\t} );\n}\n\n/**\n * Helper class for translating DOM mutations into model changes.\n *\n * @private\n */\nclass MutationHandler {\n\t/**\n\t * Creates an instance of the mutation handler.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t */\n\tconstructor( editor ) {\n\t\t/**\n\t\t * Editor instance for which mutations are handled.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:core/editor/editor~Editor} #editor\n\t\t */\n\t\tthis.editor = editor;\n\n\t\t/**\n\t\t * The editing controller.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/controller/editingcontroller~EditingController} #editing\n\t\t */\n\t\tthis.editing = this.editor.editing;\n\t}\n\n\t/**\n\t * Handles given mutations.\n\t *\n\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n\t * @param {module:engine/view/selection~Selection|null} viewSelection\n\t */\n\thandle( mutations, viewSelection ) {\n\t\tif ( containerChildrenMutated( mutations ) ) {\n\t\t\tthis._handleContainerChildrenMutations( mutations, viewSelection );\n\t\t} else {\n\t\t\tfor ( const mutation of mutations ) {\n\t\t\t\t// Fortunately it will never be both.\n\t\t\t\tthis._handleTextMutation( mutation, viewSelection );\n\t\t\t\tthis._handleTextNodeInsertion( mutation );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles situations when container's children mutated during input. This can happen when\n\t * the browser is trying to \"fix\" DOM in certain situations. For example, when the user starts to type\n\t * in `<p><a href=\"\"><i>Link{}</i></a></p>`, the browser might change the order of elements\n\t * to `<p><i><a href=\"\">Link</a>x{}</i></p>`. A similar situation happens when the spell checker\n\t * replaces a word wrapped with `<strong>` with a word wrapped with a `<b>` element.\n\t *\n\t * To handle such situations, the common DOM ancestor of all mutations is converted to the model representation\n\t * and then compared with the current model to calculate the proper text change.\n\t *\n\t * Note: Single text node insertion is handled in {@link #_handleTextNodeInsertion} and text node mutation is handled\n\t * in {@link #_handleTextMutation}).\n\t *\n\t * @private\n\t * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n\t * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n\t * @param {module:engine/view/selection~Selection|null} viewSelection\n\t */\n\t_handleContainerChildrenMutations( mutations, viewSelection ) {\n\t\t// Get common ancestor of all mutations.\n\t\tconst mutationsCommonAncestor = getMutationsContainer( mutations );\n\n\t\t// Quit if there is no common ancestor.\n\t\tif ( !mutationsCommonAncestor ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domConverter = this.editor.editing.view.domConverter;\n\n\t\t// Get common ancestor in DOM.\n\t\tconst domMutationCommonAncestor = domConverter.mapViewToDom( mutationsCommonAncestor );\n\n\t\t// Create fresh DomConverter so it will not use existing mapping and convert current DOM to model.\n\t\t// This wouldn't be needed if DomConverter would allow to create fresh view without checking any mappings.\n\t\tconst freshDomConverter = new DomConverter();\n\t\tconst modelFromCurrentDom = this.editor.data.toModel(\n\t\t\tfreshDomConverter.domToView( domMutationCommonAncestor )\n\t\t).getChild( 0 );\n\n\t\t// Current model.\n\t\tconst currentModel = this.editor.editing.mapper.toModelElement( mutationsCommonAncestor );\n\n\t\t// If common ancestor is not mapped, do not do anything. It probably is a parent of another view element.\n\t\t// That means that we would need to diff model elements (see `if` below). Better return early instead of\n\t\t// trying to get a reasonable model ancestor. It will fell into the `if` below anyway.\n\t\t// This situation happens for example for lists. If `<ul>` is a common ancestor, `currentModel` is `undefined`\n\t\t// because `<ul>` is not mapped (`<li>`s are).\n\t\t// See https://github.com/ckeditor/ckeditor5/issues/718.\n\t\tif ( !currentModel ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get children from both ancestors.\n\t\tconst modelFromDomChildren = Array.from( modelFromCurrentDom.getChildren() );\n\t\tconst currentModelChildren = Array.from( currentModel.getChildren() );\n\n\t\t// Remove the last `<softBreak>` from the end of `modelFromDomChildren` if there is no `<softBreak>` in current model.\n\t\t// If the described scenario happened, it means that this is a bogus `<br />` added by a browser.\n\t\tconst lastDomChild = modelFromDomChildren[ modelFromDomChildren.length - 1 ];\n\t\tconst lastCurrentChild = currentModelChildren[ currentModelChildren.length - 1 ];\n\n\t\tif ( lastDomChild && lastDomChild.is( 'softBreak' ) && lastCurrentChild && !lastCurrentChild.is( 'softBreak' ) ) {\n\t\t\tmodelFromDomChildren.pop();\n\t\t}\n\n\t\t// Skip situations when common ancestor has any container elements.\n\t\tif ( !isSafeForTextMutation( modelFromDomChildren ) || !isSafeForTextMutation( currentModelChildren ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace &nbsp; inserted by the browser with normal space. See comment in `_handleTextMutation`.\n\t\t// Replace non-texts with any character. This is potentially dangerous but passes in manual tests. The thing is\n\t\t// that we need to take care of proper indexes so we cannot simply remove non-text elements from the content.\n\t\t// By inserting a character we keep all the real texts on their indexes.\n\t\tconst newText = modelFromDomChildren.map( item => item.is( 'text' ) ? item.data : '@' ).join( '' ).replace( /\\u00A0/g, ' ' );\n\t\tconst oldText = currentModelChildren.map( item => item.is( 'text' ) ? item.data : '@' ).join( '' ).replace( /\\u00A0/g, ' ' );\n\n\t\t// Do nothing if mutations created same text.\n\t\tif ( oldText === newText ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst diffResult = diff( oldText, newText );\n\n\t\tconst { firstChangeAt, insertions, deletions } = calculateChanges( diffResult );\n\n\t\t// Try setting new model selection according to passed view selection.\n\t\tlet modelSelectionRange = null;\n\n\t\tif ( viewSelection ) {\n\t\t\tmodelSelectionRange = this.editing.mapper.toModelRange( viewSelection.getFirstRange() );\n\t\t}\n\n\t\tconst insertText = newText.substr( firstChangeAt, insertions );\n\t\tconst removeRange = this.editor.model.createRange(\n\t\t\tthis.editor.model.createPositionAt( currentModel, firstChangeAt ),\n\t\t\tthis.editor.model.createPositionAt( currentModel, firstChangeAt + deletions )\n\t\t);\n\n\t\tthis.editor.execute( 'input', {\n\t\t\ttext: insertText,\n\t\t\trange: removeRange,\n\t\t\tresultRange: modelSelectionRange\n\t\t} );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTextMutation( mutation, viewSelection ) {\n\t\tif ( mutation.type != 'text' ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace &nbsp; inserted by the browser with normal space.\n\t\t// We want only normal spaces in the model and in the view. Renderer and DOM Converter will be then responsible\n\t\t// for rendering consecutive spaces using &nbsp;, but the model and the view has to be clear.\n\t\t// Other feature may introduce inserting non-breakable space on specific key stroke (for example shift + space).\n\t\t// However then it will be handled outside of mutations, like enter key is.\n\t\t// The replacing is here because it has to be done before `diff` and `diffToChanges` functions, as they\n\t\t// take `newText` and compare it to (cleaned up) view.\n\t\t// It could also be done in mutation observer too, however if any outside plugin would like to\n\t\t// introduce additional events for mutations, they would get already cleaned up version (this may be good or not).\n\t\tconst newText = mutation.newText.replace( /\\u00A0/g, ' ' );\n\t\t// To have correct `diffResult`, we also compare view node text data with &nbsp; replaced by space.\n\t\tconst oldText = mutation.oldText.replace( /\\u00A0/g, ' ' );\n\n\t\tconst diffResult = diff( oldText, newText );\n\n\t\tconst { firstChangeAt, insertions, deletions } = calculateChanges( diffResult );\n\n\t\t// Try setting new model selection according to passed view selection.\n\t\tlet modelSelectionRange = null;\n\n\t\tif ( viewSelection ) {\n\t\t\tmodelSelectionRange = this.editing.mapper.toModelRange( viewSelection.getFirstRange() );\n\t\t}\n\n\t\t// Get the position in view and model where the changes will happen.\n\t\tconst viewPos = this.editing.view.createPositionAt( mutation.node, firstChangeAt );\n\t\tconst modelPos = this.editing.mapper.toModelPosition( viewPos );\n\t\tconst removeRange = this.editor.model.createRange( modelPos, modelPos.getShiftedBy( deletions ) );\n\t\tconst insertText = newText.substr( firstChangeAt, insertions );\n\n\t\tthis.editor.execute( 'input', {\n\t\t\ttext: insertText,\n\t\t\trange: removeRange,\n\t\t\tresultRange: modelSelectionRange\n\t\t} );\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTextNodeInsertion( mutation ) {\n\t\tif ( mutation.type != 'children' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst change = getSingleTextNodeChange( mutation );\n\t\tconst viewPos = this.editing.view.createPositionAt( mutation.node, change.index );\n\t\tconst modelPos = this.editing.mapper.toModelPosition( viewPos );\n\t\tconst insertedText = change.values[ 0 ].data;\n\n\t\tthis.editor.execute( 'input', {\n\t\t\t// Replace &nbsp; inserted by the browser with normal space.\n\t\t\t// See comment in `_handleTextMutation`.\n\t\t\t// In this case we don't need to do this before `diff` because we diff whole nodes.\n\t\t\t// Just change &nbsp; in case there are some.\n\t\t\ttext: insertedText.replace( /\\u00A0/g, ' ' ),\n\t\t\trange: this.editor.model.createRange( modelPos )\n\t\t} );\n\t}\n}\n\n// Returns first common ancestor of all mutations that is either {@link module:engine/view/containerelement~ContainerElement}\n// or {@link module:engine/view/rootelement~RootElement}.\n//\n// @private\n// @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n// module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n// @returns {module:engine/view/containerelement~ContainerElement|engine/view/rootelement~RootElement|undefined}\nfunction getMutationsContainer( mutations ) {\n\tconst lca = mutations\n\t\t.map( mutation => mutation.node )\n\t\t.reduce( ( commonAncestor, node ) => {\n\t\t\treturn commonAncestor.getCommonAncestor( node, { includeSelf: true } );\n\t\t} );\n\n\tif ( !lca ) {\n\t\treturn;\n\t}\n\n\t// We need to look for container and root elements only, so check all LCA's\n\t// ancestors (starting from itself).\n\treturn lca.getAncestors( { includeSelf: true, parentFirst: true } )\n\t\t.find( element => element.is( 'containerElement' ) || element.is( 'rootElement' ) );\n}\n\n// Returns true if provided array contains content that won't be problematic during diffing and text mutation handling.\n//\n// @param {Array.<module:engine/model/node~Node>} children\n// @returns {Boolean}\nfunction isSafeForTextMutation( children ) {\n\treturn children.every( child => child.is( 'text' ) || child.is( 'softBreak' ) );\n}\n\n// Calculates first change index and number of characters that should be inserted and deleted starting from that index.\n//\n// @private\n// @param diffResult\n// @returns {{insertions: number, deletions: number, firstChangeAt: *}}\nfunction calculateChanges( diffResult ) {\n\t// Index where the first change happens. Used to set the position from which nodes will be removed and where will be inserted.\n\tlet firstChangeAt = null;\n\t// Index where the last change happens. Used to properly count how many characters have to be removed and inserted.\n\tlet lastChangeAt = null;\n\n\t// Get `firstChangeAt` and `lastChangeAt`.\n\tfor ( let i = 0; i < diffResult.length; i++ ) {\n\t\tconst change = diffResult[ i ];\n\n\t\tif ( change != 'equal' ) {\n\t\t\tfirstChangeAt = firstChangeAt === null ? i : firstChangeAt;\n\t\t\tlastChangeAt = i;\n\t\t}\n\t}\n\n\t// How many characters, starting from `firstChangeAt`, should be removed.\n\tlet deletions = 0;\n\t// How many characters, starting from `firstChangeAt`, should be inserted.\n\tlet insertions = 0;\n\n\tfor ( let i = firstChangeAt; i <= lastChangeAt; i++ ) {\n\t\t// If there is no change (equal) or delete, the character is existing in `oldText`. We count it for removing.\n\t\tif ( diffResult[ i ] != 'insert' ) {\n\t\t\tdeletions++;\n\t\t}\n\n\t\t// If there is no change (equal) or insert, the character is existing in `newText`. We count it for inserting.\n\t\tif ( diffResult[ i ] != 'delete' ) {\n\t\t\tinsertions++;\n\t\t}\n\t}\n\n\treturn { insertions, deletions, firstChangeAt };\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/input\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport InputCommand from './inputcommand';\n\nimport injectUnsafeKeystrokesHandling from './utils/injectunsafekeystrokeshandling';\nimport injectTypingMutationsHandling from './utils/injecttypingmutationshandling';\n\n/**\n * Handles text input coming from the keyboard or other input methods.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Input extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Input';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// TODO The above default configuration value should be defined using editor.config.define() once it's fixed.\n\t\tconst inputCommand = new InputCommand( editor, editor.config.get( 'typing.undoStep' ) || 20 );\n\n\t\teditor.commands.add( 'input', inputCommand );\n\n\t\tinjectUnsafeKeystrokesHandling( editor );\n\t\tinjectTypingMutationsHandling( editor );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/deletecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport count from '@ckeditor/ckeditor5-utils/src/count';\n\nimport ChangeBuffer from './utils/changebuffer';\n\n/**\n * The delete command. Used by the {@link module:typing/delete~Delete delete feature} to handle the <kbd>Delete</kbd> and\n * <kbd>Backspace</kbd> keys.\n *\n * @extends module:core/command~Command\n */\nexport default class DeleteCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {'forward'|'backward'} direction The directionality of the delete describing in what direction it\n\t * should consume the content when the selection is collapsed.\n\t */\n\tconstructor( editor, direction ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The directionality of the delete describing in what direction it should\n\t\t * consume the content when the selection is collapsed.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'forward'|'backward'} #direction\n\t\t */\n\t\tthis.direction = direction;\n\n\t\t/**\n\t\t * Delete's change buffer used to group subsequent changes into batches.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {typing.ChangeBuffer} #buffer\n\t\t */\n\t\tthis._buffer = new ChangeBuffer( editor.model, editor.config.get( 'typing.undoStep' ) );\n\t}\n\n\t/**\n\t * Executes the delete command. Depending on whether the selection is collapsed or not, deletes its content\n\t * or a piece of content in the {@link #direction defined direction}.\n\t *\n\t * @fires execute\n\t * @param {Object} [options] The command options.\n\t * @param {'character'} [options.unit='character'] See {@link module:engine/model/utils/modifyselection~modifySelection}'s options.\n\t * @param {Number} [options.sequence=1] A number describing which subsequent delete event it is without the key being released.\n\t * See the {@link module:engine/view/document~Document#event:delete} event data.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tmodel.enqueueChange( this._buffer.batch, writer => {\n\t\t\tthis._buffer.lock();\n\n\t\t\tconst selection = writer.createSelection( doc.selection );\n\n\t\t\t// Do not replace the whole selected content if selection was collapsed.\n\t\t\t// This prevents such situation:\n\t\t\t//\n\t\t\t// <h1></h1><p>[]</p>\t-->  <h1>[</h1><p>]</p> \t\t-->  <p></p>\n\t\t\t// starting content\t\t-->   after `modifySelection`\t-->  after `deleteContent`.\n\t\t\tconst doNotResetEntireContent = selection.isCollapsed;\n\n\t\t\t// Try to extend the selection in the specified direction.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tmodel.modifySelection( selection, { direction: this.direction, unit: options.unit } );\n\t\t\t}\n\n\t\t\t// Check if deleting in an empty editor. See #61.\n\t\t\tif ( this._shouldEntireContentBeReplacedWithParagraph( options.sequence || 1 ) ) {\n\t\t\t\tthis._replaceEntireContentWithParagraph( writer );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If selection is still collapsed, then there's nothing to delete.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet changeCount = 0;\n\n\t\t\tselection.getFirstRange().getMinimalFlatRanges().forEach( range => {\n\t\t\t\tchangeCount += count(\n\t\t\t\t\trange.getWalker( { singleCharacters: true, ignoreElementEnd: true, shallow: true } )\n\t\t\t\t);\n\t\t\t} );\n\n\t\t\tmodel.deleteContent( selection, { doNotResetEntireContent } );\n\t\t\tthis._buffer.input( changeCount );\n\n\t\t\twriter.setSelection( selection );\n\n\t\t\tthis._buffer.unlock();\n\t\t} );\n\t}\n\n\t/**\n\t * If the user keeps <kbd>Backspace</kbd> or <kbd>Delete</kbd> key pressed, the content of the current\n\t * editable will be cleared. However, this will not yet lead to resetting the remaining block to a paragraph\n\t * (which happens e.g. when the user does <kbd>Ctrl</kbd> + <kbd>A</kbd>, <kbd>Backspace</kbd>).\n\t *\n\t * But, if the user pressed the key in an empty editable for the first time,\n\t * we want to replace the entire content with a paragraph if:\n\t *\n\t * * the current limit element is empty,\n\t * * the paragraph is allowed in the limit element,\n\t * * the limit doesn't already have a paragraph inside.\n\t *\n\t * See https://github.com/ckeditor/ckeditor5-typing/issues/61.\n\t *\n\t * @private\n\t * @param {Number} sequence A number describing which subsequent delete event it is without the key being released.\n\t * @returns {Boolean}\n\t */\n\t_shouldEntireContentBeReplacedWithParagraph( sequence ) {\n\t\t// Does nothing if user pressed and held the \"Backspace\" or \"Delete\" key.\n\t\tif ( sequence > 1 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst limitElement = model.schema.getLimitElement( selection );\n\n\t\t// If a collapsed selection contains the whole content it means that the content is empty\n\t\t// (from the user perspective).\n\t\tconst limitElementIsEmpty = selection.isCollapsed && selection.containsEntireContent( limitElement );\n\n\t\tif ( !limitElementIsEmpty ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !model.schema.checkChild( limitElement, 'paragraph' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst limitElementFirstChild = limitElement.getChild( 0 );\n\n\t\t// Does nothing if the limit element already contains only a paragraph.\n\t\t// We ignore the case when paragraph might have some inline elements (<p><inlineWidget>[]</inlineWidget></p>)\n\t\t// because we don't support such cases yet and it's unclear whether inlineWidget shouldn't be a limit itself.\n\t\tif ( limitElementFirstChild && limitElementFirstChild.name === 'paragraph' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * The entire content is replaced with the paragraph. Selection is moved inside the paragraph.\n\t *\n\t * @private\n\t */\n\t_replaceEntireContentWithParagraph( writer ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst limitElement = model.schema.getLimitElement( selection );\n\t\tconst paragraph = writer.createElement( 'paragraph' );\n\n\t\twriter.remove( writer.createRangeIn( limitElement ) );\n\t\twriter.insert( paragraph, limitElement );\n\n\t\twriter.setSelection( paragraph, 0 );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/deleteobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\n/**\n * Delete observer introduces the {@link module:engine/view/document~Document#event:delete} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class DeleteObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tconst document = view.document;\n\t\tlet sequence = 0;\n\n\t\tdocument.on( 'keyup', ( evt, data ) => {\n\t\t\tif ( data.keyCode == keyCodes.delete || data.keyCode == keyCodes.backspace ) {\n\t\t\t\tsequence = 0;\n\t\t\t}\n\t\t} );\n\n\t\tdocument.on( 'keydown', ( evt, data ) => {\n\t\t\tconst deleteData = {};\n\n\t\t\tif ( data.keyCode == keyCodes.delete ) {\n\t\t\t\tdeleteData.direction = 'forward';\n\t\t\t\tdeleteData.unit = 'character';\n\t\t\t} else if ( data.keyCode == keyCodes.backspace ) {\n\t\t\t\tdeleteData.direction = 'backward';\n\t\t\t\tdeleteData.unit = 'codePoint';\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasWordModifier = env.isMac ? data.altKey : data.ctrlKey;\n\t\t\tdeleteData.unit = hasWordModifier ? 'word' : deleteData.unit;\n\t\t\tdeleteData.sequence = ++sequence;\n\n\t\t\t// Save the event object to check later if it was stopped or not.\n\t\t\tlet event;\n\t\t\tdocument.once( 'delete', evt => ( event = evt ), { priority: 'highest' } );\n\n\t\t\tdocument.fire( 'delete', new DomEventData( document, data.domEvent, deleteData ) );\n\n\t\t\t// Stop `keydown` event if `delete` event was stopped.\n\t\t\t// https://github.com/ckeditor/ckeditor5/issues/753\n\t\t\tif ( event && event.stop.called ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve() {}\n}\n\n/**\n * Event fired when the user tries to delete content (e.g. presses <kbd>Delete</kbd> or <kbd>Backspace</kbd>).\n *\n * Note: This event is fired by the {@link module:typing/deleteobserver~DeleteObserver observer}\n * (usually registered by the {@link module:typing/delete~Delete delete feature}).\n *\n * @event module:engine/view/document~Document#event:delete\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {'forward'|'delete'} data.direction The direction in which the deletion should happen.\n * @param {'character'|'word'} data.unit The \"amount\" of content that should be deleted.\n * @param {Number} data.sequence A number describing which subsequent delete event it is without the key being released.\n * If it's 2 or more it means that the key was pressed and hold.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/utils/injectandroidbackspacenutationshandling\n */\n\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\n\nimport { containerChildrenMutated } from './utils';\n\n/**\n * Handles mutations triggered by <kbd>Backspace</kbd> on Android.\n * Due to the fact that on Android `keydown` events don't have the `keyCode` set, we are not able\n * to handle backspacing directly. We need to guess that from mutations which the IME\n * on Android caused.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\nexport default function injectAndroidBackspaceMutationsHandling( editor ) {\n\tconst model = editor.model;\n\tconst view = editor.editing.view;\n\tconst selectionChangeToleranceMs = 200;\n\n\tlet previousSelection = null;\n\tlet currentSelection = model.createSelection( model.document.selection );\n\tlet latestSelectionChangeMs = Date.now();\n\n\tmodel.document.selection.on( 'change', handleSelectionChange );\n\n\tview.document.on( 'mutations', handleMutations, { priority: 'highest' } );\n\n\t// Saves current and previous selection when it changes. Saved selections are used\n\t// to remove correct piece of content when `Backspace` mutations are detected.\n\t//\n\t// @param {Object} evt\n\tfunction handleSelectionChange( evt ) {\n\t\tconst newSelection = model.createSelection( evt.source );\n\t\tif ( !currentSelection.isEqual( newSelection ) ) {\n\t\t\tpreviousSelection = currentSelection;\n\t\t\tcurrentSelection = newSelection;\n\t\t\tlatestSelectionChangeMs = Date.now();\n\t\t}\n\t}\n\n\t// Handles DOM mutations and checks if they should be processed as block elements removal mutations.\n\t//\n\t// @param {Object} evt\n\t// @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n\t// module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n\tfunction handleMutations( evt, mutations ) {\n\t\tif ( containerChildrenMutated( mutations ) && containsContainersRemoval( mutations ) ) {\n\t\t\thandleContainerRemovalMutations();\n\n\t\t\t// Stop mutations event propagation so other mutation handlers are not triggered.\n\t\t\tevt.stop();\n\t\t}\n\t}\n\n\t// Handles situations when mutations were generated by container removal.\n\t// It happens on Android devices where every typing input has `229` key code\n\t// and delete observer will not be triggered. In such cases we need to handle\n\t// container removal mutations manually.\n\tfunction handleContainerRemovalMutations() {\n\t\tif ( shouldUsePreviousSelection() ) {\n\t\t\t// If previous selection is used, update model selection in order\n\t\t\t// to use `delete` command and to make `undo` work correctly.\n\t\t\tmodel.enqueueChange( writer => {\n\t\t\t\twriter.setSelection( previousSelection );\n\t\t\t} );\n\t\t}\n\n\t\teditor.execute( 'delete' );\n\t}\n\n\t// Whether previously saved selection should be used instead of the current one to remove content.\n\t//\n\t// On Android devices when pressing backspace on non-collapsed selection, selection like:\n\t//\n\t//\t\t`<h1>[Foo</h1><p>Bar]</p>`\n\t//\n\t// is changed to:\n\t//\n\t//\t\t`<h1>Foo</h1><p>Bar[]</p>`\n\t//\n\t// even before `keypress` event, so in such cases we have to rely on previous selection to correctly process selected content.\n\t//\n\t// Previous selection will be used if:\n\t//\n\t//\t\t* current selection is collapsed (see example above),\n\t//\t\t* previous selection exists, is non-collapsed and has same ending (last position) as the current one,\n\t//\t\t* change of the selection happened not earlier than X milliseconds ago (see `selectionChangeToleranceMs`).\n\t//\n\t// The last check is needed, because user can manually collapse the selection on its current end and then press `Backspace`.\n\t// In such situations timing determines if the selection change was caused by the user or browser native behaviour.\n\t// However, this happens only if selection was collapsed by the user on the beginning of the paragraph (so mutations\n\t// still will show container removal).\n\t//\n\t// @returns {Boolean}\n\tfunction shouldUsePreviousSelection() {\n\t\treturn Date.now() - latestSelectionChangeMs < selectionChangeToleranceMs &&\n\t\t\tpreviousSelection && !previousSelection.isCollapsed && currentSelection.isCollapsed &&\n\t\t\tcurrentSelection.getLastPosition().isEqual( previousSelection.getLastPosition() );\n\t}\n}\n\n// Checks whether mutations array contains mutation generated by container/containers removal.\n// For example mutations generated on Android when pressing `backspace` on the beginning of the line:\n//\n//\t\t<h1>Header1</h1>\n//\t\t<p>{}Paragraph</p>\n//\n// are:\n//\n//\t\t[\n//\t\t\t{ newChildren: [], oldChildren: [ 'Paragraph' ], node: P, type: 'children' },\n//\t\t\t{ newChildren: [ ContainerElement ], oldChildren: [ ContainerElement, ContainerElement ], node: Root, type: 'children' },\n//\t\t\t{ newChildren: [ 'Heading 1Paragraph' ], oldChildren: [ 'Heading 1' ], node: H1, type: 'children' }\n//\t\t]\n//\n// The 1st and 3rd mutations are just changes in a text (1st - text in `p` element was removed, 3rd - text in `h2` was changed)\n// and the 2nd one shows that one `ContainerElement` was removed. We have to recognize if mutations like 2nd one are present.\n// Based on that heuristic mutations are treated as the one removing container element.\n//\n// @private\n// @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n// module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n// @returns {Boolean}\nfunction containsContainersRemoval( mutations ) {\n\tfor ( const mutation of mutations ) {\n\t\tif ( mutation.type !== 'children' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst childrenBefore = mutation.oldChildren;\n\t\tconst childrenAfter = mutation.newChildren;\n\n\t\t// Check if only containers were present before the mutation.\n\t\tif ( !hasOnlyContainers( childrenBefore ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst diffResult = diff( childrenBefore, childrenAfter );\n\n\t\t// Check if there was only removing in that mutation without any insertions.\n\t\tconst hasDelete = diffResult.some( item => item === 'delete' );\n\t\tconst hasInsert = diffResult.some( item => item === 'insert' );\n\n\t\tif ( hasDelete && !hasInsert ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n// Whether provided array contains only nodes of `containerElement` type.\n//\n// @private\n// @param {Array.<module:engine/view/node~Node>} children\n// @returns {Boolean}\nfunction hasOnlyContainers( children ) {\n\treturn children.every( child => child.is( 'containerElement' ) );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/delete\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport DeleteCommand from './deletecommand';\nimport DeleteObserver from './deleteobserver';\n\nimport injectAndroidBackspaceMutationsHandling from './utils/injectandroidbackspacemutationshandling';\n\n/**\n * The delete and backspace feature. Handles the <kbd>Delete</kbd> and <kbd>Backspace</kbd> keys in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Delete extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Delete';\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\tview.addObserver( DeleteObserver );\n\n\t\teditor.commands.add( 'forwardDelete', new DeleteCommand( editor, 'forward' ) );\n\t\teditor.commands.add( 'delete', new DeleteCommand( editor, 'backward' ) );\n\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\teditor.execute( data.direction == 'forward' ? 'forwardDelete' : 'delete', { unit: data.unit, sequence: data.sequence } );\n\t\t\tdata.preventDefault();\n\t\t\tview.scrollToTheSelection();\n\t\t} );\n\n\t\tinjectAndroidBackspaceMutationsHandling( editor );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module typing/typing\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Input from './input';\nimport Delete from './delete';\n\n/**\n * The typing feature. It handles typing.\n *\n * This is a \"glue\" plugin which loads the {@link module:typing/input~Input} and {@link module:typing/delete~Delete}\n * plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Typing extends Plugin {\n\tstatic get requires() {\n\t\treturn [ Input, Delete ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Typing';\n\t}\n}\n\n/**\n * The configuration of the typing features. Used by the features from the `@ckeditor/ckeditor5-typing` package.\n *\n * Read more in {@link module:typing/typing~TypingConfig}.\n *\n * @member {module:typing/typing~TypingConfig} module:core/editor/editorconfig~EditorConfig#typing\n */\n\n/**\n * The configuration of the typing features. Used by the typing features in `@ckeditor/ckeditor5-typing` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\ttyping: ... // Typing feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface TypingConfig\n */\n\n/**\n * The granularity of undo/redo for typing and deleting. The value `20` means (more or less) that a new undo step\n * is created every 20 characters are inserted or deleted.\n *\n * @member {Number} [module:typing/typing~TypingConfig#undoStep=20]\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/model/operation/nooperation\n */\n\nimport Operation from './operation';\n\n/**\n * Operation which is doing nothing (\"empty operation\", \"do-nothing operation\", \"noop\"). This is an operation,\n * which when executed does not change the tree model. It still has some parameters defined for transformation purposes.\n *\n * In most cases this operation is a result of transforming operations. When transformation returns\n * {@link module:engine/model/operation/nooperation~NoOperation} it means that changes done by the transformed operation\n * have already been applied.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\nexport default class NoOperation extends Operation {\n\tget type() {\n\t\treturn 'noop';\n\t}\n\n\t/**\n\t * Creates and returns an operation that has the same parameters as this operation.\n\t *\n\t * @returns {module:engine/model/operation/nooperation~NoOperation} Clone of this operation.\n\t */\n\tclone() {\n\t\treturn new NoOperation( this.baseVersion );\n\t}\n\n\t/**\n\t * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n\t *\n\t * @returns {module:engine/model/operation/nooperation~NoOperation}\n\t */\n\tgetReversed() {\n\t\treturn new NoOperation( this.baseVersion + 1 );\n\t}\n\n\t_execute() {\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get className() {\n\t\treturn 'NoOperation';\n\t}\n}\n","import InsertOperation from './insertoperation';\nimport AttributeOperation from './attributeoperation';\nimport RenameOperation from './renameoperation';\nimport MarkerOperation from './markeroperation';\nimport MoveOperation from './moveoperation';\nimport RootAttributeOperation from './rootattributeoperation';\nimport MergeOperation from './mergeoperation';\nimport SplitOperation from './splitoperation';\nimport NoOperation from './nooperation';\nimport Range from '../range';\nimport Position from '../position';\n\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport log from '@ckeditor/ckeditor5-utils/src/log';\n\nconst transformations = new Map();\n\n/**\n * @module engine/model/operation/transform\n */\n\n/**\n * Sets a transformation function to be be used to transform instances of class `OperationA` by instances of class `OperationB`.\n *\n * The `transformationFunction` is passed three parameters:\n *\n * * `a` - operation to be transformed, an instance of `OperationA`,\n * * `b` - operation to be transformed by, an instance of `OperationB`,\n * * {@link module:engine/model/operation/transform~TransformationContext `context`} - object with additional information about\n * transformation context.\n *\n * The `transformationFunction` should return transformation result, which is an array with one or multiple\n * {@link module:engine/model/operation/operation~Operation operation} instances.\n *\n * @protected\n * @param {Function} OperationA\n * @param {Function} OperationB\n * @param {Function} transformationFunction Function to use for transforming.\n */\nfunction setTransformation( OperationA, OperationB, transformationFunction ) {\n\tlet aGroup = transformations.get( OperationA );\n\n\tif ( !aGroup ) {\n\t\taGroup = new Map();\n\t\ttransformations.set( OperationA, aGroup );\n\t}\n\n\taGroup.set( OperationB, transformationFunction );\n}\n\n/**\n * Returns a previously set transformation function for transforming an instance of `OperationA` by an instance of `OperationB`.\n *\n * If no transformation was set for given pair of operations, {@link module:engine/model/operation/transform~noUpdateTransformation}\n * is returned. This means that if no transformation was set, the `OperationA` instance will not change when transformed\n * by the `OperationB` instance.\n *\n * @private\n * @param {Function} OperationA\n * @param {Function} OperationB\n * @returns {Function} Function set to transform an instance of `OperationA` by an instance of `OperationB`.\n */\nfunction getTransformation( OperationA, OperationB ) {\n\tconst aGroup = transformations.get( OperationA );\n\n\tif ( aGroup && aGroup.has( OperationB ) ) {\n\t\treturn aGroup.get( OperationB );\n\t}\n\n\treturn noUpdateTransformation;\n}\n\n/**\n * A transformation function that only clones operation to transform, without changing it.\n *\n * @private\n * @param {module:engine/model/operation/operation~Operation} a Operation to transform.\n * @returns {Array.<module:engine/model/operation/operation~Operation>}\n */\nfunction noUpdateTransformation( a ) {\n\treturn [ a ];\n}\n\n/**\n * Transforms operation `a` by operation `b`.\n *\n * @param {module:engine/model/operation/operation~Operation} a Operation to be transformed.\n * @param {module:engine/model/operation/operation~Operation} b Operation to transform by.\n * @param {module:engine/model/operation/transform~TransformationContext} context Transformation context for this transformation.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} Transformation result.\n */\nexport function transform( a, b, context = {} ) {\n\tconst transformationFunction = getTransformation( a.constructor, b.constructor );\n\n\ttry {\n\t\ta = a.clone();\n\n\t\treturn transformationFunction( a, b, context );\n\t} catch ( e ) {\n\t\tlog.error( 'Error during operation transformation!', e.message );\n\t\tlog.error( 'Transformed operation', a );\n\t\tlog.error( 'Operation transformed by', b );\n\t\tlog.error( 'context.aIsStrong', context.aIsStrong );\n\t\tlog.error( 'context.aWasUndone', context.aWasUndone );\n\t\tlog.error( 'context.bWasUndone', context.bWasUndone );\n\t\tlog.error( 'context.abRelation', context.abRelation );\n\t\tlog.error( 'context.baRelation', context.baRelation );\n\n\t\tthrow e;\n\t}\n}\n\n/**\n * Performs a transformation of two sets of operations - `operationsA` and `operationsB`. The transformation is two-way -\n * both transformed `operationsA` and transformed `operationsB` are returned.\n *\n * Note, that the first operation in each set should base on the same document state (\n * {@link module:engine/model/document~Document#version document version}).\n *\n * It is assumed that `operationsA` are \"more important\" during conflict resolution between two operations.\n *\n * New copies of both passed arrays and operations inside them are returned. Passed arguments are not altered.\n *\n * Base versions of the transformed operations sets are updated accordingly. For example, assume that base versions are `4`\n * and there are `3` operations in `operationsA` and `5` operations in `operationsB`. Then:\n *\n * * transformed `operationsA` will start from base version `9` (`4` base version + `5` operations B),\n * * transformed `operationsB` will start from base version `7` (`4` base version + `3` operations A).\n *\n * If no operation was broken into two during transformation, then both sets will end up with an operation that bases on version `11`:\n *\n * * transformed `operationsA` start from `9` and there are `3` of them, so the last will have `baseVersion` equal to `11`,\n * * transformed `operationsB` start from `7` and there are `5` of them, so the last will have `baseVersion` equal to `11`.\n *\n * @param {Array.<module:engine/model/operation/operation~Operation>} operationsA\n * @param {Array.<module:engine/model/operation/operation~Operation>} operationsB\n * @param {Object} options Additional transformation options.\n * @param {module:engine/model/document~Document|null} options.document Document which the operations change.\n * @param {Boolean} [options.useRelations=false] Whether during transformation relations should be used (used during undo for\n * better conflict resolution).\n * @param {Boolean} [options.padWithNoOps=false] Whether additional {@link module:engine/model/operation/nooperation~NoOperation}s\n * should be added to the transformation results to force the same last base version for both transformed sets (in case\n * if some operations got broken into multiple operations during transformation).\n * @returns {Object} Transformation result.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} return.operationsA Transformed `operationsA`.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} return.operationsB Transformed `operationsB`.\n */\nexport function transformSets( operationsA, operationsB, options ) {\n\t// Create new arrays so the originally passed arguments are not changed.\n\t// No need to clone operations, they are cloned as they are transformed.\n\toperationsA = operationsA.slice();\n\toperationsB = operationsB.slice();\n\n\t// If one of sets is empty there is simply nothing to transform, so return sets as they are.\n\tif ( operationsA.length == 0 || operationsB.length == 0 ) {\n\t\treturn { operationsA, operationsB };\n\t}\n\t//\n\t// Following is a description of transformation process:\n\t//\n\t// There are `operationsA` and `operationsB` to be transformed, both by both.\n\t//\n\t// So, suppose we have sets of two operations each: `operationsA` = `[ a1, a2 ]`, `operationsB` = `[ b1, b2 ]`.\n\t//\n\t// Remember, that we can only transform operations that base on the same context. We assert that `a1` and `b1` base on\n\t// the same context and we transform them. Then, we get `a1'` and `b1'`. `a2` bases on a context with `a1` -- `a2`\n\t// is an operation that followed `a1`. Similarly, `b2` bases on a context with `b1`.\n\t//\n\t// However, since `a1'` is a result of transformation by `b1`, `a1'` now also has a context with `b1`. This means that\n\t// we can safely transform `a1'` by `b2`. As we finish transforming `a1`, we also transformed all `operationsB`.\n\t// All `operationsB` also have context including `a1`. Now, we can properly transform `a2` by those operations.\n\t//\n\t// The transformation process can be visualized on a transformation diagram (\"diamond diagram\"):\n\t//\n\t//          [the initial state]\n\t//         [common for a1 and b1]\n\t//\n\t//                   *\n\t//                  / \\\n\t//                 /   \\\n\t//               b1     a1\n\t//               /       \\\n\t//              /         \\\n\t//             *           *\n\t//            / \\         / \\\n\t//           /   \\       /   \\\n\t//         b2    a1'   b1'    a2\n\t//         /       \\   /       \\\n\t//        /         \\ /         \\\n\t//       *           *           *\n\t//        \\         / \\         /\n\t//         \\       /   \\       /\n\t//        a1''   b2'   a2'   b1''\n\t//           \\   /       \\   /\n\t//            \\ /         \\ /\n\t//             *           *\n\t//              \\         /\n\t//               \\       /\n\t//              a2''   b2''\n\t//                 \\   /\n\t//                  \\ /\n\t//                   *\n\t//\n\t//           [the final state]\n\t//\n\t// The final state can be reached from the initial state by applying `a1`, `a2`, `b1''` and `b2''`, as well as by\n\t// applying `b1`, `b2`, `a1''`, `a2''`. Note how the operations get to a proper common state before each pair is\n\t// transformed.\n\t//\n\t// Another thing to consider is that an operation during transformation can be broken into multiple operations.\n\t// Suppose that `a1` * `b1` = `[ a11', a12' ]` (instead of `a1'` that we considered previously).\n\t//\n\t// In that case, we leave `a12'` for later and we continue transforming `a11'` until it is transformed by all `operationsB`\n\t// (in our case it is just `b2`). At this point, `b1` is transformed by \"whole\" `a1`, while `b2` is only transformed\n\t// by `a11'`. Similarly, `a12'` is only transformed by `b1`. This leads to a conclusion that we need to start transforming `a12'`\n\t// from the moment just after it was broken. So, `a12'` is transformed by `b2`. Now, \"the whole\" `a1` is transformed\n\t// by `operationsB`, while all `operationsB` are transformed by \"the whole\" `a1`. This means that we can continue with\n\t// following `operationsA` (in our case it is just `a2`).\n\t//\n\t// Of course, also `operationsB` can be broken. However, since we focus on transforming operation `a` to the end,\n\t// the only thing to do is to store both pieces of operation `b`, so that the next transformed operation `a` will\n\t// be transformed by both of them.\n\t//\n\t//                       *\n\t//                      / \\\n\t//                     /   \\\n\t//                    /     \\\n\t//                  b1       a1\n\t//                  /         \\\n\t//                 /           \\\n\t//                /             \\\n\t//               *               *\n\t//              / \\             / \\\n\t//             /  a11'         /   \\\n\t//            /     \\         /     \\\n\t//          b2       *      b1'      a2\n\t//          /       / \\     /         \\\n\t//         /       /  a12' /           \\\n\t//        /       /     \\ /             \\\n\t//       *       b2'     *               *\n\t//        \\     /       / \\             /\n\t//       a11'' /     b21'' \\           /\n\t//          \\ /       /     \\         /\n\t//           *       *      a2'     b1''\n\t//            \\     / \\       \\     /\n\t//          a12'' b22''\\       \\   /\n\t//              \\ /     \\       \\ /\n\t//               *      a2''     *\n\t//                \\       \\     /\n\t//                 \\       \\  b21'''\n\t//                  \\       \\ /\n\t//                a2'''      *\n\t//                    \\     /\n\t//                     \\  b22'''\n\t//                      \\ /\n\t//                       *\n\t//\n\t// Note, how `a1` is broken and transformed into `a11'` and `a12'`, while `b2'` got broken and transformed into `b21''` and `b22''`.\n\t//\n\t// Having all that on mind, here is an outline for the transformation process algorithm:\n\t//\n\t// 1. We have `operationsA` and `operationsB` array, which we dynamically update as the transformation process goes.\n\t//\n\t// 2. We take next (or first) operation from `operationsA` and check from which operation `b` we need to start transforming it.\n\t// All original `operationsA` are set to be transformed starting from the first operation `b`.\n\t//\n\t// 3. We take operations from `operationsB`, one by one, starting from the correct one, and transform operation `a`\n\t// by operation `b` (and vice versa). We update `operationsA` and `operationsB` by replacing the original operations\n\t// with the transformation results.\n\t//\n\t// 4. If operation is broken into multiple operations, we save all the new operations in the place of the\n\t// original operation.\n\t//\n\t// 5. Additionally, if operation `a` was broken, for the \"new\" operation, we remember from which operation `b` it should\n\t// be transformed by.\n\t//\n\t// 6. We continue transforming \"current\" operation `a` until it is transformed by all `operationsB`. Then, go to 2.\n\t// unless the last operation `a` was transformed.\n\t//\n\t// The actual implementation of the above algorithm is slightly different, as only one loop (while) is used.\n\t// The difference is that we have \"current\" `a` operation to transform and we store the index of the next `b` operation\n\t// to transform by. Each loop operates on two indexes then: index pointing to currently processed `a` operation and\n\t// index pointing to next `b` operation. Each loop is just one `a * b` + `b * a` transformation. After each loop\n\t// operation `b` index is updated. If all `b` operations were visited for the current `a` operation, we change\n\t// current `a` operation index to the next one.\n\t//\n\n\t// For each operation `a`, keeps information what is the index in `operationsB` from which the transformation should start.\n\tconst nextTransformIndex = new WeakMap();\n\n\t// For all the original `operationsA`, set that they should be transformed starting from the first of `operationsB`.\n\tfor ( const op of operationsA ) {\n\t\tnextTransformIndex.set( op, 0 );\n\t}\n\n\t// Additional data that is used for some postprocessing after the main transformation process is done.\n\tconst data = {\n\t\tnextBaseVersionA: operationsA[ operationsA.length - 1 ].baseVersion + 1,\n\t\tnextBaseVersionB: operationsB[ operationsB.length - 1 ].baseVersion + 1,\n\t\toriginalOperationsACount: operationsA.length,\n\t\toriginalOperationsBCount: operationsB.length\n\t};\n\n\tconst contextFactory = new ContextFactory( options.document, options.useRelations );\n\tcontextFactory.setOriginalOperations( operationsA );\n\tcontextFactory.setOriginalOperations( operationsB );\n\n\t// Index of currently transformed operation `a`.\n\tlet i = 0;\n\n\t// While not all `operationsA` are transformed...\n\twhile ( i < operationsA.length ) {\n\t\t// Get \"current\" operation `a`.\n\t\tconst opA = operationsA[ i ];\n\n\t\t// For the \"current\" operation `a`, get the index of the next operation `b` to transform by.\n\t\tconst indexB = nextTransformIndex.get( opA );\n\n\t\t// If operation `a` was already transformed by every operation `b`, change \"current\" operation `a` to the next one.\n\t\tif ( indexB == operationsB.length ) {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst opB = operationsB[ indexB ];\n\n\t\t// Transform `a` by `b` and `b` by `a`.\n\t\tconst newOpsA = transform( opA, opB, contextFactory.getContext( opA, opB, true ) );\n\t\tconst newOpsB = transform( opB, opA, contextFactory.getContext( opB, opA, false ) );\n\t\t// As a result we get one or more `newOpsA` and one or more `newOpsB` operations.\n\n\t\t// Update contextual information about operations.\n\t\tcontextFactory.updateRelation( opA, opB );\n\n\t\tcontextFactory.setOriginalOperations( newOpsA, opA );\n\t\tcontextFactory.setOriginalOperations( newOpsB, opB );\n\n\t\t// For new `a` operations, update their index of the next operation `b` to transform them by.\n\t\t//\n\t\t// This is needed even if there was only one result (`a` was not broken) because that information is used\n\t\t// at the beginning of this loop every time.\n\t\tfor ( const newOpA of newOpsA ) {\n\t\t\t// Acknowledge, that operation `b` also might be broken into multiple operations.\n\t\t\t//\n\t\t\t// This is why we raise `indexB` not just by 1. If `newOpsB` are multiple operations, they will be\n\t\t\t// spliced in the place of `opB`. So we need to change `transformBy` accordingly, so that an operation won't\n\t\t\t// be transformed by the same operation (part of it) again.\n\t\t\tnextTransformIndex.set( newOpA, indexB + newOpsB.length );\n\t\t}\n\n\t\t// Update `operationsA` and `operationsB` with the transformed versions.\n\t\toperationsA.splice( i, 1, ...newOpsA );\n\t\toperationsB.splice( indexB, 1, ...newOpsB );\n\t}\n\n\tif ( options.padWithNoOps ) {\n\t\t// If no-operations padding is enabled, count how many extra `a` and `b` operations were generated.\n\t\tconst brokenOperationsACount = operationsA.length - data.originalOperationsACount;\n\t\tconst brokenOperationsBCount = operationsB.length - data.originalOperationsBCount;\n\n\t\t// Then, if that number is not the same, pad `operationsA` or `operationsB` with correct number of no-ops so\n\t\t// that the base versions are equalled.\n\t\t//\n\t\t// Note that only one array will be updated, as only one of those subtractions can be greater than zero.\n\t\tpadWithNoOps( operationsA, brokenOperationsBCount - brokenOperationsACount );\n\t\tpadWithNoOps( operationsB, brokenOperationsACount - brokenOperationsBCount );\n\t}\n\n\t// Finally, update base versions of transformed operations.\n\tupdateBaseVersions( operationsA, data.nextBaseVersionB );\n\tupdateBaseVersions( operationsB, data.nextBaseVersionA );\n\n\treturn { operationsA, operationsB };\n}\n\n// Gathers additional data about operations processed during transformation. Can be used to obtain contextual information\n// about two operations that are about to be transformed. This contextual information can be used for better conflict resolution.\nclass ContextFactory {\n\t// Creates `ContextFactory` instance.\n\t//\n\t// @param {module:engine/model/document~Document} document Document which the operations change.\n\t// @param {Boolean} useRelations Whether during transformation relations should be used (used during undo for\n\t// better conflict resolution).\n\tconstructor( document, useRelations ) {\n\t\t// `model.History` instance which information about undone operations will be taken from.\n\t\tthis._history = document.history;\n\n\t\t// Whether additional context should be used.\n\t\tthis._useRelations = useRelations;\n\n\t\t// For each operation that is created during transformation process, we keep a reference to the original operation\n\t\t// which it comes from. The original operation works as a kind of \"identifier\". Every contextual information\n\t\t// gathered during transformation that we want to save for given operation, is actually saved for the original operation.\n\t\t// This way no matter if operation `a` is cloned, then transformed, even breaks, we still have access to the previously\n\t\t// gathered data through original operation reference.\n\t\tthis._originalOperations = new Map();\n\n\t\t// Relations is a double-map structure (maps in map) where for two operations we store how those operations were related\n\t\t// to each other. Those relations are evaluated during transformation process. For every transformated pair of operations\n\t\t// we keep relations between them.\n\t\tthis._relations = new Map();\n\t}\n\n\t// Sets \"original operation\" for given operations.\n\t//\n\t// During transformation process, operations are cloned, then changed, then processed again, sometimes broken into two\n\t// or multiple operations. When gathering additional data it is important that all operations can be somehow linked\n\t// so a cloned and transformed \"version\" still kept track of the data assigned earlier to it.\n\t//\n\t// The original operation object will be used as such an universal linking id. Throughout the transformation process\n\t// all cloned operations will refer to \"the original operation\" when storing and reading additional data.\n\t//\n\t// If `takeFrom` is not set, each operation from `operations` array will be assigned itself as \"the original operation\".\n\t// This should be used as an initialization step.\n\t//\n\t// If `takeFrom` is set, each operation from `operations` will be assigned the same original operation as assigned\n\t// for `takeFrom` operation. This should be used to update original operations. It should be used in a way that\n\t// `operations` are the result of `takeFrom` transformation to ensure proper \"original operation propagation\".\n\t//\n\t// @param {Array.<module:engine/model/operation/operation~Operation>} operations\n\t// @param {module:engine/model/operation/operation~Operation|null} [takeFrom=null]\n\tsetOriginalOperations( operations, takeFrom = null ) {\n\t\tconst originalOperation = takeFrom ? this._originalOperations.get( takeFrom ) : null;\n\n\t\tfor ( const operation of operations ) {\n\t\t\tthis._originalOperations.set( operation, originalOperation || operation );\n\t\t}\n\t}\n\n\t// Saves a relation between operations `opA` and `opB`.\n\t//\n\t// Relations are then later used to help solve conflicts when operations are transformed.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\tupdateRelation( opA, opB ) {\n\t\t// The use of relations is described in a bigger detail in transformation functions.\n\t\t//\n\t\t// In brief, this function, for specified pairs of operation types, checks how positions defined in those operations relate.\n\t\t// Then those relations are saved. For example, for two move operations, it is saved if one of those operations target\n\t\t// position is before the other operation source position. This kind of information gives contextual information when\n\t\t// transformation is used during undo. Similar checks are done for other pairs of operations.\n\t\t//\n\t\tswitch ( opA.constructor ) {\n\t\t\tcase MoveOperation: {\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tif ( opA.targetPosition.isEqual( opB.sourcePosition ) || opB.movedRange.containsPosition( opA.targetPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertAtSource' );\n\t\t\t\t\t\t} else if ( opA.targetPosition.isEqual( opB.deletionPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertBetween' );\n\t\t\t\t\t\t} else if ( opA.targetPosition.isAfter( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'moveTargetAfter' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase MoveOperation: {\n\t\t\t\t\t\tif ( opA.targetPosition.isEqual( opB.sourcePosition ) || opA.targetPosition.isBefore( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertBefore' );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'insertAfter' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase SplitOperation: {\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tif ( opA.splitPosition.isBefore( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'splitBefore' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase MoveOperation: {\n\t\t\t\t\t\tif ( opA.splitPosition.isEqual( opB.sourcePosition ) || opA.splitPosition.isBefore( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'splitBefore' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase MergeOperation: {\n\t\t\t\tswitch ( opB.constructor ) {\n\t\t\t\t\tcase MergeOperation: {\n\t\t\t\t\t\tif ( !opA.targetPosition.isEqual( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'mergeTargetNotMoved' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( opA.sourcePosition.isEqual( opB.sourcePosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'mergeSameElement' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tcase SplitOperation: {\n\t\t\t\t\t\tif ( opA.sourcePosition.isEqual( opB.splitPosition ) ) {\n\t\t\t\t\t\t\tthis._setRelation( opA, opB, 'splitAtSource' );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Evaluates and returns contextual information about two given operations `opA` and `opB` which are about to be transformed.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\t// @returns {module:engine/model/operation/transform~TransformationContext}\n\tgetContext( opA, opB, aIsStrong ) {\n\t\treturn {\n\t\t\taIsStrong,\n\t\t\taWasUndone: this._wasUndone( opA ),\n\t\t\tbWasUndone: this._wasUndone( opB ),\n\t\t\tabRelation: this._useRelations ? this._getRelation( opA, opB ) : null,\n\t\t\tbaRelation: this._useRelations ? this._getRelation( opB, opA ) : null\n\t\t};\n\t}\n\n\t// Returns whether given operation `op` has already been undone.\n\t//\n\t// Information whether an operation was undone gives more context when making a decision when two operations are in conflict.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} op\n\t// @returns {Boolean}\n\t_wasUndone( op ) {\n\t\t// For `op`, get its original operation. After all, if `op` is a clone (or even transformed clone) of another\n\t\t// operation, literally `op` couldn't be undone. It was just generated. If anything, it was the operation it origins\n\t\t// from which was undone. So get that original operation.\n\t\tconst originalOp = this._originalOperations.get( op );\n\n\t\t// And check with the document if the original operation was undone.\n\t\treturn originalOp.wasUndone || this._history.isUndoneOperation( originalOp );\n\t}\n\n\t// Returns a relation between `opA` and an operation which is undone by `opB`. This can be `String` value if a relation\n\t// was set earlier or `null` if there was no relation between those operations.\n\t//\n\t// This is a little tricky to understand, so let's compare it to `ContextFactory#_wasUndone`.\n\t//\n\t// When `wasUndone( opB )` is used, we check if the `opB` has already been undone. It is obvious, that the\n\t// undoing operation must happen after the undone operation. So, essentially, we have `opB`, we take document history,\n\t// we look forward in the future and ask if in that future `opB` was undone.\n\t//\n\t// Relations is a backward process to `wasUndone()`.\n\t//\n\t// Long story short - using relations is asking what happened in the past. Looking back. This time we have an undoing\n\t// operation `opB` which has undone some other operation. When there is a transformation `opA` x `opB` and there is\n\t// a conflict to solve and `opB` is an undoing operation, we can look back in the history and see what was a relation\n\t// between `opA` and the operation which `opB` undone. Basing on that relation from the past, we can now make\n\t// a better decision when resolving a conflict between two operations, because we know more about the context of\n\t// those two operations.\n\t//\n\t// This is why this function does not return a relation directly between `opA` and `opB` because we need to look\n\t// back to search for a meaningful contextual information.\n\t//\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\t// @returns {String|null}\n\t_getRelation( opA, opB ) {\n\t\t// Get the original operation. Similarly as in `wasUndone()` it is used as an universal identifier for stored data.\n\t\tconst origB = this._originalOperations.get( opB );\n\t\tconst undoneB = this._history.getUndoneOperation( origB );\n\n\t\t// If `opB` is not undoing any operation, there is no relation.\n\t\tif ( !undoneB ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst origA = this._originalOperations.get( opA );\n\t\tconst relationsA = this._relations.get( origA );\n\n\t\t// Get all relations for `opA`, and check if there is a relation with `opB`-undone-counterpart. If so, return it.\n\t\tif ( relationsA ) {\n\t\t\treturn relationsA.get( undoneB ) || null;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t// Helper function for `ContextFactory#updateRelations`.\n\t//\n\t// @private\n\t// @param {module:engine/model/operation/operation~Operation} opA\n\t// @param {module:engine/model/operation/operation~Operation} opB\n\t// @param {String} relation\n\t_setRelation( opA, opB, relation ) {\n\t\t// As always, setting is for original operations, not the clones/transformed operations.\n\t\tconst origA = this._originalOperations.get( opA );\n\t\tconst origB = this._originalOperations.get( opB );\n\n\t\tlet relationsA = this._relations.get( origA );\n\n\t\tif ( !relationsA ) {\n\t\t\trelationsA = new Map();\n\t\t\tthis._relations.set( origA, relationsA );\n\t\t}\n\n\t\trelationsA.set( origB, relation );\n\t}\n}\n\n/**\n * Holds additional contextual information about a transformed pair of operations (`a` and `b`). Those information\n * can be used for better conflict resolving.\n *\n * @typedef {Object} module:engine/model/operation/transform~TransformationContext\n *\n * @property {Boolean} aIsStrong Whether `a` is strong operation in this transformation, or weak.\n * @property {Boolean} aWasUndone Whether `a` operation was undone.\n * @property {Boolean} bWasUndone Whether `b` operation was undone.\n * @property {String|null} abRelation The relation between `a` operation and an operation undone by `b` operation.\n * @property {String|null} baRelation The relation between `b` operation and an operation undone by `a` operation.\n */\n\n/**\n * An utility function that updates {@link module:engine/model/operation/operation~Operation#baseVersion base versions}\n * of passed operations.\n *\n * The function simply sets `baseVersion` as a base version of the first passed operation and then increments it for\n * each following operation in `operations`.\n *\n * @private\n * @param {Array.<module:engine/model/operation/operation~Operation>} operations Operations to update.\n * @param {Number} baseVersion Base version to set for the first operation in `operations`.\n */\nfunction updateBaseVersions( operations, baseVersion ) {\n\tfor ( const operation of operations ) {\n\t\toperation.baseVersion = baseVersion++;\n\t}\n}\n\n/**\n * Adds `howMany` instances of {@link module:engine/model/operation/nooperation~NoOperation} to `operations` set.\n *\n * @private\n * @param {Array.<module:engine/model/operation/operation~Operation>} operations\n * @param {Number} howMany\n */\nfunction padWithNoOps( operations, howMany ) {\n\tfor ( let i = 0; i < howMany; i++ ) {\n\t\toperations.push( new NoOperation( 0 ) );\n\t}\n}\n\n// -----------------------\n\nsetTransformation( AttributeOperation, AttributeOperation, ( a, b, context ) => {\n\tif ( a.key === b.key ) {\n\t\t// If operations attributes are in conflict, check if their ranges intersect and manage them properly.\n\n\t\t// First, we want to apply change to the part of a range that has not been changed by the other operation.\n\t\tconst operations = a.range.getDifference( b.range ).map( range => {\n\t\t\treturn new AttributeOperation( range, a.key, a.oldValue, a.newValue, 0 );\n\t\t} );\n\n\t\t// Then we take care of the common part of ranges.\n\t\tconst common = a.range.getIntersection( b.range );\n\n\t\tif ( common ) {\n\t\t\t// If this operation is more important, we also want to apply change to the part of the\n\t\t\t// original range that has already been changed by the other operation. Since that range\n\t\t\t// got changed we also have to update `oldValue`.\n\t\t\tif ( context.aIsStrong ) {\n\t\t\t\toperations.push( new AttributeOperation( common, b.key, b.newValue, a.newValue, 0 ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( operations.length == 0 ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\n\t\treturn operations;\n\t} else {\n\t\t// If operations don't conflict, simply return an array containing just a clone of this operation.\n\t\treturn [ a ];\n\t}\n} );\n\nsetTransformation( AttributeOperation, InsertOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// The attribute operation range includes the position where nodes were inserted.\n\t// There are two possible scenarios: the inserted nodes were text and they should receive attributes or\n\t// the inserted nodes were elements and they should not receive attributes.\n\t//\n\tif ( a.range.start.hasSameParentAs( b.position ) && a.range.containsPosition( b.position ) ) {\n\t\t// If new nodes should not receive attributes, two separated ranges will be returned.\n\t\t// Otherwise, one expanded range will be returned.\n\t\tconst range = a.range._getTransformedByInsertion( b.position, b.howMany, !b.shouldReceiveAttributes );\n\t\tconst result = range.map( r => {\n\t\t\treturn new AttributeOperation( r, a.key, a.oldValue, a.newValue, a.baseVersion );\n\t\t} );\n\n\t\tif ( b.shouldReceiveAttributes ) {\n\t\t\t// `AttributeOperation#range` includes some newly inserted text.\n\t\t\t// The operation should also change the attribute of that text. An example:\n\t\t\t//\n\t\t\t// Bold should be applied on the following range:\n\t\t\t// <p>Fo[zb]ar</p>\n\t\t\t//\n\t\t\t// In meantime, new text is typed:\n\t\t\t// <p>Fozxxbar</p>\n\t\t\t//\n\t\t\t// Bold should be applied also on the new text:\n\t\t\t// <p>Fo[zxxb]ar</p>\n\t\t\t// <p>Fo<$text bold=\"true\">zxxb</$text>ar</p>\n\t\t\t//\n\t\t\t// There is a special case to consider here to consider.\n\t\t\t//\n\t\t\t// Consider setting an attribute with multiple possible values, for example `highlight`. The inserted text might\n\t\t\t// have already an attribute value applied and the `oldValue` property of the attribute operation might be wrong:\n\t\t\t//\n\t\t\t// Attribute `highlight=\"yellow\"` should be applied on the following range:\n\t\t\t// <p>Fo[zb]ar<p>\n\t\t\t//\n\t\t\t// In meantime, character `x` with `highlight=\"red\"` is typed:\n\t\t\t// <p>Fo[z<$text highlight=\"red\">x</$text>b]ar</p>\n\t\t\t//\n\t\t\t// In this case we cannot simply apply operation changing the attribute value from `null` to `\"yellow\"` for the whole range\n\t\t\t// because that would lead to an exception (`oldValue` is incorrect for `x`).\n\t\t\t//\n\t\t\t// We also cannot break the original range as this would mess up a scenario when there are multiple following\n\t\t\t// insert operations, because then only the first inserted character is included in those ranges:\n\t\t\t// <p>Fo[z][x][b]ar</p>   -->   <p>Fo[z][x]x[b]ar</p>   -->   <p>Fo[z][x]xx[b]ar</p>\n\t\t\t//\n\t\t\t// So, the attribute range needs be expanded, no matter what attributes are set on the inserted nodes:\n\t\t\t//\n\t\t\t// <p>Fo[z<$text highlight=\"red\">x</$text>b]ar</p>      <--- Change from `null` to `yellow`, throwing an exception.\n\t\t\t//\n\t\t\t// But before that operation would be applied, we will add an additional attribute operation that will change\n\t\t\t// attributes on the inserted nodes in a way which would make the original operation correct:\n\t\t\t//\n\t\t\t// <p>Fo[z{<$text highlight=\"red\">}x</$text>b]ar</p>    <--- Change range `{}` from `red` to `null`.\n\t\t\t// <p>Fo[zxb]ar</p>                                     <--- Now change from `null` to `yellow` is completely fine.\n\t\t\t//\n\n\t\t\t// Generate complementary attribute operation. Be sure to add it before the original operation.\n\t\t\tconst op = _getComplementaryAttributeOperations( b, a.key, a.oldValue );\n\n\t\t\tif ( op ) {\n\t\t\t\tresult.unshift( op );\n\t\t\t}\n\t\t}\n\n\t\t// If nodes should not receive new attribute, we are done here.\n\t\treturn result;\n\t}\n\n\t// If insert operation is not expanding the attribute operation range, simply transform the range.\n\ta.range = a.range._getTransformedByInsertion( b.position, b.howMany, false )[ 0 ];\n\n\treturn [ a ];\n} );\n\n/**\n * Helper function for `AttributeOperation` x `InsertOperation` (and reverse) transformation.\n *\n * For given `insertOperation` it checks the inserted node if it has an attribute `key` set to a value different\n * than `newValue`. If so, it generates an `AttributeOperation` which changes the value of `key` attribute to `newValue`.\n *\n * @private\n * @param {module:engine/model/operation/insertoperation~InsertOperation} insertOperation\n * @param {String} key\n * @param {*} newValue\n * @returns {module:engine/model/operation/attributeoperation~AttributeOperation|null}\n */\nfunction _getComplementaryAttributeOperations( insertOperation, key, newValue ) {\n\tconst nodes = insertOperation.nodes;\n\n\t// At the beginning we store the attribute value from the first node.\n\tconst insertValue = nodes.getNode( 0 ).getAttribute( key );\n\n\tif ( insertValue == newValue ) {\n\t\treturn null;\n\t}\n\n\tconst range = new Range( insertOperation.position, insertOperation.position.getShiftedBy( insertOperation.howMany ) );\n\n\treturn new AttributeOperation( range, key, insertValue, newValue, 0 );\n}\n\nsetTransformation( AttributeOperation, MergeOperation, ( a, b ) => {\n\tconst ranges = [];\n\n\t// Case 1:\n\t//\n\t// Attribute change on the merged element. In this case, the merged element was moved to the graveyard.\n\t// An additional attribute operation that will change the (re)moved element needs to be generated.\n\t//\n\tif ( a.range.start.hasSameParentAs( b.deletionPosition ) ) {\n\t\tif ( a.range.containsPosition( b.deletionPosition ) || a.range.start.isEqual( b.deletionPosition ) ) {\n\t\t\tranges.push( Range._createFromPositionAndShift( b.graveyardPosition, 1 ) );\n\t\t}\n\t}\n\n\tconst range = a.range._getTransformedByMergeOperation( b );\n\n\t// Do not add empty (collapsed) ranges to the result. `range` may be collapsed if it contained only the merged element.\n\tif ( !range.isCollapsed ) {\n\t\tranges.push( range );\n\t}\n\n\t// Create `AttributeOperation`s out of the ranges.\n\treturn ranges.map( range => {\n\t\treturn new AttributeOperation( range, a.key, a.oldValue, a.newValue, a.baseVersion );\n\t} );\n} );\n\nsetTransformation( AttributeOperation, MoveOperation, ( a, b ) => {\n\tconst ranges = _breakRangeByMoveOperation( a.range, b );\n\n\t// Create `AttributeOperation`s out of the ranges.\n\treturn ranges.map( range => new AttributeOperation( range, a.key, a.oldValue, a.newValue, a.baseVersion ) );\n} );\n\n// Helper function for `AttributeOperation` x `MoveOperation` transformation.\n//\n// Takes the passed `range` and transforms it by move operation `moveOp` in a specific way. Only top-level nodes of `range`\n// are considered to be in the range. If move operation moves nodes deep from inside of the range, those nodes won't\n// be included in the result. In other words, top-level nodes of the ranges from the result are exactly the same as\n// top-level nodes of the original `range`.\n//\n// This is important for `AttributeOperation` because, for its range, it changes only the top-level nodes. So we need to\n// track only how those nodes have been affected by `MoveOperation`.\n//\n// @private\n// @param {module:engine/model/range~Range} range\n// @param {module:engine/model/operation/moveoperation~MoveOperation} moveOp\n// @returns {Array.<module:engine/model/range~Range>}\nfunction _breakRangeByMoveOperation( range, moveOp ) {\n\tconst moveRange = Range._createFromPositionAndShift( moveOp.sourcePosition, moveOp.howMany );\n\n\t// We are transforming `range` (original range) by `moveRange` (range moved by move operation). As usual when it comes to\n\t// transforming a ranges, we may have a common part of the ranges and we may have a difference part (zero to two ranges).\n\tlet common = null;\n\tlet difference = [];\n\n\t// Let's compare the ranges.\n\tif ( moveRange.containsRange( range, true ) ) {\n\t\t// If the whole original range is moved, treat it whole as a common part. There's also no difference part.\n\t\tcommon = range;\n\t} else if ( range.start.hasSameParentAs( moveRange.start ) ) {\n\t\t// If the ranges are \"on the same level\" (in the same parent) then move operation may move exactly those nodes\n\t\t// that are changed by the attribute operation. In this case we get common part and difference part in the usual way.\n\t\tdifference = range.getDifference( moveRange );\n\t\tcommon = range.getIntersection( moveRange );\n\t} else {\n\t\t// In any other situation we assume that original range is different than move range, that is that move operation\n\t\t// moves other nodes that attribute operation change. Even if the moved range is deep inside in the original range.\n\t\t//\n\t\t// Note that this is different than in `.getIntersection` (we would get a common part in that case) and different\n\t\t// than `.getDifference` (we would get two ranges).\n\t\tdifference = [ range ];\n\t}\n\n\tconst result = [];\n\n\t// The default behaviour of `_getTransformedByMove` might get wrong results for difference part, though, so\n\t// we do it by hand.\n\tfor ( let diff of difference ) {\n\t\t// First, transform the range by removing moved nodes. Since this is a difference, this is safe, `null` won't be returned\n\t\t// as the range is different than the moved range.\n\t\tdiff = diff._getTransformedByDeletion( moveOp.sourcePosition, moveOp.howMany );\n\n\t\t// Transform also `targetPosition`.\n\t\tconst targetPosition = moveOp.getMovedRangeStart();\n\n\t\t// Spread the range only if moved nodes are inserted only between the top-level nodes of the `diff` range.\n\t\tconst spread = diff.start.hasSameParentAs( targetPosition );\n\n\t\t// Transform by insertion of moved nodes.\n\t\tdiff = diff._getTransformedByInsertion( targetPosition, moveOp.howMany, spread );\n\n\t\tresult.push( ...diff );\n\t}\n\n\t// Common part can be simply transformed by the move operation. This is because move operation will not target to\n\t// that common part (the operation would have to target inside its own moved range).\n\tif ( common ) {\n\t\tresult.push(\n\t\t\tcommon._getTransformedByMove( moveOp.sourcePosition, moveOp.targetPosition, moveOp.howMany, false )[ 0 ]\n\t\t);\n\t}\n\n\treturn result;\n}\n\nsetTransformation( AttributeOperation, SplitOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// Split node is the last node in `AttributeOperation#range`.\n\t// `AttributeOperation#range` needs to be expanded to include the new (split) node.\n\t//\n\t// Attribute `type` to be changed to `numbered` but the `listItem` is split.\n\t// <listItem type=\"bulleted\">foobar</listItem>\n\t//\n\t// After split:\n\t// <listItem type=\"bulleted\">foo</listItem><listItem type=\"bulleted\">bar</listItem>\n\t//\n\t// After attribute change:\n\t// <listItem type=\"numbered\">foo</listItem><listItem type=\"numbered\">foo</listItem>\n\t//\n\tif ( a.range.end.isEqual( b.insertionPosition ) ) {\n\t\tif ( !b.graveyardPosition ) {\n\t\t\ta.range.end.offset++;\n\t\t}\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 2:\n\t//\n\t// Split position is inside `AttributeOperation#range`, at the same level, so the nodes to change are\n\t// not going to make a flat range.\n\t//\n\t// Content with range-to-change and split position:\n\t// <p>Fo[zb^a]r</p>\n\t//\n\t// After split:\n\t// <p>Fozb</p><p>ar</p>\n\t//\n\t// Make two separate ranges containing all nodes to change:\n\t// <p>Fo[zb]</p><p>[a]r</p>\n\t//\n\tif ( a.range.start.hasSameParentAs( b.splitPosition ) && a.range.containsPosition( b.splitPosition ) ) {\n\t\tconst secondPart = a.clone();\n\n\t\tsecondPart.range = new Range(\n\t\t\tb.moveTargetPosition.clone(),\n\t\t\ta.range.end._getCombined( b.splitPosition, b.moveTargetPosition )\n\t\t);\n\n\t\ta.range.end = b.splitPosition.clone();\n\t\ta.range.end.stickiness = 'toPrevious';\n\n\t\treturn [ a, secondPart ];\n\t}\n\n\t// The default case.\n\t//\n\ta.range = a.range._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, AttributeOperation, ( a, b ) => {\n\tconst result = [ a ];\n\n\t// Case 1:\n\t//\n\t// The attribute operation range includes the position where nodes were inserted.\n\t// There are two possible scenarios: the inserted nodes were text and they should receive attributes or\n\t// the inserted nodes were elements and they should not receive attributes.\n\t//\n\t// This is a mirror scenario to the one described in `AttributeOperation` x `InsertOperation` transformation,\n\t// although this case is a little less complicated. In this case we simply need to change attributes of the\n\t// inserted nodes and that's it.\n\t//\n\tif ( a.shouldReceiveAttributes && a.position.hasSameParentAs( b.range.start ) && b.range.containsPosition( a.position ) ) {\n\t\tconst op = _getComplementaryAttributeOperations( a, b.key, b.newValue );\n\n\t\tif ( op ) {\n\t\t\tresult.push( op );\n\t\t}\n\t}\n\n\t// The default case is: do nothing.\n\t// `AttributeOperation` does not change the model tree structure so `InsertOperation` does not need to be changed.\n\t//\n\treturn result;\n} );\n\nsetTransformation( InsertOperation, InsertOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Two insert operations insert nodes at the same position. Since they are the same, it needs to be decided\n\t// what will be the order of inserted nodes. However, there is no additional information to help in that\n\t// decision. Also, when `b` will be transformed by `a`, the same order must be maintained.\n\t//\n\t// To achieve that, we will check if the operation is strong.\n\t// If it is, it won't get transformed. If it is not, it will be moved.\n\t//\n\tif ( a.position.isEqual( b.position ) && context.aIsStrong ) {\n\t\treturn [ a ];\n\t}\n\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedByInsertOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, MoveOperation, ( a, b ) => {\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedByMoveOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, SplitOperation, ( a, b ) => {\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( InsertOperation, MergeOperation, ( a, b ) => {\n\ta.position = a.position._getTransformedByMergeOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( MarkerOperation, InsertOperation, ( a, b ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = a.oldRange._getTransformedByInsertOperation( b )[ 0 ];\n\t}\n\n\tif ( a.newRange ) {\n\t\ta.newRange = a.newRange._getTransformedByInsertOperation( b )[ 0 ];\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, MarkerOperation, ( a, b, context ) => {\n\tif ( a.name == b.name ) {\n\t\tif ( context.aIsStrong ) {\n\t\t\ta.oldRange = b.newRange ? b.newRange.clone() : null;\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, MergeOperation, ( a, b ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = a.oldRange._getTransformedByMergeOperation( b );\n\t}\n\n\tif ( a.newRange ) {\n\t\ta.newRange = a.newRange._getTransformedByMergeOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, MoveOperation, ( a, b ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = Range._createFromRanges( a.oldRange._getTransformedByMoveOperation( b ) );\n\t}\n\n\tif ( a.newRange ) {\n\t\ta.newRange = Range._createFromRanges( a.newRange._getTransformedByMoveOperation( b ) );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MarkerOperation, SplitOperation, ( a, b ) => {\n\tif ( a.oldRange ) {\n\t\ta.oldRange = a.oldRange._getTransformedBySplitOperation( b );\n\t}\n\n\tif ( a.newRange ) {\n\t\ta.newRange = a.newRange._getTransformedBySplitOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( MergeOperation, InsertOperation, ( a, b ) => {\n\tif ( a.sourcePosition.hasSameParentAs( b.position ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedByInsertOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedByInsertOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( MergeOperation, MergeOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Same merge operations.\n\t//\n\t// Both operations have same source and target positions. So the element already got merged and there is\n\t// theoretically nothing to do.\n\t//\n\tif ( a.sourcePosition.isEqual( b.sourcePosition ) && a.targetPosition.isEqual( b.targetPosition ) ) {\n\t\t// There are two ways that we can provide a do-nothing operation.\n\t\t//\n\t\t// First is simply a NoOperation instance. We will use it if `b` operation was not undone.\n\t\t//\n\t\t// Second is a merge operation that has the source operation in the merged element - in the graveyard -\n\t\t// same target position and `howMany` equal to `0`. So it is basically merging an empty element from graveyard\n\t\t// which is almost the same as NoOperation.\n\t\t//\n\t\t// This way the merge operation can be later transformed by split operation\n\t\t// to provide correct undo. This will be used if `b` operation was undone (only then it is correct).\n\t\t//\n\t\tif ( !context.bWasUndone ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t} else {\n\t\t\tconst path = b.graveyardPosition.path.slice();\n\t\t\tpath.push( 0 );\n\n\t\t\ta.sourcePosition = new Position( b.graveyardPosition.root, path );\n\t\t\ta.howMany = 0;\n\n\t\t\treturn [ a ];\n\t\t}\n\t}\n\n\t// Case 2:\n\t//\n\t// Same merge source position but different target position.\n\t//\n\t// This can happen during collaboration. For example, if one client merged a paragraph to the previous paragraph\n\t// and the other person removed that paragraph and merged the same paragraph to something before:\n\t//\n\t// Client A:\n\t// <p>Foo</p><p>Bar</p><p>[]Xyz</p>\n\t// <p>Foo</p><p>BarXyz</p>\n\t//\n\t// Client B:\n\t// <p>Foo</p>[<p>Bar</p>]<p>Xyz</p>\n\t// <p>Foo</p><p>[]Xyz</p>\n\t// <p>FooXyz</p>\n\t//\n\t// In this case we need to decide where finally \"Xyz\" will land:\n\t//\n\t// <p>FooXyz</p>               graveyard: <p>Bar</p>\n\t// <p>Foo</p>                  graveyard: <p>BarXyz</p>\n\t//\n\t// Let's move it in a way so that a merge operation that does not target to graveyard is more important so that\n\t// nodes does not end up in the graveyard. It makes sense. Both for Client A and for Client B \"Xyz\" finally did not\n\t// end up in the graveyard (see above).\n\t//\n\t// If neither or both operations point to graveyard, then let `aIsStrong` decide.\n\t//\n\tif (\n\t\ta.sourcePosition.isEqual( b.sourcePosition ) && !a.targetPosition.isEqual( b.targetPosition ) &&\n\t\t!context.bWasUndone && context.abRelation != 'splitAtSource'\n\t) {\n\t\tconst aToGraveyard = a.targetPosition.root.rootName == '$graveyard';\n\t\tconst bToGraveyard = b.targetPosition.root.rootName == '$graveyard';\n\n\t\t// If `aIsWeak` it means that `a` points to graveyard while `b` doesn't. Don't move nodes then.\n\t\tconst aIsWeak = aToGraveyard && !bToGraveyard;\n\n\t\t// If `bIsWeak` it means that `b` points to graveyard while `a` doesn't. Force moving nodes then.\n\t\tconst bIsWeak = bToGraveyard && !aToGraveyard;\n\n\t\t// Force move if `b` is weak or neither operation is weak but `a` is stronger through `context.aIsStrong`.\n\t\tconst forceMove = bIsWeak || ( !aIsWeak && context.aIsStrong );\n\n\t\tif ( forceMove ) {\n\t\t\tconst sourcePosition = b.targetPosition._getTransformedByMergeOperation( b );\n\t\t\tconst targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\t\t\treturn [ new MoveOperation( sourcePosition, a.howMany, targetPosition, 0 ) ];\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.sourcePosition.hasSameParentAs( b.targetPosition ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedByMergeOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\t// Handle positions in graveyard.\n\t// If graveyard positions are same and `a` operation is strong - do not transform.\n\tif ( !a.graveyardPosition.isEqual( b.graveyardPosition ) || !context.aIsStrong ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMergeOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MergeOperation, MoveOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// The element to merge got removed.\n\t//\n\t// Merge operation does support merging elements which are not siblings. So it would not be a problem\n\t// from technical point of view. However, if the element was removed, the intention of the user deleting it\n\t// was to have it all deleted, together with its children. From user experience point of view, moving back the\n\t// removed nodes might be unexpected. This means that in this scenario we will block the merging.\n\t//\n\t// The exception of this rule would be if the remove operation was later undone.\n\t//\n\tconst removedRange = Range._createFromPositionAndShift( b.sourcePosition, b.howMany );\n\n\tif ( b.type == 'remove' && !context.bWasUndone ) {\n\t\tif ( a.deletionPosition.hasSameParentAs( b.sourcePosition ) && removedRange.containsPosition( a.sourcePosition ) ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.sourcePosition.hasSameParentAs( b.targetPosition ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\tif ( a.sourcePosition.hasSameParentAs( b.sourcePosition ) ) {\n\t\ta.howMany -= b.howMany;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedByMoveOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedByMoveOperation( b );\n\n\t// `MergeOperation` graveyard position is like `MoveOperation` target position. It is a position where element(s) will\n\t// be moved. Like in other similar cases, we need to consider the scenario when those positions are same.\n\t// Here, we will treat `MergeOperation` like it is always strong (see `InsertOperation` x `InsertOperation` for comparison).\n\t// This means that we won't transform graveyard position if it is equal to move operation target position.\n\tif ( !a.graveyardPosition.isEqual( b.targetPosition ) ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMoveOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MergeOperation, SplitOperation, ( a, b, context ) => {\n\tif ( b.graveyardPosition ) {\n\t\t// If `b` operation defines graveyard position, a node from graveyard will be moved. This means that we need to\n\t\t// transform `a.graveyardPosition` accordingly.\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByDeletion( b.graveyardPosition, 1 );\n\n\t\t// This is a scenario foreseen in `MergeOperation` x `MergeOperation`, with two identical merge operations.\n\t\t//\n\t\t// So, there was `MergeOperation` x `MergeOperation` transformation earlier. Now, `a` is a merge operation which\n\t\t// source position is in graveyard. Interestingly, split operation wants to use the node to be merged by `a`. This\n\t\t// means that `b` is undoing that merge operation from earlier, which caused `a` to be in graveyard.\n\t\t//\n\t\t// If that's the case, at this point, we will only \"fix\" `a.howMany`. It was earlier set to `0` in\n\t\t// `MergeOperation` x `MergeOperation` transformation. Later transformations in this function will change other\n\t\t// properties.\n\t\t//\n\t\tif ( a.deletionPosition.isEqual( b.graveyardPosition ) ) {\n\t\t\ta.howMany = b.howMany;\n\t\t}\n\t}\n\n\t// Case 1:\n\t//\n\t// Merge operation moves nodes to the place where split happens.\n\t// This is a classic situation when there are two paragraphs, and there is a split (enter) after the first\n\t// paragraph and there is a merge (delete) at the beginning of the second paragraph:\n\t//\n\t// <p>Foo{}</p><p>[]Bar</p>.\n\t//\n\t// Split is after `Foo`, while merge is from `Bar` to the end of `Foo`.\n\t//\n\t// State after split:\n\t// <p>Foo</p><p></p><p>Bar</p>\n\t//\n\t// Now, `Bar` should be merged to the new paragraph:\n\t// <p>Foo</p><p>Bar</p>\n\t//\n\t// Instead of merging it to the original paragraph:\n\t// <p>FooBar</p><p></p>\n\t//\n\t// This means that `targetPosition` needs to be transformed. This is the default case though.\n\t// For example, if the split would be after `F`, `targetPosition` should also be transformed.\n\t//\n\t// There are three exceptions, though, when we want to keep `targetPosition` as it was.\n\t//\n\t// First exception is when the merge target position is inside an element (not at the end, as usual). This\n\t// happens when the merge operation earlier was transformed by \"the same\" merge operation. If merge operation\n\t// targets inside the element we want to keep the original target position (and not transform it) because\n\t// we have additional context telling us that we want to merge to the original element. We can check if the\n\t// merge operation points inside element by checking what is `SplitOperation#howMany`. Since merge target position\n\t// is same as split position, if `howMany` is non-zero, it means that the merge target position is inside an element.\n\t//\n\t// Second exception is when the element to merge is in the graveyard and split operation uses it. In that case\n\t// if target position would be transformed, the merge operation would target at the source position:\n\t//\n\t// root: <p>Foo</p>\t\t\t\tgraveyard: <p></p>\n\t//\n\t// SplitOperation: root [ 0, 3 ] using graveyard [ 0 ] (howMany = 0)\n\t// MergeOperation: graveyard [ 0, 0 ] -> root [ 0, 3 ] (howMany = 0)\n\t//\n\t// Since split operation moves the graveyard node back to the root, the merge operation source position changes.\n\t// We would like to merge from the empty <p> to the \"Foo\" <p>:\n\t//\n\t// root: <p>Foo</p><p></p>\t\t\tgraveyard:\n\t//\n\t// MergeOperation#sourcePosition = root [ 1, 0 ]\n\t//\n\t// If `targetPosition` is transformed, it would become root [ 1, 0 ] as well. It has to be kept as it was.\n\t//\n\t// Third exception is connected with relations. If this happens during undo and we have explicit information\n\t// that target position has not been affected by the operation which is undone by this split then this split should\n\t// not move the target position either.\n\t//\n\tif ( a.targetPosition.isEqual( b.splitPosition ) ) {\n\t\tconst mergeInside = b.howMany != 0;\n\t\tconst mergeSplittingElement = b.graveyardPosition && a.deletionPosition.isEqual( b.graveyardPosition );\n\n\t\tif ( mergeInside || mergeSplittingElement || context.abRelation == 'mergeTargetNotMoved' ) {\n\t\t\ta.sourcePosition = a.sourcePosition._getTransformedBySplitOperation( b );\n\n\t\t\treturn [ a ];\n\t\t}\n\t}\n\n\t// Case 2:\n\t//\n\t// Merge source is at the same position as split position. This sometimes happen during undo. This merge operation\n\t// might have been earlier transformed by a merge operation which both merged the same element. See case in\n\t// `MergeOperation` x `MergeOperation` transformation. In that case, if the merge operation has been undone, the special\n\t// case is not applied.\n\t//\n\t// In this scenario the merge operation is now transformed by the split which has undone the previous merge operation.\n\t// So now we are fixing situation which was skipped in `MergeOperation` x `MergeOperation` case.\n\t//\n\tif ( a.sourcePosition.isEqual( b.splitPosition ) && ( context.abRelation == 'mergeSameElement' || a.sourcePosition.offset > 0 ) ) {\n\t\ta.sourcePosition = b.moveTargetPosition.clone();\n\t\ta.targetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\n\t\treturn [ a ];\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.sourcePosition.hasSameParentAs( b.splitPosition ) ) {\n\t\ta.howMany = b.splitPosition.offset;\n\t}\n\n\ta.sourcePosition = a.sourcePosition._getTransformedBySplitOperation( b );\n\ta.targetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( MoveOperation, InsertOperation, ( a, b ) => {\n\tconst moveRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\tconst transformed = moveRange._getTransformedByInsertOperation( b, false )[ 0 ];\n\n\ta.sourcePosition = transformed.start;\n\ta.howMany = transformed.end.offset - transformed.start.offset;\n\n\t// See `InsertOperation` x `MoveOperation` transformation for details on this case.\n\t//\n\t// In summary, both operations point to the same place, so the order of nodes needs to be decided.\n\t// `MoveOperation` is considered weaker, so it is always transformed, unless there was a certain relation\n\t// between operations.\n\t//\n\tif ( !a.targetPosition.isEqual( b.position ) ) {\n\t\ta.targetPosition = a.targetPosition._getTransformedByInsertOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( MoveOperation, MoveOperation, ( a, b, context ) => {\n\t//\n\t// Setting and evaluating some variables that will be used in special cases and default algorithm.\n\t//\n\t// Create ranges from `MoveOperations` properties.\n\tconst rangeA = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\tconst rangeB = Range._createFromPositionAndShift( b.sourcePosition, b.howMany );\n\n\t// Assign `context.aIsStrong` to a different variable, because the value may change during execution of\n\t// this algorithm and we do not want to override original `context.aIsStrong` that will be used in later transformations.\n\tlet aIsStrong = context.aIsStrong;\n\n\t// This will be used to decide the order of nodes if both operations target at the same position.\n\t// By default, use strong/weak operation mechanism.\n\tlet insertBefore = !context.aIsStrong;\n\n\t// If the relation is set, then use it to decide nodes order.\n\tif ( context.abRelation == 'insertBefore' || context.baRelation == 'insertAfter' ) {\n\t\tinsertBefore = true;\n\t} else if ( context.abRelation == 'insertAfter' || context.baRelation == 'insertBefore' ) {\n\t\tinsertBefore = false;\n\t}\n\n\t// `a.targetPosition` could be affected by the `b` operation. We will transform it.\n\tlet newTargetPosition;\n\n\tif ( a.targetPosition.isEqual( b.targetPosition ) && insertBefore ) {\n\t\tnewTargetPosition = a.targetPosition._getTransformedByDeletion(\n\t\t\tb.sourcePosition,\n\t\t\tb.howMany\n\t\t);\n\t} else {\n\t\tnewTargetPosition = a.targetPosition._getTransformedByMove(\n\t\t\tb.sourcePosition,\n\t\t\tb.targetPosition,\n\t\t\tb.howMany\n\t\t);\n\t}\n\n\t//\n\t// Special case #1 + mirror.\n\t//\n\t// Special case when both move operations' target positions are inside nodes that are\n\t// being moved by the other move operation. So in other words, we move ranges into inside of each other.\n\t// This case can't be solved reasonably (on the other hand, it should not happen often).\n\tif ( _moveTargetIntoMovedRange( a, b ) && _moveTargetIntoMovedRange( b, a ) ) {\n\t\t// Instead of transforming operation, we return a reverse of the operation that we transform by.\n\t\t// So when the results of this \"transformation\" will be applied, `b` MoveOperation will get reversed.\n\t\treturn [ b.getReversed() ];\n\t}\n\t//\n\t// End of special case #1.\n\t//\n\n\t//\n\t// Special case #2.\n\t//\n\t// Check if `b` operation targets inside `rangeA`.\n\tconst bTargetsToA = rangeA.containsPosition( b.targetPosition );\n\n\t// If `b` targets to `rangeA` and `rangeA` contains `rangeB`, `b` operation has no influence on `a` operation.\n\t// You might say that operation `b` is captured inside operation `a`.\n\tif ( bTargetsToA && rangeA.containsRange( rangeB, true ) ) {\n\t\t// There is a mini-special case here, where `rangeB` is on other level than `rangeA`. That's why\n\t\t// we need to transform `a` operation anyway.\n\t\trangeA.start = rangeA.start._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\t\trangeA.end = rangeA.end._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\n\t\treturn _makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition );\n\t}\n\n\t//\n\t// Special case #2 mirror.\n\t//\n\tconst aTargetsToB = rangeB.containsPosition( a.targetPosition );\n\n\tif ( aTargetsToB && rangeB.containsRange( rangeA, true ) ) {\n\t\t// `a` operation is \"moved together\" with `b` operation.\n\t\t// Here, just move `rangeA` \"inside\" `rangeB`.\n\t\trangeA.start = rangeA.start._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\t\trangeA.end = rangeA.end._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\n\t\treturn _makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition );\n\t}\n\t//\n\t// End of special case #2.\n\t//\n\n\t//\n\t// Special case #3 + mirror.\n\t//\n\t// `rangeA` has a node which is an ancestor of `rangeB`. In other words, `rangeB` is inside `rangeA`\n\t// but not on the same tree level. In such case ranges have common part but we have to treat it\n\t// differently, because in such case those ranges are not really conflicting and should be treated like\n\t// two separate ranges. Also we have to discard two difference parts.\n\tconst aCompB = compareArrays( a.sourcePosition.getParentPath(), b.sourcePosition.getParentPath() );\n\n\tif ( aCompB == 'prefix' || aCompB == 'extension' ) {\n\t\t// Transform `rangeA` by `b` operation and make operation out of it, and that's all.\n\t\t// Note that this is a simplified version of default case, but here we treat the common part (whole `rangeA`)\n\t\t// like a one difference part.\n\t\trangeA.start = rangeA.start._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\t\trangeA.end = rangeA.end._getTransformedByMove( b.sourcePosition, b.targetPosition, b.howMany );\n\n\t\treturn _makeMoveOperationsFromRanges( [ rangeA ], newTargetPosition );\n\t}\n\t//\n\t// End of special case #3.\n\t//\n\n\t//\n\t// Default case - ranges are on the same level or are not connected with each other.\n\t//\n\t// Modifier for default case.\n\t// Modifies `aIsStrong` flag in certain conditions.\n\t//\n\t// If only one of operations is a remove operation, we force remove operation to be the \"stronger\" one\n\t// to provide more expected results.\n\tif ( a.type == 'remove' && b.type != 'remove' && !context.aWasUndone ) {\n\t\taIsStrong = true;\n\t} else if ( a.type != 'remove' && b.type == 'remove' && !context.bWasUndone ) {\n\t\taIsStrong = false;\n\t}\n\n\t// Handle operation's source ranges - check how `rangeA` is affected by `b` operation.\n\t// This will aggregate transformed ranges.\n\tconst ranges = [];\n\n\t// Get the \"difference part\" of `a` operation source range.\n\t// This is an array with one or two ranges. Two ranges if `rangeB` is inside `rangeA`.\n\tconst difference = rangeA.getDifference( rangeB );\n\n\tfor ( const range of difference ) {\n\t\t// Transform those ranges by `b` operation. For example if `b` moved range from before those ranges, fix those ranges.\n\t\trange.start = range.start._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\t\trange.end = range.end._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\n\t\t// If `b` operation targets into `rangeA` on the same level, spread `rangeA` into two ranges.\n\t\tconst shouldSpread = compareArrays( range.start.getParentPath(), b.getMovedRangeStart().getParentPath() ) == 'same';\n\t\tconst newRanges = range._getTransformedByInsertion( b.getMovedRangeStart(), b.howMany, shouldSpread );\n\n\t\tranges.push( ...newRanges );\n\t}\n\n\t// Then, we have to manage the \"common part\" of both move ranges.\n\tconst common = rangeA.getIntersection( rangeB );\n\n\tif ( common !== null && aIsStrong ) {\n\t\t// Calculate the new position of that part of original range.\n\t\tcommon.start = common.start._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\t\tcommon.end = common.end._getCombined( b.sourcePosition, b.getMovedRangeStart() );\n\n\t\t// Take care of proper range order.\n\t\t//\n\t\t// Put `common` at appropriate place. Keep in mind that we are interested in original order.\n\t\t// Basically there are only three cases: there is zero, one or two difference ranges.\n\t\t//\n\t\t// If there is zero difference ranges, just push `common` in the array.\n\t\tif ( ranges.length === 0 ) {\n\t\t\tranges.push( common );\n\t\t}\n\t\t// If there is one difference range, we need to check whether common part was before it or after it.\n\t\telse if ( ranges.length == 1 ) {\n\t\t\tif ( rangeB.start.isBefore( rangeA.start ) || rangeB.start.isEqual( rangeA.start ) ) {\n\t\t\t\tranges.unshift( common );\n\t\t\t} else {\n\t\t\t\tranges.push( common );\n\t\t\t}\n\t\t}\n\t\t// If there are more ranges (which means two), put common part between them. This is the only scenario\n\t\t// where there could be two difference ranges so we don't have to make any comparisons.\n\t\telse {\n\t\t\tranges.splice( 1, 0, common );\n\t\t}\n\t}\n\n\tif ( ranges.length === 0 ) {\n\t\t// If there are no \"source ranges\", nothing should be changed.\n\t\t// Note that this can happen only if `aIsStrong == false` and `rangeA.isEqual( rangeB )`.\n\t\treturn [ new NoOperation( a.baseVersion ) ];\n\t}\n\n\treturn _makeMoveOperationsFromRanges( ranges, newTargetPosition );\n} );\n\nsetTransformation( MoveOperation, SplitOperation, ( a, b, context ) => {\n\tlet newTargetPosition = a.targetPosition.clone();\n\n\t// Do not transform if target position is same as split insertion position and this split comes from undo.\n\t// This should be done on relations but it is too much work for now as it would require relations working in collaboration.\n\t// We need to make a decision how we will resolve such conflict and this is less harmful way.\n\tif ( !a.targetPosition.isEqual( b.insertionPosition ) || !b.graveyardPosition || context.abRelation == 'moveTargetAfter' ) {\n\t\tnewTargetPosition = a.targetPosition._getTransformedBySplitOperation( b );\n\t}\n\n\t// Case 1:\n\t//\n\t// Last element in the moved range got split.\n\t//\n\t// In this case the default range transformation will not work correctly as the element created by\n\t// split operation would be outside the range. The range to move needs to be fixed manually.\n\t//\n\tconst moveRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\n\tif ( moveRange.end.isEqual( b.insertionPosition ) ) {\n\t\t// Do it only if this is a \"natural\" split, not a one that comes from undo.\n\t\t// If this is undo split, only `targetPosition` needs to be changed (if the move is a remove).\n\t\tif ( !b.graveyardPosition ) {\n\t\t\ta.howMany++;\n\t\t}\n\n\t\ta.targetPosition = newTargetPosition;\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 2:\n\t//\n\t// Split happened between the moved nodes. In this case two ranges to move need to be generated.\n\t//\n\t// Characters `ozba` are moved to the end of paragraph `Xyz` but split happened.\n\t// <p>F[oz|ba]r</p><p>Xyz</p>\n\t//\n\t// After split:\n\t// <p>F[oz</p><p>ba]r</p><p>Xyz</p>\n\t//\n\t// Correct ranges:\n\t// <p>F[oz]</p><p>[ba]r</p><p>Xyz</p>\n\t//\n\t// After move:\n\t// <p>F</p><p>r</p><p>Xyzozba</p>\n\t//\n\tif ( moveRange.start.hasSameParentAs( b.splitPosition ) && moveRange.containsPosition( b.splitPosition ) ) {\n\t\tlet rightRange = new Range( b.splitPosition, moveRange.end );\n\t\trightRange = rightRange._getTransformedBySplitOperation( b );\n\n\t\tconst ranges = [\n\t\t\tnew Range( moveRange.start, b.splitPosition ),\n\t\t\trightRange\n\t\t];\n\n\t\treturn _makeMoveOperationsFromRanges( ranges, newTargetPosition );\n\t}\n\n\t// Case 3:\n\t//\n\t// Move operation targets at the split position. We need to decide if the nodes should be inserted\n\t// at the end of the split element or at the beginning of the new element.\n\t//\n\tif ( a.targetPosition.isEqual( b.splitPosition ) && context.abRelation == 'insertAtSource' ) {\n\t\tnewTargetPosition = b.moveTargetPosition;\n\t}\n\n\t// Case 4:\n\t//\n\t// Move operation targets just after the split element. We need to decide if the nodes should be inserted\n\t// between two parts of split element, or after the new element.\n\t//\n\t// Split at `|`, while move operation moves `<p>Xyz</p>` and targets at `^`:\n\t// <p>Foo|bar</p>^<p>baz</p>\n\t// <p>Foo</p>^<p>bar</p><p>baz</p> or <p>Foo</p><p>bar</p>^<p>baz</p>?\n\t//\n\t// If there is no contextual information between operations (for example, they come from collaborative\n\t// editing), we don't want to put some unrelated content (move) between parts of related content (split parts).\n\t// However, if the split is from undo, in the past, the moved content might be targeting between the\n\t// split parts, meaning that was exactly user's intention:\n\t//\n\t// <p>Foo</p>^<p>bar</p>\t\t<--- original situation, in \"past\".\n\t// <p>Foobar</p>^\t\t\t\t<--- after merge target position is transformed.\n\t// <p>Foo|bar</p>^\t\t\t\t<--- then the merge is undone, and split happens, which leads us to current situation.\n\t//\n\t// In this case it is pretty clear that the intention was to put new paragraph between those nodes,\n\t// so we need to transform accordingly. We can detect this scenario thanks to relations.\n\t//\n\tif ( a.targetPosition.isEqual( b.insertionPosition ) && context.abRelation == 'insertBetween' ) {\n\t\tnewTargetPosition = a.targetPosition;\n\t}\n\n\t// The default case.\n\t//\n\tconst transformed = moveRange._getTransformedBySplitOperation( b );\n\tconst ranges = [ transformed ];\n\n\t// Case 5:\n\t//\n\t// Moved range contains graveyard element used by split operation. Add extra move operation to the result.\n\t//\n\tif ( b.graveyardPosition ) {\n\t\tconst movesGraveyardElement = moveRange.start.isEqual( b.graveyardPosition ) || moveRange.containsPosition( b.graveyardPosition );\n\n\t\tif ( a.howMany > 1 && movesGraveyardElement ) {\n\t\t\tranges.push( Range._createFromPositionAndShift( b.insertionPosition, 1 ) );\n\t\t}\n\t}\n\n\treturn _makeMoveOperationsFromRanges( ranges, newTargetPosition );\n} );\n\nsetTransformation( MoveOperation, MergeOperation, ( a, b, context ) => {\n\tconst movedRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\n\tif ( b.deletionPosition.hasSameParentAs( a.sourcePosition ) && movedRange.containsPosition( b.sourcePosition ) ) {\n\t\tif ( a.type == 'remove' ) {\n\t\t\t// Case 1:\n\t\t\t//\n\t\t\t// The element to remove got merged.\n\t\t\t//\n\t\t\t// Merge operation does support merging elements which are not siblings. So it would not be a problem\n\t\t\t// from technical point of view. However, if the element was removed, the intention of the user\n\t\t\t// deleting it was to have it all deleted. From user experience point of view, moving back the\n\t\t\t// removed nodes might be unexpected. This means that in this scenario we will reverse merging and remove the element.\n\t\t\t//\n\t\t\tif ( !context.aWasUndone ) {\n\t\t\t\tconst results = [];\n\n\t\t\t\tlet gyMoveSource = b.graveyardPosition.clone();\n\t\t\t\tlet splitNodesMoveSource = b.targetPosition.clone();\n\n\t\t\t\tif ( a.howMany > 1 ) {\n\t\t\t\t\tresults.push( new MoveOperation( a.sourcePosition, a.howMany - 1, a.targetPosition, 0 ) );\n\t\t\t\t\tgyMoveSource = gyMoveSource._getTransformedByInsertion( a.targetPosition, a.howMany - 1 );\n\t\t\t\t\tsplitNodesMoveSource = splitNodesMoveSource._getTransformedByMove( a.sourcePosition, a.targetPosition, a.howMany - 1 );\n\t\t\t\t}\n\n\t\t\t\tconst gyMoveTarget = b.deletionPosition._getCombined( a.sourcePosition, a.targetPosition );\n\t\t\t\tconst gyMove = new MoveOperation( gyMoveSource, 1, gyMoveTarget, 0 );\n\n\t\t\t\tconst targetPositionPath = gyMove.getMovedRangeStart().path.slice();\n\t\t\t\ttargetPositionPath.push( 0 );\n\n\t\t\t\tconst splitNodesMoveTarget = new Position( gyMove.targetPosition.root, targetPositionPath );\n\t\t\t\tconst splitNodesMove = new MoveOperation( splitNodesMoveSource, b.howMany, splitNodesMoveTarget, 0 );\n\n\t\t\t\tresults.push( gyMove );\n\t\t\t\tresults.push( splitNodesMove );\n\n\t\t\t\treturn results;\n\t\t\t}\n\t\t} else {\n\t\t\t// Case 2:\n\t\t\t//\n\t\t\t// The element to move got merged and it was the only element to move.\n\t\t\t// In this case just don't do anything, leave the node in the graveyard. Without special case\n\t\t\t// it would be a move operation that moves 0 nodes, so maybe it is better just to return no-op.\n\t\t\t//\n\t\t\tif ( a.howMany == 1 ) {\n\t\t\t\tif ( !context.bWasUndone ) {\n\t\t\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t\t\t} else {\n\t\t\t\t\ta.sourcePosition = b.graveyardPosition.clone();\n\t\t\t\t\ta.targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\t\t\t\t\treturn [ a ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// The default case.\n\t//\n\tconst moveRange = Range._createFromPositionAndShift( a.sourcePosition, a.howMany );\n\tconst transformed = moveRange._getTransformedByMergeOperation( b );\n\n\ta.sourcePosition = transformed.start;\n\ta.howMany = transformed.end.offset - transformed.start.offset;\n\ta.targetPosition = a.targetPosition._getTransformedByMergeOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( RenameOperation, InsertOperation, ( a, b ) => {\n\ta.position = a.position._getTransformedByInsertOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, MergeOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// Element to rename got merged, so it was moved to `b.graveyardPosition`.\n\t//\n\tif ( a.position.isEqual( b.deletionPosition ) ) {\n\t\ta.position = b.graveyardPosition.clone();\n\t\ta.position.stickiness = 'toNext';\n\n\t\treturn [ a ];\n\t}\n\n\ta.position = a.position._getTransformedByMergeOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, MoveOperation, ( a, b ) => {\n\ta.position = a.position._getTransformedByMoveOperation( b );\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, RenameOperation, ( a, b, context ) => {\n\tif ( a.position.isEqual( b.position ) ) {\n\t\tif ( context.aIsStrong ) {\n\t\t\ta.oldName = b.newName;\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( RenameOperation, SplitOperation, ( a, b ) => {\n\t// Case 1:\n\t//\n\t// The element to rename has been split. In this case, the new element should be also renamed.\n\t//\n\t// User decides to change the paragraph to a list item:\n\t// <paragraph>Foobar</paragraph>\n\t//\n\t// However, in meantime, split happens:\n\t// <paragraph>Foo</paragraph><paragraph>bar</paragraph>\n\t//\n\t// As a result, rename both elements:\n\t// <listItem>Foo</listItem><listItem>bar</listItem>\n\t//\n\tconst renamePath = a.position.path;\n\tconst splitPath = b.splitPosition.getParentPath();\n\n\tif ( compareArrays( renamePath, splitPath ) == 'same' && !b.graveyardPosition ) {\n\t\tconst extraRename = new RenameOperation( a.position.getShiftedBy( 1 ), a.oldName, a.newName, 0 );\n\n\t\treturn [ a, extraRename ];\n\t}\n\n\t// The default case.\n\t//\n\ta.position = a.position._getTransformedBySplitOperation( b );\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( RootAttributeOperation, RootAttributeOperation, ( a, b, context ) => {\n\tif ( a.root === b.root && a.key === b.key ) {\n\t\tif ( !context.aIsStrong || a.newValue === b.newValue ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t} else {\n\t\t\ta.oldValue = b.newValue;\n\t\t}\n\t}\n\n\treturn [ a ];\n} );\n\n// -----------------------\n\nsetTransformation( SplitOperation, InsertOperation, ( a, b ) => {\n\t// The default case.\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.position ) && a.splitPosition.offset < b.position.offset ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.splitPosition = a.splitPosition._getTransformedByInsertOperation( b );\n\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\treturn [ a ];\n} );\n\nsetTransformation( SplitOperation, MergeOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Split element got merged. If two different elements were merged, clients will have different content.\n\t//\n\t// Example. Merge at `{}`, split at `[]`:\n\t// <heading>Foo</heading>{}<paragraph>B[]ar</paragraph>\n\t//\n\t// On merge side it will look like this:\n\t// <heading>FooB[]ar</heading>\n\t// <heading>FooB</heading><heading>ar</heading>\n\t//\n\t// On split side it will look like this:\n\t// <heading>Foo</heading>{}<paragraph>B</paragraph><paragraph>ar</paragraph>\n\t// <heading>FooB</heading><paragraph>ar</paragraph>\n\t//\n\t// Clearly, the second element is different for both clients.\n\t//\n\t// We could use the removed merge element from graveyard as a split element but then clients would have a different\n\t// model state (in graveyard), because the split side client would still have an element in graveyard (removed by merge).\n\t//\n\t// To overcome this, in `SplitOperation` x `MergeOperation` transformation we will add additional `SplitOperation`\n\t// in the graveyard, which will actually clone the merged-and-deleted element. Then, that cloned element will be\n\t// used for splitting. Example below.\n\t//\n\t// Original state:\n\t// <heading>Foo</heading>{}<paragraph>B[]ar</paragraph>\n\t//\n\t// Merge side client:\n\t//\n\t// After merge:\n\t// <heading>FooB[]ar</heading>                                 graveyard: <paragraph></paragraph>\n\t//\n\t// Extra split:\n\t// <heading>FooB[]ar</heading>                                 graveyard: <paragraph></paragraph><paragraph></paragraph>\n\t//\n\t// Use the \"cloned\" element from graveyard:\n\t// <heading>FooB</heading><paragraph>ar</paragraph>            graveyard: <paragraph></paragraph>\n\t//\n\t// Split side client:\n\t//\n\t// After split:\n\t// <heading>Foo</heading>{}<paragraph>B</paragraph><paragraph>ar</paragraph>\n\t//\n\t// After merge:\n\t// <heading>FooB</heading><paragraph>ar</paragraph>            graveyard: <paragraph></paragraph>\n\t//\n\t// This special case scenario only applies if the original split operation clones the split element.\n\t// If the original split operation has `graveyardPosition` set, it all doesn't have sense because split operation\n\t// knows exactly which element it should use. So there would be no original problem with different contents.\n\t//\n\t// Additionally, the special case applies only if the merge wasn't already undone.\n\t//\n\tif ( !a.graveyardPosition && !context.bWasUndone && a.splitPosition.hasSameParentAs( b.sourcePosition ) ) {\n\t\tconst splitPath = b.graveyardPosition.path.slice();\n\t\tsplitPath.push( 0 );\n\n\t\tconst splitPosition = new Position( b.graveyardPosition.root, splitPath );\n\t\tconst insertionPosition = SplitOperation.getInsertionPosition( new Position( b.graveyardPosition.root, splitPath ) );\n\n\t\tconst additionalSplit = new SplitOperation( splitPosition, 0, null, 0 );\n\t\tadditionalSplit.insertionPosition = insertionPosition;\n\n\t\ta.splitPosition = a.splitPosition._getTransformedByMergeOperation( b );\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\t\ta.graveyardPosition = additionalSplit.insertionPosition.clone();\n\t\ta.graveyardPosition.stickiness = 'toNext';\n\n\t\treturn [ additionalSplit, a ];\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.deletionPosition ) && !a.splitPosition.isAfter( b.deletionPosition ) ) {\n\t\ta.howMany--;\n\t}\n\n\tif ( a.splitPosition.hasSameParentAs( b.targetPosition ) ) {\n\t\ta.howMany += b.howMany;\n\t}\n\n\ta.splitPosition = a.splitPosition._getTransformedByMergeOperation( b );\n\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\tif ( a.graveyardPosition ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMergeOperation( b );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( SplitOperation, MoveOperation, ( a, b, context ) => {\n\tconst rangeToMove = Range._createFromPositionAndShift( b.sourcePosition, b.howMany );\n\n\tif ( a.graveyardPosition ) {\n\t\t// Case 1:\n\t\t//\n\t\t// Split operation graveyard node was moved. In this case move operation is stronger. Since graveyard element\n\t\t// is already moved to the correct position, we need to only move the nodes after the split position.\n\t\t// This will be done by `MoveOperation` instead of `SplitOperation`.\n\t\t//\n\t\tif ( rangeToMove.start.isEqual( a.graveyardPosition ) || rangeToMove.containsPosition( a.graveyardPosition ) ) {\n\t\t\tconst sourcePosition = a.splitPosition._getTransformedByMoveOperation( b );\n\n\t\t\tconst newParentPosition = a.graveyardPosition._getTransformedByMoveOperation( b );\n\t\t\tconst newTargetPath = newParentPosition.path.slice();\n\t\t\tnewTargetPath.push( 0 );\n\n\t\t\tconst newTargetPosition = new Position( newParentPosition.root, newTargetPath );\n\t\t\tconst moveOp = new MoveOperation( sourcePosition, a.howMany, newTargetPosition, 0 );\n\n\t\t\treturn [ moveOp ];\n\t\t}\n\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedByMoveOperation( b );\n\t}\n\n\t// Case 2:\n\t//\n\t// If the split position is inside the moved range, we need to shift the split position to a proper place.\n\t// The position cannot be moved together with moved range because that would result in splitting of an incorrect element.\n\t//\n\t// Characters `bc` should be moved to the second paragraph while split position is between them:\n\t// <paragraph>A[b|c]d</paragraph><paragraph>Xyz</paragraph>\n\t//\n\t// After move, new split position is incorrect:\n\t// <paragraph>Ad</paragraph><paragraph>Xb|cyz</paragraph>\n\t//\n\t// Correct split position:\n\t// <paragraph>A|d</paragraph><paragraph>Xbcyz</paragraph>\n\t//\n\t// After split:\n\t// <paragraph>A</paragraph><paragraph>d</paragraph><paragraph>Xbcyz</paragraph>\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.sourcePosition ) && rangeToMove.containsPosition( a.splitPosition ) ) {\n\t\tconst howManyRemoved = b.howMany - ( a.splitPosition.offset - b.sourcePosition.offset );\n\t\ta.howMany -= howManyRemoved;\n\n\t\tif ( a.splitPosition.hasSameParentAs( b.targetPosition ) && a.splitPosition.offset < b.targetPosition.offset ) {\n\t\t\ta.howMany += b.howMany;\n\t\t}\n\n\t\ta.splitPosition = b.sourcePosition.clone();\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 3:\n\t//\n\t// Split is at a position where nodes were moved.\n\t//\n\t// This is a scenario described in `MoveOperation` x `SplitOperation` transformation but from the\n\t// \"split operation point of view\".\n\t//\n\tconst splitAtTarget = a.splitPosition.isEqual( b.targetPosition );\n\n\tif ( splitAtTarget && ( context.baRelation == 'insertAtSource' || context.abRelation == 'splitBefore' ) ) {\n\t\ta.howMany += b.howMany;\n\t\ta.splitPosition = a.splitPosition._getTransformedByDeletion( b.sourcePosition, b.howMany );\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\t\treturn [ a ];\n\t}\n\n\t// The default case.\n\t// Don't change `howMany` if move operation does not really move anything.\n\t//\n\tif ( !b.sourcePosition.isEqual( b.targetPosition ) ) {\n\t\tif ( a.splitPosition.hasSameParentAs( b.sourcePosition ) && a.splitPosition.offset <= b.sourcePosition.offset ) {\n\t\t\ta.howMany -= b.howMany;\n\t\t}\n\n\t\tif ( a.splitPosition.hasSameParentAs( b.targetPosition ) && a.splitPosition.offset < b.targetPosition.offset ) {\n\t\t\ta.howMany += b.howMany;\n\t\t}\n\t}\n\n\t// Change position stickiness to force a correct transformation.\n\ta.splitPosition.stickiness = 'toNone';\n\ta.splitPosition = a.splitPosition._getTransformedByMoveOperation( b );\n\ta.splitPosition.stickiness = 'toNext';\n\n\tif ( a.graveyardPosition ) {\n\t\ta.insertionPosition = a.insertionPosition._getTransformedByMoveOperation( b );\n\t} else {\n\t\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\t}\n\n\treturn [ a ];\n} );\n\nsetTransformation( SplitOperation, SplitOperation, ( a, b, context ) => {\n\t// Case 1:\n\t//\n\t// Split at the same position.\n\t//\n\t// If there already was a split at the same position as in `a` operation, it means that the intention\n\t// conveyed by `a` operation has already been fulfilled and `a` should not do anything (to avoid double split).\n\t//\n\t// However, there is a difference if these are new splits or splits created by undo. These have different\n\t// intentions. Also splits moving back different elements from graveyard have different intentions. They\n\t// are just different operations.\n\t//\n\t// So we cancel split operation only if it was really identical.\n\t//\n\tif ( a.splitPosition.isEqual( b.splitPosition ) ) {\n\t\tif ( !a.graveyardPosition && !b.graveyardPosition ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\n\t\tif ( a.graveyardPosition && b.graveyardPosition && a.graveyardPosition.isEqual( b.graveyardPosition ) ) {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\t// Case 2:\n\t//\n\t// Same node is using to split different elements. This happens in undo when previously same element was merged to\n\t// two different elements. This is described in `MergeOperation` x `MergeOperation` transformation.\n\t//\n\t// In this case we will follow the same logic. We will assume that `insertionPosition` is same for both\n\t// split operations. This might not always be true but in the real cases that were experienced it was. After all,\n\t// if these splits are reverses of merge operations that were merging the same element, then the `insertionPosition`\n\t// should be same for both of those splits.\n\t//\n\t// Again, we will decide which operation is stronger by checking if split happens in graveyard or in non-graveyard root.\n\t//\n\tif ( a.graveyardPosition && b.graveyardPosition && a.graveyardPosition.isEqual( b.graveyardPosition ) ) {\n\t\tconst aInGraveyard = a.splitPosition.root.rootName == '$graveyard';\n\t\tconst bInGraveyard = b.splitPosition.root.rootName == '$graveyard';\n\n\t\t// If `aIsWeak` it means that `a` points to graveyard while `b` doesn't. Don't move nodes then.\n\t\tconst aIsWeak = aInGraveyard && !bInGraveyard;\n\n\t\t// If `bIsWeak` it means that `b` points to graveyard while `a` doesn't. Force moving nodes then.\n\t\tconst bIsWeak = bInGraveyard && !aInGraveyard;\n\n\t\t// Force move if `b` is weak or neither operation is weak but `a` is stronger through `context.aIsStrong`.\n\t\tconst forceMove = bIsWeak || ( !aIsWeak && context.aIsStrong );\n\n\t\tif ( forceMove ) {\n\t\t\tconst result = [];\n\n\t\t\t// First we need to move any nodes split by `b` back to where they were.\n\t\t\t// Do it only if `b` actually moved something.\n\t\t\tif ( b.howMany ) {\n\t\t\t\tresult.push( new MoveOperation( b.moveTargetPosition, b.howMany, b.splitPosition, 0 ) );\n\t\t\t}\n\n\t\t\t// Then we need to move nodes from `a` split position to their new element.\n\t\t\t// Do it only if `a` actually should move something.\n\t\t\tif ( a.howMany ) {\n\t\t\t\tresult.push( new MoveOperation( a.splitPosition, a.howMany, a.moveTargetPosition, 0 ) );\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn [ new NoOperation( 0 ) ];\n\t\t}\n\t}\n\n\tif ( a.graveyardPosition ) {\n\t\ta.graveyardPosition = a.graveyardPosition._getTransformedBySplitOperation( b );\n\t}\n\n\t// Case 3:\n\t//\n\t// Position where operation `b` inserted a new node after split is the same as the operation `a` split position.\n\t// As in similar cases, there is ambiguity if the split should be before the new node (created by `b`) or after.\n\t//\n\tif ( a.splitPosition.isEqual( b.insertionPosition ) && context.abRelation == 'splitBefore' ) {\n\t\ta.howMany++;\n\n\t\treturn [ a ];\n\t}\n\n\t// Case 4:\n\t//\n\t// This is a mirror to the case 2. above.\n\t//\n\tif ( b.splitPosition.isEqual( a.insertionPosition ) && context.baRelation == 'splitBefore' ) {\n\t\tconst newPositionPath = b.insertionPosition.path.slice();\n\t\tnewPositionPath.push( 0 );\n\n\t\tconst newPosition = new Position( b.insertionPosition.root, newPositionPath );\n\t\tconst moveOp = new MoveOperation( a.insertionPosition, 1, newPosition, 0 );\n\n\t\treturn [ a, moveOp ];\n\t}\n\n\t// The default case.\n\t//\n\tif ( a.splitPosition.hasSameParentAs( b.splitPosition ) && a.splitPosition.offset < b.splitPosition.offset ) {\n\t\ta.howMany -= b.howMany;\n\t}\n\n\ta.splitPosition = a.splitPosition._getTransformedBySplitOperation( b );\n\ta.insertionPosition = SplitOperation.getInsertionPosition( a.splitPosition );\n\n\treturn [ a ];\n} );\n\n// Checks whether `MoveOperation` `targetPosition` is inside a node from the moved range of the other `MoveOperation`.\n//\n// @private\n// @param {module:engine/model/operation/moveoperation~MoveOperation} a\n// @param {module:engine/model/operation/moveoperation~MoveOperation} b\n// @returns {Boolean}\nfunction _moveTargetIntoMovedRange( a, b ) {\n\treturn a.targetPosition._getTransformedByDeletion( b.sourcePosition, b.howMany ) === null;\n}\n\n// Helper function for `MoveOperation` x `MoveOperation` transformation. Converts given ranges and target position to\n// move operations and returns them.\n//\n// Ranges and target position will be transformed on-the-fly when generating operations.\n//\n// Given `ranges` should be in the order of how they were in the original transformed operation.\n//\n// Given `targetPosition` is the target position of the first range from `ranges`.\n//\n// @private\n// @param {Array.<module:engine/model/range~Range>} ranges\n// @param {module:engine/model/position~Position} targetPosition\n// @returns {Array.<module:engine/model/operation/moveoperation~MoveOperation>}\nfunction _makeMoveOperationsFromRanges( ranges, targetPosition ) {\n\t// At this moment we have some ranges and a target position, to which those ranges should be moved.\n\t// Order in `ranges` array is the go-to order of after transformation.\n\t//\n\t// We are almost done. We have `ranges` and `targetPosition` to make operations from.\n\t// Unfortunately, those operations may affect each other. Precisely, first operation after move\n\t// may affect source range and target position of second and third operation. Same with second\n\t// operation affecting third.\n\t//\n\t// We need to fix those source ranges and target positions once again, before converting `ranges` to operations.\n\tconst operations = [];\n\n\t// Keep in mind that nothing will be transformed if there is just one range in `ranges`.\n\tfor ( let i = 0; i < ranges.length; i++ ) {\n\t\t// Create new operation out of a range and target position.\n\t\tconst range = ranges[ i ];\n\t\tconst op = new MoveOperation(\n\t\t\trange.start,\n\t\t\trange.end.offset - range.start.offset,\n\t\t\t// If the target is the end of the move range this operation doesn't really move anything.\n\t\t\t// In this case, it is better for OT to use range start instead of range end.\n\t\t\ttargetPosition.isEqual( range.end ) ? range.start : targetPosition,\n\t\t\t0\n\t\t);\n\n\t\toperations.push( op );\n\n\t\t// Transform other ranges by the generated operation.\n\t\tfor ( let j = i + 1; j < ranges.length; j++ ) {\n\t\t\t// All ranges in `ranges` array should be:\n\t\t\t//\n\t\t\t// * non-intersecting (these are part of original operation source range), and\n\t\t\t// * `targetPosition` does not target into them (opposite would mean that transformed operation targets \"inside itself\").\n\t\t\t//\n\t\t\t// This means that the transformation will be \"clean\" and always return one result.\n\t\t\tranges[ j ] = ranges[ j ]._getTransformedByMove( op.sourcePosition, op.targetPosition, op.howMany )[ 0 ];\n\t\t}\n\n\t\ttargetPosition = targetPosition._getTransformedByMove( op.sourcePosition, op.targetPosition, op.howMany );\n\t}\n\n\treturn operations;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module undo/basecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { transformSets } from '@ckeditor/ckeditor5-engine/src/model/operation/transform';\n\n/**\n * Base class for undo feature commands: {@link module:undo/undocommand~UndoCommand} and {@link module:undo/redocommand~RedoCommand}.\n *\n * @protected\n * @extends module:core/command~Command\n */\nexport default class BaseCommand extends Command {\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Stack of items stored by the command. These are pairs of:\n\t\t *\n\t\t * * {@link module:engine/model/batch~Batch batch} saved by the command,\n\t\t * * {@link module:engine/model/selection~Selection selection} state at the moment of saving the batch.\n\t\t *\n\t\t * @protected\n\t\t * @member {Array} #_stack\n\t\t */\n\t\tthis._stack = [];\n\n\t\t/**\n\t\t * Stores all batches that were created by this command.\n\t\t *\n\t\t * @protected\n\t\t * @member {WeakSet.<module:engine/model/batch~Batch>} #_createdBatches\n\t\t */\n\t\tthis._createdBatches = new WeakSet();\n\n\t\t// Refresh state, so the command is inactive right after initialization.\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this._stack.length > 0;\n\t}\n\n\t/**\n\t * Stores a batch in the command, together with the selection state of the {@link module:engine/model/document~Document document}\n\t * created by the editor which this command is registered to.\n\t *\n\t * @param {module:engine/model/batch~Batch} batch The batch to add.\n\t */\n\taddBatch( batch ) {\n\t\tconst docSelection = this.editor.model.document.selection;\n\n\t\tconst selection = {\n\t\t\tranges: docSelection.hasOwnRange ? Array.from( docSelection.getRanges() ) : [],\n\t\t\tisBackward: docSelection.isBackward\n\t\t};\n\n\t\tthis._stack.push( { batch, selection } );\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * Removes all items from the stack.\n\t */\n\tclearStack() {\n\t\tthis._stack = [];\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * Restores the {@link module:engine/model/document~Document#selection document selection} state after a batch was undone.\n\t *\n\t * @protected\n\t * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be restored.\n\t * @param {Boolean} isBackward A flag describing whether the restored range was selected forward or backward.\n\t * @param {Array.<module:engine/model/operation/operation~Operation>} operations Operations which has been applied\n\t * since selection has been stored.\n\t */\n\t_restoreSelection( ranges, isBackward, operations ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\t// This will keep the transformed selection ranges.\n\t\tconst selectionRanges = [];\n\n\t\t// Transform all ranges from the restored selection.\n\t\tfor ( const range of ranges ) {\n\t\t\tconst transformed = transformSelectionRange( range, operations );\n\n\t\t\t// For each `range` from `ranges`, we take only one transformed range.\n\t\t\t// This is because we want to prevent situation where single-range selection\n\t\t\t// got transformed to multi-range selection. We will take the first range that\n\t\t\t// is not in the graveyard.\n\t\t\tconst newRange = transformed.find(\n\t\t\t\trange => range.start.root != document.graveyard\n\t\t\t);\n\n\t\t\t// `transformedRange` might be `undefined` if transformed range ended up in graveyard.\n\t\t\tif ( newRange ) {\n\t\t\t\tselectionRanges.push( newRange );\n\t\t\t}\n\t\t}\n\n\t\t// `selectionRanges` may be empty if all ranges ended up in graveyard. If that is the case, do not restore selection.\n\t\tif ( selectionRanges.length ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( selectionRanges, { backward: isBackward } );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Undoes a batch by reversing that batch, transforming reversed batch and finally applying it.\n\t * This is a helper method for {@link #execute}.\n\t *\n\t * @protected\n\t * @param {module:engine/model/batch~Batch} batchToUndo The batch to be undone.\n\t * @param {module:engine/model/batch~Batch} undoingBatch The batch that will contain undoing changes.\n\t */\n\t_undo( batchToUndo, undoingBatch ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\t// All changes done by the command execution will be saved as one batch.\n\t\tthis._createdBatches.add( undoingBatch );\n\n\t\tconst operationsToUndo = batchToUndo.operations.slice().filter( operation => operation.isDocumentOperation );\n\t\toperationsToUndo.reverse();\n\n\t\t// We will process each operation from `batchToUndo`, in reverse order. If there were operations A, B and C in undone batch,\n\t\t// we need to revert them in reverse order, so first C' (reversed C), then B', then A'.\n\t\tfor ( const operationToUndo of operationsToUndo ) {\n\t\t\tconst nextBaseVersion = operationToUndo.baseVersion + 1;\n\t\t\tconst historyOperations = Array.from( document.history.getOperations( nextBaseVersion ) );\n\n\t\t\tconst transformedSets = transformSets(\n\t\t\t\t[ operationToUndo.getReversed() ],\n\t\t\t\thistoryOperations,\n\t\t\t\t{\n\t\t\t\t\tuseRelations: true,\n\t\t\t\t\tdocument: this.editor.model.document,\n\t\t\t\t\tpadWithNoOps: false\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst reversedOperations = transformedSets.operationsA;\n\n\t\t\t// After reversed operation has been transformed by all history operations, apply it.\n\t\t\tfor ( const operation of reversedOperations ) {\n\t\t\t\t// Before applying, add the operation to the `undoingBatch`.\n\t\t\t\tundoingBatch.addOperation( operation );\n\t\t\t\tmodel.applyOperation( operation );\n\n\t\t\t\tdocument.history.setOperationAsUndone( operationToUndo, operation );\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Transforms given range `range` by given `operations`.\n// Returns an array containing one or more ranges, which are result of the transformation.\nfunction transformSelectionRange( range, operations ) {\n\tconst transformed = range.getTransformedByOperations( operations );\n\n\t// After `range` got transformed, we have an array of ranges. Some of those\n\t// ranges may be \"touching\" -- they can be next to each other and could be merged.\n\t// First, we have to sort those ranges to assure that they are in order.\n\ttransformed.sort( ( a, b ) => a.start.isBefore( b.start ) ? -1 : 1 );\n\n\t// Then, we check if two consecutive ranges are touching.\n\tfor ( let i = 1; i < transformed.length; i++ ) {\n\t\tconst a = transformed[ i - 1 ];\n\t\tconst b = transformed[ i ];\n\n\t\tif ( a.end.isTouching( b.start ) ) {\n\t\t\t// And join them together if they are.\n\t\t\ta.end = b.end;\n\t\t\ttransformed.splice( i, 1 );\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn transformed;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module undo/undocommand\n */\n\nimport BaseCommand from './basecommand';\n\n/**\n * The undo command stores {@link module:engine/model/batch~Batch batches} applied to the\n * {@link module:engine/model/document~Document document} and is able to undo a batch by reversing it and transforming by\n * batches from {@link module:engine/model/document~Document#history history} that happened after the reversed batch.\n *\n * The undo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\nexport default class UndoCommand extends BaseCommand {\n\t/**\n\t * Executes the command. This method reverts a {@link module:engine/model/batch~Batch batch} added to the command's stack, transforms\n\t * and applies the reverted version on the {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t * @fires revert\n\t * @param {module:engine/model/batch~Batch} [batch] A batch that should be undone. If not set, the last added batch will be undone.\n\t */\n\texecute( batch = null ) {\n\t\t// If batch is not given, set `batchIndex` to the last index in command stack.\n\t\tconst batchIndex = batch ? this._stack.findIndex( a => a.batch == batch ) : this._stack.length - 1;\n\n\t\tconst item = this._stack.splice( batchIndex, 1 )[ 0 ];\n\t\tconst undoingBatch = this.editor.model.createBatch();\n\n\t\t// All changes has to be done in one `enqueueChange` callback so other listeners will not\n\t\t// step between consecutive operations, or won't do changes to the document before selection is properly restored.\n\t\tthis.editor.model.enqueueChange( undoingBatch, () => {\n\t\t\tthis._undo( item.batch, undoingBatch );\n\n\t\t\tconst operations = this.editor.model.document.history.getOperations( item.batch.baseVersion );\n\t\t\tthis._restoreSelection( item.selection.ranges, item.selection.isBackward, operations );\n\n\t\t\tthis.fire( 'revert', item.batch, undoingBatch );\n\t\t} );\n\n\t\tthis.refresh();\n\t}\n}\n\n/**\n * Fired when execution of the command reverts some batch.\n *\n * @event revert\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module undo/redocommand\n */\n\nimport BaseCommand from './basecommand';\n\n/**\n * The redo command stores {@link module:engine/model/batch~Batch batches} that were used to undo a batch by\n * {@link module:undo/undocommand~UndoCommand}. It is able to redo a previously undone batch by reversing the undoing\n * batches created by `UndoCommand`. The reversed batch is transformed by all the batches from\n * {@link module:engine/model/document~Document#history history} that happened after the reversed undo batch.\n *\n * The redo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\nexport default class RedoCommand extends BaseCommand {\n\t/**\n\t * Executes the command. This method reverts the last {@link module:engine/model/batch~Batch batch} added to\n\t * the command's stack, applies the reverted and transformed version on the\n\t * {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst item = this._stack.pop();\n\t\tconst redoingBatch = this.editor.model.createBatch();\n\n\t\t// All changes have to be done in one `enqueueChange` callback so other listeners will not step between consecutive\n\t\t// operations, or won't do changes to the document before selection is properly restored.\n\t\tthis.editor.model.enqueueChange( redoingBatch, () => {\n\t\t\tconst lastOperation = item.batch.operations[ item.batch.operations.length - 1 ];\n\t\t\tconst nextBaseVersion = lastOperation.baseVersion + 1;\n\t\t\tconst operations = this.editor.model.document.history.getOperations( nextBaseVersion );\n\n\t\t\tthis._restoreSelection( item.selection.ranges, item.selection.isBackward, operations );\n\t\t\tthis._undo( item.batch, redoingBatch );\n\t\t} );\n\n\t\tthis.refresh();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module undo/undoediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoCommand from './undocommand';\nimport RedoCommand from './redocommand';\n\n/**\n * The undo engine feature.\n *\n * It introduces the `'undo'` and `'redo'` commands to the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class UndoEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The command that manages undo {@link module:engine/model/batch~Batch batches} stack (history).\n\t\t * Created and registered during the {@link #init feature initialization}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:undo/undocommand~UndoCommand} #_undoCommand\n\t\t */\n\n\t\t/**\n\t\t * The command that manages redo {@link module:engine/model/batch~Batch batches} stack (history).\n\t\t * Created and registered during the {@link #init feature initialization}.\n\t\t *\n\t\t * @private\n\t\t * @member {module:undo/undocommand~UndoCommand} #_redoCommand\n\t\t */\n\n\t\t/**\n\t\t * Keeps track of which batches were registered in undo.\n\t\t *\n\t\t * @private\n\t\t * @member {WeakSet.<module:engine/model/batch~Batch>}\n\t\t */\n\t\tthis._batchRegistry = new WeakSet();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Create commands.\n\t\tthis._undoCommand = new UndoCommand( editor );\n\t\tthis._redoCommand = new RedoCommand( editor );\n\n\t\t// Register command to the editor.\n\t\teditor.commands.add( 'undo', this._undoCommand );\n\t\teditor.commands.add( 'redo', this._redoCommand );\n\n\t\tthis.listenTo( editor.model, 'applyOperation', ( evt, args ) => {\n\t\t\tconst operation = args[ 0 ];\n\n\t\t\t// Do not register batch if the operation is not a document operation.\n\t\t\t// This prevents from creating empty undo steps, where all operations where non-document operations.\n\t\t\t// Non-document operations creates and alters content in detached tree fragments (for example, document fragments).\n\t\t\t// Most of time this is preparing data before it is inserted into actual tree (for example during copy & paste).\n\t\t\t// Such operations should not be reversed.\n\t\t\tif ( !operation.isDocumentOperation ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst batch = operation.batch;\n\n\t\t\t// If changes are not a part of a batch or this is not a new batch, omit those changes.\n\t\t\tif ( this._batchRegistry.has( batch ) || batch.type == 'transparent' ) {\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tif ( this._redoCommand._createdBatches.has( batch ) ) {\n\t\t\t\t\t// If this batch comes from `redoCommand`, add it to `undoCommand` stack.\n\t\t\t\t\tthis._undoCommand.addBatch( batch );\n\t\t\t\t} else if ( !this._undoCommand._createdBatches.has( batch ) ) {\n\t\t\t\t\t// A default batch - these are new changes in the document, not introduced by undo feature.\n\t\t\t\t\t// Add them to `undoCommand` stack and clear `redoCommand` stack.\n\t\t\t\t\tthis._undoCommand.addBatch( batch );\n\t\t\t\t\tthis._redoCommand.clearStack();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the batch to the registry so it will not be processed again.\n\t\t\tthis._batchRegistry.add( batch );\n\t\t}, { priority: 'highest' } );\n\n\t\tthis.listenTo( this._undoCommand, 'revert', ( evt, undoneBatch, undoingBatch ) => {\n\t\t\tthis._redoCommand.addBatch( undoingBatch );\n\t\t} );\n\n\t\teditor.keystrokes.set( 'CTRL+Z', 'undo' );\n\t\teditor.keystrokes.set( 'CTRL+Y', 'redo' );\n\t\teditor.keystrokes.set( 'CTRL+SHIFT+Z', 'redo' );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* global DOMParser */\n\n/**\n * @module ui/icon/iconview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/icon/icon.css';\n\n/**\n * The icon view class.\n *\n * @extends module:ui/view~View\n */\nexport default class IconView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * The SVG source of the icon.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #content\n\t\t */\n\t\tthis.set( 'content', '' );\n\n\t\t/**\n\t\t * This attribute specifies the boundaries to which the\n\t\t * icon content should stretch.\n\t\t *\n\t\t * @observable\n\t\t * @default '0 0 20 20'\n\t\t * @member {String} #viewBox\n\t\t */\n\t\tthis.set( 'viewBox', '0 0 20 20' );\n\n\t\t/**\n\t\t * The fill color of the child `path.ck-icon__fill`.\n\t\t *\n\t\t * @observable\n\t\t * @default ''\n\t\t * @member {String} #fillColor\n\t\t */\n\t\tthis.set( 'fillColor', '' );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'svg',\n\t\t\tns: 'http://www.w3.org/2000/svg',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-icon'\n\t\t\t\t],\n\t\t\t\tviewBox: bind.to( 'viewBox' )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis._updateXMLContent();\n\t\tthis._colorFillPaths();\n\n\t\t// This is a hack for lack of innerHTML binding.\n\t\t// See: https://github.com/ckeditor/ckeditor5-ui/issues/99.\n\t\tthis.on( 'change:content', () => {\n\t\t\tthis._updateXMLContent();\n\t\t\tthis._colorFillPaths();\n\t\t} );\n\n\t\tthis.on( 'change:fillColor', () => {\n\t\t\tthis._colorFillPaths();\n\t\t} );\n\t}\n\n\t/**\n\t * Updates the {@link #element} with the value of {@link #content}.\n\t *\n\t * @private\n\t */\n\t_updateXMLContent() {\n\t\tif ( this.content ) {\n\t\t\tconst parsed = new DOMParser().parseFromString( this.content.trim(), 'image/svg+xml' );\n\t\t\tconst svg = parsed.querySelector( 'svg' );\n\t\t\tconst viewBox = svg.getAttribute( 'viewBox' );\n\n\t\t\tif ( viewBox ) {\n\t\t\t\tthis.viewBox = viewBox;\n\t\t\t}\n\n\t\t\tthis.element.innerHTML = '';\n\n\t\t\twhile ( svg.childNodes.length > 0 ) {\n\t\t\t\tthis.element.appendChild( svg.childNodes[ 0 ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fills all child `path.ck-icon__fill` with the `#fillColor`.\n\t *\n\t * @private\n\t */\n\t_colorFillPaths() {\n\t\tif ( this.fillColor ) {\n\t\t\tthis.element.querySelectorAll( '.ck-icon__fill' ).forEach( path => {\n\t\t\t\tpath.style.fill = this.fillColor;\n\t\t\t} );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/tooltip/tooltipview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/tooltip/tooltip.css';\n\n/**\n * The tooltip view class.\n *\n * @extends module:ui/view~View\n */\nexport default class TooltipView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The text of the tooltip visible to the user.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #text\n\t\t */\n\t\tthis.set( 'text', '' );\n\n\t\t/**\n\t\t * The position of the tooltip (south or north).\n\t\t *\n\t\t *\t\t+-----------+\n\t\t *\t\t|   north   |\n\t\t *\t\t+-----------+\n\t\t *\t\t      V\n\t\t *\t\t  [element]\n\t\t *\n\t\t *\t\t  [element]\n\t\t *\t\t      ^\n\t\t *\t\t+-----------+\n\t\t *\t\t|   south   |\n\t\t *\t\t+-----------+\n\t\t *\n\t\t * @observable\n\t\t * @default 's'\n\t\t * @member {'s'|'n'} #position\n\t\t */\n\t\tthis.set( 'position', 's' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'span',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-tooltip',\n\t\t\t\t\tbind.to( 'position', position => 'ck-tooltip_' + position ),\n\t\t\t\t\tbind.if( 'text', 'ck-hidden', value => !value.trim() )\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'span',\n\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t\t'ck-tooltip__text'\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: bind.to( 'text' ),\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/button/buttonview\n */\n\nimport View from '../view';\nimport IconView from '../icon/iconview';\nimport TooltipView from '../tooltip/tooltipview';\n\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport { getEnvKeystrokeText } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\nimport '../../theme/components/button/button.css';\n\n/**\n * The button view class.\n *\n *\t\tconst view = new ButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true,\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * @extends module:ui/view~View\n * @implements module:ui/button/button~Button\n */\nexport default class ButtonView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\t\tconst ariaLabelUid = uid();\n\n\t\t// Implement the Button interface.\n\t\tthis.set( 'class' );\n\t\tthis.set( 'labelStyle' );\n\t\tthis.set( 'icon' );\n\t\tthis.set( 'isEnabled', true );\n\t\tthis.set( 'isOn', false );\n\t\tthis.set( 'isVisible', true );\n\t\tthis.set( 'keystroke' );\n\t\tthis.set( 'label' );\n\t\tthis.set( 'tabindex', -1 );\n\t\tthis.set( 'tooltip' );\n\t\tthis.set( 'tooltipPosition', 's' );\n\t\tthis.set( 'type', 'button' );\n\t\tthis.set( 'withText', false );\n\n\t\t/**\n\t\t * Collection of the child views inside of the button {@link #element}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\t/**\n\t\t * Tooltip of the button view. It is configurable using the {@link #tooltip tooltip attribute}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/tooltip/tooltipview~TooltipView} #tooltipView\n\t\t */\n\t\tthis.tooltipView = this._createTooltipView();\n\n\t\t/**\n\t\t * Label of the button view. It is configurable using the {@link #label label attribute}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #labelView\n\t\t */\n\t\tthis.labelView = this._createLabelView( ariaLabelUid );\n\n\t\t/**\n\t\t * The icon view of the button. Will be added to {@link #children} when the\n\t\t * {@link #icon icon attribute} is defined.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/icon/iconview~IconView} #iconView\n\t\t */\n\t\tthis.iconView = new IconView();\n\n\t\tthis.iconView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-button__icon'\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Tooltip of the button bound to the template.\n\t\t *\n\t\t * @see #tooltip\n\t\t * @see #_getTooltipString\n\t\t * @private\n\t\t * @observable\n\t\t * @member {Boolean} #_tooltipString\n\t\t */\n\t\tthis.bind( '_tooltipString' ).to(\n\t\t\tthis, 'tooltip',\n\t\t\tthis, 'label',\n\t\t\tthis, 'keystroke',\n\t\t\tthis._getTooltipString.bind( this )\n\t\t);\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'button',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-button',\n\t\t\t\t\tbind.to( 'class' ),\n\t\t\t\t\tbind.if( 'isEnabled', 'ck-disabled', value => !value ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-hidden', value => !value ),\n\t\t\t\t\tbind.to( 'isOn', value => value ? 'ck-on' : 'ck-off' ),\n\t\t\t\t\tbind.if( 'withText', 'ck-button_with-text' )\n\t\t\t\t],\n\t\t\t\ttype: bind.to( 'type', value => value ? value : 'button' ),\n\t\t\t\ttabindex: bind.to( 'tabindex' ),\n\t\t\t\t'aria-labelledby': `ck-editor__aria-label_${ ariaLabelUid }`,\n\t\t\t\t'aria-disabled': bind.if( 'isEnabled', true, value => !value ),\n\t\t\t\t'aria-pressed': bind.if( 'isOn', true )\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\tmousedown: bind.to( evt => {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t} ),\n\n\t\t\t\tclick: bind.to( evt => {\n\t\t\t\t\t// We can't make the button disabled using the disabled attribute, because it won't be focusable.\n\t\t\t\t\t// Though, shouldn't this condition be moved to the button controller?\n\t\t\t\t\tif ( this.isEnabled ) {\n\t\t\t\t\t\tthis.fire( 'execute' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Prevent the default when button is disabled, to block e.g.\n\t\t\t\t\t\t// automatic form submitting. See ckeditor/ckeditor5-link#74.\n\t\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tif ( this.icon ) {\n\t\t\tthis.iconView.bind( 'content' ).to( this, 'icon' );\n\t\t\tthis.children.add( this.iconView );\n\t\t}\n\n\t\tthis.children.add( this.tooltipView );\n\t\tthis.children.add( this.labelView );\n\t}\n\n\t/**\n\t * Focuses the {@link #element} of the button.\n\t */\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n\n\t/**\n\t * Creates a {@link module:ui/tooltip/tooltipview~TooltipView} instance and binds it with button\n\t * attributes.\n\t *\n\t * @private\n\t * @returns {module:ui/tooltip/tooltipview~TooltipView}\n\t */\n\t_createTooltipView() {\n\t\tconst tooltipView = new TooltipView();\n\n\t\ttooltipView.bind( 'text' ).to( this, '_tooltipString' );\n\t\ttooltipView.bind( 'position' ).to( this, 'tooltipPosition' );\n\n\t\treturn tooltipView;\n\t}\n\n\t/**\n\t * Creates a label view instance and binds it with button attributes.\n\t *\n\t * @private\n\t * @param {String} ariaLabelUid The aria label UID.\n\t * @returns {module:ui/view~View}\n\t */\n\t_createLabelView( ariaLabelUid ) {\n\t\tconst labelView = new View();\n\t\tconst bind = this.bindTemplate;\n\n\t\tlabelView.setTemplate( {\n\t\t\ttag: 'span',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-button__label'\n\t\t\t\t],\n\t\t\t\tstyle: bind.to( 'labelStyle' ),\n\t\t\t\tid: `ck-editor__aria-label_${ ariaLabelUid }`,\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: this.bindTemplate.to( 'label' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn labelView;\n\t}\n\n\t/**\n\t * Gets the text for the {@link #tooltipView} from the combination of\n\t * {@link #tooltip}, {@link #label} and {@link #keystroke} attributes.\n\t *\n\t * @private\n\t * @see #tooltip\n\t * @see #_tooltipString\n\t * @param {Boolean|String|Function} tooltip Button tooltip.\n\t * @param {String} label Button label.\n\t * @param {String} keystroke Button keystroke.\n\t * @returns {String}\n\t */\n\t_getTooltipString( tooltip, label, keystroke ) {\n\t\tif ( tooltip ) {\n\t\t\tif ( typeof tooltip == 'string' ) {\n\t\t\t\treturn tooltip;\n\t\t\t} else {\n\t\t\t\tif ( keystroke ) {\n\t\t\t\t\tkeystroke = getEnvKeystrokeText( keystroke );\n\t\t\t\t}\n\n\t\t\t\tif ( tooltip instanceof Function ) {\n\t\t\t\t\treturn tooltip( label, keystroke );\n\t\t\t\t} else {\n\t\t\t\t\treturn `${ label }${ keystroke ? ` (${ keystroke })` : '' }`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module undo/undoui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport undoIcon from '../theme/icons/undo.svg';\nimport redoIcon from '../theme/icons/redo.svg';\n/**\n * The undo UI feature. It introduces the `'undo'` and `'redo'` buttons to the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class UndoUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        this._addButton('undo', t('aa'), 'CTRL+Z', undoIcon);\n        this._addButton('redo', t('ab'), 'CTRL+Y', redoIcon);\n    }\n    /**\n\t * Creates a button for the specified command.\n\t *\n\t * @private\n\t * @param {String} name Command name.\n\t * @param {String} label Button label.\n\t * @param {String} keystroke Command keystroke.\n\t * @param {String} Icon Source of the icon.\n\t */\n    _addButton(name, label, keystroke, Icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(name, locale => {\n            const command = editor.commands.get(name);\n            const view = new ButtonView(locale);\n            view.set({\n                label,\n                icon: Icon,\n                keystroke,\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            this.listenTo(view, 'execute', () => editor.execute(name));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module undo/undo\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoEditing from './undoediting';\nimport UndoUI from './undoui';\n\n/**\n * The undo feature.\n *\n * This is a \"glue\" plugin which loads the {@link module:undo/undoediting~UndoEditing undo editing feature}\n * and {@link module:undo/undoui~UndoUI undo UI feature}.\n *\n * Below is the explanation of the undo mechanism working together with {@link module:engine/model/history~History History}:\n *\n * Whenever a {@link module:engine/model/operation/operation~Operation operation} is applied to the\n * {@link module:engine/model/document~Document document}, it is saved to `History` as is.\n * The {@link module:engine/model/batch~Batch batch} that owns that operation is also saved, in\n * {@link module:undo/undocommand~UndoCommand}, together with the selection that was present in the document before the\n * operation was applied. A batch is saved instead of the operation because changes are undone batch-by-batch, not operation-by-operation\n * and a batch is seen as one undo step.\n *\n * After some changes happen to the document, the `History` and `UndoCommand` stack can be represented as follows:\n *\n *\t\t    History                            Undo stack\n *\t\t==============             ==================================\n *\t\t[operation A1]                         [batch A]\n *\t\t[operation B1]                         [batch B]\n *\t\t[operation B2]                         [batch C]\n *\t\t[operation C1]\n *\t\t[operation C2]\n *\t\t[operation B3]\n *\t\t[operation C3]\n *\n * Where operations starting with the same letter are from same batch.\n *\n * Undoing a batch means that a set of operations which will reverse the effects of that batch needs to be generated.\n * For example, if a batch added several letters, undoing the batch should remove them. It is important to apply undoing\n * operations in the reversed order, so if a batch has operation `X`, `Y`, `Z`, reversed operations `Zr`, `Yr` and `Xr`\n * need to be applied. Otherwise reversed operation `Xr` would operate on a wrong document state, because operation `X`\n * does not know that operations `Y` and `Z` happened.\n *\n * After operations from an undone batch got {@link module:engine/model/operation/operation~Operation#getReversed reversed},\n * one needs to make sure if they are ready to be applied. In the scenario above, operation `C3` is the last operation and `C3r`\n * bases on up-to-date document state, so it can be applied to the document.\n *\n *\t\t     History                             Undo stack\n *\t\t=================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]             [   processing undoing batch C   ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\n * Next is operation `C2`, reversed to `C2r`. `C2r` bases on `C2`, so it bases on the wrong document state. It needs to be\n * transformed by operations from history that happened after it, so it \"knows\" about them. Let us assume that `C2' = C2r * B3 * C3 * C3r`,\n * where `*` means \"transformed by\". Rest of operations from that batch are processed in the same fashion.\n *\n *\t\t     History                             Undo stack                                      Redo stack\n *\t\t=================             ==================================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]                                    [ batch Cr ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\t\t[ operation C2' ]\n *\t\t[ operation C1' ]\n *\n * Selective undo works on the same basis, however, instead of undoing the last batch in the undo stack, any batch can be undone.\n * The same algorithm applies: operations from a batch (i.e. `A1`) are reversed and then transformed by operations stored in history.\n *\n * Redo also is very similar to undo. It has its own stack that is filled with undoing (reversed batches). Operations from\n * batch that is re-done are reversed-back, transformed in proper order and applied to the document.\n *\n *\t\t     History                             Undo stack                                      Redo stack\n *\t\t=================             ==================================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]                      [ batch Crr ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\t\t[ operation C2' ]\n *\t\t[ operation C1' ]\n *\t\t[ operation C1'r]\n *\t\t[ operation C2'r]\n *\t\t[ operation C3rr]\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Undo extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ UndoEditing, UndoUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Undo';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module autoformat/blockautoformatediting\n */\n\n/**\n * The block autoformatting engine. It allows to format various block patterns. For example,\n * it can be configured to turn a paragraph starting with `*` and followed by a space into a list item.\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the constructors documentation to learn how to create custom inline autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n */\nexport default class BlockAutoformatEditing {\n\t/**\n\t * Creates a listener triggered on `change` event in the document.\n\t * Calls the callback when inserted text matches the regular expression or the command name\n\t * if provided instead of the callback.\n\t *\n\t * Examples of usage:\n\t *\n\t * To convert a paragraph to heading 1 when `- ` is typed, using just the commmand name:\n\t *\n\t *\t\tnew BlockAutoformatEditing( editor, /^\\- $/, 'heading1' );\n\t *\n\t * To convert a paragraph to heading 1 when `- ` is typed, using just the callback:\n\t *\n\t *\t\tnew BlockAutoformatEditing( editor, /^\\- $/, ( context ) => {\n\t *\t\t\tconst { match } = context;\n\t *\t\t\tconst headingLevel = match[ 1 ].length;\n\t *\n\t *\t\t\teditor.execute( 'heading', {\n\t *\t\t\t\tformatId: `heading${ headingLevel }`\n\t *\t\t\t} );\n\t * \t\t} );\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {RegExp} pattern The regular expression to execute on just inserted text.\n\t * @param {Function|String} callbackOrCommand The callback to execute or the command to run when the text is matched.\n\t * In case of providing the callback, it receives the following parameter:\n\t * * {Object} match RegExp.exec() result of matching the pattern to inserted text.\n\t */\n\tconstructor( editor, pattern, callbackOrCommand ) {\n\t\tlet callback;\n\n\t\tif ( typeof callbackOrCommand == 'function' ) {\n\t\t\tcallback = callbackOrCommand;\n\t\t} else {\n\t\t\t// We assume that the actual command name was provided.\n\t\t\tconst command = callbackOrCommand;\n\n\t\t\tcallback = () => {\n\t\t\t\teditor.execute( command );\n\t\t\t};\n\t\t}\n\n\t\teditor.model.document.on( 'change', ( evt, batch ) => {\n\t\t\tif ( batch.type == 'transparent' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst changes = Array.from( editor.model.document.differ.getChanges() );\n\t\t\tconst entry = changes[ 0 ];\n\n\t\t\t// Typing is represented by only a single change.\n\t\t\tif ( changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst item = entry.position.textNode || entry.position.nodeAfter;\n\n\t\t\tif ( !item.parent.is( 'paragraph' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst match = pattern.exec( item.data );\n\n\t\t\tif ( !match ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n\t\t\teditor.model.enqueueChange( writer => {\n\t\t\t\t// Matched range.\n\t\t\t\tconst start = writer.createPositionAt( item.parent, 0 );\n\t\t\t\tconst end = writer.createPositionAt( item.parent, match[ 0 ].length );\n\t\t\t\tconst range = writer.createRange( start, end );\n\n\t\t\t\t// Remove matched text.\n\t\t\t\twriter.remove( range );\n\n\t\t\t\tcallback( { match } );\n\t\t\t} );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module autoformat/inlineautoformatediting\n */\n\n/**\n * The inline autoformatting engine. It allows to format various inline patterns. For example,\n * it can be configured to make \"foo\" bold when typed `**foo**` (the `**` markers will be removed).\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the constructors documentation to learn how to create custom inline autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n */\nexport default class InlineAutoformatEditing {\n\t/**\n\t * Enables autoformatting mechanism for a given {@link module:core/editor/editor~Editor}.\n\t *\n\t * It formats the matched text by applying the given model attribute or by running the provided formatting callback.\n\t * On every change applied to the model the autoformatting engine checks the text on the left of the selection\n\t * and executes the provided action if the text matches given criteria (regular expression or callback).\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {Function|RegExp} testRegexpOrCallback The regular expression or callback to execute on text.\n\t * Provided regular expression *must* have three capture groups. The first and the third capture group\n\t * should match opening and closing delimiters. The second capture group should match the text to format.\n\t *\n\t *\t\t// Matches the `**bold text**` pattern.\n\t *\t\t// There are three capturing groups:\n\t *\t\t// - The first to match the starting `**` delimiter.\n\t *\t\t// - The second to match the text to format.\n\t *\t\t// - The third to match the ending `**` delimiter.\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, 'bold' );\n\t *\n\t * When a function is provided instead of the regular expression, it will be executed with the text to match as a parameter.\n\t * The function should return proper \"ranges\" to delete and format.\n\t *\n\t *\t\t{\n\t *\t\t\tremove: [\n\t *\t\t\t\t[ 0, 1 ],\t// Remove the first letter from the given text.\n\t *\t\t\t\t[ 5, 6 ]\t// Remove the 6th letter from the given text.\n\t *\t\t\t],\n\t *\t\t\tformat: [\n\t *\t\t\t\t[ 1, 5 ]\t// Format all letters from 2nd to 5th.\n\t *\t\t\t]\n\t *\t\t}\n\t *\n\t * @param {Function|String} attributeOrCallback The name of attribute to apply on matching text or a callback for manual\n\t * formatting.\n\t *\n\t *\t\t// Use attribute name:\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, 'bold' );\n\t *\n\t *\t\t// Use formatting callback:\n\t *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, ( writer, validRanges ) => {\n\t *\t\t\tfor ( let range of validRanges ) {\n\t *\t\t\t\twriter.setAttribute( command, true, range );\n\t *\t\t\t}\n\t *\t\t} );\n\t */\n\tconstructor( editor, testRegexpOrCallback, attributeOrCallback ) {\n\t\tlet regExp;\n\t\tlet attributeKey;\n\t\tlet testCallback;\n\t\tlet formatCallback;\n\n\t\tif ( testRegexpOrCallback instanceof RegExp ) {\n\t\t\tregExp = testRegexpOrCallback;\n\t\t} else {\n\t\t\ttestCallback = testRegexpOrCallback;\n\t\t}\n\n\t\tif ( typeof attributeOrCallback == 'string' ) {\n\t\t\tattributeKey = attributeOrCallback;\n\t\t} else {\n\t\t\tformatCallback = attributeOrCallback;\n\t\t}\n\n\t\t// A test callback run on changed text.\n\t\ttestCallback = testCallback || ( text => {\n\t\t\tlet result;\n\t\t\tconst remove = [];\n\t\t\tconst format = [];\n\n\t\t\twhile ( ( result = regExp.exec( text ) ) !== null ) {\n\t\t\t\t// There should be full match and 3 capture groups.\n\t\t\t\tif ( result && result.length < 4 ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet {\n\t\t\t\t\tindex,\n\t\t\t\t\t'1': leftDel,\n\t\t\t\t\t'2': content,\n\t\t\t\t\t'3': rightDel\n\t\t\t\t} = result;\n\n\t\t\t\t// Real matched string - there might be some non-capturing groups so we need to recalculate starting index.\n\t\t\t\tconst found = leftDel + content + rightDel;\n\t\t\t\tindex += result[ 0 ].length - found.length;\n\n\t\t\t\t// Start and End offsets of delimiters to remove.\n\t\t\t\tconst delStart = [\n\t\t\t\t\tindex,\n\t\t\t\t\tindex + leftDel.length\n\t\t\t\t];\n\t\t\t\tconst delEnd = [\n\t\t\t\t\tindex + leftDel.length + content.length,\n\t\t\t\t\tindex + leftDel.length + content.length + rightDel.length\n\t\t\t\t];\n\n\t\t\t\tremove.push( delStart );\n\t\t\t\tremove.push( delEnd );\n\n\t\t\t\tformat.push( [ index + leftDel.length, index + leftDel.length + content.length ] );\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tremove,\n\t\t\t\tformat\n\t\t\t};\n\t\t} );\n\n\t\t// A format callback run on matched text.\n\t\tformatCallback = formatCallback || ( ( writer, validRanges ) => {\n\t\t\tfor ( const range of validRanges ) {\n\t\t\t\twriter.setAttribute( attributeKey, true, range );\n\t\t\t}\n\n\t\t\t// After applying attribute to the text, remove given attribute from the selection.\n\t\t\t// This way user is able to type a text without attribute used by auto formatter.\n\t\t\twriter.removeSelectionAttribute( attributeKey );\n\t\t} );\n\n\t\teditor.model.document.on( 'change', ( evt, batch ) => {\n\t\t\tif ( batch.type == 'transparent' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selection = editor.model.document.selection;\n\n\t\t\t// Do nothing if selection is not collapsed.\n\t\t\tif ( !selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst changes = Array.from( editor.model.document.differ.getChanges() );\n\t\t\tconst entry = changes[ 0 ];\n\n\t\t\t// Typing is represented by only a single change.\n\t\t\tif ( changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst block = selection.focus.parent;\n\t\t\tconst text = getText( block ).slice( 0, selection.focus.offset );\n\t\t\tconst testOutput = testCallback( text );\n\t\t\tconst rangesToFormat = testOutputToRanges( block, testOutput.format, editor.model );\n\t\t\tconst rangesToRemove = testOutputToRanges( block, testOutput.remove, editor.model );\n\n\t\t\tif ( !( rangesToFormat.length && rangesToRemove.length ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n\t\t\teditor.model.enqueueChange( writer => {\n\t\t\t\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, attributeKey );\n\n\t\t\t\t// Apply format.\n\t\t\t\tformatCallback( writer, validRanges );\n\n\t\t\t\t// Remove delimiters - use reversed order to not mix the offsets while removing.\n\t\t\t\tfor ( const range of rangesToRemove.reverse() ) {\n\t\t\t\t\twriter.remove( range );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n}\n\n// Returns whole text from parent element by adding all data from text nodes together.\n//\n// @private\n// @param {module:engine/model/element~Element} element\n// @returns {String}\nfunction getText( element ) {\n\treturn Array.from( element.getChildren() ).reduce( ( a, b ) => a + b.data, '' );\n}\n\n// Converts output of the test function provided to the InlineAutoformatEditing and converts it to the model ranges\n// inside provided block.\n//\n// @private\n// @param {module:engine/model/element~Element} block\n// @param {Array.<Array>} arrays\n// @param {module:engine/model/model~Model} model\nfunction testOutputToRanges( block, arrays, model ) {\n\treturn arrays\n\t\t.filter( array => ( array[ 0 ] !== undefined && array[ 1 ] !== undefined ) )\n\t\t.map( array => {\n\t\t\treturn model.createRange( model.createPositionAt( block, array[ 0 ] ), model.createPositionAt( block, array[ 1 ] ) );\n\t\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module basic-styles/attributecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\n/**\n * An extension of the base {@link module:core/command~Command} class, which provides utilities for a command\n * that toggles a single attribute on a text or an element.\n *\n * `AttributeCommand` uses {@link module:engine/model/document~Document#selection}\n * to decide which nodes (if any) should be changed, and applies or removes the attribute from them.\n *\n * The command checks the {@link module:engine/model/model~Model#schema} to decide if it can be enabled\n * for the current selection and to which nodes the attribute can be applied.\n *\n * @extends module:core/command~Command\n */\nexport default class AttributeCommand extends Command {\n\t/**\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {String} attributeKey Attribute that will be set by the command.\n\t */\n\tconstructor( editor, attributeKey ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The attribute that will be set by the command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.attributeKey = attributeKey;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection#hasAttribute selection has the attribute} which means that:\n\t\t *\n\t\t * * If the selection is not empty &ndash; That the attribute is set on the first node in the selection that allows this attribute.\n\t\t * * If the selection is empty &ndash; That the selection has the attribute itself (which means that newly typed\n\t\t * text will have this attribute, too).\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t}\n\n\t/**\n\t * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.value = this._getValueFromFirstAllowedNode();\n\t\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, this.attributeKey );\n\t}\n\n\t/**\n\t * Executes the command &mdash; applies the attribute to the selection or removes it from the selection.\n\t *\n\t * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.\n\t *\n\t * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\n\t *\n\t * * If the selection is on a range, the command applies the attribute to all nodes in that range\n\t * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\n\t * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\n\t * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\n\t * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\n\t * that the selection inherits all attributes from a node if it is in an empty node).\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Command options.\n\t * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply the attribute,\n\t * otherwise the command will remove the attribute.\n\t * If not set, the command will look for its current value to decide what it should do.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst value = ( options.forceValue === undefined ) ? !this.value : options.forceValue;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tif ( value ) {\n\t\t\t\t\twriter.setSelectionAttribute( this.attributeKey, true );\n\t\t\t\t} else {\n\t\t\t\t\twriter.removeSelectionAttribute( this.attributeKey );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst ranges = model.schema.getValidRanges( selection.getRanges(), this.attributeKey );\n\n\t\t\t\tfor ( const range of ranges ) {\n\t\t\t\t\tif ( value ) {\n\t\t\t\t\t\twriter.setAttribute( this.attributeKey, value, range );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.removeAttribute( this.attributeKey, range );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the attribute value of the first node in the selection that allows the attribute.\n\t * For the collapsed selection returns the selection attribute.\n\t *\n\t * @private\n\t * @returns {Boolean} The attribute value.\n\t */\n\t_getValueFromFirstAllowedNode() {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst selection = model.document.selection;\n\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn selection.hasAttribute( this.attributeKey );\n\t\t}\n\n\t\tfor ( const range of selection.getRanges() ) {\n\t\t\tfor ( const item of range.getItems() ) {\n\t\t\t\tif ( schema.checkAttribute( item, this.attributeKey ) ) {\n\t\t\t\t\treturn item.hasAttribute( this.attributeKey );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module basic-styles/bold/boldediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AttributeCommand from '../attributecommand';\n\nconst BOLD = 'bold';\n\n/**\n * The bold editing feature.\n *\n * It registers the `'bold'` command and introduces the `bold` attribute in the model which renders to the view\n * as a `<strong>` element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BoldEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\t// Allow bold attribute on text nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: BOLD } );\n\n\t\t// Build converter from model to view for data and editing pipelines.\n\n\t\teditor.conversion.attributeToElement( {\n\t\t\tmodel: BOLD,\n\t\t\tview: 'strong',\n\t\t\tupcastAlso: [\n\t\t\t\t'b',\n\t\t\t\t{\n\t\t\t\t\tstyles: {\n\t\t\t\t\t\t'font-weight': 'bold'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\t// Create bold command.\n\t\teditor.commands.add( BOLD, new AttributeCommand( editor, BOLD ) );\n\n\t\t// Set the Ctrl+B keystroke.\n\t\teditor.keystrokes.set( 'CTRL+B', BOLD );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module basic-styles/bold/boldui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport boldIcon from '../../theme/icons/bold.svg';\nconst BOLD = 'bold';\n/**\n * The bold UI feature. It introduces the Bold button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BoldUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(BOLD, locale => {\n            const command = editor.commands.get(BOLD);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('c'),\n                icon: boldIcon,\n                keystroke: 'CTRL+B',\n                tooltip: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => editor.execute(BOLD));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module basic-styles/italic/italicediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AttributeCommand from '../attributecommand';\n\nconst ITALIC = 'italic';\n\n/**\n * The italic editing feature.\n *\n * It registers the `'italic'` command, the <kbd>Ctrl+I</kbd> keystroke and introduces the `italic` attribute in the model\n * which renders to the view as an `<em>` element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ItalicEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Allow italic attribute on text nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: ITALIC } );\n\n\t\teditor.conversion.attributeToElement( {\n\t\t\tmodel: ITALIC,\n\t\t\tview: 'i',\n\t\t\tupcastAlso: [\n\t\t\t\t'em',\n\t\t\t\t{\n\t\t\t\t\tstyles: {\n\t\t\t\t\t\t'font-style': 'italic'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\t// Create italic command.\n\t\teditor.commands.add( ITALIC, new AttributeCommand( editor, ITALIC ) );\n\n\t\t// Set the Ctrl+I keystroke.\n\t\teditor.keystrokes.set( 'CTRL+I', ITALIC );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module basic-styles/italic/italicui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport italicIcon from '../../theme/icons/italic.svg';\nconst ITALIC = 'italic';\n/**\n * The italic UI feature. It introduces the Italic button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ItalicUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(ITALIC, locale => {\n            const command = editor.commands.get(ITALIC);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('b'),\n                icon: italicIcon,\n                keystroke: 'CTRL+I',\n                tooltip: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => editor.execute(ITALIC));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module utils/first\n */\n\n/**\n * Returns first item of the given `iterable`.\n *\n * @param {Iterable.<*>} iterable\n * @returns {*}\n */\nexport default function first( iterable ) {\n\tconst iteratorItem = iterable.next();\n\n\tif ( iteratorItem.done ) {\n\t\treturn null;\n\t}\n\n\treturn iteratorItem.value;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module block-quote/blockquotecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The block quote command plugin.\n *\n * @extends module:core/command~Command\n */\nexport default class BlockQuoteCommand extends Command {\n\t/**\n\t * Whether the selection starts in a block quote.\n\t *\n\t * @observable\n\t * @readonly\n\t * @member {Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command. When the command {@link #value is on}, all block quotes within\n\t * the selection will be removed. If it is off, all selected blocks will be wrapped with\n\t * a block quote.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst schema = model.schema;\n\t\tconst blocks = Array.from( doc.selection.getSelectedBlocks() );\n\n\t\tmodel.change( writer => {\n\t\t\tif ( this.value ) {\n\t\t\t\tthis._removeQuote( writer, blocks.filter( findQuote ) );\n\t\t\t} else {\n\t\t\t\tconst blocksToQuote = blocks.filter( block => {\n\t\t\t\t\t// Already quoted blocks needs to be considered while quoting too\n\t\t\t\t\t// in order to reuse their <bQ> elements.\n\t\t\t\t\treturn findQuote( block ) || checkCanBeQuoted( schema, block );\n\t\t\t\t} );\n\n\t\t\t\tthis._applyQuote( writer, blocksToQuote );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @private\n\t * @returns {Boolean} The current value.\n\t */\n\t_getValue() {\n\t\tconst firstBlock = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\t// In the current implementation, the block quote must be an immediate parent of a block element.\n\t\treturn !!( firstBlock && findQuote( firstBlock ) );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\tif ( this.value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst schema = this.editor.model.schema;\n\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t\tif ( !firstBlock ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn checkCanBeQuoted( schema, firstBlock );\n\t}\n\n\t/**\n\t * Removes the quote from given blocks.\n\t *\n\t * If blocks which are supposed to be \"unquoted\" are in the middle of a quote,\n\t * start it or end it, then the quote will be split (if needed) and the blocks\n\t * will be moved out of it, so other quoted blocks remained quoted.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer\n\t * @param {Array.<module:engine/model/element~Element>} blocks\n\t */\n\t_removeQuote( writer, blocks ) {\n\t\t// Unquote all groups of block. Iterate in the reverse order to not break following ranges.\n\t\tgetRangesOfBlockGroups( writer, blocks ).reverse().forEach( groupRange => {\n\t\t\tif ( groupRange.start.isAtStart && groupRange.end.isAtEnd ) {\n\t\t\t\twriter.unwrap( groupRange.start.parent );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The group of blocks are at the beginning of an <bQ> so let's move them left (out of the <bQ>).\n\t\t\tif ( groupRange.start.isAtStart ) {\n\t\t\t\tconst positionBefore = writer.createPositionBefore( groupRange.start.parent );\n\n\t\t\t\twriter.move( groupRange, positionBefore );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// The blocks are in the middle of an <bQ> so we need to split the <bQ> after the last block\n\t\t\t// so we move the items there.\n\t\t\tif ( !groupRange.end.isAtEnd ) {\n\t\t\t\twriter.split( groupRange.end );\n\t\t\t}\n\n\t\t\t// Now we are sure that groupRange.end.isAtEnd is true, so let's move the blocks right.\n\n\t\t\tconst positionAfter = writer.createPositionAfter( groupRange.end.parent );\n\n\t\t\twriter.move( groupRange, positionAfter );\n\t\t} );\n\t}\n\n\t/**\n\t * Applies the quote to given blocks.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer\n\t * @param {Array.<module:engine/model/element~Element>} blocks\n\t */\n\t_applyQuote( writer, blocks ) {\n\t\tconst quotesToMerge = [];\n\n\t\t// Quote all groups of block. Iterate in the reverse order to not break following ranges.\n\t\tgetRangesOfBlockGroups( writer, blocks ).reverse().forEach( groupRange => {\n\t\t\tlet quote = findQuote( groupRange.start );\n\n\t\t\tif ( !quote ) {\n\t\t\t\tquote = writer.createElement( 'blockQuote' );\n\n\t\t\t\twriter.wrap( groupRange, quote );\n\t\t\t}\n\n\t\t\tquotesToMerge.push( quote );\n\t\t} );\n\n\t\t// Merge subsequent <bQ> elements. Reverse the order again because this time we want to go through\n\t\t// the <bQ> elements in the source order (due to how merge works – it moves the right element's content\n\t\t// to the first element and removes the right one. Since we may need to merge a couple of subsequent `<bQ>` elements\n\t\t// we want to keep the reference to the first (furthest left) one.\n\t\tquotesToMerge.reverse().reduce( ( currentQuote, nextQuote ) => {\n\t\t\tif ( currentQuote.nextSibling == nextQuote ) {\n\t\t\t\twriter.merge( writer.createPositionAfter( currentQuote ) );\n\n\t\t\t\treturn currentQuote;\n\t\t\t}\n\n\t\t\treturn nextQuote;\n\t\t} );\n\t}\n}\n\nfunction findQuote( elementOrPosition ) {\n\treturn elementOrPosition.parent.name == 'blockQuote' ? elementOrPosition.parent : null;\n}\n\n// Returns a minimal array of ranges containing groups of subsequent blocks.\n//\n// content:         abcdefgh\n// blocks:          [ a, b, d , f, g, h ]\n// output ranges:   [ab]c[d]e[fgh]\n//\n// @param {Array.<module:engine/model/element~Element>} blocks\n// @returns {Array.<module:engine/model/range~Range>}\nfunction getRangesOfBlockGroups( writer, blocks ) {\n\tlet startPosition;\n\tlet i = 0;\n\tconst ranges = [];\n\n\twhile ( i < blocks.length ) {\n\t\tconst block = blocks[ i ];\n\t\tconst nextBlock = blocks[ i + 1 ];\n\n\t\tif ( !startPosition ) {\n\t\t\tstartPosition = writer.createPositionBefore( block );\n\t\t}\n\n\t\tif ( !nextBlock || block.nextSibling != nextBlock ) {\n\t\t\tranges.push( writer.createRange( startPosition, writer.createPositionAfter( block ) ) );\n\t\t\tstartPosition = null;\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn ranges;\n}\n\n// Checks whether <bQ> can wrap the block.\nfunction checkCanBeQuoted( schema, block ) {\n\t// TMP will be replaced with schema.checkWrap().\n\tconst isBQAllowed = schema.checkChild( block.parent, 'blockQuote' );\n\tconst isBlockAllowedInBQ = schema.checkChild( [ '$root', 'blockQuote' ], block );\n\n\treturn isBQAllowed && isBlockAllowedInBQ;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module block-quote/blockquoteediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport BlockQuoteCommand from './blockquotecommand';\n\n/**\n * The block quote editing.\n *\n * Introduces the `'blockQuote'` command and the `'blockQuote'` model element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuoteEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\n\t\teditor.commands.add( 'blockQuote', new BlockQuoteCommand( editor ) );\n\n\t\tschema.register( 'blockQuote', {\n\t\t\tallowWhere: '$block',\n\t\t\tallowContentOf: '$root'\n\t\t} );\n\n\t\t// Disallow blockQuote in blockQuote.\n\t\tschema.addChildCheck( ( ctx, childDef ) => {\n\t\t\tif ( ctx.endsWith( 'blockQuote' ) && childDef.name == 'blockQuote' ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\teditor.conversion.elementToElement( { model: 'blockQuote', view: 'blockquote' } );\n\n\t\t// Postfixer which cleans incorrect model states connected with block quotes.\n\t\teditor.model.document.registerPostFixer( writer => {\n\t\t\tconst changes = editor.model.document.differ.getChanges();\n\n\t\t\tfor ( const entry of changes ) {\n\t\t\t\tif ( entry.type == 'insert' ) {\n\t\t\t\t\tconst element = entry.position.nodeAfter;\n\n\t\t\t\t\tif ( !element ) {\n\t\t\t\t\t\t// We are inside a text node.\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( element.is( 'blockQuote' ) && element.isEmpty ) {\n\t\t\t\t\t\t// Added an empty blockQuote - remove it.\n\t\t\t\t\t\twriter.remove( element );\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if ( element.is( 'blockQuote' ) && !schema.checkChild( entry.position, element ) ) {\n\t\t\t\t\t\t// Added a blockQuote in incorrect place - most likely inside another blockQuote. Unwrap it\n\t\t\t\t\t\t// so the content inside is not lost.\n\t\t\t\t\t\twriter.unwrap( element );\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if ( element.is( 'element' ) ) {\n\t\t\t\t\t\t// Just added an element. Check its children to see if there are no nested blockQuotes somewhere inside.\n\t\t\t\t\t\tconst range = writer.createRangeIn( element );\n\n\t\t\t\t\t\tfor ( const child of range.getItems() ) {\n\t\t\t\t\t\t\tif ( child.is( 'blockQuote' ) && !schema.checkChild( writer.createPositionBefore( child ), child ) ) {\n\t\t\t\t\t\t\t\twriter.unwrap( child );\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ( entry.type == 'remove' ) {\n\t\t\t\t\tconst parent = entry.position.parent;\n\n\t\t\t\t\tif ( parent.is( 'blockQuote' ) && parent.isEmpty ) {\n\t\t\t\t\t\t// Something got removed and now blockQuote is empty. Remove the blockQuote as well.\n\t\t\t\t\t\twriter.remove( parent );\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst editor = this.editor;\n\t\tconst command = editor.commands.get( 'blockQuote' );\n\n\t\t// Overwrite default Enter key behavior.\n\t\t// If Enter key is pressed with selection collapsed in empty block inside a quote, break the quote.\n\t\t// This listener is added in afterInit in order to register it after list's feature listener.\n\t\t// We can't use a priority for this, because 'low' is already used by the enter feature, unless\n\t\t// we'd use numeric priority in this case.\n\t\tthis.listenTo( this.editor.editing.view.document, 'enter', ( evt, data ) => {\n\t\t\tconst doc = this.editor.model.document;\n\t\t\tconst positionParent = doc.selection.getLastPosition().parent;\n\n\t\t\tif ( doc.selection.isCollapsed && positionParent.isEmpty && command.value ) {\n\t\t\t\tthis.editor.execute( 'blockQuote' );\n\t\t\t\tthis.editor.editing.view.scrollToTheSelection();\n\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module block-quote/blockquoteui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport quoteIcon from '@ckeditor/ckeditor5-core/theme/icons/quote.svg';\nimport '../theme/blockquote.css';\n/**\n * The block quote UI plugin.\n *\n * It introduces the `'blockQuote'` button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuoteUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('blockQuote', locale => {\n            const command = editor.commands.get('blockQuote');\n            const buttonView = new ButtonView(locale);\n            buttonView.set({\n                label: t('d'),\n                icon: quoteIcon,\n                tooltip: true\n            });\n            // Bind button model to command.\n            buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(buttonView, 'execute', () => editor.execute('blockQuote'));\n            return buttonView;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module paragraph/paragraphcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The paragraph command.\n *\n * @extends module:core/command~Command\n */\nexport default class ParagraphCommand extends Command {\n\t/**\n\t * The value of the command. Indicates whether the selection start is placed in a paragraph.\n\t *\n\t * @readonly\n\t * @observable\n\t * @member {Boolean} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst block = first( document.selection.getSelectedBlocks() );\n\n\t\tthis.value = !!block && block.is( 'paragraph' );\n\t\tthis.isEnabled = !!block && checkCanBecomeParagraph( block, model.schema );\n\t}\n\n\t/**\n\t * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection\n\t * will be turned to paragraphs.\n\t *\n\t * @fires execute\n\t * @param {Object} [options] Options for the executed command.\n\t * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} [options.selection]\n\t * The selection that the command should be applied to.\n\t * By default, if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tmodel.change( writer => {\n\t\t\tconst blocks = ( options.selection || document.selection ).getSelectedBlocks();\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\tif ( !block.is( 'paragraph' ) && checkCanBecomeParagraph( block, model.schema ) ) {\n\t\t\t\t\twriter.rename( block, 'paragraph' );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Checks whether the given block can be replaced by a paragraph.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeParagraph( block, schema ) {\n\treturn schema.checkChild( block.parent, 'paragraph' ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module paragraph/paragraph\n */\n\nimport ParagraphCommand from './paragraphcommand';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The paragraph feature for the editor.\n *\n * It introduces the `<paragraph>` element in the model which renders as a `<p>` element in the DOM and data.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Paragraph extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Paragraph';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst data = editor.data;\n\n\t\teditor.commands.add( 'paragraph', new ParagraphCommand( editor ) );\n\n\t\t// Schema.\n\t\tmodel.schema.register( 'paragraph', { inheritAllFrom: '$block' } );\n\n\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n\n\t\t// Content autoparagraphing. --------------------------------------------------\n\n\t\t// Handles elements not converted by plugins and checks if would be converted if\n\t\t// we wraps them by a paragraph or changes them to a paragraph.\n\t\tdata.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\n\t\t\tconst writer = conversionApi.writer;\n\n\t\t\t// When element is already consumed by higher priority converters then do nothing.\n\t\t\tif ( !conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// When element is paragraph-like lets try to change it into a paragraph.\n\t\t\tif ( Paragraph.paragraphLikeElements.has( data.viewItem.name ) ) {\n\t\t\t\tif ( data.viewItem.isEmpty ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst paragraph = writer.createElement( 'paragraph' );\n\n\t\t\t\t// Find allowed parent for paragraph that we are going to insert.\n\t\t\t\t// If current parent does not allow to insert paragraph but one of the ancestors does\n\t\t\t\t// then split nodes to allowed parent.\n\t\t\t\tconst splitResult = conversionApi.splitToAllowedParent( paragraph, data.modelCursor );\n\n\t\t\t\t// When there is no split result it means that we can't insert paragraph in this position.\n\t\t\t\tif ( !splitResult ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Insert paragraph in allowed position.\n\t\t\t\twriter.insert( paragraph, splitResult.position );\n\n\t\t\t\t// Convert children to paragraph.\n\t\t\t\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, writer.createPositionAt( paragraph, 0 ) );\n\n\t\t\t\t// Output range starts before paragraph but ends inside it after last child.\n\t\t\t\t// This is because we want to keep siblings inside the same paragraph as long as it is possible.\n\t\t\t\t// When next node won't be allowed in a paragraph it will split this paragraph anyway.\n\t\t\t\tdata.modelRange = writer.createRange( writer.createPositionBefore( paragraph ), modelRange.end );\n\t\t\t\tdata.modelCursor = data.modelRange.end;\n\n\t\t\t// When element is not paragraph-like lets try to wrap it by a paragraph.\n\t\t\t} else if ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\n\t\t\t\tdata = Object.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// Handles not converted text nodes and checks if would be converted if we wraps then by a paragraph.\n\t\tdata.upcastDispatcher.on( 'text', ( evt, data, conversionApi ) => {\n\t\t\t// When node is already converted then do nothing.\n\t\t\tif ( data.modelRange ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isParagraphable( data.viewItem, data.modelCursor, conversionApi.schema ) ) {\n\t\t\t\tdata = Object.assign( data, wrapInParagraph( data.viewItem, data.modelCursor, conversionApi ) );\n\t\t\t}\n\t\t}, { priority: 'lowest' } );\n\n\t\t// Empty roots autoparagraphing. -----------------------------------------------\n\n\t\t// Post-fixer which takes care of adding empty paragraph elements to empty roots.\n\t\t// Besides fixing content on #changesDone we also need to handle #dataReady because\n\t\t// if initial data is empty or setData() wasn't even called there will be no #change fired.\n\t\tmodel.document.registerPostFixer( writer => this._autoparagraphEmptyRoots( writer ) );\n\n\t\teditor.on( 'dataReady', () => {\n\t\t\tmodel.enqueueChange( 'transparent', writer => this._autoparagraphEmptyRoots( writer ) );\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Fixes all empty roots.\n\t *\n\t * @private\n\t * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\n\t */\n\t_autoparagraphEmptyRoots( writer ) {\n\t\tconst model = this.editor.model;\n\n\t\tfor ( const rootName of model.document.getRootNames() ) {\n\t\t\tconst root = model.document.getRoot( rootName );\n\n\t\t\tif ( root.isEmpty && root.rootName != '$graveyard' ) {\n\t\t\t\t// If paragraph element is allowed in the root, create paragraph element.\n\t\t\t\tif ( model.schema.checkChild( root, 'paragraph' ) ) {\n\t\t\t\t\twriter.insertElement( 'paragraph', root );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A list of element names which should be treated by the autoparagraphing algorithms as\n * paragraph-like. This means that e.g. the following content:\n *\n *\t\t<h1>Foo</h1>\n *\t\t<table>\n *\t\t\t<tr>\n *\t\t\t\t<td>X</td>\n *\t\t\t\t<td>\n *\t\t\t\t\t<ul>\n *\t\t\t\t\t\t<li>Y</li>\n *\t\t\t\t\t\t<li>Z</li>\n *\t\t\t\t\t</ul>\n *\t\t\t\t</td>\n *\t\t\t</tr>\n *\t\t</table>\n *\n * contains five paragraph-like elements: `<h1>`, two `<td>`s and two `<li>`s.\n * Hence, if none of the features is going to convert those elements the above content will be automatically handled\n * by the paragraph feature and converted to:\n *\n *\t\t<p>Foo</p>\n *\t\t<p>X</p>\n *\t\t<p>Y</p>\n *\t\t<p>Z</p>\n *\n * Note: The `<td>` containing two `<li>` elements was ignored as the innermost paragraph-like elements\n * have a priority upon conversion.\n *\n * @member {Set.<String>} module:paragraph/paragraph~Paragraph.paragraphLikeElements\n */\nParagraph.paragraphLikeElements = new Set( [\n\t'blockquote',\n\t'dd',\n\t'div',\n\t'dt',\n\t'h1',\n\t'h2',\n\t'h3',\n\t'h4',\n\t'h5',\n\t'h6',\n\t'li',\n\t'p',\n\t'td'\n] );\n\nfunction wrapInParagraph( input, position, conversionApi ) {\n\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n\n\tconversionApi.writer.insert( paragraph, position );\n\treturn conversionApi.convertItem( input, conversionApi.writer.createPositionAt( paragraph, 0 ) );\n}\n\nfunction isParagraphable( node, position, schema ) {\n\tconst context = schema.createContext( position );\n\n\t// When paragraph is allowed in this context...\n\tif ( !schema.checkChild( context, 'paragraph' ) ) {\n\t\treturn false;\n\t}\n\n\t// And a node would be allowed in this paragraph...\n\tif ( !schema.checkChild( context.push( 'paragraph' ), node ) ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module heading/headingcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The heading command. It is used by the {@link module:heading/heading~Heading heading feature} to apply headings.\n *\n * @extends module:core/command~Command\n */\nexport default class HeadingCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor Editor instance.\n\t * @param {Array.<String>} modelElements Names of the element which this command can apply in the model.\n\t */\n\tconstructor( editor, modelElements ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * If the selection starts in a heading (which {@link #modelElements is supported by this command})\n\t\t * the value is set to the name of that heading model element.\n\t\t * It is  set to `false` otherwise.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean|String} #value\n\t\t */\n\n\t\t/**\n\t\t * Set of defined model's elements names that this command support.\n\t\t * See {@link module:heading/heading~HeadingOption}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Array.<String>}\n\t\t */\n\t\tthis.modelElements = modelElements;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst block = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\tthis.value = !!block && this.modelElements.includes( block.name ) && block.name;\n\t\tthis.isEnabled = !!block && this.modelElements.some( heading => checkCanBecomeHeading( block, heading, this.editor.model.schema ) );\n\t}\n\n\t/**\n\t * Executes the command. Applies the heading to the selected blocks or, if the first selected\n\t * block is a heading already, turns selected headings (of this level only) to paragraphs.\n\t *\n\t * @param {Object} options\n\t * @param {String} options.value Name of the element which this command will apply in the model.\n\t * @fires execute\n\t */\n\texecute( options ) {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\n\t\tconst modelElement = options.value;\n\n\t\tmodel.change( writer => {\n\t\t\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t\t.filter( block => {\n\t\t\t\t\treturn checkCanBecomeHeading( block, modelElement, model.schema );\n\t\t\t\t} );\n\n\t\t\tfor ( const block of blocks ) {\n\t\t\t\tif ( !block.is( modelElement ) ) {\n\t\t\t\t\twriter.rename( block, modelElement );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Checks whether the given block can be replaced by a specific heading.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:heading/headingcommand~HeadingCommand#modelElement} heading Command element name in the model.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeHeading( block, heading, schema ) {\n\treturn schema.checkChild( block.parent, heading ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module heading/headingediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\nimport HeadingCommand from './headingcommand';\n\nimport priorities from '@ckeditor/ckeditor5-utils/src/priorities';\nimport { upcastElementToElement } from '@ckeditor/ckeditor5-engine/src/conversion/upcast-converters';\n\nconst defaultModelElement = 'paragraph';\n\n/**\n * The headings engine feature. It handles switching between block formats &ndash; headings and paragraph.\n * This class represents the engine part of the heading feature. See also {@link module:heading/heading~Heading}.\n * It introduces `heading1`-`headingN` commands which allow to convert paragraphs into headings.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HeadingEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'heading', {\n\t\t\toptions: [\n\t\t\t\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n\t\t\t\t{ model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n\t\t\t\t{ model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n\t\t\t\t{ model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Paragraph ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst options = editor.config.get( 'heading.options' );\n\n\t\tconst modelElements = [];\n\n\t\tfor ( const option of options ) {\n\t\t\t// Skip paragraph - it is defined in required Paragraph feature.\n\t\t\tif ( option.model !== defaultModelElement ) {\n\t\t\t\t// Schema.\n\t\t\t\teditor.model.schema.register( option.model, {\n\t\t\t\t\tinheritAllFrom: '$block'\n\t\t\t\t} );\n\n\t\t\t\teditor.conversion.elementToElement( option );\n\n\t\t\t\tmodelElements.push( option.model );\n\t\t\t}\n\t\t}\n\n\t\tthis._addDefaultH1Conversion( editor );\n\n\t\t// Register the heading command for this option.\n\t\teditor.commands.add( 'heading', new HeadingCommand( editor, modelElements ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\t// If the enter command is added to the editor, alter its behavior.\n\t\t// Enter at the end of a heading element should create a paragraph.\n\t\tconst editor = this.editor;\n\t\tconst enterCommand = editor.commands.get( 'enter' );\n\t\tconst options = editor.config.get( 'heading.options' );\n\n\t\tif ( enterCommand ) {\n\t\t\tthis.listenTo( enterCommand, 'afterExecute', ( evt, data ) => {\n\t\t\t\tconst positionParent = editor.model.document.selection.getFirstPosition().parent;\n\t\t\t\tconst isHeading = options.some( option => positionParent.is( option.model ) );\n\n\t\t\t\tif ( isHeading && !positionParent.is( defaultModelElement ) && positionParent.childCount === 0 ) {\n\t\t\t\t\tdata.writer.rename( positionParent, defaultModelElement );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Adds default conversion for `h1` -> `heading1` with a low priority.\n\t *\n\t * @private\n\t * @param {module:core/editor/editor~Editor} editor Editor instance on which to add the `h1` conversion.\n\t */\n\t_addDefaultH1Conversion( editor ) {\n\t\teditor.conversion.for( 'upcast' ).add( upcastElementToElement( {\n\t\t\tmodel: 'heading1',\n\t\t\tview: 'h1',\n\t\t\t// With a `low` priority, `paragraph` plugin autoparagraphing mechanism is executed. Make sure\n\t\t\t// this listener is called before it. If not, `h1` will be transformed into a paragraph.\n\t\t\tconverterPriority: priorities.get( 'low' ) + 1\n\t\t} ) );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/model\n */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport { extend } from 'lodash-es';\n\n/**\n * The base MVC model class.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class Model {\n\t/**\n\t * Creates a new Model instance.\n\t *\n\t * @param {Object} [attributes] The model state attributes to be defined during the instance creation.\n\t * @param {Object} [properties] The (out of state) properties to be appended to the instance during creation.\n\t */\n\tconstructor( attributes, properties ) {\n\t\t// Extend this instance with the additional (out of state) properties.\n\t\tif ( properties ) {\n\t\t\textend( this, properties );\n\t\t}\n\n\t\t// Initialize the attributes.\n\t\tif ( attributes ) {\n\t\t\tthis.set( attributes );\n\t\t}\n\t}\n}\n\nmix( Model, ObservableMixin );\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/dropdown/dropdownpanelview\n */\n\nimport View from '../view';\n\n/**\n * The dropdown panel view class.\n *\n * See {@link module:ui/dropdown/dropdownview~DropdownView} to learn about the common usage.\n *\n * @extends module:ui/view~View\n */\nexport default class DropdownPanelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Controls whether the panel is visible.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVisible\n\t\t */\n\t\tthis.set( 'isVisible', false );\n\n\t\t/**\n\t\t * The position of the panel, relative to the parent.\n\t\t *\n\t\t * This property is reflected in the CSS class set to {@link #element} that controls\n\t\t * the position of the panel.\n\t\t *\n\t\t * @observable\n\t\t * @default 'se'\n\t\t * @member {'se'|'sw'|'ne'|'nw'} #position\n\t\t */\n\t\tthis.set( 'position', 'se' );\n\n\t\t/**\n\t\t * Collection of the child views in this panel.\n\t\t *\n\t\t * A common child type is the {@link module:ui/list/listview~ListView} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n\t\t * See {@link module:ui/dropdown/utils~addListToDropdown} and\n\t\t * {@link module:ui/dropdown/utils~addToolbarToDropdown} to learn more about child views of dropdowns.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-reset',\n\t\t\t\t\t'ck-dropdown__panel',\n\t\t\t\t\tbind.to( 'position', value => `ck-dropdown__panel_${ value }` ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-dropdown__panel-visible' )\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\t// Drag and drop in the panel should not break the selection in the editor.\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/228\n\t\t\t\tselectstart: bind.to( evt => evt.preventDefault() )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the view element or first item in view collection on opening dropdown's panel.\n\t *\n\t * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n\t */\n\tfocus() {\n\t\tif ( this.children.length ) {\n\t\t\tthis.children.first.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Focuses the view element or last item in view collection on opening dropdown's panel.\n\t *\n\t * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n\t */\n\tfocusLast() {\n\t\tif ( this.children.length ) {\n\t\t\tconst lastChild = this.children.last;\n\n\t\t\tif ( typeof lastChild.focusLast === 'function' ) {\n\t\t\t\tlastChild.focusLast();\n\t\t\t} else {\n\t\t\t\tlastChild.focus();\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/dropdown/dropdownview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\nimport '../../theme/components/dropdown/dropdown.css';\n\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\n\n/**\n * The dropdown view class. It manages the dropdown button and dropdown panel.\n *\n * In most cases, the easiest way to create a dropdown is by using the {@link module:ui/dropdown/utils~createDropdown}\n * util:\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n *\t\t// Will render a dropdown with a panel containing a \"Content of the panel\" text.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * If you want to add a richer content to the dropdown panel, you can use the {@link module:ui/dropdown/utils~addListToDropdown}\n * and {@link module:ui/dropdown/utils~addToolbarToDropdown} helpers. See more examples in\n * {@link module:ui/dropdown/utils~createDropdown} documentation.\n *\n * If you want to create a completely custom dropdown, then you can compose it manually:\n *\n *\t\tconst button = new DropdownButtonView( locale );\n *\t\tconst panel = new DropdownPanelView( locale );\n *\t\tconst dropdown = new DropdownView( locale, button, panel );\n *\n *\t\tbutton.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\tpanel.element.textContent = 'Content of the panel';\n *\n *\t\t// Will render a dropdown with a panel containing a \"Content of the panel\" text.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * However, dropdown created this way will contain little behavior. You will need to implement handlers for actions\n * such as {@link module:ui/bindings/clickoutsidehandler~clickOutsideHandler clicking outside an open dropdown}\n * (which should close it) and support for arrow keys inside the panel. Therefore, unless you really know what\n * you do and you really need to do it, it is recommended to use the {@link module:ui/dropdown/utils~createDropdown} helper.\n *\n * @extends module:ui/view~View\n */\nexport default class DropdownView extends View {\n\t/**\n\t * Creates an instance of the dropdown.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} [locale] The localization services instance.\n\t * @param {module:ui/dropdown/button/dropdownbutton~DropdownButton} buttonView\n\t * @param {module:ui/dropdown/dropdownpanelview~DropdownPanelView} panelView\n\t */\n\tconstructor( locale, buttonView, panelView ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Button of the dropdown view. Clicking the button opens the {@link #panelView}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/button/buttonview~ButtonView} #buttonView\n\t\t */\n\t\tthis.buttonView = buttonView;\n\n\t\t/**\n\t\t * Panel of the dropdown. It opens when the {@link #buttonView} is\n\t\t * {@link module:ui/button/buttonview~ButtonView#event:execute executed} (i.e. clicked).\n\t\t *\n\t\t * Child views can be added to the panel's `children` collection:\n\t\t *\n\t\t *\t\tdropdown.panelView.children.add( childView );\n\t\t *\n\t\t * See {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#children} and\n\t\t * {@link module:ui/viewcollection~ViewCollection#add}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/dropdown/dropdownpanelview~DropdownPanelView} #panelView\n\t\t */\n\t\tthis.panelView = panelView;\n\n\t\t/**\n\t\t * Controls whether the dropdown view is open, i.e. shows or hides the {@link #panelView panel}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isOpen\n\t\t */\n\t\tthis.set( 'isOpen', false );\n\n\t\t/**\n\t\t * Controls whether the dropdown is enabled, i.e. it can be clicked and execute an action.\n\t\t *\n\t\t * See {@link module:ui/button/buttonview~ButtonView#isEnabled}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isEnabled\n\t\t */\n\t\tthis.set( 'isEnabled', true );\n\n\t\t/**\n\t\t * (Optional) The additional CSS class set on the dropdown {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n\t\tthis.set( 'class' );\n\n\t\t/**\n\t\t * The position of the panel, relative to the dropdown.\n\t\t *\n\t\t * **Note**: When `'auto'`, the panel will use one of the remaining positions to stay\n\t\t * in the viewport, visible to the user. The positions correspond directly to\n\t\t * {@link module:ui/dropdown/dropdownview~DropdownView.defaultPanelPositions default panel positions}.\n\t\t *\n\t\t * **Note**: This value has an impact on the\n\t\t * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#position} property\n\t\t * each time the panel becomes {@link #isOpen open}.\n\t\t *\n\t\t * @observable\n\t\t * @default 'auto'\n\t\t * @member {'auto'|'se'|'sw'|'ne'|'nw'} #panelPosition\n\t\t */\n\t\tthis.set( 'panelPosition', 'auto' );\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the dropdown.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}. It manages\n\t\t * keystrokes of the dropdown:\n\t\t *\n\t\t * * <kbd>▼</kbd> opens the dropdown,\n\t\t * * <kbd>◀</kbd> and <kbd>Esc</kbd> closes the dropdown.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-dropdown',\n\t\t\t\t\tbind.to( 'class' ),\n\t\t\t\t\tbind.if( 'isEnabled', 'ck-disabled', value => !value )\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\tbuttonView,\n\t\t\t\tpanelView\n\t\t\t]\n\t\t} );\n\n\t\tbuttonView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-dropdown__button',\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * A child {@link module:ui/list/listview~ListView list view} of the dropdown located\n\t\t * in its {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/list/listview~ListView} #listView\n\t\t */\n\n\t\t/**\n\t\t * A child toolbar of the dropdown located in the\n\t\t * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addToolbarToDropdown}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/toolbar/toolbarview~ToolbarView} #toolbarView\n\t\t */\n\n\t\t/**\n\t\t * Fired when the toolbar button or list item is executed.\n\t\t *\n\t\t * For {@link #listView} It fires when a child of some {@link module:ui/list/listitemview~ListItemView}\n\t\t * fired `execute`.\n\t\t *\n\t\t * For {@link #toolbarView} It fires when one of the buttons has been\n\t\t * {@link module:ui/button/buttonview~ButtonView#event:execute executed}.\n\t\t *\n\t\t * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}\n\t\t * or {@link module:ui/dropdown/utils~addToolbarToDropdown}.\n\t\t *\n\t\t * @event execute\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Toggle the dropdown when its button has been clicked.\n\t\tthis.listenTo( this.buttonView, 'open', () => {\n\t\t\tthis.isOpen = !this.isOpen;\n\t\t} );\n\n\t\t// Toggle the visibility of the panel when the dropdown becomes open.\n\t\tthis.panelView.bind( 'isVisible' ).to( this, 'isOpen' );\n\n\t\t// Let the dropdown control the position of the panel. The position must\n\t\t// be updated every time the dropdown is open.\n\t\tthis.on( 'change:isOpen', () => {\n\t\t\tif ( !this.isOpen ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If \"auto\", find the best position of the panel to fit into the viewport.\n\t\t\t// Otherwise, simply assign the static position.\n\t\t\tif ( this.panelPosition === 'auto' ) {\n\t\t\t\tconst defaultPanelPositions = DropdownView.defaultPanelPositions;\n\n\t\t\t\tthis.panelView.position = getOptimalPosition( {\n\t\t\t\t\telement: this.panelView.element,\n\t\t\t\t\ttarget: this.buttonView.element,\n\t\t\t\t\tfitInViewport: true,\n\t\t\t\t\tpositions: [\n\t\t\t\t\t\tdefaultPanelPositions.southEast,\n\t\t\t\t\t\tdefaultPanelPositions.southWest,\n\t\t\t\t\t\tdefaultPanelPositions.northEast,\n\t\t\t\t\t\tdefaultPanelPositions.northWest\n\t\t\t\t\t]\n\t\t\t\t} ).name;\n\t\t\t} else {\n\t\t\t\tthis.panelView.position = this.panelPosition;\n\t\t\t}\n\t\t} );\n\n\t\t// Listen for keystrokes coming from within #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\n\t\t// Register #element in the focus tracker.\n\t\tthis.focusTracker.add( this.element );\n\n\t\tconst closeDropdown = ( data, cancel ) => {\n\t\t\tif ( this.isOpen ) {\n\t\t\t\tthis.buttonView.focus();\n\t\t\t\tthis.isOpen = false;\n\t\t\t\tcancel();\n\t\t\t}\n\t\t};\n\n\t\t// Open the dropdown panel using the arrow down key, just like with return or space.\n\t\tthis.keystrokes.set( 'arrowdown', ( data, cancel ) => {\n\t\t\t// Don't open if the dropdown is disabled or already open.\n\t\t\tif ( this.buttonView.isEnabled && !this.isOpen ) {\n\t\t\t\tthis.isOpen = true;\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\n\t\t// Block the right arrow key (until nested dropdowns are implemented).\n\t\tthis.keystrokes.set( 'arrowright', ( data, cancel ) => {\n\t\t\tif ( this.isOpen ) {\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\n\t\t// Close the dropdown using the arrow left/escape key.\n\t\tthis.keystrokes.set( 'arrowleft', closeDropdown );\n\t\tthis.keystrokes.set( 'esc', closeDropdown );\n\t}\n\n\t/**\n\t * Focuses the {@link #buttonView}.\n\t */\n\tfocus() {\n\t\tthis.buttonView.focus();\n\t}\n}\n\n/**\n * A set of positioning functions used by the dropdown view to determine\n * the optimal position (i.e. fitting into the browser viewport) of its\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel} when\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition} is set to 'auto'`.\n *\n * The available positioning functions are as follow:\n *\n * **South**\n *\n * * `southEast`\n *\n *\t\t[ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * * `southWest`\n *\n *\t\t         [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * **North**\n *\n * * `northEast`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t[ Button ]\n *\n * * `northWest`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t         [ Button ]\n *\n * Positioning functions are compatible with {@link module:utils/dom/position~Position}.\n *\n * The name that position function returns will be reflected in dropdown panel's class that\n * controls its placement. See {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition}\n * to learn more.\n *\n * @member {Object} module:ui/dropdown/dropdownview~DropdownView.defaultPanelPositions\n */\nDropdownView.defaultPanelPositions = {\n\tsouthEast: buttonRect => {\n\t\treturn {\n\t\t\ttop: buttonRect.bottom,\n\t\t\tleft: buttonRect.left,\n\t\t\tname: 'se'\n\t\t};\n\t},\n\tsouthWest: ( buttonRect, panelRect ) => {\n\t\treturn {\n\t\t\ttop: buttonRect.bottom,\n\t\t\tleft: buttonRect.left - panelRect.width + buttonRect.width,\n\t\t\tname: 'sw'\n\t\t};\n\t},\n\tnorthEast: ( buttonRect, panelRect ) => {\n\t\treturn {\n\t\t\ttop: buttonRect.top - panelRect.height,\n\t\t\tleft: buttonRect.left,\n\t\t\tname: 'ne'\n\t\t};\n\t},\n\tnorthWest: ( buttonRect, panelRect ) => {\n\t\treturn {\n\t\t\ttop: buttonRect.bottom - panelRect.height,\n\t\t\tleft: buttonRect.left - panelRect.width + buttonRect.width,\n\t\t\tname: 'nw'\n\t\t};\n\t}\n};\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/dropdown/button/dropdownbuttonview\n */\n\nimport ButtonView from '../../button/buttonview';\n\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport IconView from '../../icon/iconview';\n\n/**\n * The default dropdown button view class.\n *\n *\t\tconst view = new DropdownButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n *\n * @implements module:ui/dropdown/button/dropdownbutton~DropdownButton\n * @extends module:ui/button/buttonview~ButtonView\n */\nexport default class DropdownButtonView extends ButtonView {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * An icon that displays arrow to indicate a dropdown button.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/icon/iconview~IconView}\n\t\t */\n\t\tthis.arrowView = this._createArrowView();\n\n\t\tthis.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\t'aria-haspopup': true\n\t\t\t}\n\t\t} );\n\n\t\t// The DropdownButton interface expects the open event upon which will open the dropdown.\n\t\tthis.delegate( 'execute' ).to( this, 'open' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.children.add( this.arrowView );\n\t}\n\n\t/**\n\t * Creates a {@link module:ui/icon/iconview~IconView} instance as {@link #arrowView}.\n\t *\n\t * @private\n\t * @returns {module:ui/icon/iconview~IconView}\n\t */\n\t_createArrowView() {\n\t\tconst arrowView = new IconView();\n\n\t\tarrowView.content = dropdownArrowIcon;\n\n\t\tarrowView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-dropdown__arrow'\n\t\t\t}\n\t\t} );\n\n\t\treturn arrowView;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/list/listview\n */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n\nimport '../../theme/components/list/list.css';\n\n/**\n * The list view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ListView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Collection of the child list views.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * Helps cycling over focusable {@link #items} in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.items,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate list items backwards using the arrowup key.\n\t\t\t\tfocusPrevious: 'arrowup',\n\n\t\t\t\t// Navigate toolbar items forwards using the arrowdown key.\n\t\t\t\tfocusNext: 'arrowdown',\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'ul',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-reset',\n\t\t\t\t\t'ck-list'\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.items\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Items added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\t/**\n\t * Focuses the first focusable in {@link #items}.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Focuses the last focusable in {@link #items}.\n\t */\n\tfocusLast() {\n\t\tthis._focusCycler.focusLast();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/list/listitemview\n */\n\nimport View from '../view';\n\n/**\n * The list item view class.\n *\n * @extends module:ui/view~View\n */\nexport default class ListItemView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * Collection of the child views inside of the list item {@link #element}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'li',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-list__item'\n\t\t\t\t]\n\t\t\t},\n\n\t\t\tchildren: this.children\n\t\t} );\n\t}\n\n\t/**\n\t * Focuses the list item.\n\t */\n\tfocus() {\n\t\tthis.children.first.focus();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/list/listseparatorview\n */\n\nimport View from '../view';\n\n/**\n * The list separator view class.\n *\n * @extends module:ui/view~View\n */\nexport default class ListSeparatorView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'li',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-list__separator'\n\t\t\t\t]\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/button/switchbuttonview\n */\n\nimport View from '../view';\nimport ButtonView from './buttonview';\n\nimport '../../theme/components/button/switchbutton.css';\n\n/**\n * The switch button view class.\n *\n *\t\tconst view = new SwitchButtonView();\n *\n *\t\tview.set( {\n *\t\t\twithText: true,\n *\t\t\tlabel: 'Switch me!'\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * @extends module:ui/buttonview~ButtonView\n */\nexport default class SwitchButtonView extends ButtonView {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The toggle switch of the button.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #toggleSwitchView\n\t\t */\n\t\tthis.toggleSwitchView = this._createToggleView();\n\n\t\tthis.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-switchbutton'\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.children.add( this.toggleSwitchView );\n\t}\n\n\t/**\n\t * Creates a toggle child view.\n\t *\n\t * @private\n\t * @returns {module:ui/view~View}\n\t */\n\t_createToggleView() {\n\t\tconst toggleSwitchView = new View();\n\n\t\ttoggleSwitchView.setTemplate( {\n\t\t\ttag: 'span',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-button__toggle'\n\t\t\t\t],\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'span',\n\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [\n\t\t\t\t\t\t\t'ck',\n\t\t\t\t\t\t\t'ck-button__toggle__inner'\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn toggleSwitchView;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/bindings/clickoutsidehandler\n */\n\n/* global document */\n\n/**\n * Handles clicking **outside** of a specified set of elements, then fires an action.\n *\n * **Note**: Actually, the action is executed upon `mousedown`, not `click`. It prevents\n * certain issues when the user keeps holding the mouse button and the UI cannot react\n * properly.\n *\n * @param {Object} options Configuration options.\n * @param {module:utils/dom/emittermixin~Emitter} options.emitter The emitter to which this behavior\n * should be added.\n * @param {Function} options.activator Function returning a `Boolean`, to determine whether the handler is active.\n * @param {Array.<HTMLElement>} options.contextElements HTML elements that determine the scope of the\n * handler. Clicking any of them or their descendants will **not** fire the callback.\n * @param {Function} options.callback An action executed by the handler.\n */\nexport default function clickOutsideHandler( { emitter, activator, callback, contextElements } ) {\n\temitter.listenTo( document, 'mousedown', ( evt, { target } ) => {\n\t\tif ( !activator() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const contextElement of contextElements ) {\n\t\t\tif ( contextElement.contains( target ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tcallback();\n\t} );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/dropdown/utils\n */\n\nimport DropdownPanelView from './dropdownpanelview';\nimport DropdownView from './dropdownview';\nimport DropdownButtonView from './button/dropdownbuttonview';\nimport ToolbarView from '../toolbar/toolbarview';\nimport ListView from '../list/listview';\nimport ListItemView from '../list/listitemview';\nimport ListSeparatorView from '../list/listseparatorview';\nimport ButtonView from '../button/buttonview';\nimport SwitchButtonView from '../button/switchbuttonview';\n\nimport clickOutsideHandler from '../bindings/clickoutsidehandler';\n\nimport '../../theme/components/dropdown/toolbardropdown.css';\nimport '../../theme/components/dropdown/listdropdown.css';\n\n/**\n * A helper for creating dropdowns. It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown},\n * with a {@link module:ui/dropdown/button/dropdownbutton~DropdownButton button},\n * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView panel} and all standard dropdown's behaviors.\n *\n * # Creating dropdowns\n *\n * By default, the default {@link module:ui/dropdown/button/dropdownbuttonview~DropdownButtonView} class is used as\n * definition of the button:\n *\n *\t\tconst dropdown = createDropdown( model );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * You can also provide other button views (they need to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface). For instance, you can use\n * {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} to create a dropdown with a split button.\n *\n *\t\tconst dropdown = createDropdown( model, SplitButtonView );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.buttonView.on( 'execute', () => {\n *\t\t\t// Add the behavior of the \"action part\" of the split button.\n *\t\t\t// Split button consists of the \"action part\" and \"arrow part\".\n *\t\t\t// The arrow opens the dropdown while the action part can have some other behavior.\n * \t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * # Adding content to the dropdown's panel\n *\n * The content of the panel can be inserted directly into the `dropdown.panelView.element`:\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n * However, most of the time you will want to add there either a {@link module:ui/list/listview~ListView list of options}\n * or a list of buttons (i.e. a {@link module:ui/toolbar/toolbarview~ToolbarView toolbar}).\n * To simplify the task, you can use, respectively, {@link module:ui/dropdown/utils~addListToDropdown} or\n * {@link module:ui/dropdown/utils~addToolbarToDropdown} utils.\n *\n * @param {module:utils/locale~Locale} locale The locale instance.\n * @param {Function} ButtonClass The dropdown button view class. Needs to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface.\n * @returns {module:ui/dropdown/dropdownview~DropdownView} The dropdown view instance.\n */\nexport function createDropdown( locale, ButtonClass = DropdownButtonView ) {\n\tconst buttonView = new ButtonClass( locale );\n\n\tconst panelView = new DropdownPanelView( locale );\n\tconst dropdownView = new DropdownView( locale, buttonView, panelView );\n\n\tbuttonView.bind( 'isEnabled' ).to( dropdownView );\n\n\tif ( buttonView instanceof DropdownButtonView ) {\n\t\tbuttonView.bind( 'isOn' ).to( dropdownView, 'isOpen' );\n\t} else {\n\t\tbuttonView.arrowView.bind( 'isOn' ).to( dropdownView, 'isOpen' );\n\t}\n\n\taddDefaultBehavior( dropdownView );\n\n\treturn dropdownView;\n}\n\n/**\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\n *\n *\t\tconst buttons = [];\n *\n *\t\t// Either create a new ButtonView instance or create existing.\n *\t\tbuttons.push( new ButtonView() );\n *\t\tbuttons.push( editor.ui.componentFactory.get( 'someButton' ) );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddToolbarToDropdown( dropdown, buttons );\n *\n *\t\tdropdown.toolbarView.isVertical = true;\n *\n *\t\t// Will render a vertical button dropdown labeled \"A button dropdown\"\n *\t\t// with a button group in the panel containing two buttons.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ToolbarView` will be added.\n * @param {Iterable.<module:ui/button/buttonview~ButtonView>} buttons\n */\nexport function addToolbarToDropdown( dropdownView, buttons ) {\n\tconst toolbarView = dropdownView.toolbarView = new ToolbarView();\n\n\tdropdownView.extendTemplate( {\n\t\tattributes: {\n\t\t\tclass: [ 'ck-toolbar-dropdown' ]\n\t\t}\n\t} );\n\n\tbuttons.map( view => toolbarView.items.add( view ) );\n\n\tdropdownView.panelView.children.add( toolbarView );\n\ttoolbarView.items.delegate( 'execute' ).to( dropdownView );\n}\n\n/**\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\n *\n *\t\tconst items = new Collection();\n *\n *\t\titems.add( {\n *\t\t\ttype: 'button',\n *\t\t\tmodel: new Model( {\n *\t\t\t\twithText: true,\n *\t\t\t\tlabel: 'First item',\n *\t\t\t\tlabelStyle: 'color: red'\n *\t\t\t} )\n *\t\t} );\n *\n *\t\titems.add( {\n *\t\t\t type: 'button',\n *\t\t\t model: new Model( {\n *\t\t\t\twithText: true,\n *\t\t\t\tlabel: 'Second item',\n *\t\t\t\tlabelStyle: 'color: green',\n *\t\t\t\tclass: 'foo'\n *\t\t\t} )\n *\t\t} );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddListToDropdown( dropdown, items );\n *\n *\t\t// Will render a dropdown with a list in the panel containing two items.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * The `items` collection passed to this methods controls the presence and attributes of respective\n * {@link module:ui/list/listitemview~ListItemView list items}.\n *\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:list/list~List}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ListVIew` will be added.\n * @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} items\n * A collection of the list item definitions to populate the list.\n */\nexport function addListToDropdown( dropdownView, items ) {\n\tconst locale = dropdownView.locale;\n\tconst listView = dropdownView.listView = new ListView( locale );\n\n\tlistView.items.bindTo( items ).using( ( { type, model } ) => {\n\t\tif ( type === 'separator' ) {\n\t\t\treturn new ListSeparatorView( locale );\n\t\t} else if ( type === 'button' || type === 'switchbutton' ) {\n\t\t\tconst listItemView = new ListItemView( locale );\n\t\t\tlet buttonView;\n\n\t\t\tif ( type === 'button' ) {\n\t\t\t\tbuttonView = new ButtonView( locale );\n\t\t\t} else {\n\t\t\t\tbuttonView = new SwitchButtonView( locale );\n\t\t\t}\n\n\t\t\t// Bind all model properties to the button view.\n\t\t\tbuttonView.bind( ...Object.keys( model ) ).to( model );\n\t\t\tbuttonView.delegate( 'execute' ).to( listItemView );\n\n\t\t\tlistItemView.children.add( buttonView );\n\n\t\t\treturn listItemView;\n\t\t}\n\t} );\n\n\tdropdownView.panelView.children.add( listView );\n\n\tlistView.items.delegate( 'execute' ).to( dropdownView );\n}\n\n// Add a set of default behaviors to dropdown view.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction addDefaultBehavior( dropdownView ) {\n\tcloseDropdownOnBlur( dropdownView );\n\tcloseDropdownOnExecute( dropdownView );\n\tfocusDropdownContentsOnArrows( dropdownView );\n}\n\n// Adds a behavior to a dropdownView that closes opened dropdown when user clicks outside the dropdown.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnBlur( dropdownView ) {\n\tdropdownView.on( 'render', () => {\n\t\tclickOutsideHandler( {\n\t\t\temitter: dropdownView,\n\t\t\tactivator: () => dropdownView.isOpen,\n\t\t\tcallback: () => {\n\t\t\t\tdropdownView.isOpen = false;\n\t\t\t},\n\t\t\tcontextElements: [ dropdownView.element ]\n\t\t} );\n\t} );\n}\n\n// Adds a behavior to a dropdownView that closes the dropdown view on \"execute\" event.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnExecute( dropdownView ) {\n\t// Close the dropdown when one of the list items has been executed.\n\tdropdownView.on( 'execute', evt => {\n\t\t// Toggling a switch button view should not close the dropdown.\n\t\tif ( evt.source instanceof SwitchButtonView ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdropdownView.isOpen = false;\n\t} );\n}\n\n// Adds a behavior to a dropdownView that focuses the dropdown's panel view contents on keystrokes.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction focusDropdownContentsOnArrows( dropdownView ) {\n\t// If the dropdown panel is already open, the arrow down key should focus the first child of the #panelView.\n\tdropdownView.keystrokes.set( 'arrowdown', ( data, cancel ) => {\n\t\tif ( dropdownView.isOpen ) {\n\t\t\tdropdownView.panelView.focus();\n\t\t\tcancel();\n\t\t}\n\t} );\n\n\t// If the dropdown panel is already open, the arrow up key should focus the last child of the #panelView.\n\tdropdownView.keystrokes.set( 'arrowup', ( data, cancel ) => {\n\t\tif ( dropdownView.isOpen ) {\n\t\t\tdropdownView.panelView.focusLast();\n\t\t\tcancel();\n\t\t}\n\t} );\n}\n\n/**\n * A definition of the list item used by the {@link module:ui/dropdown/utils~addListToDropdown}\n * utility.\n *\n * @typedef {Object} module:ui/dropdown/utils~ListDropdownItemDefinition\n *\n * @property {String} type Either `'separator'`, `'button'` or `'switchbutton'`.\n * @property {module:ui/model~Model} [model] Model of the item (when **not** `'separator'`).\n * Its properties fuel the newly created list item (or its children, depending on the `type`).\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module heading/headingui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport {\n    createDropdown,\n    addListToDropdown\n} from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport { getLocalizedOptions } from './utils';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport '../theme/heading.css';\n/**\n * The headings UI feature. It introduces the `headings` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HeadingUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = getLocalizedOptions(editor);\n        const defaultTitle = t('e');\n        const dropdownTooltip = t('f');\n        // Register UI component.\n        editor.ui.componentFactory.add('heading', locale => {\n            const titles = {};\n            const itemDefinitions = new Collection();\n            const headingCommand = editor.commands.get('heading');\n            const paragraphCommand = editor.commands.get('paragraph');\n            const commands = [headingCommand];\n            for (const option of options) {\n                const def = {\n                    type: 'button',\n                    model: new Model({\n                        label: option.title,\n                        class: option.class,\n                        withText: true\n                    })\n                };\n                if (option.model === 'paragraph') {\n                    def.model.bind('isOn').to(paragraphCommand, 'value');\n                    def.model.set('commandName', 'paragraph');\n                    commands.push(paragraphCommand);\n                } else {\n                    def.model.bind('isOn').to(headingCommand, 'value', value => value === option.model);\n                    def.model.set({\n                        commandName: 'heading',\n                        commandValue: option.model\n                    });\n                }\n                // Add the option to the collection.\n                itemDefinitions.add(def);\n                titles[option.model] = option.title;\n            }\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, itemDefinitions);\n            dropdownView.buttonView.set({\n                isOn: false,\n                withText: true,\n                tooltip: dropdownTooltip\n            });\n            dropdownView.extendTemplate({ attributes: { class: ['ck-heading-dropdown'] } });\n            dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n                return areEnabled.some(isEnabled => isEnabled);\n            });\n            dropdownView.buttonView.bind('label').to(headingCommand, 'value', paragraphCommand, 'value', (value, para) => {\n                const whichModel = value || para && 'paragraph';\n                // If none of the commands is active, display default title.\n                return titles[whichModel] ? titles[whichModel] : defaultTitle;\n            });\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', evt => {\n                editor.execute(evt.source.commandName, evt.source.commandValue ? { value: evt.source.commandValue } : undefined);\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n}","/**\n * Returns heading options as defined in `config.heading.options` but processed to consider\n * editor localization, i.e. to display {@link module:heading/heading~HeadingOption}\n * in the correct language.\n *\n * Note: The reason behind this method is that there's no way to use {@link module:utils/locale~Locale#t}\n * when the user config is defined because the editor does not exist yet.\n *\n * @param {module:core/editor/editor~Editor} editor\n * @returns {Array.<module:heading/heading~HeadingOption>}.\n */\nexport function getLocalizedOptions(editor) {\n    const t = editor.t;\n    const localizedTitles = {\n        Paragraph: t('ak'),\n        'Heading 1': t('al'),\n        'Heading 2': t('am'),\n        'Heading 3': t('an')\n    };\n    return editor.config.get('heading.options').map(option => {\n        const title = localizedTitles[option.title];\n        if (title && title != option.title) {\n            // Clone the option to avoid altering the original `config.heading.options`.\n            option = Object.assign({}, option, { title });\n        }\n        return option;\n    });\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module list/listcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The list command. It is used by the {@link module:list/list~List list feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class ListCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {'numbered'|'bulleted'} type List type that will be handled by this command.\n\t */\n\tconstructor( editor, type ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The type of the list created by the command.\n\t\t *\n\t\t * @readonly\n\t\t * @member {'numbered'|'bulleted'}\n\t\t */\n\t\tthis.type = type == 'bulleted' ? 'bulleted' : 'numbered';\n\n\t\t/**\n\t\t * A flag indicating whether the command is active, which means that the selection starts in a list of the same type.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.value = this._getValue();\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @protected\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst blocks = Array.from( document.selection.getSelectedBlocks() )\n\t\t\t.filter( block => checkCanBecomeListItem( block, model.schema ) );\n\n\t\t// Whether we are turning off some items.\n\t\tconst turnOff = this.value === true;\n\t\t// If we are turning off items, we are going to rename them to paragraphs.\n\n\t\tmodel.change( writer => {\n\t\t\t// If part of a list got turned off, we need to handle (outdent) all of sub-items of the last turned-off item.\n\t\t\t// To be sure that model is all the time in a good state, we first fix items below turned-off item.\n\t\t\tif ( turnOff ) {\n\t\t\t\t// Start from the model item that is just after the last turned-off item.\n\t\t\t\tlet next = blocks[ blocks.length - 1 ].nextSibling;\n\t\t\t\tlet currentIndent = Number.POSITIVE_INFINITY;\n\t\t\t\tlet changes = [];\n\n\t\t\t\t// Correct indent of all items after the last turned off item.\n\t\t\t\t// Rules that should be followed:\n\t\t\t\t// 1. All direct sub-items of turned-off item should become indent 0, because the first item after it\n\t\t\t\t//    will be the first item of a new list. Other items are at the same level, so should have same 0 index.\n\t\t\t\t// 2. All items with indent lower than indent of turned-off item should become indent 0, because they\n\t\t\t\t//    should not end up as a child of any of list items that they were not children of before.\n\t\t\t\t// 3. All other items should have their indent changed relatively to it's parent.\n\t\t\t\t//\n\t\t\t\t// For example:\n\t\t\t\t// 1  * --------\n\t\t\t\t// 2     * --------\n\t\t\t\t// 3        * --------\t\t\t<-- this is turned off.\n\t\t\t\t// 4           * --------\t\t<-- this has to become indent = 0, because it will be first item on a new list.\n\t\t\t\t// 5              * --------\t<-- this should be still be a child of item above, so indent = 1.\n\t\t\t\t// 6        * --------\t\t\t<-- this has to become indent = 0, because it should not be a child of any of items above.\n\t\t\t\t// 7           * --------\t\t<-- this should be still be a child of item above, so indent = 1.\n\t\t\t\t// 8     * --------\t\t\t\t<-- this has to become indent = 0.\n\t\t\t\t// 9        * --------\t\t\t<-- this should still be a child of item above, so indent = 1.\n\t\t\t\t// 10          * --------\t\t<-- this should still be a child of item above, so indent = 2.\n\t\t\t\t// 11          * --------\t\t<-- this should still be at the same level as item above, so indent = 2.\n\t\t\t\t// 12 * --------\t\t\t\t<-- this and all below are left unchanged.\n\t\t\t\t// 13    * --------\n\t\t\t\t// 14       * --------\n\t\t\t\t//\n\t\t\t\t// After turning off 3 the list becomes:\n\t\t\t\t//\n\t\t\t\t// 1  * --------\n\t\t\t\t// 2     * --------\n\t\t\t\t//\n\t\t\t\t// 3  --------\n\t\t\t\t//\n\t\t\t\t// 4  * --------\n\t\t\t\t// 5     * --------\n\t\t\t\t// 6  * --------\n\t\t\t\t// 7     * --------\n\t\t\t\t// 8  * --------\n\t\t\t\t// 9     * --------\n\t\t\t\t// 10       * --------\n\t\t\t\t// 11       * --------\n\t\t\t\t// 12 * --------\n\t\t\t\t// 13    * --------\n\t\t\t\t// 14       * --------\n\t\t\t\t//\n\t\t\t\t// Thanks to this algorithm no lists are mismatched and no items get unexpected children/parent, while\n\t\t\t\t// those parent-child connection which are possible to maintain are still maintained. It's worth noting\n\t\t\t\t// that this is the same effect that we would be get by multiple use of outdent command. However doing\n\t\t\t\t// it like this is much more efficient because it's less operation (less memory usage, easier OT) and\n\t\t\t\t// less conversion (faster).\n\t\t\t\twhile ( next && next.name == 'listItem' && next.getAttribute( 'listIndent' ) !== 0 ) {\n\t\t\t\t\t// Check each next list item, as long as its indent is bigger than 0.\n\t\t\t\t\t// If the indent is 0 we are not going to change anything anyway.\n\t\t\t\t\tconst indent = next.getAttribute( 'listIndent' );\n\n\t\t\t\t\t// We check if that's item indent is lower as current relative indent.\n\t\t\t\t\tif ( indent < currentIndent ) {\n\t\t\t\t\t\t// If it is, current relative indent becomes that indent.\n\t\t\t\t\t\tcurrentIndent = indent;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fix indent relatively to current relative indent.\n\t\t\t\t\t// Note, that if we just changed the current relative indent, the newIndent will be equal to 0.\n\t\t\t\t\tconst newIndent = indent - currentIndent;\n\n\t\t\t\t\t// Save the entry in changes array. We do not apply it at the moment, because we will need to\n\t\t\t\t\t// reverse the changes so the last item is changed first.\n\t\t\t\t\t// This is to keep model in correct state all the time.\n\t\t\t\t\tchanges.push( { element: next, listIndent: newIndent } );\n\n\t\t\t\t\t// Find next item.\n\t\t\t\t\tnext = next.nextSibling;\n\t\t\t\t}\n\n\t\t\t\tchanges = changes.reverse();\n\n\t\t\t\tfor ( const item of changes ) {\n\t\t\t\t\twriter.setAttribute( 'listIndent', item.listIndent, item.element );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we are turning on, we might change some items that are already `listItem`s but with different type.\n\t\t\t// Changing one nested list item to other type should also trigger changing all its siblings so the\n\t\t\t// whole nested list is of the same type.\n\t\t\t// Example (assume changing to numbered list):\n\t\t\t// * ------\t\t\t\t<-- do not fix, top level item\n\t\t\t//   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- do not fix, item is not affected (different list)\n\t\t\t//   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- fix, because latter list item of this item's list is changed\n\t\t\t//      * ---[--\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- already in selection\n\t\t\t// * ------\t\t\t\t<-- already in selection, but does not cause other list items to change because is top-level\n\t\t\t//   * ---]--\t\t\t<-- already in selection\n\t\t\t//   * ------\t\t\t<-- fix, because preceding list item of this item's list is changed\n\t\t\t//      * ------\t\t<-- do not fix, item is not affected (different list)\n\t\t\t// * ------\t\t\t\t<-- do not fix, top level item\n\t\t\tif ( !turnOff ) {\n\t\t\t\t// Find lowest indent among selected items. This will be indicator what is the indent of\n\t\t\t\t// top-most list affected by the command.\n\t\t\t\tlet lowestIndent = Number.POSITIVE_INFINITY;\n\n\t\t\t\tfor ( const item of blocks ) {\n\t\t\t\t\tif ( item.is( 'listItem' ) && item.getAttribute( 'listIndent' ) < lowestIndent ) {\n\t\t\t\t\t\tlowestIndent = item.getAttribute( 'listIndent' );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Do not execute the fix for top-level lists.\n\t\t\t\tlowestIndent = lowestIndent === 0 ? 1 : lowestIndent;\n\n\t\t\t\t// Fix types of list items that are \"before\" the selected blocks.\n\t\t\t\t_fixType( blocks, true, lowestIndent );\n\n\t\t\t\t// Fix types of list items that are \"after\" the selected blocks.\n\t\t\t\t_fixType( blocks, false, lowestIndent );\n\t\t\t}\n\n\t\t\t// Phew! Now it will be easier :).\n\t\t\t// For each block element that was in the selection, we will either: turn it to list item,\n\t\t\t// turn it to paragraph, or change it's type. Or leave it as it is.\n\t\t\t// Do it in reverse as there might be multiple blocks (same as with changing indents).\n\t\t\tfor ( const element of blocks.reverse() ) {\n\t\t\t\tif ( turnOff && element.name == 'listItem' ) {\n\t\t\t\t\t// We are turning off and the element is a `listItem` - it should be converted to `paragraph`.\n\t\t\t\t\t// List item specific attributes are removed by post fixer.\n\t\t\t\t\twriter.rename( element, 'paragraph' );\n\t\t\t\t} else if ( !turnOff && element.name != 'listItem' ) {\n\t\t\t\t\t// We are turning on and the element is not a `listItem` - it should be converted to `listItem`.\n\t\t\t\t\t// The order of operations is important to keep model in correct state.\n\t\t\t\t\twriter.setAttributes( { listType: this.type, listIndent: 0 }, element );\n\t\t\t\t\twriter.rename( element, 'listItem' );\n\t\t\t\t} else if ( !turnOff && element.name == 'listItem' && element.getAttribute( 'listType' ) != this.type ) {\n\t\t\t\t\t// We are turning on and the element is a `listItem` but has different type - change it's type and\n\t\t\t\t\t// type of it's all siblings that have same indent.\n\t\t\t\t\twriter.setAttribute( 'listType', this.type, element );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @private\n\t * @returns {Boolean} The current value.\n\t */\n\t_getValue() {\n\t\t// Check whether closest `listItem` ancestor of the position has a correct type.\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\treturn !!listItem && listItem.is( 'listItem' ) && listItem.getAttribute( 'listType' ) == this.type;\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\t// If command value is true it means that we are in list item, so the command should be enabled.\n\t\tif ( this.value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst selection = this.editor.model.document.selection;\n\t\tconst schema = this.editor.model.schema;\n\n\t\tconst firstBlock = first( selection.getSelectedBlocks() );\n\n\t\tif ( !firstBlock ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Otherwise, check if list item can be inserted at the position start.\n\t\treturn checkCanBecomeListItem( firstBlock, schema );\n\t}\n}\n\n// Helper function used when one or more list item have their type changed. Fixes type of other list items\n// that are affected by the change (are in same lists) but are not directly in selection. The function got extracted\n// not to duplicated code, as same fix has to be performed before and after selection.\n//\n// @param {Array.<module:engine/model/node~Node>} blocks Blocks that are in selection.\n// @param {Boolean} isBackward Specified whether fix will be applied for blocks before first selected block (`true`)\n// or blocks after last selected block (`false`).\n// @param {Number} lowestIndent Lowest indent among selected blocks.\nfunction _fixType( blocks, isBackward, lowestIndent ) {\n\t// We need to check previous sibling of first changed item and next siblings of last changed item.\n\tconst startingItem = isBackward ? blocks[ 0 ] : blocks[ blocks.length - 1 ];\n\n\tif ( startingItem.is( 'listItem' ) ) {\n\t\tlet item = startingItem[ isBackward ? 'previousSibling' : 'nextSibling' ];\n\t\t// During processing items, keeps the lowest indent of already processed items.\n\t\t// This saves us from changing too many items.\n\t\t// Following example is for going forward as it is easier to read, however same applies to going backward.\n\t\t// * ------\n\t\t//   * ------\n\t\t//     * --[---\n\t\t//   * ------\t\t<-- `lowestIndent` should be 1\n\t\t//     * --]---\t\t<-- `startingItem`, `currentIndent` = 2, `lowestIndent` == 1\n\t\t//     * ------\t\t<-- should be fixed, `indent` == 2 == `currentIndent`\n\t\t//   * ------\t\t<-- should be fixed, set `currentIndent` to 1, `indent` == 1 == `currentIndent`\n\t\t//     * ------\t\t<-- should not be fixed, item is in different list, `indent` = 2, `indent` != `currentIndent`\n\t\t//   * ------\t\t<-- should be fixed, `indent` == 1 == `currentIndent`\n\t\t// * ------\t\t\t<-- break loop (`indent` < `lowestIndent`)\n\t\tlet currentIndent = startingItem.getAttribute( 'listIndent' );\n\n\t\t// Look back until a list item with indent lower than reference `lowestIndent`.\n\t\t// That would be the parent of nested sublist which contains item having `lowestIndent`.\n\t\twhile ( item && item.is( 'listItem' ) && item.getAttribute( 'listIndent' ) >= lowestIndent ) {\n\t\t\tif ( currentIndent > item.getAttribute( 'listIndent' ) ) {\n\t\t\t\tcurrentIndent = item.getAttribute( 'listIndent' );\n\t\t\t}\n\n\t\t\t// Found an item that is in the same nested sublist.\n\t\t\tif ( item.getAttribute( 'listIndent' ) == currentIndent ) {\n\t\t\t\t// Just add the item to selected blocks like it was selected by the user.\n\t\t\t\tblocks[ isBackward ? 'unshift' : 'push' ]( item );\n\t\t\t}\n\n\t\t\titem = item[ isBackward ? 'previousSibling' : 'nextSibling' ];\n\t\t}\n\t}\n}\n\n// Checks whether the given block can be replaced by a listItem.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\nfunction checkCanBecomeListItem( block, schema ) {\n\treturn schema.checkChild( block.parent, 'listItem' ) && !schema.isObject( block );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module list/indentcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The list indent command. It is used by the {@link module:list/list~List list feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class IndentCommand extends Command {\n\t/**\n\t * Creates an instance of the command.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor instance.\n\t * @param {'forward'|'backward'} indentDirection The direction of indent. If it is equal to `backward`, the command\n\t * will outdent a list item.\n\t */\n\tconstructor( editor, indentDirection ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * Determines by how much the command will change the list item's indent attribute.\n\t\t *\n\t\t * @readonly\n\t\t * @private\n\t\t * @member {Number}\n\t\t */\n\t\tthis._indentBy = indentDirection == 'forward' ? 1 : -1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this._checkEnabled();\n\t}\n\n\t/**\n\t * Indents or outdents (depends on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tlet itemsToChange = Array.from( doc.selection.getSelectedBlocks() );\n\n\t\tmodel.change( writer => {\n\t\t\tconst lastItem = itemsToChange[ itemsToChange.length - 1 ];\n\n\t\t\t// Indenting a list item should also indent all the items that are already sub-items of indented item.\n\t\t\tlet next = lastItem.nextSibling;\n\n\t\t\t// Check all items after last indented item, as long as their indent is bigger than indent of that item.\n\t\t\twhile ( next && next.name == 'listItem' && next.getAttribute( 'listIndent' ) > lastItem.getAttribute( 'listIndent' ) ) {\n\t\t\t\titemsToChange.push( next );\n\n\t\t\t\tnext = next.nextSibling;\n\t\t\t}\n\n\t\t\t// We need to be sure to keep model in correct state after each small change, because converters\n\t\t\t// bases on that state and assumes that model is correct.\n\t\t\t// Because of that, if the command outdents items, we will outdent them starting from the last item, as\n\t\t\t// it is safer.\n\t\t\tif ( this._indentBy < 0 ) {\n\t\t\t\titemsToChange = itemsToChange.reverse();\n\t\t\t}\n\n\t\t\tfor ( const item of itemsToChange ) {\n\t\t\t\tconst indent = item.getAttribute( 'listIndent' ) + this._indentBy;\n\n\t\t\t\t// If indent is lower than 0, it means that the item got outdented when it was not indented.\n\t\t\t\t// This means that we need to convert that list item to paragraph.\n\t\t\t\tif ( indent < 0 ) {\n\t\t\t\t\t// To keep the model as correct as possible, first rename listItem, then remove attributes,\n\t\t\t\t\t// as listItem without attributes is very incorrect and will cause problems in converters.\n\t\t\t\t\t// No need to remove attributes, will be removed by post fixer.\n\t\t\t\t\twriter.rename( item, 'paragraph' );\n\t\t\t\t}\n\t\t\t\t// If indent is >= 0, change the attribute value.\n\t\t\t\telse {\n\t\t\t\t\twriter.setAttribute( 'listIndent', indent, item );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */\n\t_checkEnabled() {\n\t\t// Check whether any of position's ancestor is a list item.\n\t\tconst listItem = first( this.editor.model.document.selection.getSelectedBlocks() );\n\n\t\t// If selection is not in a list item, the command is disabled.\n\t\tif ( !listItem || !listItem.is( 'listItem' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( this._indentBy > 0 ) {\n\t\t\t// Cannot indent first item in it's list. Check if before `listItem` is a list item that is in same list.\n\t\t\t// To be in the same list, the item has to have same attributes and cannot be \"split\" by an item with lower indent.\n\t\t\tconst indent = listItem.getAttribute( 'listIndent' );\n\t\t\tconst type = listItem.getAttribute( 'listType' );\n\n\t\t\tlet prev = listItem.previousSibling;\n\n\t\t\twhile ( prev && prev.is( 'listItem' ) && prev.getAttribute( 'listIndent' ) >= indent ) {\n\t\t\t\tif ( prev.getAttribute( 'listIndent' ) == indent ) {\n\t\t\t\t\t// The item is on the same level.\n\t\t\t\t\t// If it has same type, it means that we found a preceding sibling from the same list.\n\t\t\t\t\t// If it does not have same type, it means that `listItem` is on different list (this can happen only\n\t\t\t\t\t// on top level lists, though).\n\t\t\t\t\treturn prev.getAttribute( 'listType' ) == type;\n\t\t\t\t}\n\n\t\t\t\tprev = prev.previousSibling;\n\t\t\t}\n\n\t\t\t// Could not find similar list item, this means that `listItem` is first in its list.\n\t\t\treturn false;\n\t\t}\n\n\t\t// If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n\t\treturn true;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module list/utils\n */\n\nimport { getFillerOffset } from '@ckeditor/ckeditor5-engine/src/view/containerelement';\n\n/**\n * Creates list item {@link module:engine/view/containerelement~ContainerElement}.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer The writer instance.\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\nexport function createViewListItemElement( writer ) {\n\tconst viewItem = writer.createContainerElement( 'li' );\n\tviewItem.getFillerOffset = getListItemFillerOffset;\n\n\treturn viewItem;\n}\n\n// Implementation of getFillerOffset for view list item element.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getListItemFillerOffset() {\n\tconst hasOnlyLists = !this.isEmpty && ( this.getChild( 0 ).name == 'ul' || this.getChild( 0 ).name == 'ol' );\n\n\tif ( this.isEmpty || hasOnlyLists ) {\n\t\treturn 0;\n\t}\n\n\treturn getFillerOffset.call( this );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module list/converters\n */\n\nimport { createViewListItemElement } from './utils';\n\n/**\n * A model-to-view converter for `listItem` model element insertion.\n *\n * It creates a `<ul><li></li><ul>` (or `<ol>`) view structure out of a `listItem` model element, inserts it at the correct\n * position, and merges the list with surrounding lists (if available).\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\nexport function modelViewInsertion( model ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst consumable = conversionApi.consumable;\n\n\t\tif ( !consumable.test( data.item, 'insert' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listType' ) ||\n\t\t\t!consumable.test( data.item, 'attribute:listIndent' )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsumable.consume( data.item, 'insert' );\n\t\tconsumable.consume( data.item, 'attribute:listType' );\n\t\tconsumable.consume( data.item, 'attribute:listIndent' );\n\n\t\tconst modelItem = data.item;\n\t\tconst viewItem = generateLiInUl( modelItem, conversionApi );\n\n\t\tinjectViewList( modelItem, viewItem, conversionApi, model );\n\t};\n}\n\n/**\n * A model-to-view converter for `listItem` model element removal.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\nexport function modelViewRemove( model ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst viewStart = conversionApi.mapper.toViewPosition( data.position ).getLastMatchingPosition( value => !value.item.is( 'li' ) );\n\t\tconst viewItem = viewStart.nodeAfter;\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// 1. Break the container after and before the list item.\n\t\t// This will create a view list with one view list item - the one to remove.\n\t\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t\t// 2. Remove the list with the item to remove.\n\t\tconst viewList = viewItem.parent;\n\t\tconst viewListPrev = viewList.previousSibling;\n\t\tconst removeRange = viewWriter.createRangeOn( viewList );\n\t\tconst removed = viewWriter.remove( removeRange );\n\n\t\t// 3. Merge the whole created by breaking and removing the list.\n\t\tif ( viewListPrev && viewListPrev.nextSibling ) {\n\t\t\tmergeViewLists( viewWriter, viewListPrev, viewListPrev.nextSibling );\n\t\t}\n\n\t\t// 4. Bring back nested list that was in the removed <li>.\n\t\tconst modelItem = conversionApi.mapper.toModelElement( viewItem );\n\n\t\thoistNestedLists( modelItem.getAttribute( 'listIndent' ) + 1, data.position, removeRange.start, viewItem, conversionApi, model );\n\n\t\t// 5. Unbind removed view item and all children.\n\t\tfor ( const child of viewWriter.createRangeIn( removed ).getItems() ) {\n\t\t\tconversionApi.mapper.unbindViewElement( child );\n\t\t}\n\n\t\tevt.stop();\n\t};\n}\n\n/**\n * A model-to-view converter for `type` attribute change on `listItem` model element.\n *\n * This change means that `<li>` elements parent changes from `<ul>` to `<ol>` (or vice versa). This is accomplished\n * by breaking view elements, changing their name and merging them.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {Object} conversionApi Conversion interface.\n */\nexport function modelViewChangeType( evt, data, conversionApi ) {\n\tif ( !conversionApi.consumable.consume( data.item, 'attribute:listType' ) ) {\n\t\treturn;\n\t}\n\n\tconst viewItem = conversionApi.mapper.toViewElement( data.item );\n\tconst viewWriter = conversionApi.writer;\n\n\t// 1. Break the container after and before the list item.\n\t// This will create a view list with one view list item -- the one that changed type.\n\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t// 2. Change name of the view list that holds the changed view item.\n\t// We cannot just change name property, because that would not render properly.\n\tlet viewList = viewItem.parent;\n\tconst listName = data.attributeNewValue == 'numbered' ? 'ol' : 'ul';\n\tviewList = viewWriter.rename( listName, viewList );\n\n\t// 3. Merge the changed view list with other lists, if possible.\n\tmergeViewLists( viewWriter, viewList, viewList.nextSibling );\n\tmergeViewLists( viewWriter, viewList.previousSibling, viewList );\n\n\t// 4. Consumable insertion of children inside the item. They are already handled by re-building the item in view.\n\tfor ( const child of data.item.getChildren() ) {\n\t\tconversionApi.consumable.consume( child, 'insert' );\n\t}\n}\n\n/**\n * A model-to-view converter for `listIndent` attribute change on `listItem` model element.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\nexport function modelViewChangeIndent( model ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, 'attribute:listIndent' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewItem = conversionApi.mapper.toViewElement( data.item );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\t// 1. Break the container after and before the list item.\n\t\t// This will create a view list with one view list item -- the one that changed type.\n\t\tviewWriter.breakContainer( viewWriter.createPositionBefore( viewItem ) );\n\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\n\t\t// 2. Extract view list with changed view list item and merge \"hole\" possibly created by breaking and removing elements.\n\t\tconst viewList = viewItem.parent;\n\t\tconst viewListPrev = viewList.previousSibling;\n\t\tconst removeRange = viewWriter.createRangeOn( viewList );\n\t\tviewWriter.remove( removeRange );\n\n\t\tif ( viewListPrev && viewListPrev.nextSibling ) {\n\t\t\tmergeViewLists( viewWriter, viewListPrev, viewListPrev.nextSibling );\n\t\t}\n\n\t\t// 3. Bring back nested list that was in the removed <li>.\n\t\thoistNestedLists( data.attributeOldValue + 1, data.range.start, removeRange.start, viewItem, conversionApi, model );\n\n\t\t// 4. Inject view list like it is newly inserted.\n\t\tinjectViewList( data.item, viewItem, conversionApi, model );\n\n\t\t// 5. Consume insertion of children inside the item. They are already handled by re-building the item in view.\n\t\tfor ( const child of data.item.getChildren() ) {\n\t\t\tconversionApi.consumable.consume( child, 'insert' );\n\t\t}\n\t};\n}\n\n/**\n * A special model-to-view converter introduced by the {@link module:list/list~List list feature}. This converter is fired for\n * insert change of every model item, and should be fired before the actual converter. The converter checks whether the inserted\n * model item is a non-`listItem` element. If it is, and it is inserted inside a view list, the converter breaks the\n * list so the model element is inserted to the view parent element corresponding to its model parent element.\n *\n * The converter prevents such situations:\n *\n *\t\t// Model:                        // View:\n *\t\t<listItem>foo</listItem>         <ul>\n *\t\t<listItem>bar</listItem>             <li>foo</li>\n *\t\t                                     <li>bar</li>\n *\t\t                                 </ul>\n *\n *\t\t// After change:                 // Correct view guaranteed by this converter:\n *\t\t<listItem>foo</listItem>         <ul><li>foo</li></ul><p>xxx</p><ul><li>bar</li></ul>\n *\t\t<paragraph>xxx</paragraph>       // Instead of this wrong view state:\n *\t\t<listItem>bar</listItem>         <ul><li>foo</li><p>xxx</p><li>bar</li></ul>\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {Object} conversionApi Conversion interface.\n */\nexport function modelViewSplitOnInsert( evt, data, conversionApi ) {\n\tif ( data.item.name != 'listItem' ) {\n\t\tlet viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst lists = [];\n\n\t\t// Break multiple ULs/OLs if there are.\n\t\t//\n\t\t// Imagine following list:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//     1.1.2 --------\n\t\t//     1.1.3 --------\n\t\t//       1.1.3.1 --------\n\t\t//   1.2 --------\n\t\t//     1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\t// Insert paragraph after item 1.1.1:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//\n\t\t// Lorem ipsum.\n\t\t//\n\t\t//     1.1.2 --------\n\t\t//     1.1.3 --------\n\t\t//       1.1.3.1 --------\n\t\t//   1.2 --------\n\t\t//     1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\t// In this case 1.1.2 has to become beginning of a new list.\n\t\t// We need to break list before 1.1.2 (obvious), then we need to break list also before 1.2.\n\t\t// Then we need to move those broken pieces one after another and merge:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//     1.1.1 --------\n\t\t//\n\t\t// Lorem ipsum.\n\t\t//\n\t\t// 1.1.2 --------\n\t\t//   1.1.3 --------\n\t\t//     1.1.3.1 --------\n\t\t// 1.2 --------\n\t\t//   1.2.1 --------\n\t\t// 2 --------\n\t\t//\n\t\twhile ( viewPosition.parent.name == 'ul' || viewPosition.parent.name == 'ol' ) {\n\t\t\tviewPosition = viewWriter.breakContainer( viewPosition );\n\n\t\t\tif ( viewPosition.parent.name != 'li' ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Remove lists that are after inserted element.\n\t\t\t// They will be brought back later, below the inserted element.\n\t\t\tconst removeStart = viewPosition;\n\t\t\tconst removeEnd = viewWriter.createPositionAt( viewPosition.parent, 'end' );\n\n\t\t\t// Don't remove if there is nothing to remove.\n\t\t\tif ( !removeStart.isEqual( removeEnd ) ) {\n\t\t\t\tconst removed = viewWriter.remove( viewWriter.createRange( removeStart, removeEnd ) );\n\t\t\t\tlists.push( removed );\n\t\t\t}\n\n\t\t\tviewPosition = viewWriter.createPositionAfter( viewPosition.parent );\n\t\t}\n\n\t\t// Bring back removed lists.\n\t\tif ( lists.length > 0 ) {\n\t\t\tfor ( let i = 0; i < lists.length; i++ ) {\n\t\t\t\tconst previousList = viewPosition.nodeBefore;\n\t\t\t\tconst insertedRange = viewWriter.insert( viewPosition, lists[ i ] );\n\t\t\t\tviewPosition = insertedRange.end;\n\n\t\t\t\t// Don't merge first list! We want a split in that place (this is why this converter is introduced).\n\t\t\t\tif ( i > 0 ) {\n\t\t\t\t\tconst mergePos = mergeViewLists( viewWriter, previousList, previousList.nextSibling );\n\n\t\t\t\t\t// If `mergePos` is in `previousList` it means that the lists got merged.\n\t\t\t\t\t// In this case, we need to fix insert position.\n\t\t\t\t\tif ( mergePos && mergePos.parent == previousList ) {\n\t\t\t\t\t\tviewPosition.offset--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Merge last inserted list with element after it.\n\t\t\tmergeViewLists( viewWriter, viewPosition.nodeBefore, viewPosition.nodeAfter );\n\t\t}\n\t}\n}\n\n/**\n * A special model-to-view converter introduced by the {@link module:list/list~List list feature}. This converter takes care of\n * merging view lists after something is removed or moved from near them.\n *\n * Example:\n *\n *\t\t// Model:                        // View:\n *\t\t<listItem>foo</listItem>         <ul><li>foo</li></ul>\n *\t\t<paragraph>xxx</paragraph>       <p>xxx</p>\n *\t\t<listItem>bar</listItem>         <ul><li>bar</li></ul>\n *\n *\t\t// After change:                 // Correct view guaranteed by this converter:\n *\t\t<listItem>foo</listItem>         <ul>\n *\t\t<listItem>bar</listItem>             <li>foo</li>\n *\t\t                                     <li>bar</li>\n *\t\t                                 </ul>\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {Object} conversionApi Conversion interface.\n */\nexport function modelViewMergeAfter( evt, data, conversionApi ) {\n\tconst viewPosition = conversionApi.mapper.toViewPosition( data.position );\n\tconst viewItemPrev = viewPosition.nodeBefore;\n\tconst viewItemNext = viewPosition.nodeAfter;\n\n\t// Merge lists if something (remove, move) was done from inside of list.\n\t// Merging will be done only if both items are view lists of the same type.\n\t// The check is done inside the helper function.\n\tmergeViewLists( conversionApi.writer, viewItemPrev, viewItemNext );\n}\n\n/**\n * A view-to-model converter that converts `<li>` view elements into `listItem` model elements.\n *\n * To set correct values of the `listType` and `listIndent` attributes the converter:\n * * checks `<li>`'s parent,\n * * stores and increases the `conversionApi.store.indent` value when `<li>`'s sub-items are converted.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {Object} conversionApi Conversion interface to be used by the callback.\n */\nexport function viewModelConverter( evt, data, conversionApi ) {\n\tif ( conversionApi.consumable.consume( data.viewItem, { name: true } ) ) {\n\t\tconst writer = conversionApi.writer;\n\t\tconst conversionStore = this.conversionApi.store;\n\n\t\t// 1. Create `listItem` model element.\n\t\tconst listItem = writer.createElement( 'listItem' );\n\n\t\t// 2. Handle `listItem` model element attributes.\n\t\tconversionStore.indent = conversionStore.indent || 0;\n\t\twriter.setAttribute( 'listIndent', conversionStore.indent, listItem );\n\n\t\t// Set 'bulleted' as default. If this item is pasted into a context,\n\t\tconst type = data.viewItem.parent && data.viewItem.parent.name == 'ol' ? 'numbered' : 'bulleted';\n\t\twriter.setAttribute( 'listType', type, listItem );\n\n\t\t// `listItem`s created recursively should have bigger indent.\n\t\tconversionStore.indent++;\n\n\t\t// Try to find allowed parent for list item.\n\t\tconst splitResult = conversionApi.splitToAllowedParent( listItem, data.modelCursor );\n\n\t\t// When there is no allowed parent it means that list item cannot be converted at current model position\n\t\t// and in any of position ancestors.\n\t\tif ( !splitResult ) {\n\t\t\treturn;\n\t\t}\n\n\t\twriter.insert( listItem, splitResult.position );\n\n\t\tconst nextPosition = viewToModelListItemChildrenConverter( listItem, data.viewItem.getChildren(), conversionApi );\n\n\t\tconversionStore.indent--;\n\n\t\t// Result range starts before the first item and ends after the last.\n\t\tdata.modelRange = writer.createRange( data.modelCursor, nextPosition );\n\n\t\t// When modelCursor parent had to be split to insert list item.\n\t\tif ( splitResult.cursorParent ) {\n\t\t\t// Then continue conversion in split element.\n\t\t\tdata.modelCursor = writer.createPositionAt( splitResult.cursorParent, 0 );\n\t\t} else {\n\t\t\t// Otherwise continue conversion after last list item.\n\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t}\n\t}\n}\n\n/**\n * A view-to-model converter for `<ul>` and `<ol>` view elements that cleans the input view of garbage.\n * This is mostly to clean whitespaces from between `<li>` view elements inside the view list element, however, also\n * incorrect data can be cleared if the view was incorrect.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {Object} conversionApi Conversion interface to be used by the callback.\n */\nexport function cleanList( evt, data, conversionApi ) {\n\tif ( conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\n\t\t// Caching children because when we start removing them iterating fails.\n\t\tconst children = Array.from( data.viewItem.getChildren() );\n\n\t\tfor ( const child of children ) {\n\t\t\tif ( !child.is( 'li' ) ) {\n\t\t\t\tchild._remove();\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A view-to-model converter for `<li>` elements that cleans whitespace formatting from the input view.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {Object} conversionApi Conversion interface to be used by the callback.\n */\nexport function cleanListItem( evt, data, conversionApi ) {\n\tif ( conversionApi.consumable.test( data.viewItem, { name: true } ) ) {\n\t\tif ( data.viewItem.childCount === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst children = [ ...data.viewItem.getChildren() ];\n\n\t\tlet foundList = false;\n\t\tlet firstNode = true;\n\n\t\tfor ( const child of children ) {\n\t\t\tif ( foundList && !child.is( 'ul' ) && !child.is( 'ol' ) ) {\n\t\t\t\tchild._remove();\n\t\t\t}\n\n\t\t\tif ( child.is( 'text' ) ) {\n\t\t\t\t// If this is the first node and it's a text node, left-trim it.\n\t\t\t\tif ( firstNode ) {\n\t\t\t\t\tchild._data = child.data.replace( /^\\s+/, '' );\n\t\t\t\t}\n\n\t\t\t\t// If this is the last text node before <ul> or <ol>, right-trim it.\n\t\t\t\tif ( !child.nextSibling || ( child.nextSibling.is( 'ul' ) || child.nextSibling.is( 'ol' ) ) ) {\n\t\t\t\t\tchild._data = child.data.replace( /\\s+$/, '' );\n\t\t\t\t}\n\t\t\t} else if ( child.is( 'ul' ) || child.is( 'ol' ) ) {\n\t\t\t\t// If this is a <ul> or <ol>, do not process it, just mark that we already visited list element.\n\t\t\t\tfoundList = true;\n\t\t\t}\n\n\t\t\tfirstNode = false;\n\t\t}\n\t}\n}\n\n/**\n * Returns callback for model position to view position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between `listItem` elements that would be incorrectly mapped because of how list items are represented in model\n * and view.\n *\n * @see module:engine/conversion/mapper~Mapper#event:modelToViewPosition\n * @param {module:engine/view/view~View} view A view instance.\n * @returns {Function}\n */\nexport function modelToViewPosition( view ) {\n\treturn ( evt, data ) => {\n\t\tif ( data.isPhantom ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelItem = data.modelPosition.nodeBefore;\n\n\t\tif ( modelItem && modelItem.is( 'listItem' ) ) {\n\t\t\tconst viewItem = data.mapper.toViewElement( modelItem );\n\t\t\tconst topmostViewList = viewItem.getAncestors().find( element => element.is( 'ul' ) || element.is( 'ol' ) );\n\t\t\tconst walker = view.createPositionAt( viewItem, 0 ).getWalker();\n\n\t\t\tfor ( const value of walker ) {\n\t\t\t\tif ( value.type == 'elementStart' && value.item.is( 'li' ) ) {\n\t\t\t\t\tdata.viewPosition = value.previousPosition;\n\n\t\t\t\t\tbreak;\n\t\t\t\t} else if ( value.type == 'elementEnd' && value.item == topmostViewList ) {\n\t\t\t\t\tdata.viewPosition = value.nextPosition;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * The callback for view position to model position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between `<li>` elements that would be incorrectly mapped because of how list items are represented in model\n * and view.\n *\n * @see module:engine/conversion/mapper~Mapper#event:viewToModelPosition\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\nexport function viewToModelPosition( model ) {\n\treturn ( evt, data ) => {\n\t\tconst viewPos = data.viewPosition;\n\t\tconst viewParent = viewPos.parent;\n\t\tconst mapper = data.mapper;\n\n\t\tif ( viewParent.name == 'ul' || viewParent.name == 'ol' ) {\n\t\t\t// Position is directly in <ul> or <ol>.\n\t\t\tif ( !viewPos.isAtEnd ) {\n\t\t\t\t// If position is not at the end, it must be before <li>.\n\t\t\t\t// Get that <li>, map it to `listItem` and set model position before that `listItem`.\n\t\t\t\tconst modelNode = mapper.toModelElement( viewPos.nodeAfter );\n\n\t\t\t\tdata.modelPosition = model.createPositionBefore( modelNode );\n\t\t\t} else {\n\t\t\t\t// Position is at the end of <ul> or <ol>, so there is no <li> after it to be mapped.\n\t\t\t\t// There is <li> before the position, but we cannot just map it to `listItem` and set model position after it,\n\t\t\t\t// because that <li> may contain nested items.\n\t\t\t\t// We will check \"model length\" of that <li>, in other words - how many `listItem`s are in that <li>.\n\t\t\t\tconst modelNode = mapper.toModelElement( viewPos.nodeBefore );\n\t\t\t\tconst modelLength = mapper.getModelLength( viewPos.nodeBefore );\n\n\t\t\t\t// Then we get model position before mapped `listItem` and shift it accordingly.\n\t\t\t\tdata.modelPosition = model.createPositionBefore( modelNode ).getShiftedBy( modelLength );\n\t\t\t}\n\n\t\t\tevt.stop();\n\t\t} else if (\n\t\t\tviewParent.name == 'li' &&\n\t\t\tviewPos.nodeBefore &&\n\t\t\t( viewPos.nodeBefore.name == 'ul' || viewPos.nodeBefore.name == 'ol' )\n\t\t) {\n\t\t\t// In most cases when view position is in <li> it is in text and this is a correct position.\n\t\t\t// However, if position is after <ul> or <ol> we have to fix it -- because in model <ul>/<ol> are not in the `listItem`.\n\t\t\tconst modelNode = mapper.toModelElement( viewParent );\n\n\t\t\t// Check all <ul>s and <ol>s that are in the <li> but before mapped position.\n\t\t\t// Get model length of those elements and then add it to the offset of `listItem` mapped to the original <li>.\n\t\t\tlet modelLength = 1; // Starts from 1 because the original <li> has to be counted in too.\n\t\t\tlet viewList = viewPos.nodeBefore;\n\n\t\t\twhile ( viewList && ( viewList.is( 'ul' ) || viewList.is( 'ol' ) ) ) {\n\t\t\t\tmodelLength += mapper.getModelLength( viewList );\n\n\t\t\t\tviewList = viewList.previousSibling;\n\t\t\t}\n\n\t\t\tdata.modelPosition = model.createPositionBefore( modelNode ).getShiftedBy( modelLength );\n\n\t\t\tevt.stop();\n\t\t}\n\t};\n}\n\n/**\n * Post-fixer that reacts to changes on document and fixes incorrect model states.\n *\n * In an example below, there is a correct list structure.\n * Then the middle element will be removed so the list structure will become incorrect:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>Item 2</listItem>   <--- this is removed.\n *\t\t<listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n *\n * List structure after the middle element removed:\n *\n * \t\t<listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n *\n * Should become:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>Item 3</listItem>   <--- note that indent got post-fixed.\n *\n * @param {module:engine/model/model~Model} model The data model.\n * @param {module:engine/model/writer~Writer} writer The writer to do changes with.\n * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\n */\nexport function modelChangePostFixer( model, writer ) {\n\tconst changes = model.document.differ.getChanges();\n\tconst itemToListHead = new Map();\n\n\tlet applied = false;\n\n\tfor ( const entry of changes ) {\n\t\tif ( entry.type == 'insert' && entry.name == 'listItem' ) {\n\t\t\t_addListToFix( entry.position );\n\t\t} else if ( entry.type == 'insert' && entry.name != 'listItem' ) {\n\t\t\tif ( entry.name != '$text' ) {\n\t\t\t\t// In case of renamed element.\n\t\t\t\tconst item = entry.position.nodeAfter;\n\n\t\t\t\tif ( item.hasAttribute( 'listIndent' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listIndent', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\n\t\t\t\tif ( item.hasAttribute( 'listType' ) ) {\n\t\t\t\t\twriter.removeAttribute( 'listType', item );\n\n\t\t\t\t\tapplied = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst posAfter = entry.position.getShiftedBy( entry.length );\n\n\t\t\t_addListToFix( posAfter );\n\t\t} else if ( entry.type == 'remove' && entry.name == 'listItem' ) {\n\t\t\t_addListToFix( entry.position );\n\t\t} else if ( entry.type == 'attribute' && entry.attributeKey == 'listIndent' ) {\n\t\t\t_addListToFix( entry.range.start );\n\t\t} else if ( entry.type == 'attribute' && entry.attributeKey == 'listType' ) {\n\t\t\t_addListToFix( entry.range.start );\n\t\t}\n\t}\n\n\tfor ( const listHead of itemToListHead.values() ) {\n\t\t_fixListIndents( listHead );\n\t\t_fixListTypes( listHead );\n\t}\n\n\treturn applied;\n\n\tfunction _addListToFix( position ) {\n\t\tconst prev = position.nodeBefore;\n\n\t\tif ( !prev || !prev.is( 'listItem' ) ) {\n\t\t\tconst item = position.nodeAfter;\n\n\t\t\tif ( item && item.is( 'listItem' ) ) {\n\t\t\t\titemToListHead.set( item, item );\n\t\t\t}\n\t\t} else {\n\t\t\tlet listHead = prev;\n\n\t\t\tif ( itemToListHead.has( listHead ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\twhile ( listHead.previousSibling && listHead.previousSibling.is( 'listItem' ) ) {\n\t\t\t\tlistHead = listHead.previousSibling;\n\n\t\t\t\tif ( itemToListHead.has( listHead ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\titemToListHead.set( position.nodeBefore, listHead );\n\t\t}\n\t}\n\n\tfunction _fixListIndents( item ) {\n\t\tlet maxIndent = 0;\n\t\tlet fixBy = null;\n\n\t\twhile ( item && item.is( 'listItem' ) ) {\n\t\t\tconst itemIndent = item.getAttribute( 'listIndent' );\n\n\t\t\tif ( itemIndent > maxIndent ) {\n\t\t\t\tlet newIndent;\n\n\t\t\t\tif ( fixBy === null ) {\n\t\t\t\t\tfixBy = itemIndent - maxIndent;\n\t\t\t\t\tnewIndent = maxIndent;\n\t\t\t\t} else {\n\t\t\t\t\tif ( fixBy > itemIndent ) {\n\t\t\t\t\t\tfixBy = itemIndent;\n\t\t\t\t\t}\n\n\t\t\t\t\tnewIndent = itemIndent - fixBy;\n\t\t\t\t}\n\n\t\t\t\twriter.setAttribute( 'listIndent', newIndent, item );\n\n\t\t\t\tapplied = true;\n\t\t\t} else {\n\t\t\t\tfixBy = null;\n\t\t\t\tmaxIndent = item.getAttribute( 'listIndent' ) + 1;\n\t\t\t}\n\n\t\t\titem = item.nextSibling;\n\t\t}\n\t}\n\n\tfunction _fixListTypes( item ) {\n\t\tlet typesStack = [];\n\t\tlet prev = null;\n\n\t\twhile ( item && item.is( 'listItem' ) ) {\n\t\t\tconst itemIndent = item.getAttribute( 'listIndent' );\n\n\t\t\tif ( prev && prev.getAttribute( 'listIndent' ) > itemIndent ) {\n\t\t\t\ttypesStack = typesStack.slice( 0, itemIndent + 1 );\n\t\t\t}\n\n\t\t\tif ( itemIndent != 0 ) {\n\t\t\t\tif ( typesStack[ itemIndent ] ) {\n\t\t\t\t\tconst type = typesStack[ itemIndent ];\n\n\t\t\t\t\tif ( item.getAttribute( 'listType' ) != type ) {\n\t\t\t\t\t\twriter.setAttribute( 'listType', type, item );\n\n\t\t\t\t\t\tapplied = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttypesStack[ itemIndent ] = item.getAttribute( 'listType' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprev = item;\n\t\t\titem = item.nextSibling;\n\t\t}\n\t}\n}\n\n/**\n * A fixer for pasted content that includes list items.\n *\n * It fixes indentation of pasted list items so the pasted items match correctly to the context they are pasted into.\n *\n * Example:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>A</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>B^</listItem>\n *\t\t// At ^ paste:  <listItem listType=\"bulleted\" listIndent=4>X</listItem>\n *\t\t//              <listItem listType=\"bulleted\" listIndent=5>Y</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>C</listItem>\n *\n * Should become:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>A</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>BX</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>Y/listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>C</listItem>\n *\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Array} args Arguments of {@link module:engine/model/model~Model#insertContent}.\n */\nexport function modelIndentPasteFixer( evt, [ content, selectable ] ) {\n\t// Check whether inserted content starts from a `listItem`. If it does not, it means that there are some other\n\t// elements before it and there is no need to fix indents, because even if we insert that content into a list,\n\t// that list will be broken.\n\t// Note: we also need to handle singular elements because inserting item with indent 0 into 0,1,[],2\n\t// would create incorrect model.\n\tlet item = content.is( 'documentFragment' ) ? content.getChild( 0 ) : content;\n\n\tlet selection;\n\n\tif ( !selectable ) {\n\t\tselection = this.document.selection;\n\t} else {\n\t\tselection = this.createSelection( selectable );\n\t}\n\n\tif ( item && item.is( 'listItem' ) ) {\n\t\t// Get a reference list item. Inserted list items will be fixed according to that item.\n\t\tconst pos = selection.getFirstPosition();\n\t\tlet refItem = null;\n\n\t\tif ( pos.parent.is( 'listItem' ) ) {\n\t\t\trefItem = pos.parent;\n\t\t} else if ( pos.nodeBefore && pos.nodeBefore.is( 'listItem' ) ) {\n\t\t\trefItem = pos.nodeBefore;\n\t\t}\n\n\t\t// If there is `refItem` it means that we do insert list items into an existing list.\n\t\tif ( refItem ) {\n\t\t\t// First list item in `data` has indent equal to 0 (it is a first list item). It should have indent equal\n\t\t\t// to the indent of reference item. We have to fix the first item and all of it's children and following siblings.\n\t\t\t// Indent of all those items has to be adjusted to reference item.\n\t\t\tconst indentChange = refItem.getAttribute( 'listIndent' );\n\n\t\t\t// Fix only if there is anything to fix.\n\t\t\tif ( indentChange > 0 ) {\n\t\t\t\t// Adjust indent of all \"first\" list items in inserted data.\n\t\t\t\twhile ( item && item.is( 'listItem' ) ) {\n\t\t\t\t\titem._setAttribute( 'listIndent', item.getAttribute( 'listIndent' ) + indentChange );\n\n\t\t\t\t\titem = item.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Helper function that creates a `<ul><li></li></ul>` or (`<ol>`) structure out of given `modelItem` model `listItem` element.\n// Then, it binds created view list item (<li>) with model `listItem` element.\n// The function then returns created view list item (<li>).\nfunction generateLiInUl( modelItem, conversionApi ) {\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\tconst listType = modelItem.getAttribute( 'listType' ) == 'numbered' ? 'ol' : 'ul';\n\tconst viewItem = createViewListItemElement( viewWriter );\n\n\tconst viewList = viewWriter.createContainerElement( listType, null );\n\tviewWriter.insert( viewWriter.createPositionAt( viewList, 0 ), viewItem );\n\n\tmapper.bindElements( modelItem, viewItem );\n\n\treturn viewItem;\n}\n\n// Helper function that converts children of a given `<li>` view element into corresponding model elements.\n// The function maintains proper order of elements if model `listItem` is split during the conversion\n// due to block children conversion.\n//\n// @param {module:engine/model/element~Element} listItemModel List item model element to which converted children will be inserted.\n// @param {Iterable.<module:engine/view/node~Node>} viewChildren View elements which will be converted.\n// @param {Object} conversionApi Conversion interface to be used by the callback.\n// @returns {module:engine/model/position~Position} Position on which next elements should be inserted after children conversion.\nfunction viewToModelListItemChildrenConverter( listItemModel, viewChildren, conversionApi ) {\n\tconst writer = conversionApi.writer;\n\tlet lastListItem = listItemModel;\n\tlet nextPosition = writer.createPositionAfter( listItemModel );\n\n\t// Check all children of the converted `<li>`. At this point we assume there are no \"whitespace\" view text nodes\n\t// in view list, between view list items. This should be handled by `<ul>` and `<ol>` converters.\n\tfor ( const child of viewChildren ) {\n\t\t// If this is a view list element, we will insert its conversion result after currently handled `listItem`.\n\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t\t\tnextPosition = conversionApi.convertItem( child, nextPosition ).modelCursor;\n\t\t}\n\t\t// If it is not a view list element it is a \"regular\" list item content. Its conversion result will\n\t\t// be inserted as `listItem` children (block children may split current `listItem`).\n\t\telse {\n\t\t\tconst result = conversionApi.convertItem( child, writer.createPositionAt( lastListItem, 'end' ) );\n\t\t\tconst convertedChild = result.modelRange.start.nodeAfter;\n\n\t\t\tnextPosition = result.modelCursor;\n\n\t\t\t// If there is a block element child being converted it may split the current list item, for example:\n\t\t\t//\n\t\t\t//\t\t<li><p>Foo</p></li>\n\t\t\t//\n\t\t\t// will be converted to:\n\t\t\t//\n\t\t\t//\t\t<listItem></listItem><paragraph>Foo</paragraph><listItem></listItem>\n\t\t\t//\n\t\t\t// so we need to update reference to `lastListItem`.\n\t\t\tif ( convertedChild && convertedChild.is( 'element' ) &&\n\t\t\t\t!conversionApi.schema.checkChild( lastListItem, convertedChild.name ) ) {\n\t\t\t\tlastListItem = nextPosition.parent;\n\n\t\t\t\t// Depending on the used converter for block elements, usually the position (`result.modelCursor`\n\t\t\t\t// marked as # below) points to the second list item after conversion:\n\t\t\t\t//\n\t\t\t\t//\t\t`<li><p>Foo</p></li>` -> `<listItem></listItem><paragraph>Foo</paragraph><listItem>#</listItem>`\n\t\t\t\t//\n\t\t\t\t// However, in some cases like autoparagraphing the position is placed on the end of the block element:\n\t\t\t\t//\n\t\t\t\t//\t\t`<li><h2>Foo</h2></li>` -> `<listItem></listItem><paragraph>Foo#</paragraph><listItem></listItem>`\n\t\t\t\t//\n\t\t\t\t// We need to check for such cases and use proper list item and position based on it.\n\t\t\t\tif ( !lastListItem.is( 'listItem' ) && lastListItem.nextSibling && lastListItem.nextSibling.is( 'listItem' ) ) {\n\t\t\t\t\tlastListItem = lastListItem.nextSibling;\n\t\t\t\t\tnextPosition = writer.createPositionAt( lastListItem, 'end' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nextPosition;\n}\n\n// Helper function that seeks for a list item sibling of given model item (or position) which meets given criteria.\n// `options` object may contain one or more of given values (by default they are `false`):\n// `options.sameIndent` - whether sought sibling should have same indent (default = no),\n// `options.smallerIndent` - whether sought sibling should have smaller indent (default = no).\n// `options.indent` - used as reference item when first parameter is a position\n// Either `options.sameIndent` or `options.biggerIndent` should be set to `true`.\nfunction getSiblingListItem( modelItem, options ) {\n\tconst sameIndent = !!options.sameIndent;\n\tconst smallerIndent = !!options.smallerIndent;\n\tconst indent = options.listIndent;\n\n\tlet item = modelItem;\n\n\twhile ( item && item.name == 'listItem' ) {\n\t\tconst itemIndent = item.getAttribute( 'listIndent' );\n\n\t\tif ( ( sameIndent && indent == itemIndent ) || ( smallerIndent && indent > itemIndent ) ) {\n\t\t\treturn item;\n\t\t}\n\n\t\titem = item.previousSibling;\n\t}\n\n\treturn null;\n}\n\n// Helper function that takes two parameters, that are expected to be view list elements, and merges them.\n// The merge happen only if both parameters are UL or OL elements.\nfunction mergeViewLists( viewWriter, firstList, secondList ) {\n\tif ( firstList && secondList && ( firstList.name == 'ul' || firstList.name == 'ol' ) && firstList.name == secondList.name ) {\n\t\treturn viewWriter.mergeContainers( viewWriter.createPositionAfter( firstList ) );\n\t}\n\n\treturn null;\n}\n\n// Helper function that takes model list item element `modelItem`, corresponding view list item element `injectedItem`\n// that is not added to the view and is inside a view list element (`ul` or `ol`) and is that's list only child.\n// The list is inserted at correct position (element breaking may be needed) and then merged with it's siblings.\n// See comments below to better understand the algorithm.\nfunction injectViewList( modelItem, injectedItem, conversionApi, model ) {\n\tconst injectedList = injectedItem.parent;\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\n\t// Position where view list will be inserted.\n\tlet insertPosition = mapper.toViewPosition( model.createPositionBefore( modelItem ) );\n\n\t// 1. Find previous list item that has same or smaller indent. Basically we are looking for a first model item\n\t// that is \"parent\" or \"sibling\" of injected model item.\n\t// If there is no such list item, it means that injected list item is the first item in \"its list\".\n\tconst refItem = getSiblingListItem( modelItem.previousSibling, {\n\t\tsameIndent: true,\n\t\tsmallerIndent: true,\n\t\tlistIndent: modelItem.getAttribute( 'listIndent' )\n\t} );\n\tconst prevItem = modelItem.previousSibling;\n\n\tif ( refItem && refItem.getAttribute( 'listIndent' ) == modelItem.getAttribute( 'listIndent' ) ) {\n\t\t// There is a list item with same indent - we found same-level sibling.\n\t\t// Break the list after it. Inserted view item will be inserted in the broken space.\n\t\tconst viewItem = mapper.toViewElement( refItem );\n\t\tinsertPosition = viewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\t} else {\n\t\t// There is no list item with same indent. Check previous model item.\n\t\tif ( prevItem && prevItem.name == 'listItem' ) {\n\t\t\t// If it is a list item, it has to have lower indent.\n\t\t\t// It means that inserted item should be added to it as its nested item.\n\t\t\tinsertPosition = mapper.toViewPosition( model.createPositionAt( prevItem, 'end' ) );\n\t\t} else {\n\t\t\t// Previous item is not a list item (or does not exist at all).\n\t\t\t// Just map the position and insert the view item at mapped position.\n\t\t\tinsertPosition = mapper.toViewPosition( model.createPositionBefore( modelItem ) );\n\t\t}\n\t}\n\n\tinsertPosition = positionAfterUiElements( insertPosition );\n\n\t// Insert the view item.\n\tviewWriter.insert( insertPosition, injectedList );\n\n\t// 2. Handle possible children of injected model item.\n\tif ( prevItem && prevItem.name == 'listItem' ) {\n\t\tconst prevView = mapper.toViewElement( prevItem );\n\n\t\tconst walkerBoundaries = viewWriter.createRange( viewWriter.createPositionAt( prevView, 0 ), insertPosition );\n\t\tconst walker = walkerBoundaries.getWalker( { ignoreElementEnd: true } );\n\n\t\tfor ( const value of walker ) {\n\t\t\tif ( value.item.is( 'li' ) ) {\n\t\t\t\tconst breakPosition = viewWriter.breakContainer( viewWriter.createPositionBefore( value.item ) );\n\t\t\t\tconst viewList = value.item.parent;\n\n\t\t\t\tconst targetPosition = viewWriter.createPositionAt( injectedItem, 'end' );\n\t\t\t\tmergeViewLists( viewWriter, targetPosition.nodeBefore, targetPosition.nodeAfter );\n\t\t\t\tviewWriter.move( viewWriter.createRangeOn( viewList ), targetPosition );\n\n\t\t\t\twalker.position = breakPosition;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tconst nextViewList = injectedList.nextSibling;\n\n\t\tif ( nextViewList && ( nextViewList.is( 'ul' ) || nextViewList.is( 'ol' ) ) ) {\n\t\t\tlet lastSubChild = null;\n\n\t\t\tfor ( const child of nextViewList.getChildren() ) {\n\t\t\t\tconst modelChild = mapper.toModelElement( child );\n\n\t\t\t\tif ( modelChild && modelChild.getAttribute( 'listIndent' ) > modelItem.getAttribute( 'listIndent' ) ) {\n\t\t\t\t\tlastSubChild = child;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( lastSubChild ) {\n\t\t\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( lastSubChild ) );\n\t\t\t\tviewWriter.move( viewWriter.createRangeOn( lastSubChild.parent ), viewWriter.createPositionAt( injectedItem, 'end' ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Merge inserted view list with its possible neighbour lists.\n\tmergeViewLists( viewWriter, injectedList, injectedList.nextSibling );\n\tmergeViewLists( viewWriter, injectedList.previousSibling, injectedList );\n}\n\n// Helper function that takes all children of given `viewRemovedItem` and moves them in a correct place, according\n// to other given parameters.\nfunction hoistNestedLists( nextIndent, modelRemoveStartPosition, viewRemoveStartPosition, viewRemovedItem, conversionApi, model ) {\n\t// Find correct previous model list item element.\n\t// The element has to have either same or smaller indent than given reference indent.\n\t// This will be the model element which will get nested items (if it has smaller indent) or sibling items (if it has same indent).\n\t// Keep in mind that such element might not be found, if removed item was the first item.\n\tconst prevModelItem = getSiblingListItem( modelRemoveStartPosition.nodeBefore, {\n\t\tsameIndent: true,\n\t\tsmallerIndent: true,\n\t\tlistIndent: nextIndent,\n\t\tfoo: 'b'\n\t} );\n\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\n\t// Indent of found element or `null` if the element has not been found.\n\tconst prevIndent = prevModelItem ? prevModelItem.getAttribute( 'listIndent' ) : null;\n\n\tlet insertPosition;\n\n\tif ( !prevModelItem ) {\n\t\t// If element has not been found, simply insert lists at the position where the removed item was:\n\t\t//\n\t\t// Lorem ipsum.\n\t\t// 1 --------           <--- this is removed, no previous list item, put nested items in place of removed item.\n\t\t//   1.1 --------       <--- this is reference indent.\n\t\t//     1.1.1 --------\n\t\t//     1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// Lorem ipsum.\n\t\t// 1.1 --------\n\t\t//   1.1.1 --------\n\t\t//   1.1.2 --------\n\t\t// 1.2 --------\n\t\tinsertPosition = viewRemoveStartPosition;\n\t} else if ( prevIndent == nextIndent ) {\n\t\t// If element has been found and has same indent as reference indent it means that nested items should\n\t\t// become siblings of found element:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//   1.2 --------       <--- this is `prevModelItem`.\n\t\t// 2 --------           <--- this is removed, previous list item has indent same as reference indent.\n\t\t//   2.1 --------       <--- this is reference indent, this and 2.2 should become siblings of 1.2.\n\t\t//   2.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1 --------\n\t\t//   1.2 --------\n\t\t//   2.1 --------\n\t\t//   2.2 --------\n\t\tconst prevViewList = mapper.toViewElement( prevModelItem ).parent;\n\t\tinsertPosition = viewWriter.createPositionAfter( prevViewList );\n\t} else {\n\t\t// If element has been found and has smaller indent as reference indent it means that nested items\n\t\t// should become nested items of found item:\n\t\t//\n\t\t// 1 --------           <--- this is `prevModelItem`.\n\t\t//   1.1 --------       <--- this is removed, previous list item has indent smaller than reference indent.\n\t\t//     1.1.1 --------   <--- this is reference indent, this and 1.1.1 should become nested items of 1.\n\t\t//     1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Becomes:\n\t\t//\n\t\t// 1 --------\n\t\t//   1.1.1 --------\n\t\t//   1.1.2 --------\n\t\t//   1.2 --------\n\t\t//\n\t\t// Note: in this case 1.1.1 have indent 2 while 1 have indent 0. In model that should not be possible,\n\t\t// because following item may have indent bigger only by one. But this is fixed by postfixer.\n\t\tconst modelPosition = model.createPositionAt( prevModelItem, 'end' );\n\t\tinsertPosition = mapper.toViewPosition( modelPosition );\n\t}\n\n\tinsertPosition = positionAfterUiElements( insertPosition );\n\n\t// Handle multiple lists. This happens if list item has nested numbered and bulleted lists. Following lists\n\t// are inserted after the first list (no need to recalculate insertion position for them).\n\tfor ( const child of [ ...viewRemovedItem.getChildren() ] ) {\n\t\tif ( child.is( 'ul' ) || child.is( 'ol' ) ) {\n\t\t\tinsertPosition = viewWriter.move( viewWriter.createRangeOn( child ), insertPosition ).end;\n\n\t\t\tmergeViewLists( viewWriter, child, child.nextSibling );\n\t\t\tmergeViewLists( viewWriter, child.previousSibling, child );\n\t\t}\n\t}\n}\n\n// Helper function that for given `view.Position`, returns a `view.Position` that is after all `view.UIElement`s that\n// are after given position.\n// For example:\n// <container:p>foo^<ui:span></ui:span><ui:span></ui:span>bar</contain:p>\n// For position ^, a position before \"bar\" will be returned.\nfunction positionAfterUiElements( viewPosition ) {\n\treturn viewPosition.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module list/listediting\n */\n\nimport ListCommand from './listcommand';\nimport IndentCommand from './indentcommand';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n\nimport {\n\tcleanList,\n\tcleanListItem,\n\tmodelViewInsertion,\n\tmodelViewChangeType,\n\tmodelViewMergeAfter,\n\tmodelViewRemove,\n\tmodelViewSplitOnInsert,\n\tmodelViewChangeIndent,\n\tmodelChangePostFixer,\n\tmodelIndentPasteFixer,\n\tviewModelConverter,\n\tmodelToViewPosition,\n\tviewToModelPosition\n} from './converters';\n\n/**\n * The engine of the list feature. It handles creating, editing and removing lists and list items.\n *\n * It registers the `'numberedList'`, `'bulletedList'`, `'indentList'` and `'outdentList'` commands.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ListEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Paragraph ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Schema.\n\t\t// Note: in case `$block` will ever be allowed in `listItem`, keep in mind that this feature\n\t\t// uses `Selection#getSelectedBlocks()` without any additional processing to obtain all selected list items.\n\t\t// If there are blocks allowed inside list item, algorithms using `getSelectedBlocks()` will have to be modified.\n\t\teditor.model.schema.register( 'listItem', {\n\t\t\tinheritAllFrom: '$block',\n\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n\t\t} );\n\n\t\t// Converters.\n\t\tconst data = editor.data;\n\t\tconst editing = editor.editing;\n\n\t\teditor.model.document.registerPostFixer( writer => modelChangePostFixer( editor.model, writer ) );\n\n\t\tediting.mapper.registerViewToModelLength( 'li', getViewListItemLength );\n\t\tdata.mapper.registerViewToModelLength( 'li', getViewListItemLength );\n\n\t\tediting.mapper.on( 'modelToViewPosition', modelToViewPosition( editing.view ) );\n\t\tediting.mapper.on( 'viewToModelPosition', viewToModelPosition( editor.model ) );\n\t\tdata.mapper.on( 'modelToViewPosition', modelToViewPosition( editing.view ) );\n\n\t\tediting.downcastDispatcher.on( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\n\t\tediting.downcastDispatcher.on( 'insert:listItem', modelViewInsertion( editor.model ) );\n\t\tdata.downcastDispatcher.on( 'insert', modelViewSplitOnInsert, { priority: 'high' } );\n\t\tdata.downcastDispatcher.on( 'insert:listItem', modelViewInsertion( editor.model ) );\n\n\t\tediting.downcastDispatcher.on( 'attribute:listType:listItem', modelViewChangeType );\n\t\tdata.downcastDispatcher.on( 'attribute:listType:listItem', modelViewChangeType );\n\t\tediting.downcastDispatcher.on( 'attribute:listIndent:listItem', modelViewChangeIndent( editor.model ) );\n\t\tdata.downcastDispatcher.on( 'attribute:listIndent:listItem', modelViewChangeIndent( editor.model ) );\n\n\t\tediting.downcastDispatcher.on( 'remove:listItem', modelViewRemove( editor.model ) );\n\t\tediting.downcastDispatcher.on( 'remove', modelViewMergeAfter, { priority: 'low' } );\n\t\tdata.downcastDispatcher.on( 'remove:listItem', modelViewRemove( editor.model ) );\n\t\tdata.downcastDispatcher.on( 'remove', modelViewMergeAfter, { priority: 'low' } );\n\n\t\tdata.upcastDispatcher.on( 'element:ul', cleanList, { priority: 'high' } );\n\t\tdata.upcastDispatcher.on( 'element:ol', cleanList, { priority: 'high' } );\n\t\tdata.upcastDispatcher.on( 'element:li', cleanListItem, { priority: 'high' } );\n\t\tdata.upcastDispatcher.on( 'element:li', viewModelConverter );\n\n\t\t// Fix indentation of pasted items.\n\t\teditor.model.on( 'insertContent', modelIndentPasteFixer, { priority: 'high' } );\n\n\t\t// Register commands for numbered and bulleted list.\n\t\teditor.commands.add( 'numberedList', new ListCommand( editor, 'numbered' ) );\n\t\teditor.commands.add( 'bulletedList', new ListCommand( editor, 'bulleted' ) );\n\n\t\t// Register commands for indenting.\n\t\teditor.commands.add( 'indentList', new IndentCommand( editor, 'forward' ) );\n\t\teditor.commands.add( 'outdentList', new IndentCommand( editor, 'backward' ) );\n\n\t\tconst viewDocument = this.editor.editing.view.document;\n\n\t\t// Overwrite default Enter key behavior.\n\t\t// If Enter key is pressed with selection collapsed in empty list item, outdent it instead of breaking it.\n\t\tthis.listenTo( viewDocument, 'enter', ( evt, data ) => {\n\t\t\tconst doc = this.editor.model.document;\n\t\t\tconst positionParent = doc.selection.getLastPosition().parent;\n\n\t\t\tif ( doc.selection.isCollapsed && positionParent.name == 'listItem' && positionParent.isEmpty ) {\n\t\t\t\tthis.editor.execute( 'outdentList' );\n\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t} );\n\n\t\t// Overwrite default Backspace key behavior.\n\t\t// If Backspace key is pressed with selection collapsed on first position in first list item, outdent it. #83\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\t// Check conditions from those that require less computations like those immediately available.\n\t\t\tif ( data.direction !== 'backward' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst selection = this.editor.model.document.selection;\n\n\t\t\tif ( !selection.isCollapsed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\t\tif ( !firstPosition.isAtStart ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst positionParent = firstPosition.parent;\n\n\t\t\tif ( positionParent.name !== 'listItem' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst previousIsAListItem = positionParent.previousSibling && positionParent.previousSibling.name === 'listItem';\n\n\t\t\tif ( previousIsAListItem ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor.execute( 'outdentList' );\n\n\t\t\tdata.preventDefault();\n\t\t\tevt.stop();\n\t\t}, { priority: 'high' } );\n\n\t\tconst getCommandExecuter = commandName => {\n\t\t\treturn ( data, cancel ) => {\n\t\t\t\tconst command = this.editor.commands.get( commandName );\n\n\t\t\t\tif ( command.isEnabled ) {\n\t\t\t\t\tthis.editor.execute( commandName );\n\t\t\t\t\tcancel();\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t\tthis.editor.keystrokes.set( 'Tab', getCommandExecuter( 'indentList' ) );\n\t\tthis.editor.keystrokes.set( 'Shift+Tab', getCommandExecuter( 'outdentList' ) );\n\t}\n}\n\nfunction getViewListItemLength( element ) {\n\tlet length = 1;\n\n\tfor ( const child of element.getChildren() ) {\n\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n\t\t\tfor ( const item of child.getChildren() ) {\n\t\t\t\tlength += getViewListItemLength( item );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn length;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module list/listui\n */\nimport numberedListIcon from '../theme/icons/numberedlist.svg';\nimport bulletedListIcon from '../theme/icons/bulletedlist.svg';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\n/**\n * The list UI feature. It introduces the `'numberedList'` and `'bulletedList'` buttons that\n * allow to convert paragraphs to and from list items and indent or outdent them.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ListUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        // Create two buttons and link them with numberedList and bulletedList commands.\n        const t = this.editor.t;\n        this._addButton('numberedList', t('g'), numberedListIcon);\n        this._addButton('bulletedList', t('h'), bulletedListIcon);\n    }\n    /**\n\t * Helper method for initializing a button and linking it with an appropriate command.\n\t *\n\t * @private\n\t * @param {String} commandName The name of the command.\n\t * @param {Object} label The button label.\n\t * @param {String} icon The source of the icon.\n\t */\n    _addButton(commandName, label, icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(commandName, locale => {\n            const command = editor.commands.get(commandName);\n            const buttonView = new ButtonView(locale);\n            buttonView.set({\n                label,\n                icon,\n                tooltip: true\n            });\n            // Bind button model to command.\n            buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(buttonView, 'execute', () => editor.execute(commandName));\n            return buttonView;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/commands/utils\n */\n\n/**\n * Returns the parent element of given name. Returns undefined if position is not inside desired parent.\n *\n * @param {String} parentName Name of parent element to find.\n * @param {module:engine/model/position~Position|module:engine/model/position~Position} position Position to start searching.\n * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n */\nexport function findAncestor( parentName, position ) {\n\tlet parent = position.parent;\n\n\twhile ( parent ) {\n\t\tif ( parent.name === parentName ) {\n\t\t\treturn parent;\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n}\n\n/**\n * A common method to update the numeric value. If a value is the default one, it will be unset.\n *\n * @param {String} key Attribute key.\n * @param {*} value The new attribute value.\n * @param {module:engine/model/item~Item} item Model item on which the attribute will be set.\n * @param {module:engine/model/writer~Writer} writer\n * @param {*} defaultValue Default attribute value. If a value is lower or equal, it will be unset.\n */\nexport function updateNumericAttribute( key, value, item, writer, defaultValue = 1 ) {\n\tif ( value > defaultValue ) {\n\t\twriter.setAttribute( key, value, item );\n\t} else {\n\t\twriter.removeAttribute( key, item );\n\t}\n}\n\n/**\n * Common method to create empty table cell - it will create proper model structure as table cell must have at least one block inside.\n *\n * @param {module:engine/model/writer~Writer} writer Model writer.\n * @param {module:engine/model/position~Position} insertPosition Position at which table cell should be inserted.\n * @param {Object} attributes Element's attributes.\n */\nexport function createEmptyTableCell( writer, insertPosition, attributes = {} ) {\n\tconst tableCell = writer.createElement( 'tableCell', attributes );\n\twriter.insertElement( 'paragraph', tableCell );\n\twriter.insert( tableCell, insertPosition );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/converters/upcasttable\n */\n\nimport { createEmptyTableCell } from '../commands/utils';\n\n/**\n * View table element to model table element conversion helper.\n *\n * This conversion helper converts the table element as well as table rows.\n *\n * @returns {Function} Conversion helper.\n */\nexport default function upcastTable() {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'element:table', ( evt, data, conversionApi ) => {\n\t\t\tconst viewTable = data.viewItem;\n\n\t\t\t// When element was already consumed then skip it.\n\t\t\tif ( !conversionApi.consumable.test( viewTable, { name: true } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { rows, headingRows, headingColumns } = scanTable( viewTable );\n\n\t\t\t// Only set attributes if values is greater then 0.\n\t\t\tconst attributes = {};\n\n\t\t\tif ( headingColumns ) {\n\t\t\t\tattributes.headingColumns = headingColumns;\n\t\t\t}\n\n\t\t\tif ( headingRows ) {\n\t\t\t\tattributes.headingRows = headingRows;\n\t\t\t}\n\n\t\t\tconst table = conversionApi.writer.createElement( 'table', attributes );\n\n\t\t\t// Insert element on allowed position.\n\t\t\tconst splitResult = conversionApi.splitToAllowedParent( table, data.modelCursor );\n\n\t\t\t// When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\t\t\tif ( !splitResult ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconversionApi.writer.insert( table, splitResult.position );\n\t\t\tconversionApi.consumable.consume( viewTable, { name: true } );\n\n\t\t\tif ( rows.length ) {\n\t\t\t\t// Upcast table rows in proper order (heading rows first).\n\t\t\t\trows.forEach( row => conversionApi.convertItem( row, conversionApi.writer.createPositionAt( table, 'end' ) ) );\n\t\t\t} else {\n\t\t\t\t// Create one row and one table cell for empty table.\n\t\t\t\tconst row = conversionApi.writer.createElement( 'tableRow' );\n\t\t\t\tconversionApi.writer.insert( row, conversionApi.writer.createPositionAt( table, 'end' ) );\n\n\t\t\t\tcreateEmptyTableCell( conversionApi.writer, conversionApi.writer.createPositionAt( row, 'end' ) );\n\t\t\t}\n\n\t\t\t// Set conversion result range.\n\t\t\tdata.modelRange = conversionApi.writer.createRange(\n\t\t\t\t// Range should start before inserted element\n\t\t\t\tconversionApi.writer.createPositionBefore( table ),\n\t\t\t\t// Should end after but we need to take into consideration that children could split our\n\t\t\t\t// element, so we need to move range after parent of the last converted child.\n\t\t\t\t// before: <allowed>[]</allowed>\n\t\t\t\t// after: <allowed>[<converted><child></child></converted><child></child><converted>]</converted></allowed>\n\t\t\t\tconversionApi.writer.createPositionAfter( table )\n\t\t\t);\n\n\t\t\t// Now we need to check where the modelCursor should be.\n\t\t\t// If we had to split parent to insert our element then we want to continue conversion inside split parent.\n\t\t\t//\n\t\t\t// before: <allowed><notAllowed>[]</notAllowed></allowed>\n\t\t\t// after:  <allowed><notAllowed></notAllowed><converted></converted><notAllowed>[]</notAllowed></allowed>\n\t\t\tif ( splitResult.cursorParent ) {\n\t\t\t\tdata.modelCursor = conversionApi.writer.createPositionAt( splitResult.cursorParent, 0 );\n\n\t\t\t\t// Otherwise just continue after inserted element.\n\t\t\t} else {\n\t\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t\t}\n\t\t} );\n\t};\n}\n\nexport function upcastTableCell( elementName ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( `element:${ elementName }`, ( evt, data, conversionApi ) => {\n\t\t\tconst viewTableCell = data.viewItem;\n\n\t\t\t// When element was already consumed then skip it.\n\t\t\tif ( !conversionApi.consumable.test( viewTableCell, { name: true } ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst tableCell = conversionApi.writer.createElement( 'tableCell' );\n\n\t\t\t// Insert element on allowed position.\n\t\t\tconst splitResult = conversionApi.splitToAllowedParent( tableCell, data.modelCursor );\n\n\t\t\t// When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\t\t\tif ( !splitResult ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconversionApi.writer.insert( tableCell, splitResult.position );\n\t\t\tconversionApi.consumable.consume( viewTableCell, { name: true } );\n\n\t\t\tconst modelCursor = conversionApi.writer.createPositionAt( tableCell, 0 );\n\t\t\tconversionApi.convertChildren( viewTableCell, modelCursor );\n\n\t\t\t// Ensure a paragraph in the model for empty table cells.\n\t\t\tif ( !tableCell.childCount ) {\n\t\t\t\tconversionApi.writer.insertElement( 'paragraph', modelCursor );\n\t\t\t}\n\n\t\t\t// Set conversion result range.\n\t\t\tdata.modelRange = conversionApi.writer.createRange(\n\t\t\t\t// Range should start before inserted element\n\t\t\t\tconversionApi.writer.createPositionBefore( tableCell ),\n\t\t\t\t// Should end after but we need to take into consideration that children could split our\n\t\t\t\t// element, so we need to move range after parent of the last converted child.\n\t\t\t\t// before: <allowed>[]</allowed>\n\t\t\t\t// after: <allowed>[<converted><child></child></converted><child></child><converted>]</converted></allowed>\n\t\t\t\tconversionApi.writer.createPositionAfter( tableCell )\n\t\t\t);\n\n\t\t\t// Continue after inserted element.\n\t\t\tdata.modelCursor = data.modelRange.end;\n\t\t} );\n\t};\n}\n\n// Scans table rows and extracts required metadata from the table:\n//\n// headingRows    - the number of rows that goes as table header.\n// headingColumns - max number of row headings.\n// rows           - sorted `<tr>`s as they should go into the model - ie. if `<thead>` is inserted after `<tbody>` in the view.\n//\n// @param {module:engine/view/element~Element} viewTable\n// @returns {{headingRows, headingColumns, rows}}\nfunction scanTable( viewTable ) {\n\tconst tableMeta = {\n\t\theadingRows: 0,\n\t\theadingColumns: 0\n\t};\n\n\t// The `<tbody>` and <thead> sections in the DOM do not have to be in order `<thead>` -> `<tbody>` and there might be more then one of\n\t// them.\n\t// As the model does not have those sections, rows from different sections must be sorted.\n\t// For example, below is a valid HTML table:\n\t//\n\t//\t\t<table>\n\t//\t\t\t<tbody><tr><td>2</td></tr></tbody>\n\t//\t\t\t<thead><tr><td>1</td></tr></thead>\n\t//\t\t\t<tbody><tr><td>3</td></tr></tbody>\n\t//\t\t</table>\n\t//\n\t// But browsers will render rows in order as: 1 as heading and 2 and 3 as (body).\n\tconst headRows = [];\n\tconst bodyRows = [];\n\n\t// Currently the editor does not support more then one <thead> section.\n\t// Only the first <thead> from the view will be used as heading rows and others will be converted to body rows.\n\tlet firstTheadElement;\n\n\tfor ( const tableChild of Array.from( viewTable.getChildren() ) ) {\n\t\t// Only <thead>, <tbody> & <tfoot> from allowed table children can have <tr>s.\n\t\t// The else is for future purposes (mainly <caption>).\n\t\tif ( tableChild.name === 'tbody' || tableChild.name === 'thead' || tableChild.name === 'tfoot' ) {\n\t\t\t// Save the first <thead> in the table as table header - all other ones will be converted to table body rows.\n\t\t\tif ( tableChild.name === 'thead' && !firstTheadElement ) {\n\t\t\t\tfirstTheadElement = tableChild;\n\t\t\t}\n\n\t\t\t// There might be some extra empty text nodes between the `tr`s.\n\t\t\t// Make sure further code operates on `tr`s only. (#145)\n\t\t\tconst trs = Array.from( tableChild.getChildren() ).filter( el => el.is( 'element', 'tr' ) );\n\n\t\t\tfor ( const tr of trs ) {\n\t\t\t\t// This <tr> is a child of a first <thead> element.\n\t\t\t\tif ( tr.parent.name === 'thead' && tr.parent === firstTheadElement ) {\n\t\t\t\t\ttableMeta.headingRows++;\n\t\t\t\t\theadRows.push( tr );\n\t\t\t\t} else {\n\t\t\t\t\tbodyRows.push( tr );\n\t\t\t\t\t// For other rows check how many column headings this row has.\n\n\t\t\t\t\tconst headingCols = scanRowForHeadingColumns( tr, tableMeta, firstTheadElement );\n\n\t\t\t\t\tif ( headingCols > tableMeta.headingColumns ) {\n\t\t\t\t\t\ttableMeta.headingColumns = headingCols;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\ttableMeta.rows = [ ...headRows, ...bodyRows ];\n\n\treturn tableMeta;\n}\n\n// Scans `<tr>` and its children for metadata:\n// - For heading row:\n//     - either adds this row to heading or body rows.\n//     - updates number of heading rows.\n// - For body rows:\n//     - calculates the number of column headings.\n//\n// @param {module:engine/view/element~Element} tr\n// @returns {Number}\nfunction scanRowForHeadingColumns( tr ) {\n\tlet headingColumns = 0;\n\tlet index = 0;\n\n\t// Filter out empty text nodes from tr children.\n\tconst children = Array.from( tr.getChildren() )\n\t\t.filter( child => child.name === 'th' || child.name === 'td' );\n\n\t// Count starting adjacent <th> elements of a <tr>.\n\twhile ( index < children.length && children[ index ].name === 'th' ) {\n\t\tconst th = children[ index ];\n\n\t\t// Adjust columns calculation by the number of spanned columns.\n\t\tconst colspan = parseInt( th.getAttribute( 'colspan' ) || 1 );\n\n\t\theadingColumns = headingColumns + colspan;\n\t\tindex++;\n\t}\n\n\treturn headingColumns;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/tablewalker\n */\n\n/**\n * Table iterator class. It allows to iterate over table cells. For each cell the iterator yields\n * {@link module:table/tablewalker~TableWalkerValue} with proper table cell attributes.\n */\nexport default class TableWalker {\n\t/**\n\t * Creates an instance of the table walker.\n\t *\n\t *\n\t * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n\t * It walks row by row and column by column in order to output values defined in the constructor.\n\t * By default it will output only those locations that are occupied by a cell. To include also spanned rows and columns,\n\t * pass the `includeSpanned` option to the constructor.\n\t *\n\t * The most important values of the iterator are column and row indexes of a cell.\n\t *\n\t * To iterate over a given row:\n\t *\n\t *\t\tconst tableWalker = new TableWalker( table, { startRow: 1, endRow: 2 } );\n\t *\n\t *\t\tfor ( const cellInfo of tableWalker ) {\n\t *\t\t\tconsole.log( 'A cell at row ' + cellInfo.row + ' and column ' + cellInfo.column );\n\t *\t\t}\n\t *\n\t * For instance the code above for the following table:\n\t *\n\t *\t\t+----+----+----+----+----+----+\n\t *\t\t| 00      | 02 | 03      | 05 |\n\t *\t\t|         +----+----+----+----+\n\t *\t\t|         | 12      | 14 | 15 |\n\t *\t\t|         +----+----+----+----+\n\t *\t\t|         | 22                |\n\t *\t\t|----+----+                   +\n\t *\t\t| 31 | 32 |                   |\n\t *\t\t+----+----+----+----+----+----+\n\t *\n\t * will log in the console:\n\t *\n\t *\t\t'A cell at row 1 and column 2'\n\t *\t\t'A cell at row 1 and column 4'\n\t *\t\t'A cell at row 1 and column 5'\n\t *\t\t'A cell at row 2 and column 2'\n\t *\n\t * To also iterate over spanned cells:\n\t *\n\t *\t\tconst tableWalker = new TableWalker( table, { startRow: 1, endRow: 1, includeSpanned: true } );\n\t *\n\t *\t\tfor ( const cellInfo of tableWalker ) {\n\t *\t\t\tconsole.log( 'Cell at ' + cellInfo.row + ' x ' + cellInfo.column + ' : ' + ( cellInfo.cell ? 'has data' : 'is spanned' ) );\n\t *\t\t}\n\t *\n\t * will log in the console for the table from previous example:\n\t *\n\t *\t\t'Cell at 1 x 0 : is spanned'\n\t *\t\t'Cell at 1 x 1 : is spanned'\n\t *\t\t'Cell at 1 x 2 : has data'\n\t *\t\t'Cell at 1 x 3 : is spanned'\n\t *\t\t'Cell at 1 x 4 : has data'\n\t *\t\t'Cell at 1 x 5 : has data'\n\t *\n\t * @constructor\n\t * @param {module:engine/model/element~Element} table A table over which the walker iterates.\n\t * @param {Object} [options={}] An object with configuration.\n\t * @param {Number} [options.column] A column index for which this iterator will output cells.\n\t * @param {Number} [options.startRow=0] A row index for which this iterator should start.\n\t * @param {Number} [options.endRow] A row index for which this iterator should end.\n\t * @param {Boolean} [options.includeSpanned] Also return values for spanned cells.\n\t */\n\tconstructor( table, options = {} ) {\n\t\t/**\n\t\t * The walker's table element.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/element~Element}\n\t\t */\n\t\tthis.table = table;\n\n\t\t/**\n\t\t * A row index on which this iterator will start.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.startRow = options.startRow || 0;\n\n\t\t/**\n\t\t * A row index on which this iterator will end.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.endRow = typeof options.endRow == 'number' ? options.endRow : undefined;\n\n\t\t/**\n\t\t * Enables output of spanned cells that are normally not yielded.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean}\n\t\t */\n\t\tthis.includeSpanned = !!options.includeSpanned;\n\n\t\t/**\n\t\t * If set, the table walker will only output cells of a given column or cells that overlap it.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t */\n\t\tthis.column = typeof options.column == 'number' ? options.column : undefined;\n\n\t\t/**\n\t\t * Row indexes to skip from the iteration.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Set<Number>}\n\t\t * @private\n\t\t */\n\t\tthis._skipRows = new Set();\n\n\t\t/**\n\t\t * The current row index.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t * @private\n\t\t */\n\t\tthis._row = 0;\n\n\t\t/**\n\t\t * The current column index.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t * @private\n\t\t */\n\t\tthis._column = 0;\n\n\t\t/**\n\t\t * The cell index in a parent row. For spanned cells when {@link #includeSpanned} is set to `true`,\n\t\t * this represents the index of the next table cell.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Number}\n\t\t * @private\n\t\t */\n\t\tthis._cell = 0;\n\n\t\t/**\n\t\t * Holds a map of spanned cells in a table.\n\t\t *\n\t\t * @readonly\n\t\t * @member {Map<Number, Map.<Number, Number>>}\n\t\t * @private\n\t\t */\n\t\tthis._spannedCells = new Map();\n\t}\n\n\t/**\n\t * Iterable interface.\n\t *\n\t * @returns {Iterable.<module:table/tablewalker~TableWalkerValue>}\n\t */\n\t[ Symbol.iterator ]() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the next table walker's value.\n\t *\n\t * @returns {module:table/tablewalker~TableWalkerValue} The next table walker's value.\n\t */\n\tnext() {\n\t\tconst row = this.table.getChild( this._row );\n\n\t\t// Iterator is done when no row (table end) or the row is after #endRow.\n\t\tif ( !row || this._isOverEndRow() ) {\n\t\t\treturn { done: true };\n\t\t}\n\n\t\t// Spanned cell location handling.\n\t\tif ( this._isSpanned( this._row, this._column ) ) {\n\t\t\t// Current column must be kept as it will be updated before returning current value.\n\t\t\tconst currentColumn = this._column;\n\t\t\tconst outValue = this._formatOutValue( undefined, currentColumn );\n\n\t\t\t// Advance to next column - always.\n\t\t\tthis._column++;\n\n\t\t\tconst skipCurrentValue = !this.includeSpanned || this._shouldSkipRow() || this._shouldSkipColumn( currentColumn, 1 );\n\n\t\t\t// The current value will be returned only if #includedSpanned=true and also current row and column are not skipped.\n\t\t\treturn skipCurrentValue ? this.next() : outValue;\n\t\t}\n\n\t\t// The cell location is not spanned by other cells.\n\t\tconst cell = row.getChild( this._cell );\n\n\t\tif ( !cell ) {\n\t\t\t// If there are no more cells left in row advance to next row.\n\t\t\tthis._row++;\n\t\t\t// And reset column & cell indexes.\n\t\t\tthis._column = 0;\n\t\t\tthis._cell = 0;\n\n\t\t\t// Return next value.\n\t\t\treturn this.next();\n\t\t}\n\n\t\t// Read table cell attributes.\n\t\tconst colspan = parseInt( cell.getAttribute( 'colspan' ) || 1 );\n\t\tconst rowspan = parseInt( cell.getAttribute( 'rowspan' ) || 1 );\n\n\t\t// Record this cell spans if it's not 1x1 cell.\n\t\tif ( colspan > 1 || rowspan > 1 ) {\n\t\t\tthis._recordSpans( this._row, this._column, rowspan, colspan );\n\t\t}\n\n\t\t// Current column must be kept as it will be updated before returning current value.\n\t\tconst currentColumn = this._column;\n\t\tconst outValue = this._formatOutValue( cell, currentColumn, rowspan, colspan );\n\n\t\t// Advance to next column before returning value.\n\t\tthis._column++;\n\n\t\t// Advance to next cell in a parent row before returning value.\n\t\tthis._cell++;\n\n\t\tconst skipCurrentValue = this._shouldSkipRow() || this._shouldSkipColumn( currentColumn, colspan );\n\n\t\t// The current value will be returned only if current row & column are not skipped.\n\t\treturn skipCurrentValue ? this.next() : outValue;\n\t}\n\n\t/**\n\t * Marks a row to skip in the next iteration. It will also skip cells from the current row if there are any cells from the current row\n\t * to output.\n\t *\n\t * @param {Number} row Row index to skip.\n\t */\n\tskipRow( row ) {\n\t\tthis._skipRows.add( row );\n\t}\n\n\t/**\n\t * Checks if the current row is over {@link #endRow}.\n\t *\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isOverEndRow() {\n\t\t// If {@link #endRow) is defined skip all rows above it.\n\t\treturn this.endRow !== undefined && this._row > this.endRow;\n\t}\n\n\t/**\n\t * A common method for formatting the iterator's output value.\n\t *\n\t * @param {module:engine/model/element~Element|undefined} cell The table cell to output. It might be undefined for spanned cell\n\t * locations.\n\t * @param {Number} column Column index (use the cached value)\n\t * @param {Number} rowspan Rowspan of the current cell.\n\t * @param {Number} colspan Colspan of the current cell.\n\t * @returns {{done: boolean, value: {cell: *, row: Number, column: *, rowspan: *, colspan: *, cellIndex: Number}}}\n\t * @private\n\t */\n\t_formatOutValue( cell, column, rowspan = 1, colspan = 1 ) {\n\t\treturn {\n\t\t\tdone: false,\n\t\t\tvalue: {\n\t\t\t\tcell,\n\t\t\t\trow: this._row,\n\t\t\t\tcolumn,\n\t\t\t\trowspan,\n\t\t\t\tcolspan,\n\t\t\t\tcellIndex: this._cell\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Checks if the current row should be skipped.\n\t *\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_shouldSkipRow() {\n\t\tconst rowIsBelowStartRow = this._row < this.startRow;\n\t\tconst rowIsMarkedAsSkipped = this._skipRows.has( this._row );\n\n\t\treturn rowIsBelowStartRow || rowIsMarkedAsSkipped;\n\t}\n\n\t/**\n\t * Checks if the current column should be skipped.\n\t *\n\t * @param {Number} column\n\t * @param {Number} colspan\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_shouldSkipColumn( column, colspan ) {\n\t\tif ( this.column === undefined ) {\n\t\t\t// The {@link #column} is not defined so output all columns.\n\t\t\treturn false;\n\t\t}\n\n\t\t// When outputting cells from given column we skip:\n\t\t// - Cells that are not on that column.\n\t\tconst isCurrentColumn = column === this.column;\n\t\t// - CSells that are before given column and they overlaps given column.\n\t\tconst isPreviousThatOverlapsColumn = column < this.column && column + colspan > this.column;\n\n\t\treturn !isCurrentColumn && !isPreviousThatOverlapsColumn;\n\t}\n\n\t/**\n\t * Checks if the current cell location (row x column) is spanned by another cell.\n\t *\n\t * @param {Number} row Row index of a cell location to check.\n\t * @param {Number} column Column index of a cell location to check.\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isSpanned( row, column ) {\n\t\tif ( !this._spannedCells.has( row ) ) {\n\t\t\t// No spans for given row.\n\t\t\treturn false;\n\t\t}\n\n\t\tconst rowSpans = this._spannedCells.get( row );\n\n\t\t// If spans for given rows has entry for column it means that this location if spanned by other cell.\n\t\treturn rowSpans.has( column );\n\t}\n\n\t/**\n\t * Updates spanned cells map relative to the current cell location and its span dimensions.\n\t *\n\t * @param {Number} row Row index of a cell.\n\t * @param {Number} column Column index of a cell.\n\t * @param {Number} rowspan Cell height.\n\t * @param {Number} colspan Cell width.\n\t * @private\n\t */\n\t_recordSpans( row, column, rowspan, colspan ) {\n\t\t// This will update all cell locations after current column - ie a cell has colspan set.\n\t\tfor ( let columnToUpdate = column + 1; columnToUpdate <= column + colspan - 1; columnToUpdate++ ) {\n\t\t\tthis._markSpannedCell( row, columnToUpdate );\n\t\t}\n\n\t\t// This will update all rows below current up to row's height.\n\t\tfor ( let rowToUpdate = row + 1; rowToUpdate < row + rowspan; rowToUpdate++ ) {\n\t\t\tfor ( let columnToUpdate = column; columnToUpdate <= column + colspan - 1; columnToUpdate++ ) {\n\t\t\t\tthis._markSpannedCell( rowToUpdate, columnToUpdate );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Marks the cell location as spanned by another cell.\n\t *\n\t * @param {Number} row Row index of the cell location.\n\t * @param {Number} column Column index of the cell location.\n\t * @private\n\t */\n\t_markSpannedCell( row, column ) {\n\t\tif ( !this._spannedCells.has( row ) ) {\n\t\t\tthis._spannedCells.set( row, new Map() );\n\t\t}\n\n\t\tconst rowSpans = this._spannedCells.get( row );\n\n\t\trowSpans.set( column, true );\n\t}\n}\n\n/**\n * An object returned by {@link module:table/tablewalker~TableWalker} when traversing table cells.\n *\n * @typedef {Object} module:table/tablewalker~TableWalkerValue\n * @property {module:engine/model/element~Element} [cell] The current table cell. Might be empty if\n * {@link module:table/tablewalker~TableWalker#includeSpanned} is set to `true`.\n * @property {Number} row The row index of a cell.\n * @property {Number} column The column index of a cell. Column index is adjusted to widths and heights of previous cells.\n * @property {Number} [colspan] The `colspan` attribute of a cell. It is always defined even if the model attribute is not present. Not\n * set if {@link module:table/tablewalker~TableWalker#includeSpanned} is set to `true`.\n * @property {Number} [rowspan] The `rowspan` attribute of a cell. It is always defined even if the model attribute is not present. Not\n * set if {@link module:table/tablewalker~TableWalker#includeSpanned} is set to `true`.\n * @property {Number} cellIndex The index of the current cell in a parent row. When using the `includeSpanned` option it will indicate the\n * next child index if #cell is empty (which indicates that the cell is spanned by another cell).\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module widget/highlightstack\n */\n\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Class used to handle correct order of highlights on elements.\n *\n * When different highlights are applied to same element correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcast-converters~HighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */\nexport default class HighlightStack {\n\t/**\n\t * Creates class instance.\n\t */\n\tconstructor() {\n\t\tthis._stack = [];\n\t}\n\n\t/**\n\t * Adds highlight descriptor to the stack.\n\t *\n\t * @fires change:top\n\t * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} descriptor\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\tadd( descriptor, writer ) {\n\t\tconst stack = this._stack;\n\n\t\t// Save top descriptor and insert new one. If top is changed - fire event.\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._insertDescriptor( descriptor );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Removes highlight descriptor from the stack.\n\t *\n\t * @fires change:top\n\t * @param {String} id Id of the descriptor to remove.\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\tremove( id, writer ) {\n\t\tconst stack = this._stack;\n\n\t\tconst oldTop = stack[ 0 ];\n\t\tthis._removeDescriptor( id );\n\t\tconst newTop = stack[ 0 ];\n\n\t\t// When new object is at the top and stores different information.\n\t\tif ( oldTop !== newTop && !compareDescriptors( oldTop, newTop ) ) {\n\t\t\tthis.fire( 'change:top', {\n\t\t\t\toldDescriptor: oldTop,\n\t\t\t\tnewDescriptor: newTop,\n\t\t\t\twriter\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Inserts given descriptor in correct place in the stack. It also takes care about updating information when\n\t * descriptor with same id is already present.\n\t *\n\t * @private\n\t * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} descriptor\n\t */\n\t_insertDescriptor( descriptor ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === descriptor.id );\n\n\t\t// Inserting exact same descriptor - do nothing.\n\t\tif ( compareDescriptors( descriptor, stack[ index ] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If descriptor with same id but with different information is on the stack - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\n\t\t// Find correct place to insert descriptor in the stack.\n\t\t// It have different information (for example priority) so it must be re-inserted in correct place.\n\t\tlet i = 0;\n\n\t\twhile ( stack[ i ] && shouldABeBeforeB( stack[ i ], descriptor ) ) {\n\t\t\ti++;\n\t\t}\n\n\t\tstack.splice( i, 0, descriptor );\n\t}\n\n\t/**\n\t * Removes descriptor with given id from the stack.\n\t *\n\t * @private\n\t * @param {String} id Descriptor's id.\n\t */\n\t_removeDescriptor( id ) {\n\t\tconst stack = this._stack;\n\t\tconst index = stack.findIndex( item => item.id === id );\n\n\t\t// If descriptor with same id is on the list - remove it.\n\t\tif ( index > -1 ) {\n\t\t\tstack.splice( index, 1 );\n\t\t}\n\t}\n}\n\nmix( HighlightStack, EmitterMixin );\n\n// Compares two descriptors by checking their priority and class list.\n//\n// @param {module:engine/conversion/downcast-converters~HighlightDescriptor} a\n// @param {module:engine/conversion/downcast-converters~HighlightDescriptor} b\n// @returns {Boolean} Returns true if both descriptors are defined and have same priority and classes.\nfunction compareDescriptors( a, b ) {\n\treturn a && b && a.priority == b.priority && classesToString( a.classes ) == classesToString( b.classes );\n}\n\n// Checks whenever first descriptor should be placed in the stack before second one.\n//\n// @param {module:engine/conversion/downcast-converters~HighlightDescriptor} a\n// @param {module:engine/conversion/downcast-converters~HighlightDescriptor} b\n// @returns {Boolean}\nfunction shouldABeBeforeB( a, b ) {\n\tif ( a.priority > b.priority ) {\n\t\treturn true;\n\t} else if ( a.priority < b.priority ) {\n\t\treturn false;\n\t}\n\n\t// When priorities are equal and names are different - use classes to compare.\n\treturn classesToString( a.classes ) > classesToString( b.classes );\n}\n\n// Converts CSS classes passed with {@link module:engine/conversion/downcast-converters~HighlightDescriptor} to\n// sorted string.\n//\n// @param {String|Array<String>} descriptor\n// @returns {String}\nfunction classesToString( classes ) {\n\treturn Array.isArray( classes ) ? classes.sort().join( ',' ) : classes;\n}\n\n/**\n * Fired when top element on {@link module:widget/highlightstack~HighlightStack} has been changed\n *\n * @event change:top\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} [data.newDescriptor] New highlight\n * descriptor. It will be `undefined` when last descriptor is removed from the stack.\n * @param {module:engine/conversion/downcast-converters~HighlightDescriptor} [data.oldDescriptor] Old highlight\n * descriptor. It will be `undefined` when first descriptor is added to the stack.\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that can be used to modify element.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module widget/utils\n */\n\nimport HighlightStack from './highlightstack';\nimport IconView from '@ckeditor/ckeditor5-ui/src/icon/iconview';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n\nimport dragHandlerIcon from '../theme/icons/drag-handler.svg';\n\nconst widgetSymbol = Symbol( 'isWidget' );\nconst labelSymbol = Symbol( 'label' );\n\n/**\n * CSS class added to each widget element.\n *\n * @const {String}\n */\nexport const WIDGET_CLASS_NAME = 'ck-widget';\n\n/**\n * CSS class added to currently selected widget element.\n *\n * @const {String}\n */\nexport const WIDGET_SELECTED_CLASS_NAME = 'ck-widget_selected';\n\n/**\n * Returns `true` if given {@link module:engine/view/node~Node} is an {@link module:engine/view/element~Element} and a widget.\n *\n * @param {module:engine/view/node~Node} node\n * @returns {Boolean}\n */\nexport function isWidget( node ) {\n\tif ( !node.is( 'element' ) ) {\n\t\treturn false;\n\t}\n\n\treturn !!node.getCustomProperty( widgetSymbol );\n}\n\n/**\n * Converts the given {@link module:engine/view/element~Element} to a widget in the following way:\n *\n * * sets the `contenteditable` attribute to `\"true\"`,\n * * adds the `ck-widget` CSS class,\n * * adds a custom {@link module:engine/view/element~Element#getFillerOffset `getFillerOffset()`} method returning `null`,\n * * adds a custom property allowing to recognize widget elements by using {@link ~isWidget `isWidget()`},\n * * implements the {@link ~setHighlightHandling view highlight on widgets}.\n *\n * This function needs to be used in conjuction with {@link module:engine/conversion/downcast-converters downcast converters}\n * like {@link module:engine/conversion/downcast-converters~downcastElementToElement `downcastElementToElement()`}.\n * Moreover, typically you will want to use `toWidget()` only for `editingDowncast`, while keeping the `dataDowncast` clean.\n *\n * For example, in order to convert a `<widget>` model element to `<div class=\"widget\">` in the view, you can define\n * such converters:\n *\n *\t\teditor.conversion.for( 'editingDowncast' )\n *\t\t\t.add( downcastElementToElement( {\n *\t\t\t\tmodel: 'widget',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\tconst div = writer.createContainerElement( 'div', { class: 'widget' } );\n *\n *\t\t\t\t\treturn toWidget( div, writer, { label: 'some widget' } );\n *\t\t\t\t}\n *\t\t\t} ) );\n *\n *\t\teditor.conversion.for( 'dataDowncast' )\n *\t\t\t.add( downcastElementToElement( {\n *\t\t\t\tmodel: 'widget',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\treturn writer.createContainerElement( 'div', { class: 'widget' } );\n *\t\t\t\t}\n *\t\t\t} ) );\n *\n * See the full source code of the widget (with a nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param {module:engine/view/element~Element} element\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {Object} [options={}]\n * @param {String|Function} [options.label] Element's label provided to the {@link ~setLabel} function. It can be passed as\n * a plain string or a function returning a string. It represents the widget for assistive technologies (like screen readers).\n * @param {Boolean} [options.hasSelectionHandler=false] If `true`, the widget will have a selection handler added.\n * @returns {module:engine/view/element~Element} Returns the same element.\n */\nexport function toWidget( element, writer, options = {} ) {\n\t// The selection on Edge behaves better when the whole editor contents is in a single contenteditable element.\n\t// https://github.com/ckeditor/ckeditor5/issues/1079\n\tif ( !env.isEdge ) {\n\t\twriter.setAttribute( 'contenteditable', 'false', element );\n\t}\n\n\twriter.addClass( WIDGET_CLASS_NAME, element );\n\twriter.setCustomProperty( widgetSymbol, true, element );\n\telement.getFillerOffset = getFillerOffset;\n\n\tif ( options.label ) {\n\t\tsetLabel( element, options.label, writer );\n\t}\n\n\tif ( options.hasSelectionHandler ) {\n\t\taddSelectionHandler( element, writer );\n\t}\n\n\tsetHighlightHandling(\n\t\telement,\n\t\twriter,\n\t\t( element, descriptor, writer ) => writer.addClass( normalizeToArray( descriptor.classes ), element ),\n\t\t( element, descriptor, writer ) => writer.removeClass( normalizeToArray( descriptor.classes ), element )\n\t);\n\n\treturn element;\n\n\t// Normalizes CSS class in descriptor that can be provided in form of an array or a string.\n\tfunction normalizeToArray( classes ) {\n\t\treturn Array.isArray( classes ) ? classes : [ classes ];\n\t}\n}\n\n/**\n * Sets highlight handling methods. Uses {@link module:widget/highlightstack~HighlightStack} to\n * properly determine which highlight descriptor should be used at given time.\n *\n * @param {module:engine/view/element~Element} element\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {Function} add\n * @param {Function} remove\n */\nexport function setHighlightHandling( element, writer, add, remove ) {\n\tconst stack = new HighlightStack();\n\n\tstack.on( 'change:top', ( evt, data ) => {\n\t\tif ( data.oldDescriptor ) {\n\t\t\tremove( element, data.oldDescriptor, data.writer );\n\t\t}\n\n\t\tif ( data.newDescriptor ) {\n\t\t\tadd( element, data.newDescriptor, data.writer );\n\t\t}\n\t} );\n\n\twriter.setCustomProperty( 'addHighlight', ( element, descriptor, writer ) => stack.add( descriptor, writer ), element );\n\twriter.setCustomProperty( 'removeHighlight', ( element, id, writer ) => stack.remove( id, writer ), element );\n}\n\n/**\n * Sets label for given element.\n * It can be passed as a plain string or a function returning a string. Function will be called each time label is retrieved by\n * {@link ~getLabel `getLabel()`}.\n *\n * @param {module:engine/view/element~Element} element\n * @param {String|Function} labelOrCreator\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n */\nexport function setLabel( element, labelOrCreator, writer ) {\n\twriter.setCustomProperty( labelSymbol, labelOrCreator, element );\n}\n\n/**\n * Returns the label of the provided element.\n *\n * @param {module:engine/view/element~Element} element\n * @returns {String}\n */\nexport function getLabel( element ) {\n\tconst labelCreator = element.getCustomProperty( labelSymbol );\n\n\tif ( !labelCreator ) {\n\t\treturn '';\n\t}\n\n\treturn typeof labelCreator == 'function' ? labelCreator() : labelCreator;\n}\n\n/**\n * Adds functionality to the provided {@link module:engine/view/editableelement~EditableElement} to act as a widget's editable:\n *\n * * sets the `contenteditable` attribute to `true` when {@link module:engine/view/editableelement~EditableElement#isReadOnly} is `false`,\n * otherwise sets it to `false`,\n * * adds the `ck-editor__editable` and `ck-editor__nested-editable` CSS classes,\n * * adds the `ck-editor__nested-editable_focused` CSS class when the editable is focused and removes it when it is blurred.\n *\n * Similarly to {@link ~toWidget `toWidget()`} this function should be used in `dataDowncast` only and it is usually\n * used together with {@link module:engine/conversion/downcast-converters~downcastElementToElement `downcastElementToElement()`}.\n *\n * For example, in order to convert a `<nested>` model element to `<div class=\"nested\">` in the view, you can define\n * such converters:\n *\n *\t\teditor.conversion.for( 'editingDowncast' )\n *\t\t\t.add( downcastElementToElement( {\n *\t\t\t\tmodel: 'nested',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\tconst div = writer.createEditableElement( 'div', { class: 'nested' } );\n *\n *\t\t\t\t\treturn toWidgetEditable( nested, writer );\n *\t\t\t\t}\n *\t\t\t} ) );\n *\n *\t\teditor.conversion.for( 'dataDowncast' )\n *\t\t\t.add( downcastElementToElement( {\n *\t\t\t\tmodel: 'nested',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\treturn writer.createContainerElement( 'div', { class: 'nested' } );\n *\t\t\t\t}\n *\t\t\t} ) );\n *\n * See the full source code of the widget (with nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param {module:engine/view/editableelement~EditableElement} editable\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @returns {module:engine/view/editableelement~EditableElement} Returns the same element that was provided in the `editable` parameter\n */\nexport function toWidgetEditable( editable, writer ) {\n\twriter.addClass( [ 'ck-editor__editable', 'ck-editor__nested-editable' ], editable );\n\n\t// The selection on Edge behaves better when the whole editor contents is in a single contentedible element.\n\t// https://github.com/ckeditor/ckeditor5/issues/1079\n\tif ( !env.isEdge ) {\n\t\t// Set initial contenteditable value.\n\t\twriter.setAttribute( 'contenteditable', editable.isReadOnly ? 'false' : 'true', editable );\n\n\t\t// Bind the contenteditable property to element#isReadOnly.\n\t\teditable.on( 'change:isReadOnly', ( evt, property, is ) => {\n\t\t\twriter.setAttribute( 'contenteditable', is ? 'false' : 'true', editable );\n\t\t} );\n\t}\n\n\teditable.on( 'change:isFocused', ( evt, property, is ) => {\n\t\tif ( is ) {\n\t\t\twriter.addClass( 'ck-editor__nested-editable_focused', editable );\n\t\t} else {\n\t\t\twriter.removeClass( 'ck-editor__nested-editable_focused', editable );\n\t\t}\n\t} );\n\n\treturn editable;\n}\n\n/**\n * Returns a model position which is optimal (in terms of UX) for inserting a widget block.\n *\n * For instance, if a selection is in the middle of a paragraph, the position before this paragraph\n * will be returned so that it is not split. If the selection is at the end of a paragraph,\n * the position after this paragraph will be returned.\n *\n * Note: If the selection is placed in an empty block, that block will be returned. If that position\n * is then passed to {@link module:engine/model/model~Model#insertContent},\n * the block will be fully replaced by the image.\n *\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * The selection based on which the insertion position should be calculated.\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {module:engine/model/position~Position} The optimal position.\n */\nexport function findOptimalInsertionPosition( selection, model ) {\n\tconst selectedElement = selection.getSelectedElement();\n\n\tif ( selectedElement ) {\n\t\treturn model.createPositionAfter( selectedElement );\n\t}\n\n\tconst firstBlock = selection.getSelectedBlocks().next().value;\n\n\tif ( firstBlock ) {\n\t\t// If inserting into an empty block – return position in that block. It will get\n\t\t// replaced with the image by insertContent(). #42.\n\t\tif ( firstBlock.isEmpty ) {\n\t\t\treturn model.createPositionAt( firstBlock, 0 );\n\t\t}\n\n\t\tconst positionAfter = model.createPositionAfter( firstBlock );\n\n\t\t// If selection is at the end of the block - return position after the block.\n\t\tif ( selection.focus.isTouching( positionAfter ) ) {\n\t\t\treturn positionAfter;\n\t\t}\n\n\t\t// Otherwise return position before the block.\n\t\treturn model.createPositionBefore( firstBlock );\n\t}\n\n\treturn selection.focus;\n}\n\n// Default filler offset function applied to all widget elements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n\n// Adds a drag handler to the editable element.\n//\n// @param {module:engine/view/editableelement~EditableElement}\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction addSelectionHandler( editable, writer ) {\n\tconst selectionHandler = writer.createUIElement( 'div', { class: 'ck ck-widget__selection-handler' }, function( domDocument ) {\n\t\tconst domElement = this.toDomElement( domDocument );\n\n\t\t// Use the IconView from the ui library.\n\t\tconst icon = new IconView();\n\t\ticon.set( 'content', dragHandlerIcon );\n\n\t\t// Render the icon view right away to append its #element to the selectionHandler DOM element.\n\t\ticon.render();\n\n\t\tdomElement.appendChild( icon.element );\n\n\t\treturn domElement;\n\t} );\n\n\t// Append the selection handler into the widget wrapper.\n\twriter.insert( writer.createPositionAt( editable, 0 ), selectionHandler );\n\twriter.addClass( [ 'ck-widget_selectable' ], editable );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/utils\n */\n\nimport { isWidget, toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\nimport { findAncestor } from './commands/utils';\n\nconst tableSymbol = Symbol( 'isTable' );\n\n/**\n * Converts a given {@link module:engine/view/element~Element} to a table widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the table widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n * @param {String} label The element's label. It will be concatenated with the table `alt` attribute if one is present.\n * @returns {module:engine/view/element~Element}\n */\nexport function toTableWidget( viewElement, writer ) {\n\twriter.setCustomProperty( tableSymbol, true, viewElement );\n\n\treturn toWidget( viewElement, writer, { hasSelectionHandler: true } );\n}\n\n/**\n * Checks if a given view element is a table widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\nexport function isTableWidget( viewElement ) {\n\treturn !!viewElement.getCustomProperty( tableSymbol ) && isWidget( viewElement );\n}\n\n/**\n * Checks if a table widget is the only selected element.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {Boolean}\n */\nexport function isTableWidgetSelected( selection ) {\n\tconst viewElement = selection.getSelectedElement();\n\n\treturn !!( viewElement && isTableWidget( viewElement ) );\n}\n\n/**\n * Checks if a table widget content is selected.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {Boolean}\n */\nexport function isTableContentSelected( selection ) {\n\tconst parentTable = findAncestor( 'table', selection.getFirstPosition() );\n\n\treturn !!( parentTable && isTableWidget( parentTable.parent ) );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/converters/downcast\n */\n\nimport TableWalker from './../tablewalker';\nimport { toWidgetEditable } from '@ckeditor/ckeditor5-widget/src/utils';\nimport { toTableWidget } from '../utils';\n\n/**\n * Model table element to view table element conversion helper.\n *\n * This conversion helper creates the whole table element with child elements.\n *\n * @param {Object} options\n * @param {Boolean} options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns {Function} Conversion helper.\n */\nexport function downcastInsertTable( options = {} ) {\n\treturn dispatcher => dispatcher.on( 'insert:table', ( evt, data, conversionApi ) => {\n\t\tconst table = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( table, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Consume attributes if present to not fire attribute change downcast\n\t\tconversionApi.consumable.consume( table, 'attribute:headingRows:table' );\n\t\tconversionApi.consumable.consume( table, 'attribute:headingColumns:table' );\n\n\t\tconst asWidget = options && options.asWidget;\n\n\t\tconst figureElement = conversionApi.writer.createContainerElement( 'figure', { class: 'table' } );\n\t\tconst tableElement = conversionApi.writer.createContainerElement( 'table' );\n\t\tconversionApi.writer.insert( conversionApi.writer.createPositionAt( figureElement, 0 ), tableElement );\n\n\t\tlet tableWidget;\n\n\t\tif ( asWidget ) {\n\t\t\ttableWidget = toTableWidget( figureElement, conversionApi.writer );\n\t\t}\n\n\t\tconst tableWalker = new TableWalker( table );\n\n\t\tconst tableAttributes = {\n\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t};\n\n\t\tfor ( const tableWalkerValue of tableWalker ) {\n\t\t\tconst { row, cell } = tableWalkerValue;\n\n\t\t\tconst tableSection = getOrCreateTableSection( getSectionName( row, tableAttributes ), tableElement, conversionApi );\n\t\t\tconst tableRow = table.getChild( row );\n\n\t\t\t// Check if row was converted\n\t\t\tconst trElement = getOrCreateTr( tableRow, row, tableSection, conversionApi );\n\n\t\t\t// Consume table cell - it will be always consumed as we convert whole table at once.\n\t\t\tconversionApi.consumable.consume( cell, 'insert' );\n\n\t\t\tconst insertPosition = conversionApi.writer.createPositionAt( trElement, 'end' );\n\n\t\t\tcreateViewTableCellElement( tableWalkerValue, tableAttributes, insertPosition, conversionApi, options );\n\t\t}\n\n\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n\n\t\tconversionApi.mapper.bindElements( table, asWidget ? tableWidget : figureElement );\n\t\tconversionApi.writer.insert( viewPosition, asWidget ? tableWidget : figureElement );\n\t} );\n}\n\n/**\n * Model row element to view `<tr>` element conversion helper.\n *\n * This conversion helper creates the whole `<tr>` element with child elements.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastInsertRow( options = {} ) {\n\treturn dispatcher => dispatcher.on( 'insert:tableRow', ( evt, data, conversionApi ) => {\n\t\tconst tableRow = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( tableRow, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst table = tableRow.parent;\n\n\t\tconst figureElement = conversionApi.mapper.toViewElement( table );\n\t\tconst tableElement = getViewTable( figureElement );\n\n\t\tconst row = table.getChildIndex( tableRow );\n\n\t\tconst tableWalker = new TableWalker( table, { startRow: row, endRow: row } );\n\n\t\tconst tableAttributes = {\n\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t};\n\n\t\tfor ( const tableWalkerValue of tableWalker ) {\n\t\t\tconst tableSection = getOrCreateTableSection( getSectionName( row, tableAttributes ), tableElement, conversionApi );\n\t\t\tconst trElement = getOrCreateTr( tableRow, row, tableSection, conversionApi );\n\n\t\t\t// Consume table cell - it will be always consumed as we convert whole row at once.\n\t\t\tconversionApi.consumable.consume( tableWalkerValue.cell, 'insert' );\n\n\t\t\tconst insertPosition = conversionApi.writer.createPositionAt( trElement, 'end' );\n\n\t\t\tcreateViewTableCellElement( tableWalkerValue, tableAttributes, insertPosition, conversionApi, options );\n\t\t}\n\t} );\n}\n\n/**\n * Model table cell element to view `<td>` or `<th>` element conversion helper.\n *\n * This conversion helper will create proper `<th>` elements for table cells that are in the heading section (heading row or column)\n * and `<td>` otherwise.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastInsertCell( options = {} ) {\n\treturn dispatcher => dispatcher.on( 'insert:tableCell', ( evt, data, conversionApi ) => {\n\t\tconst tableCell = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( tableCell, 'insert' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\t\tconst rowIndex = table.getChildIndex( tableRow );\n\n\t\tconst tableWalker = new TableWalker( table, { startRow: rowIndex, endRow: rowIndex } );\n\n\t\tconst tableAttributes = {\n\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t};\n\n\t\t// We need to iterate over a table in order to get proper row & column values from a walker\n\t\tfor ( const tableWalkerValue of tableWalker ) {\n\t\t\tif ( tableWalkerValue.cell === tableCell ) {\n\t\t\t\tconst trElement = conversionApi.mapper.toViewElement( tableRow );\n\t\t\t\tconst insertPosition = conversionApi.writer.createPositionAt( trElement, tableRow.getChildIndex( tableCell ) );\n\n\t\t\t\tcreateViewTableCellElement( tableWalkerValue, tableAttributes, insertPosition, conversionApi, options );\n\n\t\t\t\t// No need to iterate further.\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t} );\n}\n\n/**\n * Conversion helper that acts on heading rows table attribute change.\n *\n * This converter will:\n *\n * * Rename `<td>` to `<th>` elements or vice versa depending on headings.\n * * Create `<thead>` or `<tbody>` elements if needed.\n * * Remove empty `<thead>` or `<tbody>` if needed.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastTableHeadingRowsChange( options = {} ) {\n\tconst asWidget = !!options.asWidget;\n\n\treturn dispatcher => dispatcher.on( 'attribute:headingRows:table', ( evt, data, conversionApi ) => {\n\t\tconst table = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst figureElement = conversionApi.mapper.toViewElement( table );\n\t\tconst viewTable = getViewTable( figureElement );\n\n\t\tconst oldRows = data.attributeOldValue;\n\t\tconst newRows = data.attributeNewValue;\n\n\t\t// The head section has grown so move rows from <tbody> to <thead>.\n\t\tif ( newRows > oldRows ) {\n\t\t\t// Filter out only those rows that are in wrong section.\n\t\t\tconst rowsToMove = Array.from( table.getChildren() ).filter( ( { index } ) => isBetween( index, oldRows - 1, newRows ) );\n\n\t\t\tconst viewTableHead = getOrCreateTableSection( 'thead', viewTable, conversionApi );\n\t\t\tmoveViewRowsToTableSection( rowsToMove, viewTableHead, conversionApi, 'end' );\n\n\t\t\t// Rename all table cells from moved rows to 'th' as they lands in <thead>.\n\t\t\tfor ( const tableRow of rowsToMove ) {\n\t\t\t\tfor ( const tableCell of tableRow.getChildren() ) {\n\t\t\t\t\trenameViewTableCell( tableCell, 'th', conversionApi, asWidget );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Cleanup: this will remove any empty section from the view which may happen when moving all rows from a table section.\n\t\t\tremoveTableSectionIfEmpty( 'tbody', viewTable, conversionApi );\n\t\t}\n\t\t// The head section has shrunk so move rows from <thead> to <tbody>.\n\t\telse {\n\t\t\t// Filter out only those rows that are in wrong section.\n\t\t\tconst rowsToMove = Array.from( table.getChildren() )\n\t\t\t\t.filter( ( { index } ) => isBetween( index, newRows - 1, oldRows ) )\n\t\t\t\t.reverse(); // The rows will be moved from <thead> to <tbody> in reverse order at the beginning of a <tbody>.\n\n\t\t\tconst viewTableBody = getOrCreateTableSection( 'tbody', viewTable, conversionApi );\n\t\t\tmoveViewRowsToTableSection( rowsToMove, viewTableBody, conversionApi, 0 );\n\n\t\t\t// Check if cells moved from <thead> to <tbody> requires renaming to <td> as this depends on current heading columns attribute.\n\t\t\tconst tableWalker = new TableWalker( table, { startRow: newRows ? newRows - 1 : newRows, endRow: oldRows - 1 } );\n\n\t\t\tconst tableAttributes = {\n\t\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t\t};\n\n\t\t\tfor ( const tableWalkerValue of tableWalker ) {\n\t\t\t\trenameViewTableCellIfRequired( tableWalkerValue, tableAttributes, conversionApi, asWidget );\n\t\t\t}\n\n\t\t\t// Cleanup: this will remove any empty section from the view which may happen when moving all rows from a table section.\n\t\t\tremoveTableSectionIfEmpty( 'thead', viewTable, conversionApi );\n\t\t}\n\n\t\tfunction isBetween( index, lower, upper ) {\n\t\t\treturn index > lower && index < upper;\n\t\t}\n\t} );\n}\n\n/**\n * Conversion helper that acts on heading columns table attribute change.\n *\n * Depending on changed attributes this converter will rename `<td` to `<th>` elements or vice versa depending of the cell column index.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastTableHeadingColumnsChange( options = {} ) {\n\tconst asWidget = !!options.asWidget;\n\n\treturn dispatcher => dispatcher.on( 'attribute:headingColumns:table', ( evt, data, conversionApi ) => {\n\t\tconst table = data.item;\n\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tableAttributes = {\n\t\t\theadingRows: table.getAttribute( 'headingRows' ) || 0,\n\t\t\theadingColumns: table.getAttribute( 'headingColumns' ) || 0\n\t\t};\n\n\t\tconst oldColumns = data.attributeOldValue;\n\t\tconst newColumns = data.attributeNewValue;\n\n\t\tconst lastColumnToCheck = ( oldColumns > newColumns ? oldColumns : newColumns ) - 1;\n\n\t\tfor ( const tableWalkerValue of new TableWalker( table ) ) {\n\t\t\t// Skip cells that were not in heading section before and after the change.\n\t\t\tif ( tableWalkerValue.column > lastColumnToCheck ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\trenameViewTableCellIfRequired( tableWalkerValue, tableAttributes, conversionApi, asWidget );\n\t\t}\n\t} );\n}\n\n/**\n * Conversion helper that acts on a removed row.\n *\n * @returns {Function} Conversion helper.\n */\nexport function downcastRemoveRow() {\n\treturn dispatcher => dispatcher.on( 'remove:tableRow', ( evt, data, conversionApi ) => {\n\t\t// Prevent default remove converter.\n\t\tevt.stop();\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst mapper = conversionApi.mapper;\n\n\t\tconst viewStart = mapper.toViewPosition( data.position ).getLastMatchingPosition( value => !value.item.is( 'tr' ) );\n\t\tconst viewItem = viewStart.nodeAfter;\n\t\tconst tableSection = viewItem.parent;\n\n\t\t// Remove associated <tr> from the view.\n\t\tconst removeRange = viewWriter.createRangeOn( viewItem );\n\t\tconst removed = viewWriter.remove( removeRange );\n\n\t\tfor ( const child of viewWriter.createRangeIn( removed ).getItems() ) {\n\t\t\tmapper.unbindViewElement( child );\n\t\t}\n\n\t\t// Check if table section has any children left - if not remove it from the view.\n\t\tif ( !tableSection.childCount ) {\n\t\t\t// No need to unbind anything as table section is not represented in the model.\n\t\t\tviewWriter.remove( viewWriter.createRangeOn( tableSection ) );\n\t\t}\n\t}, { priority: 'higher' } );\n}\n\n// Renames an existing table cell in the view to a given element name.\n//\n// **Note** This method will not do anything if a view table cell was not yet converted.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {String} desiredCellElementName\n// @param {Object} conversionApi\n// @param {Boolean} asWidget\nfunction renameViewTableCell( tableCell, desiredCellElementName, conversionApi, asWidget ) {\n\tconst viewWriter = conversionApi.writer;\n\tconst viewCell = conversionApi.mapper.toViewElement( tableCell );\n\n\t// View cell might be not yet converted - skip it as it will be properly created by cell converter later on.\n\tif ( !viewCell ) {\n\t\treturn;\n\t}\n\n\tlet renamedCell;\n\n\tif ( asWidget ) {\n\t\tconst editable = viewWriter.createEditableElement( desiredCellElementName, viewCell.getAttributes() );\n\t\trenamedCell = toWidgetEditable( editable, viewWriter );\n\n\t\tviewWriter.insert( viewWriter.createPositionAfter( viewCell ), renamedCell );\n\t\tviewWriter.move( viewWriter.createRangeIn( viewCell ), viewWriter.createPositionAt( renamedCell, 0 ) );\n\t\tviewWriter.remove( viewWriter.createRangeOn( viewCell ) );\n\t} else {\n\t\trenamedCell = viewWriter.rename( desiredCellElementName, viewCell );\n\t}\n\n\tconversionApi.mapper.bindElements( tableCell, renamedCell );\n}\n\n// Renames a table cell element in the view according to its location in the table.\n//\n// @param {module:table/tablewalker~TableWalkerValue} tableWalkerValue\n// @param {{headingColumns, headingRows}} tableAttributes\n// @param {Object} conversionApi\n// @param {Boolean} asWidget\nfunction renameViewTableCellIfRequired( tableWalkerValue, tableAttributes, conversionApi, asWidget ) {\n\tconst { cell } = tableWalkerValue;\n\n\t// Check whether current columnIndex is overlapped by table cells from previous rows.\n\tconst desiredCellElementName = getCellElementName( tableWalkerValue, tableAttributes );\n\n\tconst viewCell = conversionApi.mapper.toViewElement( cell );\n\n\t// If in single change we're converting attribute changes and inserting cell the table cell might not be inserted into view\n\t// because of child conversion is done after parent.\n\tif ( viewCell && viewCell.name !== desiredCellElementName ) {\n\t\trenameViewTableCell( cell, desiredCellElementName, conversionApi, asWidget );\n\t}\n}\n\n// Creates a table cell element in the view.\n//\n// @param {module:table/tablewalker~TableWalkerValue} tableWalkerValue\n// @param {module:engine/view/position~Position} insertPosition\n// @param {Object} conversionApi\nfunction createViewTableCellElement( tableWalkerValue, tableAttributes, insertPosition, conversionApi, options ) {\n\tconst asWidget = options && options.asWidget;\n\tconst cellElementName = getCellElementName( tableWalkerValue, tableAttributes );\n\n\tconst cellElement = asWidget ?\n\t\ttoWidgetEditable( conversionApi.writer.createEditableElement( cellElementName ), conversionApi.writer ) :\n\t\tconversionApi.writer.createContainerElement( cellElementName );\n\n\tconst tableCell = tableWalkerValue.cell;\n\n\tconst isSingleParagraph = tableCell.childCount === 1 && tableCell.getChild( 0 ).name === 'paragraph';\n\n\tconversionApi.writer.insert( insertPosition, cellElement );\n\n\tif ( isSingleParagraph ) {\n\t\tconst innerParagraph = tableCell.getChild( 0 );\n\t\tconst paragraphInsertPosition = conversionApi.writer.createPositionAt( cellElement, 'end' );\n\n\t\tconversionApi.consumable.consume( innerParagraph, 'insert' );\n\n\t\tif ( options.asWidget ) {\n\t\t\tconst containerName = [ ...innerParagraph.getAttributeKeys() ].length ? 'p' : 'span';\n\n\t\t\tconst fakeParagraph = conversionApi.writer.createContainerElement( containerName );\n\n\t\t\tconversionApi.mapper.bindElements( innerParagraph, fakeParagraph );\n\t\t\tconversionApi.writer.insert( paragraphInsertPosition, fakeParagraph );\n\n\t\t\tconversionApi.mapper.bindElements( tableCell, cellElement );\n\t\t} else {\n\t\t\tconversionApi.mapper.bindElements( tableCell, cellElement );\n\t\t\tconversionApi.mapper.bindElements( innerParagraph, cellElement );\n\t\t}\n\t} else {\n\t\tconversionApi.mapper.bindElements( tableCell, cellElement );\n\t}\n}\n\n// Creates or returns an existing `<tr>` element from the view.\n//\n// @param {module:engine/view/element~Element} tableRow\n// @param {Number} rowIndex\n// @param {module:engine/view/element~Element} tableSection\n// @param {Object} conversionApi\n// @returns {module:engine/view/element~Element}\nfunction getOrCreateTr( tableRow, rowIndex, tableSection, conversionApi ) {\n\tlet trElement = conversionApi.mapper.toViewElement( tableRow );\n\n\tif ( !trElement ) {\n\t\t// Will always consume since we're converting <tableRow> element from a parent <table>.\n\t\tconversionApi.consumable.consume( tableRow, 'insert' );\n\n\t\ttrElement = conversionApi.writer.createContainerElement( 'tr' );\n\t\tconversionApi.mapper.bindElements( tableRow, trElement );\n\n\t\tconst headingRows = tableRow.parent.getAttribute( 'headingRows' ) || 0;\n\t\tconst offset = headingRows > 0 && rowIndex >= headingRows ? rowIndex - headingRows : rowIndex;\n\n\t\tconst position = conversionApi.writer.createPositionAt( tableSection, offset );\n\t\tconversionApi.writer.insert( position, trElement );\n\t}\n\n\treturn trElement;\n}\n\n// Returns `th` for heading cells and `td` for other cells for the current table walker value.\n//\n// @param {module:table/tablewalker~TableWalkerValue} tableWalkerValue\n// @param {{headingColumns, headingRows}} tableAttributes\n// @returns {String}\nfunction getCellElementName( tableWalkerValue, tableAttributes ) {\n\tconst { row, column } = tableWalkerValue;\n\tconst { headingColumns, headingRows } = tableAttributes;\n\n\t// Column heading are all tableCells in the first `columnHeading` rows.\n\tconst isColumnHeading = headingRows && headingRows > row;\n\n\t// So a whole row gets <th> element.\n\tif ( isColumnHeading ) {\n\t\treturn 'th';\n\t}\n\n\t// Row heading are tableCells which columnIndex is lower then headingColumns.\n\tconst isRowHeading = headingColumns && headingColumns > column;\n\n\treturn isRowHeading ? 'th' : 'td';\n}\n\n// Returns the table section name for the current table walker value.\n//\n// @param {Number} row\n// @param {{headingColumns, headingRows}} tableAttributes\n// @returns {String}\nfunction getSectionName( row, tableAttributes ) {\n\treturn row < tableAttributes.headingRows ? 'thead' : 'tbody';\n}\n\n// Creates or returns an existing `<tbody>` or `<thead>` element witch caching.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} viewTable\n// @param {Object} conversionApi\n// @param {Object} cachedTableSection An object that stores cached elements.\n// @returns {module:engine/view/containerelement~ContainerElement}\nfunction getOrCreateTableSection( sectionName, viewTable, conversionApi ) {\n\tconst viewTableSection = getExistingTableSectionElement( sectionName, viewTable );\n\n\treturn viewTableSection ? viewTableSection : createTableSection( sectionName, viewTable, conversionApi );\n}\n\n// Finds an existing `<tbody>` or `<thead>` element or returns undefined.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} tableElement\n// @param {Object} conversionApi\nfunction getExistingTableSectionElement( sectionName, tableElement ) {\n\tfor ( const tableSection of tableElement.getChildren() ) {\n\t\tif ( tableSection.name == sectionName ) {\n\t\t\treturn tableSection;\n\t\t}\n\t}\n}\n\n// Creates a table section at the end of the table.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} tableElement\n// @param {Object} conversionApi\n// @returns {module:engine/view/containerelement~ContainerElement}\nfunction createTableSection( sectionName, tableElement, conversionApi ) {\n\tconst tableChildElement = conversionApi.writer.createContainerElement( sectionName );\n\n\tconst insertPosition = conversionApi.writer.createPositionAt( tableElement, sectionName == 'tbody' ? 'end' : 0 );\n\n\tconversionApi.writer.insert( insertPosition, tableChildElement );\n\n\treturn tableChildElement;\n}\n\n// Removes an existing `<tbody>` or `<thead>` element if it is empty.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} tableElement\n// @param {Object} conversionApi\nfunction removeTableSectionIfEmpty( sectionName, tableElement, conversionApi ) {\n\tconst tableSection = getExistingTableSectionElement( sectionName, tableElement );\n\n\tif ( tableSection && tableSection.childCount === 0 ) {\n\t\tconversionApi.writer.remove( conversionApi.writer.createRangeOn( tableSection ) );\n\t}\n}\n\n// Moves view table rows associated with passed model rows to the provided table section element.\n//\n// **Note** This method will skip not converted table rows.\n//\n// @param {Array.<module:engine/model/element~Element>} rowsToMove\n// @param {module:engine/view/element~Element} viewTableSection\n// @param {Object} conversionApi\n// @param {Number|'end'|'before'|'after'} offset Offset or one of the flags.\nfunction moveViewRowsToTableSection( rowsToMove, viewTableSection, conversionApi, offset ) {\n\tfor ( const tableRow of rowsToMove ) {\n\t\tconst viewTableRow = conversionApi.mapper.toViewElement( tableRow );\n\n\t\t// View table row might be not yet converted - skip it as it will be properly created by cell converter later on.\n\t\tif ( viewTableRow ) {\n\t\t\tconversionApi.writer.move(\n\t\t\t\tconversionApi.writer.createRangeOn( viewTableRow ),\n\t\t\t\tconversionApi.writer.createPositionAt( viewTableSection, offset )\n\t\t\t);\n\t\t}\n\t}\n}\n\n// Properly finds '<table>' element inside `<figure>` widget.\n//\n// @param {module:engine/view/element~Element} viewFigure\nfunction getViewTable( viewFigure ) {\n\tfor ( const child of viewFigure.getChildren() ) {\n\t\tif ( child.name === 'table' ) {\n\t\t\treturn child;\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/tableutils\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport TableWalker from './tablewalker';\nimport { createEmptyTableCell, updateNumericAttribute } from './commands/utils';\n\n/**\n * The table utilities plugin.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableUtils extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TableUtils';\n\t}\n\n\t/**\n\t * Returns the table cell location as an object with table row and table column indexes.\n\t *\n\t * For instance in the table below:\n\t *\n\t *\t\t    0   1   2   3\n\t *\t\t  +---+---+---+---+\n\t *\t\t0 | a     | b | c |\n\t *\t\t  +       +   +---+\n\t *\t\t1 |       |   | d |\n\t *\t\t  +---+---+   +---+\n\t *\t\t2 | e     |   | f |\n\t *\t\t  +---+---+---+---+\n\t *\n\t * the method will return:\n\t *\n\t *\t\tconst cellA = table.getNodeByPath( [ 0, 0 ] );\n\t *\t\teditor.plugins.get( 'TableUtils' ).getCellLocation( cellA );\n\t *\t\t// will return { row: 0, column: 0 }\n\t *\n\t *\t\tconst cellD = table.getNodeByPath( [ 1, 0 ] );\n\t *\t\teditor.plugins.get( 'TableUtils' ).getCellLocation( cellD );\n\t *\t\t// will return { row: 1, column: 3 }\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @returns {Object} Returns a `{row, column}` object.\n\t */\n\tgetCellLocation( tableCell ) {\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst rowIndex = table.getChildIndex( tableRow );\n\n\t\tconst tableWalker = new TableWalker( table, { startRow: rowIndex, endRow: rowIndex } );\n\n\t\tfor ( const { cell, row, column } of tableWalker ) {\n\t\t\tif ( cell === tableCell ) {\n\t\t\t\treturn { row, column };\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates an empty table with proper structure. The table needs to be inserted into the model,\n\t * ie. using {@link module:engine/model/model~Model#insertContent} function.\n\t *\n\t *\t\tmodel.change( ( writer ) => {\n\t *\t\t\t// Create a table of 2 rows and 7 columns:\n\t *\t\t\tconst table = tableUtils.createTable( writer, 2, 7);\n\t *\n\t *\t\t\t// Insert table to the model at the best position taking current selection:\n\t *\t\t\tmodel.insertContent( table );\n\t *\t\t}\n\t *\n\t * @param {module:engine/model/writer~Writer} writer The model writer.\n\t * @param {Number} rows The number of rows to create.\n\t * @param {Number} columns The number of columns to create.\n\t * @returns {module:engine/model/element~Element} The created table element.\n\t */\n\tcreateTable( writer, rows, columns ) {\n\t\tconst table = writer.createElement( 'table' );\n\n\t\tcreateEmptyRows( writer, table, 0, rows, columns );\n\n\t\treturn table;\n\t}\n\n\t/**\n\t * Inserts rows into a table.\n\t *\n\t *\t\teditor.plugins.get( 'TableUtils' ).insertRows( table, { at: 1, rows: 2 } );\n\t *\n\t * Assuming the table on the left, the above code will transform it to the table on the right:\n\t *\n\t *\t\trow index\n\t *\t\t  0 +---+---+---+       `at` = 1,      +---+---+---+ 0\n\t *\t\t    | a | b | c |       `rows` = 2,    | a | b | c |\n\t *\t\t  1 +   +---+---+   <-- insert here    +   +---+---+ 1\n\t *\t\t    |   | d | e |                      |   |   |   |\n\t *\t\t  2 +   +---+---+       will give:     +   +---+---+ 2\n\t *\t\t    |   | f | g |                      |   |   |   |\n\t *\t\t  3 +---+---+---+                      +   +---+---+ 3\n\t *\t\t                                       |   | d | e |\n\t *\t\t                                       +---+---+---+ 4\n\t *\t\t                                       +   + f | g |\n\t *\t\t                                       +---+---+---+ 5\n\t *\n\t * @param {module:engine/model/element~Element} table The table model element where the rows will be inserted.\n\t * @param {Object} options\n\t * @param {Number} [options.at=0] Row index at which the rows will be inserted.\n\t * @param {Number} [options.rows=1] The number of rows to insert.\n\t */\n\tinsertRows( table, options = {} ) {\n\t\tconst model = this.editor.model;\n\n\t\tconst insertAt = options.at || 0;\n\t\tconst rowsToInsert = options.rows || 1;\n\n\t\tmodel.change( writer => {\n\t\t\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\t\t\t// Inserting rows inside heading section requires to update `headingRows` attribute as the heading section will grow.\n\t\t\tif ( headingRows > insertAt ) {\n\t\t\t\twriter.setAttribute( 'headingRows', headingRows + rowsToInsert, table );\n\t\t\t}\n\n\t\t\t// Inserting at the end and at the beginning of a table doesn't require to calculate anything special.\n\t\t\tif ( insertAt === 0 || insertAt === table.childCount ) {\n\t\t\t\tcreateEmptyRows( writer, table, insertAt, rowsToInsert, this.getColumns( table ) );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iterate over all rows above inserted rows in order to check for rowspanned cells.\n\t\t\tconst tableIterator = new TableWalker( table, { endRow: insertAt } );\n\n\t\t\t// Will hold number of cells needed to insert in created rows.\n\t\t\t// The number might be different then table cell width when there are rowspanned cells.\n\t\t\tlet cellsToInsert = 0;\n\n\t\t\tfor ( const { row, rowspan, colspan, cell } of tableIterator ) {\n\t\t\t\tconst isBeforeInsertedRow = row < insertAt;\n\t\t\t\tconst overlapsInsertedRow = row + rowspan > insertAt;\n\n\t\t\t\tif ( isBeforeInsertedRow && overlapsInsertedRow ) {\n\t\t\t\t\t// This cell overlaps inserted rows so we need to expand it further.\n\t\t\t\t\twriter.setAttribute( 'rowspan', rowspan + rowsToInsert, cell );\n\t\t\t\t}\n\n\t\t\t\t// Calculate how many cells to insert based on the width of cells in a row at insert position.\n\t\t\t\t// It might be lower then table width as some cells might overlaps inserted row.\n\t\t\t\t// In the table above the cell 'a' overlaps inserted row so only two empty cells are need to be created.\n\t\t\t\tif ( row === insertAt ) {\n\t\t\t\t\tcellsToInsert += colspan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcreateEmptyRows( writer, table, insertAt, rowsToInsert, cellsToInsert );\n\t\t} );\n\t}\n\n\t/**\n\t * Inserts columns into a table.\n\t *\n\t *\t\teditor.plugins.get( 'TableUtils' ).insertColumns( table, { at: 1, columns: 2 } );\n\t *\n\t * Assuming the table on the left, the above code will transform it to the table on the right:\n\t *\n\t *\t\t0   1   2   3                   0   1   2   3   4   5\n\t *\t\t+---+---+---+                   +---+---+---+---+---+\n\t *\t\t| a     | b |                   | a             | b |\n\t *\t\t+       +---+                   +               +---+\n\t *\t\t|       | c |                   |               | c |\n\t *\t\t+---+---+---+     will give:    +---+---+---+---+---+\n\t *\t\t| d | e | f |                   | d |   |   | e | f |\n\t *\t\t+---+   +---+                   +---+---+---+  +---+\n\t *\t\t| g |   | h |                   | g |   |   |   | h |\n\t *\t\t+---+---+---+                   +---+---+---+---+---+\n\t *\t\t| i         |                   | i                 |\n\t *\t\t+---+---+---+                   +---+---+---+---+---+\n\t *\t\t    ^---- insert here, `at` = 1, `columns` = 2\n\t *\n\t * @param {module:engine/model/element~Element} table The table model element where the columns will be inserted.\n\t * @param {Object} options\n\t * @param {Number} [options.at=0] Column index at which the columns will be inserted.\n\t * @param {Number} [options.columns=1] The number of columns to insert.\n\t */\n\tinsertColumns( table, options = {} ) {\n\t\tconst model = this.editor.model;\n\n\t\tconst insertAt = options.at || 0;\n\t\tconst columnsToInsert = options.columns || 1;\n\n\t\tmodel.change( writer => {\n\t\t\tconst headingColumns = table.getAttribute( 'headingColumns' );\n\n\t\t\t// Inserting columns inside heading section requires to update `headingColumns` attribute as the heading section will grow.\n\t\t\tif ( insertAt < headingColumns ) {\n\t\t\t\twriter.setAttribute( 'headingColumns', headingColumns + columnsToInsert, table );\n\t\t\t}\n\n\t\t\tconst tableColumns = this.getColumns( table );\n\n\t\t\t// Inserting at the end and at the beginning of a table doesn't require to calculate anything special.\n\t\t\tif ( insertAt === 0 || tableColumns === insertAt ) {\n\t\t\t\tfor ( const tableRow of table.getChildren() ) {\n\t\t\t\t\tcreateCells( columnsToInsert, writer, writer.createPositionAt( tableRow, insertAt ? 'end' : 0 ) );\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst tableWalker = new TableWalker( table, { column: insertAt, includeSpanned: true } );\n\n\t\t\tfor ( const { row, column, cell, colspan, rowspan, cellIndex } of tableWalker ) {\n\t\t\t\t// When iterating over column the table walker outputs either:\n\t\t\t\t// - cells at given column index (cell \"e\" from method docs),\n\t\t\t\t// - spanned columns (spanned cell from row between cells \"g\" and \"h\" - spanned by \"e\", only if `includeSpanned: true`),\n\t\t\t\t// - or a cell from the same row which spans over this column (cell \"a\").\n\n\t\t\t\tif ( column !== insertAt ) {\n\t\t\t\t\t// If column is different than `insertAt`, it is a cell that spans over an inserted column (cell \"a\" & \"i\").\n\t\t\t\t\t// For such cells expand them by a number of columns inserted.\n\t\t\t\t\twriter.setAttribute( 'colspan', colspan + columnsToInsert, cell );\n\n\t\t\t\t\t// The `includeSpanned` option will output the \"empty\"/spanned column so skip this row already.\n\t\t\t\t\ttableWalker.skipRow( row );\n\n\t\t\t\t\t// This cell will overlap cells in rows below so skip them also (because of `includeSpanned` option) - (cell \"a\")\n\t\t\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t\t\tfor ( let i = row + 1; i < row + rowspan; i++ ) {\n\t\t\t\t\t\t\ttableWalker.skipRow( i );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// It's either cell at this column index or spanned cell by a rowspanned cell from row above.\n\t\t\t\t\t// In table above it's cell \"e\" and a spanned position from row below (empty cell between cells \"g\" and \"h\")\n\t\t\t\t\tconst insertPosition = writer.createPositionAt( table.getChild( row ), cellIndex );\n\n\t\t\t\t\tcreateCells( columnsToInsert, writer, insertPosition );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Divides a table cell vertically into several ones.\n\t *\n\t * The cell will be visually split into more cells by updating colspans of other cells in a column\n\t * and inserting cells (columns) after that cell.\n\t *\n\t * In the table below, if cell \"a\" is split to 3 cells:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+---+---+---+\n\t *\t\t| d | e | f |\n\t *\t\t+---+---+---+\n\t *\n\t * it will result in the table below:\n\t *\n\t *\t\t+---+---+---+---+---+\n\t *\t\t| a |   |   | b | c |\n\t *\t\t+---+---+---+---+---+\n\t *\t\t| d         | e | f |\n\t *\t\t+---+---+---+---+---+\n\t *\n\t * So cell \"d\" will get its `colspan` updated to `3` and 2 cells will be added (2 columns will be created).\n\t *\n\t * Splitting a cell that already has a `colspan` attribute set will distribute the cell `colspan` evenly and the remainder\n\t * will be left to the original cell:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a         |\n\t *\t\t+---+---+---+\n\t *\t\t| b | c | d |\n\t *\t\t+---+---+---+\n\t *\n\t * Splitting cell \"a\" with `colspan=3` to 2 cells will create 1 cell with a `colspan=a` and cell \"a\" that will have `colspan=2`:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a     |   |\n\t *\t\t+---+---+---+\n\t *\t\t| b | c | d |\n\t *\t\t+---+---+---+\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @param {Number} numberOfCells\n\t */\n\tsplitCellVertically( tableCell, numberOfCells = 2 ) {\n\t\tconst model = this.editor.model;\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) || 1 );\n\t\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) || 1 );\n\n\t\tmodel.change( writer => {\n\t\t\t// First check - the cell spans over multiple rows so before doing anything else just split this cell.\n\t\t\tif ( colspan > 1 ) {\n\t\t\t\t// Get spans of new (inserted) cells and span to update of split cell.\n\t\t\t\tconst { newCellsSpan, updatedSpan } = breakSpanEvenly( colspan, numberOfCells );\n\n\t\t\t\tupdateNumericAttribute( 'colspan', updatedSpan, tableCell, writer );\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes = {};\n\n\t\t\t\t// Do not store default value in the model.\n\t\t\t\tif ( newCellsSpan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = newCellsSpan;\n\t\t\t\t}\n\n\t\t\t\t// Copy rowspan of split cell.\n\t\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = rowspan;\n\t\t\t\t}\n\n\t\t\t\tconst cellsToInsert = colspan > numberOfCells ? numberOfCells - 1 : colspan - 1;\n\t\t\t\tcreateCells( cellsToInsert, writer, writer.createPositionAfter( tableCell ), newCellsAttributes );\n\t\t\t}\n\n\t\t\t// Second check - the cell has colspan of 1 or we need to create more cells then the currently one spans over.\n\t\t\tif ( colspan < numberOfCells ) {\n\t\t\t\tconst cellsToInsert = numberOfCells - colspan;\n\n\t\t\t\t// First step: expand cells on the same column as split cell.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table ) ];\n\n\t\t\t\t// Get the column index of split cell.\n\t\t\t\tconst { column: splitCellColumn } = tableMap.find( ( { cell } ) => cell === tableCell );\n\n\t\t\t\t// Find cells which needs to be expanded vertically - those on the same column or those that spans over split cell's column.\n\t\t\t\tconst cellsToUpdate = tableMap.filter( ( { cell, colspan, column } ) => {\n\t\t\t\t\tconst isOnSameColumn = cell !== tableCell && column === splitCellColumn;\n\t\t\t\t\tconst spansOverColumn = ( column < splitCellColumn && column + colspan > splitCellColumn );\n\n\t\t\t\t\treturn isOnSameColumn || spansOverColumn;\n\t\t\t\t} );\n\n\t\t\t\t// Expand cells vertically.\n\t\t\t\tfor ( const { cell, colspan } of cellsToUpdate ) {\n\t\t\t\t\twriter.setAttribute( 'colspan', colspan + cellsToInsert, cell );\n\t\t\t\t}\n\n\t\t\t\t// Second step: create columns after split cell.\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes = {};\n\n\t\t\t\t// Do not store default value in the model.\n\n\t\t\t\t// Copy rowspan of split cell.\n\t\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = rowspan;\n\t\t\t\t}\n\n\t\t\t\tcreateCells( cellsToInsert, writer, writer.createPositionAfter( tableCell ), newCellsAttributes );\n\n\t\t\t\tconst headingColumns = table.getAttribute( 'headingColumns' ) || 0;\n\n\t\t\t\t// Update heading section if split cell is in heading section.\n\t\t\t\tif ( headingColumns > splitCellColumn ) {\n\t\t\t\t\tupdateNumericAttribute( 'headingColumns', headingColumns + cellsToInsert, table, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Divides a table cell horizontally into several ones.\n\t *\n\t * The cell will be visually split into more cells by updating rowspans of other cells in the row and inserting rows with a single cell\n\t * below.\n\t *\n\t * If in the table below cell \"b\" is split to 3 cells:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+---+---+---+\n\t *\t\t| d | e | f |\n\t *\t\t+---+---+---+\n\t *\n\t * It will result in the table below:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+   +---+   +\n\t *\t\t|   |   |   |\n\t *\t\t+   +---+   +\n\t *\t\t|   |   |   |\n\t *\t\t+---+---+---+\n\t *\t\t| d | e | f |\n\t *\t\t+---+---+---+\n\t *\n\t * So cells \"a\" and \"b\" will get their `rowspan` updated to `3` and 2 rows with a single cell will be added.\n\t *\n\t * Splitting a cell that already has a `rowspan` attribute set will distribute the cell `rowspan` evenly and the remainder\n\t * will be left to the original cell:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+   +---+---+\n\t *\t\t|   | d | e |\n\t *\t\t+   +---+---+\n\t *\t\t|   | f | g |\n\t *\t\t+   +---+---+\n\t *\t\t|   | h | i |\n\t *\t\t+---+---+---+\n\t *\n\t * Splitting cell \"a\" with `rowspan=4` to 3 cells will create 2 cells with a `rowspan=1` and cell \"a\" will have `rowspan=2`:\n\t *\n\t *\t\t+---+---+---+\n\t *\t\t| a | b | c |\n\t *\t\t+   +---+---+\n\t *\t\t|   | d | e |\n\t *\t\t+---+---+---+\n\t *\t\t|   | f | g |\n\t *\t\t+---+---+---+\n\t *\t\t|   | h | i |\n\t *\t\t+---+---+---+\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @param {Number} numberOfCells\n\t */\n\tsplitCellHorizontally( tableCell, numberOfCells = 2 ) {\n\t\tconst model = this.editor.model;\n\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\t\tconst splitCellRow = table.getChildIndex( tableRow );\n\n\t\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) || 1 );\n\t\tconst colspan = parseInt( tableCell.getAttribute( 'colspan' ) || 1 );\n\n\t\tmodel.change( writer => {\n\t\t\t// First check - the cell spans over multiple rows so before doing anything else just split this cell.\n\t\t\tif ( rowspan > 1 ) {\n\t\t\t\t// Cache table map before updating table.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table, {\n\t\t\t\t\tstartRow: splitCellRow,\n\t\t\t\t\tendRow: splitCellRow + rowspan - 1,\n\t\t\t\t\tincludeSpanned: true\n\t\t\t\t} ) ];\n\n\t\t\t\t// Get spans of new (inserted) cells and span to update of split cell.\n\t\t\t\tconst { newCellsSpan, updatedSpan } = breakSpanEvenly( rowspan, numberOfCells );\n\n\t\t\t\tupdateNumericAttribute( 'rowspan', updatedSpan, tableCell, writer );\n\n\t\t\t\tconst { column: cellColumn } = tableMap.find( ( { cell } ) => cell === tableCell );\n\n\t\t\t\t// Each inserted cell will have the same attributes:\n\t\t\t\tconst newCellsAttributes = {};\n\n\t\t\t\t// Do not store default value in the model.\n\t\t\t\tif ( newCellsSpan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.rowspan = newCellsSpan;\n\t\t\t\t}\n\n\t\t\t\t// Copy colspan of split cell.\n\t\t\t\tif ( colspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = colspan;\n\t\t\t\t}\n\n\t\t\t\tfor ( const { column, row, cellIndex } of tableMap ) {\n\t\t\t\t\t// As both newly created cells and the split cell might have rowspan,\n\t\t\t\t\t// the insertion of new cells must go to appropriate rows:\n\t\t\t\t\t//\n\t\t\t\t\t// 1. It's a row after split cell + it's height.\n\t\t\t\t\tconst isAfterSplitCell = row >= splitCellRow + updatedSpan;\n\t\t\t\t\t// 2. Is on the same column.\n\t\t\t\t\tconst isOnSameColumn = column === cellColumn;\n\t\t\t\t\t// 3. And it's row index is after previous cell height.\n\t\t\t\t\tconst isInEvenlySplitRow = ( row + splitCellRow + updatedSpan ) % newCellsSpan === 0;\n\n\t\t\t\t\tif ( isAfterSplitCell && isOnSameColumn && isInEvenlySplitRow ) {\n\t\t\t\t\t\tconst position = writer.createPositionAt( table.getChild( row ), cellIndex );\n\n\t\t\t\t\t\tcreateCells( 1, writer, position, newCellsAttributes );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Second check - the cell has rowspan of 1 or we need to create more cells than the current cell spans over.\n\t\t\tif ( rowspan < numberOfCells ) {\n\t\t\t\t// We already split the cell in check one so here we split to the remaining number of cells only.\n\t\t\t\tconst cellsToInsert = numberOfCells - rowspan;\n\n\t\t\t\t// This check is needed since we need to check if there are any cells from previous rows than spans over this cell's row.\n\t\t\t\tconst tableMap = [ ...new TableWalker( table, { startRow: 0, endRow: splitCellRow } ) ];\n\n\t\t\t\t// First step: expand cells.\n\t\t\t\tfor ( const { cell, rowspan, row } of tableMap ) {\n\t\t\t\t\t// Expand rowspan of cells that are either:\n\t\t\t\t\t// - on the same row as current cell,\n\t\t\t\t\t// - or are below split cell row and overlaps that row.\n\t\t\t\t\tif ( cell !== tableCell && row + rowspan > splitCellRow ) {\n\t\t\t\t\t\tconst rowspanToSet = rowspan + cellsToInsert;\n\n\t\t\t\t\t\twriter.setAttribute( 'rowspan', rowspanToSet, cell );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Second step: create rows with single cell below split cell.\n\t\t\t\tconst newCellsAttributes = {};\n\n\t\t\t\t// Copy colspan of split cell.\n\t\t\t\tif ( colspan > 1 ) {\n\t\t\t\t\tnewCellsAttributes.colspan = colspan;\n\t\t\t\t}\n\n\t\t\t\tcreateEmptyRows( writer, table, splitCellRow + 1, cellsToInsert, 1, newCellsAttributes );\n\n\t\t\t\t// Update heading section if split cell is in heading section.\n\t\t\t\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\t\t\t\tif ( headingRows > splitCellRow ) {\n\t\t\t\t\tupdateNumericAttribute( 'headingRows', headingRows + cellsToInsert, table, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns the number of columns for a given table.\n\t *\n\t *\t\teditor.plugins.get( 'TableUtils' ).getColumns( table );\n\t *\n\t * @param {module:engine/model/element~Element} table The table to analyze.\n\t * @returns {Number}\n\t */\n\tgetColumns( table ) {\n\t\t// Analyze first row only as all the rows should have the same width.\n\t\tconst row = table.getChild( 0 );\n\n\t\treturn [ ...row.getChildren() ].reduce( ( columns, row ) => {\n\t\t\tconst columnWidth = parseInt( row.getAttribute( 'colspan' ) || 1 );\n\n\t\t\treturn columns + columnWidth;\n\t\t}, 0 );\n\t}\n}\n\n// Creates empty rows at the given index in an existing table.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/element~Element} table\n// @param {Number} insertAt Row index of row insertion.\n// @param {Number} rows Number of rows to create.\n// @param {Number} tableCellToInsert Number of cells to insert in each row.\nfunction createEmptyRows( writer, table, insertAt, rows, tableCellToInsert, attributes = {} ) {\n\tfor ( let i = 0; i < rows; i++ ) {\n\t\tconst tableRow = writer.createElement( 'tableRow' );\n\n\t\twriter.insert( tableRow, table, insertAt );\n\n\t\tcreateCells( tableCellToInsert, writer, writer.createPositionAt( tableRow, 'end' ), attributes );\n\t}\n}\n\n// Creates cells at a given position.\n//\n// @param {Number} columns Number of columns to create\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/position~Position} insertPosition\nfunction createCells( cells, writer, insertPosition, attributes = {} ) {\n\tfor ( let i = 0; i < cells; i++ ) {\n\t\tcreateEmptyTableCell( writer, insertPosition, attributes );\n\t}\n}\n\n// Evenly distributes the span of a cell to a number of provided cells.\n// The resulting spans will always be integer values.\n//\n// For instance breaking a span of 7 into 3 cells will return:\n//\n//\t\t{ newCellsSpan: 2, updatedSpan: 3 }\n//\n// as two cells will have a span of 2 and the remainder will go the first cell so its span will change to 3.\n//\n// @param {Number} span Span value do break.\n// @param {Number} numberOfCells Number of resulting spans.\n// @returns {{newCellsSpan: Number, updatedSpan: Number}}\nfunction breakSpanEvenly( span, numberOfCells ) {\n\tif ( span < numberOfCells ) {\n\t\treturn { newCellsSpan: 1, updatedSpan: 1 };\n\t}\n\n\tconst newCellsSpan = Math.floor( span / numberOfCells );\n\tconst updatedSpan = ( span - newCellsSpan * numberOfCells ) + newCellsSpan;\n\n\treturn { newCellsSpan, updatedSpan };\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/commands/inserttablecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findOptimalInsertionPosition } from '@ckeditor/ckeditor5-widget/src/utils';\nimport TableUtils from '../tableutils';\n\n/**\n * The insert table command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'insertTable'` editor command.\n *\n * To insert a table at the current selection, execute the command and specify the dimensions:\n *\n *\t\teditor.execute( 'insertTable', { rows: 20, columns: 5 } );\n *\n * @extends module:core/command~Command\n */\nexport default class InsertTableCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst schema = model.schema;\n\n\t\tconst validParent = getInsertTableParent( selection.getFirstPosition() );\n\n\t\tthis.isEnabled = schema.checkChild( validParent, 'table' );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Inserts a table with the given number of rows and columns into the editor.\n\t *\n\t * @param {Object} options\n\t * @param {Number} [options.rows=2] The number of rows to create in the inserted table.\n\t * @param {Number} [options.columns=2] The number of columns to create in the inserted table.\n\t * @fires execute\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\n\t\tconst rows = parseInt( options.rows ) || 2;\n\t\tconst columns = parseInt( options.columns ) || 2;\n\n\t\tconst insertPosition = findOptimalInsertionPosition( selection, model );\n\n\t\tmodel.change( writer => {\n\t\t\tconst table = tableUtils.createTable( writer, rows, columns );\n\n\t\t\tmodel.insertContent( table, insertPosition );\n\n\t\t\twriter.setSelection( writer.createPositionAt( table.getNodeByPath( [ 0, 0, 0 ] ), 0 ) );\n\t\t} );\n\t}\n}\n\n// Returns valid parent to insert table\n//\n// @param {module:engine/model/position} position\nfunction getInsertTableParent( position ) {\n\tconst parent = position.parent;\n\n\treturn parent === parent.root ? parent : parent.parent;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/commands/insertrowcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findAncestor } from './utils';\nimport TableUtils from '../tableutils';\n\n/**\n * The insert row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'insertTableRowBelow'` and\n * `'insertTableRowAbove'` editor commands.\n *\n * To insert a row below the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableRowBelow' );\n *\n * To insert a row above the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableRowAbove' );\n *\n * @extends module:core/command~Command\n */\nexport default class InsertRowCommand extends Command {\n\t/**\n\t * Creates a new `InsertRowCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n\t * @param {Object} options\n\t * @param {String} [options.order=\"below\"] The order of insertion relative to the row in which the caret is located.\n\t * Possible values: `\"above\"` and `\"below\"`.\n\t */\n\tconstructor( editor, options = {} ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The order of insertion relative to the row in which the caret is located.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:table/commands/insertrowcommand~InsertRowCommand#order\n\t\t */\n\t\tthis.order = options.order || 'below';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst selection = this.editor.model.document.selection;\n\n\t\tconst tableParent = findAncestor( 'table', selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableParent;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #order} value, it inserts a row `'below'` or `'above'` the row in which selection is set.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst tableUtils = editor.plugins.get( TableUtils );\n\n\t\tconst tableCell = findAncestor( 'tableCell', selection.getFirstPosition() );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst row = table.getChildIndex( tableRow );\n\t\tconst insertAt = this.order === 'below' ? row + 1 : row;\n\n\t\ttableUtils.insertRows( table, { rows: 1, at: insertAt } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/commands/insertcolumncommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findAncestor } from './utils';\nimport TableUtils from '../tableutils';\n\n/**\n * The insert column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'insertTableColumnLeft'` and\n * `'insertTableColumnRight'` editor commands.\n *\n * To insert a column to the left of the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableColumnLeft' );\n *\n * To insert a column to the right of the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableColumnRight' );\n *\n * @extends module:core/command~Command\n */\nexport default class InsertColumnCommand extends Command {\n\t/**\n\t * Creates a new `InsertColumnCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor An editor on which this command will be used.\n\t * @param {Object} options\n\t * @param {String} [options.order=\"right\"] The order of insertion relative to the column in which the caret is located.\n\t * Possible values: `\"left\"` and `\"right\"`.\n\t */\n\tconstructor( editor, options = {} ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The order of insertion relative to the column in which the caret is located.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} module:table/commands/insertcolumncommand~InsertColumnCommand#order\n\t\t */\n\t\tthis.order = options.order || 'right';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst selection = this.editor.model.document.selection;\n\n\t\tconst tableParent = findAncestor( 'table', selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableParent;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #order} value, it inserts a column to the `'left'` or `'right'` of the column\n\t * in which the selection is set.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst tableUtils = editor.plugins.get( TableUtils );\n\n\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\t\tconst table = tableCell.parent.parent;\n\n\t\tconst { column } = tableUtils.getCellLocation( tableCell );\n\t\tconst insertAt = this.order === 'right' ? column + 1 : column;\n\n\t\ttableUtils.insertColumns( table, { columns: 1, at: insertAt } );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/commands/splitcellcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport TableUtils from '../tableutils';\nimport { findAncestor } from './utils';\n\n/**\n * The split cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'splitTableCellVertically'`\n * and `'splitTableCellHorizontally'`  editor commands.\n *\n * You can split any cell vertically or horizontally by executing this command. For example, to split the selected table cell vertically:\n *\n *\t\teditor.execute( 'splitTableCellVertically' );\n *\n * @extends module:core/command~Command\n */\nexport default class SplitCellCommand extends Command {\n\t/**\n\t * Creates a new `SplitCellCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n\t * @param {Object} options\n\t * @param {String} options.direction Indicates whether the command should split cells `'horizontally'` or `'vertically'`.\n\t */\n\tconstructor( editor, options = {} ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The direction that indicates which cell will be split.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} #direction\n\t\t */\n\t\tthis.direction = options.direction || 'horizontally';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableCell;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst document = model.document;\n\t\tconst selection = document.selection;\n\n\t\tconst firstPosition = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\n\t\tconst isHorizontally = this.direction === 'horizontally';\n\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\n\t\tif ( isHorizontally ) {\n\t\t\ttableUtils.splitCellHorizontally( tableCell, 2 );\n\t\t} else {\n\t\t\ttableUtils.splitCellVertically( tableCell, 2 );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/commands/mergecellcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport TableWalker from '../tablewalker';\nimport { findAncestor, updateNumericAttribute } from './utils';\nimport TableUtils from '../tableutils';\n\n/**\n * The merge cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'mergeTableCellRight'`, `'mergeTableCellLeft'`,\n * `'mergeTableCellUp'` and `'mergeTableCellDown'` editor commands.\n *\n * To merge a table cell at the current selection with another cell, execute the command corresponding with the preferred direction.\n *\n * For example, to merge with a cell to the right:\n *\n *\t\teditor.execute( 'mergeTableCellRight' );\n *\n * **Note**: If a table cell has a different [`rowspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-rowspan)\n * (for `'mergeTableCellRight'` and `'mergeTableCellLeft'`) or [`colspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-colspan)\n * (for `'mergeTableCellUp'` and `'mergeTableCellDown'`), the command will be disabled.\n *\n * @extends module:core/command~Command\n */\nexport default class MergeCellCommand extends Command {\n\t/**\n\t * Creates a new `MergeCellCommand` instance.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n\t * @param {Object} options\n\t * @param {String} options.direction Indicates which cell to merge with the currently selected one.\n\t * Possible values are: `'left'`, `'right'`, `'up'` and `'down'`.\n\t */\n\tconstructor( editor, options ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t * The direction that indicates which cell will be merged with the currently selected one.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String} #direction\n\t\t */\n\t\tthis.direction = options.direction;\n\n\t\t/**\n\t\t * Whether the merge is horizontal (left/right) or vertical (up/down).\n\t\t *\n\t\t * @readonly\n\t\t * @member {Boolean} #isHorizontal\n\t\t */\n\t\tthis.isHorizontal = this.direction == 'right' || this.direction == 'left';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst cellToMerge = this._getMergeableCell();\n\n\t\tthis.isEnabled = !!cellToMerge;\n\t\t// In order to check if currently selected cell can be merged with one defined by #direction some computation are done beforehand.\n\t\t// As such we can cache it as a command's value.\n\t\tthis.value = cellToMerge;\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Depending on the command's {@link #direction} value, it will merge the cell that is to the `'left'`, `'right'`, `'up'` or `'down'`.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\t\tconst cellToMerge = this.value;\n\t\tconst direction = this.direction;\n\n\t\tmodel.change( writer => {\n\t\t\tconst isMergeNext = direction == 'right' || direction == 'down';\n\n\t\t\t// The merge mechanism is always the same so sort cells to be merged.\n\t\t\tconst cellToExpand = isMergeNext ? tableCell : cellToMerge;\n\t\t\tconst cellToRemove = isMergeNext ? cellToMerge : tableCell;\n\n\t\t\t// Cache the parent of cell to remove for later check.\n\t\t\tconst removedTableCellRow = cellToRemove.parent;\n\n\t\t\tmergeTableCells( cellToRemove, cellToExpand, writer );\n\n\t\t\tconst spanAttribute = this.isHorizontal ? 'colspan' : 'rowspan';\n\t\t\tconst cellSpan = parseInt( tableCell.getAttribute( spanAttribute ) || 1 );\n\t\t\tconst cellToMergeSpan = parseInt( cellToMerge.getAttribute( spanAttribute ) || 1 );\n\n\t\t\t// Update table cell span attribute and merge set selection on merged contents.\n\t\t\twriter.setAttribute( spanAttribute, cellSpan + cellToMergeSpan, cellToExpand );\n\t\t\twriter.setSelection( writer.createRangeIn( cellToExpand ) );\n\n\t\t\t// Remove empty row after merging.\n\t\t\tif ( !removedTableCellRow.childCount ) {\n\t\t\t\tremoveEmptyRow( removedTableCellRow, writer );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns a cell that can be merged with the current cell depending on the command's direction.\n\t *\n\t * @returns {module:engine/model/element|undefined}\n\t * @private\n\t */\n\t_getMergeableCell() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\n\t\tif ( !tableCell ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst tableUtils = this.editor.plugins.get( TableUtils );\n\n\t\t// First get the cell on proper direction.\n\t\tconst cellToMerge = this.isHorizontal ?\n\t\t\tgetHorizontalCell( tableCell, this.direction, tableUtils ) :\n\t\t\tgetVerticalCell( tableCell, this.direction );\n\n\t\tif ( !cellToMerge ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If found check if the span perpendicular to merge direction is equal on both cells.\n\t\tconst spanAttribute = this.isHorizontal ? 'rowspan' : 'colspan';\n\t\tconst span = parseInt( tableCell.getAttribute( spanAttribute ) || 1 );\n\n\t\tconst cellToMergeSpan = parseInt( cellToMerge.getAttribute( spanAttribute ) || 1 );\n\n\t\tif ( cellToMergeSpan === span ) {\n\t\t\treturn cellToMerge;\n\t\t}\n\t}\n}\n\n// Returns the cell that can be merged horizontally.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {String} direction\n// @returns {module:engine/model/node~Node|null}\nfunction getHorizontalCell( tableCell, direction, tableUtils ) {\n\tconst horizontalCell = direction == 'right' ? tableCell.nextSibling : tableCell.previousSibling;\n\n\tif ( !horizontalCell ) {\n\t\treturn;\n\t}\n\n\t// Sort cells:\n\tconst cellOnLeft = direction == 'right' ? tableCell : horizontalCell;\n\tconst cellOnRight = direction == 'right' ? horizontalCell : tableCell;\n\n\t// Get their column indexes:\n\tconst { column: leftCellColumn } = tableUtils.getCellLocation( cellOnLeft );\n\tconst { column: rightCellColumn } = tableUtils.getCellLocation( cellOnRight );\n\n\tconst leftCellSpan = parseInt( cellOnLeft.getAttribute( 'colspan' ) || 1 );\n\n\t// The cell on the right must have index that is distant to the cell on the left by the left cell's width (colspan).\n\tconst cellsAreTouching = leftCellColumn + leftCellSpan === rightCellColumn;\n\n\t// If the right cell's column index is different it means that there are rowspanned cells between them.\n\treturn cellsAreTouching ? horizontalCell : undefined;\n}\n\n// Returns the cell that can be merged vertically.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {String} direction\n// @returns {module:engine/model/node~Node|null}\nfunction getVerticalCell( tableCell, direction ) {\n\tconst tableRow = tableCell.parent;\n\tconst table = tableRow.parent;\n\n\tconst rowIndex = table.getChildIndex( tableRow );\n\n\t// Don't search for mergeable cell if direction points out of the table.\n\tif ( ( direction == 'down' && rowIndex === table.childCount - 1 ) || ( direction == 'up' && rowIndex === 0 ) ) {\n\t\treturn;\n\t}\n\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) || 1 );\n\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\tconst isMergeWithBodyCell = direction == 'down' && ( rowIndex + rowspan ) === headingRows;\n\tconst isMergeWithHeadCell = direction == 'up' && rowIndex === headingRows;\n\n\t// Don't search for mergeable cell if direction points out of the current table section.\n\tif ( headingRows && ( isMergeWithBodyCell || isMergeWithHeadCell ) ) {\n\t\treturn;\n\t}\n\n\tconst currentCellRowSpan = parseInt( tableCell.getAttribute( 'rowspan' ) || 1 );\n\tconst rowOfCellToMerge = direction == 'down' ? rowIndex + currentCellRowSpan : rowIndex;\n\n\tconst tableMap = [ ...new TableWalker( table, { endRow: rowOfCellToMerge } ) ];\n\n\tconst currentCellData = tableMap.find( value => value.cell === tableCell );\n\tconst mergeColumn = currentCellData.column;\n\n\tconst cellToMergeData = tableMap.find( ( { row, rowspan, column } ) => {\n\t\tif ( column !== mergeColumn ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( direction == 'down' ) {\n\t\t\t// If merging a cell below the mergeRow is already calculated.\n\t\t\treturn row === rowOfCellToMerge;\n\t\t} else {\n\t\t\t// If merging a cell above calculate if it spans to mergeRow.\n\t\t\treturn rowOfCellToMerge === row + rowspan;\n\t\t}\n\t} );\n\n\treturn cellToMergeData && cellToMergeData.cell;\n}\n\n// Properly removes empty row from a table. Will update `rowspan` attribute of cells that overlaps removed row.\n//\n// @param {module:engine/model/element~Element} removedTableCellRow\n// @param {module:engine/model/writer~Writer} writer\nfunction removeEmptyRow( removedTableCellRow, writer ) {\n\tconst table = removedTableCellRow.parent;\n\n\tconst removedRowIndex = table.getChildIndex( removedTableCellRow );\n\n\tfor ( const { cell, row, rowspan } of new TableWalker( table, { endRow: removedRowIndex } ) ) {\n\t\tconst overlapsRemovedRow = row + rowspan - 1 >= removedRowIndex;\n\n\t\tif ( overlapsRemovedRow ) {\n\t\t\tupdateNumericAttribute( 'rowspan', rowspan - 1, cell, writer );\n\t\t}\n\t}\n\n\twriter.remove( removedTableCellRow );\n}\n\n// Merges two table cells - will ensure that after merging cells with empty paragraph the result table cell will only have one paragraph.\n// If one of the merged table cell is empty the merged table cell will have contents of the non-empty table cell.\n// If both are empty the merged table cell will have only one empty paragraph.\n//\n// @param {module:engine/model/element~Element} cellToRemove\n// @param {module:engine/model/element~Element} cellToExpand\n// @param {module:engine/model/writer~Writer} writer\nfunction mergeTableCells( cellToRemove, cellToExpand, writer ) {\n\tif ( !isEmpty( cellToRemove ) ) {\n\t\tif ( isEmpty( cellToExpand ) ) {\n\t\t\twriter.remove( writer.createRangeIn( cellToExpand ) );\n\t\t}\n\n\t\twriter.move( writer.createRangeIn( cellToRemove ), writer.createPositionAt( cellToExpand, 'end' ) );\n\t}\n\n\t// Remove merged table cell.\n\twriter.remove( cellToRemove );\n}\n\n// Checks if passed table cell contains empty paragraph.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @returns {Boolean}\nfunction isEmpty( tableCell ) {\n\treturn tableCell.childCount == 1 && tableCell.getChild( 0 ).is( 'paragraph' ) && tableCell.getChild( 0 ).isEmpty;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/commands/removerowcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport TableWalker from '../tablewalker';\nimport { findAncestor, updateNumericAttribute } from './utils';\n\n/**\n * The remove row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'removeTableRow'` editor command.\n *\n * To remove the row containing the selected cell, execute the command:\n *\n *\t\teditor.execute( 'removeTableRow' );\n *\n * @extends module:core/command~Command\n */\nexport default class RemoveRowCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableCell && tableCell.parent.parent.childCount > 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tconst firstPosition = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst currentRow = table.getChildIndex( tableRow );\n\t\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( headingRows && currentRow <= headingRows ) {\n\t\t\t\tupdateNumericAttribute( 'headingRows', headingRows - 1, table, writer, 0 );\n\t\t\t}\n\n\t\t\tconst tableMap = [ ...new TableWalker( table, { endRow: currentRow } ) ];\n\n\t\t\tconst cellsToMove = new Map();\n\n\t\t\t// Get cells from removed row that are spanned over multiple rows.\n\t\t\ttableMap\n\t\t\t\t.filter( ( { row, rowspan } ) => row === currentRow && rowspan > 1 )\n\t\t\t\t.forEach( ( { column, cell, rowspan } ) => cellsToMove.set( column, { cell, rowspanToSet: rowspan - 1 } ) );\n\n\t\t\t// Reduce rowspan on cells that are above removed row and overlaps removed row.\n\t\t\ttableMap\n\t\t\t\t.filter( ( { row, rowspan } ) => row <= currentRow - 1 && row + rowspan > currentRow )\n\t\t\t\t.forEach( ( { cell, rowspan } ) => updateNumericAttribute( 'rowspan', rowspan - 1, cell, writer ) );\n\n\t\t\t// Move cells to another row.\n\t\t\tconst targetRow = currentRow + 1;\n\t\t\tconst tableWalker = new TableWalker( table, { includeSpanned: true, startRow: targetRow, endRow: targetRow } );\n\n\t\t\tlet previousCell;\n\n\t\t\tfor ( const { row, column, cell } of [ ...tableWalker ] ) {\n\t\t\t\tif ( cellsToMove.has( column ) ) {\n\t\t\t\t\tconst { cell: cellToMove, rowspanToSet } = cellsToMove.get( column );\n\t\t\t\t\tconst targetPosition = previousCell ?\n\t\t\t\t\t\twriter.createPositionAfter( previousCell ) :\n\t\t\t\t\t\twriter.createPositionAt( table.getChild( row ), 0 );\n\n\t\t\t\t\twriter.move( writer.createRangeOn( cellToMove ), targetPosition );\n\t\t\t\t\tupdateNumericAttribute( 'rowspan', rowspanToSet, cellToMove, writer );\n\n\t\t\t\t\tpreviousCell = cellToMove;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousCell = cell;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriter.remove( tableRow );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/commands/removecolumncommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport TableWalker from '../tablewalker';\nimport TableUtils from '../tableutils';\nimport { findAncestor, updateNumericAttribute } from './utils';\n\n/**\n * The remove column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'removeTableColumn'` editor command.\n *\n * To remove the column containing the selected cell, execute the command:\n *\n *\t\teditor.execute( 'removeTableColumn' );\n *\n * @extends module:core/command~Command\n */\nexport default class RemoveColumnCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\t\tconst tableUtils = editor.plugins.get( TableUtils );\n\n\t\tconst tableCell = findAncestor( 'tableCell', selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableCell && tableUtils.getColumns( tableCell.parent.parent ) > 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst headingColumns = table.getAttribute( 'headingColumns' ) || 0;\n\t\tconst row = table.getChildIndex( tableRow );\n\n\t\t// Cache the table before removing or updating colspans.\n\t\tconst tableMap = [ ...new TableWalker( table ) ];\n\n\t\t// Get column index of removed column.\n\t\tconst cellData = tableMap.find( value => value.cell === tableCell );\n\t\tconst removedColumn = cellData.column;\n\n\t\tmodel.change( writer => {\n\t\t\t// Update heading columns attribute if removing a row from head section.\n\t\t\tif ( headingColumns && row <= headingColumns ) {\n\t\t\t\twriter.setAttribute( 'headingColumns', headingColumns - 1, table );\n\t\t\t}\n\n\t\t\tfor ( const { cell, column, colspan } of tableMap ) {\n\t\t\t\t// If colspaned cell overlaps removed column decrease it's span.\n\t\t\t\tif ( column <= removedColumn && colspan > 1 && column + colspan > removedColumn ) {\n\t\t\t\t\tupdateNumericAttribute( 'colspan', colspan - 1, cell, writer );\n\t\t\t\t} else if ( column === removedColumn ) {\n\t\t\t\t\t// The cell in removed column has colspan of 1.\n\t\t\t\t\twriter.remove( cell );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/commands/setheaderrowcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport { createEmptyTableCell, findAncestor, updateNumericAttribute } from './utils';\nimport TableWalker from '../tablewalker';\n\n/**\n * The header row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'setTableColumnHeader'` editor command.\n *\n * You can make the row containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element) by executing:\n *\n *\t\teditor.execute( 'setTableRowHeader' );\n *\n * **Note:** All preceding rows will also become headers. If the current row is already a header, executing this command\n * will make it a regular row back again (including the following rows).\n *\n * @extends module:core/command~Command\n */\nexport default class SetHeaderRowCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', position );\n\t\tconst isInTable = !!tableCell;\n\n\t\tthis.isEnabled = isInTable;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection} is in a header row.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t\tthis.value = isInTable && this._isInHeading( tableCell, tableCell.parent.parent );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header row, the command will set the `headingRows` table attribute to cover that row.\n\t *\n\t * When the selection is already in a header row, it will set `headingRows` so the heading section will end before that row.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', position );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst currentHeadingRows = table.getAttribute( 'headingRows' ) || 0;\n\t\tconst selectionRow = tableRow.index;\n\n\t\tconst headingRowsToSet = currentHeadingRows > selectionRow ? selectionRow : selectionRow + 1;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( headingRowsToSet ) {\n\t\t\t\t// Changing heading rows requires to check if any of a heading cell is overlapping vertically the table head.\n\t\t\t\t// Any table cell that has a rowspan attribute > 1 will not exceed the table head so we need to fix it in rows below.\n\t\t\t\tconst cellsToSplit = getOverlappingCells( table, headingRowsToSet, currentHeadingRows );\n\n\t\t\t\tfor ( const cell of cellsToSplit ) {\n\t\t\t\t\tsplitHorizontally( cell, headingRowsToSet, writer );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdateNumericAttribute( 'headingRows', headingRowsToSet, table, writer, 0 );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if a table cell is in the heading section.\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @param {module:engine/model/element~Element} table\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isInHeading( tableCell, table ) {\n\t\tconst headingRows = parseInt( table.getAttribute( 'headingRows' ) || 0 );\n\n\t\treturn !!headingRows && tableCell.parent.index < headingRows;\n\t}\n}\n\n// Returns cells that span beyond the new heading section.\n//\n// @param {module:engine/model/element~Element} table The table to check.\n// @param {Number} headingRowsToSet New heading rows attribute.\n// @param {Number} currentHeadingRows Current heading rows attribute.\n// @returns {Array.<module:engine/model/element~Element>}\nfunction getOverlappingCells( table, headingRowsToSet, currentHeadingRows ) {\n\tconst cellsToSplit = [];\n\n\tconst startAnalysisRow = headingRowsToSet > currentHeadingRows ? currentHeadingRows : 0;\n\t// We're analyzing only when headingRowsToSet > 0.\n\tconst endAnalysisRow = headingRowsToSet - 1;\n\n\tconst tableWalker = new TableWalker( table, { startRow: startAnalysisRow, endRow: endAnalysisRow } );\n\n\tfor ( const { row, rowspan, cell } of tableWalker ) {\n\t\tif ( rowspan > 1 && row + rowspan > headingRowsToSet ) {\n\t\t\tcellsToSplit.push( cell );\n\t\t}\n\t}\n\n\treturn cellsToSplit;\n}\n\n// Splits the table cell horizontally.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {Number} headingRows\n// @param {module:engine/model/writer~Writer} writer\nfunction splitHorizontally( tableCell, headingRows, writer ) {\n\tconst tableRow = tableCell.parent;\n\tconst table = tableRow.parent;\n\tconst rowIndex = tableRow.index;\n\n\tconst rowspan = parseInt( tableCell.getAttribute( 'rowspan' ) );\n\tconst newRowspan = headingRows - rowIndex;\n\n\tconst attributes = {};\n\n\tconst spanToSet = rowspan - newRowspan;\n\n\tif ( spanToSet > 1 ) {\n\t\tattributes.rowspan = spanToSet;\n\t}\n\n\tconst startRow = table.getChildIndex( tableRow );\n\tconst endRow = startRow + newRowspan;\n\tconst tableMap = [ ...new TableWalker( table, { startRow, endRow, includeSpanned: true } ) ];\n\n\tlet columnIndex;\n\n\tfor ( const { row, column, cell, colspan, cellIndex } of tableMap ) {\n\t\tif ( cell === tableCell ) {\n\t\t\tcolumnIndex = column;\n\n\t\t\tif ( colspan > 1 ) {\n\t\t\t\tattributes.colspan = colspan;\n\t\t\t}\n\t\t}\n\n\t\tif ( columnIndex !== undefined && columnIndex === column && row === endRow ) {\n\t\t\tconst tableRow = table.getChild( row );\n\t\t\tconst tableCellPosition = writer.createPositionAt( tableRow, cellIndex );\n\n\t\t\tcreateEmptyTableCell( writer, tableCellPosition, attributes );\n\t\t}\n\t}\n\n\t// Update the rowspan attribute after updating table.\n\tupdateNumericAttribute( 'rowspan', newRowspan, tableCell, writer );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/commands/setheadercolumncommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport { findAncestor, updateNumericAttribute } from './utils';\n\n/**\n * The header column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'setTableColumnHeader'` editor command.\n *\n * You can make the column containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element)\n * by executing:\n *\n *\t\teditor.execute( 'setTableColumnHeader' );\n *\n * **Note:** All preceding columns will also become headers. If the current column is already a header, executing this command\n * will make it a regular column back again (including the following columns).\n *\n * @extends module:core/command~Command\n */\nexport default class SetHeaderColumnCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', position );\n\n\t\tconst isInTable = !!tableCell;\n\n\t\tthis.isEnabled = isInTable;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection} is in a header column.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t\tthis.value = isInTable && this._isInHeading( tableCell, tableCell.parent.parent );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header column, the command will set the `headingColumns` table attribute to cover that column.\n\t *\n\t * When the selection is already in a header column, it will set `headingColumns` so the heading section will end before that column.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', position.parent );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst currentHeadingColumns = parseInt( table.getAttribute( 'headingColumns' ) || 0 );\n\t\tconst { column: selectionColumn } = tableUtils.getCellLocation( tableCell );\n\n\t\tconst headingColumnsToSet = currentHeadingColumns > selectionColumn ? selectionColumn : selectionColumn + 1;\n\n\t\tmodel.change( writer => {\n\t\t\tupdateNumericAttribute( 'headingColumns', headingColumnsToSet, table, writer, 0 );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if a table cell is in the heading section.\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @param {module:engine/model/element~Element} table\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isInHeading( tableCell, table ) {\n\t\tconst headingColumns = parseInt( table.getAttribute( 'headingColumns' ) || 0 );\n\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst { column } = tableUtils.getCellLocation( tableCell );\n\n\t\treturn !!headingColumns && column < headingColumns;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/converters/table-layout-post-fixer\n */\n\nimport { createEmptyTableCell, findAncestor, updateNumericAttribute } from './../commands/utils';\nimport TableWalker from './../tablewalker';\n\n/**\n * Injects a table layout post-fixer into the model.\n *\n * The role of the table layout post-fixer is to ensure that the table rows have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * All table rows have the same size.\n * * None of a table cells that extend vertically beyond their section (either header or body).\n * * A table cell has always at least one element as child.\n *\n * If the table structure is not correct, the post-fixer will automatically correct it in two steps:\n *\n * 1. It will clip table cells that extends beyond it section.\n * 2. It will add empty table cells to those rows which are narrower then the widest table row.\n *\n * ## Clipping overlapping table cells\n *\n * Such situation may occur when pasting a table (or part of a table) to the editor from external sources.\n *\n * For example, see the following table which has the cell (FOO) with the rowspan attribute (2):\n *\n *\t\t<table headingRows=\"1\">\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell rowspan=\"2\"><paragraph>FOO</paragraph></tableCell>\n *\t\t\t\t<tableCell colspan=\"2\"><paragraph>BAR</paragraph></tableCell>\n *\t\t\t</tableRow>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell><paragraph>BAZ</paragraph></tableCell>\n *\t\t\t\t<tableCell><paragraph>XYZ</paragraph></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * will be rendered in the view as:\n *\n *\t\t<table>\n *\t\t\t<thead>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td rowspan=\"2\">FOO</td>\n *\t\t\t\t\t<td colspan=\"2\">BAR</td>\n *\t\t\t\t</tr>\n *\t\t\t</thead>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>BAZ</td>\n *\t\t\t\t\t<td>XYZ</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * In the above example the table will be rendered as a table with two rows - one in the header and second one in the body.\n * The table cell (FOO) cannot span over multiple rows as it would expand from the header to the body section.\n * The `rowspan` attribute must be changed to (1). The value (1) is a default value of the `rowspan` attribute\n * so the `rowspan` attribute will be removed from the model.\n *\n * The table cell with BAZ contents will be in the first column of the table.\n *\n * ## Adding missing table cells\n *\n * The table post-fixer will insert empty table cells to equalize table rows sizes (number of columns).\n * The size of a table row is calculated by counting column spans of table cells - both horizontal (from the same row) and\n * vertical (from rows above).\n *\n * In the above example, the table row in the body section of the table is narrower then the row from the header - it has two cells\n * with the default colspan (1). The header row has one cell with colspan (1) and second with colspan (2).\n * The table cell (FOO) does not expand beyond the head section (and as such will be fixed in the first step of this post-fixer).\n * The post-fixer will add a missing table cell to the row in the body section of the table.\n *\n * The table from the above example will be fixed and rendered to the view as below:\n *\n *\t\t<table>\n *\t\t\t<thead>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td rowspan=\"2\">FOO</td>\n *\t\t\t\t\t<td colspan=\"2\">BAR</td>\n *\t\t\t\t</tr>\n *\t\t\t</thead>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>BAZ</td>\n *\t\t\t\t\t<td>XYZ</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * ## Collaboration & Undo - Expectations vs post-fixer results\n *\n * The table post-fixer only ensures proper structure without deeper analysis of the nature of a change. As such, it might lead\n * to a structure which was not intended by the user changes. In particular, it will also fix undo steps (in conjunction with collaboration)\n * in which editor content might not return to the original state.\n *\n * This will usually happen when one or more users changes size of the table.\n *\n * As en example see a table below:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * and user actions:\n *\n * 1. Both user have table with two rows and two columns.\n * 2. User A adds a column at the end of the table - this will insert empty table cells to two rows.\n * 3. User B adds a row at the end of the table- this will insert a row with two empty table cells.\n * 4. Both users will have a table as below:\n *\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * The last row is shorter then others so table post-fixer will add empty row to tha last row:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * Unfortunately undo doesn't know the nature of changes and depending which user will apply post-fixer changes undoing them might lead to\n * broken table. If User B will undo inserting column to a table the undo engine will undo only operations of\n * inserting empty cells to rows from initial table state (row 1 & 2) but the cell in post-fixed row will remain:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * After undo the table post-fixer will detect that two rows are shorter then other and will fix table to:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer after undo)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer after undo)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n * @param {module:engine/model/model~Model} model\n */\nexport default function injectTableLayoutPostFixer( model ) {\n\tmodel.document.registerPostFixer( writer => tableLayoutPostFixer( writer, model ) );\n}\n\n// The table layout post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\nfunction tableLayoutPostFixer( writer, model ) {\n\tconst changes = model.document.differ.getChanges();\n\n\tlet wasFixed = false;\n\n\t// Do not analyze the same table more then once - may happen for multiple changes in the same table.\n\tconst analyzedTables = new Set();\n\n\tfor ( const entry of changes ) {\n\t\tlet table;\n\n\t\tif ( entry.name == 'table' && entry.type == 'insert' ) {\n\t\t\ttable = entry.position.nodeAfter;\n\t\t}\n\n\t\t// Fix table on adding/removing table cells and rows.\n\t\tif ( entry.name == 'tableRow' || entry.name == 'tableCell' ) {\n\t\t\ttable = findAncestor( 'table', entry.position );\n\t\t}\n\n\t\t// Fix table on any table's attribute change - including attributes of table cells.\n\t\tif ( isTableAttributeEntry( entry ) ) {\n\t\t\ttable = findAncestor( 'table', entry.range.start );\n\t\t}\n\n\t\tif ( table && !analyzedTables.has( table ) ) {\n\t\t\t// Step 1: correct rowspans of table cells if necessary.\n\t\t\t// The wasFixed flag should be true if any of tables in batch was fixed - might be more then one.\n\t\t\twasFixed = fixTableCellsRowspan( table, writer ) || wasFixed;\n\t\t\t// Step 2: fix table rows sizes.\n\t\t\twasFixed = fixTableRowsSizes( table, writer ) || wasFixed;\n\n\t\t\tanalyzedTables.add( table );\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes the invalid value of the rowspan attribute because a table cell cannot vertically extend beyond the table section it belongs to.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n// @returns {Boolean} Returns true if table was fixed.\nfunction fixTableCellsRowspan( table, writer ) {\n\tlet wasFixed = false;\n\n\tconst cellsToTrim = findCellsToTrim( table );\n\n\tif ( cellsToTrim.length ) {\n\t\twasFixed = true;\n\n\t\tfor ( const data of cellsToTrim ) {\n\t\t\tupdateNumericAttribute( 'rowspan', data.rowspan, data.cell, writer, 1 );\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n// Makes all table rows in a table the same size.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n// @returns {Boolean} Returns true if table was fixed.\nfunction fixTableRowsSizes( table, writer ) {\n\tlet wasFixed = false;\n\n\tconst rowsLengths = getRowsLengths( table );\n\tconst tableSize = rowsLengths[ 0 ];\n\n\tconst isValid = Object.values( rowsLengths ).every( length => length === tableSize );\n\n\tif ( !isValid ) {\n\t\tconst maxColumns = Object.values( rowsLengths ).reduce( ( prev, current ) => current > prev ? current : prev, 0 );\n\n\t\tfor ( const [ rowIndex, size ] of Object.entries( rowsLengths ) ) {\n\t\t\tconst columnsToInsert = maxColumns - size;\n\n\t\t\tif ( columnsToInsert ) {\n\t\t\t\tfor ( let i = 0; i < columnsToInsert; i++ ) {\n\t\t\t\t\tcreateEmptyTableCell( writer, writer.createPositionAt( table.getChild( rowIndex ), 'end' ) );\n\t\t\t\t}\n\n\t\t\t\twasFixed = true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n// Searches for the table cells that extends beyond the table section to which they belong to. It will return an array of objects\n// that holds table cells to be trimmed and correct value of a rowspan attribute to set.\n//\n// @param {module:engine/model/element~Element} table\n// @returns {Array.<{{cell, rowspan}}>}\nfunction findCellsToTrim( table ) {\n\tconst headingRows = parseInt( table.getAttribute( 'headingRows' ) || 0 );\n\tconst maxRows = table.childCount;\n\n\tconst cellsToTrim = [];\n\n\tfor ( const { row, rowspan, cell } of new TableWalker( table ) ) {\n\t\t// Skip cells that do not expand over its row.\n\t\tif ( rowspan < 2 ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst isInHeader = row < headingRows;\n\n\t\t// Row limit is either end of header section or whole table as table body is after the header.\n\t\tconst rowLimit = isInHeader ? headingRows : maxRows;\n\n\t\t// If table cell expands over its limit reduce it height to proper value.\n\t\tif ( row + rowspan > rowLimit ) {\n\t\t\tconst newRowspan = rowLimit - row;\n\n\t\t\tcellsToTrim.push( { cell, rowspan: newRowspan } );\n\t\t}\n\t}\n\n\treturn cellsToTrim;\n}\n\n// Returns an object with lengths of rows assigned to the corresponding row index.\n//\n// @param {module:engine/model/element~Element} table\n// @returns {Object}\nfunction getRowsLengths( table ) {\n\tconst lengths = {};\n\n\tfor ( const { row } of new TableWalker( table, { includeSpanned: true } ) ) {\n\t\tif ( !lengths[ row ] ) {\n\t\t\tlengths[ row ] = 0;\n\t\t}\n\n\t\tlengths[ row ] += 1;\n\t}\n\n\treturn lengths;\n}\n\n// Checks if the differ entry for an attribute change is one of table's attributes.\n//\n// @param entry\n// @returns {Boolean}\nfunction isTableAttributeEntry( entry ) {\n\tconst isAttributeType = entry.type === 'attribute';\n\tconst key = entry.attributeKey;\n\n\treturn isAttributeType && ( key === 'headingRows' || key === 'colspan' || key === 'rowspan' );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/converters/table-cell-content-post-fixer\n */\n\n/**\n * Injects a table cell post-fixer into the model.\n *\n * The role of the table post-fixer is to ensure that the table cells have the correct content\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * A table cells must contains at least one block as a child. The empty table cell will have empty `<paragraph>` as a child.\n *\n *        <table>\n *            <tableRow>\n *                <tableCell></tableCell>\n *            </tableRow>\n *        </table>\n *\n * Will be fixed to:\n *\n *        <table>\n *            <tableRow>\n *                <tableCell><paragraph></paragraph></tableCell>\n *            </tableRow>\n *        </table>\n *\n * @param {module:engine/model/model~Model} model\n */\nexport default function injectTableCellContentPostFixer( model ) {\n\tmodel.document.registerPostFixer( writer => tableCellContentsPostFixer( writer, model ) );\n}\n\n// The table cell contents post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\nfunction tableCellContentsPostFixer( writer, model ) {\n\tconst changes = model.document.differ.getChanges();\n\n\tlet wasFixed = false;\n\n\tfor ( const entry of changes ) {\n\t\t// Enforce paragraph in tableCell even after other feature remove its contents.\n\t\tif ( entry.type == 'remove' && entry.position.parent.is( 'tableCell' ) ) {\n\t\t\twasFixed = fixTableCellContent( entry.position.parent, writer ) || wasFixed;\n\t\t}\n\n\t\t// Analyze table cells on insertion.\n\t\tif ( entry.type == 'insert' ) {\n\t\t\tif ( entry.name == 'table' ) {\n\t\t\t\twasFixed = fixTable( entry.position.nodeAfter, writer ) || wasFixed;\n\t\t\t}\n\n\t\t\tif ( entry.name == 'tableRow' ) {\n\t\t\t\twasFixed = fixTableRow( entry.position.nodeAfter, writer ) || wasFixed;\n\t\t\t}\n\n\t\t\tif ( entry.name == 'tableCell' ) {\n\t\t\t\twasFixed = fixTableCellContent( entry.position.nodeAfter, writer ) || wasFixed;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes all table cells in a table.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\nfunction fixTable( table, writer ) {\n\tlet wasFixed = false;\n\n\tfor ( const row of table.getChildren() ) {\n\t\twasFixed = fixTableRow( row, writer ) || wasFixed;\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes all table cells in a table row.\n//\n// @param {module:engine/model/element~Element} tableRow\n// @param {module:engine/model/writer~Writer} writer\nfunction fixTableRow( tableRow, writer ) {\n\tlet wasFixed = false;\n\n\tfor ( const tableCell of tableRow.getChildren() ) {\n\t\twasFixed = fixTableCellContent( tableCell, writer ) || wasFixed;\n\t}\n\n\treturn wasFixed;\n}\n\n// Fixes all table cell content by adding paragraph to a table cell without any child.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\nfunction fixTableCellContent( tableCell, writer ) {\n\tif ( tableCell.childCount == 0 ) {\n\t\twriter.insertElement( 'paragraph', tableCell );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/converters/tablecell-post-fixer\n */\n\n/**\n * Injects a table cell post-fixer into the editing controller.\n *\n * The role of the table cell post-fixer is to ensure that the table cell contents in the editing view are properly converted.\n *\n * This post-fixer will ensure that after model changes in the editing view:\n * * single paragraphs are rendered as `<span>\n * * single paragraphs with one or more attributes are rendered as `<p>`\n * * single paragraphs in table cell with other block elements are rendered as `<p>`\n * * paragraphs in table cells with other block elements (including other paragraphs) are rendered as `<p>`.\n *\n * In the model each table cell has always at least one block element inside. If no other block was defined (empty table cell) the table\n * feature will insert empty `<paragraph>`. Similarly text nodes will be wrapped in paragraphs. Rendering in the data pipeline differs\n * from rendering in the editing pipeline - text nodes in single `<paragraph>` are rendered in the data pipeline as direct children\n * of the `<td>` or `<th>` elements. In other cases `<paragraph>` elements are rendered as `<p>` blocks.\n *\n * To ensure proper mappings between model and view elements and positions in the editing pipeline the table feature will always render\n * an element in the view: `<span>` for single or empty `<paragraph>` and `<p>` otherwise.\n *\n * Example:\n *\n *\t\t<table>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell><paragraph></paragraph></tableCell>\n *\t\t\t\t<tableCell><paragraph>foo</paragraph></tableCell>\n *\t\t\t\t<tableCell><paragraph baz=\"bar\">foo</paragraph></tableCell>\n *\t\t\t\t<tableCell><heading2>bar</heading2><paragraph>baz</paragraph></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * The editor will render in the data pipeline:\n *\n *\t\t<figure>\n *\t\t\t<table>\n *\t\t\t\t<tbody>\n *\t\t\t\t\t<tr>\n *\t\t\t\t\t\t<td></td>\n *\t\t\t\t\t\t<td>foo</td>\n *\t\t\t\t\t\t<td><p baz=\"bar\">foo</p></td>\n *\t\t\t\t\t\t<td><h3>bar</h3><p>baz</p></td>\n *\t\t\t\t\t</tr>\n *\t\t\t\t</tbody>\n *\t\t\t</table>\n *\t\t</figure>\n *\n * and in the editing view (without widget markup):\n *\n *\t\t<figure>\n *\t\t\t<table>\n *\t\t\t\t<tbody>\n *\t\t\t\t\t<tr>\n *\t\t\t\t\t\t<td><span></span></td>\n *\t\t\t\t\t\t<td><span>foo</span></td>\n *\t\t\t\t\t\t<td><p baz=\"bar\">foo</p></td>\n *\t\t\t\t\t\t<td><h3>bar</h3><p>baz</p></td>\n *\t\t\t\t\t</tr>\n *\t\t\t\t</tbody>\n *\t\t\t</table>\n *\t\t</figure>\n *\n * @param {module:engine/model/model~Model} model\n * @param {module:engine/controller/editingcontroller~EditingController} editing\n */\nexport default function injectTableCellPostFixer( model, editing ) {\n\tediting.view.document.registerPostFixer( writer => tableCellPostFixer( writer, model, editing.mapper, editing.view ) );\n}\n\n// The table cell post-fixer.\n//\n// @param {module:engine/view/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\n// @param {module:engine/conversion/mapper~Mapper} mapper\nfunction tableCellPostFixer( writer, model, mapper, view ) {\n\tlet wasFixed = false;\n\n\tconst elementsToCheck = getElementsToCheck( view );\n\n\tfor ( const element of elementsToCheck ) {\n\t\twasFixed = ensureProperElementName( element, mapper, writer ) || wasFixed;\n\t}\n\n\t// Selection in the view might not be updated to renamed elements. Happens mostly when other feature inserts paragraph to the table cell\n\t// (ie. when deleting table cell contents) and sets selection to it while table-post fixer changes view <p> to <span> element.\n\t// The view.selection would have outdated nodes.\n\tif ( wasFixed ) {\n\t\tupdateRangesInViewSelection( model.document.selection, mapper, writer );\n\t}\n\n\treturn wasFixed;\n}\n\n// Returns view elements changed in current view.change() block.\n//\n// **Note**: Currently it uses private property of the view: _renderer to get changed view elements to check.\n//\n// @param {module:engine/view/view~View} view\nfunction getElementsToCheck( view ) {\n\tconst elementsWithChangedAttributes = Array.from( view._renderer.markedAttributes )\n\t\t.filter( el => !!el.parent )\n\t\t.filter( isSpanOrP )\n\t\t.filter( el => isTdOrTh( el.parent ) );\n\n\tconst changedChildren = Array.from( view._renderer.markedChildren )\n\t\t.filter( el => !!el.parent )\n\t\t.filter( isTdOrTh )\n\t\t.reduce( ( prev, element ) => {\n\t\t\tconst childrenToCheck = Array.from( element.getChildren() ).filter( isSpanOrP );\n\n\t\t\treturn [ ...prev, ...childrenToCheck ];\n\t\t}, [] );\n\n\treturn [ ...elementsWithChangedAttributes, ...changedChildren ];\n}\n\n// This method checks if view element for model's <paragraph> was properly converter.\n// Paragraph should be either\n// - span: for single paragraph with no attributes.\n// - p   : in other cases.\nfunction ensureProperElementName( currentViewElement, mapper, writer ) {\n\tconst modelParagraph = mapper.toModelElement( currentViewElement );\n\tconst expectedViewElementName = getExpectedElementName( modelParagraph.parent, modelParagraph );\n\n\tif ( currentViewElement.name !== expectedViewElementName ) {\n\t\t// Unbind current view element as it should be cleared from mapper.\n\t\tmapper.unbindViewElement( currentViewElement );\n\n\t\tconst renamedViewElement = writer.rename( expectedViewElementName, currentViewElement );\n\n\t\t// Bind paragraph inside table cell to the renamed view element.\n\t\tmapper.bindElements( modelParagraph, renamedViewElement );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Expected view element name depends on model elements:\n// - <paragraph> with any attribute set should be rendered as <p>\n// - all <paragraphs> in <tableCell> that has more then one children should be rendered as <p>\n// - an only <paragraph> child with no attributes should be rendered as <span>\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {module:engine/model/element~Element} paragraph\n// @returns {String}\nfunction getExpectedElementName( tableCell, paragraph ) {\n\tconst isOnlyChild = tableCell.childCount > 1;\n\tconst hasAttributes = !![ ...paragraph.getAttributes() ].length;\n\n\treturn ( isOnlyChild || hasAttributes ) ? 'p' : 'span';\n}\n\n// Method to filter out <span> and <p> elements.\n//\n// @param {module:engine/view/element~Element} element\nfunction isSpanOrP( element ) {\n\treturn element.is( 'p' ) || element.is( 'span' );\n}\n\n// Method to filter out <td> and <th> elements.\n//\n// @param {module:engine/view/element~Element} element\nfunction isTdOrTh( element ) {\n\treturn element.is( 'td' ) || element.is( 'th' );\n}\n\n// Resets view selections based on model selection.\nfunction updateRangesInViewSelection( selection, mapper, writer ) {\n\tconst fixedRanges = Array.from( selection.getRanges() )\n\t\t.map( range => mapper.toViewRange( range ) );\n\n\twriter.setSelection( fixedRanges, { backward: selection.isBackward } );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/tableediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { upcastElementToElement } from '@ckeditor/ckeditor5-engine/src/conversion/upcast-converters';\n\nimport upcastTable, { upcastTableCell } from './converters/upcasttable';\nimport {\n\tdowncastInsertCell,\n\tdowncastInsertRow,\n\tdowncastInsertTable,\n\tdowncastRemoveRow,\n\tdowncastTableHeadingColumnsChange,\n\tdowncastTableHeadingRowsChange\n} from './converters/downcast';\n\nimport InsertTableCommand from './commands/inserttablecommand';\nimport InsertRowCommand from './commands/insertrowcommand';\nimport InsertColumnCommand from './commands/insertcolumncommand';\nimport SplitCellCommand from './commands/splitcellcommand';\nimport MergeCellCommand from './commands/mergecellcommand';\nimport RemoveRowCommand from './commands/removerowcommand';\nimport RemoveColumnCommand from './commands/removecolumncommand';\nimport SetHeaderRowCommand from './commands/setheaderrowcommand';\nimport SetHeaderColumnCommand from './commands/setheadercolumncommand';\nimport { findAncestor } from './commands/utils';\nimport TableUtils from '../src/tableutils';\n\nimport injectTableLayoutPostFixer from './converters/table-layout-post-fixer';\nimport injectTableCellContentsPostFixer from './converters/table-cell-content-post-fixer';\nimport injectTableCellPostFixer from './converters/tablecell-post-fixer';\n\nimport '../theme/tableediting.css';\n\n/**\n * The table editing feature.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\t\tconst conversion = editor.conversion;\n\n\t\tschema.register( 'table', {\n\t\t\tallowWhere: '$block',\n\t\t\tallowAttributes: [ 'headingRows', 'headingColumns' ],\n\t\t\tisLimit: true,\n\t\t\tisObject: true\n\t\t} );\n\n\t\tschema.register( 'tableRow', {\n\t\t\tallowIn: 'table',\n\t\t\tisLimit: true\n\t\t} );\n\n\t\tschema.register( 'tableCell', {\n\t\t\tallowIn: 'tableRow',\n\t\t\tallowAttributes: [ 'colspan', 'rowspan' ],\n\t\t\tisLimit: true\n\t\t} );\n\n\t\t// Allow all $block content inside table cell.\n\t\tschema.extend( '$block', { allowIn: 'tableCell' } );\n\n\t\t// Disallow table in table.\n\t\tschema.addChildCheck( ( context, childDefinition ) => {\n\t\t\tif ( childDefinition.name == 'table' && Array.from( context.getNames() ).includes( 'table' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\t// Disallow image and media in table cell.\n\t\tschema.addChildCheck( ( context, childDefinition ) => {\n\t\t\tif ( !Array.from( context.getNames() ).includes( 'table' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( childDefinition.name == 'image' || childDefinition.name == 'media' ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\t// Table conversion.\n\t\tconversion.for( 'upcast' ).add( upcastTable() );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertTable( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastInsertTable() );\n\n\t\t// Table row conversion.\n\t\tconversion.for( 'upcast' ).add( upcastElementToElement( { model: 'tableRow', view: 'tr' } ) );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertRow( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastInsertRow() );\n\t\tconversion.for( 'downcast' ).add( downcastRemoveRow() );\n\n\t\t// Table cell conversion.\n\t\tconversion.for( 'upcast' ).add( upcastTableCell( 'td' ) );\n\t\tconversion.for( 'upcast' ).add( upcastTableCell( 'th' ) );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertCell( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastInsertCell() );\n\n\t\t// Table attributes conversion.\n\t\tconversion.attributeToAttribute( { model: 'colspan', view: 'colspan' } );\n\t\tconversion.attributeToAttribute( { model: 'rowspan', view: 'rowspan' } );\n\n\t\t// Table heading rows and cols conversion.\n\t\tconversion.for( 'editingDowncast' ).add( downcastTableHeadingColumnsChange( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastTableHeadingColumnsChange() );\n\t\tconversion.for( 'editingDowncast' ).add( downcastTableHeadingRowsChange( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastTableHeadingRowsChange() );\n\n\t\tinjectTableCellPostFixer( editor.model, editor.editing );\n\n\t\t// Define all the commands.\n\t\teditor.commands.add( 'insertTable', new InsertTableCommand( editor ) );\n\t\teditor.commands.add( 'insertTableRowAbove', new InsertRowCommand( editor, { order: 'above' } ) );\n\t\teditor.commands.add( 'insertTableRowBelow', new InsertRowCommand( editor, { order: 'below' } ) );\n\t\teditor.commands.add( 'insertTableColumnLeft', new InsertColumnCommand( editor, { order: 'left' } ) );\n\t\teditor.commands.add( 'insertTableColumnRight', new InsertColumnCommand( editor, { order: 'right' } ) );\n\n\t\teditor.commands.add( 'removeTableRow', new RemoveRowCommand( editor ) );\n\t\teditor.commands.add( 'removeTableColumn', new RemoveColumnCommand( editor ) );\n\n\t\teditor.commands.add( 'splitTableCellVertically', new SplitCellCommand( editor, { direction: 'vertically' } ) );\n\t\teditor.commands.add( 'splitTableCellHorizontally', new SplitCellCommand( editor, { direction: 'horizontally' } ) );\n\n\t\teditor.commands.add( 'mergeTableCellRight', new MergeCellCommand( editor, { direction: 'right' } ) );\n\t\teditor.commands.add( 'mergeTableCellLeft', new MergeCellCommand( editor, { direction: 'left' } ) );\n\t\teditor.commands.add( 'mergeTableCellDown', new MergeCellCommand( editor, { direction: 'down' } ) );\n\t\teditor.commands.add( 'mergeTableCellUp', new MergeCellCommand( editor, { direction: 'up' } ) );\n\n\t\teditor.commands.add( 'setTableColumnHeader', new SetHeaderColumnCommand( editor ) );\n\t\teditor.commands.add( 'setTableRowHeader', new SetHeaderRowCommand( editor ) );\n\n\t\tinjectTableLayoutPostFixer( model );\n\t\tinjectTableCellContentsPostFixer( model );\n\n\t\t// Handle tab key navigation.\n\t\tthis.editor.keystrokes.set( 'Tab', ( ...args ) => this._handleTabOnSelectedTable( ...args ), { priority: 'low' } );\n\t\tthis.editor.keystrokes.set( 'Tab', this._getTabHandler( true ), { priority: 'low' } );\n\t\tthis.editor.keystrokes.set( 'Shift+Tab', this._getTabHandler( false ), { priority: 'low' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TableUtils ];\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events for the <kbd>Tab</kbd> key executed\n\t * when the table widget is selected.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_handleTabOnSelectedTable( domEventData, cancel ) {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\n\t\tif ( !selection.isCollapsed && selection.rangeCount === 1 && selection.getFirstRange().isFlat ) {\n\t\t\tconst selectedElement = selection.getSelectedElement();\n\n\t\t\tif ( !selectedElement || !selectedElement.is( 'table' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcancel();\n\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeIn( selectedElement.getChild( 0 ).getChild( 0 ) ) );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a handler for {@link module:engine/view/document~Document#event:keydown keydown} events for the <kbd>Tab</kbd> key executed\n\t * inside table cell.\n\t *\n\t * @private\n\t * @param {Boolean} isForward Whether this handler will move selection to the next cell or previous.\n\t */\n\t_getTabHandler( isForward ) {\n\t\tconst editor = this.editor;\n\n\t\treturn ( domEventData, cancel ) => {\n\t\t\tconst selection = editor.model.document.selection;\n\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\n\t\t\tif ( !tableCell ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcancel();\n\n\t\t\tconst tableRow = tableCell.parent;\n\t\t\tconst table = tableRow.parent;\n\n\t\t\tconst currentRowIndex = table.getChildIndex( tableRow );\n\t\t\tconst currentCellIndex = tableRow.getChildIndex( tableCell );\n\n\t\t\tconst isFirstCellInRow = currentCellIndex === 0;\n\n\t\t\tif ( !isForward && isFirstCellInRow && currentRowIndex === 0 ) {\n\t\t\t\t// It's the first cell of a table - don't do anything (stay in current position).\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isLastCellInRow = currentCellIndex === tableRow.childCount - 1;\n\t\t\tconst isLastRow = currentRowIndex === table.childCount - 1;\n\n\t\t\tif ( isForward && isLastRow && isLastCellInRow ) {\n\t\t\t\teditor.plugins.get( TableUtils ).insertRows( table, { at: table.childCount } );\n\t\t\t}\n\n\t\t\tlet cellToFocus;\n\n\t\t\t// Move to first cell in next row.\n\t\t\tif ( isForward && isLastCellInRow ) {\n\t\t\t\tconst nextRow = table.getChild( currentRowIndex + 1 );\n\n\t\t\t\tcellToFocus = nextRow.getChild( 0 );\n\t\t\t}\n\t\t\t// Move to last cell in a previous row.\n\t\t\telse if ( !isForward && isFirstCellInRow ) {\n\t\t\t\tconst previousRow = table.getChild( currentRowIndex - 1 );\n\n\t\t\t\tcellToFocus = previousRow.getChild( previousRow.childCount - 1 );\n\t\t\t}\n\t\t\t// Move to next/previous cell.\n\t\t\telse {\n\t\t\t\tcellToFocus = tableRow.getChild( currentCellIndex + ( isForward ? 1 : -1 ) );\n\t\t\t}\n\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeIn( cellToFocus ) );\n\t\t\t} );\n\t\t};\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/ui/inserttableview\n */\n\nimport View from '@ckeditor/ckeditor5-ui/src/view';\n\nimport './../../theme/inserttable.css';\n\n/**\n * The table size view.\n *\n * It renders a 10x10 grid to choose the inserted table size.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class InsertTableView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * A collection of table size box items.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * The currently selected number of rows of the new table.\n\t\t *\n\t\t * @observable\n\t\t * @member {Number} #rows\n\t\t */\n\t\tthis.set( 'rows', 0 );\n\n\t\t/**\n\t\t * The currently selected number of columns of the new table.\n\t\t *\n\t\t * @observable\n\t\t * @member {Number} #columns\n\t\t */\n\t\tthis.set( 'columns', 0 );\n\n\t\t/**\n\t\t * The label text displayed under the boxes.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #label\n\t\t */\n\t\tthis.bind( 'label' )\n\t\t\t.to( this, 'columns', this, 'rows', ( columns, rows ) => `${ rows } x ${ columns }` );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [ 'ck' ]\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [ 'ck-insert-table-dropdown__grid' ]\n\t\t\t\t\t},\n\t\t\t\t\tchildren: this.items\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tclass: [ 'ck-insert-table-dropdown__label' ]\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttext: bind.to( 'label' )\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\n\t\t\ton: {\n\t\t\t\tmousedown: bind.to( evt => {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t} ),\n\n\t\t\t\tclick: bind.to( () => {\n\t\t\t\t\tthis.fire( 'execute' );\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\n\t\t// Add grid boxes to table selection view.\n\t\tfor ( let index = 0; index < 100; index++ ) {\n\t\t\tconst boxView = new TableSizeGridBoxView();\n\n\t\t\t// Listen to box view 'over' event which indicates that mouse is over this box.\n\t\t\tboxView.on( 'over', () => {\n\t\t\t\t// Translate box index to the row & column index.\n\t\t\t\tconst row = Math.floor( index / 10 );\n\t\t\t\tconst column = index % 10;\n\n\t\t\t\t// As row & column indexes are zero-based transform it to number of selected rows & columns.\n\t\t\t\tthis.set( 'rows', row + 1 );\n\t\t\t\tthis.set( 'columns', column + 1 );\n\t\t\t} );\n\n\t\t\tthis.items.add( boxView );\n\t\t}\n\n\t\tthis.on( 'change:columns', () => {\n\t\t\tthis._highlightGridBoxes();\n\t\t} );\n\n\t\tthis.on( 'change:rows', () => {\n\t\t\tthis._highlightGridBoxes();\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfocus() {\n\t\t// The dropdown panel expects DropdownPanelFocusable interface on views passed to dropdown panel. See #30.\n\t\t// The method should be implemented while working on keyboard support for this view. See #22.\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfocusLast() {\n\t\t// The dropdown panel expects DropdownPanelFocusable interface on views passed to dropdown panel. See #30.\n\t\t// The method should be implemented while working on keyboard support for this view. See #22.\n\t}\n\n\t/**\n\t * Highlights grid boxes depending on rows and columns selected.\n\t *\n\t * @private\n\t */\n\t_highlightGridBoxes() {\n\t\tconst rows = this.rows;\n\t\tconst columns = this.columns;\n\n\t\tthis.items.map( ( boxView, index ) => {\n\t\t\t// Translate box index to the row & column index.\n\t\t\tconst itemRow = Math.floor( index / 10 );\n\t\t\tconst itemColumn = index % 10;\n\n\t\t\t// Grid box is highlighted when its row & column index belongs to selected number of rows & columns.\n\t\t\tconst isOn = itemRow < rows && itemColumn < columns;\n\n\t\t\tboxView.set( 'isOn', isOn );\n\t\t} );\n\t}\n}\n\n/**\n * A single grid box view element.\n *\n * This class is used to render the table size selection grid in {@link module:table/ui/inserttableview~InsertTableView}.\n *\n * @private\n */\nclass TableSizeGridBoxView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t/**\n\t\t * Controls whether the grid box view is \"on\".\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isOn\n\t\t */\n\t\tthis.set( 'isOn', false );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-insert-table-dropdown-grid-box',\n\t\t\t\t\tbind.if( 'isOn', 'ck-on' )\n\t\t\t\t]\n\t\t\t},\n\t\t\ton: {\n\t\t\t\tmouseover: bind.to( 'over' )\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module table/tableui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport {\n    addListToDropdown,\n    createDropdown\n} from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport InsertTableView from './ui/inserttableview';\nimport tableIcon from './../theme/icons/table.svg';\nimport tableColumnIcon from './../theme/icons/table-column.svg';\nimport tableRowIcon from './../theme/icons/table-row.svg';\nimport tableMergeCellIcon from './../theme/icons/table-merge-cell.svg';\n/**\n * The table UI plugin. It introduces:\n *\n * * The `'insertTable'` dropdown,\n * * The `'tableColumn'` dropdown,\n * * The `'tableRow'` dropdown,\n * * The `'mergeTableCells'` dropdown.\n *\n * The `'tableColumn'`, `'tableRow'`, `'mergeTableCells'` dropdowns work best with {@link module:table/tabletoolbar~TableToolbar}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        editor.ui.componentFactory.add('insertTable', locale => {\n            const command = editor.commands.get('insertTable');\n            const dropdownView = createDropdown(locale);\n            dropdownView.bind('isEnabled').to(command);\n            // Decorate dropdown's button.\n            dropdownView.buttonView.set({\n                icon: tableIcon,\n                label: t('i'),\n                tooltip: true\n            });\n            // Prepare custom view for dropdown's panel.\n            const insertTableView = new InsertTableView(locale);\n            dropdownView.panelView.children.add(insertTableView);\n            insertTableView.delegate('execute').to(dropdownView);\n            dropdownView.buttonView.on('open', () => {\n                // Reset the chooser before showing it to the user.\n                insertTableView.rows = 0;\n                insertTableView.columns = 0;\n            });\n            dropdownView.on('execute', () => {\n                editor.execute('insertTable', {\n                    rows: insertTableView.rows,\n                    columns: insertTableView.columns\n                });\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n        editor.ui.componentFactory.add('tableColumn', locale => {\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableColumnHeader',\n                        label: t('j'),\n                        bindIsOn: true\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableColumnLeft',\n                        label: t('k')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableColumnRight',\n                        label: t('l')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableColumn',\n                        label: t('m')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('n'), tableColumnIcon, options, locale);\n        });\n        editor.ui.componentFactory.add('tableRow', locale => {\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableRowHeader',\n                        label: t('o'),\n                        bindIsOn: true\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowBelow',\n                        label: t('p')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowAbove',\n                        label: t('q')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableRow',\n                        label: t('r')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('s'), tableRowIcon, options, locale);\n        });\n        editor.ui.componentFactory.add('mergeTableCells', locale => {\n            const options = [\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellUp',\n                        label: t('t')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellRight',\n                        label: t('u')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellDown',\n                        label: t('v')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellLeft',\n                        label: t('w')\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellVertically',\n                        label: t('x')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellHorizontally',\n                        label: t('y')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('z'), tableMergeCellIcon, options, locale);\n        });\n    }\n    /**\n\t * Creates a dropdown view from the set of options.\n\t *\n\t * @private\n\t * @param {String} label The dropdown button label.\n\t * @param {String} icon An icon for the dropdown button.\n\t * @param {Array.<module:ui/dropdown/utils~ListDropdownItemDefinition>} options The list of options for the dropdown.\n\t * @param {module:utils/locale~Locale} locale\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n    _prepareDropdown(label, icon, options, locale) {\n        const editor = this.editor;\n        const dropdownView = createDropdown(locale);\n        const commands = [];\n        // Prepare dropdown list items for list dropdown.\n        const itemDefinitions = new Collection();\n        for (const option of options) {\n            addListOption(option, editor, commands, itemDefinitions);\n        }\n        addListToDropdown(dropdownView, itemDefinitions);\n        // Decorate dropdown's button.\n        dropdownView.buttonView.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        // Make dropdown button disabled when all options are disabled.\n        dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n            return areEnabled.some(isEnabled => isEnabled);\n        });\n        this.listenTo(dropdownView, 'execute', evt => {\n            editor.execute(evt.source.commandName);\n            editor.editing.view.focus();\n        });\n        return dropdownView;\n    }\n}\n// Adds an option to a list view.\n//\n// @param {module:table/tableui~DropdownOption} option Configuration option.\n// @param {module:core/editor/editor~Editor} editor\n// @param {Array.<module:core/command~Command>} commands List of commands to update.\n// @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} itemDefinitions\n// Collection of dropdown items to update with given option.\nfunction addListOption(option, editor, commands, itemDefinitions) {\n    const model = option.model = new Model(option.model);\n    const {commandName, bindIsOn} = option.model;\n    if (option.type !== 'separator') {\n        const command = editor.commands.get(commandName);\n        commands.push(command);\n        model.set({ commandName });\n        model.bind('isEnabled').to(command);\n        if (bindIsOn) {\n            model.bind('isOn').to(command, 'value');\n        }\n    }\n    model.set({ withText: true });\n    itemDefinitions.add(option);\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/mouseobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * Mouse events observer.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View} by {@link module:engine/view/view~View#addObserver} method.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class MouseObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = 'mousedown';\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when mouse button is pressed down on one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/mouseobserver~MouseObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:engine/view/observer/mouseobserver~MouseObserver}\n * needs to be added to {@link module:engine/view/view~View} by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @see module:engine/view/observer/mouseobserver~MouseObserver\n * @event module:engine/view/document~Document#event:mousedown\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module widget/widget\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport MouseObserver from '@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver';\nimport { isWidget, WIDGET_SELECTED_CLASS_NAME, getLabel } from './utils';\nimport { keyCodes, getCode, parseKeystroke } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\nimport '../theme/widget.css';\n\nconst selectAllKeystrokeCode = parseKeystroke( 'Ctrl+A' );\n\n/**\n * The widget plugin. It enables base support for widgets.\n *\n * See {@glink api/widget package page} for more details and documentation.\n *\n * This plugin enables multiple behaiors required by the widgets:\n *\n * * The model to view selection converter for the editing pipeline (it handles widget custom selection rendering).\n * If a converted selection is wraps around a widget element, that selection is marked as\n * {@link module:engine/view/selection~Selection#isFake fake}. Additionally, proper the `ck-widget_selected` CSS class\n * is added to indicate that widget has been selected.\n * * The mouse and keyboard events handling on and around widget elements.\n *\n * @extends module:core/plugin~Plugin.\n */\nexport default class Widget extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Widget';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst view = this.editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t/**\n\t\t * Holds previously selected widgets.\n\t\t *\n\t\t * @private\n\t\t * @type {Set.<module:engine/view/element~Element>}\n\t\t */\n\t\tthis._previouslySelected = new Set();\n\n\t\t// Model to view selection converter.\n\t\t// Converts selection placed over widget element to fake selection\n\t\tthis.editor.editing.downcastDispatcher.on( 'selection', ( evt, data, conversionApi ) => {\n\t\t\t// Remove selected class from previously selected widgets.\n\t\t\tthis._clearPreviouslySelectedWidgets( conversionApi.writer );\n\n\t\t\tconst viewWriter = conversionApi.writer;\n\t\t\tconst viewSelection = viewWriter.document.selection;\n\t\t\tconst selectedElement = viewSelection.getSelectedElement();\n\t\t\tlet lastMarked = null;\n\n\t\t\tfor ( const range of viewSelection.getRanges() ) {\n\t\t\t\tfor ( const value of range ) {\n\t\t\t\t\tconst node = value.item;\n\n\t\t\t\t\t// Do not mark nested widgets in selected one. See: #57.\n\t\t\t\t\tif ( isWidget( node ) && !isChild( node, lastMarked ) ) {\n\t\t\t\t\t\tviewWriter.addClass( WIDGET_SELECTED_CLASS_NAME, node );\n\n\t\t\t\t\t\tthis._previouslySelected.add( node );\n\t\t\t\t\t\tlastMarked = node;\n\n\t\t\t\t\t\t// Check if widget is a single element selected.\n\t\t\t\t\t\tif ( node == selectedElement ) {\n\t\t\t\t\t\t\tviewWriter.setSelection( viewSelection.getRanges(), { fake: true, label: getLabel( selectedElement ) } );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, { priority: 'low' } );\n\n\t\t// If mouse down is pressed on widget - create selection over whole widget.\n\t\tview.addObserver( MouseObserver );\n\t\tthis.listenTo( viewDocument, 'mousedown', ( ...args ) => this._onMousedown( ...args ) );\n\n\t\t// Handle custom keydown behaviour.\n\t\tthis.listenTo( viewDocument, 'keydown', ( ...args ) => this._onKeydown( ...args ), { priority: 'high' } );\n\n\t\t// Handle custom delete behaviour.\n\t\tthis.listenTo( viewDocument, 'delete', ( evt, data ) => {\n\t\t\tif ( this._handleDelete( data.direction == 'forward' ) ) {\n\t\t\t\tdata.preventDefault();\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:mousedown mousedown} events on widget elements.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_onMousedown( eventInfo, domEventData ) {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tlet element = domEventData.target;\n\n\t\t// Do nothing if inside nested editable.\n\t\tif ( isInsideNestedEditable( element ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If target is not a widget element - check if one of the ancestors is.\n\t\tif ( !isWidget( element ) ) {\n\t\t\telement = element.findAncestor( isWidget );\n\n\t\t\tif ( !element ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tdomEventData.preventDefault();\n\n\t\t// Focus editor if is not focused already.\n\t\tif ( !viewDocument.isFocused ) {\n\t\t\tview.focus();\n\t\t}\n\n\t\t// Create model selection over widget.\n\t\tconst modelElement = editor.editing.mapper.toModelElement( element );\n\n\t\tthis._setSelectionOverElement( modelElement );\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_onKeydown( eventInfo, domEventData ) {\n\t\tconst keyCode = domEventData.keyCode;\n\t\tconst isForward = keyCode == keyCodes.delete || keyCode == keyCodes.arrowdown || keyCode == keyCodes.arrowright;\n\t\tlet wasHandled = false;\n\n\t\t// Checks if the keys were handled and then prevents the default event behaviour and stops\n\t\t// the propagation.\n\t\tif ( isArrowKeyCode( keyCode ) ) {\n\t\t\twasHandled = this._handleArrowKeys( isForward );\n\t\t} else if ( isSelectAllKeyCode( domEventData ) ) {\n\t\t\twasHandled = this._selectAllNestedEditableContent() || this._selectAllContent();\n\t\t} else if ( keyCode === keyCodes.enter ) {\n\t\t\twasHandled = this._handleEnterKey( domEventData.shiftKey );\n\t\t}\n\n\t\tif ( wasHandled ) {\n\t\t\tdomEventData.preventDefault();\n\t\t\teventInfo.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Handles delete keys: backspace and delete.\n\t *\n\t * @private\n\t * @param {Boolean} isForward Set to true if delete was performed in forward direction.\n\t * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n\t */\n\t_handleDelete( isForward ) {\n\t\t// Do nothing when the read only mode is enabled.\n\t\tif ( this.editor.isReadOnly ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst modelDocument = this.editor.model.document;\n\t\tconst modelSelection = modelDocument.selection;\n\n\t\t// Do nothing on non-collapsed selection.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst objectElement = this._getObjectElementNextToSelection( isForward );\n\n\t\tif ( objectElement ) {\n\t\t\tthis.editor.model.change( writer => {\n\t\t\t\tlet previousNode = modelSelection.anchor.parent;\n\n\t\t\t\t// Remove previous element if empty.\n\t\t\t\twhile ( previousNode.isEmpty ) {\n\t\t\t\t\tconst nodeToRemove = previousNode;\n\t\t\t\t\tpreviousNode = nodeToRemove.parent;\n\n\t\t\t\t\twriter.remove( nodeToRemove );\n\t\t\t\t}\n\n\t\t\t\tthis._setSelectionOverElement( objectElement );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Handles arrow keys.\n\t *\n\t * @private\n\t * @param {Boolean} isForward Set to true if arrow key should be handled in forward direction.\n\t * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n\t */\n\t_handleArrowKeys( isForward ) {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst modelDocument = model.document;\n\t\tconst modelSelection = modelDocument.selection;\n\t\tconst objectElement = modelSelection.getSelectedElement();\n\n\t\t// If object element is selected.\n\t\tif ( objectElement && schema.isObject( objectElement ) ) {\n\t\t\tconst position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\n\t\t\tconst newRange = schema.getNearestSelectionRange( position, isForward ? 'forward' : 'backward' );\n\n\t\t\tif ( newRange ) {\n\t\t\t\tmodel.change( writer => {\n\t\t\t\t\twriter.setSelection( newRange );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// If selection is next to object element.\n\t\t// Return if not collapsed.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst objectElement2 = this._getObjectElementNextToSelection( isForward );\n\n\t\tif ( !!objectElement2 && schema.isObject( objectElement2 ) ) {\n\t\t\tthis._setSelectionOverElement( objectElement2 );\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Handles the enter key, giving users and access to positions in the editable directly before\n\t * (<kbd>Shift</kbd>+<kbd>Enter</kbd>) or after (<kbd>Enter</kbd>) the selected widget.\n\t * It improves the UX, mainly when the widget is the first or last child of the root editable\n\t * and there's no other way to type after or before it.\n\t *\n\t * @private\n\t * @param {Boolean} isBackwards Set to true if the new paragraph is to be inserted before\n\t * the selected widget (<kbd>Shift</kbd>+<kbd>Enter</kbd>).\n\t * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n\t */\n\t_handleEnterKey( isBackwards ) {\n\t\tconst model = this.editor.model;\n\t\tconst modelSelection = model.document.selection;\n\t\tconst objectElement = modelSelection.getSelectedElement();\n\n\t\tif ( objectElement && model.schema.isObject( objectElement ) ) {\n\t\t\tmodel.change( writer => {\n\t\t\t\tconst paragraph = writer.createElement( 'paragraph' );\n\n\t\t\t\twriter.insert( paragraph, objectElement, isBackwards ? 'before' : 'after' );\n\t\t\t\twriter.setSelection( paragraph, 'in' );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Extends the {@link module:engine/model/selection~Selection document's selection} to span the entire\n\t * content of the nested editable if already anchored in one.\n\t *\n\t * See: {@link module:engine/model/schema~Schema#getLimitElement}.\n\t *\n\t * @private\n\t */\n\t_selectAllNestedEditableContent() {\n\t\tconst model = this.editor.model;\n\t\tconst documentSelection = model.document.selection;\n\t\tconst limitElement = model.schema.getLimitElement( documentSelection );\n\n\t\tif ( documentSelection.getFirstRange().root == limitElement ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\twriter.setSelection( writer.createRangeIn( limitElement ) );\n\t\t} );\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Handles <kbd>CTRL + A</kbd> when widget is selected.\n\t *\n\t * @private\n\t * @returns {Boolean} Returns true if widget was selected and selecting all was handled by this method.\n\t */\n\t_selectAllContent() {\n\t\tconst model = this.editor.model;\n\t\tconst editing = this.editor.editing;\n\t\tconst view = editing.view;\n\t\tconst viewDocument = view.document;\n\t\tconst viewSelection = viewDocument.selection;\n\n\t\tconst selectedElement = viewSelection.getSelectedElement();\n\n\t\t// Only widget is selected.\n\t\t// https://github.com/ckeditor/ckeditor5-widget/issues/23\n\t\tif ( selectedElement && isWidget( selectedElement ) ) {\n\t\t\tconst widgetParent = editing.mapper.toModelElement( selectedElement.parent );\n\n\t\t\tmodel.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeIn( widgetParent ) );\n\t\t\t} );\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sets {@link module:engine/model/selection~Selection document's selection} over given element.\n\t *\n\t * @private\n\t * @param {module:engine/model/element~Element} element\n\t */\n\t_setSelectionOverElement( element ) {\n\t\tthis.editor.model.change( writer => {\n\t\t\twriter.setSelection( writer.createRangeOn( element ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if {@link module:engine/model/element~Element element} placed next to the current\n\t * {@link module:engine/model/selection~Selection model selection} exists and is marked in\n\t * {@link module:engine/model/schema~Schema schema} as `object`.\n\t *\n\t * @private\n\t * @param {Boolean} forward Direction of checking.\n\t * @returns {module:engine/model/element~Element|null}\n\t */\n\t_getObjectElementNextToSelection( forward ) {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\t\tconst modelSelection = model.document.selection;\n\n\t\t// Clone current selection to use it as a probe. We must leave default selection as it is so it can return\n\t\t// to its current state after undo.\n\t\tconst probe = model.createSelection( modelSelection );\n\t\tmodel.modifySelection( probe, { direction: forward ? 'forward' : 'backward' } );\n\t\tconst objectElement = forward ? probe.focus.nodeBefore : probe.focus.nodeAfter;\n\n\t\tif ( !!objectElement && schema.isObject( objectElement ) ) {\n\t\t\treturn objectElement;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Removes CSS class from previously selected widgets.\n\t *\n\t * @private\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\t */\n\t_clearPreviouslySelectedWidgets( writer ) {\n\t\tfor ( const widget of this._previouslySelected ) {\n\t\t\twriter.removeClass( WIDGET_SELECTED_CLASS_NAME, widget );\n\t\t}\n\n\t\tthis._previouslySelected.clear();\n\t}\n}\n\n// Returns 'true' if provided key code represents one of the arrow keys.\n//\n// @param {Number} keyCode\n// @returns {Boolean}\nfunction isArrowKeyCode( keyCode ) {\n\treturn keyCode == keyCodes.arrowright ||\n\t\tkeyCode == keyCodes.arrowleft ||\n\t\tkeyCode == keyCodes.arrowup ||\n\t\tkeyCode == keyCodes.arrowdown;\n}\n\n// Returns 'true' if provided (DOM) key event data corresponds with the Ctrl+A keystroke.\n//\n// @param {module:engine/view/observer/keyobserver~KeyEventData} domEventData\n// @returns {Boolean}\nfunction isSelectAllKeyCode( domEventData ) {\n\treturn getCode( domEventData ) == selectAllKeystrokeCode;\n}\n\n// Returns `true` when element is a nested editable or is placed inside one.\n//\n// @param {module:engine/view/element~Element}\n// @returns {Boolean}\nfunction isInsideNestedEditable( element ) {\n\twhile ( element ) {\n\t\tif ( !!element && element.is( 'editableElement' ) && !element.is( 'rootElement' ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\telement = element.parent;\n\t}\n\n\treturn false;\n}\n\n// Checks whether the specified `element` is a child of the `parent` element.\n//\n// @param {module:engine/view/element~Element} element An element to check.\n// @param {module:engine/view/element~Element|null} parent A parent for the element.\n// @returns {Boolean}\nfunction isChild( element, parent ) {\n\tif ( !parent ) {\n\t\treturn false;\n\t}\n\n\treturn Array.from( element.getAncestors() ).includes( parent );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module widget/widgettoolbarrepository\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\nimport BalloonPanelView from '@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview';\nimport { isWidget } from './utils';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * Widget toolbar repository plugin. A central point for registering widget toolbars. This plugin handles the whole\n * toolbar rendering process and exposes a concise API.\n *\n * To add a toolbar for your widget use the {@link ~WidgetToolbarRepository#register `WidgetToolbarRepository#register()`} method.\n *\n * The following example comes from the {@link module:image/imagetoolbar~ImageToolbar} plugin:\n *\n * \t\tclass ImageToolbar extends Plugin {\n *\t\t\tstatic get requires() {\n *\t\t\t\treturn [ WidgetToolbarRepository ];\n *\t\t\t}\n *\n *\t\t\tafterInit() {\n *\t\t\t\tconst editor = this.editor;\n *\t\t\t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n *\n *\t\t\t\twidgetToolbarRepository.register( 'image', {\n *\t\t\t\t\titems: editor.config.get( 'image.toolbar' ),\n *\t\t\t\t\tvisibleWhen: viewSelection => isImageWidgetSelected( viewSelection )\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n */\nexport default class WidgetToolbarRepository extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ContextualBalloon ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'WidgetToolbarRepository';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst balloonToolbar = editor.plugins.get( 'BalloonToolbar' );\n\n\t\t// Disables the default balloon toolbar for all widgets.\n\t\tif ( balloonToolbar ) {\n\t\t\tthis.listenTo( balloonToolbar, 'show', evt => {\n\t\t\t\tif ( isWidgetSelected( editor.editing.view.document.selection ) ) {\n\t\t\t\t\tevt.stop();\n\t\t\t\t}\n\t\t\t}, { priority: 'high' } );\n\t\t}\n\n\t\t/**\n\t\t * A map of toolbars.\n\t\t *\n\t\t * @protected\n\t\t * @member {Map.<string,Object>} #_toolbars\n\t\t */\n\t\tthis._toolbars = new Map();\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tthis._balloon = this.editor.plugins.get( 'ContextualBalloon' );\n\n\t\tthis.listenTo( editor.ui, 'update', () => {\n\t\t\tthis._updateToolbarsVisibility();\n\t\t} );\n\n\t\t// UI#update is not fired after focus is back in editor, we need to check if balloon panel should be visible.\n\t\tthis.listenTo( editor.ui.focusTracker, 'change:isFocused', () => {\n\t\t\tthis._updateToolbarsVisibility();\n\t\t}, { priority: 'low' } );\n\t}\n\n\t/**\n\t * Registers toolbar in the WidgetToolbarRepository. It renders it in the `ContextualBalloon` based on the value of the invoked\n\t * `visibleWhen` function. Toolbar items are gathered from `items` array.\n\t * The balloon's CSS class is by default `ck-toolbar-container` and may be override with the `balloonClassName` option.\n\t *\n\t * Note: This method should be called in the {@link module:core/plugin~PluginInterface#afterInit `Plugin#afterInit()`}\n\t * callback (or later) to make sure that the given toolbar items were already registered by other plugins.\n\t *\n\t * @param {String} toolbarId An id for the toolbar. Used to\n\t * @param {Object} options\n\t * @param {Array.<String>} options.items Array of toolbar items.\n\t * @param {Function} options.visibleWhen Callback which specifies when the toolbar should be visible for the widget.\n\t * @param {String} [options.balloonClassName='ck-toolbar-container'] CSS class for the widget balloon.\n\t */\n\tregister( toolbarId, { items, visibleWhen, balloonClassName = 'ck-toolbar-container' } ) {\n\t\tconst editor = this.editor;\n\t\tconst toolbarView = new ToolbarView();\n\n\t\tif ( this._toolbars.has( toolbarId ) ) {\n\t\t\t/**\n\t\t\t * Toolbar with the given id was already added.\n\t\t\t *\n\t\t\t * @error widget-toolbar-duplicated\n\t\t\t * @param toolbarId Toolbar id.\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'widget-toolbar-duplicated: Toolbar with the given id was already added.', { toolbarId } );\n\t\t}\n\n\t\ttoolbarView.fillFromConfig( items, editor.ui.componentFactory );\n\n\t\tthis._toolbars.set( toolbarId, {\n\t\t\tview: toolbarView,\n\t\t\tvisibleWhen,\n\t\t\tballoonClassName,\n\t\t} );\n\t}\n\n\t/**\n\t * Iterates over stored toolbars and makes them visible or hidden.\n\t *\n\t * @private\n\t */\n\t_updateToolbarsVisibility() {\n\t\tfor ( const toolbar of this._toolbars.values() ) {\n\t\t\tif ( !this.editor.ui.focusTracker.isFocused || !toolbar.visibleWhen( this.editor.editing.view.document.selection ) ) {\n\t\t\t\tthis._hideToolbar( toolbar );\n\t\t\t} else {\n\t\t\t\tthis._showToolbar( toolbar );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Hides the given toolbar.\n\t *\n\t * @private\n\t * @param {Object} toolbar\n\t */\n\t_hideToolbar( toolbar ) {\n\t\tif ( !this._isToolbarVisible( toolbar ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._balloon.remove( toolbar.view );\n\t}\n\n\t/**\n\t * Shows up the toolbar if the toolbar is not visible and repositions the toolbar's balloon when toolbar's\n\t * view is the most top view in balloon stack.\n\t *\n\t * It might happen here that the toolbar's view is under another view. Then do nothing as the other toolbar view\n\t * should be still visible after the {@link module:core/editor/editorui~EditorUI#event:update}.\n\t *\n\t * @private\n\t * @param {Object} toolbar\n\t */\n\t_showToolbar( toolbar ) {\n\t\tif ( this._isToolbarVisible( toolbar ) ) {\n\t\t\trepositionContextualBalloon( this.editor );\n\t\t} else if ( !this._balloon.hasView( toolbar.view ) ) {\n\t\t\tthis._balloon.add( {\n\t\t\t\tview: toolbar.view,\n\t\t\t\tposition: getBalloonPositionData( this.editor ),\n\t\t\t\tballoonClassName: toolbar.balloonClassName,\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {Object} toolbar\n\t */\n\t_isToolbarVisible( toolbar ) {\n\t\treturn this._balloon.visibleView == toolbar.view;\n\t}\n}\n\nfunction repositionContextualBalloon( editor ) {\n\tconst balloon = editor.plugins.get( 'ContextualBalloon' );\n\tconst position = getBalloonPositionData( editor );\n\n\tballoon.updatePosition( position );\n}\n\nfunction getBalloonPositionData( editor ) {\n\tconst editingView = editor.editing.view;\n\tconst defaultPositions = BalloonPanelView.defaultPositions;\n\tconst widget = getParentWidget( editingView.document.selection );\n\n\treturn {\n\t\ttarget: editingView.domConverter.viewToDom( widget ),\n\t\tpositions: [\n\t\t\tdefaultPositions.northArrowSouth,\n\t\t\tdefaultPositions.northArrowSouthWest,\n\t\t\tdefaultPositions.northArrowSouthEast,\n\t\t\tdefaultPositions.southArrowNorth,\n\t\t\tdefaultPositions.southArrowNorthWest,\n\t\t\tdefaultPositions.southArrowNorthEast\n\t\t]\n\t};\n}\n\nfunction getParentWidget( selection ) {\n\tconst selectedElement = selection.getSelectedElement();\n\n\tif ( selectedElement && isWidget( selectedElement ) ) {\n\t\treturn selectedElement;\n\t}\n\n\tconst position = selection.getFirstPosition();\n\tlet parent = position.parent;\n\n\twhile ( parent ) {\n\t\tif ( parent.is( 'element' ) && isWidget( parent ) ) {\n\t\t\treturn parent;\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n}\n\nfunction isWidgetSelected( selection ) {\n\tconst viewElement = selection.getSelectedElement();\n\n\treturn !!( viewElement && isWidget( viewElement ) );\n}\n","/**\n * @module template/utils/elementinfo\n */\n\n/**\n * Template info object.\n *\n * Used by the template engine to store and retrieve information on different template elements.\n */\nexport default class ElementInfo {\n\t/**\n\t * Create a new template element.\n\t *\n\t * @param {Element} node - A HTML node.\n\t * @param {ElementInfo} parent - An optional parent element.\n\t */\n\tconstructor( node, parent = null ) {\n\t\tthis._node = node;\n\t\tthis._parent = parent;\n\t\tthis._children = [];\n\t\tthis._label = node.getAttribute( 'ck-label' );\n\t\tthis._icon = node.getAttribute( 'ck-icon' ) || 'configurator';\n\n\t\tif ( parent ) {\n\t\t\tparent.addChild( this );\n\t\t}\n\n\t\t// All attributes that are not prefixed with 'ck-' and are not the class attribute\n\t\t// are considered template attributes and will appear in editor and data representations.\n\t\tthis._attributes = Array.from( node.attributes )\n\t\t\t.filter( attr => !attr.name.startsWith( 'ck-' ) )\n\t\t\t.filter( attr => attr.name !== 'class' )\n\t\t\t.map( attr => ( { [ attr.name ]: attr.value } ) )\n\t\t\t.reduce( ( acc, val ) => Object.assign( acc, val ), {} );\n\n\t\t// All attributes that are prefixed with 'ck-' are considered template configuration\n\t\t// and will not be cast down to data and editor representations.\n\t\tthis._configuration = Array.from( node.attributes )\n\t\t\t.filter( attr => attr.name.startsWith( 'ck-' ) )\n\t\t\t.map( attr => ( { [ attr.name.substr( 3 ) ]: attr.value } ) )\n\t\t\t.reduce( ( acc, val ) => Object.assign( acc, val ), {} );\n\n\t\t// Element index for automatic child element naming.\n\t\tconst index = node.parentNode ?\n\t\t\tArray.prototype.indexOf.call( node.parentNode.childNodes, node ) :\n\t\t\t'';\n\n\t\t// If there is a 'ck-name' attribute, use it, or default to `childN`.\n\t\tconst name = node.getAttribute( 'ck-name' ) || `child${ index }`;\n\n\t\t// Prefix element names with the parent name, and in the root case with \"ck_\".\n\t\tthis._name = parent ?\n\t\t\t`${ parent.name }__${ name }` :\n\t\t\t`ck__${ name }`;\n\n\t\tconst classAttribute = node.getAttribute( 'class' );\n\t\tthis._classes = classAttribute ? classAttribute.split( ' ' ).sort() : [];\n\n\t\t// Calculate the possible conversions for an element.\n\t\tthis._conversions = this._configuration.conversions ?\n\t\t\tthis._configuration.conversions.split( ' ' ) :\n\t\t\t[];\n\n\t\tthis._contains = this._configuration.contains ?\n\t\t\tthis._configuration.contains.split( ' ' ).map( el => el ) :\n\t\t\t[];\n\t}\n\n\t/**\n\t * Register a child element.\n\t *\n\t * Used by the registration process to build up the template element tree.\n\t *\n\t * @param {module:template/utils/elementinfo~ElementInfo} child\n\t */\n\taddChild( child ) {\n\t\tthis._children.push( child );\n\t}\n\n\t/**\n\t * Check if a given template element matches a view element.\n\t *\n\t * To match a view element, the view has to have the same tagname as well as all classes of the template element.\n\t *\n\t * @param {module:engine/view/element~Element} viewElement\n\t * @returns {boolean}\n\t */\n\tmatches( viewElement ) {\n\t\treturn viewElement &&\n\t\t\t// Match the tag name.\n\t\t\t// viewElement.name === this._node.tagName &&\n\t\t\t// Match all classes.\n\t\t\tthis.classes.join( ' ' ) === Array.from( viewElement.getClassNames() ).sort().join( ' ' ) &&\n\t\t\t// If there is a parent, match the parent.\n\t\t\t// TODO: Properly handle these exclusions. Register conflict elements as real elements? Handle it within\n\t\t\t//       the text element?\n\t\t\t( !this.parent || viewElement.parent.name === 'ck-conflict-option' ||\n\t\t\t\tviewElement.parent.name === 'ck-conflict-media-option' || this.parent.matches( viewElement.parent ) );\n\t}\n\n\t/**\n\t * Retrieve the human readable name for this element.\n\t *\n\t * @returns {String}\n\t */\n\tget label() {\n\t\treturn this._label;\n\t}\n\n\t/**\n\t * Retrieve the human readable name for this element.\n\t *\n\t * @returns {String}\n\t */\n\tget icon() {\n\t\treturn this._icon;\n\t}\n\n\t/**\n\t * Retrieve the dom elements inner text.\n\t *\n\t * @returns {Element}\n\t */\n\tget text() {\n\t\treturn this._node.textContent;\n\t}\n\n\t/**\n\t * The class attribute.\n\t *\n\t * @returns {String[]}\n\t */\n\tget classes() {\n\t\treturn this._classes;\n\t}\n\n\t/**\n\t * The template elements\n\t * @returns {string}\n\t */\n\tget tagName() {\n\t\treturn this._node.tagName;\n\t}\n\n\t/**\n\t * Check if this element is the root of a template object.\n\t *\n\t * @returns {boolean}\n\t */\n\tget isTemplateRoot() {\n\t\treturn !this._parent;\n\t}\n\n\t/**\n\t * The element type. Defaults to \"element\".\n\t *\n\t * @returns {string}\n\t */\n\tget type() {\n\t\treturn this._configuration.type || 'element';\n\t}\n\n\t/**\n\t * The parent element.\n\t *\n\t * @returns {module:template/utils/elementinfo~ElementInfo}\n\t */\n\tget parent() {\n\t\treturn this._parent;\n\t}\n\n\t/**\n\t * The list of child elements.\n\t *\n\t * @returns {module:template/utils/elementinfo~ElementInfo}\n\t */\n\tget children() {\n\t\treturn this._children;\n\t}\n\n\t/**\n\t * The registered schema name.\n\t *\n\t * @returns {string}\n\t */\n\tget name() {\n\t\treturn this._name;\n\t}\n\n\t/**\n\t * Configuration value map.\n\t *\n\t * @returns {Object}\n\t */\n\tget configuration() {\n\t\treturn this._configuration;\n\t}\n\n\t/**\n\t * Attribute value map.\n\t *\n\t * @returns {Object}\n\t */\n\tget attributes() {\n\t\treturn this._attributes;\n\t}\n\n\t/**\n\t * Get possible conversions for a given element.\n\t *\n\t * @returns {String[]}\n\t */\n\tget conversions() {\n\t\treturn this._conversions;\n\t}\n\n\t/**\n\t * Retrieve the list of elements this element can contain.\n\t *\n\t * @returns {String[]}\n\t */\n\tget contains() {\n\t\treturn this._contains;\n\t}\n}\n","/**\n * @module template/commands/inserttemplatecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findOptimalInsertionPosition } from '@ckeditor/ckeditor5-widget/src/utils';\n\n/**\n * Command for inserting a template into the document.\n *\n * Automatically selects the next appropriate position.\n */\nexport default class InsertTemplateCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\t// Enable the dropdown only if there is a applicable parent.\n\t\tthis.isEnabled = !!getInsertTemplateParent( selection, model );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute( options ) {\n\t\tconst editor = this.editor;\n\t\teditor.model.change( writer => {\n\t\t\tconst model = editor.model;\n\t\t\tconst doc = model.document;\n\t\t\tconst templateElement = writer.createElement( options.value );\n\n\t\t\tconst insertAtSelection = findOptimalInsertionPosition( doc.selection, model );\n\t\t\tmodel.insertContent( templateElement, insertAtSelection );\n\n\t\t\tif ( templateElement.parent ) {\n\t\t\t\twriter.setSelection( templateElement, 'on' );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n/**\n * Find the proper parent to insert the template into.\n *\n * @param {module:engine/model/selection~Selection} selection\n * @param {module:engine/model/model~Model} model\n * @returns {module:engine/model/element~Element}\n */\nfunction getInsertTemplateParent( selection, model ) {\n\tconst insertAt = findOptimalInsertionPosition( selection, model );\n\n\tlet parent = insertAt.parent;\n\n\tif ( !parent.is( '$root' ) ) {\n\t\tparent = parent.parent;\n\t}\n\n\treturn parent;\n}\n","/**\n * @module template/utils/conversion\n */\n\n/**\n * Generate a downcast converter for selected template element types.\n *\n * Configuration consists of a \"types\" and a \"view\" property, whereas the view is a builder callback.\n *\n *     downcastTemplateElement( this.editor, {\n *         types: [ \"element\" ],\n *         view: ( templateElement, modelElement, viewWriter ) => {\n *             return writer.createContainerElement( ... );\n *         }\n *     } );\n *\n * @param {module:core/editor/editor~Editor} editor\n * @param {Object} config\n */\nexport function downcastTemplateElement( editor, config ) {\n\treturn editor.plugins.get( 'TemplateEditing' ).downcastTemplateElement( config );\n}\n\n/**\n * Generate an upcast converter for selected template element types.\n *\n * Configuration consists of a \"types\" and a \"model\" property, whereas the model is a builder callback.\n *\n *     downcastTemplateElement( this.editor, {\n *         types: [ \"element\" ],\n *         model: ( templateElement, viewElement, modelWriter ) => {\n *             return writer.createElement( ... );\n *         }\n *     } );\n *\n * @param {module:core/editor/editor~Editor} editor\n * @param {Object} config\n */\nexport function upcastTemplateElement( editor, config ) {\n\treturn editor.plugins.get( 'TemplateEditing' ).upcastTemplateElement( config );\n}\n\n/**\n * Generate a map of all template attributes to be downcasted.\n *\n * @param {module:template/utils/elementinfo~ElementInfo} templateElement\n * @param {module:engine/model/element~Element} modelElement\n *\n * @returns {Object}\n */\nexport function getModelAttributes( templateElement, modelElement ) {\n\treturn Object.keys( templateElement.attributes )\n\t\t.filter( attr => !!modelElement.getAttribute( attr ) )\n\t\t.map( attr => ( { [ attr ]: modelElement.getAttribute( attr ) } ) )\n\t\t.concat( [ { class: templateElement.classes.join( ' ' ) } ] )\n\t\t.reduce( ( acc, val ) => Object.assign( acc, val ), {} );\n}\n\n/**\n * Generate a map of all template attributes to be upcasted.\n *\n * @param {module:template/utils/elementinfo~ElementInfo} templateElement\n * @param {module:engine/view/element~Element} viewElement\n *\n * @returns {Object}\n */\nexport function getViewAttributes( templateElement, viewElement ) {\n\treturn Object.keys( templateElement.attributes )\n\t\t.map( key => ( { [ key ]: viewElement.getAttribute( key ) } ) )\n\t\t.filter( val => Object.values( val )[ 0 ] !== undefined )\n\t\t.reduce( ( acc, val ) => Object.assign( acc, val ), {} );\n}\n","/**\n * @module template/utils/integrity\n */\n\n/**\n * Recursively check and fix template element integrity.\n *\n * Will add missing, remove unregistered and reorder shuffled child elements to maintain the\n * same structure as the template definition.\n *\n * @param {module:template/utils/elementinfo~ElementInfo} templateElement\n * @param {module:engine/model/element~Element} item\n * @param {module:engine/model/writer~Writer} writer\n *\n * @returns {boolean} - The list of inserted elements.\n */\nexport function postfixTemplateElement( templateElement, item, writer ) {\n\tlet changed = false;\n\n\t// Build a list of \"seats\" for each child.\n\tconst childSeats = templateElement.children.map( child => ( { [ child.name ]: false } ) )\n\t\t.reduce( ( acc, val ) => Object.assign( acc, val ), {} );\n\n\t// Build the list of matching elements for each seat.\n\tconst childOptions = templateElement.children\n\t\t.map( child => ( { [ child.name ]: child.conversions.map( name => `ck__${ name }` ) } ) )\n\t\t.reduce( ( acc, val ) => Object.assign( acc, val ), {} );\n\n\t// Iterate through existing children, check if they apply to a seat and in case seat them there.\n\tfor ( const child of item.getChildren() ) {\n\t\t// Check for a direct name match.\n\t\tif ( childSeats.hasOwnProperty( child.name ) && !childSeats[ child.name ] ) {\n\t\t\tchildSeats[ child.name ] = child;\n\t\t}\n\n\t\t// Check for a conflict match.\n\t\tconst conflictSuffix = '__conflict';\n\t\tif ( child.name && child.name.substr( child.name.length - conflictSuffix.length ) === conflictSuffix ) {\n\t\t\tconst name = child.name.substr( 0, child.name.length - conflictSuffix.length );\n\t\t\tif ( childSeats.hasOwnProperty( name ) && !childSeats[ name ] ) {\n\t\t\t\tchildSeats[ name ] = child;\n\t\t\t}\n\t\t}\n\n\t\t// Check for an indirect name match (e.g. allow placeholder in element spots).\n\t\tfor ( const name of Object.keys( childSeats ) ) {\n\t\t\tif ( childOptions[ name ].includes( child.name ) ) {\n\t\t\t\tchildSeats[ name ] = child;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Re-insert in order of their seats. This fixes wrong element order, unknown elements and adds missing ones.\n\tfor ( const name of Object.keys( childSeats ) ) {\n\t\tif ( childSeats[ name ] ) {\n\t\t\twriter.insert( childSeats[ name ], item, 'end' );\n\t\t}\n\t\telse {\n\t\t\tconst el = writer.createElement( name );\n\t\t\twriter.insert( el, item, 'end' );\n\t\t\tchanged = true;\n\t\t}\n\t}\n\n\treturn changed;\n}\n","/**\n * @module template/commands/templatecommandbase\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\n/**\n * Base class for template commands. Allows to find the currently selected templates, containers or placeholders.\n */\nexport default class TemplateCommandBase extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\t\tthis.set( 'currentTemplateLabel', null );\n\t\tthis.set( 'isApplicable', false );\n\t\tthis._currentElement = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.updateCurrentlySelectedElement();\n\t\tthis.isEnabled = !!this._currentElement;\n\t\tthis.isApplicable = this.isEnabled;\n\t\tif ( this._currentElement ) {\n\t\t\tthis.currentTemplateLabel = this.editor.templates.getElementInfo( this._currentElement.name ).label;\n\t\t}\n\t}\n\n\t/**\n\t * Retrieve the currently relevant element for this command.\n\t */\n\tget currentElement() {\n\t\treturn this._currentElement;\n\t}\n\n\t/**\n\t * Check if a given template and model element are applicable for this command.\n\t *\n\t * @param {module:template/utils/elementinfo~ElementInfo} templateElement\n\t * @param {module:engine/model/element~Element} modelElement\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tmatchElement( templateElement, modelElement ) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Find the first currently selected element matching given conditions.\n\t *\n\t * Will start from the current selection/anchor and move up in the document tree, to check if one of the parents\n\t * matches the condition.\n\t *\n\t */\n\tupdateCurrentlySelectedElement() {\n\t\tconst result = this.editor.templates.findSelectedTemplateElement( ( info, element ) => this.matchElement( info, element ) );\n\t\tthis._currentElement = result.element;\n\t\tthis._currentElementInfo = result.info;\n\t}\n}\n","/**\n * @module template/commands/removetemplatecommand\n */\n\nimport TemplateCommandBase from './templatecommandbase';\n\n/**\n * Command for removing/clearing a template.\n *\n * Will remove the template from containers and remove and re-add (clear) an element in fixed positions.\n */\nexport default class RemoveTemplateCommand extends TemplateCommandBase {\n\t/**\n\t * @inheritDoc\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tmatchElement( templateElement, modelElement ) {\n\t\treturn templateElement.isTemplateRoot;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst editor = this.editor;\n\t\teditor.model.change( writer => {\n\t\t\tconst element = this.currentElement;\n\t\t\twriter.setSelection( element.previousSibling || element.nextSibling, 'on' );\n\t\t\twriter.remove( element );\n\t\t} );\n\t}\n}\n","/**\n * @module template/templateediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Widget from '@ckeditor/ckeditor5-widget/src/widget';\nimport { insertElement } from '@ckeditor/ckeditor5-engine/src/conversion/downcast-converters';\nimport { toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\nimport { upcastElementToElement } from '@ckeditor/ckeditor5-engine/src/conversion/upcast-converters';\n\nimport ElementInfo from './utils/elementinfo';\nimport InsertTemplateCommand from './commands/inserttemplatecommand';\nimport {\n\tdowncastTemplateElement,\n\tgetModelAttributes,\n\tgetViewAttributes,\n\tupcastTemplateElement\n} from './utils/conversion';\nimport { postfixTemplateElement } from './utils/integrity';\nimport RemoveTemplateCommand from './commands/removetemplatecommand';\n\n/**\n * The template engine feature.\n *\n * For configuration examples, refer to the {@link module:template/templateediting template documentation}.\n */\nexport default class TemplateEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Widget ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TemplateEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\t\teditor.config.define( 'templates', {} );\n\n\t\t/**\n\t\t * A map with all registered {@link module:template/utils/elementinfo~ElementInfo ElementInfo} objects.\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._elements = {};\n\n\t\t/**\n\t\t * A mapping from element names to element types.\n\t\t *\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._typeMap = {};\n\n\t\t/**\n\t\t * Per element postfixer registry.\n\t\t *\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._postfixers = {};\n\t}\n\n\t/**\n\t * Retrieve the template element info object for a given schema element.\n\t *\n\t * @param {String} name\n\t * @returns {module:template/utils/elementinfo~ElementInfo}\n\t */\n\tgetElementInfo( name ) {\n\t\treturn this._elements[ name ];\n\t}\n\n\t/**\n\t * Find elements matching given criteria.\n\t *\n\t * @param {Function} matcher\n\t * @return {module:template/utils/elementinfo~ElementInfo[]}\n\t */\n\tfindElementInfo( matcher = null ) {\n\t\treturn matcher ? Object.values( this._elements ).filter( matcher ) : Object.values( this._elements );\n\t}\n\n\t/**\n\t * Retrieve all tempate elements with a given type.\n\t *\n\t * @param {String} type\n\t * @return {module:template/utils/elementinfo~ElementInfo[]}\n\t */\n\tgetElementsByType( type ) {\n\t\treturn Object.values( this._elements ).filter( el => el.type === type );\n\t}\n\n\t/**\n\t * Retrieve element and info for the first parent element matching given conditions.\n\t *\n\t * @param {Function} matcher\n\t * @returns {{element: (module:engine/view/element~Element), info: module:template/utils/elementinfo~ElementInfo}}\n\t */\n\tfindSelectedTemplateElement( matcher ) {\n\t\tlet element = this.editor.model.document.selection.getSelectedElement() || this.editor.model.document.selection.anchor.parent;\n\t\twhile ( element ) {\n\t\t\tconst info = this.editor.templates.getElementInfo( element.name );\n\t\t\tif ( info && matcher( info, element ) ) {\n\t\t\t\treturn { element, info };\n\t\t\t}\n\t\t\telement = element.parent;\n\t\t}\n\t\treturn { element: null, info: null };\n\t}\n\n\t/**\n\t * Register a new postfixer\n\t *\n\t *     this.editor.templates.registerPostFixer(\n\t *         [ 'element', 'placeholder' ],\n\t *         ( templateElement, modelElement, modelWriter ) => {\n\t *             ...\n\t *         }\n\t *     );\n\t *\n\t * @param {String[]} types\n\t * @param {Function} callback\n\t */\n\tregisterPostFixer( types, callback ) {\n\t\tfor ( const type of types ) {\n\t\t\tif ( !this._postfixers[ type ] ) {\n\t\t\t\tthis._postfixers[ type ] = [];\n\t\t\t}\n\t\t\tthis._postfixers[ type ].push( callback );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tthis.editor.templates = this;\n\n\t\t// Add a command for inserting a template element.\n\t\tthis.editor.commands.add( 'insertTemplate', new InsertTemplateCommand( this.editor ) );\n\n\t\t// Add a command for removing a template element.\n\t\tthis.editor.commands.add( 'removeTemplate', new RemoveTemplateCommand( this.editor ) );\n\n\t\tconst templates = this.editor.config.get( 'templates' );\n\n\t\t// Parse all template snippets and register them.\n\t\t// TODO: Allow pre-parsed snippets.\n\t\tObject.keys( templates ).forEach( name => {\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tconst parser = new DOMParser();\n\t\t\tconst dom = parser.parseFromString( templates[ name ].template, 'text/xml' ).documentElement;\n\t\t\tdom.setAttribute( 'ck-name', name );\n\t\t\tdom.setAttribute( 'ck-label', templates[ name ].label );\n\t\t\tdom.setAttribute( 'ck-icon', templates[ name ].icon || 'configurator' );\n\t\t\tthis.registerElement( dom );\n\t\t} );\n\n\t\t// Postfix elements to make sure a templates structure is always correct.\n\t\tthis.registerPostFixer( [ 'element' ], postfixTemplateElement );\n\n\t\t// Register one global postfixer that will postfix all template elements.\n\t\tthis.editor.model.document.registerPostFixer( writer => {\n\t\t\tfor ( const entry of this.editor.model.document.differ.getChanges() ) {\n\t\t\t\t// Run the postfixer on newly inserted elements and on parents of removed elements.\n\t\t\t\tif ( [ 'insert', 'remove' ].includes( entry.type ) ) {\n\t\t\t\t\tconst item = entry.type === 'insert' ? entry.position.nodeAfter : entry.position.getAncestors().pop();\n\t\t\t\t\tif ( item ) {\n\t\t\t\t\t\tif ( this._postfixElement( item, writer ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Allow `$text` within all elements.\n\t\t// Required until https://github.com/ckeditor/ckeditor5-engine/issues/1593 is fixed.\n\t\t// TODO: Remove this once the issue is resolved.\n\t\tthis.editor.model.schema.extend( '$text', {\n\t\t\tallowIn: Object.keys( this._elements ),\n\t\t} );\n\n\t\t// Default upcast conversion for template elements.\n\t\tthis.editor.conversion.for( 'upcast' ).add( upcastTemplateElement( this.editor, {\n\t\t\ttypes: this._elementTypes,\n\t\t\tmodel: ( templateElement, viewElement, modelWriter ) => {\n\t\t\t\treturn modelWriter.createElement(\n\t\t\t\t\ttemplateElement.name,\n\t\t\t\t\tgetViewAttributes( templateElement, viewElement )\n\t\t\t\t);\n\t\t\t},\n\t\t} ), { priority: 'low' } );\n\n\t\t// Default data downcast conversions for template elements.\n\t\tthis.editor.conversion.for( 'dataDowncast' ).add( downcastTemplateElement( this.editor, {\n\t\t\ttypes: this._elementTypes,\n\t\t\tview: ( templateElement, modelElement, viewWriter ) => {\n\t\t\t\treturn viewWriter.createContainerElement(\n\t\t\t\t\ttemplateElement.tagName,\n\t\t\t\t\tgetModelAttributes( templateElement, modelElement )\n\t\t\t\t);\n\t\t\t}\n\t\t} ), { priority: 'low ' } );\n\n\t\tconst templateManager = this.editor.templates;\n\t\t// Default editing downcast conversions for template container elements without functionality.\n\t\tthis.editor.conversion.for( 'editingDowncast' ).add( downcastTemplateElement( this.editor, {\n\t\t\ttypes: [ 'element' ],\n\t\t\tview: ( templateElement, modelElement, viewWriter ) => {\n\t\t\t\tconst parentTemplate = modelElement.parent && templateManager.getElementInfo( modelElement.parent.name );\n\t\t\t\tconst el = viewWriter.createContainerElement(\n\t\t\t\t\t(\n\t\t\t\t\t\t// TODO: Introduce a component negotiator? Or somehow enable the \"is\" attribute for web components.\n\t\t\t\t\t\t( parentTemplate && [ 'container', 'gallery', 'tabs' ].includes( parentTemplate.type ) ) ||\n\t\t\t\t\t\tmodelElement.hasAttribute( 'added' ) || modelElement.hasAttribute( 'removed' )\n\t\t\t\t\t) ? 'ck-container-item' : templateElement.tagName,\n\t\t\t\t\tgetModelAttributes( templateElement, modelElement )\n\t\t\t\t);\n\t\t\t\treturn templateElement.parent ? el : toWidget( el, viewWriter );\n\t\t\t}\n\t\t} ), { priority: 'low ' } );\n\t}\n\n\t_postfixElement( item, writer ) {\n\t\tconst templateElement = this.getElementInfo( item.name );\n\t\tlet changed = false;\n\t\tif ( templateElement && this._postfixers.hasOwnProperty( templateElement.type ) ) {\n\t\t\tfor ( const attr of Object.keys( templateElement.attributes ) ) {\n\t\t\t\tconst value = templateElement.attributes[ attr ];\n\n\t\t\t\tif ( value && !item.getAttribute( attr ) ) {\n\t\t\t\t\twriter.setAttribute( attr, value, item );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( const postfixer of this._postfixers[ templateElement.type ] ) {\n\t\t\t\tchanged = changed || postfixer( templateElement, item, writer );\n\t\t\t\tfor ( const child of item.getChildren() ) {\n\t\t\t\t\tthis._postfixElement( child, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn changed;\n\t}\n\n\t/**\n\t * Collect all element types that have been registered.\n\t *\n\t * @return {String[]}\n\t */\n\tget _elementTypes() {\n\t\treturn [ ... new Set( Object.values( this._elements ).map( el => el.type ) ) ];\n\t}\n\n\t/**\n\t * Generate a downcast handler for a specific element type.\n\t *\n\t * @see module:template/utils/conversion~downcastTemplateElement\n\t *\n\t * @param {Object} config\n\t * @returns {Function}\n\t */\n\tdowncastTemplateElement( config ) {\n\t\treturn dispatcher => {\n\t\t\tdispatcher.on( 'insert', insertElement( ( modelElement, viewWriter ) => {\n\t\t\t\tconst templateElement = this._elements[ modelElement.name ];\n\t\t\t\tif ( templateElement && config.types.includes( templateElement.type ) ) {\n\t\t\t\t\treturn config.view( templateElement, modelElement, viewWriter );\n\t\t\t\t}\n\t\t\t} ) );\n\t\t};\n\t}\n\n\t/**\n\t * Generate a downcast handler for a specific element type.\n\t *\n\t * @see module:template/utils/conversion~upcastTemplateElement\n\t *\n\t * @param {Object} config\n\t * @returns {Function}\n\t */\n\tupcastTemplateElement( config ) {\n\t\treturn upcastElementToElement( {\n\t\t\tview: viewElement => !!this._findMatchingTemplateElement( viewElement, config.types ) && { name: true },\n\t\t\tmodel: ( viewElement, modelWriter ) => config.model(\n\t\t\t\tthis._findMatchingTemplateElement( viewElement, config.types ),\n\t\t\t\tviewElement,\n\t\t\t\tmodelWriter\n\t\t\t)\n\t\t} );\n\t}\n\n\t_findMatchingTemplateElement( viewElement, types ) {\n\t\treturn Object.values( this._elements ).filter( el =>\n\t\t\tel.matches( viewElement ) &&\n\t\t\ttypes.includes( el.type ) &&\n\t\t\t// TODO: Exclude text conflict elements, so its not consumed by the wrong converter.\n\t\t\t![ 'ck-conflict-text', 'ck-conflict-option', 'ck-conflict-media', 'ck-conflict-media-option' ].includes( viewElement.name )\n\t\t).pop();\n\t}\n\n\t/**\n\t * Register a dom element as an editor element.\n\t *\n\t * @param {Element} dom\n\t * @param {ElementInfo} parent\n\t */\n\tregisterElement( dom, parent = null ) {\n\t\tconst element = new ElementInfo( dom, parent );\n\t\tthis._elements[ element.name ] = element;\n\t\tthis._typeMap[ element.type ] = element.name;\n\n\t\t// Register the element itself.\n\t\tthis.editor.model.schema.register( element.name, {\n\t\t\tisObject: !parent,\n\t\t\tisBlock: true,\n\t\t\t// If this is the root element of a template, allow it in root. Else allow it only in its parent.\n\t\t\tallowIn: parent ? parent.name : '$root',\n\t\t\t// Register all know attributes.\n\t\t\tallowAttributes: Object.keys( element.attributes ),\n\t\t} );\n\n\t\t// Register all child elements.\n\t\tArray.from( dom.childNodes ).filter( node => node.nodeType === 1 )\n\t\t\t.map( child => this.registerElement( child, element ) );\n\t}\n}\n","/**\n * @module template/mastertemplate\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport TemplateEditing from './templateediting';\n\n/**\n * Master template plugin.\n *\n * Allows to define a master template for the current document that will take control over the whole page layout.\n */\nexport default class MasterTemplate extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TemplateEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'MasterTemplate';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\t\teditor.config.define( 'masterTemplate', null );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t// If there is no master template configured, just bail out.\n\t\tif ( !this.editor.config.get( 'masterTemplate' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add the templates prefix.\n\t\tconst masterTemplate = 'ck__' + this.editor.config.get( 'masterTemplate' );\n\n\t\t// Child-check that ensures that nothing but the master template will ever end up at the document root.\n\t\tthis.editor.model.schema.addChildCheck( ( context, def ) => {\n\t\t\tif ( context.endsWith( '$root' ) && def.name !== masterTemplate ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\t// The postfixer will add an master template to empty documents.\n\t\tthis.editor.model.document.registerPostFixer( writer => this._ensureMasterTemplate( writer, masterTemplate ) );\n\t\t// It has to be called for new existing empty documents separately.\n\t\tthis.editor.on( 'dataReady', () => {\n\t\t\tthis.editor.model.enqueueChange( 'transparent', writer => this._ensureMasterTemplate( writer, masterTemplate ) );\n\t\t}, { priority: 'lowest' } );\n\t}\n\n\t/**\n\t * Adds the root template into each empty root element.\n\t *\n\t * @param {module:engine/model/writer~Writer} modelWriter - The element's writer.\n\t * @param {String} masterTemplate - The root template's id.\n\t *\n\t * @return {Boolean} - True if any changes were made.\n\t *\n\t * @private\n\t */\n\t_ensureMasterTemplate( modelWriter, masterTemplate ) {\n\t\tconst model = this.editor.model;\n\n\t\tfor ( const rootName of model.document.getRootNames() ) {\n\t\t\tconst root = model.document.getRoot( rootName );\n\n\t\t\tif ( root.rootName === '$graveyard' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( root.isEmpty ) {\n\t\t\t\tmodelWriter.appendElement( masterTemplate, root );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @module template/ui/templateui\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport { addListToDropdown, createDropdown } from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\n\nimport TemplateEditing from '../templateediting';\n\n/**\n * Template user interface features.\n *\n * Provides a toolbar element that allows to insert templates into the document.\n *\n *     toolbar: { 'heading', 'template' '... }\n */\nexport default class TemplateUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TemplateEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t// Build the `template` dropdown element.\n\t\tthis.editor.ui.componentFactory.add( 'template', locale => {\n\t\t\tconst itemDefinitions = new Collection();\n\t\t\tconst templates = this.editor.config.get( 'templates' );\n\n\t\t\t// Generate a definition for each registered template.\n\t\t\tfor ( const template of Object.keys( templates ) ) {\n\t\t\t\titemDefinitions.add( {\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: new Model( {\n\t\t\t\t\t\tlabel: templates[ template ].label,\n\t\t\t\t\t\twithText: true,\n\t\t\t\t\t\tcommandName: 'insertTemplate',\n\t\t\t\t\t\tcommandValue: 'ck__' + template,\n\t\t\t\t\t} )\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tconst dropdownView = createDropdown( locale );\n\t\t\taddListToDropdown( dropdownView, itemDefinitions );\n\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\tlabel: this.editor.t( 'Choose template ...' ),\n\t\t\t\tisOn: false,\n\t\t\t\twithText: true,\n\t\t\t\ttooltip: this.editor.t( 'Insert a template.' ),\n\t\t\t} );\n\n\t\t\t// Only enable the dropdown if a template element is applicable at this point.\n\t\t\tdropdownView.bind( 'isEnabled' ).to( this.editor.commands.get( 'insertTemplate' ), 'isEnabled' );\n\n\t\t\t// Listen to dropdown selection, execute the element command and set focus back to the editing view.\n\t\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\t\tthis.editor.execute( evt.source.commandName, { value: evt.source.commandValue } );\n\t\t\t\tthis.editor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/placeholder\n */\n\nimport '../../theme/placeholder.css';\n\n// Each document stores information about its placeholder elements and check functions.\nconst documentPlaceholders = new WeakMap();\n\n/**\n * Attaches placeholder to provided element and updates it's visibility. To change placeholder simply call this method\n * once again with new parameters.\n *\n * @param {module:engine/view/view~View} view View controller.\n * @param {module:engine/view/element~Element} element Element to attach placeholder to.\n * @param {String} placeholderText Placeholder text to use.\n * @param {Function} [checkFunction] If provided it will be called before checking if placeholder should be displayed.\n * If function returns `false` placeholder will not be showed.\n */\nexport function attachPlaceholder( view, element, placeholderText, checkFunction ) {\n\tconst document = view.document;\n\n\t// Single listener per document.\n\tif ( !documentPlaceholders.has( document ) ) {\n\t\tdocumentPlaceholders.set( document, new Map() );\n\n\t\t// Create view post-fixer that will add placeholder where needed.\n\t\tdocument.registerPostFixer( writer => updateAllPlaceholders( document, writer ) );\n\t}\n\n\t// Store information about element with placeholder.\n\tdocumentPlaceholders.get( document ).set( element, {\n\t\tplaceholderText,\n\t\tcheckFunction\n\t} );\n\n\t// Update view right away.\n\tview.render();\n}\n\n/**\n * Removes placeholder functionality from given element.\n *\n * @param {module:engine/view/view~View} view\n * @param {module:engine/view/element~Element} element\n */\nexport function detachPlaceholder( view, element ) {\n\tconst doc = element.document;\n\n\tview.change( writer => {\n\t\tif ( documentPlaceholders.has( doc ) ) {\n\t\t\tdocumentPlaceholders.get( doc ).delete( element );\n\t\t}\n\n\t\twriter.removeClass( 'ck-placeholder', element );\n\t\twriter.removeAttribute( 'data-placeholder', element );\n\t} );\n}\n\n// Updates all placeholders of given document.\n//\n// @private\n// @param {module:engine/view/document~Document} view\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\nfunction updateAllPlaceholders( document, writer ) {\n\tconst placeholders = documentPlaceholders.get( document );\n\tlet changed = false;\n\n\tfor ( const [ element, info ] of placeholders ) {\n\t\tif ( updateSinglePlaceholder( writer, element, info ) ) {\n\t\t\tchanged = true;\n\t\t}\n\t}\n\n\treturn changed;\n}\n\n// Updates placeholder class of given element.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:engine/view/element~Element} element\n// @param {Object} info\nfunction updateSinglePlaceholder( writer, element, info ) {\n\tconst document = element.document;\n\tconst text = info.placeholderText;\n\tlet changed = false;\n\n\t// Element was removed from document.\n\tif ( !document ) {\n\t\treturn false;\n\t}\n\n\t// Update data attribute if needed.\n\tif ( element.getAttribute( 'data-placeholder' ) !== text ) {\n\t\twriter.setAttribute( 'data-placeholder', text, element );\n\t\tchanged = true;\n\t}\n\n\tconst viewSelection = document.selection;\n\tconst anchor = viewSelection.anchor;\n\tconst checkFunction = info.checkFunction;\n\n\t// If checkFunction is provided and returns false - remove placeholder.\n\tif ( checkFunction && !checkFunction() ) {\n\t\tif ( element.hasClass( 'ck-placeholder' ) ) {\n\t\t\twriter.removeClass( 'ck-placeholder', element );\n\t\t\tchanged = true;\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\t// Element is empty for placeholder purposes when it has no children or only ui elements.\n\t// This check is taken from `view.ContainerElement#getFillerOffset`.\n\tconst isEmptyish = !Array.from( element.getChildren() ).some( element => !element.is( 'uiElement' ) );\n\n\t// If element is empty and editor is blurred.\n\tif ( !document.isFocused && isEmptyish ) {\n\t\tif ( !element.hasClass( 'ck-placeholder' ) ) {\n\t\t\twriter.addClass( 'ck-placeholder', element );\n\t\t\tchanged = true;\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\t// It there are no child elements and selection is not placed inside element.\n\tif ( isEmptyish && anchor && anchor.parent !== element ) {\n\t\tif ( !element.hasClass( 'ck-placeholder' ) ) {\n\t\t\twriter.addClass( 'ck-placeholder', element );\n\t\t\tchanged = true;\n\t\t}\n\t} else {\n\t\tif ( element.hasClass( 'ck-placeholder' ) ) {\n\t\t\twriter.removeClass( 'ck-placeholder', element );\n\t\t\tchanged = true;\n\t\t}\n\t}\n\n\treturn changed;\n}\n","/**\n * @module templates/elements/textelement\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { toWidget, toWidgetEditable } from '@ckeditor/ckeditor5-widget/src/utils';\nimport { attachPlaceholder } from '@ckeditor/ckeditor5-engine/src/view/placeholder';\n\nimport TemplateEditing from '../templateediting';\nimport { downcastTemplateElement, getModelAttributes } from '../utils/conversion';\n\n/**\n * Element names that are considered multiline containers by default.\n *\n * @type {string[]}\n */\nexport const containerElements = [\n\t'div',\n\t'li',\n\t'blockquote',\n\t'td',\n];\n\n/**\n * Check if an element is a container and therefore allows block elements inside.\n *\n * By default html elements that allow blocks are considered containers. This can be\n * overridden with the `ck-multiline` attribute.\n *\n * @param {module:template/utils/elementinfo~ElementInfo} templateElement\n * @returns {boolean}\n */\nfunction isContainerElement( templateElement ) {\n\treturn templateElement.configuration.multiline !== 'false' && (\n\t\tcontainerElements.includes( templateElement.tagName ) ||\n\t\ttemplateElement.configuration.multiline === 'true'\n\t);\n}\n\nexport default class TextElement extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TemplateEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst textElements = this.editor.templates.getElementsByType( 'text' );\n\n\t\t// If the current element is a container, allow bock elements inside it.\n\t\tthis.editor.model.schema.extend( '$block', {\n\t\t\tallowIn: textElements.filter( isContainerElement ).map( el => el.name ),\n\t\t} );\n\n\t\t// If the current element is not a container, only allow text.\n\t\tthis.editor.model.schema.extend( '$text', {\n\t\t\tallowIn: textElements.filter( el => !isContainerElement( el ) ).map( el => el.name ),\n\t\t} );\n\n\t\t// All container text elements inherit everything from root.\n\t\t// This also makes sure that all elements allowed in root are as well allowed here.\n\t\tfor ( const element of textElements ) {\n\t\t\tif ( isContainerElement( element ) ) {\n\t\t\t\tthis.editor.model.schema.extend( element.name, {\n\t\t\t\t\tinheritAllFrom: '$root',\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tif ( element.configuration.plain === 'true' ) {\n\t\t\t\tthis.editor.model.schema.addAttributeCheck( context => {\n\t\t\t\t\tif ( context.endsWith( `${ element.name } $text` ) ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\t// Text element editing downcast\n\t\tthis.editor.conversion.for( 'editingDowncast' ).add( downcastTemplateElement( this.editor, {\n\t\t\ttypes: [ 'text' ],\n\t\t\tview: ( templateElement, modelElement, viewWriter ) => {\n\t\t\t\t// TODO: Generalize this?\n\t\t\t\tif ( modelElement.parent.name === `${ modelElement.name }__conflict__option` ||\n\t\t\t\t\tmodelElement.parent.name === `${ modelElement.name }__media__conflict__option` ) {\n\t\t\t\t\treturn viewWriter.createContainerElement(\n\t\t\t\t\t\ttemplateElement.tagName,\n\t\t\t\t\t\tgetModelAttributes( templateElement, modelElement )\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst el = viewWriter.createEditableElement(\n\t\t\t\t\ttemplateElement.tagName,\n\t\t\t\t\tgetModelAttributes( templateElement, modelElement )\n\t\t\t\t);\n\n\t\t\t\tif ( templateElement.text ) {\n\t\t\t\t\tattachPlaceholder( this.editor.editing.view, el, templateElement.text );\n\t\t\t\t}\n\n\t\t\t\tconst widget = templateElement.parent ? el : toWidget( el, viewWriter );\n\n\t\t\t\treturn toWidgetEditable( widget, viewWriter );\n\t\t\t}\n\t\t} ), { priority: 'low ' } );\n\n\t\t// Add an empty paragraph if a container text element is empty.\n\t\tthis.editor.templates.registerPostFixer( [ 'text' ], ( templateElement, modelElement, modelWriter ) => {\n\t\t\tif (\n\t\t\t\tisContainerElement( templateElement ) &&\n\t\t\t\tmodelElement.childCount === 0 &&\n\t\t\t\tthis.editor.model.schema.checkChild( modelElement, 'paragraph' )\n\t\t\t) {\n\t\t\t\tconst paragraph = modelWriter.createElement( 'paragraph' );\n\t\t\t\tmodelWriter.insert( paragraph, modelElement, 'end' );\n\t\t\t\tif ( templateElement.text ) {\n\t\t\t\t\tmodelWriter.insert( modelWriter.createText( templateElement.text ), paragraph );\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @module template/elements/placeholder\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ViewPosition from '@ckeditor/ckeditor5-engine/src/view/position';\nimport { toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\n\nimport { downcastTemplateElement, getModelAttributes } from '../utils/conversion';\nimport TemplateEditing from '../templateediting';\n\nimport { eventType } from '@amazee/editor-components/components/editor/operations';\n\n/**\n * Allow to position placeholders in a document that can be filled with actual elements.\n */\nexport default class PlaceholderElement extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TemplateEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t// Placeholders should not appear in the result document, therefore they downcast to an empty string.\n\t\t// That's also the reason why they have no upcast.\n\t\tthis.editor.conversion.for( 'dataDowncast' ).add( downcastTemplateElement( this.editor, {\n\t\t\ttypes: [ 'placeholder' ],\n\t\t\tview: ( templateElement, modelElement, viewWriter ) => {\n\t\t\t\treturn viewWriter.createText( '' );\n\t\t\t},\n\t\t} ) );\n\n\t\t// Editing downcast creates a container element with a specialised ui element inside.\n\t\tthis.editor.conversion.for( 'editingDowncast' ).add( downcastTemplateElement( this.editor, {\n\t\t\ttypes: [ 'placeholder' ],\n\t\t\tview: ( templateElement, modelElement, viewWriter ) => {\n\t\t\t\tconst attributes = {\n\t\t\t\t\tclass: 'ck-placeholder-ui',\n\t\t\t\t\tsections: templateElement.conversions.join( ' ' ),\n\t\t\t\t};\n\t\t\t\tconst element = viewWriter.createUIElement( 'ck-placeholder', attributes );\n\t\t\t\tconst wrapper = viewWriter.createContainerElement( 'div', getModelAttributes( templateElement, modelElement ) );\n\t\t\t\tviewWriter.insert( new ViewPosition( wrapper, 0 ), element );\n\t\t\t\treturn toWidget( wrapper, viewWriter );\n\t\t\t},\n\t\t} ) );\n\n\t\t// Postfix elements to make sure a templates structure is always correct.\n\t\tthis.editor.templates.registerPostFixer( [ 'placeholder' ], ( templateElement, item, writer ) => {\n\t\t\tlet changed = false;\n\t\t\tif ( !templateElement.parent || templateElement.parent.type === 'element' ) {\n\t\t\t\tconst conversions = templateElement.configuration.conversions.split( ' ' );\n\t\t\t\tif ( conversions.length == 1 ) {\n\t\t\t\t\twriter.insertElement( `ck__${ conversions[ 0 ] }`, item, 'before' );\n\t\t\t\t\twriter.setSelection( item.previousSibling, 'on' );\n\t\t\t\t\twriter.remove( item );\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn changed;\n\t\t} );\n\n\t\t// Get all configured placeholder elements.\n\t\tconst placeholderElements = this.editor.plugins.get( 'TemplateEditing' ).getElementsByType( 'placeholder' );\n\n\t\t// All allowed elements need to be configured to be positionable in place of the placeholder.\n\t\tfor ( const templateElement of placeholderElements ) {\n\t\t\tfor ( const el of templateElement.conversions ) {\n\t\t\t\tthis.editor.model.schema.extend( `ck__${ el }`, {\n\t\t\t\t\tallowWhere: templateElement.name,\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @module template/elements/containerelement\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport { downcastTemplateElement, getModelAttributes } from '../utils/conversion';\nimport { toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\n\nimport TemplateEditing from '../templateediting';\nimport PlaceholderElement from './placeholderelement';\n\n/**\n * Allow an arbitrary list of elements of a given type.\n *\n * Automatically inserts placeholders between elements that allow injection of new children.\n */\nexport default class ContainerElement extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TemplateEditing, PlaceholderElement ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t// Get all configured placeholder elements.\n\t\tconst containerElements = this.editor.templates.getElementsByType( 'container' );\n\n\t\tfor ( const containerElement of containerElements ) {\n\t\t\t// Extend the schema so that the contained elements can be placed in the container.\n\t\t\tfor ( const el of containerElement.contains ) {\n\t\t\t\tthis.editor.model.schema.extend( `ck__${ el }`, {\n\t\t\t\t\tallowIn: containerElement.name,\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\tthis.editor.conversion.for( 'editingDowncast' ).add( downcastTemplateElement( this.editor, {\n\t\t\ttypes: [ 'container' ],\n\t\t\tview: ( templateElement, modelElement, viewWriter ) => {\n\t\t\t\tconst attributes = getModelAttributes( templateElement, modelElement );\n\t\t\t\tattributes.sections = templateElement.contains.join( ' ' );\n\t\t\t\tconst el = viewWriter.createContainerElement(\n\t\t\t\t\t'ck-container',\n\t\t\t\t\tattributes\n\t\t\t\t);\n\t\t\t\treturn templateElement.parent ? el : toWidget( el, viewWriter );\n\t\t\t}\n\t\t} ) );\n\t}\n}\n\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/inputtext/inputtextview\n */\n\nimport View from '../view';\nimport '../../theme/components/inputtext/inputtext.css';\n\n/**\n * The text input view class.\n *\n * @extends module:ui/view~View\n */\nexport default class InputTextView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The value of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #value\n\t\t */\n\t\tthis.set( 'value' );\n\n\t\t/**\n\t\t * The `id` attribute of the input (i.e. to pair with a `<label>` element).\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #id\n\t\t */\n\t\tthis.set( 'id' );\n\n\t\t/**\n\t\t * The `placeholder` attribute of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #placeholder\n\t\t */\n\t\tthis.set( 'placeholder' );\n\n\t\t/**\n\t\t * Controls whether the input view is in read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * Set to `true` when the field has some error. Usually controlled via\n\t\t * {@link module:ui/labeledinput/labeledinputview~LabeledInputView#errorText}.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #hasError\n\t\t */\n\t\tthis.set( 'hasError', false );\n\n\t\t/**\n\t\t * The `id` of the element describing this field, e.g. when it has\n\t\t * some error, it helps screen readers read the error text.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #ariaDesribedById\n\t\t */\n\t\tthis.set( 'ariaDesribedById' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'input',\n\t\t\tattributes: {\n\t\t\t\ttype: 'text',\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-input',\n\t\t\t\t\t'ck-input-text',\n\t\t\t\t\tbind.if( 'hasError', 'ck-error' )\n\t\t\t\t],\n\t\t\t\tid: bind.to( 'id' ),\n\t\t\t\tplaceholder: bind.to( 'placeholder' ),\n\t\t\t\treadonly: bind.to( 'isReadOnly' ),\n\t\t\t\t'aria-invalid': bind.if( 'hasError', true ),\n\t\t\t\t'aria-describedby': bind.to( 'ariaDesribedById' )\n\t\t\t},\n\t\t\ton: {\n\t\t\t\tinput: bind.to( 'input' )\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Fired when the user types in the input. Corresponds to the native\n\t\t * DOM `input` event.\n\t\t *\n\t\t * @event input\n\t\t */\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tconst setValue = value => {\n\t\t\tthis.element.value = ( !value && value !== 0 ) ? '' : value;\n\t\t};\n\n\t\tsetValue( this.value );\n\n\t\t// Bind `this.value` to the DOM element's value.\n\t\t// We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\n\t\tthis.on( 'change:value', ( evt, name, value ) => {\n\t\t\tsetValue( value );\n\t\t} );\n\t}\n\n\t/**\n\t * Moves the focus to the input and selects the value.\n\t */\n\tselect() {\n\t\tthis.element.select();\n\t}\n\n\t/**\n\t * Focuses the input.\n\t */\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n}\n","import TemplateCommandBase from './templatecommandbase';\n\n/**\n * Command to set a attribute value on a template.\n */\nexport default class TemplateAttributeCommand extends TemplateCommandBase {\n\t/**\n\t * The command constructor.\n\t *\n\t * @param {module:core/editor/editor~Editor} editor\n\t * @param {String} attribute\n\t */\n\tconstructor( editor, attribute ) {\n\t\tsuper( editor );\n\t\tthis.attribute = attribute;\n\t\tthis.isEnabled = false;\n\t\tthis.value = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tsuper.refresh();\n\t\tthis.isEnabled = !!( this._currentElement && Object.keys( this._currentElementInfo.attributes ).includes( this.attribute ) );\n\t\tif ( this.isEnabled ) {\n\t\t\tthis.value = this._currentElement.getAttribute( this.attribute );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tmatchElement( templateElement ) {\n\t\treturn templateElement.isTemplateRoot;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute( values ) {\n\t\tif ( this.isEnabled ) {\n\t\t\tthis.editor.model.change( writer => {\n\t\t\t\twriter.setAttribute( this.attribute, values.value, this._currentElement );\n\t\t\t} );\n\t\t}\n\t}\n}\n","import ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\n\nconst toPx = toUnit( 'px' );\n\n/**\n * A button that can be positioned absolutely on the screen.\n */\nexport default class TemplateButtonView extends ButtonView {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\t\tconst bind = this.bindTemplate;\n\t\tthis.set( 'top', 0 );\n\t\tthis.set( 'left', 0 );\n\t\tthis.set( 'tooltip', true );\n\n\t\t// By default the button is not visible.\n\t\tthis.set( 'isVisible', false );\n\n\t\tthis.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tstyle: {\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\ttop: bind.to( 'top', val => toPx( val ) ),\n\t\t\t\t\tleft: bind.to( 'left', val => toPx( val ) ),\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @module template/templateattributes\n */\n\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport InputTextView from '@ckeditor/ckeditor5-ui/src/inputtext/inputtextview';\nimport { addListToDropdown, createDropdown } from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\nimport BalloonPanelView from '@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\n\nimport TemplateEditing from '../templateediting';\nimport TemplateAttributeCommand from '../commands/templateattributecommand';\nimport TemplateButtonView from './views/templatebuttonview';\n\nimport ConfigureIcon from '../../theme/icons/configure.svg';\nimport { downcastAttributeToAttribute } from '@ckeditor/ckeditor5-engine/src/conversion/downcast-converters';\n\n/**\n * Automatically add configurable attributes widgets to templates.\n */\nexport default class TemplateAttributeUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TemplateEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TemplateAttributeUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\t\teditor.config.define( 'templateAttributes', {} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t// If there are no attributes configured, just bail out.\n\t\tif ( !this.editor.config.get( 'templateAttributes' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.templateAttributes = this.editor.config.get( 'templateAttributes' );\n\n\t\tfor ( const attr of Object.keys( this.templateAttributes ) ) {\n\t\t\tconst templateAttribute = this.templateAttributes[ attr ];\n\t\t\tconst type = templateAttribute.type;\n\t\t\tconst commandName = `setTemplateAttribute:${ attr }`;\n\t\t\tconst componentName = `templateAttribute:${ attr }`;\n\t\t\tthis.editor.commands.add( commandName, new TemplateAttributeCommand( this.editor, attr ) );\n\n\t\t\t// We could create the method names dynamically but this is more explicit.\n\t\t\tconst factories = {\n\t\t\t\tdropdown: this._createDropdownView,\n\t\t\t\ttextfield: this._createTextfieldView,\n\t\t\t\tmultiselect: this._createMultiselectView,\n\t\t\t\tcustom: false\n\t\t\t};\n\n\t\t\tif ( !factories.hasOwnProperty( type ) ) {\n\t\t\t\tthrow `Unrecognized template attribute type: ${ type }`;\n\t\t\t}\n\n\t\t\t// Add a downcast converter for each configurable attribute.\n\t\t\tthis.editor.conversion.for( 'downcast' ).add( downcastAttributeToAttribute( {\n\t\t\t\tmodel: attr,\n\t\t\t\tview: attr,\n\t\t\t} ) );\n\n\t\t\tconst factoryMethod = factories[ type ];\n\n\t\t\tif ( !factoryMethod ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst args = [ templateAttribute, commandName, this.editor ];\n\t\t\tconst callback = factoryMethod.apply( this, args );\n\t\t\tthis.editor.ui.componentFactory.add( componentName, callback );\n\t\t}\n\n\t\t/**\n\t\t * A map of panel instances, keyed by the set of configurable attributes.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.toolbarPanels = {};\n\n\t\t/**\n\t\t * Maps element names to toolbar panels in `toolbarPanels`.\n\t\t * @type {Object}\n\t\t */\n\t\tthis.toolbarPointers = {};\n\n\t\tconst templates = this.editor.templates.findElementInfo( info => info.isTemplateRoot );\n\n\t\tfor ( const template of templates ) {\n\t\t\t// Get the ids of all the configuration attributes attached to the\n\t\t\t// selected element's template.\n\t\t\tconst configurableAttributes = Object.keys( this.templateAttributes )\n\t\t\t\t.filter( attr => Object.keys( template.attributes ).includes( attr ) && this.templateAttributes[ attr ].type !== 'custom' )\n\t\t\t\t.sort();\n\n\t\t\t// If template doesn't have configurable attributes, skip it.\n\t\t\tif ( configurableAttributes.length === 0 ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst pointer = configurableAttributes.join( ':' );\n\t\t\tthis.toolbarPointers[ template.name ] = pointer;\n\n\t\t\t// If the same toolbar has already been configured, just mark it as a pointer.\n\t\t\tif ( this.toolbarPanels.hasOwnProperty( pointer ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst components = configurableAttributes.map( attr => `templateAttribute:${ attr }` );\n\n\t\t\t// At least one template attribute found. Create a toolbar view and fill\n\t\t\t// it with editable components based on the attribute's definition.\n\t\t\tconst toolbar = this._createToolbarView();\n\t\t\ttoolbar.fillFromConfig(\n\t\t\t\tcomponents,\n\t\t\t\tthis.editor.ui.componentFactory\n\t\t\t);\n\n\t\t\tconst panel = this._createPanelView( toolbar );\n\n\t\t\t// Close the #panelView upon clicking outside of the plugin UI.\n\t\t\tclickOutsideHandler( {\n\t\t\t\temitter: panel,\n\t\t\t\tcontextElements: [ panel.element ],\n\t\t\t\tactivator: () => panel.isVisible,\n\t\t\t\tcallback: () => {\n\t\t\t\t\tthis._hidePanels();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tthis.toolbarPanels[ pointer ] = panel;\n\t\t}\n\n\t\tthis.configureButton = new TemplateButtonView( this.editor.locale );\n\t\tthis.configureButton.set( {\n\t\t\ticon: ConfigureIcon,\n\t\t\tisVisible: false,\n\t\t} );\n\t\tthis.editor.ui.view.body.add( this.configureButton );\n\t\tthis.editor.ui.focusTracker.add( this.configureButton.element );\n\n\t\t// Update button positioning on any of the various occasions.\n\t\tthis.listenTo( this.editor.ui, 'update', () => this._updateButtonDisplay() );\n\t\tthis.listenTo( this.editor, 'change:isReadOnly', () => this._updateButtonDisplay() );\n\n\t\tthis.listenTo( this.configureButton, 'change:isVisible', ( evt, name, isVisible ) => {\n\t\t\tif ( isVisible ) {\n\t\t\t\tthis.listenTo( global.window, 'resize', () => this._updateButtonDisplay() );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.stopListening( global.window, 'resize', () => this._updateButtonDisplay() );\n\t\t\t\tthis._hidePanels();\n\t\t\t}\n\t\t} );\n\n\t\tthis.listenTo( this.configureButton, 'execute', () => {\n\t\t\tthis._hidePanels();\n\t\t\tconst result = this.editor.templates.findSelectedTemplateElement( info => info.isTemplateRoot );\n\t\t\tconst info = result.info;\n\t\t\tif ( info && this.toolbarPointers.hasOwnProperty( info.name ) ) {\n\t\t\t\tconst pointer = this.toolbarPointers[ info.name ];\n\t\t\t\tif ( this.toolbarPanels.hasOwnProperty( pointer ) ) {\n\t\t\t\t\tthis.toolbarPanels[ pointer ].pin( {\n\t\t\t\t\t\ttarget: this.configureButton.element,\n\t\t\t\t\t\tlimiter: this.editor.ui.view.editableElement,\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Hide all configuration panels.\n\t *\n\t * @private\n\t */\n\t_hidePanels() {\n\t\tObject.values( this.toolbarPanels ).forEach( el => {\n\t\t\tel.isVisible = false;\n\t\t} );\n\t}\n\n\t/**\n\t * Creates a dropdown component based on given template attribute.\n\t *\n\t * @param {Object} templateAttribute - The configuration object.\n\t * @param {String} commandName - The command associated with the attribute.\n\t * @param {Editor} editor - The editor object.\n\t *\n\t * @return {Function} - A callback for editor.ui.componentFactory.add.\n\t */\n\t_createDropdownView( templateAttribute, commandName, editor ) {\n\t\treturn locale => {\n\t\t\tconst command = editor.commands.get( commandName );\n\t\t\tconst dropdownItems = new Collection();\n\t\t\tconst titles = {};\n\n\t\t\tfor ( const key of Object.keys( templateAttribute.options ) ) {\n\t\t\t\tconst option = templateAttribute.options[ key ];\n\t\t\t\tconst itemModel = new Model( {\n\t\t\t\t\tlabel: option,\n\t\t\t\t\twithText: true,\n\t\t\t\t} );\n\n\t\t\t\titemModel.bind( 'isActive' ).to( command, 'value', value => value === key );\n\t\t\t\titemModel.set( {\n\t\t\t\t\tcommandName,\n\t\t\t\t\tcommandValue: key,\n\t\t\t\t} );\n\t\t\t\ttitles[ key ] = option;\n\n\t\t\t\tdropdownItems.add( { type: 'button', model: itemModel } );\n\t\t\t}\n\n\t\t\tconst dropdownView = createDropdown( locale );\n\t\t\taddListToDropdown( dropdownView, dropdownItems );\n\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\tisOn: false,\n\t\t\t\twithText: true,\n\t\t\t\tlabel: templateAttribute.label,\n\t\t\t\ttooltip: `Configure the ${ templateAttribute.label } option.`,\n\t\t\t} );\n\n\t\t\tdropdownView.buttonView.bind( 'label' ).to( command, 'value', value => {\n\t\t\t\treturn titles[ value ] || templateAttribute.label;\n\t\t\t} );\n\n\t\t\tdropdownView.bind( 'isEnabled' ).to( command, 'isEnabled', value => {\n\t\t\t\treturn value;\n\t\t\t} );\n\n\t\t\t// Execute command when an item from the dropdown is selected.\n\t\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\t\teditor.execute( evt.source.commandName, { value: evt.source.commandValue } );\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t};\n\t}\n\n\t/**\n\t * Creates a dropdown component based on given template attribute.\n\t *\n\t * @param {Object} templateAttribute - The configuration object.\n\t * @param {String} commandName - The command associated with the attribute.\n\t * @param {Editor} editor - The editor object.\n\t *\n\t * @return {Function} - A callback for editor.ui.componentFactory.add.\n\t */\n\t_createTextfieldView( templateAttribute, commandName, editor ) {\n\t\treturn locale => {\n\t\t\tconst command = editor.commands.get( commandName );\n\t\t\tconst { placeholder = '' } = templateAttribute;\n\t\t\tconst inputView = new InputTextView( locale );\n\n\t\t\tinputView.placeholder = placeholder;\n\t\t\tinputView.bind( 'value' ).to( command, 'value' );\n\n\t\t\tthis.listenTo( inputView, 'input', evt => {\n\t\t\t\teditor.execute( commandName, { value: evt.source.element.value } );\n\t\t\t} );\n\n\t\t\treturn inputView;\n\t\t};\n\t}\n\n\t/**\n\t * Creates a multi-select dropdown component based on given template attribute.\n\t *\n\t * @param {Object} templateAttribute - The configuration object.\n\t * @param {String} commandName - The command associated with the attribute.\n\t * @param {Editor} editor - The editor object.\n\t *\n\t * @return {Function} - A callback for editor.ui.componentFactory.add.\n\t */\n\t_createMultiselectView( templateAttribute, commandName, editor ) {\n\t\treturn locale => {\n\t\t\tconst command = editor.commands.get( commandName );\n\t\t\tconst dropdownItems = new Collection();\n\t\t\tconst keys = Object.keys( templateAttribute.options );\n\n\t\t\t/**\n\t\t\t * Returns the label associated with given option key.\n\t\t\t * @param {String} key\n\t\t\t * @returns {String}\n\t\t\t */\n\t\t\tconst getLabel = key => templateAttribute.options[ key ];\n\n\t\t\t/**\n\t\t\t * Turns given attribute value into an array of selections.\n\t\t\t * @param {String} encodedKeys - Selected keys separated by commas.\n\t\t\t * @returns {String[]}\n\t\t\t */\n\t\t\tconst decodeKeys = encodedKeys => ( encodedKeys || '' )\n\t\t\t\t.split( ',' )\n\t\t\t\t.filter( value => value )\n\t\t\t\t.sort( ( a, b ) => keys.indexOf( a ) - keys.indexOf( b ) );\n\n\t\t\t/**\n\t\t\t * Returns a function that tells if a given value is currently selected.\n\t\t\t * @param {String} key - A key in the options array.\n\t\t\t * @returns {function(*): boolean}\n\t\t\t */\n\t\t\tconst valueIsSelected = key =>\n\t\t\t\tencodedKeys => decodeKeys( encodedKeys ).includes( key );\n\n\t\t\t/**\n\t\t\t * Returns a comma separated list of selected items' labels.\n\t\t\t * @param {String} encodedKeys - Selected keys separated by commas\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tconst getSelectionsSummary = encodedKeys => {\n\t\t\t\tconst selections = decodeKeys( encodedKeys );\n\t\t\t\tif ( selections.length > 0 ) {\n\t\t\t\t\treturn selections.map( getLabel ).join( ', ' );\n\t\t\t\t}\n\t\t\t\treturn templateAttribute.label || '';\n\t\t\t};\n\n\t\t\t// Fill dropdownItems with switchbutton.\n\t\t\tfor ( const optionKey of Object.keys( templateAttribute.options ) ) {\n\t\t\t\tconst itemModel = new Model( {\n\t\t\t\t\tlabel: getLabel( optionKey ),\n\t\t\t\t\twithText: true,\n\t\t\t\t\tkey: optionKey,\n\t\t\t\t} );\n\n\t\t\t\t// Turn the switchbutton on when it's key is present in the values\n\t\t\t\t// and off otherwise.\n\t\t\t\titemModel.bind( 'isOn' ).to( command, 'value', valueIsSelected( optionKey ) );\n\t\t\t\tdropdownItems.add( { type: 'switchbutton', model: itemModel } );\n\t\t\t}\n\n\t\t\tconst dropdownView = createDropdown( locale );\n\t\t\taddListToDropdown( dropdownView, dropdownItems );\n\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\twithText: true,\n\t\t\t\tlabel: templateAttribute.label,\n\t\t\t\ttooltip: `Configure the ${ templateAttribute.label } option.`,\n\t\t\t} );\n\n\t\t\t// Update the dropdown label whenever the selections set changes.\n\t\t\tdropdownView.buttonView\n\t\t\t\t.bind( 'label' )\n\t\t\t\t.to( command, 'value', getSelectionsSummary );\n\n\t\t\t// Execute command when any item from the dropdown is toggled.\n\t\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\t\tconst values = decodeKeys( command.value );\n\t\t\t\tconst { key } = evt.source;\n\t\t\t\tconst index = values.indexOf( key );\n\n\t\t\t\tif ( index === -1 ) {\n\t\t\t\t\t// The item wasn't selected, add it to the values.\n\t\t\t\t\tvalues.push( key );\n\t\t\t\t} else {\n\t\t\t\t\t// The item was selected before. It's deselected now.\n\t\t\t\t\tvalues.splice( index, 1 );\n\t\t\t\t}\n\t\t\t\teditor.execute( commandName, { value: values.join( ',' ) } );\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t};\n\t}\n\n\t/**\n\t * Creates the {@link #toolbarView}.\n\t *\n\t * @private\n\t * @returns {module:ui/toolbar/toolbarview~ToolbarView}\n\t */\n\t_createToolbarView() {\n\t\tconst toolbarView = new ToolbarView( this.editor.locale );\n\n\t\ttoolbarView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-editor-inline/issues/11\n\t\t\t\tclass: [ 'ck-toolbar_floating' ]\n\t\t\t}\n\t\t} );\n\n\t\treturn toolbarView;\n\t}\n\n\t/**\n\t * Creates the {@link #panelView}.\n\t *\n\t * @private\n\t * @returns {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n\t */\n\t_createPanelView( toolbar ) {\n\t\tconst editor = this.editor;\n\t\tconst panelView = new BalloonPanelView( editor.locale );\n\n\t\tpanelView.content.add( toolbar );\n\t\tpanelView.className = 'ck-toolbar-container';\n\t\teditor.ui.view.body.add( panelView );\n\t\teditor.ui.focusTracker.add( panelView.element );\n\n\t\t// Close #panelView on `Esc` press.\n\t\ttoolbar.keystrokes.set( 'Esc', ( evt, cancel ) => {\n\t\t\tthis._hidePanel( panelView );\n\t\t\tcancel();\n\t\t} );\n\n\t\treturn panelView;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_updateButtonDisplay() {\n\t\tconst result = this.editor.templates.findSelectedTemplateElement( info => info.isTemplateRoot );\n\t\tconst modelElement = result.element;\n\t\tconst info = result.info;\n\n\t\tif ( !info || !this.toolbarPointers.hasOwnProperty( info.name ) || this.editor.isReadOnly ) {\n\t\t\tthis.configureButton.isVisible = false;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.configureButton.isVisible = true;\n\n\t\tconst viewElement = this.editor.editing.mapper.toViewElement( modelElement );\n\t\tconst domElement = this.editor.editing.view.domConverter.mapViewToDom( viewElement );\n\n\t\tconst buttonPosition = getOptimalPosition( {\n\t\t\telement: this.configureButton.element,\n\t\t\ttarget: domElement,\n\t\t\tpositions: [\n\t\t\t\t( targetRect, buttonRect ) => ( {\n\t\t\t\t\ttop: targetRect.top + buttonRect.height,\n\t\t\t\t\tleft: targetRect.left + targetRect.width,\n\t\t\t\t} )\n\t\t\t]\n\t\t} );\n\n\t\tthis.configureButton.top = buttonPosition.top;\n\t\tthis.configureButton.left = buttonPosition.left;\n\t}\n}\n","import Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport TemplateEditing from './templateediting';\n\n/**\n * Adds document wide unique id's to templates.\n *\n * Requires a 'templateSession' configuration parameter that should be a unique identifier for the current\n * editor instance. For example CMS-session-id + server request time + editor element id. It is used to generate a\n * on document level unique for each inserted element that is supposed to have an id attribute.\n */\nexport default class TemplateId extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\t\t// Unique identifier for the current user session.\n\t\teditor.config.define( 'templateSession', null );\n\t\tthis._tick = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TemplateEditing ];\n\t}\n\n\t/**\n\t * A global \"tick\" for each element that has been added an id.\n\t * In case if simultaneously added id's during\n\t */\n\tget tick() {\n\t\treturn this._tick++;\n\t}\n\n\t/**\n\t * A unique session id.\n\t */\n\tget session() {\n\t\treturn this.editor.config.get( 'templateSession' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t// Allow the id attribute on all template root elements.\n\t\tthis.editor.templates.findElementInfo( info => info.isTemplateRoot ).forEach( info => {\n\t\t\tthis.editor.model.schema.extend( info.name, {\n\t\t\t\tallowAttributes: [ 'id' ],\n\t\t\t} );\n\t\t} );\n\n\t\t// Add a downcast converter for id attribute.\n\t\tthis.editor.conversion.attributeToAttribute( {\n\t\t\tmodel: 'id',\n\t\t\tview: 'id',\n\t\t} );\n\n\t\t// Auto add an id to each template instance.\n\t\tthis.editor.model.document.registerPostFixer( writer => {\n\t\t\tfor ( const entry of this.editor.model.document.differ.getChanges() ) {\n\t\t\t\t// If the change inserts a new element.\n\t\t\t\tif ( [ 'insert' ].includes( entry.type ) ) {\n\t\t\t\t\t// Get the actual element.\n\t\t\t\t\tconst item = entry.position.nodeAfter;\n\t\t\t\t\tthis.postfixIds( item, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\tpostfixIds( item, writer ) {\n\t\tif ( !item ) {\n\t\t\treturn;\n\t\t}\n\t\t// Check if it exists and doesn't have an id attribute yet.\n\t\tif ( item && !item.getAttribute( 'id' ) ) {\n\t\t\t// Get the template information for this element.\n\t\t\tconst info = this.editor.templates.getElementInfo( item.name );\n\t\t\t// Only add id's to template roots.\n\t\t\tif ( info && !info.parent ) {\n\t\t\t\t// Generate an id from the current session identifier and the increment counter\n\t\t\t\t// for added elements.\n\t\t\t\twriter.setAttribute( 'id', hash( `${ this.session }:${ this.tick }` ), item );\n\t\t\t}\n\n\t\t\tif ( info ) {\n\t\t\t\tfor ( const child of item.getChildren() ) {\n\t\t\t\t\tthis.postfixIds( child, writer );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A string hashing function based on Daniel J. Bernstein's 'times 33' hash algorithm and serialized into a string.\n *\n * @param {string} text - String to hash\n * @return {String} Resulting number.\n */\nfunction hash( text ) {\n\tlet hash = 5381;\n\tlet index = text.length;\n\n\twhile ( index ) {\n\t\thash = ( hash * 33 ) ^ text.charCodeAt( --index );\n\t}\n\n\treturn ( hash >>> 0 ).toString( 36 );\n}\n","import TooltipView from '@ckeditor/ckeditor5-ui/src/tooltip/tooltipview';\nimport '../../../theme/css/textlimit.css';\n\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nconst toPx = toUnit( 'px' );\n\nexport default class TextLimitTooltipView extends TooltipView {\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\t\tconst bind = this.bindTemplate;\n\t\tthis.set( 'top', 0 );\n\t\tthis.set( 'left', 0 );\n\t\tthis.set( 'isVisible', false );\n\t\tthis.set( 'isExceeded', false );\n\n\t\tthis.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-text-limit',\n\t\t\t\t\tbind.if( 'isVisible', 'ck-text-limit-show' ),\n\t\t\t\t\tbind.if( 'isExceeded', 'ck-text-limit-exceeded' ),\n\t\t\t\t],\n\t\t\t\tstyle: {\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\ttop: bind.to( 'top', val => toPx( val ) ),\n\t\t\t\t\tleft: bind.to( 'left', val => toPx( val ) ),\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","import Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport TextElement from './elements/textelement';\nimport TextLimitTooltipView from './ui/views/textlimittooltipview';\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\n\n/**\n * Display a tooltip with the remaining amount of characters on a textfield if it has an assigned limit.\n */\nexport default class TextLimit extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TextElement ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tthis.tooltipView = new TextLimitTooltipView();\n\t\tthis.tooltipView.set();\n\t\tthis.editor.ui.view.body.add( this.tooltipView );\n\t\tthis.editor.ui.focusTracker.add( this.tooltipView.element );\n\n\t\t// Update button positioning on any of the various occasions.\n\t\tthis.listenTo( this.editor.ui, 'update', () => this._updateTooltipDisplay() );\n\t\tthis.listenTo( this.editor, 'change:isReadOnly', () => this._updateTooltipDisplay() );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_updateTooltipDisplay() {\n\t\tconst result = this.editor.templates.findSelectedTemplateElement( info => {\n\t\t\treturn info.type === 'text' && info.configuration.limit;\n\t\t} );\n\n\t\tif ( !result.element || this.editor.isReadOnly ) {\n\t\t\tthis.tooltipView.isVisible = false;\n\t\t\treturn;\n\t\t}\n\t\tconst limit = parseInt( result.info.configuration.limit );\n\n\t\tthis.tooltipView.isVisible = true;\n\n\t\tconst viewElement = this.editor.editing.mapper.toViewElement( result.element );\n\t\tconst domElement = this.editor.editing.view.domConverter.mapViewToDom( viewElement );\n\n\t\tconst characters = domElement.innerText.replace( /[\\u200B-\\u200D\\uFEFF]/g, '' ).trim().length;\n\n\t\tif ( characters > limit ) {\n\t\t\tdomElement.classList.add( 'ck-text-field-limit-exceeded' );\n\t\t}\n\t\telse {\n\t\t\tdomElement.classList.remove( 'ck-text-field-limit-exceeded' );\n\t\t}\n\n\t\tconst message = characters > limit ?\n\t\t\tthis.editor.locale.t( 'Too long: please remove at least %0 letters.', [ characters - limit ] ) :\n\t\t\tthis.editor.locale.t( '%0 letters remaining.', [ limit - characters ] );\n\n\t\tthis.tooltipView.isExceeded = characters > limit;\n\t\tthis.tooltipView.set( { text: message } );\n\n\t\tconst tooltipPosition = getOptimalPosition( {\n\t\t\telement: this.tooltipView.element,\n\t\t\ttarget: domElement,\n\t\t\tpositions: [\n\t\t\t\ttargetRect => ( {\n\t\t\t\t\ttop: targetRect.top + targetRect.height,\n\t\t\t\t\tleft: targetRect.left,\n\t\t\t\t} )\n\t\t\t]\n\t\t} );\n\n\t\tthis.tooltipView.top = tooltipPosition.top;\n\t\tthis.tooltipView.left = tooltipPosition.left;\n\t}\n}\n","import Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\n\nimport '../theme/css/hoveredwidget.css';\n\n/**\n * Only highlight the innermost hovered widget, not all parent widgets.\n */\nexport default class HoveredWidget extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'HoveredWidget';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.ui.view.listenTo( global.window.document, 'mouseover', ( evt, data ) => {\n\t\t\t// @todo: improve this to not query the the document all the time, but\n\t\t\t// have maybe some statically cached list.\n\t\t\tfor ( const node of global.window.document.querySelectorAll( '.ck-widget' ) ) {\n\t\t\t\tnode.classList.remove( 'hovered' );\n\t\t\t}\n\n\t\t\tlet element = data.target;\n\t\t\twhile ( element && element.classList ) {\n\t\t\t\tif ( element.classList.contains( 'ck-widget' ) ) {\n\t\t\t\t\telement.classList.add( 'hovered' );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telement = element.parentNode;\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @module template/elements/galleryelement\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport { downcastTemplateElement, getModelAttributes } from '../utils/conversion';\nimport { toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\n\nimport TemplateEditing from '../templateediting';\n\nimport '../../theme/css/gallery.css';\n\n/**\n * Allow an arbitrary list of elements of a given type.\n *\n * Displays elements in a horizontal gallery.\n */\nexport default class GalleryElement extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TemplateEditing ];\n\t}\n\n\t/**\n\t * Set the current item of a given gallery.\n\t *\n\t * @param {module:engine/model/element~Element} model\n\t * @param {Number} index\n\t */\n\tsetCurrentItem( model, index ) {\n\t\tconst view = this.editor.editing.mapper.toViewElement( model );\n\t\tif ( view ) {\n\t\t\tthis.editor.editing.view.change( writer => {\n\t\t\t\twriter.setAttribute( 'ck-gallery-current-item', index, view );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Get the current item index of a given gallery.\n\t *\n\t * @param model\n\t */\n\tgetCurrentItem( model ) {\n\t\tconst view = this.editor.editing.mapper.toViewElement( model );\n\t\tif ( view ) {\n\t\t\treturn view.getAttribute( 'ck-gallery-current-item' );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t// Get all configured placeholder elements.\n\t\tconst galleryElements = this.editor.templates.getElementsByType( 'gallery' );\n\n\t\tfor ( const galleryElement of galleryElements ) {\n\t\t\t// Extend the schema so that the contained elements can be placed in the gallery.\n\t\t\tfor ( const el of galleryElement.contains ) {\n\t\t\t\tthis.editor.model.schema.extend( `ck__${ el }`, {\n\t\t\t\t\tallowIn: galleryElement.name,\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\t// Allow `$text` within all elements.\n\t\t// Required until https://github.com/ckeditor/ckeditor5-engine/issues/1593 is fixed.\n\t\t// TODO: Remove this once the issue is resolved.\n\t\tthis.editor.model.schema.extend( '$text', {\n\t\t\tallowIn: galleryElements.map( el => `${ el.name }__placeholder` ),\n\t\t} );\n\n\t\tthis.editor.conversion.for( 'editingDowncast' ).add( downcastTemplateElement( this.editor, {\n\t\t\ttypes: [ 'gallery' ],\n\t\t\tview: ( templateElement, modelElement, viewWriter ) => {\n\t\t\t\tconst attributes = getModelAttributes( templateElement, modelElement );\n\t\t\t\tattributes.section = templateElement.contains[ 0 ];\n\t\t\t\tconst el = viewWriter.createContainerElement(\n\t\t\t\t\t'ck-gallery',\n\t\t\t\t\tattributes\n\t\t\t\t);\n\t\t\t\treturn templateElement.parent ? el : toWidget( el, viewWriter );\n\t\t\t}\n\t\t} ) );\n\n\t\t// Postfix elements to make sure a templates structure is always correct.\n\t\tthis.editor.templates.registerPostFixer( [ 'gallery' ], ( templateElement, item, writer ) => {\n\t\t\tlet changed = false;\n\t\t\tif ( item.childCount === 0 ) {\n\t\t\t\tif ( templateElement.contains.length === 1 ) {\n\t\t\t\t\twriter.insertElement( `ck__${ templateElement.contains[ 0 ] }`, item, 'end' );\n\t\t\t\t} else {\n\t\t\t\t\twriter.insertElement( templateElement.name + '__placeholder', item, 'end' );\n\t\t\t\t}\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\treturn changed;\n\t\t} );\n\t}\n}\n\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module link/findlinkrange\n */\n\n/**\n * Returns a range containing the entire link in which the given `position` is placed.\n *\n * It can be used e.g. to get the entire range on which the `linkHref` attribute needs to be changed when having a\n * selection inside a link.\n *\n * @param {module:engine/model/position~Position} position The start position.\n * @param {String} value The `linkHref` attribute value.\n * @returns {module:engine/model/range~Range} The link range.\n */\nexport default function findLinkRange( position, value, model ) {\n\treturn model.createRange( _findBound( position, value, true, model ), _findBound( position, value, false, model ) );\n}\n\n// Walks forward or backward (depends on the `lookBack` flag), node by node, as long as they have the same `linkHref` attribute value\n// and returns a position just before or after (depends on the `lookBack` flag) the last matched node.\n//\n// @param {module:engine/model/position~Position} position The start position.\n// @param {String} value The `linkHref` attribute value.\n// @param {Boolean} lookBack Whether the walk direction is forward (`false`) or backward (`true`).\n// @returns {module:engine/model/position~Position} The position just before the last matched node.\nfunction _findBound( position, value, lookBack, model ) {\n\t// Get node before or after position (depends on `lookBack` flag).\n\t// When position is inside text node then start searching from text node.\n\tlet node = position.textNode || ( lookBack ? position.nodeBefore : position.nodeAfter );\n\n\tlet lastNode = null;\n\n\twhile ( node && node.getAttribute( 'linkHref' ) == value ) {\n\t\tlastNode = node;\n\t\tnode = lookBack ? node.previousSibling : node.nextSibling;\n\t}\n\n\treturn lastNode ? model.createPositionAt( lastNode, lookBack ? 'before' : 'after' ) : position;\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module link/linkcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport findLinkRange from './findlinkrange';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\n\n/**\n * The link command. It is used by the {@link module:link/link~Link link feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class LinkCommand extends Command {\n\t/**\n\t * The value of the `'linkHref'` attribute if the start of the selection is located in a node with this attribute.\n\t *\n\t * @observable\n\t * @readonly\n\t * @member {Object|undefined} #value\n\t */\n\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.value = doc.selection.getAttribute( 'linkHref' );\n\t\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, 'linkHref' );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is non-collapsed, the `linkHref` attribute will be applied to nodes inside the selection, but only to\n\t * those nodes where the `linkHref` attribute is allowed (disallowed nodes will be omitted).\n\t *\n\t * When the selection is collapsed and is not inside the text with the `linkHref` attribute, the\n\t * new {@link module:engine/model/text~Text Text node} with the `linkHref` attribute will be inserted in place of caret, but\n\t * only if such element is allowed in this place. The `_data` of the inserted text will equal the `href` parameter.\n\t * The selection will be updated to wrap the just inserted text node.\n\t *\n\t * When the selection is collapsed and inside the text with the `linkHref` attribute, the attribute value will be updated.\n\t *\n\t * @fires execute\n\t * @param {String} href Link destination.\n\t */\n\texecute( href ) {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tmodel.change( writer => {\n\t\t\t// If selection is collapsed then update selected link or insert new one at the place of caret.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tconst position = selection.getFirstPosition();\n\n\t\t\t\t// When selection is inside text with `linkHref` attribute.\n\t\t\t\tif ( selection.hasAttribute( 'linkHref' ) ) {\n\t\t\t\t\t// Then update `linkHref` value.\n\t\t\t\t\tconst linkRange = findLinkRange( selection.getFirstPosition(), selection.getAttribute( 'linkHref' ), model );\n\n\t\t\t\t\twriter.setAttribute( 'linkHref', href, linkRange );\n\n\t\t\t\t\t// Create new range wrapping changed link.\n\t\t\t\t\twriter.setSelection( linkRange );\n\t\t\t\t}\n\t\t\t\t// If not then insert text node with `linkHref` attribute in place of caret.\n\t\t\t\t// However, since selection in collapsed, attribute value will be used as data for text node.\n\t\t\t\t// So, if `href` is empty, do not create text node.\n\t\t\t\telse if ( href !== '' ) {\n\t\t\t\t\tconst attributes = toMap( selection.getAttributes() );\n\n\t\t\t\t\tattributes.set( 'linkHref', href );\n\n\t\t\t\t\tconst node = writer.createText( href, attributes );\n\n\t\t\t\t\twriter.insert( node, position );\n\n\t\t\t\t\t// Create new range wrapping created node.\n\t\t\t\t\twriter.setSelection( writer.createRangeOn( node ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If selection has non-collapsed ranges, we change attribute on nodes inside those ranges\n\t\t\t\t// omitting nodes where `linkHref` attribute is disallowed.\n\t\t\t\tconst ranges = model.schema.getValidRanges( selection.getRanges(), 'linkHref' );\n\n\t\t\t\tfor ( const range of ranges ) {\n\t\t\t\t\twriter.setAttribute( 'linkHref', href, range );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module link/unlinkcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport findLinkRange from './findlinkrange';\n\n/**\n * The unlink command. It is used by the {@link module:link/link~Link link plugin}.\n *\n * @extends module:core/command~Command\n */\nexport default class UnlinkCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = this.editor.model.document.selection.hasAttribute( 'linkHref' );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is collapsed, removes the `linkHref` attribute from each node with the same `linkHref` attribute value.\n\t * When the selection is non-collapsed, removes the `linkHref` attribute from each node in selected ranges.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tmodel.change( writer => {\n\t\t\t// Get ranges to unlink.\n\t\t\tconst rangesToUnlink = selection.isCollapsed ?\n\t\t\t\t[ findLinkRange( selection.getFirstPosition(), selection.getAttribute( 'linkHref' ), model ) ] : selection.getRanges();\n\n\t\t\t// Remove `linkHref` attribute from specified ranges.\n\t\t\tfor ( const range of rangesToUnlink ) {\n\t\t\t\twriter.removeAttribute( 'linkHref', range );\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module link/utils\n */\n\nconst linkElementSymbol = Symbol( 'linkElement' );\n\nconst ATTRIBUTE_WHITESPACES = /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205f\\u3000]/g; // eslint-disable-line no-control-regex\nconst SAFE_URL = /^(?:(?:https?|ftps?|mailto):|[^a-z]|[a-z+.-]+(?:[^a-z+.:-]|$))/i;\n\n/**\n * Returns `true` if a given view node is the link element.\n *\n * @param {module:engine/view/node~Node} node\n * @returns {Boolean}\n */\nexport function isLinkElement( node ) {\n\treturn node.is( 'attributeElement' ) && !!node.getCustomProperty( linkElementSymbol );\n}\n\n/**\n * Creates link {@link module:engine/view/attributeelement~AttributeElement} with provided `href` attribute.\n *\n * @param {String} href\n * @returns {module:engine/view/attributeelement~AttributeElement}\n */\nexport function createLinkElement( href, writer ) {\n\t// Priority 5 - https://github.com/ckeditor/ckeditor5-link/issues/121.\n\tconst linkElement = writer.createAttributeElement( 'a', { href }, { priority: 5 } );\n\twriter.setCustomProperty( linkElementSymbol, true, linkElement );\n\n\treturn linkElement;\n}\n\n/**\n * Returns a safe URL based on a given value.\n *\n * An URL is considered safe if it is safe for the user (does not contain any malicious code).\n *\n * If URL is considered unsafe, a simple `\"#\"` is returned.\n *\n * @protected\n * @param {*} url\n * @returns {String} Safe URL.\n */\nexport function ensureSafeUrl( url ) {\n\turl = String( url );\n\n\treturn isSafeUrl( url ) ? url : '#';\n}\n\n// Checks whether the given URL is safe for the user (does not contain any malicious code).\n//\n// @param {String} url URL to check.\nfunction isSafeUrl( url ) {\n\tconst normalizedUrl = url.replace( ATTRIBUTE_WHITESPACES, '' );\n\n\treturn normalizedUrl.match( SAFE_URL );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/utils/bindtwostepcarettoattribute\n */\n\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport priorities from '@ckeditor/ckeditor5-utils/src/priorities';\n\n/**\n * This helper enabled the two-step caret (phantom) movement behavior for the given {@link module:engine/model/model~Model}\n * attribute on arrow right (<kbd>→</kbd>) and left (<kbd>←</kbd>) key press.\n *\n * Thanks to this (phantom) caret movement the user is able to type before/after as well as at the\n * beginning/end of an attribute.\n *\n * # Forward movement\n *\n * ## \"Entering\" an attribute:\n *\n * When this behavior is enabled for the `a` attribute and the selection is right before it\n * (at the attribute boundary), pressing the right arrow key will not move the selection but update its\n * attributes accordingly:\n *\n * * When enabled:\n *\n *   \t\tfoo{}<$text a=\"true\">bar</$text>\n *\n *    <kbd>→</kbd>\n *\n *   \t\tfoo<$text a=\"true\">{}bar</$text>\n *\n * * When disabled:\n *\n *   \t\tfoo{}<$text a=\"true\">bar</$text>\n *\n *   <kbd>→</kbd>\n *\n *   \t\tfoo<$text a=\"true\">b{}ar</$text>\n *\n *\n * ## \"Leaving\" an attribute:\n *\n * * When enabled:\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n *    <kbd>→</kbd>\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n * * When disabled:\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n *   <kbd>→</kbd>\n *\n *   \t\t<$text a=\"true\">bar</$text>b{}az\n *\n * # Backward movement\n *\n * * When enabled:\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n *    <kbd>←</kbd>\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n * * When disabled:\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n *   <kbd>←</kbd>\n *\n *   \t\t<$text a=\"true\">ba{}r</$text>b{}az\n *\n * @param {module:engine/view/view~View} view View controller instance.\n * @param {module:engine/model/model~Model} model Data model instance.\n * @param {module:utils/dom/emittermixin~Emitter} emitter The emitter to which this behavior should be added\n * (e.g. a plugin instance).\n * @param {String} attribute Attribute for which this behavior will be added.\n */\nexport default function bindTwoStepCaretToAttribute( view, model, emitter, attribute ) {\n\tconst twoStepCaretHandler = new TwoStepCaretHandler( model, emitter, attribute );\n\tconst modelSelection = model.document.selection;\n\n\t// Listen to keyboard events and handle the caret movement according to the 2-step caret logic.\n\t//\n\t// Note: This listener has the \"high+1\" priority:\n\t// * \"high\" because of the filler logic implemented in the renderer which also engages on #keydown.\n\t// When the gravity is overridden the attributes of the (model) selection attributes are reset.\n\t// It may end up with the filler kicking in and breaking the selection.\n\t// * \"+1\" because we would like to avoid collisions with other features (like Widgets), which\n\t// take over the keydown events with the \"high\" priority. Two-step caret movement takes precedence\n\t// over Widgets in that matter.\n\t//\n\t// Find out more in https://github.com/ckeditor/ckeditor5-engine/issues/1301.\n\temitter.listenTo( view.document, 'keydown', ( evt, data ) => {\n\t\t// This implementation works only for collapsed selection.\n\t\tif ( !modelSelection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When user tries to expand the selection or jump over the whole word or to the beginning/end then\n\t\t// two-steps movement is not necessary.\n\t\tif ( data.shiftKey || data.altKey || data.ctrlKey ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst arrowRightPressed = data.keyCode == keyCodes.arrowright;\n\t\tconst arrowLeftPressed = data.keyCode == keyCodes.arrowleft;\n\n\t\t// When neither left or right arrow has been pressed then do noting.\n\t\tif ( !arrowRightPressed && !arrowLeftPressed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = modelSelection.getFirstPosition();\n\t\tlet isMovementHandled;\n\n\t\tif ( arrowRightPressed ) {\n\t\t\tisMovementHandled = twoStepCaretHandler.handleForwardMovement( position, data );\n\t\t} else {\n\t\t\tisMovementHandled = twoStepCaretHandler.handleBackwardMovement( position, data );\n\t\t}\n\n\t\t// Stop the keydown event if the two-step arent movement handled it. Avoid collisions\n\t\t// with other features which may also take over the caret movement (e.g. Widget).\n\t\tif ( isMovementHandled ) {\n\t\t\tevt.stop();\n\t\t}\n\t}, { priority: priorities.get( 'high' ) + 1 } );\n}\n\n/**\n * This is a private helper–class for {@link module:engine/utils/bindtwostepcarettoattribute}.\n * It handles the state of the 2-step caret movement for a single {@link module:engine/model/model~Model}\n * attribute upon the `keypress` in the {@link module:engine/view/view~View}.\n *\n * @private\n */\nclass TwoStepCaretHandler {\n\t/*\n\t * Creates two step handler instance.\n\t *\n\t * @param {module:engine/model/model~Model} model Data model instance.\n\t * @param {module:utils/dom/emittermixin~Emitter} emitter The emitter to which this behavior should be added\n\t * (e.g. a plugin instance).\n\t * @param {String} attribute Attribute for which the behavior will be added.\n\t */\n\tconstructor( model, emitter, attribute ) {\n\t\t/**\n\t\t * The model instance this class instance operates on.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:engine/model/model~Model#schema}\n\t\t */\n\t\tthis.model = model;\n\n\t\t/**\n\t\t * The Attribute this class instance operates on.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.attribute = attribute;\n\n\t\t/**\n\t\t * A reference to the document selection.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/selection~Selection}\n\t\t */\n\t\tthis._modelSelection = model.document.selection;\n\n\t\t/**\n\t\t * The current UID of the overridden gravity, as returned by\n\t\t * {@link module:engine/model/writer~Writer#overrideSelectionGravity}.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._overrideUid = null;\n\n\t\t/**\n\t\t * A flag indicating that the automatic gravity restoration for this attribute\n\t\t * should not happen upon the next\n\t\t * {@link module:engine/model/selection~Selection#event:change:range} event.\n\t\t *\n\t\t * @private\n\t\t * @member {String}\n\t\t */\n\t\tthis._isNextGravityRestorationSkipped = false;\n\n\t\t// The automatic gravity restoration logic.\n\t\temitter.listenTo( this._modelSelection, 'change:range', ( evt, data ) => {\n\t\t\t// Skipping the automatic restoration is needed if the selection should change\n\t\t\t// but the gravity must remain overridden afterwards. See the #handleBackwardMovement\n\t\t\t// to learn more.\n\t\t\tif ( this._isNextGravityRestorationSkipped ) {\n\t\t\t\tthis._isNextGravityRestorationSkipped = false;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Skip automatic restore when the gravity is not overridden — simply, there's nothing to restore\n\t\t\t// at this moment.\n\t\t\tif ( !this._isGravityOverridden ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Skip automatic restore when the change is indirect AND the selection is at the attribute boundary.\n\t\t\t// It means that e.g. if the change was external (collaboration) and the user had their\n\t\t\t// selection around the link, its gravity should remain intact in this change:range event.\n\t\t\tif ( !data.directChange && isAtBoundary( this._modelSelection.getFirstPosition(), attribute ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._restoreGravity();\n\t\t} );\n\t}\n\n\t/**\n\t * Updates the document selection and the view according to the two–step caret movement state\n\t * when moving **forwards**. Executed upon `keypress` in the {@link module:engine/view/view~View}.\n\t *\n\t * @param {module:engine/model/position~Position} position The model position at the moment of the key press.\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} data Data of the key press.\n\t * @returns {Boolean} `true` when the handler prevented caret movement\n\t */\n\thandleForwardMovement( position, data ) {\n\t\tconst attribute = this.attribute;\n\n\t\t// DON'T ENGAGE 2-SCM if gravity is already overridden. It means that we just entered\n\t\t//\n\t\t// \t\t<paragraph>foo<$text attribute>{}bar</$text>baz</paragraph>\n\t\t//\n\t\t// or left the attribute\n\t\t//\n\t\t// \t\t<paragraph>foo<$text attribute>bar</$text>{}baz</paragraph>\n\t\t//\n\t\t// and the gravity will be restored automatically.\n\t\tif ( this._isGravityOverridden ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// DON'T ENGAGE 2-SCM when the selection is at the beginning of the block AND already has the\n\t\t// attribute:\n\t\t// * when the selection was initially set there using the mouse,\n\t\t// * when the editor has just started\n\t\t//\n\t\t//\t\t<paragraph><$text attribute>{}bar</$text>baz</paragraph>\n\t\t//\n\t\tif ( position.isAtStart && this._hasSelectionAttribute ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// ENGAGE 2-SCM when about to leave one attribute value and enter another:\n\t\t//\n\t\t// \t\t<paragraph><$text attribute=\"1\">foo{}</$text><$text attribute=\"2\">bar</$text></paragraph>\n\t\t//\n\t\t// but DON'T when already in between of them (no attribute selection):\n\t\t//\n\t\t// \t\t<paragraph><$text attribute=\"1\">foo</$text>{}<$text attribute=\"2\">bar</$text></paragraph>\n\t\t//\n\t\tif ( isBetweenDifferentValues( position, attribute ) && this._hasSelectionAttribute ) {\n\t\t\tthis._preventCaretMovement( data );\n\t\t\tthis._removeSelectionAttribute();\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// ENGAGE 2-SCM when entering an attribute:\n\t\t//\n\t\t// \t\t<paragraph>foo{}<$text attribute>bar</$text>baz</paragraph>\n\t\t//\n\t\tif ( isAtStartBoundary( position, attribute ) ) {\n\t\t\tthis._preventCaretMovement( data );\n\t\t\tthis._overrideGravity();\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// ENGAGE 2-SCM when leaving an attribute:\n\t\t//\n\t\t//\t\t<paragraph>foo<$text attribute>bar{}</$text>baz</paragraph>\n\t\t//\n\t\tif ( isAtEndBoundary( position, attribute ) && this._hasSelectionAttribute ) {\n\t\t\tthis._preventCaretMovement( data );\n\t\t\tthis._overrideGravity();\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the document selection and the view according to the two–step caret movement state\n\t * when moving **backwards**. Executed upon `keypress` in the {@link module:engine/view/view~View}.\n\t *\n\t * @param {module:engine/model/position~Position} position The model position at the moment of the key press.\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} data Data of the key press.\n\t * @returns {Boolean} `true` when the handler prevented caret movement\n\t */\n\thandleBackwardMovement( position, data ) {\n\t\tconst attribute = this.attribute;\n\n\t\t// When the gravity is already overridden...\n\t\tif ( this._isGravityOverridden ) {\n\t\t\t// ENGAGE 2-SCM & REMOVE SELECTION ATTRIBUTE\n\t\t\t// when about to leave one attribute value and enter another:\n\t\t\t//\n\t\t\t// \t\t<paragraph><$text attribute=\"1\">foo</$text><$text attribute=\"2\">{}bar</$text></paragraph>\n\t\t\t//\n\t\t\t// but DON'T when already in between of them (no attribute selection):\n\t\t\t//\n\t\t\t// \t\t<paragraph><$text attribute=\"1\">foo</$text>{}<$text attribute=\"2\">bar</$text></paragraph>\n\t\t\t//\n\t\t\tif ( isBetweenDifferentValues( position, attribute ) && this._hasSelectionAttribute ) {\n\t\t\t\tthis._preventCaretMovement( data );\n\t\t\t\tthis._restoreGravity();\n\t\t\t\tthis._removeSelectionAttribute();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// ENGAGE 2-SCM when at any boundary of the attribute:\n\t\t\t//\n\t\t\t// \t\t<paragraph>foo<$text attribute>bar</$text>{}baz</paragraph>\n\t\t\t// \t\t<paragraph>foo<$text attribute>{}bar</$text>baz</paragraph>\n\t\t\t//\n\t\t\telse {\n\t\t\t\tthis._preventCaretMovement( data );\n\t\t\t\tthis._restoreGravity();\n\n\t\t\t\t// REMOVE SELECTION ATRIBUTE at the beginning of the block.\n\t\t\t\t// It's like restoring gravity but towards a non-existent content when\n\t\t\t\t// the gravity is overridden:\n\t\t\t\t//\n\t\t\t\t// \t\t<paragraph><$text attribute>{}bar</$text></paragraph>\n\t\t\t\t//\n\t\t\t\t// becomes:\n\t\t\t\t//\n\t\t\t\t// \t\t<paragraph>{}<$text attribute>bar</$text></paragraph>\n\t\t\t\t//\n\t\t\t\tif ( position.isAtStart ) {\n\t\t\t\t\tthis._removeSelectionAttribute();\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\t// ENGAGE 2-SCM when between two different attribute values but selection has no attribute:\n\t\t\t//\n\t\t\t// \t\t<paragraph><$text attribute=\"1\">foo</$text>{}<$text attribute=\"2\">bar</$text></paragraph>\n\t\t\t//\n\t\t\tif ( isBetweenDifferentValues( position, attribute ) && !this._hasSelectionAttribute ) {\n\t\t\t\tthis._preventCaretMovement( data );\n\t\t\t\tthis._setSelectionAttributeFromTheNodeBefore( position );\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// End of block boundary cases:\n\t\t\t//\n\t\t\t// \t\t<paragraph><$text attribute>bar{}</$text></paragraph>\n\t\t\t// \t\t<paragraph><$text attribute>bar</$text>{}</paragraph>\n\t\t\t//\n\t\t\tif ( position.isAtEnd && isAtEndBoundary( position, attribute ) ) {\n\t\t\t\t// DON'T ENGAGE 2-SCM if the selection has the attribute already.\n\t\t\t\t// This is a common selection if set using the mouse.\n\t\t\t\t//\n\t\t\t\t// \t\t<paragraph><$text attribute>bar{}</$text></paragraph>\n\t\t\t\t//\n\t\t\t\tif ( this._hasSelectionAttribute ) {\n\t\t\t\t\t// DON'T ENGAGE 2-SCM if the attribute at the end of the block which has length == 1.\n\t\t\t\t\t// Make sure the selection will not the attribute after it moves backwards.\n\t\t\t\t\t//\n\t\t\t\t\t// \t\t<paragraph>foo<$text attribute>b{}</$text></paragraph>\n\t\t\t\t\t//\n\t\t\t\t\tif ( isStepAfterTheAttributeBoundary( position, attribute ) ) {\n\t\t\t\t\t\t// Skip the automatic gravity restore upon the next selection#change:range event.\n\t\t\t\t\t\t// If not skipped, it would automatically restore the gravity, which should remain\n\t\t\t\t\t\t// overridden.\n\t\t\t\t\t\tthis._skipNextAutomaticGravityRestoration();\n\t\t\t\t\t\tthis._overrideGravity();\n\n\t\t\t\t\t\t// Don't return \"true\" here because we didn't call _preventCaretMovement.\n\t\t\t\t\t\t// Returning here will destabilize the filler logic, which also listens to\n\t\t\t\t\t\t// keydown (and the event would be stopped).\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// ENGAGE 2-SCM if the selection has no attribute. This may happen when the user\n\t\t\t\t// left the attribute using a FORWARD 2-SCM.\n\t\t\t\t//\n\t\t\t\t// \t\t<paragraph><$text attribute>bar</$text>{}</paragraph>\n\t\t\t\t//\n\t\t\t\telse {\n\t\t\t\t\tthis._preventCaretMovement( data );\n\t\t\t\t\tthis._setSelectionAttributeFromTheNodeBefore( position );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// REMOVE SELECTION ATRIBUTE when restoring gravity towards a non-existent content at the\n\t\t\t// beginning of the block.\n\t\t\t//\n\t\t\t// \t\t<paragraph>{}<$text attribute>bar</$text></paragraph>\n\t\t\t//\n\t\t\tif ( position.isAtStart ) {\n\t\t\t\tif ( this._hasSelectionAttribute ) {\n\t\t\t\t\tthis._removeSelectionAttribute();\n\t\t\t\t\tthis._preventCaretMovement( data );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// DON'T ENGAGE 2-SCM when about to enter of leave an attribute.\n\t\t\t// We need to check if the caret is a one position before the attribute boundary:\n\t\t\t//\n\t\t\t// \t\t<paragraph>foo<$text attribute>b{}ar</$text>baz</paragraph>\n\t\t\t// \t\t<paragraph>foo<$text attribute>bar</$text>b{}az</paragraph>\n\t\t\t//\n\t\t\tif ( isStepAfterTheAttributeBoundary( position, attribute ) ) {\n\t\t\t\t// Skip the automatic gravity restore upon the next selection#change:range event.\n\t\t\t\t// If not skipped, it would automatically restore the gravity, which should remain\n\t\t\t\t// overridden.\n\t\t\t\tthis._skipNextAutomaticGravityRestoration();\n\t\t\t\tthis._overrideGravity();\n\n\t\t\t\t// Don't return \"true\" here because we didn't call _preventCaretMovement.\n\t\t\t\t// Returning here will destabilize the filler logic, which also listens to\n\t\t\t\t// keydown (and the event would be stopped).\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * `true` when the gravity is overridden for the {@link #attribute}.\n\t *\n\t * @readonly\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _isGravityOverridden() {\n\t\treturn !!this._overrideUid;\n\t}\n\n\t/**\n\t * `true` when the {@link module:engine/model/selection~Selection} has the {@link #attribute}.\n\t *\n\t * @readonly\n\t * @private\n\t * @type {Boolean}\n\t */\n\tget _hasSelectionAttribute() {\n\t\treturn this._modelSelection.hasAttribute( this.attribute );\n\t}\n\n\t/**\n\t * Overrides the gravity using the {@link module:engine/model/writer~Writer model writer}\n\t * and stores the information about this fact in the {@link #_overrideUid}.\n\t *\n\t * A shorthand for {@link module:engine/model/writer~Writer#overrideSelectionGravity}.\n\t *\n\t * @private\n\t */\n\t_overrideGravity() {\n\t\tthis._overrideUid = this.model.change( writer => writer.overrideSelectionGravity() );\n\t}\n\n\t/**\n\t * Restores the gravity using the {@link module:engine/model/writer~Writer model writer}.\n\t *\n\t * A shorthand for {@link module:engine/model/writer~Writer#restoreSelectionGravity}.\n\t *\n\t * @private\n\t */\n\t_restoreGravity() {\n\t\tthis.model.change( writer => {\n\t\t\twriter.restoreSelectionGravity( this._overrideUid );\n\t\t\tthis._overrideUid = null;\n\t\t} );\n\t}\n\n\t/**\n\t * Prevents the caret movement in the view by calling `preventDefault` on the event data.\n\t *\n\t * @private\n\t */\n\t_preventCaretMovement( data ) {\n\t\tdata.preventDefault();\n\t}\n\n\t/**\n\t * Removes the {@link #attribute} from the selection using using the\n\t * {@link module:engine/model/writer~Writer model writer}.\n\t *\n\t * @private\n\t */\n\t_removeSelectionAttribute() {\n\t\tthis.model.change( writer => {\n\t\t\twriter.removeSelectionAttribute( this.attribute );\n\t\t} );\n\t}\n\n\t/**\n\t * Applies the {@link #attribute} to the current selection using using the\n\t * value from the node before the current position. Uses\n\t * the {@link module:engine/model/writer~Writer model writer}.\n\t *\n\t * @private\n\t * @param {module:engine/model/position~Position} position\n\t */\n\t_setSelectionAttributeFromTheNodeBefore( position ) {\n\t\tconst attribute = this.attribute;\n\n\t\tthis.model.change( writer => {\n\t\t\twriter.setSelectionAttribute( this.attribute, position.nodeBefore.getAttribute( attribute ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Skips the next automatic selection gravity restoration upon the\n\t * {@link module:engine/model/selection~Selection#event:change:range} event.\n\t *\n\t * See {@link #_isNextGravityRestorationSkipped}.\n\t *\n\t * @private\n\t */\n\t_skipNextAutomaticGravityRestoration() {\n\t\tthis._isNextGravityRestorationSkipped = true;\n\t}\n}\n\n// @param {module:engine/model/position~Position} position\n// @param {String} attribute\n// @returns {Boolean} `true` when position between the nodes sticks to the bound of text with given attribute.\nfunction isAtBoundary( position, attribute ) {\n\treturn isAtStartBoundary( position, attribute ) || isAtEndBoundary( position, attribute );\n}\n\n// @param {module:engine/model/position~Position} position\n// @param {String} attribute\nfunction isAtStartBoundary( position, attribute ) {\n\tconst { nodeBefore, nodeAfter } = position;\n\tconst isAttrBefore = nodeBefore ? nodeBefore.hasAttribute( attribute ) : false;\n\tconst isAttrAfter = nodeAfter ? nodeAfter.hasAttribute( attribute ) : false;\n\n\treturn isAttrAfter && ( !isAttrBefore || nodeBefore.getAttribute( attribute ) !== nodeAfter.getAttribute( attribute ) );\n}\n\n// @param {module:engine/model/position~Position} position\n// @param {String} attribute\nfunction isAtEndBoundary( position, attribute ) {\n\tconst { nodeBefore, nodeAfter } = position;\n\tconst isAttrBefore = nodeBefore ? nodeBefore.hasAttribute( attribute ) : false;\n\tconst isAttrAfter = nodeAfter ? nodeAfter.hasAttribute( attribute ) : false;\n\n\treturn isAttrBefore && ( !isAttrAfter || nodeBefore.getAttribute( attribute ) !== nodeAfter.getAttribute( attribute ) );\n}\n\n// @param {module:engine/model/position~Position} position\n// @param {String} attribute\nfunction isBetweenDifferentValues( position, attribute ) {\n\tconst { nodeBefore, nodeAfter } = position;\n\tconst isAttrBefore = nodeBefore ? nodeBefore.hasAttribute( attribute ) : false;\n\tconst isAttrAfter = nodeAfter ? nodeAfter.hasAttribute( attribute ) : false;\n\n\tif ( !isAttrAfter || !isAttrBefore ) {\n\t\treturn;\n\t}\n\n\treturn nodeAfter.getAttribute( attribute ) !== nodeBefore.getAttribute( attribute );\n}\n\n// @param {module:engine/model/position~Position} position\n// @param {String} attribute\nfunction isStepAfterTheAttributeBoundary( position, attribute ) {\n\treturn isAtBoundary( position.getShiftedBy( -1 ), attribute );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module link/linkediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { downcastAttributeToElement } from '@ckeditor/ckeditor5-engine/src/conversion/downcast-converters';\nimport { upcastElementToAttribute } from '@ckeditor/ckeditor5-engine/src/conversion/upcast-converters';\nimport LinkCommand from './linkcommand';\nimport UnlinkCommand from './unlinkcommand';\nimport { createLinkElement, ensureSafeUrl } from './utils';\nimport bindTwoStepCaretToAttribute from '@ckeditor/ckeditor5-engine/src/utils/bindtwostepcarettoattribute';\nimport findLinkRange from './findlinkrange';\nimport '../theme/link.css';\n\nconst HIGHLIGHT_CLASS = 'ck-link_selected';\n\n/**\n * The link engine feature.\n *\n * It introduces the `linkHref=\"url\"` attribute in the model which renders to the view as a `<a href=\"url\">` element\n * as well as `'link'` and `'unlink'` commands.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class LinkEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Allow link attribute on all inline nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: 'linkHref' } );\n\n\t\teditor.conversion.for( 'dataDowncast' )\n\t\t\t.add( downcastAttributeToElement( { model: 'linkHref', view: createLinkElement } ) );\n\n\t\teditor.conversion.for( 'editingDowncast' )\n\t\t\t.add( downcastAttributeToElement( { model: 'linkHref', view: ( href, writer ) => {\n\t\t\t\treturn createLinkElement( ensureSafeUrl( href ), writer );\n\t\t\t} } ) );\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t.add( upcastElementToAttribute( {\n\t\t\t\tview: {\n\t\t\t\t\tname: 'a',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\thref: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmodel: {\n\t\t\t\t\tkey: 'linkHref',\n\t\t\t\t\tvalue: viewElement => viewElement.getAttribute( 'href' )\n\t\t\t\t}\n\t\t\t} ) );\n\n\t\t// Create linking commands.\n\t\teditor.commands.add( 'link', new LinkCommand( editor ) );\n\t\teditor.commands.add( 'unlink', new UnlinkCommand( editor ) );\n\n\t\t// Enable two-step caret movement for `linkHref` attribute.\n\t\tbindTwoStepCaretToAttribute( editor.editing.view, editor.model, this, 'linkHref' );\n\n\t\t// Setup highlight over selected link.\n\t\tthis._setupLinkHighlight();\n\t}\n\n\t/**\n\t * Adds a visual highlight style to a link in which the selection is anchored.\n\t * Together with two-step caret movement, they indicate that the user is typing inside the link.\n\t *\n\t * Highlight is turned on by adding `.ck-link_selected` class to the link in the view:\n\t *\n\t * * the class is removed before conversion has started, as callbacks added with `'highest'` priority\n\t * to {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} events,\n\t * * the class is added in the view post fixer, after other changes in the model tree were converted to the view.\n\t *\n\t * This way, adding and removing highlight does not interfere with conversion.\n\t *\n\t * @private\n\t */\n\t_setupLinkHighlight() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst highlightedLinks = new Set();\n\n\t\t// Adding the class.\n\t\tview.document.registerPostFixer( writer => {\n\t\t\tconst selection = editor.model.document.selection;\n\n\t\t\tif ( selection.hasAttribute( 'linkHref' ) ) {\n\t\t\t\tconst modelRange = findLinkRange( selection.getFirstPosition(), selection.getAttribute( 'linkHref' ), editor.model );\n\t\t\t\tconst viewRange = editor.editing.mapper.toViewRange( modelRange );\n\n\t\t\t\t// There might be multiple `a` elements in the `viewRange`, for example, when the `a` element is\n\t\t\t\t// broken by a UIElement.\n\t\t\t\tfor ( const item of viewRange.getItems() ) {\n\t\t\t\t\tif ( item.is( 'a' ) ) {\n\t\t\t\t\t\twriter.addClass( HIGHLIGHT_CLASS, item );\n\t\t\t\t\t\thighlightedLinks.add( item );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// Removing the class.\n\t\teditor.conversion.for( 'editingDowncast' ).add( dispatcher => {\n\t\t\t// Make sure the highlight is removed on every possible event, before conversion is started.\n\t\t\tdispatcher.on( 'insert', removeHighlight, { priority: 'highest' } );\n\t\t\tdispatcher.on( 'remove', removeHighlight, { priority: 'highest' } );\n\t\t\tdispatcher.on( 'attribute', removeHighlight, { priority: 'highest' } );\n\t\t\tdispatcher.on( 'selection', removeHighlight, { priority: 'highest' } );\n\n\t\t\tfunction removeHighlight() {\n\t\t\t\tview.change( writer => {\n\t\t\t\t\tfor ( const item of highlightedLinks.values() ) {\n\t\t\t\t\t\twriter.removeClass( HIGHLIGHT_CLASS, item );\n\t\t\t\t\t\thighlightedLinks.delete( item );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n}\n","\n/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/clickobserver\n */\n\nimport DomEventObserver from './domeventobserver';\n\n/**\n * {@link module:engine/view/document~Document#event:click Click} event observer.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View view controller}\n * by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\nexport default class ClickObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = 'click';\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n/**\n * Fired when one of the editables has been clicked.\n *\n * Introduced by {@link module:engine/view/observer/clickobserver~ClickObserver}.\n *\n * Note that this event is not available by default. To make it available\n * {@link module:engine/view/observer/clickobserver~ClickObserver} needs to be added\n * to {@link module:engine/view/view~View} by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @see module:engine/view/observer/clickobserver~ClickObserver\n * @event module:engine/view/document~Document#event:click\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/label/labelview\n */\n\nimport View from '../view';\n\nimport '../../theme/components/label/label.css';\n\n/**\n * The label view class.\n *\n * @extends module:ui/view~View\n */\nexport default class LabelView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t * The text of the label.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #text\n\t\t */\n\t\tthis.set( 'text' );\n\n\t\t/**\n\t\t * The `for` attribute of the label (i.e. to pair with an `<input>` element).\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #for\n\t\t */\n\t\tthis.set( 'for' );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'label',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-label'\n\t\t\t\t],\n\t\t\t\tfor: bind.to( 'for' )\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: bind.to( 'text' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/labeledinput/labeledinputview\n */\n\nimport View from '../view';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport LabelView from '../label/labelview';\nimport '../../theme/components/labeledinput/labeledinput.css';\n\n/**\n * The labeled input view class.\n *\n * @extends module:ui/view~View\n */\nexport default class LabeledInputView extends View {\n\t/**\n\t * Creates an instance of the labeled input view class.\n\t *\n\t * @param {module:utils/locale~Locale} locale The locale instance.\n\t * @param {Function} InputView Constructor of the input view.\n\t */\n\tconstructor( locale, InputView ) {\n\t\tsuper( locale );\n\n\t\tconst inputUid = `ck-input-${ uid() }`;\n\t\tconst statusUid = `ck-status-${ uid() }`;\n\n\t\t/**\n\t\t * The text of the label.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #label\n\t\t */\n\t\tthis.set( 'label' );\n\n\t\t/**\n\t\t * The value of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #value\n\t\t */\n\t\tthis.set( 'value' );\n\n\t\t/**\n\t\t * Controls whether the component is in read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * The validation error text. When set, it will be displayed\n\t\t * next to the {@link #inputView} as a typical validation error message.\n\t\t * Set it to `null` to hide the message.\n\t\t *\n\t\t * **Note:** Setting this property to anything but `null` will automatically\n\t\t * make the {@link module:ui/inputtext/inputtextview~InputTextView#hasError `hasError`}\n\t\t * of the {@link #inputView} `true`.\n\t\t *\n\t\t * **Note:** Typing in the {@link #inputView} which fires the\n\t\t * {@link module:ui/inputtext/inputtextview~InputTextView#event:input `input` event}\n\t\t * resets this property back to `null`, indicating that the input field can be re–validated.\n\t\t *\n\t\t * @observable\n\t\t * @member {String|null} #errorText\n\t\t */\n\t\tthis.set( 'errorText', null );\n\n\t\t/**\n\t\t * The additional information text displayed next to the {@link #inputView} which can\n\t\t * be used to inform the user about the purpose of the input, provide help or hints.\n\t\t *\n\t\t * Set it to `null` to hide the message.\n\t\t *\n\t\t * **Note:** This text will be displayed in the same place as {@link #errorText} but the\n\t\t * latter always takes precedence: if the {@link #errorText} is set, it replaces\n\t\t * {@link #errorText} for as long as the value of the input is invalid.\n\t\t *\n\t\t * @observable\n\t\t * @member {String|null} #infoText\n\t\t */\n\t\tthis.set( 'infoText', null );\n\n\t\t/**\n\t\t * The label view.\n\t\t *\n\t\t * @member {module:ui/label/labelview~LabelView} #labelView\n\t\t */\n\t\tthis.labelView = this._createLabelView( inputUid );\n\n\t\t/**\n\t\t * The input view.\n\t\t *\n\t\t * @member {module:ui/inputtext/inputtextview~InputTextView} #inputView\n\t\t */\n\t\tthis.inputView = this._createInputView( InputView, inputUid, statusUid );\n\n\t\t/**\n\t\t * The status view for the {@link #inputView}. It displays {@link #errorText} and\n\t\t * {@link #infoText}.\n\t\t *\n\t\t * @member {module:ui/view~View} #statusView\n\t\t */\n\t\tthis.statusView = this._createStatusView( statusUid );\n\n\t\t/**\n\t\t * The combined status text made of {@link #errorText} and {@link #infoText}.\n\t\t * Note that when present, {@link #errorText} always takes precedence in the\n\t\t * status.\n\t\t *\n\t\t * @see #errorText\n\t\t * @see #infoText\n\t\t * @see #statusView\n\t\t * @private\n\t\t * @observable\n\t\t * @member {String|null} #_statusText\n\t\t */\n\t\tthis.bind( '_statusText' ).to(\n\t\t\tthis, 'errorText',\n\t\t\tthis, 'infoText',\n\t\t\t( errorText, infoText ) => errorText || infoText\n\t\t);\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-labeled-input',\n\t\t\t\t\tbind.if( 'isReadOnly', 'ck-disabled' )\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis.labelView,\n\t\t\t\tthis.inputView,\n\t\t\t\tthis.statusView\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * Creates label view class instance and bind with view.\n\t *\n\t * @private\n\t * @param {String} id Unique id to set as labelView#for attribute.\n\t * @returns {module:ui/label/labelview~LabelView}\n\t */\n\t_createLabelView( id ) {\n\t\tconst labelView = new LabelView( this.locale );\n\n\t\tlabelView.for = id;\n\t\tlabelView.bind( 'text' ).to( this, 'label' );\n\n\t\treturn labelView;\n\t}\n\n\t/**\n\t * Creates input view class instance and bind with view.\n\t *\n\t * @private\n\t * @param {Function} InputView Input view constructor.\n\t * @param {String} inputUid Unique id to set as inputView#id attribute.\n\t * @param {String} statusUid Unique id of the status for the input's `aria-describedby` attribute.\n\t * @returns {module:ui/inputtext/inputtextview~InputTextView}\n\t */\n\t_createInputView( InputView, inputUid, statusUid ) {\n\t\tconst inputView = new InputView( this.locale, statusUid );\n\n\t\tinputView.id = inputUid;\n\t\tinputView.ariaDesribedById = statusUid;\n\t\tinputView.bind( 'value' ).to( this );\n\t\tinputView.bind( 'isReadOnly' ).to( this );\n\t\tinputView.bind( 'hasError' ).to( this, 'errorText', value => !!value );\n\n\t\tinputView.on( 'input', () => {\n\t\t\t// UX: Make the error text disappear and disable the error indicator as the user\n\t\t\t// starts fixing the errors.\n\t\t\tthis.errorText = null;\n\t\t} );\n\n\t\treturn inputView;\n\t}\n\n\t/**\n\t * Creates the status view instance. It displays {@link #errorText} and {@link #infoText}\n\t * next to the {@link #inputView}. See {@link #_statusText}.\n\t *\n\t * @private\n\t * @param {String} statusUid Unique id of the status, shared with the input's `aria-describedby` attribute.\n\t * @returns {module:ui/view~View}\n\t */\n\t_createStatusView( statusUid ) {\n\t\tconst statusView = new View( this.locale );\n\t\tconst bind = this.bindTemplate;\n\n\t\tstatusView.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-labeled-input__status',\n\t\t\t\t\tbind.if( 'errorText', 'ck-labeled-input__status_error' ),\n\t\t\t\t\tbind.if( '_statusText', 'ck-hidden', value => !value )\n\t\t\t\t],\n\t\t\t\tid: statusUid\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: bind.to( '_statusText' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn statusView;\n\t}\n\n\t/**\n\t * Moves the focus to the input and selects the value.\n\t */\n\tselect() {\n\t\tthis.inputView.select();\n\t}\n\n\t/**\n\t * Focuses the input.\n\t */\n\tfocus() {\n\t\tthis.inputView.focus();\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module link/ui/linkformview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport LabeledInputView from '@ckeditor/ckeditor5-ui/src/labeledinput/labeledinputview';\nimport InputTextView from '@ckeditor/ckeditor5-ui/src/inputtext/inputtextview';\nimport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport checkIcon from '@ckeditor/ckeditor5-core/theme/icons/check.svg';\nimport cancelIcon from '@ckeditor/ckeditor5-core/theme/icons/cancel.svg';\nimport '../../theme/linkform.css';\n/**\n * The link form view controller class.\n *\n * See {@link module:link/ui/linkformview~LinkFormView}.\n *\n * @extends module:ui/view~View\n */\nexport default class LinkFormView extends View {\n    /**\n\t * @inheritDoc\n\t */\n    constructor(locale) {\n        super(locale);\n        const t = locale.t;\n        /**\n\t\t * Tracks information about DOM focus in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n\t\t * The URL input view.\n\t\t *\n\t\t * @member {module:ui/labeledinput/labeledinputview~LabeledInputView}\n\t\t */\n        this.urlInputView = this._createUrlInput();\n        /**\n\t\t * The Save button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.saveButtonView = this._createButton(t('ah'), checkIcon, 'ck-button-save');\n        this.saveButtonView.type = 'submit';\n        /**\n\t\t * The Cancel button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.cancelButtonView = this._createButton(t('ai'), cancelIcon, 'ck-button-cancel', 'cancel');\n        /**\n\t\t * A collection of views which can be focused in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this._focusables = new ViewCollection();\n        /**\n\t\t * Helps cycling over {@link #_focusables} in the form.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-link-form'\n                ],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: [\n                this.urlInputView,\n                this.saveButtonView,\n                this.cancelButtonView\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        submitHandler({ view: this });\n        const childViews = [\n            this.urlInputView,\n            this.saveButtonView,\n            this.cancelButtonView\n        ];\n        childViews.forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * Focuses the fist {@link #_focusables} in the form.\n\t */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Creates a labeled input view.\n\t *\n\t * @private\n\t * @returns {module:ui/labeledinput/labeledinputview~LabeledInputView} Labeled input view instance.\n\t */\n    _createUrlInput() {\n        const t = this.locale.t;\n        const labeledInput = new LabeledInputView(this.locale, InputTextView);\n        labeledInput.label = t('aj');\n        labeledInput.inputView.placeholder = 'https://example.com';\n        return labeledInput;\n    }\n    /**\n\t * Creates a button view.\n\t *\n\t * @private\n\t * @param {String} label The button label.\n\t * @param {String} icon The button's icon.\n\t * @param {String} className The additional button CSS class name.\n\t * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n    _createButton(label, icon, className, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.extendTemplate({ attributes: { class: className } });\n        if (eventName) {\n            button.delegate('execute').to(this, eventName);\n        }\n        return button;\n    }\n}    /**\n * Fired when the form view is submitted (when one of the children triggered the submit event),\n * e.g. click on {@link #saveButtonView}.\n *\n * @event submit\n */\n     /**\n * Fired when the form view is canceled, e.g. click on {@link #cancelButtonView}.\n *\n * @event cancel\n */","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/bindings/submithandler\n */\n\n/**\n * A handler useful for {@link module:ui/view~View views} working as HTML forms. It intercepts a native DOM\n * `submit` event, prevents the default web browser behavior (navigation and page reload) and\n * fires the `submit` event on a view instead. Such a custom event can be then used by any\n * {@link module:utils/dom/emittermixin~Emitter emitter}, e.g. to serialize the form data.\n *\n *\t\timport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\n *\n *\t\t// ...\n *\n *\t\tclass AnyFormView extends View {\n *\t\t\tconstructor() {\n *\t\t\t\tsuper();\n *\n *\t\t\t\t// ...\n *\n *\t\t\t\tsubmitHandler( {\n *\t\t\t\t\tview: this\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n *\t\t// ...\n *\n *\t\tconst view = new AnyFormView();\n *\n *\t\t// A sample listener attached by an emitter working with the view.\n *\t\tthis.listenTo( view, 'submit', () => {\n *\t\t\tsaveTheFormData();\n *\t\t\thideTheForm();\n *\t\t} );\n *\n * @param {Object} [options] Configuration options.\n * @param {module:ui/view~View} options.view The view which DOM `submit` events should be handled.\n */\nexport default function submitHandler( { view } ) {\n\tview.listenTo( view.element, 'submit', ( evt, domEvt ) => {\n\t\tdomEvt.preventDefault();\n\t\tview.fire( 'submit' );\n\t}, { useCapture: true } );\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module link/ui/linkactionsview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport { ensureSafeUrl } from '../utils';\nimport unlinkIcon from '../../theme/icons/unlink.svg';\nimport pencilIcon from '@ckeditor/ckeditor5-core/theme/icons/pencil.svg';\nimport '../../theme/linkactions.css';\n/**\n * The link actions view class. This view displays link preview, allows\n * unlinking or editing the link.\n *\n * @extends module:ui/view~View\n */\nexport default class LinkActionsView extends View {\n    /**\n\t * @inheritDoc\n\t */\n    constructor(locale) {\n        super(locale);\n        const t = locale.t;\n        /**\n\t\t * Tracks information about DOM focus in the actions.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n        this.focusTracker = new FocusTracker();\n        /**\n\t\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n\t\t * The href preview view.\n\t\t *\n\t\t * @member {module:ui/view~View}\n\t\t */\n        this.previewButtonView = this._createPreviewButton();\n        /**\n\t\t * The unlink button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.unlinkButtonView = this._createButton(t('ad'), unlinkIcon, 'unlink');\n        /**\n\t\t * The edit link button view.\n\t\t *\n\t\t * @member {module:ui/button/buttonview~ButtonView}\n\t\t */\n        this.editButtonView = this._createButton(t('ae'), pencilIcon, 'edit');\n        /**\n\t\t * Value of the \"href\" attribute of the link to use in the {@link #previewButtonView}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String}\n\t\t */\n        this.set('href');\n        /**\n\t\t * A collection of views which can be focused in the view.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n        this._focusables = new ViewCollection();\n        /**\n\t\t * Helps cycling over {@link #_focusables} in the view.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-link-actions'\n                ],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: [\n                this.previewButtonView,\n                this.editButtonView,\n                this.unlinkButtonView\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    render() {\n        super.render();\n        const childViews = [\n            this.previewButtonView,\n            this.editButtonView,\n            this.unlinkButtonView\n        ];\n        childViews.forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * Focuses the fist {@link #_focusables} in the actions.\n\t */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Creates a button view.\n\t *\n\t * @private\n\t * @param {String} label The button label.\n\t * @param {String} icon The button's icon.\n\t * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n    _createButton(label, icon, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.delegate('execute').to(this, eventName);\n        return button;\n    }\n    /**\n\t * Creates a link href preview button.\n\t *\n\t * @private\n\t * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n\t */\n    _createPreviewButton() {\n        const button = new ButtonView(this.locale);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        button.set({\n            withText: true,\n            tooltip: t('af')\n        });\n        button.extendTemplate({\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-link-actions__preview'\n                ],\n                href: bind.to('href', href => href && ensureSafeUrl(href)),\n                target: '_blank'\n            }\n        });\n        button.bind('label').to(this, 'href', href => {\n            return href || t('ag');\n        });\n        button.bind('isEnabled').to(this, 'href', href => !!href);\n        button.template.tag = 'a';\n        button.template.eventListeners = {};\n        return button;\n    }\n}    /**\n * Fired when the {@link #editButtonView} is clicked.\n *\n * @event edit\n */\n     /**\n * Fired when the {@link #unlinkButtonView} is clicked.\n *\n * @event unlink\n */","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * @module link/linkui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ClickObserver from '@ckeditor/ckeditor5-engine/src/view/observer/clickobserver';\nimport { isLinkElement } from './utils';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport LinkFormView from './ui/linkformview';\nimport LinkActionsView from './ui/linkactionsview';\nimport linkIcon from '../theme/icons/link.svg';\nconst linkKeystroke = 'Ctrl+K';\n/**\n * The link UI plugin. It introduces the `'link'` and `'unlink'` buttons and support for the <kbd>Ctrl+K</kbd> keystroke.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class LinkUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        editor.editing.view.addObserver(ClickObserver);\n        /**\n\t\t * The actions view displayed inside of the balloon.\n\t\t *\n\t\t * @member {module:link/ui/linkactionsview~LinkActionsView}\n\t\t */\n        this.actionsView = this._createActionsView();\n        /**\n\t\t * The form view displayed inside the balloon.\n\t\t *\n\t\t * @member {module:link/ui/linkformview~LinkFormView}\n\t\t */\n        this.formView = this._createFormView();\n        /**\n\t\t * The contextual balloon plugin instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n\t\t */\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        // Create toolbar buttons.\n        this._createToolbarLinkButton();\n        // Attach lifecycle actions to the the balloon.\n        this._enableUserBalloonInteractions();\n    }\n    /**\n\t * Creates the {@link module:link/ui/linkactionsview~LinkActionsView} instance.\n\t *\n\t * @private\n\t * @returns {module:link/ui/linkactionsview~LinkActionsView} The link actions view instance.\n\t */\n    _createActionsView() {\n        const editor = this.editor;\n        const actionsView = new LinkActionsView(editor.locale);\n        const linkCommand = editor.commands.get('link');\n        const unlinkCommand = editor.commands.get('unlink');\n        actionsView.bind('href').to(linkCommand, 'value');\n        actionsView.editButtonView.bind('isEnabled').to(linkCommand);\n        actionsView.unlinkButtonView.bind('isEnabled').to(unlinkCommand);\n        // Execute unlink command after clicking on the \"Edit\" button.\n        this.listenTo(actionsView, 'edit', () => {\n            this._addFormView();\n        });\n        // Execute unlink command after clicking on the \"Unlink\" button.\n        this.listenTo(actionsView, 'unlink', () => {\n            editor.execute('unlink');\n            this._hideUI();\n        });\n        // Close the panel on esc key press when the **actions have focus**.\n        actionsView.keystrokes.set('Esc', (data, cancel) => {\n            this._hideUI();\n            cancel();\n        });\n        // Open the form view on Ctrl+K when the **actions have focus**..\n        actionsView.keystrokes.set(linkKeystroke, (data, cancel) => {\n            this._addFormView();\n            cancel();\n        });\n        return actionsView;\n    }\n    /**\n\t * Creates the {@link module:link/ui/linkformview~LinkFormView} instance.\n\t *\n\t * @private\n\t * @returns {module:link/ui/linkformview~LinkFormView} The link form instance.\n\t */\n    _createFormView() {\n        const editor = this.editor;\n        const formView = new LinkFormView(editor.locale);\n        const linkCommand = editor.commands.get('link');\n        formView.urlInputView.bind('value').to(linkCommand, 'value');\n        // Form elements should be read-only when corresponding commands are disabled.\n        formView.urlInputView.bind('isReadOnly').to(linkCommand, 'isEnabled', value => !value);\n        formView.saveButtonView.bind('isEnabled').to(linkCommand);\n        // Execute link command after clicking the \"Save\" button.\n        this.listenTo(formView, 'submit', () => {\n            editor.execute('link', formView.urlInputView.inputView.element.value);\n            this._removeFormView();\n        });\n        // Hide the panel after clicking the \"Cancel\" button.\n        this.listenTo(formView, 'cancel', () => {\n            this._removeFormView();\n        });\n        // Close the panel on esc key press when the **form has focus**.\n        formView.keystrokes.set('Esc', (data, cancel) => {\n            this._removeFormView();\n            cancel();\n        });\n        return formView;\n    }\n    /**\n\t * Creates a toolbar Link button. Clicking this button will show\n\t * a {@link #_balloon} attached to the selection.\n\t *\n\t * @private\n\t */\n    _createToolbarLinkButton() {\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        const t = editor.t;\n        // Handle the `Ctrl+K` keystroke and show the panel.\n        editor.keystrokes.set(linkKeystroke, (keyEvtData, cancel) => {\n            // Prevent focusing the search bar in FF and opening new tab in Edge. #153, #154.\n            cancel();\n            if (linkCommand.isEnabled) {\n                this._showUI();\n            }\n        });\n        editor.ui.componentFactory.add('link', locale => {\n            const button = new ButtonView(locale);\n            button.isEnabled = true;\n            button.label = t('ac');\n            button.icon = linkIcon;\n            button.keystroke = linkKeystroke;\n            button.tooltip = true;\n            // Bind button to the command.\n            button.bind('isOn', 'isEnabled').to(linkCommand, 'value', 'isEnabled');\n            // Show the panel on button click.\n            this.listenTo(button, 'execute', () => this._showUI());\n            return button;\n        });\n    }\n    /**\n\t * Attaches actions that control whether the balloon panel containing the\n\t * {@link #formView} is visible or not.\n\t *\n\t * @private\n\t */\n    _enableUserBalloonInteractions() {\n        const viewDocument = this.editor.editing.view.document;\n        // Handle click on view document and show panel when selection is placed inside the link element.\n        // Keep panel open until selection will be inside the same link element.\n        this.listenTo(viewDocument, 'click', () => {\n            const parentLink = this._getSelectedLinkElement();\n            if (parentLink) {\n                // Then show panel but keep focus inside editor editable.\n                this._showUI();\n            }\n        });\n        // Focus the form if the balloon is visible and the Tab key has been pressed.\n        this.editor.keystrokes.set('Tab', (data, cancel) => {\n            if (this._areActionsVisible && !this.actionsView.focusTracker.isFocused) {\n                this.actionsView.focus();\n                cancel();\n            }\n        }, {\n            // Use the high priority because the link UI navigation is more important\n            // than other feature's actions, e.g. list indentation.\n            // https://github.com/ckeditor/ckeditor5-link/issues/146\n            priority: 'high'\n        });\n        // Close the panel on the Esc key press when the editable has focus and the balloon is visible.\n        this.editor.keystrokes.set('Esc', (data, cancel) => {\n            if (this._isUIVisible) {\n                this._hideUI();\n                cancel();\n            }\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: this.formView,\n            activator: () => this._isUIVisible,\n            contextElements: [this._balloon.view.element],\n            callback: () => this._hideUI()\n        });\n    }\n    /**\n\t * Adds the {@link #actionsView} to the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n    _addActionsView() {\n        if (this._areActionsInPanel) {\n            return;\n        }\n        this._balloon.add({\n            view: this.actionsView,\n            position: this._getBalloonPositionData()\n        });\n    }\n    /**\n\t * Adds the {@link #formView} to the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n    _addFormView() {\n        if (this._isFormInPanel) {\n            return;\n        }\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        this._balloon.add({\n            view: this.formView,\n            position: this._getBalloonPositionData()\n        });\n        this.formView.urlInputView.select();\n        // Make sure that each time the panel shows up, the URL field remains in sync with the value of\n        // the command. If the user typed in the input, then canceled the balloon (`urlInputView#value` stays\n        // unaltered) and re-opened it without changing the value of the link command (e.g. because they\n        // clicked the same link), they would see the old value instead of the actual value of the command.\n        // https://github.com/ckeditor/ckeditor5-link/issues/78\n        // https://github.com/ckeditor/ckeditor5-link/issues/123\n        this.formView.urlInputView.inputView.element.value = linkCommand.value || '';\n    }\n    /**\n\t * Removes the {@link #formView} from the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n    _removeFormView() {\n        if (this._isFormInPanel) {\n            this._balloon.remove(this.formView);\n            // Because the form has an input which has focus, the focus must be brought back\n            // to the editor. Otherwise, it would be lost.\n            this.editor.editing.view.focus();\n        }\n    }\n    /**\n\t * Shows the right kind of the UI for current state of the command. It's either\n\t * {@link #formView} or {@link #actionsView}.\n\t *\n\t * @private\n\t */\n    _showUI() {\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        if (!linkCommand.isEnabled) {\n            return;\n        }\n        // When there's no link under the selection, go straight to the editing UI.\n        if (!this._getSelectedLinkElement()) {\n            this._addActionsView();\n            this._addFormView();\n        }    // If theres a link under the selection...\n        else {\n            // Go to the editing UI if actions are already visible.\n            if (this._areActionsVisible) {\n                this._addFormView();\n            }    // Otherwise display just the actions UI.\n            else {\n                this._addActionsView();\n            }\n        }\n        // Begin responding to ui#update once the UI is added.\n        this._startUpdatingUI();\n    }\n    /**\n\t * Removes the {@link #formView} from the {@link #_balloon}.\n\t *\n\t * See {@link #_addFormView}, {@link #_addActionsView}.\n\t *\n\t * @protected\n\t */\n    _hideUI() {\n        if (!this._isUIInPanel) {\n            return;\n        }\n        const editor = this.editor;\n        this.stopListening(editor.ui, 'update');\n        // Remove form first because it's on top of the stack.\n        this._removeFormView();\n        // Then remove the actions view because it's beneath the form.\n        this._balloon.remove(this.actionsView);\n        // Make sure the focus always gets back to the editable.\n        editor.editing.view.focus();\n    }\n    /**\n\t * Makes the UI react to the {@link module:core/editor/editorui~EditorUI#event:update} event to\n\t * reposition itself when the editor ui should be refreshed.\n\t *\n\t * See: {@link #_hideUI} to learn when the UI stops reacting to the `update` event.\n\t *\n\t * @protected\n\t */\n    _startUpdatingUI() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        let prevSelectedLink = this._getSelectedLinkElement();\n        let prevSelectionParent = getSelectionParent();\n        this.listenTo(editor.ui, 'update', () => {\n            const selectedLink = this._getSelectedLinkElement();\n            const selectionParent = getSelectionParent();\n            // Hide the panel if:\n            //\n            // * the selection went out of the EXISTING link element. E.g. user moved the caret out\n            //   of the link,\n            // * the selection went to a different parent when creating a NEW link. E.g. someone\n            //   else modified the document.\n            // * the selection has expanded (e.g. displaying link actions then pressing SHIFT+Right arrow).\n            //\n            // Note: #_getSelectedLinkElement will return a link for a non-collapsed selection only\n            // when fully selected.\n            if (prevSelectedLink && !selectedLink || !prevSelectedLink && selectionParent !== prevSelectionParent) {\n                this._hideUI();\n            }    // Update the position of the panel when:\n                 //  * the selection remains in the original link element,\n                 //  * there was no link element in the first place, i.e. creating a new link\n            else {\n                // If still in a link element, simply update the position of the balloon.\n                // If there was no link (e.g. inserting one), the balloon must be moved\n                // to the new position in the editing view (a new native DOM range).\n                this._balloon.updatePosition(this._getBalloonPositionData());\n            }\n            prevSelectedLink = selectedLink;\n            prevSelectionParent = selectionParent;\n        });\n        function getSelectionParent() {\n            return viewDocument.selection.focus.getAncestors().reverse().find(node => node.is('element'));\n        }\n    }\n    /**\n\t * Returns true when {@link #formView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _isFormInPanel() {\n        return this._balloon.hasView(this.formView);\n    }\n    /**\n\t * Returns true when {@link #actionsView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _areActionsInPanel() {\n        return this._balloon.hasView(this.actionsView);\n    }\n    /**\n\t * Returns true when {@link #actionsView} is in the {@link #_balloon} and it is\n\t * currently visible.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _areActionsVisible() {\n        return this._balloon.visibleView === this.actionsView;\n    }\n    /**\n\t * Returns true when {@link #actionsView} or {@link #formView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _isUIInPanel() {\n        return this._isFormInPanel || this._areActionsInPanel;\n    }\n    /**\n\t * Returns true when {@link #actionsView} or {@link #formView} is in the {@link #_balloon} and it is\n\t * currently visible.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n    get _isUIVisible() {\n        const visibleView = this._balloon.visibleView;\n        return visibleView == this.formView || this._areActionsVisible;\n    }\n    /**\n\t * Returns positioning options for the {@link #_balloon}. They control the way the balloon is attached\n\t * to the target element or selection.\n\t *\n\t * If the selection is collapsed and inside a link element, the panel will be attached to the\n\t * entire link element. Otherwise, it will be attached to the selection.\n\t *\n\t * @private\n\t * @returns {module:utils/dom/position~Options}\n\t */\n    _getBalloonPositionData() {\n        const view = this.editor.editing.view;\n        const viewDocument = view.document;\n        const targetLink = this._getSelectedLinkElement();\n        const target = targetLink ? // When selection is inside link element, then attach panel to this element.\n        view.domConverter.mapViewToDom(targetLink) : // Otherwise attach panel to the selection.\n        view.domConverter.viewRangeToDom(viewDocument.selection.getFirstRange());\n        return { target };\n    }\n    /**\n\t * Returns the link {@link module:engine/view/attributeelement~AttributeElement} under\n\t * the {@link module:engine/view/document~Document editing view's} selection or `null`\n\t * if there is none.\n\t *\n\t * **Note**: For a non–collapsed selection the link element is only returned when **fully**\n\t * selected and the **only** element within the selection boundaries.\n\t *\n\t * @private\n\t * @returns {module:engine/view/attributeelement~AttributeElement|null}\n\t */\n    _getSelectedLinkElement() {\n        const view = this.editor.editing.view;\n        const selection = view.document.selection;\n        if (selection.isCollapsed) {\n            return findLinkElementAncestor(selection.getFirstPosition());\n        } else {\n            // The range for fully selected link is usually anchored in adjacent text nodes.\n            // Trim it to get closer to the actual link element.\n            const range = selection.getFirstRange().getTrimmed();\n            const startLink = findLinkElementAncestor(range.start);\n            const endLink = findLinkElementAncestor(range.end);\n            if (!startLink || startLink != endLink) {\n                return null;\n            }\n            // Check if the link element is fully selected.\n            if (view.createRangeIn(startLink).getTrimmed().isEqual(range)) {\n                return startLink;\n            } else {\n                return null;\n            }\n        }\n    }\n}\n// Returns a link element if there's one among the ancestors of the provided `Position`.\n//\n// @private\n// @param {module:engine/view/position~Position} View position to analyze.\n// @returns {module:engine/view/attributeelement~AttributeElement|null} Link element at the position or null.\nfunction findLinkElementAncestor(position) {\n    return position.getAncestors().find(ancestor => isLinkElement(ancestor));\n}","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module link/link\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport LinkEditing from './linkediting';\nimport LinkUI from './linkui';\n\n/**\n * The link plugin.\n *\n * This is a \"glue\" plugin which loads the {@link module:link/linkediting~LinkEditing link editing feature}\n * and {@link module:link/linkui~LinkUI link UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Link extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ LinkEditing, LinkUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Link';\n\t}\n}\n","/**\n * @module linkit/linkcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport findLinkRange from '@ckeditor/ckeditor5-link/src/findlinkrange';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\n\n/**\n * The link command. It is used by the {@link module:link/link~Link link feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class LinkitCommand extends Command {\n\t/**\n   * The value of the `'linkHref'` attribute if the start of the selection is located in a node with this attribute.\n   *\n   * @observable\n   * @readonly\n   * @member {Object|undefined} #value\n   */\n\n\t/**\n   * @inheritDoc\n   */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tthis.attributes = doc.selection.getAttributes();\n\t\tthis.value = doc.selection.getAttribute( 'linkHref' );\n\t\tthis.isEnabled = model.schema.checkAttributeInSelection( doc.selection, 'linkHref' );\n\t}\n\n\t/**\n   * Executes the command.\n   *\n   * When the selection is non-collapsed, the `linkHref` attribute will be applied to nodes inside the selection, but only to\n   * those nodes where the `linkHref` attribute is allowed (disallowed nodes will be omitted).\n   *\n   * When the selection is collapsed and is not inside the text with the `linkHref` attribute, the\n   * new {@link module:engine/model/text~Text Text node} with the `linkHref` attribute will be inserted in place of caret, but\n   * only if such element is allowed in this place. The `_data` of the inserted text will equal the `href` parameter.\n   * The selection will be updated to wrap the just inserted text node.\n   *\n   * When the selection is collapsed and inside the text with the `linkHref` attribute, the attribute value will be updated.\n   *\n   * @fires execute\n   * @param {String} href Link destination.\n   */\n\texecute( attrs ) {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tmodel.change( writer => {\n\t\t\t// If selection is collapsed then update selected link or insert new one at the place of caret.\n\t\t\tif ( selection.isCollapsed ) {\n\t\t\t\tconst position = selection.getFirstPosition();\n\n\t\t\t\t// When selection is inside text with `linkHref` attribute.\n\t\t\t\tif ( selection.hasAttribute( 'linkHref' ) ) {\n\t\t\t\t\t// Then update `linkHref` value.\n\t\t\t\t\tconst linkRange = findLinkRange( selection.getFirstPosition(), selection.getAttribute( 'linkHref' ), model );\n\t\t\t\t\twriter.setAttribute( 'linkHref', attrs.href, linkRange );\n\n\t\t\t\t\t// Create new range wrapping changed link.\n\t\t\t\t\twriter.setSelection( linkRange );\n\t\t\t\t}\n\t\t\t\t// If not then insert text node with `linkHref` attribute in place of caret.\n\t\t\t\t// However, since selection in collapsed, attribute value will be used as data for text node.\n\t\t\t\t// So, if `href` is empty, do not create text node.\n\t\t\t\telse if ( attrs.href !== '' ) {\n\t\t\t\t\tconst attributes = toMap( selection.getAttributes() );\n\t\t\t\t\tattributes.set( 'linkHref', attrs.href );\n\n\t\t\t\t\tconst node = writer.createText( attrs.href, attributes );\n\n\t\t\t\t\twriter.insert( node, position );\n\n\t\t\t\t\t// Create new range wrapping created node.\n\t\t\t\t\twriter.setSelection( writer.createRangeOn( node ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If selection has non-collapsed ranges, we change attribute on nodes inside those ranges\n\t\t\t\t// omitting nodes where `linkHref` attribute is disallowed.\n\t\t\t\tconst ranges = model.schema.getValidRanges( selection.getRanges(), 'linkHref' );\n\t\t\t\tfor ( const range of ranges ) {\n\t\t\t\t\twriter.setAttribute( 'linkHref', attrs.href, range );\n\t\t\t\t\twriter.setAttribute( 'linkitAttrs', attrs, range );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @module link/unlinkcommand\n */\n\nimport findLinkRange from '@ckeditor/ckeditor5-link/src/findlinkrange';\nimport TemplateCommandBase from '@amazee/ckeditor5-template/src/commands/templatecommandbase';\n\n/**\n * The unlink command. It is used by the {@link module:link/link~Link link plugin}.\n *\n * @extends module:core/command~Command\n */\nexport default class UnlinkLinkitCommand extends TemplateCommandBase {\n\t/**\n\t * Check if a given template and model element are applicable for this command.\n\t *\n\t * @param {module:template/utils/elementinfo~ElementInfo} templateElement\n\t * @param {module:engine/model/element~Element} modelElement\n\t */\n\t// eslint-disable-next-line no-unused-vars\n\tmatchElement( templateElement, modelElement ) {\n\t\treturn templateElement.type === 'button';\n\t}\n\n\t/**\n     * @inheritDoc\n     */\n\trefresh() {\n\t\tsuper.refresh();\n\t\tthis.isEnabled =\n\t\t\t\t!this._currentElement &&\n\t\t\t\t( this.editor.model.document.selection.hasAttribute( 'linkHref' ) ||\n\t\t\t\tthis.editor.model.document.selection.hasAttribute( 'linkitAttrs' ) );\n\t}\n\n\t/**\n   * Executes the command.\n   *\n   * When the selection is collapsed, removes the `linkHref` attribute from each node with the same `linkHref` attribute value.\n   * When the selection is non-collapsed, removes the `linkHref` attribute from each node in selected ranges.\n   *\n   * @fires execute\n   */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.change( writer => {\n\t\t\t// Get ranges to unlink.\n\t\t\tconst rangesToUnlink = selection.isCollapsed ?\n\t\t\t\t[ findLinkRange( selection.getFirstPosition(), selection.getAttribute( 'linkHref' ) ) ] : selection.getRanges();\n\n\t\t\t// Remove `linkHref` attribute from specified ranges.\n\t\t\tfor ( const range of rangesToUnlink ) {\n\t\t\t\twriter.removeAttribute( 'linkHref', range );\n\t\t\t\twriter.removeAttribute( 'linkitAttrs', range );\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @module linkit/utils\n */\n\nconst linkitElementSymbol = Symbol( 'linkitElement' );\n\nexport function createLinkAttributeElement( attributes, writer ) {\n\tif ( attributes ) {\n\t\tconst attrs = {};\n\t\tfor ( const key of Object.keys( attributes ) ) {\n\t\t\tif ( key == 'href' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tattrs[ key ] = attributes[ key ];\n\t\t}\n\t\tconst linkElement = writer.createAttributeElement( 'a', attrs, { priority: 5 } );\n\t\twriter.setCustomProperty( linkitElementSymbol, true, linkElement );\n\t\treturn linkElement;\n\t}\n}\n","/**\n * @module linkit/linkediting\n */\n\nimport LinkEditing from '@ckeditor/ckeditor5-link/src/linkediting';\nimport {\n\tdowncastAttributeToElement\n} from '@ckeditor/ckeditor5-engine/src/conversion/downcast-converters';\nimport { upcastElementToAttribute } from '@ckeditor/ckeditor5-engine/src/conversion/upcast-converters';\nimport LinkitCommand from './linkitcommand';\nimport UnlinkLinkitCommand from './unlinklinkitcommand';\nimport LinkCommand from '@ckeditor/ckeditor5-link/src/linkcommand';\nimport UnlinkCommand from '@ckeditor/ckeditor5-link/src/unlinkcommand';\nimport { ensureSafeUrl, createLinkElement } from '@ckeditor/ckeditor5-link/src/utils';\nimport { createLinkAttributeElement } from './utils';\nimport bindTwoStepCaretToAttribute from '@ckeditor/ckeditor5-engine/src/utils/bindtwostepcarettoattribute';\nimport '@ckeditor/ckeditor5-link/theme/link.css';\n\n/**\n * The link engine feature.\n *\n * It introduces the `linkHref=\"url\"` attribute in the model which renders to the view as a `<a href=\"url\">` element.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class LinkitEditing extends LinkEditing {\n\t/**\n   * @inheritDoc\n   */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tthis._linkSelector = editor.config.get( 'drupalLinkSelector' ) ? editor.config.get( 'drupalLinkSelector' ).callback : null;\n\n\t\t// Allow link attribute on all inline nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: [ 'linkHref', 'linkitAttrs' ] } );\n\n\t\teditor.conversion.for( 'dataDowncast' )\n\t\t\t.add( downcastAttributeToElement( { model: 'linkHref', view: ( href, writer ) => {\n\t\t\t\treturn createLinkElement( href, writer );\n\t\t\t} } ) );\n\n\t\teditor.conversion.for( 'editingDowncast' )\n\t\t\t.add( downcastAttributeToElement( { model: 'linkHref', view: ( href, writer ) => {\n\t\t\t\treturn createLinkElement( ensureSafeUrl( href ), writer );\n\t\t\t} } ) );\n\n\t\teditor.conversion.for( 'dataDowncast' )\n\t\t\t.add( downcastAttributeToElement( { model: 'linkitAttrs', view: ( attributes, writer ) => {\n\t\t\t\treturn createLinkAttributeElement( attributes, writer );\n\t\t\t} } ) );\n\n\t\teditor.conversion.for( 'editingDowncast' )\n\t\t\t.add( downcastAttributeToElement( { model: 'linkitAttrs', view: ( attributes, writer ) => {\n\t\t\t\treturn createLinkAttributeElement( attributes, writer );\n\t\t\t} } ) );\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t.add( upcastElementToAttribute( {\n\t\t\t\tview: {\n\t\t\t\t\tname: 'a',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\thref: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmodel: {\n\t\t\t\t\tkey: 'linkHref',\n\n\t\t\t\t\tvalue: viewElement => viewElement.getAttribute( 'href' )\n\t\t\t\t}\n\t\t\t} ) );\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t.add( upcastElementToAttribute( {\n\t\t\t\tview: {\n\t\t\t\t\tname: 'a'\n\t\t\t\t},\n\t\t\t\tmodel: {\n\t\t\t\t\tkey: 'linkitAttrs',\n\t\t\t\t\tvalue: viewElement => {\n\t\t\t\t\t\tconst attrs = {};\n\t\t\t\t\t\tfor ( const [ key, value ] of viewElement.getAttributes() ) {\n\t\t\t\t\t\t\tattrs[ key ] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn attrs;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\n\t\t// Create linking commands.\n\t\tif ( this._linkSelector ) {\n\t\t\teditor.commands.add( 'link', new LinkitCommand( editor ) );\n\t\t\teditor.commands.add( 'unlink', new UnlinkLinkitCommand( editor ) );\n\t\t} else {\n\t\t\teditor.commands.add( 'link', new LinkCommand( editor ) );\n\t\t\teditor.commands.add( 'unlink', new UnlinkCommand( editor ) );\n\t\t}\n\n\t\t// Enable two-step caret movement for `linkHref` attribute.\n\t\tbindTwoStepCaretToAttribute( editor.editing.view, editor.model, this, 'linkHref' );\n\n\t\t// Setup highlight over selected link.\n\t\tthis._setupLinkHighlight();\n\t}\n}\n","/**\n * @module linkit/linkitui\n */\n\nimport LinkUI from '@ckeditor/ckeditor5-link/src/linkui';\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\n\n/**\n * The linkit UI plugin. It introduces the Link and Unlink buttons and the <kbd>Ctrl+K</kbd> keystroke.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class LinkitUI extends LinkUI {\n\t/**\n\t * Attaches actions that control whether the balloon panel containing the\n\t * {@link #formView} is visible or not.\n\t *\n\t * @private\n\t */\n\t_enableUserBalloonInteractions() {\n\t\tconst viewDocument = this.editor.editing.view.document;\n\n\t\t// Handle click on view document and show panel when selection is placed inside the link element.\n\t\t// Keep panel open until selection will be inside the same link element.\n\t\tthis.listenTo( viewDocument, 'click', () => {\n\t\t\tconst parentLink = this._getSelectedLinkElement();\n\n\t\t\tif ( parentLink ) {\n\t\t\t\t// Then show panel but keep focus inside editor editable.\n\t\t\t\tthis._showUI();\n\t\t\t}\n\t\t} );\n\n\t\t// Focus the form if the balloon is visible and the Tab key has been pressed.\n\t\tthis.editor.keystrokes.set( 'Tab', ( data, cancel ) => {\n\t\t\tif ( this._areActionsVisible && !this.actionsView.focusTracker.isFocused ) {\n\t\t\t\tthis.actionsView.focus();\n\t\t\t\tcancel();\n\t\t\t}\n\t\t}, {\n\t\t\t// Use the high priority because the link UI navigation is more important\n\t\t\t// than other feature's actions, e.g. list indentation.\n\t\t\t// https://github.com/ckeditor/ckeditor5-link/issues/146\n\t\t\tpriority: 'high'\n\t\t} );\n\n\t\t// Close the panel on the Esc key press when the editable has focus and the balloon is visible.\n\t\tthis.editor.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\t\tif ( this._isUIVisible ) {\n\t\t\t\tthis._hideUI();\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\n\t\t// Close on click outside of balloon panel element.\n\t\tclickOutsideHandler( {\n\t\t\temitter: this.formView,\n\t\t\tactivator: () => this._isUIVisible,\n\t\t\tcontextElements: [ this._balloon.view.element ],\n\t\t\tcallback: () => {\n\t\t\t\tif ( !this._isUIInPanel ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Remove form first because it's on top of the stack.\n\t\t\t\tthis._removeFormView();\n\n\t\t\t\t// Then remove the actions view because it's beneath the form.\n\t\t\t\tthis._balloon.remove( this.actionsView );\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Makes the UI react to the {@link module:core/editor/editorui~EditorUI#event:update} event to\n\t * reposition itself when the editor ui should be refreshed.\n\t *\n\t * See: {@link #_hideUI} to learn when the UI stops reacting to the `update` event.\n\t *\n\t * @protected\n\t */\n\t_startUpdatingUI() {\n\t\tconst editor = this.editor;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tlet prevSelectedLink = this._getSelectedLinkElement();\n\t\tlet prevSelectionParent = getSelectionParent();\n\n\t\tthis.listenTo( editor.ui, 'update', () => {\n\t\t\tconst selectedLink = this._getSelectedLinkElement();\n\t\t\tconst selectionParent = getSelectionParent();\n\n\t\t\t// Hide the panel if:\n\t\t\t//\n\t\t\t// * the selection went out of the EXISTING link element. E.g. user moved the caret out\n\t\t\t//   of the link,\n\t\t\t// * the selection went to a different parent when creating a NEW link. E.g. someone\n\t\t\t//   else modified the document.\n\t\t\t// * the selection has expanded (e.g. displaying link actions then pressing SHIFT+Right arrow).\n\t\t\t//\n\t\t\t// Note: #_getSelectedLinkElement will return a link for a non-collapsed selection only\n\t\t\t// when fully selected.\n\t\t\tif ( ( prevSelectedLink && !selectedLink ) ||\n\t\t\t\t( !prevSelectedLink && selectionParent !== prevSelectionParent ) ) {\n\t\t\t\tthis._hideUI();\n\t\t\t}\n\t\t\t// Update the position of the panel when:\n\t\t\t//  * the selection remains in the original link element,\n\t\t\t//  * there was no link element in the first place, i.e. creating a new link\n\t\t\telse {\n\t\t\t\t// If still in a link element, simply update the position of the balloon.\n\t\t\t\t// If there was no link (e.g. inserting one), the balloon must be moved\n\t\t\t\t// to the new position in the editing view (a new native DOM range).\n\n\t\t\t\t// TODO: Check if we can remove it.\n\t\t\t\t// this._balloon.updatePosition( this._getBalloonPositionData() );\n\t\t\t}\n\n\t\t\tprevSelectedLink = selectedLink;\n\t\t\tprevSelectionParent = selectionParent;\n\t\t} );\n\n\t\tfunction getSelectionParent() {\n\t\t\treturn viewDocument.selection.focus.getAncestors()\n\t\t\t\t.reverse()\n\t\t\t\t.find( node => node.is( 'element' ) );\n\t\t}\n\t}\n\n\t/**\n\t * Shows the right kind of the UI for current state of the command. It's either\n\t * {@link #formView} or {@link #actionsView}.\n\t *\n\t * @private\n\t */\n\t_showUI() {\n\t\tconst editor = this.editor;\n\t\tconst linkCommand = editor.commands.get( 'link' );\n\n\t\tif ( !linkCommand.isEnabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When there's no link under the selection, go straight to the editing UI.\n\t\tif ( !this._getSelectedLinkElement() ) {\n\t\t\tthis._addFormView();\n\t\t}\n\t\t// If theres a link under the selection...\n\t\telse {\n\t\t\t// Go to the editing UI if actions are already visible.\n\t\t\tif ( this._areActionsVisible ) {\n\t\t\t\tthis._addFormView();\n\t\t\t}\n\t\t\t// Otherwise display just the actions UI.\n\t\t\telse {\n\t\t\t\tthis._addActionsView();\n\t\t\t}\n\t\t}\n\n\t\t// Begin responding to ui#update once the UI is added.\n\t\tthis._startUpdatingUI();\n\t}\n\n\t/**\n\t * Adds the {@link #formView} to the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n\t_addFormView() {\n\t\tif ( this._isFormInPanel ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst linkCommand = editor.commands.get( 'link' );\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tthis._linkSelector = editor.config.get( 'drupalLinkSelector' ) ? editor.config.get( 'drupalLinkSelector' ).callback : null;\n\t\tif ( this._linkSelector ) {\n\t\t\tconst attrs = {};\n\t\t\tif ( linkCommand.attributes ) {\n\t\t\t\tfor ( const [ key, value ] of linkCommand.attributes ) {\n\t\t\t\t\tattrs[ key ] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet data = editor.getData();\n\n\t\t\tif ( !attrs.linkitAttrs ) {\n\t\t\t\tattrs.linkitAttrs = {};\n\t\t\t}\n\n\t\t\tconst selectionParent = getSelectionParent();\n\t\t\tif ( selectionParent && selectionParent.getAttribute( 'links-filter' ) ) {\n\t\t\t\tconst filterClass = selectionParent.getAttribute( 'links-filter' );\n\t\t\t\tconst parentFilter = selectionParent.getAttribute( 'links-filter-parent' );\n\t\t\t\tlet selector = filterClass;\n\n\t\t\t\tif ( parentFilter ) {\n\t\t\t\t\tconst parentCard = selectionParent.getAncestors().find( node => node.hasClass( parentFilter ) );\n\t\t\t\t\tif ( parentCard && parentCard.getAttribute( 'id' ) ) {\n\t\t\t\t\t\tselector = '#' + parentCard.getAttribute( 'id' ) + ' ' + filterClass;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst filteredData = editor.sourceElement.querySelectorAll( selector );\n\n\t\t\t\tlet newData = '';\n\t\t\t\tfor ( const item of filteredData ) {\n\t\t\t\t\tnewData += item.outerHTML;\n\t\t\t\t}\n\t\t\t\tdata = newData;\n\n\t\t\t\tattrs.linkitAttrs[ 'links-filter' ] = filterClass;\n\t\t\t}\n\n\t\t\tattrs.linkitAttrs.editorData = data;\n\n\t\t\tthis._linkSelector( attrs.linkitAttrs, values => {\n\t\t\t\teditor.editing.view.focus();\n\t\t\t\tthis.editor.execute( 'link', values );\n\t\t\t} );\n\t\t} else {\n\t\t\tthis._balloon.add( {\n\t\t\t\tview: this.formView,\n\t\t\t\tposition: this._getBalloonPositionData()\n\t\t\t} );\n\n\t\t\tthis.formView.urlInputView.select();\n\n\t\t\t// Make sure that each time the panel shows up, the URL field remains in sync with the value of\n\t\t\t// the command. If the user typed in the input, then canceled the balloon (`urlInputView#value` stays\n\t\t\t// unaltered) and re-opened it without changing the value of the link command (e.g. because they\n\t\t\t// clicked the same link), they would see the old value instead of the actual value of the command.\n\t\t\t// https://github.com/ckeditor/ckeditor5-link/issues/78\n\t\t\t// https://github.com/ckeditor/ckeditor5-link/issues/123\n\t\t\tthis.formView.urlInputView.inputView.element.value = linkCommand.value || '';\n\t\t}\n\t\tfunction getSelectionParent() {\n\t\t\treturn viewDocument.selection.focus.getAncestors()\n\t\t\t\t.reverse()\n\t\t\t\t.find( node => node.is( 'element' ) );\n\t\t}\n\t}\n}\n","import Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport TemplateEditing from '@amazee/ckeditor5-template/src/templateediting';\n\nimport { downcastAttributeToAttribute } from '@ckeditor/ckeditor5-engine/src/conversion/downcast-converters';\nimport { downcastTemplateElement, getModelAttributes } from '@amazee/ckeditor5-template/src/utils/conversion';\nimport { toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\n\nimport { postfixTemplateElement } from '@amazee/ckeditor5-template/src/utils/integrity';\n\n/**\n * Drupal media integration for CKEditor templates.\n */\nexport default class DrupalMediaEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\t\teditor.config.define( 'drupalMediaSelector', () => '' );\n\t\teditor.config.define( 'drupalMediaRenderer', () => '' );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TemplateEditing ];\n\t}\n\n\tinit() {\n\t\tthis._mediaRenderer = this.editor.config.get( 'drupalMediaRenderer' ).callback;\n\n\t\tthis.editor.templates.registerPostFixer( [ 'drupal-media' ], postfixTemplateElement );\n\n\t\tthis.editor.conversion.for( 'editingDowncast' ).add( downcastAttributeToAttribute( {\n\t\t\tmodel: 'data-media-uuid',\n\t\t\tview: 'data-media-uuid',\n\t\t} ) );\n\n\t\t// Default editing downcast conversions for template container elements without functionality.\n\t\tthis.editor.conversion.for( 'editingDowncast' ).add( downcastTemplateElement( this.editor, {\n\t\t\ttypes: [ 'drupal-media' ],\n\t\t\tview: ( templateElement, modelElement, viewWriter ) => {\n\t\t\t\tconst container = viewWriter.createContainerElement(\n\t\t\t\t\t'ck-media',\n\t\t\t\t\tgetModelAttributes( templateElement, modelElement )\n\t\t\t\t);\n\t\t\t\tconsole.log(container);\n\t\t\t\treturn toWidget( container, viewWriter );\n\t\t\t}\n\t\t} ), { priority: 'low ' } );\n\t}\n}\n","import TemplateCommandBase from '@amazee/ckeditor5-template/src/commands/templatecommandbase';\n\n/**\n * Select a Drupal media element.\n */\nexport default class DrupalMediaSelectCommand extends TemplateCommandBase {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\t\tthis._mediaSelector = editor.config.get( 'drupalMediaSelector' ).callback;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tmatchElement( templateElement ) {\n\t\treturn templateElement.type === 'drupal-media';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute( values ) {\n\t\tthis._mediaSelector( this._currentElementInfo.attributes[ 'data-media-type' ], values.operation, uuid => {\n\t\t\tif ( uuid === this.currentElement.getAttribute( 'data-media-uuid' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.editor.model.change( writer => {\n\t\t\t\twriter.setAttribute( 'data-media-uuid', uuid, this.currentElement );\n\t\t\t} );\n\t\t} );\n\t}\n}\n","import Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport WidgetToolbarRepository from '@ckeditor/ckeditor5-widget/src/widgettoolbarrepository';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\n\nimport DrupalMediaEditing from './drupalmediaediting';\nimport DrupalMediaSelectCommand from './drupalmediaselectcommand';\n\nimport SelectIcon from '../theme/icons/search.svg';\nimport UploadIcon from '../theme/icons/upload.svg';\n\n/**\n * Show a select/upload toolbar for embedded Drupal media entities.\n */\nexport default class DrupalMediaUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ DrupalMediaEditing, WidgetToolbarRepository ];\n\t}\n\n\tinit() {\n\t\tthis.command = new DrupalMediaSelectCommand( this.editor );\n\t\tthis.editor.commands.add( 'drupalMediaSelect', this.command );\n\n\t\tthis.editor.ui.componentFactory.add( 'drupalMedia:select', locale => {\n\t\t\tconst view = new ButtonView();\n\t\t\tview.set( {\n\t\t\t\tlabel: locale.t( 'Select from media gallery' ),\n\t\t\t\ticon: SelectIcon,\n\t\t\t\ttooltip: true,\n\t\t\t} );\n\t\t\tview.bind( 'isEnabled' ).to( this.command, 'isEnabled' );\n\t\t\tthis.listenTo( view, 'execute', () => this.editor.execute( 'drupalMediaSelect', { operation: 'select' } ) );\n\t\t\treturn view;\n\t\t} );\n\n\t\tthis.editor.ui.componentFactory.add( 'drupalMedia:upload', locale => {\n\t\t\tconst view = new ButtonView();\n\t\t\tview.set( {\n\t\t\t\tlabel: locale.t( 'Upload media' ),\n\t\t\t\ticon: UploadIcon,\n\t\t\t\ttooltip: true,\n\t\t\t} );\n\t\t\tview.bind( 'isEnabled' ).to( this.command, 'isEnabled' );\n\t\t\tthis.listenTo( view, 'execute', () => this.editor.execute( 'drupalMediaSelect', { operation: 'add' } ) );\n\t\t\treturn view;\n\t\t} );\n\t}\n\n\tafterInit() {\n\t\tconst widgetToolbarRepository = this.editor.plugins.get( WidgetToolbarRepository );\n\t\twidgetToolbarRepository.register( 'drupalMedia', {\n\t\t\titems: [ 'drupalMedia:select', 'drupalMedia:upload' ],\n\t\t\tvisibleWhen: () => this.command.isEnabled,\n\t\t} );\n\t}\n}\n","/**\n * Copyright (c) 2016 - 2017, CKSource - Frederico Knabben. All rights reserved.\n */\n\n/**\n * @module ui/toolbar/block/blockbuttonview\n */\n\nimport ButtonView from '../../button/buttonview';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport '../../../theme/components/toolbar/blocktoolbar.css';\n\nconst toPx = toUnit( 'px' );\n\n/**\n * The block button view class.\n *\n * This view represents a button attached next to block element where the selection is anchored.\n *\n * See {@link module:ui/toolbar/block/blocktoolbar~BlockToolbar}.\n *\n * @extends {module:ui/button/buttonview~ButtonView}\n */\nexport default class BlockButtonView extends ButtonView {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t// Hide button on init.\n\t\tthis.isVisible = false;\n\n\t\t/**\n\t\t * Top offset.\n\t\t *\n\t\t * @member {Number} #top\n\t\t */\n\t\tthis.set( 'top', 0 );\n\n\t\t/**\n\t\t * Left offset.\n\t\t *\n\t\t * @member {Number} #left\n\t\t */\n\t\tthis.set( 'left', 0 );\n\n\t\tthis.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-block-toolbar-button',\n\t\t\t\tstyle: {\n\t\t\t\t\ttop: bind.to( 'top', val => toPx( val ) ),\n\t\t\t\t\tleft: bind.to( 'left', val => toPx( val ) ),\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n}\n","/**\n * @module templates/elements/textelement\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport TemplateEditing from '@amazee/ckeditor5-template/src/templateediting';\nimport { downcastTemplateElement, getModelAttributes } from '@amazee/ckeditor5-template/src/utils/conversion';\nimport { postfixTemplateElement } from '@amazee/ckeditor5-template/src/utils/integrity';\nimport DomEventObserver from '@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver';\nimport { downcastAttributeToAttribute } from '@ckeditor/ckeditor5-engine/src/conversion/downcast-converters';\nimport { upcastAttributeToAttribute } from '@ckeditor/ckeditor5-engine/src/conversion/upcast-converters';\n\n// TODO: Attach a generic observer to trigger dialogs?\nclass LinkSelectObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\t\tthis.domEventType = 'selectLink';\n\t\tthis.useCapture = true;\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\nexport default class ButtonElement extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TemplateEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tthis.editor.editing.view.addObserver( LinkSelectObserver );\n\t\tthis._linkSelector = this.editor.config.get( 'drupalLinkSelector' ) ?\n\t\t\tthis.editor.config.get( 'drupalLinkSelector' ).callback :\n\t\t\tnull;\n\n\t\tif ( !this._linkSelector ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.listenTo( this.editor.editing.view.document, 'selectLink', ( evt, data ) => {\n\t\t\tconst model = this.toModel( data.domTarget );\n\t\t\tconst templateElement = this.editor.templates.getElementInfo( model.name );\n\t\t\tconst attrs = getModelAttributes( templateElement, model );\n\n\t\t\tif ( !attrs.linkitAttrs ) {\n\t\t\t\tattrs.linkitAttrs = {};\n\t\t\t}\n\n\t\t\tattrs.linkitAttrs.editorData = this.editor.getData();\n\n\t\t\tattrs.href = attrs[ 'link-target' ];\n\t\t\tdelete attrs[ 'link-target' ];\n\t\t\tthis._linkSelector( attrs, values => {\n\t\t\t\tthis.editor.editing.view.focus();\n\t\t\t\tthis.editor.model.change( writer => {\n\t\t\t\t\tvalues[ 'link-target' ] = values.href;\n\t\t\t\t\tdelete values.href;\n\t\t\t\t\twriter.setAttributes( values, model );\n\t\t\t\t} );\n\t\t\t} );\n\t\t} );\n\n\t\tthis.editor.conversion.for( 'downcast' ).add( downcastAttributeToAttribute( {\n\t\t\tmodel: 'link-target',\n\t\t\tview: 'link-target',\n\t\t} ) );\n\n\t\tthis.editor.conversion.for( 'upcast' ).add( upcastAttributeToAttribute( {\n\t\t\tview: 'link-target',\n\t\t\tmodel: 'link-target',\n\t\t} ) );\n\n\t\t// Default editing downcast conversions for template container elements without functionality.\n\t\tthis.editor.conversion.for( 'editingDowncast' ).add( downcastTemplateElement( this.editor, {\n\t\t\ttypes: [ 'button' ],\n\t\t\tview: ( templateElement, modelElement, viewWriter ) => {\n\t\t\t\treturn viewWriter.createContainerElement(\n\t\t\t\t\t'ck-button',\n\t\t\t\t\tgetModelAttributes( templateElement, modelElement )\n\t\t\t\t);\n\t\t\t}\n\t\t} ), { priority: 'high ' } );\n\n\t\t// Postfix elements to make sure a templates structure is always correct.\n\t\tthis.editor.templates.registerPostFixer( [ 'button' ], postfixTemplateElement );\n\t}\n\n\t// TODO: Straight copy from @amazee/ckeditor5-template/commands/remotecontrolcommand\n\t// Generalize this.\n\ttoModel( domElement ) {\n\t\tconst view = this.editor.editing.view.domConverter.mapDomToView( domElement );\n\t\tconst viewPosition = this.editor.editing.view.createPositionAt( view, 'end' );\n\t\treturn this.editor.editing.mapper.toModelPosition( viewPosition ).parent;\n\t}\n}\n","import DomEventObserver from '@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver';\nimport { eventType } from '@amazee/editor-components/components/editor/operations';\n\nexport default class RemoteControlObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\t\tthis.domEventType = eventType;\n\t\tthis.useCapture = true;\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n","/**\n * @module template/commands/remotecontrolcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\n/**\n * Set the current gallery element to a specific position\n */\nexport default class RemoteControlCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\texecute( options ) {\n\t\tthis.editor.model.change( writer => {\n\t\t\tthis.dispatchOperation( options, writer );\n\t\t} );\n\t}\n\n\tdispatchOperation( options, writer ) {\n\t\t( {\n\t\t\tbatch: () => this.batchOperations( options, writer ),\n\t\t\tinsert: () => this.insertElement( options, writer ),\n\t\t\tmove: () => this.moveElement( options, writer ),\n\t\t\treplace: () => this.replaceElement( options, writer ),\n\t\t\tremove: () => this.removeElement( options, writer ),\n\t\t\tattributes: () => this.setAttributes( options, writer ),\n\t\t\tremoveAttribute: () => this.removeAttribute( options, writer ),\n\t\t\tswap: () => this.swap( options, writer ),\n\t\t} )[ options.operation ]();\n\t}\n\n\ttoModel( domElement ) {\n\t\tconst view = this.editor.editing.view.domConverter.mapDomToView( domElement );\n\t\tconst viewPosition = this.editor.editing.view.createPositionAt( view, 'end' );\n\t\treturn this.editor.editing.mapper.toModelPosition( viewPosition ).parent;\n\t}\n\n\tbatchOperations( { operations }, writer ) {\n\t\toperations.map( operation => operation.detail ).forEach( operation => this.dispatchOperation( operation, writer ) );\n\t}\n\n\tinsertElement( { element, parent, position, reference, attr }, writer ) {\n\t\tconst parentElement = this.toModel( parent );\n\t\tconst el = writer.createElement( `ck__${ element }` );\n\t\twriter.setAttributes( attr, el );\n\t\tif ( position === 'end' ) {\n\t\t\twriter.append( el, parentElement );\n\t\t\twriter.setSelection( el, 'on' );\n\t\t}\n\t\telse {\n\t\t\tconst referenceElement = parentElement.getChild( reference );\n\t\t\twriter.insert( el, referenceElement, position );\n\t\t\twriter.setSelection( el, 'on' );\n\t\t}\n\t}\n\n\tmoveElement( { parent, position, target, reference }, writer ) {\n\t\tconst parentElement = this.toModel( parent );\n\t\tconst targetElement = parentElement.getChild( target );\n\t\tconst referenceElement = parentElement.getChild( reference );\n\t\twriter.insert( targetElement, referenceElement, position );\n\t\twriter.setSelection( targetElement, 'on' );\n\t}\n\n\treplaceElement( { element, target }, writer ) {\n\t\tconst targetElement = this.toModel( target );\n\t\twriter.rename( targetElement, `ck__${ element }` );\n\t\twriter.setSelection( targetElement, 'on' );\n\t}\n\n\tremoveElement( { target }, writer ) {\n\t\tconst targetElement = this.toModel( target );\n\t\twriter.remove( targetElement );\n\t}\n\n\tsetAttributes( { target, attr }, writer ) {\n\t\tconst targetElement = this.toModel( target );\n\t\twriter.setAttributes( attr, targetElement );\n\t}\n\n\tremoveAttribute( { target, key }, writer ) {\n\t\tconst targetElement = this.toModel( target );\n\t\twriter.removeAttribute( key, targetElement );\n\t}\n\n\tswap( { source, target }, writer ) {\n\t\tconst sourceElement = this.toModel( source );\n\t\tconst targetElement = this.toModel( target );\n\t\twriter.insert( sourceElement, targetElement, 'before' );\n\t\twriter.remove( targetElement );\n\t}\n}\n","import { LitElement, html, svg } from \"lit-element\";\nimport * as Operations from \"../editor/operations\";\nimport styles from \"./placeholder.css\";\n\nimport closeIcon from \"./icons/close.svg\";\nimport carouselIcon from \"./icons/carousel.svg\";\nimport formattedTextIcon from \"./icons/formatted-text.svg\";\nimport imageIcon from \"./icons/image.svg\";\nimport miscIcon from \"./icons/misc.svg\";\nimport textIcon from \"./icons/text.svg\";\nimport textMediaIcon from \"./icons/text-media.svg\";\nimport videoIcon from \"./icons/video.svg\";\n\nconst icons = {\n  close: closeIcon,\n  formatted_text: formattedTextIcon,\n  carousel: carouselIcon,\n  image: imageIcon,\n  misc: miscIcon,\n  text: textIcon,\n  text_media: textMediaIcon,\n  video: videoIcon\n};\n\nfunction icon(section) {\n  if (section.svgIcon) {\n    return svg([section.svgIcon]);\n  }\n  if (icons[section.icon]) {\n    return svg([icons[section.icon]]);\n  }\n  return svg([icons.misc]);\n}\n\nexport default class Placeholder extends LitElement {\n  static get properties() {\n    return {\n      collapsed: { type: Boolean },\n      closed: { type: Boolean },\n      isOpen: { type: Boolean },\n      isExpanded: { type: Boolean },\n      sections: { type: String },\n      labelOpen: { type: String },\n      labelExpand: { type: String }\n    };\n  }\n\n  constructor() {\n    super();\n    this.closed = false;\n    this.collapsed = false;\n    this.labelOpen = \"Add\";\n    this.labelExpand = \"Insert\";\n    this.sections = [];\n    this.isOpen = false;\n    this.isExpanded = false;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  getSections() {\n    return Placeholder.availableSections.filter(section =>\n      this.sections.split(\" \").includes(section.id)\n    );\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n      ${!this.collapsed || this.isExpanded\n        ? html`\n            <div class=\"ck-placeholder__add-wrapper\">\n              ${this.closed\n                ? html`\n                    <button\n                      @click=\"${this.clickOpenHandler}\"\n                      type=\"button\"\n                      class=\"normalize-button ck-placeholder__add-button\"\n                    >\n                      ${this.labelOpen}\n                    </button>\n                  `\n                : null}\n              ${!this.closed || this.isOpen\n                ? html`\n                    <ul class=\"normalize-list ck-placeholder__sections-list\">\n                      ${this.getSections().map(\n                        section => html`\n                          <li class=\"ck-placeholder__section-item\">\n                            <button\n                              @click=\"${event =>\n                                this.clickSectionHandler(event, section.id)}\"\n                              type=\"button\"\n                              class=\"normalize-button ck-placeholder__section-button\"\n                            >\n                              <div class=\"ck-placeholder__icon-wrapper\">\n                                ${icon(section)}\n                              </div>\n                              ${section.label}\n                            </button>\n                          </li>\n                        `\n                      )}\n                    </ul>\n                    ${this.isOpen\n                      ? html`\n                          <button\n                            @click=\"${this.clickCloseHandler}\"\n                            type=\"button\"\n                            class=\"normalize-button ck-placeholder__close-button\"\n                          >\n                            <div class=\"ck-placeholder__icon-wrapper\">\n                              ${icon({ icon: \"close\" })}\n                            </div>\n                            <span class=\"ck-placeholder__close-button-label\"\n                              >Close</span\n                            >\n                          </button>\n                        `\n                      : null}\n                  `\n                : \"\"}\n            </div>\n          `\n        : html`\n            <div class=\"ck-placeholder__insert-wrapper\">\n              <button\n                @click=\"${this.clickExpandHandler}\"\n                type=\"button\"\n                class=\"normalize-button ck-placeholder__insert-button\"\n              >\n                ${this.labelExpand}\n              </button>\n            </div>\n          `}\n    `;\n  }\n\n  clickOpenHandler() {\n    this.isOpen = !this.isOpen;\n  }\n\n  clickExpandHandler() {\n    this.isExpanded = !this.isExpanded;\n  }\n\n  clickCloseHandler() {\n    this.isOpen = false;\n  }\n\n  clickSectionHandler(event, sectionId) {\n    this.dispatchEvent(Operations.replace(sectionId, this));\n    this.isExpanded = false;\n  }\n}\n\ncustomElements.define(\"ck-placeholder\", Placeholder);\n","import { LitElement, html, svg } from \"lit-element\";\nimport * as Operations from \"../editor/operations\";\nimport styles from \"./gallery.css\";\n\nimport leftIcon from \"./icons/leftArrow.svg\";\nimport rightIcon from \"./icons/rightArrow.svg\";\nimport trashIcon from \"./icons/trash.svg\";\n\nclass Gallery extends LitElement {\n  static get properties() {\n    return {\n      items: Array,\n      currentGallery: Number,\n      section: String\n    };\n  }\n\n  constructor() {\n    super();\n    this.items = [];\n    this.currentGallery = 0;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    const slots = this.shadowRoot;\n    slots.addEventListener(\"slotchange\", e => {\n      this.items = Array.from(this.children).map((child, index) => ({\n        title: index + 1,\n        index\n      }));\n    });\n\n    this.items = Array.from(this.children).map((child, index) => ({\n      title: index + 1,\n      index\n    }));\n    this.setGalleryItem(this.currentGallery);\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n\n      <div class=\"ck-gallery\">\n        <div\n          class=\"ck-gallery__rail\"\n          style=\"transform: translateX(${this.currentGallery * -100}%)\"\n        >\n          <slot></slot>\n        </div>\n\n        <div class=\"ck-gallery__controls\">\n          <div class=\"ck-gallery__pager\">\n            <div class=\"ck-gallery__dots\">\n              ${this.items.map(item => this.button(item))}\n              <span @click=\"${() => this.addItem()}\" class=\"ck-gallery__add\">\n                +\n              </span>\n            </div>\n          </div>\n          <div class=\"ck-gallery__actions\">\n            <span>Edit active element</span>\n            <div class=\"ck-gallery__icons\">\n              <div\n                @click=\"${() => this.moveItem(\"left\")}\"\n                data-tooltip=\"Move element to the left\"\n                class=\"ck-gallery__icon ck-gallery__icon--arrow-left ${this\n                  .currentGallery === 0\n                  ? \"disabled\"\n                  : \"\"}\"\n              >\n                ${svg([leftIcon])}\n              </div>\n              <div\n                @click=\"${() => this.moveItem(\"right\")}\"\n                data-tooltip=\"Move element to the right\"\n                class=\"ck-gallery__icon ck-gallery__icon--arrow-right ${this\n                  .currentGallery ===\n                this.items.length - 1\n                  ? \"disabled\"\n                  : \"\"}\"\n              >\n                ${svg([rightIcon])}\n              </div>\n              <div\n                @click=\"${() => this.deleteItem()}\"\n                data-tooltip=\"Delete slide\"\n                class=\"ck-gallery__icon ck-gallery__icon--arrow-trash ${this\n                  .items.length < 2\n                  ? \"disabled\"\n                  : \"\"}\"\n              >\n                ${svg([trashIcon])}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  addItem() {\n    this.dispatchEvent(Operations.insert(this.section, this, \"end\"));\n    this.currentGallery = this.items.length;\n  }\n\n  deleteItem() {\n    if (this.items.length >= 2) {\n      this.dispatchEvent(Operations.remove(this.children[this.currentGallery]));\n      if (this.currentGallery === this.items.length - 1) {\n        this.currentGallery -= 1;\n      }\n    }\n  }\n\n  moveItem(position) {\n    if (position === \"left\" && this.currentGallery !== 0) {\n      this.dispatchEvent(\n        Operations.move(\n          this,\n          \"before\",\n          this.currentGallery,\n          this.currentGallery - 1\n        )\n      );\n      this.currentGallery -= 1;\n    }\n    if (position === \"right\" && this.currentGallery !== this.items.length - 1) {\n      this.dispatchEvent(\n        Operations.move(\n          this,\n          \"before\",\n          this.currentGallery,\n          this.currentGallery + 1\n        )\n      );\n      this.currentGallery += 1;\n    }\n  }\n\n  button(item) {\n    return html`\n      <span\n        @click=\"${() => this.setGalleryItem(item.index)}\"\n        class=\"ck-gallery__dot-item ${this.currentGallery === item.index\n          ? \"active\"\n          : \"\"}\"\n        >${item.title}</span\n      >\n    `;\n  }\n\n  setGalleryItem(index) {\n    if (this.children.length <= index || !this.children[index]) {\n      return;\n    }\n\n    // Update image slide\n    this.currentGallery = index;\n  }\n}\n\ncustomElements.define(\"ck-gallery\", Gallery);\n","import { LitElement, html, svg } from \"lit-element\";\nimport { render } from \"lit-html\";\nimport * as Operations from \"../editor/operations\";\nimport styles from \"./tabs.css\";\nimport modalStyles from \"./modal.css\";\nimport editIcon from \"./icons/pencil.svg\";\n\nclass Tabs extends LitElement {\n  static get properties() {\n    return {\n      section: String,\n      items: Array,\n      currentTab: Number,\n      modalIsOpen: Boolean\n    };\n  }\n\n  constructor() {\n    super();\n    this.items = [];\n    this.currentTab = -1;\n    this.modalIsOpen = false;\n    this.section = null;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (this.ownerDocument.body.querySelector(\"#ck-tabs-modal\")) {\n      this.modal = this.ownerDocument.body.querySelector(\"#ck-tabs-modal\");\n    } else {\n      this.modal = this.ownerDocument.createElement(\"div\");\n      this.modal.setAttribute(\"id\", \"ck-tabs-modal\");\n      this.ownerDocument.body.appendChild(this.modal);\n    }\n\n    const observer = new MutationObserver(() => this.processItems());\n    observer.observe(this, {\n      attributes: true,\n      childList: true,\n      subtree: true\n    });\n\n    this.processItems();\n\n    if (this.children.length > 0) {\n      this.currentTab = 0;\n    }\n  }\n\n  processItems() {\n    this.items = Array.from(this.children).map((child, index) => {\n      return {\n        title:\n          (child.dataset.titleAttribute\n            ? child.getAttribute(child.dataset.titleAttribute)\n            : null) ||\n          child.dataset.tabTitle ||\n          \"Untitled Tab\",\n        default: child.dataset.defaultTab,\n        index\n      };\n    });\n    this.setTabsItem(this.currentTab);\n  }\n\n  openModal() {\n    this.modalIsOpen = true;\n    render(this.renderModal(), this.modal);\n  }\n\n  closeModal() {\n    this.modalIsOpen = false;\n    render(this.renderModal(), this.modal);\n  }\n\n  renderModal() {\n    return html`\n      <ck-tabs-modal\n        @eventCloseModal=\"${() => {\n          this.closeModal();\n        }}\"\n        @eventSaveModal=\"${e => {\n          this.updateItem(e.detail);\n        }}\"\n        @deleteTab=\"${() => this.deleteItem()}\"\n        currentTitle=\"${this.items[this.currentTab].title}\"\n        currentDefault=\"${this.items[this.currentTab].default}\"\n        currentIndex=\"${this.currentTab}\"\n        data-visible=\"${this.modalIsOpen ? \"true\" : \"false\"}\"\n      >\n      </ck-tabs-modal>\n    `;\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n      <div class=\"ck-tabs\">\n        <div class=\"ck-tabs__header\">\n          <ul class=\"ck-tabs__header-tab-list\">\n            ${this.items.map(item => this.tabTitle(item))}\n            <li\n              @click=\"${() => this.addItem()}\"\n              class=\"ck-tabs__header-tab-add\"\n            ></li>\n          </ul>\n        </div>\n        <div class=\"ck-tabs__content\">\n          <div\n            class=\"ck-tabs__rail\"\n            style=\"transform: translateX(${this.currentTab * -100}%)\"\n          >\n            <slot></slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  tabTitle(item) {\n    return html`\n      <li\n        @click=\"${() => this.setTabsItem(item.index)}\"\n        class=\"ck-tabs__header-tab-item ${this.currentTab === item.index\n          ? \"active\"\n          : \"\"}\n        ${item.default === \"true\" ? \"default\" : \"\"}\"\n      >\n        ${item.title}\n        <span\n          @click=\"${() => this.openModal(item)}\"\n          class=\"ck-tabs__header-icon\"\n        >\n          ${svg([editIcon])}\n        </span>\n      </li>\n    `;\n  }\n\n  deleteItem() {\n    if (this.items.length >= 2) {\n      this.dispatchEvent(Operations.remove(this.children[this.currentTab]));\n      if (this.currentTab === this.items.length - 1) {\n        this.currentTab -= 1;\n      }\n    }\n  }\n\n  setTabsItem(index) {\n    if (this.children.length <= index || !this.children[index]) {\n      return;\n    }\n    this.currentTab = index;\n  }\n\n  addItem() {\n    this.currentTab = this.items.length;\n    this.dispatchEvent(\n      Operations.insert(this.section, this, \"end\", null, {\n        \"data-default-tab\":\n          Array.from(this.children).filter(\n            child => child.dataset.defaultTab === \"true\"\n          ).length === 0,\n        \"data-tab-title\": \"Untitled Tab\"\n      })\n    );\n  }\n\n  updateItem(item) {\n    this.dispatchEvent(\n      Operations.batch(\n        [\n          Operations.attributes(this.children[item.index], {\n            \"data-tab-title\": item.title,\n            \"data-default-tab\": item.default\n          })\n        ].concat(\n          item.default\n            ? Array.from(this.children)\n                .filter(\n                  child =>\n                    child.dataset.defaultTab === \"true\" &&\n                    child !== this.children[item.index]\n                )\n                .map(child =>\n                  Operations.attributes(child, { \"data-default-tab\": \"false\" })\n                )\n            : []\n        )\n      )\n    );\n  }\n}\n\nclass Modal extends LitElement {\n  static get properties() {\n    return {\n      isVisible: { type: Boolean, reflect: true },\n      inputText: String,\n      items: Array,\n      isDefault: Boolean,\n      currentDefault: String,\n      currentIndex: String,\n      currentTitle: String\n    };\n  }\n\n  constructor() {\n    super();\n    this.isVisible = false;\n    this.inputText = \"\";\n    this.isDefault = false;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    const self = this;\n    const observer = new MutationObserver(mutationsList => {\n      mutationsList.forEach(mutation => {\n        if (mutation.type === \"attributes\") {\n          if (self.dataset.visible === \"true\") {\n            self.isVisible = true;\n            self.isDefault = self.currentDefault === \"true\";\n            self.inputText = self.currentTitle;\n          }\n        }\n      });\n    });\n\n    observer.observe(self, {\n      attributes: true,\n      childList: true,\n      subtree: false\n    });\n\n    self.isDefault = self.currentDefault === \"true\";\n    self.isVisible = self.dataset.visible === \"true\";\n  }\n\n  closeModal() {\n    this.dispatchEvent(new Event(\"eventCloseModal\"));\n    this.isVisible = false;\n  }\n\n  handleInput(e) {\n    this.inputText = e.target.value;\n  }\n\n  saveModal() {\n    const response = {\n      index: this.currentIndex,\n      title: this.inputText,\n      default: this.isDefault\n    };\n    this.dispatchEvent(new CustomEvent(\"eventSaveModal\", { detail: response }));\n    this.closeModal();\n  }\n\n  handleSwitch(e) {\n    this.isDefault = e.target.checked;\n  }\n\n  deleteTab() {\n    this.dispatchEvent(\n      new CustomEvent(\"deleteTab\", { detail: this.currentTab })\n    );\n    this.closeModal();\n  }\n\n  render() {\n    return html`\n      <style>\n        ${modalStyles}\n      </style>\n      <div class=\"modal ${this.isVisible ? \"visible\" : \"\"}\">\n        <div class=\"modal__item\">\n          <h3 class=\"modal__title\">Edit tab</h3>\n          <div class=\"modal__content\">\n            <label class=\"modal__label\" for=\"${this.currentIndex}\">\n              Variation name\n            </label>\n            <input\n              class=\"modal__input\"\n              id=\"${this.currentIndex}\"\n              @input=${this.handleInput}\n              .value=${this.currentTitle}\n            />\n            <div class=\"modal__toggle\">\n              <label class=\"switch\">\n                <input\n                  type=\"checkbox\"\n                  .checked=\"${this.isDefault}\"\n                  @input=\"${e => this.handleSwitch(e)}\"\n                />\n                <span class=\"slider\"></span>\n              </label>\n              <span class=\"modal__toggle-label\">Set as default</span>\n            </div>\n          </div>\n          <div class=\"modal__actions\">\n            <div class=\"modal__action-wrap-delete\">\n              <span\n                class=\"modal__action modal__action--delete\"\n                @click=\"${() => this.deleteTab()}\"\n              >\n                Delete\n              </span>\n            </div>\n            <span class=\"modal__action\" @click=\"${() => this.closeModal()}\">\n              Cancel\n            </span>\n            <span\n              class=\"modal__action modal__action--primary\"\n              @click=\"${() => this.saveModal()}\"\n            >\n              save\n            </span>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define(\"ck-tabs\", Tabs);\ncustomElements.define(\"ck-tabs-modal\", Modal);\n","import { LitElement, html } from \"lit-element\";\nimport * as Operations from \"../editor/operations\";\nimport styles from \"./text_conflict.css\";\n\nclass TextConflict extends LitElement {\n  static get properties() {\n    return {\n      label: { type: String },\n      resolved: { type: Boolean },\n      isResolving: { type: Boolean }\n    };\n  }\n\n  constructor() {\n    super();\n    this.label = TextConflict.label;\n    this.resolved = false;\n    this.isResolving = false;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    const children = Array.from(this.children);\n\n    children.forEach(item =>\n      item.addEventListener(\n        \"optionSelected\",\n        this.selectOptionHandler.bind(this)\n      )\n    );\n\n    // Click outside handler.\n    document.addEventListener(\"click\", e => {\n      if (!this.contains(e.target) && this.isResolving) {\n        this.isResolving = false;\n      }\n    });\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n      <div class=\"text-conflict\">\n        <span\n          class=\"text-conflict__label ${!this.resolved ? \"resolve\" : \"\"}\"\n          @click=${this.clickResolvingHandler}\n          >${this.label}</span\n        >\n        <div\n          class=\"text-conflict__options ${this.isResolving ? \"visible\" : \"\"}\"\n        >\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  clickResolvingHandler() {\n    this.isResolving = true;\n  }\n\n  selectOptionHandler(event) {\n    this.resolved = true;\n    this.isResolving = false;\n    this.dispatchEvent(Operations.swap(event.detail, this));\n  }\n}\n\nTextConflict.label = \"Conflict needs resolving\";\n\ncustomElements.define(\"ck-conflict-text\", TextConflict);\n","import { LitElement, html } from \"lit-element\";\nimport styles from \"./text_conflict_option.css\";\n\nclass TextConflictOption extends LitElement {\n  static get properties() {\n    return {\n      from: { type: String },\n      content: { type: String }\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // TODO: Keep span markup, but drop block elements.\n    this.content = this.innerText;\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n      <div class=\"option\" @click=\"${this.optionSelected}\">\n        <span class=\"option__label\"\n          >${TextConflictOption.labels[this.from]}</span\n        >\n        <span class=\"option__content\">${this.content}</span>\n      </div>\n    `;\n  }\n\n  optionSelected() {\n    this.dispatchEvent(\n      new CustomEvent(\"optionSelected\", {\n        detail: this.children.item(0)\n      })\n    );\n  }\n}\n\nTextConflictOption.labels = {\n  left: \"Left version\",\n  right: \"Right version\",\n  source: \"Source version\",\n  empty: \"Clear\"\n};\n\ncustomElements.define(\"ck-conflict-option\", TextConflictOption);\n","import { LitElement, html } from \"lit-element\";\nimport styles from \"./media_conflict_option.css\";\n\nclass MediaConflictOption extends LitElement {\n  static get properties() {\n    return {\n      from: { type: String },\n      position: { type: String }\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n      <div class=\"media-conflict-option\">\n        <button class=\"${this.position}\" @click=${this.optionSelected}>\n          ${this.from}\n        </button>\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  firstUpdated() {\n    this.children.item(0).style.width = `${this.offsetWidth}px`;\n    if (this.position === \"left\") {\n      this.style.width = \"50%\";\n    }\n  }\n\n  optionSelected() {\n    this.dispatchEvent(\n      new CustomEvent(\"optionSelected\", {\n        detail: this.children.item(0)\n      })\n    );\n  }\n}\n\nMediaConflictOption.labels = {\n  left: \"Left version\",\n  right: \"Right version\",\n  source: \"Source version\",\n  empty: \"Clear\"\n};\n\ncustomElements.define(\"ck-conflict-media-option\", MediaConflictOption);\n","import { LitElement, html } from \"lit-element\";\nimport \"./media_conflict_option/media_conflict_option\";\nimport * as Operations from \"../editor/operations\";\nimport styles from \"./media_conflict.css\";\n\nclass MediaConflict extends LitElement {\n  static get properties() {\n    return {\n      from: { type: String }\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    const children = Array.from(this.children);\n    children.forEach(item => {\n      item.addEventListener(\n        \"optionSelected\",\n        this.selectOptionHandler.bind(this)\n      );\n    });\n\n    this.children.item(0).setAttribute(\"position\", \"left\");\n    this.children.item(1).setAttribute(\"position\", \"right\");\n    this.touchStart = false;\n\n    this.addEventListener(\"mousedown\", this.touchStartHandler, false);\n    this.addEventListener(\"mouseup\", this.touchEndHandler, false);\n    this.addEventListener(\"mouseover\", this.touchEndHandler, false);\n    this.addEventListener(\"mousemove\", this.eventHandler, false);\n    this.addEventListener(\"touchmove\", this.eventHandler, false);\n  }\n\n  render() {\n    return html`\n      <style>\n        ${styles}\n      </style>\n      <div class=\"media-conflict\">\n        <div class=\"media-conflict-switcher\"></div>\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  selectOptionHandler(event) {\n    this.dispatchEvent(Operations.swap(event.detail, this));\n  }\n\n  touchStartHandler(e) {\n    this.touchStart = true;\n    this.eventHandler(e);\n  }\n\n  touchEndHandler() {\n    this.touchStart = false;\n  }\n\n  eventHandler(e) {\n    if (!this.touchStart) {\n      return;\n    }\n    const { target } = e;\n    let x = 0;\n    let totalOffsetX = 0;\n    const container = target;\n    if (container.tagName !== \"CK-CONFLICT-MEDIA\") {\n      return;\n    }\n\n    let currentElement = container;\n\n    do {\n      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\n    } while ((currentElement = currentElement.offsetParent));\n\n    x = e.pageX - totalOffsetX;\n\n    if (e.type === \"touchmove\") {\n      x = e.touches[0].pageX - totalOffsetX;\n    }\n\n    container.getElementsByTagName(\n      \"ck-conflict-media-option\"\n    )[0].style.width = `${x}px`;\n  }\n}\n\nMediaConflict.labels = {\n  left: \"Left version\",\n  right: \"Right version\",\n  source: \"Source version\",\n  empty: \"Clear\"\n};\n\ncustomElements.define(\"ck-conflict-media\", MediaConflict);\n","// The editor creator to use.\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BalloonEditorBase from '@ckeditor/ckeditor5-editor-balloon/src/ballooneditor';\n\nimport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\nimport Autoformat from '@ckeditor/ckeditor5-autoformat/src/autoformat';\nimport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\nimport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\nimport BlockQuote from '@ckeditor/ckeditor5-block-quote/src/blockquote';\nimport Heading from '@ckeditor/ckeditor5-heading/src/heading';\nimport List from '@ckeditor/ckeditor5-list/src/list';\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\nimport Table from '@ckeditor/ckeditor5-table/src/table';\nimport TableToolbar from '@ckeditor/ckeditor5-table/src/tabletoolbar';\nimport Template from '@amazee/ckeditor5-template/src/template';\nimport Linkit from '@amazee/ckeditor5-drupal-linkit/src/linkit';\nimport DrupalMedia from '@amazee/ckeditor5-drupal-media/src/drupalmedia';\nimport BlockToolbar from '@ckeditor/ckeditor5-ui/src/toolbar/block/blocktoolbar';\nimport Validation from '@amazee/ckeditor5-template/src/validation';\nimport ButtonElement from '@amazee/ckeditor5-drupal-linkit/src/elements/buttonelement';\nimport TemplateEditing from '@amazee/ckeditor5-template/src/templateediting';\nimport RemoteControl from '@amazee/ckeditor5-template/src/remotecontrol';\nimport TabsElement from '@amazee/ckeditor5-template/src/elements/tabselement';\nimport MergeEditing from '@amazee/ckeditor5-template/src/mergeediting';\n\nimport Placeholder from '@amazee/editor-components/components/placeholder/placeholder';\n\nimport '@amazee/editor-components/components/container/container';\nimport '@amazee/editor-components/components/gallery/gallery';\nimport '@amazee/editor-components/components/tabs/tabs';\nimport '@amazee/editor-components/components/text_conflict/text_conflict';\nimport '@amazee/editor-components/components/text_conflict/text_conflict_option/text_conflict_option';\nimport '@amazee/editor-components/components/media_conflict/media_conflict';\nimport '@amazee/editor-components/components/media_conflict/media_conflict_option/media_conflict_option';\n\nexport default class SectionsEditor extends BalloonEditorBase {}\n\nclass PlaceholderConfig extends Plugin {\n\tinit() {\n\t\tconst templates = this.editor.config.get( 'templates' );\n\t\tPlaceholder.availableSections = Object.keys( templates )\n\t\t\t.map( id => ( { id, label: templates[ id ].label, icon: templates[ id ].icon } ) );\n\t}\n}\n\n// Plugins to include in the build.\nSectionsEditor.builtinPlugins = [\n\tPlaceholderConfig,\n\tRemoteControl,\n\tEssentials,\n\tAutoformat,\n\tBold,\n\tItalic,\n\tBlockQuote,\n\tHeading,\n\tList,\n\tParagraph,\n\tTable,\n\tTableToolbar,\n\tBlockToolbar,\n\tTemplate,\n\tLinkit,\n\tTemplateEditing,\n\tDrupalMedia,\n\tValidation,\n\tTabsElement,\n\tButtonElement,\n\tMergeEditing\n];\n\n// Editor configuration.\nSectionsEditor.defaultConfig = {\n\ttemplates: {\n\t\troot: {\n\t\t\tlabel: 'Root',\n\t\t\ttemplate: '<div class=\"root\" ck-type=\"container\" ck-contains=\"media image paragraph text_media gallery tabs columns\"></div>',\n\t\t},\n\t\tparagraph: {\n\t\t\tlabel: 'Paragraph',\n\t\t\ticon: 'text',\n\t\t\ttemplate:\n\t\t\t\t'<div class=\"paragraph__wrapper\"><p class=\"paragraph\" ck-type=\"text\"></p></div>',\n\t\t},\n\t\ttext: {\n\t\t\tlabel: 'Text',\n\t\t\ticon: 'text',\n\t\t\ttemplate:\n\t\t\t\t'<div class=\"text\" id=\"\">' +\n\t\t\t\t\t'<h2 class=\"text__headline\" ck-type=\"text\" ck-plain=\"true\">Insert a headline</h2>' +\n\t\t\t\t\t'<div class=\"text__content\" ck-type=\"text\"></div>' +\n\t\t\t\t'</div>',\n\t\t},\n\t\ttext_media: {\n\t\t\tlabel: 'Text & Media',\n\t\t\ticon: 'text_media',\n\t\t\ttemplate:\n\t\t\t\t'<div class=\"text-media\" id=\"\" data-layout=\"right\">' +\n\t\t\t\t\t'<h2 class=\"text-media__headline\" ck-type=\"text\" ck-plain=\"true\">Insert a headline</h2>' +\n\t\t\t\t\t'<div class=\"text-media__wrapper\">' +\n\t\t\t\t\t\t'<div class=\"text-media__content\" ck-type=\"text\"></div>' +\n\t\t\t\t\t\t'<div class=\"text-media__media\" ck-type=\"placeholder\" ck-conversions=\"image\"></div>' +\n\t\t\t\t\t'</div>' +\n\t\t\t\t\t'<div class=\"text-media__cta\" ck-type=\"button\">Call to action!</div>' +\n\t\t\t\t'</div>',\n\t\t},\n\t\timage: {\n\t\t\tlabel: 'Image',\n\t\t\ticon: 'image',\n\t\t\ttemplate: '<div class=\"media-wrapper\">' +\n\t\t\t\t'<div class=\"text-media__image__media\" ck-type=\"drupal-media\" data-media-type=\"image\" data-media-uuid=\"\"></div>' +\n\t\t\t\t'</div>',\n\t\t},\n\t\tvideo: {\n\t\t\tlabel: 'Image',\n\t\t\ticon: 'video',\n\t\t\ttemplate: '<div class=\"media-wrapper-video\">' +\n\t\t\t\t'<div class=\"text-media__media\" ck-type=\"drupal-media\" data-media-type=\"image\" data-media-uuid=\"\"></div>' +\n\t\t\t\t'</div>',\n\t\t},\n\t\tmedia: {\n\t\t\tlabel: 'Media',\n\t\t\ticon: 'misc',\n\t\t\ttemplate: '<div class=\"media-item\" ck-type=\"placeholder\" ck-conversions=\"image video\"></div>',\n\t\t},\n\t\tgallery: {\n\t\t\tlabel: 'Gallery',\n\t\t\ticon: 'carousel',\n\t\t\ttemplate:\n\t\t\t\t'<div class=\"gallery_wrapper\"><div class=\"gallery\" ck-type=\"gallery\" ck-contains=\"media\"></div></div>',\n\t\t},\n\t\tcolumns: {\n\t\t\tlabel: 'Columns',\n\t\t\ticon: 'misc',\n\t\t\ttemplate:\n\t\t\t'<div class=\"two-columns\"><div class=\"two-col-wrapper\">' +\n\t\t\t\t'<div class=\"column-a\" ck-type=\"container\" ck-contains=\"text media gallery\"></div>' +\n\t\t\t\t'<div class=\"column-b\" ck-type=\"container\" ck-contains=\"text media gallery\"></div>' +\n\t\t\t'</div></div>'\n\t\t},\n\t\ttabs: {\n\t\t\tlabel: 'Tabs',\n\t\t\ticon: 'misc',\n\t\t\ttemplate:\n\t\t\t\t'<div class=\"tabs_wrapper\"><div class=\"tabs\" ck-type=\"tabs\" ck-contains=\"tab\"></div></div>',\n\t\t},\n\t\ttab: {\n\t\t\tlabel: 'Tab',\n\t\t\ttemplate:\n\t\t\t\t'<div class=\"tab_wrapper\" data-tab-title=\"\" data-default-tab=\"\"><div class=\"tab\" ck-type=\"gallery\" ck-contains=\"image\"></div></div>',\n\t\t}\n\t},\n\tmasterTemplate: 'root',\n\ttemplateAttributes: {\n\t\t'data-tab-title': {\n\t\t\ttype: 'custom',\n\t\t},\n\t\t'data-default-tab': {\n\t\t\ttype: 'custom',\n\t\t},\n\t\t'id': {\n\t\t\ttype: 'textfield',\n\t\t\tlabel: 'HTML ID',\n\t\t},\n\t\t'data-layout': {\n\t\t\ttype: 'dropdown',\n\t\t\tlabel: 'Layout',\n\t\t\toptions: {\n\t\t\t\tleft: 'Media on the left',\n\t\t\t\tright: 'Media on the right',\n\t\t\t}\n\t\t}\n\t},\n\tdrupalMediaSelector: { callback: ( type, operation, callback ) => {\n\t\tcallback( operation === 'add' ? '300' : '400' );\n\t} },\n\tdrupalMediaRenderer: { callback: ( uuid, display, callback ) => {\n\t\twindow.setTimeout( () => {\n\t\t\tcallback( `<img src=\"https://picsum.photos/800/${ uuid }\"/>` );\n\t\t}, 2000 );\n\t} },\n\tdrupalLinkSelector: { callback: ( existingValues, callback ) => {\n\t\tcallback( { href: 'http://www.drupal.org' } );\n\t} },\n\ttoolbar: {\n\t\titems: [\n\t\t\t'bold',\n\t\t\t'italic',\n\t\t\t'link',\n\t\t\t'bulletedList',\n\t\t\t'numberedList',\n\t\t\t'blockQuote',\n\t\t\t'insertTable',\n\t\t\t'undo',\n\t\t\t'redo'\n\t\t]\n\t},\n\ttable: {\n\t\tcontentToolbar: [\n\t\t\t'tableColumn',\n\t\t\t'tableRow',\n\t\t\t'mergeTableCells'\n\t\t]\n\t},\n\tblockToolbar: [ 'heading', 'insertTable' ],\n\t// This value must be kept in sync with the language defined in webpack.config.js.\n\tlanguage: 'en'\n};\n","import Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport RemoteControlObserver from './observer/remotecontrolobserver';\nimport { eventType } from '@amazee/editor-components/components/editor/operations';\nimport RemoteControlCommand from './commands/remotecontrolcommand';\n\nexport default class RemoteControl extends Plugin {\n\tinit() {\n\t\tthis.editor.editing.view.addObserver( RemoteControlObserver );\n\t\tthis.editor.commands.add( 'remoteControlCommand', new RemoteControlCommand( this.editor ) );\n\t\tthis.listenTo( this.editor.editing.view.document, eventType, ( evt, data ) => {\n\t\t\tthis.editor.commands.get( 'remoteControlCommand' ).execute( data.domEvent.detail );\n\t\t} );\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module essentials/essentials\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport Clipboard from '@ckeditor/ckeditor5-clipboard/src/clipboard';\nimport Enter from '@ckeditor/ckeditor5-enter/src/enter';\nimport ShiftEnter from '@ckeditor/ckeditor5-enter/src/shiftenter';\nimport Typing from '@ckeditor/ckeditor5-typing/src/typing';\nimport Undo from '@ckeditor/ckeditor5-undo/src/undo';\n\n/**\n * A plugin including all essential editing features. It represents a set of features that enables similar functionalities\n * to a `<textarea>` element.\n *\n * It includes:\n *\n * * {@link module:clipboard/clipboard~Clipboard},\n * * {@link module:enter/enter~Enter},\n * * {@link module:enter/shiftenter~ShiftEnter},\n * * {@link module:typing/typing~Typing},\n * * {@link module:undo/undo~Undo}.\n *\n * This plugin set does not define any block-level containers (such as {@link module:paragraph/paragraph~Paragraph}).\n * If your editor is supposed to handle block content, make sure to include it.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Essentials extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ Clipboard, Enter, ShiftEnter, Typing, Undo ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Essentials';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module autoformat/autoformat\n */\n\nimport BlockAutoformatEditing from './blockautoformatediting';\nimport InlineAutoformatEditing from './inlineautoformatediting';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * Enables a set of predefined autoformatting actions.\n *\n * For a detailed overview, check the {@glink features/autoformat Autoformatting feature documentation}\n * and the {@glink api/autoformat package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Autoformat extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Autoformat';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tthis._addListAutoformats();\n\t\tthis._addBasicStylesAutoformats();\n\t\tthis._addHeadingAutoformats();\n\t\tthis._addBlockQuoteAutoformats();\n\t}\n\n\t/**\n\t * Adds autoformatting related to the {@link module:list/list~List}.\n\t *\n\t * When typed:\n\t * - `* ` or `- ` &ndash; A paragraph will be changed to a bulleted list.\n\t * - `1. ` or `1) ` &ndash; A paragraph will be changed to a numbered list (\"1\" can be any digit or a list of digits).\n\t *\n\t * @private\n\t */\n\t_addListAutoformats() {\n\t\tconst commands = this.editor.commands;\n\n\t\tif ( commands.get( 'bulletedList' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^[*-]\\s$/, 'bulletedList' );\n\t\t}\n\n\t\tif ( commands.get( 'numberedList' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^\\d+[.|)]\\s$/, 'numberedList' );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to the {@link module:basic-styles/bold~Bold},\n\t * {@link module:basic-styles/italic~Italic} and {@link module:basic-styles/code~Code}.\n\t *\n\t * When typed:\n\t * - `**foobar**` &ndash; `**` characters are removed and `foobar` is set to bold,\n\t * - `__foobar__` &ndash; `__` characters are removed and `foobar` is set to bold,\n\t * - `*foobar*` &ndash; `*` characters are removed and `foobar` is set to italic,\n\t * - `_foobar_` &ndash; `_` characters are removed and `foobar` is set to italic,\n\t * - ``` `foobar` &ndash; ``` ` ``` characters are removed and `foobar` is set to code.\n\t *\n\t * @private\n\t */\n\t_addBasicStylesAutoformats() {\n\t\tconst commands = this.editor.commands;\n\n\t\tif ( commands.get( 'bold' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tnew InlineAutoformatEditing( this.editor, /(\\*\\*)([^*]+)(\\*\\*)$/g, 'bold' );\n\t\t\tnew InlineAutoformatEditing( this.editor, /(__)([^_]+)(__)$/g, 'bold' );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\n\t\tif ( commands.get( 'italic' ) ) {\n\t\t\t// The italic autoformatter cannot be triggered by the bold markers, so we need to check the\n\t\t\t// text before the pattern (e.g. `(?:^|[^\\*])`).\n\n\t\t\t/* eslint-disable no-new */\n\t\t\tnew InlineAutoformatEditing( this.editor, /(?:^|[^*])(\\*)([^*_]+)(\\*)$/g, 'italic' );\n\t\t\tnew InlineAutoformatEditing( this.editor, /(?:^|[^_])(_)([^_]+)(_)$/g, 'italic' );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\n\t\tif ( commands.get( 'code' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tnew InlineAutoformatEditing( this.editor, /(`)([^`]+)(`)$/g, 'code' );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:heading/heading~Heading}.\n\t *\n\t * It is using a number at the end of the command name to associate it with the proper trigger:\n\t *\n\t * * `heading` with value `heading1` will be executed when typing `#`,\n\t * * `heading` with value `heading2` will be executed when typing `##`,\n\t * * ... up to `heading6` and `######`.\n\t *\n\t * @private\n\t */\n\t_addHeadingAutoformats() {\n\t\tconst command = this.editor.commands.get( 'heading' );\n\n\t\tif ( command ) {\n\t\t\tcommand.modelElements\n\t\t\t\t.filter( name => name.match( /^heading[1-6]$/ ) )\n\t\t\t\t.forEach( commandValue => {\n\t\t\t\t\tconst level = commandValue[ 7 ];\n\t\t\t\t\tconst pattern = new RegExp( `^(#{${ level }})\\\\s$` );\n\n\t\t\t\t\t// eslint-disable-next-line no-new\n\t\t\t\t\tnew BlockAutoformatEditing( this.editor, pattern, () => {\n\t\t\t\t\t\tthis.editor.execute( 'heading', { value: commandValue } );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:block-quote/blockquote~BlockQuote}.\n\t *\n\t * When typed:\n\t * * `> ` &ndash; A paragraph will be changed to a block quote.\n\t *\n\t * @private\n\t */\n\t_addBlockQuoteAutoformats() {\n\t\tif ( this.editor.commands.get( 'blockQuote' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^>\\s$/, 'blockQuote' );\n\t\t}\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module basic-styles/bold\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BoldEditing from './bold/boldediting';\nimport BoldUI from './bold/boldui';\n\n/**\n * The bold feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature documentation}\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/bold/boldediting~BoldEditing bold editing feature}\n * and {@link module:basic-styles/bold/boldui~BoldUI bold UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Bold extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ BoldEditing, BoldUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Bold';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module basic-styles/italic\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ItalicEditing from './italic/italicediting';\nimport ItalicUI from './italic/italicui';\n\n/**\n * The italic feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature documentation}\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/italic/italicediting~ItalicEditing} and\n * {@link module:basic-styles/italic/italicui~ItalicUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Italic extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ItalicEditing, ItalicUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Italic';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module block-quote/blockquote\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BlockQuoteEditing from './blockquoteediting';\nimport BlockQuoteUI from './blockquoteui';\n\n/**\n * The block quote plugin.\n *\n * For more information about this feature check the {@glink api/block-quote package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:block-quote/blockquoteediting~BlockQuoteEditing block quote editing feature}\n * and {@link module:block-quote/blockquoteui~BlockQuoteUI block quote UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuote extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ BlockQuoteEditing, BlockQuoteUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'BlockQuote';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module heading/heading\n */\n\nimport HeadingEditing from './headingediting';\nimport HeadingUI from './headingui';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport '../theme/heading.css';\n\n/**\n * The headings feature.\n *\n * For a detailed overview, check the {@glink features/headings Headings feature documentation}\n * and the {@glink api/heading package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:heading/headingediting~HeadingEditing heading editing feature}\n * and {@link module:heading/headingui~HeadingUI heading UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Heading extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ HeadingEditing, HeadingUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Heading';\n\t}\n}\n\n/**\n * The configuration of the heading feature. Introduced by the {@link module:heading/headingediting~HeadingEditing} feature.\n *\n * Read more in {@link module:heading/heading~HeadingConfig}.\n *\n * @member {module:heading/heading~HeadingConfig} module:core/editor/editorconfig~EditorConfig#heading\n */\n\n/**\n * The configuration of the heading feature.\n * The option is used by the {@link module:heading/headingediting~HeadingEditing} feature.\n *\n *\t\tClassicEditor\n *\t\t\t.create( {\n * \t\t\t\theading: ... // Heading feature config.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface HeadingConfig\n */\n\n/**\n * The available heading options.\n *\n * The default value is:\n *\n *\t\tconst headingConfig = {\n *\t\t\toptions: [\n *\t\t\t\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n *\t\t\t\t{ model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n *\t\t\t\t{ model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n *\t\t\t\t{ model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n *\t\t\t]\n *\t\t};\n *\n * It defines 3 levels of headings. In the editor model they will use `heading1`, `heading2`, and `heading3` elements.\n * Their respective view elements (so the elements output by the editor) will be: `h2`, `h3`, and `h4`. This means that\n * if you choose \"Heading 1\" in the headings dropdown the editor will turn the current block to `<heading1>` in the model\n * which will result in rendering (and outputting to data) the `<h2>` element.\n *\n * The `title` and `class` properties will be used by the `headings` dropdown to render available options.\n * Usually, the first option in the headings dropdown is the \"Paragraph\" option, hence it's also defined on the list.\n * However, you don't need to define its view representation because it's handled by\n * the {@link module:paragraph/paragraph~Paragraph} feature (which is required by\n * the {@link module:heading/headingediting~HeadingEditing} feature).\n *\n * You can **read more** about configuring heading levels and **see more examples** in\n * the {@glink features/headings Headings} guide.\n *\n * Note: In the model you should always start from `heading1`, regardless of how the headings are represented in the view.\n * That's assumption is used by features like {@link module:autoformat/autoformat~Autoformat} to know which element\n * they should use when applying the first level heading.\n *\n * The defined headings are also available as values passed to the `'heading'` command under their model names.\n * For example, the below code will apply `<heading1>` to the current selection:\n *\n *\t\teditor.execute( 'heading', { value: 'heading1' } );\n *\n * @member {Array.<module:heading/heading~HeadingOption>} module:heading/heading~HeadingConfig#options\n */\n\n/**\n * Heading option descriptor.\n *\n * @typedef {Object} module:heading/heading~HeadingOption\n * @property {String} model Name of the model element to convert.\n * @property {module:engine/view/elementdefinition~ElementDefinition} view Definition of a view element to convert from/to.\n * @property {String} title The user-readable title of the option.\n * @property {String} class The class which will be added to the dropdown item representing this option.\n * @property {String} [icon] Icon used by {@link module:heading/headingbuttonsui~HeadingButtonsUI}. It can be omitted when using\n * the default configuration.\n * @extends module:engine/conversion/conversion~ConverterDefinition\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module list/list\n */\n\nimport ListEditing from './listediting';\nimport ListUI from './listui';\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * The list feature.\n *\n * This is a \"glue\" plugin which loads the {@link module:list/listediting~ListEditing list editing feature}\n * and {@link module:list/listui~ListUI list UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class List extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ListEditing, ListUI ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'List';\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/table\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport TableEditing from './tableediting';\nimport TableUI from './tableui';\nimport Widget from '@ckeditor/ckeditor5-widget/src/widget';\n\nimport '../theme/table.css';\n\n/**\n * The table plugin.\n *\n * For a detailed overview, check the {@glink features/table Table feature documentation}.\n *\n * This is a \"glue\" plugin which loads the {@link module:table/tableediting~TableEditing table editing feature}\n * and {@link module:table/tableui~TableUI table UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Table extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TableEditing, TableUI, Widget ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Table';\n\t}\n}\n\n/**\n * The configuration of the table features. Used by the table features in the `@ckeditor/ckeditor5-table` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\ttable: ... // Table feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface TableConfig\n */\n","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module table/tabletoolbar\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { isTableContentSelected, isTableWidgetSelected } from './utils';\nimport WidgetToolbarRepository from '@ckeditor/ckeditor5-widget/src/widgettoolbarrepository';\n\n/**\n * The table toolbar class. It creates toolbars for the table feature and its content (for now only for a table cell content).\n *\n * Table toolbar shows up when a table widget is selected. Its components (e.g. buttons) are created based on the\n * {@link module:table/table~TableConfig#toolbar `table.tableToolbar` configuration option}.\n *\n * Table content toolbar shows up when the selection is inside the content of a table. It creates its component based on the\n * {@link module:table/table~TableConfig#contentToolbar `table.contentToolbar` configuration option}.\n *\n * Note that the old {@link module:table/table~TableConfig#toolbar `table.toolbar` configuration option} is deprecated\n * and will be removed in the next major release.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableToolbar extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ WidgetToolbarRepository ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'TableToolbar';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tconst editor = this.editor;\n\t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n\n\t\tconst tableContentToolbarItems = editor.config.get( 'table.contentToolbar' );\n\t\tconst deprecatedTableContentToolbarItems = editor.config.get( 'table.toolbar' );\n\n\t\tconst tableToolbarItems = editor.config.get( 'table.tableToolbar' );\n\n\t\tif ( deprecatedTableContentToolbarItems ) {\n\t\t\t// eslint-disable-next-line\n\t\t\tconsole.warn(\n\t\t\t\t'`config.table.toolbar` is deprecated and will be removed in the next major release.' +\n\t\t\t\t' Use `config.table.contentToolbar` instead.'\n\t\t\t);\n\t\t}\n\n\t\tif ( tableContentToolbarItems || deprecatedTableContentToolbarItems ) {\n\t\t\twidgetToolbarRepository.register( 'tableContent', {\n\t\t\t\titems: tableContentToolbarItems || deprecatedTableContentToolbarItems,\n\t\t\t\tvisibleWhen: isTableContentSelected,\n\t\t\t} );\n\t\t}\n\n\t\tif ( tableToolbarItems ) {\n\t\t\twidgetToolbarRepository.register( 'table', {\n\t\t\t\titems: tableToolbarItems,\n\t\t\t\tvisibleWhen: isTableWidgetSelected,\n\t\t\t} );\n\t\t}\n\t}\n}\n\n/**\n * Items to be placed in the table content toolbar.\n *\n * **Note:** This configuration option is deprecated! Use {@link module:table/table~TableConfig#contentToolbar} instead.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @deprecated\n * @member {Array.<String>} module:table/table~TableConfig#toolbar\n */\n\n/**\n * Items to be placed in the table content toolbar.\n * The {@link module:table/tabletoolbar~TableToolbar} plugin is required to make this toolbar working.\n *\n * Assuming that you use the {@link module:table/tableui~TableUI} feature, the following toolbar items will be available\n * in {@link module:ui/componentfactory~ComponentFactory}:\n *\n * * `'tableRow'`,\n * * `'tableColumn'`,\n * * `'mergeTableCells'`.\n *\n * You can thus configure the toolbar like this:\n *\n *\t\tconst tableConfig = {\n *\t\t\tcontentToolbar: [ 'tableRow', 'tableColumn', 'mergeTableCells' ]\n *\t\t};\n *\n * Of course, the same buttons can also be used in the\n * {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:table/table~TableConfig#contentToolbar\n */\n\n/**\n * Items to be placed in the table toolbar.\n * The {@link module:table/tabletoolbar~TableToolbar} plugin is required to make this toolbar working.\n *\n * You can thus configure the toolbar like this:\n *\n *\t\tconst tableConfig = {\n *\t\t\ttableToolbar: [ 'blockQuote' ]\n *\t\t};\n *\n * Of course, the same buttons can also be used in the\n * {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:table/table~TableConfig#tableToolbar\n */\n","/**\n * Copyright (c) 2016 - 2017, CKSource - Frederico Knabben. All rights reserved.\n */\n/**\n * @module ui/toolbar/block/blocktoolbar\n */\n/* global window */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BlockButtonView from './blockbuttonview';\nimport BalloonPanelView from '../../panel/balloon/balloonpanelview';\nimport ToolbarView from '../toolbarview';\nimport clickOutsideHandler from '../../bindings/clickoutsidehandler';\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport iconPilcrow from '@ckeditor/ckeditor5-core/theme/icons/pilcrow.svg';\n/**\n * The block toolbar plugin.\n *\n * This plugin provides a button positioned next to the block of content where the selection is anchored.\n * Upon clicking the button, a dropdown providing access to editor features shows up, as configured in\n * {@link module:core/editor/editorconfig~EditorConfig#blockToolbar}.\n *\n * By default, the button is displayed next to all elements marked in {@link module:engine/model/schema~Schema}\n * as `$block` for which the toolbar provides at least one option.\n *\n * By default, the button is attached so its right boundary is touching the\n * {@link module:engine/view/editableelement~EditableElement}:\n *\n * \t\t __ |\n * \t\t|  ||  This is a block of content that the\n * \t\t ¯¯ |  button is attached to. This is a\n * \t\t    |  block of content that the button is\n * \t\t    |  attached to.\n *\n * The position of the button can be adjusted using the CSS `transform` property:\n *\n * \t\t.ck-block-toolbar-button {\n * \t\t\ttransform: translateX( -10px );\n * \t\t}\n *\n * \t\t __   |\n * \t\t|  |  |  This is a block of content that the\n * \t\t ¯¯   |  button is attached to. This is a\n * \t\t      |  block of content that the button is\n * \t\t      |  attached to.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockToolbar extends Plugin {\n    /**\n\t * @inheritDoc\n\t */\n    static get pluginName() {\n        return 'BlockToolbar';\n    }\n    /**\n\t * @inheritDoc\n\t */\n    constructor(editor) {\n        super(editor);\n        /**\n\t\t * The toolbar view.\n\t\t *\n\t\t * @type {module:ui/toolbar/toolbarview~ToolbarView}\n\t\t */\n        this.toolbarView = this._createToolbarView();\n        /**\n\t\t * The balloon panel view, containing the {@link #toolbarView}.\n\t\t *\n\t\t * @type {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n\t\t */\n        this.panelView = this._createPanelView();\n        /**\n\t\t * The button view that opens the {@link #toolbarView}.\n\t\t *\n\t\t * @type {module:ui/toolbar/block/blockbuttonview~BlockButtonView}\n\t\t */\n        this.buttonView = this._createButtonView();\n        // Close the #panelView upon clicking outside of the plugin UI.\n        clickOutsideHandler({\n            emitter: this.panelView,\n            contextElements: [\n                this.panelView.element,\n                this.buttonView.element\n            ],\n            activator: () => this.panelView.isVisible,\n            callback: () => this._hidePanel()\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */\n    init() {\n        const editor = this.editor;\n        // Hides panel on a direct selection change.\n        this.listenTo(editor.model.document.selection, 'change:range', (evt, data) => {\n            if (data.directChange) {\n                this._hidePanel();\n            }\n        });\n        this.listenTo(editor.ui, 'update', () => this._updateButton());\n        // `low` priority is used because of https://github.com/ckeditor/ckeditor5-core/issues/133.\n        this.listenTo(editor, 'change:isReadOnly', () => this._updateButton(), { priority: 'low' });\n        this.listenTo(editor.ui.focusTracker, 'change:isFocused', () => this._updateButton());\n        // Reposition button on resize.\n        this.listenTo(this.buttonView, 'change:isVisible', (evt, name, isVisible) => {\n            if (isVisible) {\n                // Keep correct position of button and panel on window#resize.\n                this.buttonView.listenTo(window, 'resize', () => this._updateButton());\n            } else {\n                // Stop repositioning button when is hidden.\n                this.buttonView.stopListening(window, 'resize');\n                // Hide the panel when the button disappears.\n                this._hidePanel();\n            }\n        });\n    }\n    /**\n\t * Fills the toolbar with its items based on the configuration.\n\t *\n\t * **Note:** This needs to be done after all plugins are ready.\n\t *\n\t * @inheritDoc\n\t */\n    afterInit() {\n        const factory = this.editor.ui.componentFactory;\n        const config = this.editor.config.get('blockToolbar');\n        this.toolbarView.fillFromConfig(config, factory);\n        // Hide panel before executing each button in the panel.\n        for (const item of this.toolbarView.items) {\n            item.on('execute', () => this._hidePanel(true), { priority: 'high' });\n        }\n    }\n    /**\n\t * Creates the {@link #toolbarView}.\n\t *\n\t * @private\n\t * @returns {module:ui/toolbar/toolbarview~ToolbarView}\n\t */\n    _createToolbarView() {\n        const toolbarView = new ToolbarView(this.editor.locale);\n        toolbarView.extendTemplate({\n            attributes: {\n                // https://github.com/ckeditor/ckeditor5-editor-inline/issues/11\n                class: ['ck-toolbar_floating']\n            }\n        });\n        // When toolbar lost focus then panel should hide.\n        toolbarView.focusTracker.on('change:isFocused', (evt, name, is) => {\n            if (!is) {\n                this._hidePanel();\n            }\n        });\n        return toolbarView;\n    }\n    /**\n\t * Creates the {@link #panelView}.\n\t *\n\t * @private\n\t * @returns {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n\t */\n    _createPanelView() {\n        const editor = this.editor;\n        const panelView = new BalloonPanelView(editor.locale);\n        panelView.content.add(this.toolbarView);\n        panelView.className = 'ck-toolbar-container';\n        editor.ui.view.body.add(panelView);\n        editor.ui.focusTracker.add(panelView.element);\n        // Close #panelView on `Esc` press.\n        this.toolbarView.keystrokes.set('Esc', (evt, cancel) => {\n            this._hidePanel(true);\n            cancel();\n        });\n        return panelView;\n    }\n    /**\n\t * Creates the {@link #buttonView}.\n\t *\n\t * @private\n\t * @returns {module:ui/toolbar/block/blockbuttonview~BlockButtonView}\n\t */\n    _createButtonView() {\n        const editor = this.editor;\n        const t = editor.t;\n        const buttonView = new BlockButtonView(editor.locale);\n        buttonView.set({\n            label: t('a'),\n            icon: iconPilcrow,\n            withText: false\n        });\n        // Bind the panelView observable properties to the buttonView.\n        buttonView.bind('isOn').to(this.panelView, 'isVisible');\n        buttonView.bind('tooltip').to(this.panelView, 'isVisible', isVisible => !isVisible);\n        // Toggle the panelView upon buttonView#execute.\n        this.listenTo(buttonView, 'execute', () => {\n            if (!this.panelView.isVisible) {\n                this._showPanel();\n            } else {\n                this._hidePanel(true);\n            }\n        });\n        editor.ui.view.body.add(buttonView);\n        editor.ui.focusTracker.add(buttonView.element);\n        return buttonView;\n    }\n    /**\n\t * Shows or hides the button.\n\t * When all the conditions for displaying the button are matched, it shows the button. Hides otherwise.\n\t *\n\t * @private\n\t */\n    _updateButton() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        // Hides the button when the editor is not focused.\n        if (!editor.ui.focusTracker.isFocused) {\n            this._hideButton();\n            return;\n        }\n        // Hides the button when the editor switches to the read-only mode.\n        if (editor.isReadOnly) {\n            this._hideButton();\n            return;\n        }\n        // Get the first selected block, button will be attached to this element.\n        const modelTarget = Array.from(model.document.selection.getSelectedBlocks())[0];\n        // Hides the button when there is no enabled item in toolbar for the current block element.\n        if (!modelTarget || Array.from(this.toolbarView.items).every(item => !item.isEnabled)) {\n            this._hideButton();\n            return;\n        }\n        // Get DOM target element.\n        const domTarget = view.domConverter.mapViewToDom(editor.editing.mapper.toViewElement(modelTarget));\n        // Show block button.\n        this.buttonView.isVisible = true;\n        // Attach block button to target DOM element.\n        this._attachButtonToElement(domTarget);\n        // When panel is opened then refresh it position to be properly aligned with block button.\n        if (this.panelView.isVisible) {\n            this._showPanel();\n        }\n    }\n    /**\n\t * Hides the button.\n\t *\n\t * @private\n\t */\n    _hideButton() {\n        this.buttonView.isVisible = false;\n    }\n    /**\n\t * Shows the {@link #toolbarView} attached to the {@link #buttonView}.\n\t * If the toolbar is already visible, then it simply repositions it.\n\t *\n\t * @private\n\t */\n    _showPanel() {\n        const wasVisible = this.panelView.isVisible;\n        this.panelView.pin({\n            target: this.buttonView.element,\n            limiter: this.editor.ui.view.editableElement\n        });\n        if (!wasVisible) {\n            this.toolbarView.items.get(0).focus();\n        }\n    }\n    /**\n\t * Hides the {@link #toolbarView}.\n\t *\n\t * @private\n\t * @param {Boolean} [focusEditable=false] When `true`, the editable will be focused after hiding the panel.\n\t */\n    _hidePanel(focusEditable) {\n        this.panelView.isVisible = false;\n        if (focusEditable) {\n            this.editor.editing.view.focus();\n        }\n    }\n    /**\n\t * Attaches the {@link #buttonView} to the target block of content.\n\t *\n\t * @protected\n\t * @param {HTMLElement} targetElement Target element.\n\t */\n    _attachButtonToElement(targetElement) {\n        const contentStyles = window.getComputedStyle(targetElement);\n        const editableRect = new Rect(this.editor.ui.view.editableElement);\n        const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n        // When line height is not an integer then thread it as \"normal\".\n        // MDN says that 'normal' == ~1.2 on desktop browsers.\n        const contentLineHeight = parseInt(contentStyles.lineHeight, 10) || parseInt(contentStyles.fontSize, 10) * 1.2;\n        const position = getOptimalPosition({\n            element: this.buttonView.element,\n            target: targetElement,\n            positions: [(contentRect, buttonRect) => {\n                    return {\n                        top: contentRect.top + contentPaddingTop + (contentLineHeight - buttonRect.height) / 2,\n                        left: editableRect.left - buttonRect.width\n                    };\n                }]\n        });\n        this.buttonView.top = position.top;\n        this.buttonView.left = position.left;\n    }\n}    /**\n * The block toolbar configuration. Used by the {@link module:ui/toolbar/block/blocktoolbar~BlockToolbar}\n * feature.\n *\n *\t\tconst config = {\n *\t\t\tblockToolbar: [ 'paragraph', 'heading1', 'heading2', 'bulletedList', 'numberedList' ]\n *\t\t};\n *\n * You can also use `'|'` to create a separator between groups of items:\n *\n *\t\tconst config = {\n *\t\t\tblockToolbar: [ 'paragraph', 'heading1', 'heading2', '|', 'bulletedList', 'numberedList' ]\n *\t\t};\n *\n * Read more about configuring the main editor toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>|Object} module:core/editor/editorconfig~EditorConfig#blockToolbar\n */","/**\n * @module template/template\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport TemplateEditing from './templateediting';\nimport MasterTemplate from './mastertemplate';\nimport TemplateUI from './ui/templateui';\nimport TextElement from './elements/textelement';\nimport PlaceholderElement from './elements/placeholderelement';\nimport ContainerElement from './elements/containerelement';\nimport TemplateAttributeUI from './ui/templateattributeui';\nimport TemplateId from './templateid';\nimport TextLimit from './textlimit';\nimport HoveredWidget from './hoveredwidget';\nimport GalleryElement from './elements/galleryelement';\n\n/**\n * Root template plugin, requiring all auxiliary plugins to enable template functionality.\n *\n * Can be configured with template snippets:\n *\n *     templates: {\n *       simple: {\n *         label: 'Simple',\n *         template: '<div class=\"simple\"></div>',\n *       },\n *       complex: {\n *         label: 'Complex',\n *         template: '<div class=\"parent\"><div class=\"child\"></div></div>',\n *       },\n *     }\n *\n * @see module:template/templateediting~TemplateEditing\n * @see module:template/templateui~TemplateUI\n */\nexport default class Template extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [\n\t\t\tTemplateEditing,\n\t\t\tMasterTemplate,\n\t\t\tTextElement,\n\t\t\tPlaceholderElement,\n\t\t\tContainerElement,\n\t\t\tGalleryElement,\n\t\t\tTemplateUI,\n\t\t\tTemplateAttributeUI,\n\t\t\tTemplateId,\n\t\t\tTextLimit,\n\t\t\tHoveredWidget\n\t\t];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Template';\n\t}\n}\n","import Link from '@ckeditor/ckeditor5-link/src/link';\nimport LinkitEditing from './linkitediting';\nimport LinkitUI from './linkitui';\n\nexport default class Linkit extends Link {\n\t/**\n   * @inheritDoc\n   */\n\tstatic get requires() {\n\t\treturn [ LinkitEditing, LinkitUI ];\n\t}\n\n\t/**\n   * @inheritDoc\n   */\n\tstatic get pluginName() {\n\t\treturn 'Linkit';\n\t}\n}\n","import Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport DrupalMediaEditing from './drupalmediaediting';\nimport DrupalMediaUI from './drupalmediaui';\n\nexport default class DrupalMedia extends Plugin {\n\tstatic get requires() {\n\t\treturn [ DrupalMediaEditing, DrupalMediaUI ];\n\t}\n}\n","import Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport TextLimitTooltipView from './ui/views/textlimittooltipview';\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\n\n/**\n * Elements validation plugin.\n */\nexport default class Validation extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tthis.tooltipView = new TextLimitTooltipView();\n\t\tthis.tooltipView.set();\n\t\tthis.editor.ui.view.body.add( this.tooltipView );\n\t\tthis.editor.ui.focusTracker.add( this.tooltipView.element );\n\n\t\t// Update button positioning on any of the various occasions.\n\t\tthis.listenTo( this.editor.ui, 'update', () => this._updateTooltipDisplay() );\n\t\tthis.listenTo( this.editor, 'change:isReadOnly', () => this._updateTooltipDisplay() );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\t_updateTooltipDisplay() {\n\t\tconst result = this.editor.templates.findSelectedTemplateElement( info => {\n\t\t\treturn info.configuration.validation;\n\t\t} );\n\n\t\tif ( !result.element || this.editor.isReadOnly ) {\n\t\t\tthis.tooltipView.isVisible = false;\n\t\t\treturn;\n\t\t}\n\n\t\tconst validation = result.info.configuration.validation;\n\n\t\tif ( !validation ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst min = parseInt( result.info.configuration.min );\n\t\tconst max = parseInt( result.info.configuration.max );\n\n\t\tthis.tooltipView.isVisible = true;\n\n\t\tconst viewElement = this.editor.editing.mapper.toViewElement( result.element );\n\t\tconst domElement = this.editor.editing.view.domConverter.mapViewToDom( viewElement );\n\t\tconst elementContent = domElement.innerText.replace( /[\\u200B-\\u200D\\uFEFF]/g, '' ).trim();\n\n\t\tconst regex = new RegExp( validation, 'gm' );\n\t\tconst match = elementContent.match( regex );\n\n\t\tconst message = [];\n\n\t\tif ( ( !match && min > 1 ) || ( min > 1 && match && match.length < min ) ) {\n\t\t\tconst length = match ? match.length : 0;\n\t\t\tmessage.push( this.editor.locale.t( 'Too short: please add at least %0 letters.', [ min - length ] ) );\n\t\t} else if ( !match && min ) {\n\t\t\tmessage.push( this.editor.locale.t( 'This is a mandatory field' ), domElement, true );\n\t\t}\n\n\t\tif ( match && max && match.length > max ) {\n\t\t\tmessage.push( this.editor.locale.t( 'Too long: please remove at least %0 letters.', [ match.length - max ] ) );\n\t\t}\n\n\t\tif ( message.length > 0 ) {\n\t\t\tthis._showTooltip( message.join( ' ' ), domElement, true );\n\t\t}\n\t\telse {\n\t\t\tthis._hideTooltip( domElement );\n\t\t}\n\t}\n\n\t_showTooltip( message, domElement, highlight ) {\n\t\tif ( highlight ) {\n\t\t\tdomElement.classList.add( 'ck-required-validation-error' );\n\t\t} else {\n\t\t\tdomElement.classList.remove( 'ck-required-validation-error' );\n\t\t}\n\t\tthis.tooltipView.isExceeded = true;\n\t\tthis.tooltipView.set( { text: message } );\n\n\t\tconst tooltipPosition = getOptimalPosition( {\n\t\t\telement: this.tooltipView.element,\n\t\t\ttarget: domElement,\n\t\t\tpositions: [\n\t\t\t\ttargetRect => ( {\n\t\t\t\t\ttop: targetRect.top + targetRect.height,\n\t\t\t\t\tleft: targetRect.left,\n\t\t\t\t} )\n\t\t\t]\n\t\t} );\n\n\t\tthis.tooltipView.top = tooltipPosition.top;\n\t\tthis.tooltipView.left = tooltipPosition.left;\n\t}\n\n\t_hideTooltip( domElement ) {\n\t\tdomElement.classList.remove( 'ck-required-validation-error' );\n\t\tthis.tooltipView.isVisible = false;\n\t}\n}\n","/**\n * @module template/elements/tabselement\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport { downcastTemplateElement, getModelAttributes } from '../utils/conversion';\nimport { toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\n\nimport TemplateEditing from '../templateediting';\n\n/**\n * Allow an arbitrary list of elements of a given type.\n *\n * Displays elements as tabs and allows to add titles and a default status.\n */\nexport default class TabsElement extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TemplateEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t// Get all configured placeholder elements.\n\t\tconst tabsElements = this.editor.templates.getElementsByType( 'tabs' );\n\n\t\tfor ( const tabsElement of tabsElements ) {\n\t\t\t// Extend the schema so that the contained elements can be placed in tabs.\n\t\t\tfor ( const el of tabsElement.contains ) {\n\t\t\t\tthis.editor.model.schema.extend( `ck__${ el }`, {\n\t\t\t\t\tallowIn: tabsElement.name,\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\t// Allow `$text` within all elements.\n\t\t// Required until https://github.com/ckeditor/ckeditor5-engine/issues/1593 is fixed.\n\t\t// TODO: Remove this once the issue is resolved.\n\t\tthis.editor.model.schema.extend( '$text', {\n\t\t\tallowIn: tabsElements.map( el => `${ el.name }__placeholder` ),\n\t\t} );\n\n\t\tthis.editor.conversion.for( 'editingDowncast' ).add( downcastTemplateElement( this.editor, {\n\t\t\ttypes: [ 'tabs' ],\n\t\t\tview: ( templateElement, modelElement, viewWriter ) => {\n\t\t\t\tconst attributes = getModelAttributes( templateElement, modelElement );\n\t\t\t\tattributes.section = templateElement.contains[ 0 ];\n\t\t\t\tconst el = viewWriter.createContainerElement(\n\t\t\t\t\t'ck-tabs',\n\t\t\t\t\tattributes\n\t\t\t\t);\n\t\t\t\treturn templateElement.parent ? el : toWidget( el, viewWriter );\n\t\t\t}\n\t\t} ) );\n\n\t\t// Postfix elements to make sure a templates structure is always correct.\n\t\tthis.editor.templates.registerPostFixer( [ 'tabs' ], ( templateElement, item, writer ) => {\n\t\t\tlet changed = false;\n\t\t\tif ( item.childCount === 0 ) {\n\t\t\t\twriter.insertElement( `ck__${ templateElement.contains[ 0 ] }`, item, 'end' );\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\treturn changed;\n\t\t} );\n\t}\n}\n\n","import Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport TemplateEditing from './templateediting';\nimport { getModelAttributes, getViewAttributes } from './utils/conversion';\nimport { upcastElementToElement } from '@ckeditor/ckeditor5-engine/src/conversion/upcast-converters';\nimport { downcastElementToElement } from '@ckeditor/ckeditor5-engine/src/conversion/downcast-converters';\n\n/**\n * Handles merged documents, with sections assigned that are added or removed.\n */\nexport default class MergeEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TemplateEditing ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\t// Allow the added and removed attributes on all template root elements.\n\t\tthis.editor.templates.findElementInfo( info => info.isTemplateRoot ).forEach( info => {\n\t\t\tthis.editor.model.schema.extend( info.name, {\n\t\t\t\tallowAttributes: [ 'added', 'removed' ],\n\t\t\t} );\n\t\t} );\n\n\t\t// Add a downcast converter for added and removed attributes.\n\t\tthis.editor.conversion.attributeToAttribute( {\n\t\t\tmodel: 'added',\n\t\t\tview: 'added',\n\t\t} );\n\n\t\tthis.editor.conversion.attributeToAttribute( {\n\t\t\tmodel: 'removed',\n\t\t\tview: 'removed',\n\t\t} );\n\n\t\t// TODO: This should probably be constrained to conflict elements.\n\t\tthis.editor.conversion.attributeToAttribute( {\n\t\t\tmodel: 'from',\n\t\t\tview: 'from',\n\t\t} );\n\n\t\t// Register the text-conflict elements.\n\t\tconst textElements = this.editor.templates.findElementInfo( info => info.type === 'text' );\n\t\ttextElements.forEach( info => {\n\t\t\tconst wrapper = `${ info.name }__conflict`;\n\t\t\tconst option = `${ wrapper }__option`;\n\n\t\t\tthis.editor.model.schema.register( wrapper, {\n\t\t\t\tallowWhere: info.name,\n\t\t\t} );\n\n\t\t\tthis.editor.model.schema.register( option, {\n\t\t\t\tallowIn: `${ info.name }__conflict`,\n\t\t\t\tallowAttributes: 'from',\n\t\t\t} );\n\n\t\t\tthis.editor.model.schema.extend( info.name, {\n\t\t\t\tallowIn: option,\n\t\t\t} );\n\n\t\t\tthis.editor.conversion.for( 'downcast' ).add( downcastElementToElement( {\n\t\t\t\tmodel: wrapper,\n\t\t\t\tview: ( modelElement, viewWriter ) => {\n\t\t\t\t\treturn viewWriter.createContainerElement( 'ck-conflict-text', getModelAttributes( info, modelElement ) );\n\t\t\t\t}\n\t\t\t} ), { priority: 'highest' } );\n\n\t\t\tthis.editor.conversion.for( 'downcast' ).add( downcastElementToElement( {\n\t\t\t\tmodel: option,\n\t\t\t\tview: ( modelElement, viewWriter ) => {\n\t\t\t\t\treturn viewWriter.createContainerElement( 'ck-conflict-option', {\n\t\t\t\t\t\tfrom: modelElement.getAttribute( 'from' ),\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} ), { priority: 'highest' } );\n\t\t} );\n\n\t\tthis.editor.conversion.for( 'upcast' ).add( upcastElementToElement( {\n\t\t\tview: viewElement => {\n\t\t\t\tif ( viewElement.name === 'ck-conflict-text' &&\n\t\t\t\t!!this.matchingTextElement( viewElement ) ) {\n\t\t\t\t\treturn { name: true };\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodel: ( viewElement, modelWriter ) => {\n\t\t\t\tconst textElement = this.matchingTextElement( viewElement ).pop();\n\t\t\t\treturn modelWriter.createElement(\n\t\t\t\t\t`${ textElement.name }__conflict`,\n\t\t\t\t\tgetViewAttributes( textElement, viewElement )\n\t\t\t\t);\n\t\t\t},\n\t\t} ), { priority: 'highest' } );\n\n\t\tthis.editor.conversion.for( 'upcast' ).add( upcastElementToElement( {\n\t\t\tview: viewElement =>\n\t\t\t\tviewElement.name === 'ck-conflict-option' &&\n\t\t\t\t!!this.matchingTextElement( viewElement.parent ) && { name: true },\n\t\t\tmodel: ( viewElement, modelWriter ) => {\n\t\t\t\tconst textElement = this.matchingTextElement( viewElement.parent ).pop();\n\t\t\t\treturn modelWriter.createElement(\n\t\t\t\t\t`${ textElement.name }__conflict__option`,\n\t\t\t\t\tgetViewAttributes( textElement, viewElement )\n\t\t\t\t);\n\t\t\t},\n\t\t} ), { priority: 'highest' } );\n\n\t\t// Media conflict elements register.\n\t\tconst mediaElements = this.editor.templates.findElementInfo( info => info.type === 'drupal-media' );\n\t\tmediaElements.forEach( info => {\n\t\t\tconst wrapper = `${ info.name }__media__conflict`;\n\t\t\tconst option = `${ wrapper }__option`;\n\n\t\t\tthis.editor.model.schema.register( wrapper, {\n\t\t\t\tallowIn: info.parent.name,\n\t\t\t} );\n\n\t\t\tthis.editor.model.schema.register( option, {\n\t\t\t\tallowIn: wrapper,\n\t\t\t\tallowAttributes: [ 'from', 'position' ],\n\t\t\t} );\n\n\t\t\tthis.editor.model.schema.extend( info.name, {\n\t\t\t\tallowIn: option,\n\t\t\t} );\n\n\t\t\tthis.editor.conversion.for( 'downcast' ).add( downcastElementToElement( {\n\t\t\t\tmodel: wrapper,\n\t\t\t\tview: ( modelElement, viewWriter ) => {\n\t\t\t\t\treturn viewWriter.createContainerElement( 'ck-conflict-media', getModelAttributes( info, modelElement ) );\n\t\t\t\t}\n\t\t\t} ), { priority: 'highest' } );\n\n\t\t\tthis.editor.conversion.for( 'downcast' ).add( downcastElementToElement( {\n\t\t\t\tmodel: option,\n\t\t\t\tview: ( modelElement, viewWriter ) => {\n\t\t\t\t\treturn viewWriter.createContainerElement( 'ck-conflict-media-option', {\n\t\t\t\t\t\tfrom: modelElement.getAttribute( 'from' ),\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} ), { priority: 'highest' } );\n\n\t\t\tthis.editor.conversion.for( 'upcast' ).add( upcastElementToElement( {\n\t\t\t\tview: viewElement => viewElement.name === 'ck-conflict-media' && { name: true },\n\t\t\t\tmodel: ( viewElement, modelWriter ) => {\n\t\t\t\t\tconst textElement = this.editor.templates.findElementInfo( info => info.type == 'container' ).pop();\n\t\t\t\t\treturn modelWriter.createElement(\n\t\t\t\t\t\twrapper,\n\t\t\t\t\t\tgetViewAttributes( textElement, viewElement )\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t} ), { priority: 'highest' } );\n\n\t\t\tthis.editor.conversion.for( 'upcast' ).add( upcastElementToElement( {\n\t\t\t\tview: viewElement => viewElement.name === 'ck-conflict-media-option' && { name: true },\n\t\t\t\tmodel: ( viewElement, modelWriter ) => {\n\t\t\t\t\tconst textElement = this.editor.templates.findElementInfo( info => info.type == 'container' ).pop();\n\t\t\t\t\treturn modelWriter.createElement(\n\t\t\t\t\t\toption,\n\t\t\t\t\t\tgetViewAttributes( textElement, viewElement )\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t} ), { priority: 'highest' } );\n\t\t} );\n\t}\n\n\tmatchingTextElement( viewElement ) {\n\t\treturn this.editor.templates.findElementInfo( info => {\n\t\t\treturn info.matches( viewElement );\n\t\t} );\n\t}\n}\n"],"sourceRoot":""}